
003_I2C_COMMUNUCATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009c48  08009c48  00019c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a114  0800a114  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a114  0800a114  0001a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a11c  0800a11c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a11c  0800a11c  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000124  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f19a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f29  00000000  00000000  0002f3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa8  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb5  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5e2  00000000  00000000  0005546d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30da  00000000  00000000  00063a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136b29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000441c  00000000  00000000  00136b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c30 	.word	0x08009c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009c30 	.word	0x08009c30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char uartBuf[25];
	uint8_t i2cBuf[2] = {0};
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	81bb      	strh	r3, [r7, #12]
	float ftemp;
	volatile int8_t t_frac = 0, t_int= 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	72fb      	strb	r3, [r7, #11]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fcbd 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f8cd 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f9ef 	bl	80013e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100a:	f000 f985 	bl	8001318 <MX_I2C1_Init>
  MX_ADC1_Init();
 800100e:	f000 f931 	bl	8001274 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001012:	f000 f9bf 	bl	8001394 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef SLAVE_BOARD
  uint16_t rawValue;
  uint32_t lastConversion;

  MX_ADC1_Init();
 8001016:	f000 f92d 	bl	8001274 <MX_ADC1_Init>
  HAL_ADC_Start(&hadc1);
 800101a:	4857      	ldr	r0, [pc, #348]	; (8001178 <main+0x18c>)
 800101c:	f000 fd64 	bl	8001ae8 <HAL_ADC_Start>
  while(1) {
    HAL_I2C_EnableListen_IT(&hi2c1);
 8001020:	4856      	ldr	r0, [pc, #344]	; (800117c <main+0x190>)
 8001022:	f001 fe25 	bl	8002c70 <HAL_I2C_EnableListen_IT>
    while(!transferRequested) {
 8001026:	e063      	b.n	80010f0 <main+0x104>
      if(HAL_GetTick() - lastConversion > 1000L) {
 8001028:	f000 fd0e 	bl	8001a48 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001036:	d95b      	bls.n	80010f0 <main+0x104>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	484e      	ldr	r0, [pc, #312]	; (8001178 <main+0x18c>)
 800103e:	f000 fe25 	bl	8001c8c <HAL_ADC_PollForConversion>

        rawValue = HAL_ADC_GetValue(&hadc1);
 8001042:	484d      	ldr	r0, [pc, #308]	; (8001178 <main+0x18c>)
 8001044:	f000 fead 	bl	8001da2 <HAL_ADC_GetValue>
 8001048:	4603      	mov	r3, r0
 800104a:	867b      	strh	r3, [r7, #50]	; 0x32
        ftemp = ((float)rawValue) / 4095 * 3000;
 800104c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001056:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001180 <main+0x194>
 800105a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001184 <main+0x198>
 8001062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001066:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        ftemp = ((ftemp - 760.0) / 2.5) + 25;
 800106a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <main+0x19c>)
 8001076:	f7ff f907 	bl	8000288 <__aeabi_dsub>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <main+0x1a0>)
 8001088:	f7ff fbe0 	bl	800084c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <main+0x1a4>)
 800109a:	f7ff f8f7 	bl	800028c <__adddf3>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd9f 	bl	8000be8 <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        t_int = ftemp;
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010ba:	793b      	ldrb	r3, [r7, #4]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	72bb      	strb	r3, [r7, #10]
        t_frac = (ftemp - t_int)*100;
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001194 <main+0x1a8>
 80010d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	72fb      	strb	r3, [r7, #11]
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);

        sprintf(uartBuf, "t_int: %d - t_frac: %d\r\n", t_int, t_frac);
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
*/
        lastConversion = HAL_GetTick();
 80010ea:	f000 fcad 	bl	8001a48 <HAL_GetTick>
 80010ee:	6378      	str	r0, [r7, #52]	; 0x34
    while(!transferRequested) {
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <main+0x1ac>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d096      	beq.n	8001028 <main+0x3c>
      }
    }



    if(transferDirection == TRANSFER_DIR_WRITE) {
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <main+0x1b0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d18d      	bne.n	8001020 <main+0x34>
      /* Master is sending register address */
      HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, i2cBuf, 1, I2C_FIRST_FRAME);
 8001104:	f107 010c 	add.w	r1, r7, #12
 8001108:	2301      	movs	r3, #1
 800110a:	2201      	movs	r2, #1
 800110c:	481b      	ldr	r0, [pc, #108]	; (800117c <main+0x190>)
 800110e:	f001 fd3c 	bl	8002b8a <HAL_I2C_Slave_Seq_Receive_IT>
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_LISTEN);
 8001112:	bf00      	nop
 8001114:	4819      	ldr	r0, [pc, #100]	; (800117c <main+0x190>)
 8001116:	f002 f849 	bl	80031ac <HAL_I2C_GetState>
 800111a:	4603      	mov	r3, r0
 800111c:	2b28      	cmp	r3, #40	; 0x28
 800111e:	d1f9      	bne.n	8001114 <main+0x128>

      switch(i2cBuf[0]) {
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d006      	beq.n	8001134 <main+0x148>
 8001126:	2b0f      	cmp	r3, #15
 8001128:	dc11      	bgt.n	800114e <main+0x162>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <main+0x14e>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d008      	beq.n	8001144 <main+0x158>
 8001132:	e00c      	b.n	800114e <main+0x162>
        case WHO_AM_I_REGISTER:
          i2cBuf[0] = WHO_AM_I_VALUE;
 8001134:	23bc      	movs	r3, #188	; 0xbc
 8001136:	733b      	strb	r3, [r7, #12]
          break;
 8001138:	e00b      	b.n	8001152 <main+0x166>
        case TEMP_OUT_INT_REGISTER:
          i2cBuf[0] = t_int;
 800113a:	7abb      	ldrb	r3, [r7, #10]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
          break;
 8001142:	e006      	b.n	8001152 <main+0x166>
        case TEMP_OUT_FRAC_REGISTER:
          i2cBuf[0] = t_frac;
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	733b      	strb	r3, [r7, #12]
          break;
 800114c:	e001      	b.n	8001152 <main+0x166>
        default:
          i2cBuf[0] = 0xFF;
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	733b      	strb	r3, [r7, #12]
      }

      HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c1, i2cBuf, 1, I2C_LAST_FRAME);
 8001152:	f107 010c 	add.w	r1, r7, #12
 8001156:	2320      	movs	r3, #32
 8001158:	2201      	movs	r2, #1
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <main+0x190>)
 800115c:	f001 fca2 	bl	8002aa4 <HAL_I2C_Slave_Seq_Transmit_IT>
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001160:	bf00      	nop
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <main+0x190>)
 8001164:	f002 f822 	bl	80031ac <HAL_I2C_GetState>
 8001168:	4603      	mov	r3, r0
 800116a:	2b20      	cmp	r3, #32
 800116c:	d1f9      	bne.n	8001162 <main+0x176>
      transferRequested = 0;
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <main+0x1ac>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    HAL_I2C_EnableListen_IT(&hi2c1);
 8001174:	e754      	b.n	8001020 <main+0x34>
 8001176:	bf00      	nop
 8001178:	2000025c 	.word	0x2000025c
 800117c:	20000208 	.word	0x20000208
 8001180:	457ff000 	.word	0x457ff000
 8001184:	453b8000 	.word	0x453b8000
 8001188:	4087c000 	.word	0x4087c000
 800118c:	40040000 	.word	0x40040000
 8001190:	40390000 	.word	0x40390000
 8001194:	42c80000 	.word	0x42c80000
 8001198:	200002ec 	.word	0x200002ec
 800119c:	200002a4 	.word	0x200002a4

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	; 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	; 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 f910 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <SystemClock_Config+0xcc>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <SystemClock_Config+0xd0>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <SystemClock_Config+0xd0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001210:	2308      	movs	r3, #8
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001214:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800121e:	2307      	movs	r3, #7
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fa20 	bl	800466c <HAL_RCC_OscConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001232:	f000 f973 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001236:	230f      	movs	r3, #15
 8001238:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123a:	2302      	movs	r3, #2
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001242:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2105      	movs	r1, #5
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fc81 	bl	8004b5c <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001260:	f000 f95c 	bl	800151c <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3750      	adds	r7, #80	; 0x50
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_ADC1_Init+0x98>)
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <MX_ADC1_Init+0x9c>)
 800128a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_ADC1_Init+0x98>)
 800128e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001292:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_ADC1_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_ADC1_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_ADC1_Init+0x98>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_ADC1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_ADC1_Init+0x98>)
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <MX_ADC1_Init+0xa0>)
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_ADC1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_ADC1_Init+0x98>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_ADC1_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_ADC1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_ADC1_Init+0x98>)
 80012d6:	f000 fbc3 	bl	8001a60 <HAL_ADC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012e0:	f000 f91c 	bl	800151c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012e4:	2310      	movs	r3, #16
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012ec:	2307      	movs	r3, #7
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0x98>)
 80012f6:	f000 fd61 	bl	8001dbc <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001300:	f000 f90c 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000025c 	.word	0x2000025c
 8001310:	40012000 	.word	0x40012000
 8001314:	0f000001 	.word	0x0f000001

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_I2C1_Init+0x70>)
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <MX_I2C1_Init+0x74>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 88000;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_I2C1_Init+0x70>)
 8001324:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <MX_I2C1_Init+0x78>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_I2C1_Init+0x70>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = I2C_SLAVE_ADDR;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_I2C1_Init+0x70>)
 8001330:	22aa      	movs	r2, #170	; 0xaa
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_I2C1_Init+0x70>)
 8001336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_I2C1_Init+0x70>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_I2C1_Init+0x70>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_I2C1_Init+0x70>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_I2C1_Init+0x70>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_I2C1_Init+0x70>)
 8001356:	f001 fa61 	bl	800281c <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 f8dc 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	201f      	movs	r0, #31
 800136a:	f001 f820 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800136e:	201f      	movs	r0, #31
 8001370:	f001 f839 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2020      	movs	r0, #32
 800137a:	f001 f818 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800137e:	2020      	movs	r0, #32
 8001380:	f001 f831 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END I2C1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000208 	.word	0x20000208
 800138c:	40005400 	.word	0x40005400
 8001390:	000157c0 	.word	0x000157c0

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fdc2 	bl	8004f54 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f8a1 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002a8 	.word	0x200002a8
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_GPIO_Init+0xb8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_GPIO_Init+0xb8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <MX_GPIO_Init+0xb8>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0xbc>)
 8001476:	f001 f99d 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800147a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_GPIO_Init+0xbc>)
 8001494:	f000 fff2 	bl	800247c <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020c00 	.word	0x40020c00

080014a8 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
#ifdef SLAVE_BOARD
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
 80014b4:	4613      	mov	r3, r2
 80014b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  if(hi2c->Instance == I2C1) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_I2C_AddrCallback+0x40>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_I2C_AddrCallback+0x36>
    transferRequested = 1;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_I2C_AddrCallback+0x44>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    transferDirection = TransferDirection;
 80014c8:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_I2C_AddrCallback+0x48>)
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	7013      	strb	r3, [r2, #0]
    HAL_I2C_EnableListen_IT(&hi2c1);
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_I2C_AddrCallback+0x4c>)
 80014d0:	f001 fbce 	bl	8002c70 <HAL_I2C_EnableListen_IT>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80014d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <HAL_I2C_AddrCallback+0x50>)
 80014da:	f001 f984 	bl	80027e6 <HAL_GPIO_TogglePin>
  }
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40005400 	.word	0x40005400
 80014ec:	200002ec 	.word	0x200002ec
 80014f0:	200002a4 	.word	0x200002a4
 80014f4:	20000208 	.word	0x20000208
 80014f8:	40020c00 	.word	0x40020c00

080014fc <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <HAL_I2C_ErrorCallback+0x1c>)
 800150a:	f001 f96c 	bl	80027e6 <HAL_GPIO_TogglePin>

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020c00 	.word	0x40020c00

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_MspInit+0x4c>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_MspInit+0x4c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001566:	2007      	movs	r0, #7
 8001568:	f000 ff16 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_ADC_MspInit+0x3c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10d      	bne.n	80015a6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_ADC_MspInit+0x40>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_ADC_MspInit+0x40>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_ADC_MspInit+0x40>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40012000 	.word	0x40012000
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_I2C_MspInit+0xa4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d13b      	bne.n	8001656 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23c0      	movs	r3, #192	; 0xc0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fe:	2312      	movs	r3, #18
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160a:	2304      	movs	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4814      	ldr	r0, [pc, #80]	; (8001668 <HAL_I2C_MspInit+0xac>)
 8001616:	f000 ff31 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_I2C_MspInit+0xa8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	201f      	movs	r0, #31
 800163c:	f000 feb7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001640:	201f      	movs	r0, #31
 8001642:	f000 fed0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2020      	movs	r0, #32
 800164c:	f000 feaf 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001650:	2020      	movs	r0, #32
 8001652:	f000 fec8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_UART_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x88>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0x8c>)
 80016e2:	f000 fecb 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f96a 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <I2C1_EV_IRQHandler+0x10>)
 8001756:	f001 fac1 	bl	8002cdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000208 	.word	0x20000208

08001764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <I2C1_ER_IRQHandler+0x10>)
 800176a:	f001 fc28 	bl	8002fbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000208 	.word	0x20000208

08001778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_kill>:

int _kill(int pid, int sig)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001792:	f003 fdf5 	bl	8005380 <__errno>
 8001796:	4603      	mov	r3, r0
 8001798:	2216      	movs	r2, #22
 800179a:	601a      	str	r2, [r3, #0]
	return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_exit>:

void _exit (int status)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe7 	bl	8001788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ba:	e7fe      	b.n	80017ba <_exit+0x12>

080017bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
	}

return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
	}
	return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001856:	605a      	str	r2, [r3, #4]
	return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_isatty>:

int _isatty(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f003 fd5a 	bl	8005380 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	200001fc 	.word	0x200001fc
 8001900:	20000308 	.word	0x20000308

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f003 fd19 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fb47 	bl	8000fec <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800196c:	0800a124 	.word	0x0800a124
  ldr r2, =_sbss
 8001970:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001974:	20000304 	.word	0x20000304

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fcf7 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fdba 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fd0f 	bl	8002402 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 fcd7 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	200002f0 	.word	0x200002f0

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	200002f0 	.word	0x200002f0

08001a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e033      	b.n	8001ade <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fd7a 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa6:	f023 0302 	bic.w	r3, r3, #2
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 faa4 	bl	8002000 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ace:	e001      	b.n	8001ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Start+0x1a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0b2      	b.n	8001c68 <HAL_ADC_Start+0x180>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d018      	beq.n	8001b4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b28:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <HAL_ADC_Start+0x18c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_ADC_Start+0x190>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d17a      	bne.n	8001c4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b96:	d106      	bne.n	8001ba6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f023 0206 	bic.w	r2, r3, #6
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ba4:	e002      	b.n	8001bac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_ADC_Start+0x194>)
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d12a      	bne.n	8001c24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <HAL_ADC_Start+0x198>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d015      	beq.n	8001c04 <HAL_ADC_Start+0x11c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_ADC_Start+0x19c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d105      	bne.n	8001bee <HAL_ADC_Start+0x106>
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_ADC_Start+0x194>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_ADC_Start+0x1a0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d136      	bne.n	8001c66 <HAL_ADC_Start+0x17e>
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_ADC_Start+0x194>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d130      	bne.n	8001c66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d129      	bne.n	8001c66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	e020      	b.n	8001c66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <HAL_ADC_Start+0x198>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d11b      	bne.n	8001c66 <HAL_ADC_Start+0x17e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d114      	bne.n	8001c66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e00b      	b.n	8001c66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000000 	.word	0x20000000
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	40012300 	.word	0x40012300
 8001c80:	40012000 	.word	0x40012000
 8001c84:	40012100 	.word	0x40012100
 8001c88:	40012200 	.word	0x40012200

08001c8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca8:	d113      	bne.n	8001cd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e063      	b.n	8001d9a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cd2:	f7ff feb9 	bl	8001a48 <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd8:	e021      	b.n	8001d1e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d01d      	beq.n	8001d1e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_ADC_PollForConversion+0x6c>
 8001ce8:	f7ff feae 	bl	8001a48 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d212      	bcs.n	8001d1e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d00b      	beq.n	8001d1e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f043 0204 	orr.w	r2, r3, #4
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e03d      	b.n	8001d9a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d1d6      	bne.n	8001cda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0212 	mvn.w	r2, #18
 8001d34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d123      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11f      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d111      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1c>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e105      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x228>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d925      	bls.n	8001e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b1e      	subs	r3, #30
 8001dfe:	2207      	movs	r2, #7
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68d9      	ldr	r1, [r3, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4403      	add	r3, r0
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	e022      	b.n	8001e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	2207      	movs	r2, #7
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4403      	add	r3, r0
 8001e70:	409a      	lsls	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d824      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b05      	subs	r3, #5
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b05      	subs	r3, #5
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eca:	e04c      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d824      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b23      	subs	r3, #35	; 0x23
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b23      	subs	r3, #35	; 0x23
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	e023      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b41      	subs	r3, #65	; 0x41
 8001f30:	221f      	movs	r2, #31
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	3b41      	subs	r3, #65	; 0x41
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_ADC_ConfigChannel+0x234>)
 8001f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_ADC_ConfigChannel+0x238>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d109      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <HAL_ADC_ConfigChannel+0x238>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d123      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d003      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x1e6>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d11b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d111      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_ADC_ConfigChannel+0x240>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9a      	lsrs	r2, r3, #18
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40012300 	.word	0x40012300
 8001ff4:	40012000 	.word	0x40012000
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <ADC_Init+0x1f0>)
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <ADC_Init+0x1f4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e00f      	b.n	80020fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0202 	bic.w	r2, r2, #2
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
 8002118:	005a      	lsls	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800214a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	3b01      	subs	r3, #1
 8002158:	035a      	lsls	r2, r3, #13
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	e007      	b.n	8002174 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002172:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	3b01      	subs	r3, #1
 8002190:	051a      	lsls	r2, r3, #20
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	025a      	lsls	r2, r3, #9
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	029a      	lsls	r2, r3, #10
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40012300 	.word	0x40012300
 80021f4:	0f000001 	.word	0x0f000001

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d004      	beq.n	8002438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e00c      	b.n	8002452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2205      	movs	r2, #5
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e16b      	b.n	8002770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 815a 	bne.w	800276a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80b4 	beq.w	800276a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_GPIO_Init+0x30c>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a5b      	ldr	r2, [pc, #364]	; (800278c <HAL_GPIO_Init+0x310>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x314>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x318>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x31c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x320>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x328>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4b      	ldr	r2, [pc, #300]	; (80027ac <HAL_GPIO_Init+0x330>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x20a>
 8002682:	2307      	movs	r3, #7
 8002684:	e00e      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002686:	2308      	movs	r3, #8
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268a:	2306      	movs	r3, #6
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4935      	ldr	r1, [pc, #212]	; (800278c <HAL_GPIO_Init+0x310>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_GPIO_Init+0x334>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_GPIO_Init+0x334>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae90 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40013800 	.word	0x40013800
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40020800 	.word	0x40020800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40021400 	.word	0x40021400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40021c00 	.word	0x40021c00
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d0:	e003      	b.n	80027da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	041a      	lsls	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	041a      	lsls	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43d9      	mvns	r1, r3
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e12b      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe feba 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002880:	f002 fb40 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a81      	ldr	r2, [pc, #516]	; (8002a90 <HAL_I2C_Init+0x274>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d807      	bhi.n	80028a0 <HAL_I2C_Init+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_I2C_Init+0x278>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e006      	b.n	80028ae <HAL_I2C_Init+0x92>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_I2C_Init+0x27c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0e7      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <HAL_I2C_Init+0x280>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a6a      	ldr	r2, [pc, #424]	; (8002a90 <HAL_I2C_Init+0x274>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d802      	bhi.n	80028f0 <HAL_I2C_Init+0xd4>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	e009      	b.n	8002904 <HAL_I2C_Init+0xe8>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_I2C_Init+0x284>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	3301      	adds	r3, #1
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	495c      	ldr	r1, [pc, #368]	; (8002a90 <HAL_I2C_Init+0x274>)
 8002920:	428b      	cmp	r3, r1
 8002922:	d819      	bhi.n	8002958 <HAL_I2C_Init+0x13c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e59      	subs	r1, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002938:	400b      	ands	r3, r1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_I2C_Init+0x138>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e59      	subs	r1, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fbb1 f3f3 	udiv	r3, r1, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	e051      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002954:	2304      	movs	r3, #4
 8002956:	e04f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d111      	bne.n	8002984 <HAL_I2C_Init+0x168>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e58      	subs	r0, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e012      	b.n	80029aa <HAL_I2C_Init+0x18e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	0099      	lsls	r1, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x196>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_I2C_Init+0x1bc>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e58      	subs	r0, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	440b      	add	r3, r1
 80029c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6809      	ldr	r1, [r1, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6911      	ldr	r1, [r2, #16]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	000186a0 	.word	0x000186a0
 8002a94:	001e847f 	.word	0x001e847f
 8002a98:	003d08ff 	.word	0x003d08ff
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ac0:	2b28      	cmp	r3, #40	; 0x28
 8002ac2:	d15b      	bne.n	8002b7c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e054      	b.n	8002b7e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e04d      	b.n	8002b7e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d007      	beq.n	8002b08 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2229      	movs	r2, #41	; 0x29
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ba6:	2b28      	cmp	r3, #40	; 0x28
 8002ba8:	d15b      	bne.n	8002c62 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e054      	b.n	8002c64 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e04d      	b.n	8002c64 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d007      	beq.n	8002bee <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	222a      	movs	r2, #42	; 0x2a
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002c5c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d124      	bne.n	8002cce <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2228      	movs	r2, #40	; 0x28
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d007      	beq.n	8002caa <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002cc8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d003      	beq.n	8002d14 <HAL_I2C_EV_IRQHandler+0x38>
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	f040 80c1 	bne.w	8002e96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_I2C_EV_IRQHandler+0x6e>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d34:	d003      	beq.n	8002d3e <HAL_I2C_EV_IRQHandler+0x62>
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_EV_IRQHandler+0x66>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_I2C_EV_IRQHandler+0x68>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	f000 8132 	beq.w	8002fae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x92>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	0a5b      	lsrs	r3, r3, #9
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 fc67 	bl	8004634 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fd6f 	bl	800384a <I2C_Master_SB>
 8002d6c:	e092      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0xb2>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	0a5b      	lsrs	r3, r3, #9
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fde5 	bl	8003956 <I2C_Master_ADD10>
 8002d8c:	e082      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0xd2>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0a5b      	lsrs	r3, r3, #9
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fdff 	bl	80039aa <I2C_Master_ADDR>
 8002dac:	e072      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03b      	beq.n	8002e32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc8:	f000 80f3 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	09db      	lsrs	r3, r3, #7
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9e9 	bl	80031c8 <I2C_MasterTransmit_TXE>
 8002df6:	e04d      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80d6 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	0a5b      	lsrs	r3, r3, #9
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80cf 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e14:	7bbb      	ldrb	r3, [r7, #14]
 8002e16:	2b21      	cmp	r3, #33	; 0x21
 8002e18:	d103      	bne.n	8002e22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa70 	bl	8003300 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e20:	e0c7      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	f040 80c4 	bne.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fade 	bl	80033ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e30:	e0bf      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e40:	f000 80b7 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00f      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fb53 	bl	8003514 <I2C_MasterReceive_RXNE>
 8002e6e:	e011      	b.n	8002e94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 809a 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	0a5b      	lsrs	r3, r3, #9
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8093 	beq.w	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fbf2 	bl	8003676 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	e08e      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e007      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x20e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	0a5b      	lsrs	r3, r3, #9
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 ffb0 	bl	8003e48 <I2C_Slave_ADDR>
 8002ee8:	e066      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x22e>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	0a5b      	lsrs	r3, r3, #9
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 ffea 	bl	8003edc <I2C_Slave_STOPF>
 8002f08:	e056      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f0a:	7bbb      	ldrb	r3, [r7, #14]
 8002f0c:	2b21      	cmp	r3, #33	; 0x21
 8002f0e:	d002      	beq.n	8002f16 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f10:	7bbb      	ldrb	r3, [r7, #14]
 8002f12:	2b29      	cmp	r3, #41	; 0x29
 8002f14:	d125      	bne.n	8002f62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	09db      	lsrs	r3, r3, #7
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00f      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	0a9b      	lsrs	r3, r3, #10
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fec6 	bl	8003ccc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f40:	e039      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d033      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0a5b      	lsrs	r3, r3, #9
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02d      	beq.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fef3 	bl	8003d46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f60:	e029      	b.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00f      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	0a9b      	lsrs	r3, r3, #10
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fefe 	bl	8003d88 <I2C_SlaveReceive_RXNE>
 8002f8c:	e014      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	0a5b      	lsrs	r3, r3, #9
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 ff2c 	bl	8003e04 <I2C_SlaveReceive_BTF>
 8002fac:	e004      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	; 0x28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <HAL_I2C_ER_IRQHandler+0x4e>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800300a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0x78>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003034:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	0a9b      	lsrs	r3, r3, #10
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03f      	beq.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d039      	beq.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800304e:	7efb      	ldrb	r3, [r7, #27]
 8003050:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003068:	7ebb      	ldrb	r3, [r7, #26]
 800306a:	2b20      	cmp	r3, #32
 800306c:	d112      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10f      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b21      	cmp	r3, #33	; 0x21
 8003078:	d008      	beq.n	800308c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b29      	cmp	r3, #41	; 0x29
 800307e:	d005      	beq.n	800308c <HAL_I2C_ER_IRQHandler+0xce>
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b28      	cmp	r3, #40	; 0x28
 8003084:	d106      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b21      	cmp	r3, #33	; 0x21
 800308a:	d103      	bne.n	8003094 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 f855 	bl	800413c <I2C_Slave_AF>
 8003092:	e016      	b.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d002      	beq.n	80030b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80030ac:	7efb      	ldrb	r3, [r7, #27]
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	0adb      	lsrs	r3, r3, #11
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x12e>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80030ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 f88c 	bl	800421c <I2C_ITError>
  }
}
 8003104:	bf00      	nop
 8003106:	3728      	adds	r7, #40	; 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d150      	bne.n	8003290 <I2C_MasterTransmit_TXE+0xc8>
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b21      	cmp	r3, #33	; 0x21
 80031f2:	d14d      	bne.n	8003290 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d01d      	beq.n	8003236 <I2C_MasterTransmit_TXE+0x6e>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d01a      	beq.n	8003236 <I2C_MasterTransmit_TXE+0x6e>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003206:	d016      	beq.n	8003236 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003216:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2211      	movs	r2, #17
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ff6c 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003234:	e060      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003244:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003254:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d107      	bne.n	8003280 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff79 	bl	8003170 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800327e:	e03b      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff3f 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800328e:	e033      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b21      	cmp	r3, #33	; 0x21
 8003294:	d005      	beq.n	80032a2 <I2C_MasterTransmit_TXE+0xda>
 8003296:	7bbb      	ldrb	r3, [r7, #14]
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d12d      	bne.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b22      	cmp	r3, #34	; 0x22
 80032a0:	d12a      	bne.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d108      	bne.n	80032be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032bc:	e01c      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d103      	bne.n	80032d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f88e 	bl	80033ec <I2C_MemoryTransmit_TXE_BTF>
}
 80032d0:	e012      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032f6:	e7ff      	b.n	80032f8 <I2C_MasterTransmit_TXE+0x130>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b21      	cmp	r3, #33	; 0x21
 8003318:	d164      	bne.n	80033e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003348:	e04c      	b.n	80033e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d01d      	beq.n	800338c <I2C_MasterTransmit_BTF+0x8c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b20      	cmp	r3, #32
 8003354:	d01a      	beq.n	800338c <I2C_MasterTransmit_BTF+0x8c>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800335c:	d016      	beq.n	800338c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2211      	movs	r2, #17
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff fec1 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
}
 800338a:	e02b      	b.n	80033e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d107      	bne.n	80033d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fece 	bl	8003170 <HAL_I2C_MemTxCpltCallback>
}
 80033d4:	e006      	b.n	80033e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fe94 	bl	800310c <HAL_I2C_MasterTxCpltCallback>
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11d      	bne.n	8003440 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10b      	bne.n	8003424 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	b2da      	uxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	1c9a      	adds	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003422:	e073      	b.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	b29b      	uxth	r3, r3
 800342a:	121b      	asrs	r3, r3, #8
 800342c:	b2da      	uxtb	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800343e:	e065      	b.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10b      	bne.n	8003460 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344c:	b2da      	uxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800345e:	e055      	b.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	2b02      	cmp	r3, #2
 8003466:	d151      	bne.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b22      	cmp	r3, #34	; 0x22
 800346c:	d10d      	bne.n	800348a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003488:	e040      	b.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b21      	cmp	r3, #33	; 0x21
 8003498:	d112      	bne.n	80034c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034be:	e025      	b.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d120      	bne.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b21      	cmp	r3, #33	; 0x21
 80034ce:	d11d      	bne.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe32 	bl	8003170 <HAL_I2C_MemTxCpltCallback>
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b22      	cmp	r3, #34	; 0x22
 8003526:	f040 80a2 	bne.w	800366e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d921      	bls.n	800357c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b03      	cmp	r3, #3
 8003566:	f040 8082 	bne.w	800366e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800357a:	e078      	b.n	800366e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2b02      	cmp	r3, #2
 8003582:	d074      	beq.n	800366e <I2C_MasterReceive_RXNE+0x15a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <I2C_MasterReceive_RXNE+0x7c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d16e      	bne.n	800366e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f001 f81d 	bl	80045d0 <I2C_WaitOnSTOPRequestThroughIT>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d142      	bne.n	8003622 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d10a      	bne.n	800360c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff fdbd 	bl	8003184 <HAL_I2C_MemRxCpltCallback>
}
 800360a:	e030      	b.n	800366e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2212      	movs	r2, #18
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fd80 	bl	8003120 <HAL_I2C_MasterRxCpltCallback>
}
 8003620:	e025      	b.n	800366e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003630:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd ff47 	bl	80014fc <HAL_I2C_ErrorCallback>
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b04      	cmp	r3, #4
 800368c:	d11b      	bne.n	80036c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80036c4:	e0bd      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d129      	bne.n	8003724 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00a      	beq.n	80036fc <I2C_MasterReceive_BTF+0x86>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d007      	beq.n	80036fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003722:	e08e      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d176      	bne.n	800381c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <I2C_MasterReceive_BTF+0xc4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d108      	bne.n	800374c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e019      	b.n	8003780 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <I2C_MasterReceive_BTF+0xe2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d108      	bne.n	800376a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e00a      	b.n	8003780 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b10      	cmp	r3, #16
 800376e:	d007      	beq.n	8003780 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d10a      	bne.n	8003806 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fcc0 	bl	8003184 <HAL_I2C_MemRxCpltCallback>
}
 8003804:	e01d      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2212      	movs	r2, #18
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fc83 	bl	8003120 <HAL_I2C_MasterRxCpltCallback>
}
 800381a:	e012      	b.n	8003842 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d117      	bne.n	800388e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003876:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003878:	e067      	b.n	800394a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	b2da      	uxtb	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
}
 800388c:	e05d      	b.n	800394a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d133      	bne.n	8003900 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d109      	bne.n	80038b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	e008      	b.n	80038ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <I2C_Master_SB+0x92>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d032      	beq.n	800394a <I2C_Master_SB+0x100>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02d      	beq.n	800394a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fc:	605a      	str	r2, [r3, #4]
}
 80038fe:	e024      	b.n	800394a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10e      	bne.n	8003926 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	b29b      	uxth	r3, r3
 800390e:	11db      	asrs	r3, r3, #7
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f003 0306 	and.w	r3, r3, #6
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f063 030f 	orn	r3, r3, #15
 800391c:	b2da      	uxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]
}
 8003924:	e011      	b.n	800394a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10d      	bne.n	800394a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	b29b      	uxth	r3, r3
 8003934:	11db      	asrs	r3, r3, #7
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0306 	and.w	r3, r3, #6
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f063 030e 	orn	r3, r3, #14
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <I2C_Master_ADD10+0x26>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <I2C_Master_ADD10+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399c:	605a      	str	r2, [r3, #4]
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b091      	sub	sp, #68	; 0x44
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b22      	cmp	r3, #34	; 0x22
 80039d2:	f040 8169 	bne.w	8003ca8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <I2C_Master_ADDR+0x54>
 80039de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d10b      	bne.n	80039fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	e160      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <I2C_Master_ADDR+0x98>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a0e:	d118      	bne.n	8003a42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a40:	e13e      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e115      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 808a 	bne.w	8003b94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a86:	d137      	bne.n	8003af8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d113      	bne.n	8003ad0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	e0e7      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	623b      	str	r3, [r7, #32]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e0d3      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d02e      	beq.n	8003b5c <I2C_Master_ADDR+0x1b2>
 8003afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d02b      	beq.n	8003b5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b06:	2b12      	cmp	r3, #18
 8003b08:	d102      	bne.n	8003b10 <I2C_Master_ADDR+0x166>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d125      	bne.n	8003b5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00e      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d00b      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d008      	beq.n	8003b34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	e0a1      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e085      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d14d      	bne.n	8003c3a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d016      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d013      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d010      	beq.n	8003bd2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf0:	d117      	bne.n	8003c22 <I2C_Master_ADDR+0x278>
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf8:	d00b      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d008      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d005      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d002      	beq.n	8003c12 <I2C_Master_ADDR+0x268>
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d107      	bne.n	8003c22 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	e032      	b.n	8003ca0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c58:	d117      	bne.n	8003c8a <I2C_Master_ADDR+0x2e0>
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c60:	d00b      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d008      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d005      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d002      	beq.n	8003c7a <I2C_Master_ADDR+0x2d0>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ca6:	e00b      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
}
 8003cbe:	e7ff      	b.n	8003cc0 <I2C_Master_ADDR+0x316>
 8003cc0:	bf00      	nop
 8003cc2:	3744      	adds	r7, #68	; 0x44
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02b      	beq.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d114      	bne.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b29      	cmp	r3, #41	; 0x29
 8003d18:	d111      	bne.n	8003d3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2228      	movs	r2, #40	; 0x28
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff f9fb 	bl	8003134 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02c      	beq.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd6:	d111      	bne.n	8003dfc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2222      	movs	r2, #34	; 0x22
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2228      	movs	r2, #40	; 0x28
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f9a6 	bl	8003148 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e62:	2b28      	cmp	r3, #40	; 0x28
 8003e64:	d127      	bne.n	8003eb6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	09db      	lsrs	r3, r3, #7
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	81bb      	strh	r3, [r7, #12]
 8003e98:	e002      	b.n	8003ea0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ea8:	89ba      	ldrh	r2, [r7, #12]
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fafa 	bl	80014a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003eb4:	e00e      	b.n	8003ed4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003efa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d172      	bne.n	8004020 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	d002      	beq.n	8003f46 <I2C_Slave_STOPF+0x6a>
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d135      	bne.n	8003fb2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fa6d 	bl	800245e <HAL_DMA_GetState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d049      	beq.n	800401e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a69      	ldr	r2, [pc, #420]	; (8004134 <I2C_Slave_STOPF+0x258>)
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fa3f 	bl	800241a <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d03d      	beq.n	800401e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fb0:	e035      	b.n	800401e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fa37 	bl	800245e <HAL_DMA_GetState>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d014      	beq.n	8004020 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <I2C_Slave_STOPF+0x258>)
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fa09 	bl	800241a <HAL_DMA_Abort_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004018:	4610      	mov	r0, r2
 800401a:	4798      	blx	r3
 800401c:	e000      	b.n	8004020 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800401e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03e      	beq.n	80040a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d112      	bne.n	800405e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d112      	bne.n	8004092 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8b3 	bl	800421c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80040b6:	e039      	b.n	800412c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b2a      	cmp	r3, #42	; 0x2a
 80040bc:	d109      	bne.n	80040d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2228      	movs	r2, #40	; 0x28
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff f83b 	bl	8003148 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b28      	cmp	r3, #40	; 0x28
 80040dc:	d111      	bne.n	8004102 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <I2C_Slave_STOPF+0x25c>)
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff f82e 	bl	800315c <HAL_I2C_ListenCpltCallback>
}
 8004100:	e014      	b.n	800412c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b22      	cmp	r3, #34	; 0x22
 8004108:	d002      	beq.n	8004110 <I2C_Slave_STOPF+0x234>
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b22      	cmp	r3, #34	; 0x22
 800410e:	d10d      	bne.n	800412c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff f80e 	bl	8003148 <HAL_I2C_SlaveRxCpltCallback>
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	08004481 	.word	0x08004481
 8004138:	ffff0000 	.word	0xffff0000

0800413c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d002      	beq.n	800415e <I2C_Slave_AF+0x22>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d129      	bne.n	80041b2 <I2C_Slave_AF+0x76>
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b28      	cmp	r3, #40	; 0x28
 8004162:	d126      	bne.n	80041b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <I2C_Slave_AF+0xdc>)
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004178:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004182:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe ffd6 	bl	800315c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80041b0:	e02e      	b.n	8004210 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b21      	cmp	r3, #33	; 0x21
 80041b6:	d126      	bne.n	8004206 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <I2C_Slave_AF+0xdc>)
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe ff98 	bl	8003134 <HAL_I2C_SlaveTxCpltCallback>
}
 8004204:	e004      	b.n	8004210 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800420e:	615a      	str	r2, [r3, #20]
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	ffff0000 	.word	0xffff0000

0800421c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004232:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b10      	cmp	r3, #16
 8004238:	d002      	beq.n	8004240 <I2C_ITError+0x24>
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d10a      	bne.n	8004256 <I2C_ITError+0x3a>
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b22      	cmp	r3, #34	; 0x22
 8004244:	d107      	bne.n	8004256 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800425c:	2b28      	cmp	r3, #40	; 0x28
 800425e:	d107      	bne.n	8004270 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2228      	movs	r2, #40	; 0x28
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800426e:	e015      	b.n	800429c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d00a      	beq.n	8004296 <I2C_ITError+0x7a>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b60      	cmp	r3, #96	; 0x60
 8004284:	d007      	beq.n	8004296 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	d162      	bne.n	8004372 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d020      	beq.n	800430c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4a6a      	ldr	r2, [pc, #424]	; (8004478 <I2C_ITError+0x25c>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f89f 	bl	800241a <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8089 	beq.w	80043f6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3
 800430a:	e074      	b.n	80043f6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	4a59      	ldr	r2, [pc, #356]	; (8004478 <I2C_ITError+0x25c>)
 8004312:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe f87e 	bl	800241a <HAL_DMA_Abort_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d068      	beq.n	80043f6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d10b      	bne.n	800434a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800436c:	4610      	mov	r0, r2
 800436e:	4798      	blx	r3
 8004370:	e041      	b.n	80043f6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b60      	cmp	r3, #96	; 0x60
 800437c:	d125      	bne.n	80043ca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d10b      	bne.n	80043b2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe fee8 	bl	8003198 <HAL_I2C_AbortCpltCallback>
 80043c8:	e015      	b.n	80043f6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d10b      	bne.n	80043f0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fd f883 	bl	80014fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d113      	bne.n	8004470 <I2C_ITError+0x254>
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b28      	cmp	r3, #40	; 0x28
 800444c:	d110      	bne.n	8004470 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <I2C_ITError+0x260>)
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fe fe76 	bl	800315c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08004481 	.word	0x08004481
 800447c:	ffff0000 	.word	0xffff0000

08004480 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <I2C_DMAAbort+0x148>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <I2C_DMAAbort+0x14c>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0a1a      	lsrs	r2, r3, #8
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	00da      	lsls	r2, r3, #3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044c6:	e00a      	b.n	80044de <I2C_DMAAbort+0x5e>
    }
    count--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d0ea      	beq.n	80044b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	2200      	movs	r2, #0
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	2200      	movs	r2, #0
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b60      	cmp	r3, #96	; 0x60
 800454e:	d10e      	bne.n	800456e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7fe fe16 	bl	8003198 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800456c:	e027      	b.n	80045be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004574:	2b28      	cmp	r3, #40	; 0x28
 8004576:	d117      	bne.n	80045a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004596:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2228      	movs	r2, #40	; 0x28
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045a6:	e007      	b.n	80045b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f7fc ff9f 	bl	80014fc <HAL_I2C_ErrorCallback>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000
 80045cc:	14f8b589 	.word	0x14f8b589

080045d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	0a1a      	lsrs	r2, r3, #8
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e008      	b.n	8004620 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461c:	d0e9      	beq.n	80045f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000000 	.word	0x20000000
 8004630:	14f8b589 	.word	0x14f8b589

08004634 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004644:	d103      	bne.n	800464e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800464c:	e007      	b.n	800465e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004656:	d102      	bne.n	800465e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2208      	movs	r2, #8
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e264      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	4ba3      	ldr	r3, [pc, #652]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4ba0      	ldr	r3, [pc, #640]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b9d      	ldr	r3, [pc, #628]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b99      	ldr	r3, [pc, #612]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e23f      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b91      	ldr	r3, [pc, #580]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a90      	ldr	r2, [pc, #576]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b8b      	ldr	r3, [pc, #556]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a8a      	ldr	r2, [pc, #552]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a87      	ldr	r2, [pc, #540]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b84      	ldr	r3, [pc, #528]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a83      	ldr	r2, [pc, #524]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b81      	ldr	r3, [pc, #516]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a80      	ldr	r2, [pc, #512]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd f990 	bl	8001a48 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd f98c 	bl	8001a48 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e204      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b76      	ldr	r3, [pc, #472]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd f97c 	bl	8001a48 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd f978 	bl	8001a48 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f0      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b6c      	ldr	r3, [pc, #432]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b62      	ldr	r3, [pc, #392]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b5c      	ldr	r3, [pc, #368]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c4      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b56      	ldr	r3, [pc, #344]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4952      	ldr	r1, [pc, #328]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b4f      	ldr	r3, [pc, #316]	; (800491c <HAL_RCC_OscConfig+0x2b0>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd f931 	bl	8001a48 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fd f92d 	bl	8001a48 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a5      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b46      	ldr	r3, [pc, #280]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b43      	ldr	r3, [pc, #268]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4940      	ldr	r1, [pc, #256]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_OscConfig+0x2b0>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd f910 	bl	8001a48 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482c:	f7fd f90c 	bl	8001a48 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e184      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d030      	beq.n	80048b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b30      	ldr	r3, [pc, #192]	; (8004920 <HAL_RCC_OscConfig+0x2b4>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f8f0 	bl	8001a48 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd f8ec 	bl	8001a48 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e164      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b26      	ldr	r3, [pc, #152]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e015      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCC_OscConfig+0x2b4>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fd f8d9 	bl	8001a48 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489a:	f7fd f8d5 	bl	8001a48 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e14d      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a0 	beq.w	8004a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ee:	60bb      	str	r3, [r7, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x2b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d121      	bne.n	8004946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_RCC_OscConfig+0x2b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <HAL_RCC_OscConfig+0x2b8>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490e:	f7fd f89b 	bl	8001a48 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	e011      	b.n	800493a <HAL_RCC_OscConfig+0x2ce>
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	42470000 	.word	0x42470000
 8004920:	42470e80 	.word	0x42470e80
 8004924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004928:	f7fd f88e 	bl	8001a48 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e106      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493a:	4b85      	ldr	r3, [pc, #532]	; (8004b50 <HAL_RCC_OscConfig+0x4e4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d106      	bne.n	800495c <HAL_RCC_OscConfig+0x2f0>
 800494e:	4b81      	ldr	r3, [pc, #516]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a80      	ldr	r2, [pc, #512]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	e01c      	b.n	8004996 <HAL_RCC_OscConfig+0x32a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b05      	cmp	r3, #5
 8004962:	d10c      	bne.n	800497e <HAL_RCC_OscConfig+0x312>
 8004964:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	4a7a      	ldr	r2, [pc, #488]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	6713      	str	r3, [r2, #112]	; 0x70
 8004970:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
 800497c:	e00b      	b.n	8004996 <HAL_RCC_OscConfig+0x32a>
 800497e:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a74      	ldr	r2, [pc, #464]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a71      	ldr	r2, [pc, #452]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004990:	f023 0304 	bic.w	r3, r3, #4
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d015      	beq.n	80049ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499e:	f7fd f853 	bl	8001a48 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a4:	e00a      	b.n	80049bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a6:	f7fd f84f 	bl	8001a48 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e0c5      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049bc:	4b65      	ldr	r3, [pc, #404]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ee      	beq.n	80049a6 <HAL_RCC_OscConfig+0x33a>
 80049c8:	e014      	b.n	80049f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ca:	f7fd f83d 	bl	8001a48 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd f839 	bl	8001a48 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0af      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e8:	4b5a      	ldr	r3, [pc, #360]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ee      	bne.n	80049d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d105      	bne.n	8004a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a55      	ldr	r2, [pc, #340]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 809b 	beq.w	8004b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d05c      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d141      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a24:	4b4c      	ldr	r3, [pc, #304]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f80d 	bl	8001a48 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fd f809 	bl	8001a48 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e081      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	4937      	ldr	r1, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a7a:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fc ffe2 	bl	8001a48 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc ffde 	bl	8001a48 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e056      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x41c>
 8004aa6:	e04e      	b.n	8004b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fc ffcb 	bl	8001a48 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fc ffc7 	bl	8001a48 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e03f      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x44a>
 8004ad4:	e037      	b.n	8004b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e032      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <HAL_RCC_OscConfig+0x4e8>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d028      	beq.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d121      	bne.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d11a      	bne.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b12:	4013      	ands	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40007000 	.word	0x40007000
 8004b54:	40023800 	.word	0x40023800
 8004b58:	42470060 	.word	0x42470060

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fefc 	bl	8001a48 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fc fef8 	bl	8001a48 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc fe5c 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	08009c48 	.word	0x08009c48
 8004d20:	20000000 	.word	0x20000000
 8004d24:	20000004 	.word	0x20000004

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b67      	ldr	r3, [pc, #412]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80bd 	bhi.w	8004ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e0b7      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d5e:	60bb      	str	r3, [r7, #8]
       break;
 8004d60:	e0b7      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d64:	60bb      	str	r3, [r7, #8]
      break;
 8004d66:	e0b4      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b5b      	ldr	r3, [pc, #364]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d04d      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b58      	ldr	r3, [pc, #352]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	461a      	mov	r2, r3
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	ea02 0800 	and.w	r8, r2, r0
 8004d96:	ea03 0901 	and.w	r9, r3, r1
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	014b      	lsls	r3, r1, #5
 8004da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dac:	0142      	lsls	r2, r0, #5
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	ebb0 0008 	subs.w	r0, r0, r8
 8004db6:	eb61 0109 	sbc.w	r1, r1, r9
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	018b      	lsls	r3, r1, #6
 8004dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dc8:	0182      	lsls	r2, r0, #6
 8004dca:	1a12      	subs	r2, r2, r0
 8004dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	00d9      	lsls	r1, r3, #3
 8004dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dde:	00d0      	lsls	r0, r2, #3
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	eb12 0208 	adds.w	r2, r2, r8
 8004de8:	eb43 0309 	adc.w	r3, r3, r9
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	0259      	lsls	r1, r3, #9
 8004df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dfa:	0250      	lsls	r0, r2, #9
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	f7fb ff3c 	bl	8000c88 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e04a      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	461a      	mov	r2, r3
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	ea02 0400 	and.w	r4, r2, r0
 8004e32:	ea03 0501 	and.w	r5, r3, r1
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	014b      	lsls	r3, r1, #5
 8004e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e48:	0142      	lsls	r2, r0, #5
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	1b00      	subs	r0, r0, r4
 8004e50:	eb61 0105 	sbc.w	r1, r1, r5
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	018b      	lsls	r3, r1, #6
 8004e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e62:	0182      	lsls	r2, r0, #6
 8004e64:	1a12      	subs	r2, r2, r0
 8004e66:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	00d9      	lsls	r1, r3, #3
 8004e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e78:	00d0      	lsls	r0, r2, #3
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	1912      	adds	r2, r2, r4
 8004e80:	eb45 0303 	adc.w	r3, r5, r3
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	0299      	lsls	r1, r3, #10
 8004e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e92:	0290      	lsls	r0, r2, #10
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f7fb fef0 	bl	8000c88 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	60bb      	str	r3, [r7, #8]
      break;
 8004eca:	e002      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ece:	60bb      	str	r3, [r7, #8]
      break;
 8004ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	007a1200 	.word	0x007a1200

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000000 	.word	0x20000000

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	08009c58 	.word	0x08009c58

08004f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f30:	f7ff ffdc 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0b5b      	lsrs	r3, r3, #13
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	08009c58 	.word	0x08009c58

08004f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03f      	b.n	8004fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc fb76 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f829 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	b09f      	sub	sp, #124	; 0x7c
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	68d9      	ldr	r1, [r3, #12]
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	ea40 0301 	orr.w	r3, r0, r1
 8005010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	431a      	orrs	r2, r3
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	431a      	orrs	r2, r3
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005034:	f021 010c 	bic.w	r1, r1, #12
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800503e:	430b      	orrs	r3, r1
 8005040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504e:	6999      	ldr	r1, [r3, #24]
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	ea40 0301 	orr.w	r3, r0, r1
 8005058:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4bc5      	ldr	r3, [pc, #788]	; (8005374 <UART_SetConfig+0x384>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d004      	beq.n	800506e <UART_SetConfig+0x7e>
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4bc3      	ldr	r3, [pc, #780]	; (8005378 <UART_SetConfig+0x388>)
 800506a:	429a      	cmp	r2, r3
 800506c:	d103      	bne.n	8005076 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800506e:	f7ff ff5d 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8005072:	6778      	str	r0, [r7, #116]	; 0x74
 8005074:	e002      	b.n	800507c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005076:	f7ff ff45 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 800507a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005084:	f040 80b6 	bne.w	80051f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508a:	461c      	mov	r4, r3
 800508c:	f04f 0500 	mov.w	r5, #0
 8005090:	4622      	mov	r2, r4
 8005092:	462b      	mov	r3, r5
 8005094:	1891      	adds	r1, r2, r2
 8005096:	6439      	str	r1, [r7, #64]	; 0x40
 8005098:	415b      	adcs	r3, r3
 800509a:	647b      	str	r3, [r7, #68]	; 0x44
 800509c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050a0:	1912      	adds	r2, r2, r4
 80050a2:	eb45 0303 	adc.w	r3, r5, r3
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	00d9      	lsls	r1, r3, #3
 80050b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b4:	00d0      	lsls	r0, r2, #3
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	1911      	adds	r1, r2, r4
 80050bc:	6639      	str	r1, [r7, #96]	; 0x60
 80050be:	416b      	adcs	r3, r5
 80050c0:	667b      	str	r3, [r7, #100]	; 0x64
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80050d0:	415b      	adcs	r3, r3
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050dc:	f7fb fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4ba5      	ldr	r3, [pc, #660]	; (800537c <UART_SetConfig+0x38c>)
 80050e6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	011e      	lsls	r6, r3, #4
 80050ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f0:	461c      	mov	r4, r3
 80050f2:	f04f 0500 	mov.w	r5, #0
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	1891      	adds	r1, r2, r2
 80050fc:	6339      	str	r1, [r7, #48]	; 0x30
 80050fe:	415b      	adcs	r3, r3
 8005100:	637b      	str	r3, [r7, #52]	; 0x34
 8005102:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005106:	1912      	adds	r2, r2, r4
 8005108:	eb45 0303 	adc.w	r3, r5, r3
 800510c:	f04f 0000 	mov.w	r0, #0
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	00d9      	lsls	r1, r3, #3
 8005116:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800511a:	00d0      	lsls	r0, r2, #3
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	1911      	adds	r1, r2, r4
 8005122:	65b9      	str	r1, [r7, #88]	; 0x58
 8005124:	416b      	adcs	r3, r5
 8005126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	461a      	mov	r2, r3
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	1891      	adds	r1, r2, r2
 8005134:	62b9      	str	r1, [r7, #40]	; 0x28
 8005136:	415b      	adcs	r3, r3
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005142:	f7fb fda1 	bl	8000c88 <__aeabi_uldivmod>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4b8c      	ldr	r3, [pc, #560]	; (800537c <UART_SetConfig+0x38c>)
 800514c:	fba3 1302 	umull	r1, r3, r3, r2
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	2164      	movs	r1, #100	; 0x64
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	3332      	adds	r3, #50	; 0x32
 800515e:	4a87      	ldr	r2, [pc, #540]	; (800537c <UART_SetConfig+0x38c>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800516c:	441e      	add	r6, r3
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	4618      	mov	r0, r3
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	1894      	adds	r4, r2, r2
 800517c:	623c      	str	r4, [r7, #32]
 800517e:	415b      	adcs	r3, r3
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005186:	1812      	adds	r2, r2, r0
 8005188:	eb41 0303 	adc.w	r3, r1, r3
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	f04f 0500 	mov.w	r5, #0
 8005194:	00dd      	lsls	r5, r3, #3
 8005196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800519a:	00d4      	lsls	r4, r2, #3
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	1814      	adds	r4, r2, r0
 80051a2:	653c      	str	r4, [r7, #80]	; 0x50
 80051a4:	414b      	adcs	r3, r1
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	1891      	adds	r1, r2, r2
 80051b4:	61b9      	str	r1, [r7, #24]
 80051b6:	415b      	adcs	r3, r3
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051c2:	f7fb fd61 	bl	8000c88 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <UART_SetConfig+0x38c>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a67      	ldr	r2, [pc, #412]	; (800537c <UART_SetConfig+0x38c>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4432      	add	r2, r6
 80051f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f2:	e0b9      	b.n	8005368 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f6:	461c      	mov	r4, r3
 80051f8:	f04f 0500 	mov.w	r5, #0
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	1891      	adds	r1, r2, r2
 8005202:	6139      	str	r1, [r7, #16]
 8005204:	415b      	adcs	r3, r3
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800520c:	1912      	adds	r2, r2, r4
 800520e:	eb45 0303 	adc.w	r3, r5, r3
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	00d9      	lsls	r1, r3, #3
 800521c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005220:	00d0      	lsls	r0, r2, #3
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	eb12 0804 	adds.w	r8, r2, r4
 800522a:	eb43 0905 	adc.w	r9, r3, r5
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4618      	mov	r0, r3
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	008b      	lsls	r3, r1, #2
 8005242:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005246:	0082      	lsls	r2, r0, #2
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	f7fb fd1c 	bl	8000c88 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <UART_SetConfig+0x38c>)
 8005256:	fba3 2302 	umull	r2, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	011e      	lsls	r6, r3, #4
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	4618      	mov	r0, r3
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	1894      	adds	r4, r2, r2
 800526c:	60bc      	str	r4, [r7, #8]
 800526e:	415b      	adcs	r3, r3
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005276:	1812      	adds	r2, r2, r0
 8005278:	eb41 0303 	adc.w	r3, r1, r3
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	f04f 0500 	mov.w	r5, #0
 8005284:	00dd      	lsls	r5, r3, #3
 8005286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800528a:	00d4      	lsls	r4, r2, #3
 800528c:	4622      	mov	r2, r4
 800528e:	462b      	mov	r3, r5
 8005290:	1814      	adds	r4, r2, r0
 8005292:	64bc      	str	r4, [r7, #72]	; 0x48
 8005294:	414b      	adcs	r3, r1
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	008b      	lsls	r3, r1, #2
 80052ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052b0:	0082      	lsls	r2, r0, #2
 80052b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052b6:	f7fb fce7 	bl	8000c88 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <UART_SetConfig+0x38c>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	; 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	3332      	adds	r3, #50	; 0x32
 80052d2:	4a2a      	ldr	r2, [pc, #168]	; (800537c <UART_SetConfig+0x38c>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052de:	441e      	add	r6, r3
 80052e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e2:	4618      	mov	r0, r3
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	1894      	adds	r4, r2, r2
 80052ee:	603c      	str	r4, [r7, #0]
 80052f0:	415b      	adcs	r3, r3
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f8:	1812      	adds	r2, r2, r0
 80052fa:	eb41 0303 	adc.w	r3, r1, r3
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	f04f 0500 	mov.w	r5, #0
 8005306:	00dd      	lsls	r5, r3, #3
 8005308:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800530c:	00d4      	lsls	r4, r2, #3
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	eb12 0a00 	adds.w	sl, r2, r0
 8005316:	eb43 0b01 	adc.w	fp, r3, r1
 800531a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4618      	mov	r0, r3
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	008b      	lsls	r3, r1, #2
 800532e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005332:	0082      	lsls	r2, r0, #2
 8005334:	4650      	mov	r0, sl
 8005336:	4659      	mov	r1, fp
 8005338:	f7fb fca6 	bl	8000c88 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <UART_SetConfig+0x38c>)
 8005342:	fba3 1302 	umull	r1, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	2164      	movs	r1, #100	; 0x64
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	3332      	adds	r3, #50	; 0x32
 8005354:	4a09      	ldr	r2, [pc, #36]	; (800537c <UART_SetConfig+0x38c>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4432      	add	r2, r6
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	377c      	adds	r7, #124	; 0x7c
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	bf00      	nop
 8005374:	40011000 	.word	0x40011000
 8005378:	40011400 	.word	0x40011400
 800537c:	51eb851f 	.word	0x51eb851f

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	2000000c 	.word	0x2000000c

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4d0d      	ldr	r5, [pc, #52]	; (80053c4 <__libc_init_array+0x38>)
 8005390:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005392:	1b64      	subs	r4, r4, r5
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	2600      	movs	r6, #0
 8005398:	42a6      	cmp	r6, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	4d0b      	ldr	r5, [pc, #44]	; (80053cc <__libc_init_array+0x40>)
 800539e:	4c0c      	ldr	r4, [pc, #48]	; (80053d0 <__libc_init_array+0x44>)
 80053a0:	f004 fc46 	bl	8009c30 <_init>
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	2600      	movs	r6, #0
 80053aa:	42a6      	cmp	r6, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b4:	4798      	blx	r3
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80053be:	4798      	blx	r3
 80053c0:	3601      	adds	r6, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	0800a11c 	.word	0x0800a11c
 80053c8:	0800a11c 	.word	0x0800a11c
 80053cc:	0800a11c 	.word	0x0800a11c
 80053d0:	0800a120 	.word	0x0800a120

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <__cvt>:
 80053e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	ec55 4b10 	vmov	r4, r5, d0
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	460e      	mov	r6, r1
 80053f0:	4619      	mov	r1, r3
 80053f2:	462b      	mov	r3, r5
 80053f4:	bfbb      	ittet	lt
 80053f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053fa:	461d      	movlt	r5, r3
 80053fc:	2300      	movge	r3, #0
 80053fe:	232d      	movlt	r3, #45	; 0x2d
 8005400:	700b      	strb	r3, [r1, #0]
 8005402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005404:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005408:	4691      	mov	r9, r2
 800540a:	f023 0820 	bic.w	r8, r3, #32
 800540e:	bfbc      	itt	lt
 8005410:	4622      	movlt	r2, r4
 8005412:	4614      	movlt	r4, r2
 8005414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005418:	d005      	beq.n	8005426 <__cvt+0x42>
 800541a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800541e:	d100      	bne.n	8005422 <__cvt+0x3e>
 8005420:	3601      	adds	r6, #1
 8005422:	2102      	movs	r1, #2
 8005424:	e000      	b.n	8005428 <__cvt+0x44>
 8005426:	2103      	movs	r1, #3
 8005428:	ab03      	add	r3, sp, #12
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	ab02      	add	r3, sp, #8
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	ec45 4b10 	vmov	d0, r4, r5
 8005434:	4653      	mov	r3, sl
 8005436:	4632      	mov	r2, r6
 8005438:	f001 fdb6 	bl	8006fa8 <_dtoa_r>
 800543c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005440:	4607      	mov	r7, r0
 8005442:	d102      	bne.n	800544a <__cvt+0x66>
 8005444:	f019 0f01 	tst.w	r9, #1
 8005448:	d022      	beq.n	8005490 <__cvt+0xac>
 800544a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800544e:	eb07 0906 	add.w	r9, r7, r6
 8005452:	d110      	bne.n	8005476 <__cvt+0x92>
 8005454:	783b      	ldrb	r3, [r7, #0]
 8005456:	2b30      	cmp	r3, #48	; 0x30
 8005458:	d10a      	bne.n	8005470 <__cvt+0x8c>
 800545a:	2200      	movs	r2, #0
 800545c:	2300      	movs	r3, #0
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fb fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8005466:	b918      	cbnz	r0, 8005470 <__cvt+0x8c>
 8005468:	f1c6 0601 	rsb	r6, r6, #1
 800546c:	f8ca 6000 	str.w	r6, [sl]
 8005470:	f8da 3000 	ldr.w	r3, [sl]
 8005474:	4499      	add	r9, r3
 8005476:	2200      	movs	r2, #0
 8005478:	2300      	movs	r3, #0
 800547a:	4620      	mov	r0, r4
 800547c:	4629      	mov	r1, r5
 800547e:	f7fb fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005482:	b108      	cbz	r0, 8005488 <__cvt+0xa4>
 8005484:	f8cd 900c 	str.w	r9, [sp, #12]
 8005488:	2230      	movs	r2, #48	; 0x30
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	454b      	cmp	r3, r9
 800548e:	d307      	bcc.n	80054a0 <__cvt+0xbc>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005494:	1bdb      	subs	r3, r3, r7
 8005496:	4638      	mov	r0, r7
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	b004      	add	sp, #16
 800549c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a0:	1c59      	adds	r1, r3, #1
 80054a2:	9103      	str	r1, [sp, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e7f0      	b.n	800548a <__cvt+0xa6>

080054a8 <__exponent>:
 80054a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054aa:	4603      	mov	r3, r0
 80054ac:	2900      	cmp	r1, #0
 80054ae:	bfb8      	it	lt
 80054b0:	4249      	neglt	r1, r1
 80054b2:	f803 2b02 	strb.w	r2, [r3], #2
 80054b6:	bfb4      	ite	lt
 80054b8:	222d      	movlt	r2, #45	; 0x2d
 80054ba:	222b      	movge	r2, #43	; 0x2b
 80054bc:	2909      	cmp	r1, #9
 80054be:	7042      	strb	r2, [r0, #1]
 80054c0:	dd2a      	ble.n	8005518 <__exponent+0x70>
 80054c2:	f10d 0407 	add.w	r4, sp, #7
 80054c6:	46a4      	mov	ip, r4
 80054c8:	270a      	movs	r7, #10
 80054ca:	46a6      	mov	lr, r4
 80054cc:	460a      	mov	r2, r1
 80054ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80054d2:	fb07 1516 	mls	r5, r7, r6, r1
 80054d6:	3530      	adds	r5, #48	; 0x30
 80054d8:	2a63      	cmp	r2, #99	; 0x63
 80054da:	f104 34ff 	add.w	r4, r4, #4294967295
 80054de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054e2:	4631      	mov	r1, r6
 80054e4:	dcf1      	bgt.n	80054ca <__exponent+0x22>
 80054e6:	3130      	adds	r1, #48	; 0x30
 80054e8:	f1ae 0502 	sub.w	r5, lr, #2
 80054ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054f0:	1c44      	adds	r4, r0, #1
 80054f2:	4629      	mov	r1, r5
 80054f4:	4561      	cmp	r1, ip
 80054f6:	d30a      	bcc.n	800550e <__exponent+0x66>
 80054f8:	f10d 0209 	add.w	r2, sp, #9
 80054fc:	eba2 020e 	sub.w	r2, r2, lr
 8005500:	4565      	cmp	r5, ip
 8005502:	bf88      	it	hi
 8005504:	2200      	movhi	r2, #0
 8005506:	4413      	add	r3, r2
 8005508:	1a18      	subs	r0, r3, r0
 800550a:	b003      	add	sp, #12
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800550e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005512:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005516:	e7ed      	b.n	80054f4 <__exponent+0x4c>
 8005518:	2330      	movs	r3, #48	; 0x30
 800551a:	3130      	adds	r1, #48	; 0x30
 800551c:	7083      	strb	r3, [r0, #2]
 800551e:	70c1      	strb	r1, [r0, #3]
 8005520:	1d03      	adds	r3, r0, #4
 8005522:	e7f1      	b.n	8005508 <__exponent+0x60>

08005524 <_printf_float>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	ed2d 8b02 	vpush	{d8}
 800552c:	b08d      	sub	sp, #52	; 0x34
 800552e:	460c      	mov	r4, r1
 8005530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005534:	4616      	mov	r6, r2
 8005536:	461f      	mov	r7, r3
 8005538:	4605      	mov	r5, r0
 800553a:	f002 fe91 	bl	8008260 <_localeconv_r>
 800553e:	f8d0 a000 	ldr.w	sl, [r0]
 8005542:	4650      	mov	r0, sl
 8005544:	f7fa fe44 	bl	80001d0 <strlen>
 8005548:	2300      	movs	r3, #0
 800554a:	930a      	str	r3, [sp, #40]	; 0x28
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	9305      	str	r3, [sp, #20]
 8005550:	f8d8 3000 	ldr.w	r3, [r8]
 8005554:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005558:	3307      	adds	r3, #7
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	f103 0208 	add.w	r2, r3, #8
 8005562:	f8c8 2000 	str.w	r2, [r8]
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800556e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005576:	9307      	str	r3, [sp, #28]
 8005578:	f8cd 8018 	str.w	r8, [sp, #24]
 800557c:	ee08 0a10 	vmov	s16, r0
 8005580:	4b9f      	ldr	r3, [pc, #636]	; (8005800 <_printf_float+0x2dc>)
 8005582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	f7fb facf 	bl	8000b2c <__aeabi_dcmpun>
 800558e:	bb88      	cbnz	r0, 80055f4 <_printf_float+0xd0>
 8005590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005594:	4b9a      	ldr	r3, [pc, #616]	; (8005800 <_printf_float+0x2dc>)
 8005596:	f04f 32ff 	mov.w	r2, #4294967295
 800559a:	f7fb faa9 	bl	8000af0 <__aeabi_dcmple>
 800559e:	bb48      	cbnz	r0, 80055f4 <_printf_float+0xd0>
 80055a0:	2200      	movs	r2, #0
 80055a2:	2300      	movs	r3, #0
 80055a4:	4640      	mov	r0, r8
 80055a6:	4649      	mov	r1, r9
 80055a8:	f7fb fa98 	bl	8000adc <__aeabi_dcmplt>
 80055ac:	b110      	cbz	r0, 80055b4 <_printf_float+0x90>
 80055ae:	232d      	movs	r3, #45	; 0x2d
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b4:	4b93      	ldr	r3, [pc, #588]	; (8005804 <_printf_float+0x2e0>)
 80055b6:	4894      	ldr	r0, [pc, #592]	; (8005808 <_printf_float+0x2e4>)
 80055b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055bc:	bf94      	ite	ls
 80055be:	4698      	movls	r8, r3
 80055c0:	4680      	movhi	r8, r0
 80055c2:	2303      	movs	r3, #3
 80055c4:	6123      	str	r3, [r4, #16]
 80055c6:	9b05      	ldr	r3, [sp, #20]
 80055c8:	f023 0204 	bic.w	r2, r3, #4
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	f04f 0900 	mov.w	r9, #0
 80055d2:	9700      	str	r7, [sp, #0]
 80055d4:	4633      	mov	r3, r6
 80055d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f9d8 	bl	8005990 <_printf_common>
 80055e0:	3001      	adds	r0, #1
 80055e2:	f040 8090 	bne.w	8005706 <_printf_float+0x1e2>
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	b00d      	add	sp, #52	; 0x34
 80055ec:	ecbd 8b02 	vpop	{d8}
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fb fa96 	bl	8000b2c <__aeabi_dcmpun>
 8005600:	b140      	cbz	r0, 8005614 <_printf_float+0xf0>
 8005602:	464b      	mov	r3, r9
 8005604:	2b00      	cmp	r3, #0
 8005606:	bfbc      	itt	lt
 8005608:	232d      	movlt	r3, #45	; 0x2d
 800560a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800560e:	487f      	ldr	r0, [pc, #508]	; (800580c <_printf_float+0x2e8>)
 8005610:	4b7f      	ldr	r3, [pc, #508]	; (8005810 <_printf_float+0x2ec>)
 8005612:	e7d1      	b.n	80055b8 <_printf_float+0x94>
 8005614:	6863      	ldr	r3, [r4, #4]
 8005616:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800561a:	9206      	str	r2, [sp, #24]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	d13f      	bne.n	80056a0 <_printf_float+0x17c>
 8005620:	2306      	movs	r3, #6
 8005622:	6063      	str	r3, [r4, #4]
 8005624:	9b05      	ldr	r3, [sp, #20]
 8005626:	6861      	ldr	r1, [r4, #4]
 8005628:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800562c:	2300      	movs	r3, #0
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	ab0a      	add	r3, sp, #40	; 0x28
 8005632:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005636:	ab09      	add	r3, sp, #36	; 0x24
 8005638:	ec49 8b10 	vmov	d0, r8, r9
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005644:	4628      	mov	r0, r5
 8005646:	f7ff fecd 	bl	80053e4 <__cvt>
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800564e:	2b47      	cmp	r3, #71	; 0x47
 8005650:	4680      	mov	r8, r0
 8005652:	d108      	bne.n	8005666 <_printf_float+0x142>
 8005654:	1cc8      	adds	r0, r1, #3
 8005656:	db02      	blt.n	800565e <_printf_float+0x13a>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	4299      	cmp	r1, r3
 800565c:	dd41      	ble.n	80056e2 <_printf_float+0x1be>
 800565e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005662:	fa5f fb8b 	uxtb.w	fp, fp
 8005666:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800566a:	d820      	bhi.n	80056ae <_printf_float+0x18a>
 800566c:	3901      	subs	r1, #1
 800566e:	465a      	mov	r2, fp
 8005670:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005674:	9109      	str	r1, [sp, #36]	; 0x24
 8005676:	f7ff ff17 	bl	80054a8 <__exponent>
 800567a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567c:	1813      	adds	r3, r2, r0
 800567e:	2a01      	cmp	r2, #1
 8005680:	4681      	mov	r9, r0
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	dc02      	bgt.n	800568c <_printf_float+0x168>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	07d2      	lsls	r2, r2, #31
 800568a:	d501      	bpl.n	8005690 <_printf_float+0x16c>
 800568c:	3301      	adds	r3, #1
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005694:	2b00      	cmp	r3, #0
 8005696:	d09c      	beq.n	80055d2 <_printf_float+0xae>
 8005698:	232d      	movs	r3, #45	; 0x2d
 800569a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569e:	e798      	b.n	80055d2 <_printf_float+0xae>
 80056a0:	9a06      	ldr	r2, [sp, #24]
 80056a2:	2a47      	cmp	r2, #71	; 0x47
 80056a4:	d1be      	bne.n	8005624 <_printf_float+0x100>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1bc      	bne.n	8005624 <_printf_float+0x100>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e7b9      	b.n	8005622 <_printf_float+0xfe>
 80056ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056b2:	d118      	bne.n	80056e6 <_printf_float+0x1c2>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	dd0b      	ble.n	80056d2 <_printf_float+0x1ae>
 80056ba:	6121      	str	r1, [r4, #16]
 80056bc:	b913      	cbnz	r3, 80056c4 <_printf_float+0x1a0>
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	07d0      	lsls	r0, r2, #31
 80056c2:	d502      	bpl.n	80056ca <_printf_float+0x1a6>
 80056c4:	3301      	adds	r3, #1
 80056c6:	440b      	add	r3, r1
 80056c8:	6123      	str	r3, [r4, #16]
 80056ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80056cc:	f04f 0900 	mov.w	r9, #0
 80056d0:	e7de      	b.n	8005690 <_printf_float+0x16c>
 80056d2:	b913      	cbnz	r3, 80056da <_printf_float+0x1b6>
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	07d2      	lsls	r2, r2, #31
 80056d8:	d501      	bpl.n	80056de <_printf_float+0x1ba>
 80056da:	3302      	adds	r3, #2
 80056dc:	e7f4      	b.n	80056c8 <_printf_float+0x1a4>
 80056de:	2301      	movs	r3, #1
 80056e0:	e7f2      	b.n	80056c8 <_printf_float+0x1a4>
 80056e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e8:	4299      	cmp	r1, r3
 80056ea:	db05      	blt.n	80056f8 <_printf_float+0x1d4>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	6121      	str	r1, [r4, #16]
 80056f0:	07d8      	lsls	r0, r3, #31
 80056f2:	d5ea      	bpl.n	80056ca <_printf_float+0x1a6>
 80056f4:	1c4b      	adds	r3, r1, #1
 80056f6:	e7e7      	b.n	80056c8 <_printf_float+0x1a4>
 80056f8:	2900      	cmp	r1, #0
 80056fa:	bfd4      	ite	le
 80056fc:	f1c1 0202 	rsble	r2, r1, #2
 8005700:	2201      	movgt	r2, #1
 8005702:	4413      	add	r3, r2
 8005704:	e7e0      	b.n	80056c8 <_printf_float+0x1a4>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	055a      	lsls	r2, r3, #21
 800570a:	d407      	bmi.n	800571c <_printf_float+0x1f8>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	4642      	mov	r2, r8
 8005710:	4631      	mov	r1, r6
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	d12c      	bne.n	8005774 <_printf_float+0x250>
 800571a:	e764      	b.n	80055e6 <_printf_float+0xc2>
 800571c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005720:	f240 80e0 	bls.w	80058e4 <_printf_float+0x3c0>
 8005724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	f7fb f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005730:	2800      	cmp	r0, #0
 8005732:	d034      	beq.n	800579e <_printf_float+0x27a>
 8005734:	4a37      	ldr	r2, [pc, #220]	; (8005814 <_printf_float+0x2f0>)
 8005736:	2301      	movs	r3, #1
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f af51 	beq.w	80055e6 <_printf_float+0xc2>
 8005744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	db02      	blt.n	8005752 <_printf_float+0x22e>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	07d8      	lsls	r0, r3, #31
 8005750:	d510      	bpl.n	8005774 <_printf_float+0x250>
 8005752:	ee18 3a10 	vmov	r3, s16
 8005756:	4652      	mov	r2, sl
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f af41 	beq.w	80055e6 <_printf_float+0xc2>
 8005764:	f04f 0800 	mov.w	r8, #0
 8005768:	f104 091a 	add.w	r9, r4, #26
 800576c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800576e:	3b01      	subs	r3, #1
 8005770:	4543      	cmp	r3, r8
 8005772:	dc09      	bgt.n	8005788 <_printf_float+0x264>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	079b      	lsls	r3, r3, #30
 8005778:	f100 8105 	bmi.w	8005986 <_printf_float+0x462>
 800577c:	68e0      	ldr	r0, [r4, #12]
 800577e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005780:	4298      	cmp	r0, r3
 8005782:	bfb8      	it	lt
 8005784:	4618      	movlt	r0, r3
 8005786:	e730      	b.n	80055ea <_printf_float+0xc6>
 8005788:	2301      	movs	r3, #1
 800578a:	464a      	mov	r2, r9
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f af27 	beq.w	80055e6 <_printf_float+0xc2>
 8005798:	f108 0801 	add.w	r8, r8, #1
 800579c:	e7e6      	b.n	800576c <_printf_float+0x248>
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dc39      	bgt.n	8005818 <_printf_float+0x2f4>
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <_printf_float+0x2f0>)
 80057a6:	2301      	movs	r3, #1
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	f43f af19 	beq.w	80055e6 <_printf_float+0xc2>
 80057b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b8:	4313      	orrs	r3, r2
 80057ba:	d102      	bne.n	80057c2 <_printf_float+0x29e>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07d9      	lsls	r1, r3, #31
 80057c0:	d5d8      	bpl.n	8005774 <_printf_float+0x250>
 80057c2:	ee18 3a10 	vmov	r3, s16
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af09 	beq.w	80055e6 <_printf_float+0xc2>
 80057d4:	f04f 0900 	mov.w	r9, #0
 80057d8:	f104 0a1a 	add.w	sl, r4, #26
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	425b      	negs	r3, r3
 80057e0:	454b      	cmp	r3, r9
 80057e2:	dc01      	bgt.n	80057e8 <_printf_float+0x2c4>
 80057e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e6:	e792      	b.n	800570e <_printf_float+0x1ea>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4652      	mov	r2, sl
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f aef7 	beq.w	80055e6 <_printf_float+0xc2>
 80057f8:	f109 0901 	add.w	r9, r9, #1
 80057fc:	e7ee      	b.n	80057dc <_printf_float+0x2b8>
 80057fe:	bf00      	nop
 8005800:	7fefffff 	.word	0x7fefffff
 8005804:	08009c64 	.word	0x08009c64
 8005808:	08009c68 	.word	0x08009c68
 800580c:	08009c70 	.word	0x08009c70
 8005810:	08009c6c 	.word	0x08009c6c
 8005814:	08009c74 	.word	0x08009c74
 8005818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800581a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800581c:	429a      	cmp	r2, r3
 800581e:	bfa8      	it	ge
 8005820:	461a      	movge	r2, r3
 8005822:	2a00      	cmp	r2, #0
 8005824:	4691      	mov	r9, r2
 8005826:	dc37      	bgt.n	8005898 <_printf_float+0x374>
 8005828:	f04f 0b00 	mov.w	fp, #0
 800582c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005830:	f104 021a 	add.w	r2, r4, #26
 8005834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	eba3 0309 	sub.w	r3, r3, r9
 800583c:	455b      	cmp	r3, fp
 800583e:	dc33      	bgt.n	80058a8 <_printf_float+0x384>
 8005840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005844:	429a      	cmp	r2, r3
 8005846:	db3b      	blt.n	80058c0 <_printf_float+0x39c>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	07da      	lsls	r2, r3, #31
 800584c:	d438      	bmi.n	80058c0 <_printf_float+0x39c>
 800584e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005850:	9b05      	ldr	r3, [sp, #20]
 8005852:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	eba2 0901 	sub.w	r9, r2, r1
 800585a:	4599      	cmp	r9, r3
 800585c:	bfa8      	it	ge
 800585e:	4699      	movge	r9, r3
 8005860:	f1b9 0f00 	cmp.w	r9, #0
 8005864:	dc35      	bgt.n	80058d2 <_printf_float+0x3ae>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800586e:	f104 0a1a 	add.w	sl, r4, #26
 8005872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	eba3 0309 	sub.w	r3, r3, r9
 800587c:	4543      	cmp	r3, r8
 800587e:	f77f af79 	ble.w	8005774 <_printf_float+0x250>
 8005882:	2301      	movs	r3, #1
 8005884:	4652      	mov	r2, sl
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f aeaa 	beq.w	80055e6 <_printf_float+0xc2>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	e7ec      	b.n	8005872 <_printf_float+0x34e>
 8005898:	4613      	mov	r3, r2
 800589a:	4631      	mov	r1, r6
 800589c:	4642      	mov	r2, r8
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	d1c0      	bne.n	8005828 <_printf_float+0x304>
 80058a6:	e69e      	b.n	80055e6 <_printf_float+0xc2>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	9205      	str	r2, [sp, #20]
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f ae97 	beq.w	80055e6 <_printf_float+0xc2>
 80058b8:	9a05      	ldr	r2, [sp, #20]
 80058ba:	f10b 0b01 	add.w	fp, fp, #1
 80058be:	e7b9      	b.n	8005834 <_printf_float+0x310>
 80058c0:	ee18 3a10 	vmov	r3, s16
 80058c4:	4652      	mov	r2, sl
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	d1be      	bne.n	800584e <_printf_float+0x32a>
 80058d0:	e689      	b.n	80055e6 <_printf_float+0xc2>
 80058d2:	9a05      	ldr	r2, [sp, #20]
 80058d4:	464b      	mov	r3, r9
 80058d6:	4442      	add	r2, r8
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	d1c1      	bne.n	8005866 <_printf_float+0x342>
 80058e2:	e680      	b.n	80055e6 <_printf_float+0xc2>
 80058e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e6:	2a01      	cmp	r2, #1
 80058e8:	dc01      	bgt.n	80058ee <_printf_float+0x3ca>
 80058ea:	07db      	lsls	r3, r3, #31
 80058ec:	d538      	bpl.n	8005960 <_printf_float+0x43c>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4642      	mov	r2, r8
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	f43f ae74 	beq.w	80055e6 <_printf_float+0xc2>
 80058fe:	ee18 3a10 	vmov	r3, s16
 8005902:	4652      	mov	r2, sl
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f ae6b 	beq.w	80055e6 <_printf_float+0xc2>
 8005910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	f7fb f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800591c:	b9d8      	cbnz	r0, 8005956 <_printf_float+0x432>
 800591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005920:	f108 0201 	add.w	r2, r8, #1
 8005924:	3b01      	subs	r3, #1
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	d10e      	bne.n	800594e <_printf_float+0x42a>
 8005930:	e659      	b.n	80055e6 <_printf_float+0xc2>
 8005932:	2301      	movs	r3, #1
 8005934:	4652      	mov	r2, sl
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	f43f ae52 	beq.w	80055e6 <_printf_float+0xc2>
 8005942:	f108 0801 	add.w	r8, r8, #1
 8005946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005948:	3b01      	subs	r3, #1
 800594a:	4543      	cmp	r3, r8
 800594c:	dcf1      	bgt.n	8005932 <_printf_float+0x40e>
 800594e:	464b      	mov	r3, r9
 8005950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005954:	e6dc      	b.n	8005710 <_printf_float+0x1ec>
 8005956:	f04f 0800 	mov.w	r8, #0
 800595a:	f104 0a1a 	add.w	sl, r4, #26
 800595e:	e7f2      	b.n	8005946 <_printf_float+0x422>
 8005960:	2301      	movs	r3, #1
 8005962:	4642      	mov	r2, r8
 8005964:	e7df      	b.n	8005926 <_printf_float+0x402>
 8005966:	2301      	movs	r3, #1
 8005968:	464a      	mov	r2, r9
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae38 	beq.w	80055e6 <_printf_float+0xc2>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800597e:	1a5b      	subs	r3, r3, r1
 8005980:	4543      	cmp	r3, r8
 8005982:	dcf0      	bgt.n	8005966 <_printf_float+0x442>
 8005984:	e6fa      	b.n	800577c <_printf_float+0x258>
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	f104 0919 	add.w	r9, r4, #25
 800598e:	e7f4      	b.n	800597a <_printf_float+0x456>

08005990 <_printf_common>:
 8005990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	4616      	mov	r6, r2
 8005996:	4699      	mov	r9, r3
 8005998:	688a      	ldr	r2, [r1, #8]
 800599a:	690b      	ldr	r3, [r1, #16]
 800599c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059a0:	4293      	cmp	r3, r2
 80059a2:	bfb8      	it	lt
 80059a4:	4613      	movlt	r3, r2
 80059a6:	6033      	str	r3, [r6, #0]
 80059a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ac:	4607      	mov	r7, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	b10a      	cbz	r2, 80059b6 <_printf_common+0x26>
 80059b2:	3301      	adds	r3, #1
 80059b4:	6033      	str	r3, [r6, #0]
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	0699      	lsls	r1, r3, #26
 80059ba:	bf42      	ittt	mi
 80059bc:	6833      	ldrmi	r3, [r6, #0]
 80059be:	3302      	addmi	r3, #2
 80059c0:	6033      	strmi	r3, [r6, #0]
 80059c2:	6825      	ldr	r5, [r4, #0]
 80059c4:	f015 0506 	ands.w	r5, r5, #6
 80059c8:	d106      	bne.n	80059d8 <_printf_common+0x48>
 80059ca:	f104 0a19 	add.w	sl, r4, #25
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	6832      	ldr	r2, [r6, #0]
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	dc26      	bgt.n	8005a26 <_printf_common+0x96>
 80059d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059dc:	1e13      	subs	r3, r2, #0
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	bf18      	it	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	0692      	lsls	r2, r2, #26
 80059e6:	d42b      	bmi.n	8005a40 <_printf_common+0xb0>
 80059e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ec:	4649      	mov	r1, r9
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d01e      	beq.n	8005a34 <_printf_common+0xa4>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	68e5      	ldr	r5, [r4, #12]
 80059fa:	6832      	ldr	r2, [r6, #0]
 80059fc:	f003 0306 	and.w	r3, r3, #6
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	bf08      	it	eq
 8005a04:	1aad      	subeq	r5, r5, r2
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	6922      	ldr	r2, [r4, #16]
 8005a0a:	bf0c      	ite	eq
 8005a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a10:	2500      	movne	r5, #0
 8005a12:	4293      	cmp	r3, r2
 8005a14:	bfc4      	itt	gt
 8005a16:	1a9b      	subgt	r3, r3, r2
 8005a18:	18ed      	addgt	r5, r5, r3
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	341a      	adds	r4, #26
 8005a1e:	42b5      	cmp	r5, r6
 8005a20:	d11a      	bne.n	8005a58 <_printf_common+0xc8>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e008      	b.n	8005a38 <_printf_common+0xa8>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4652      	mov	r2, sl
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	47c0      	blx	r8
 8005a30:	3001      	adds	r0, #1
 8005a32:	d103      	bne.n	8005a3c <_printf_common+0xac>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	e7c6      	b.n	80059ce <_printf_common+0x3e>
 8005a40:	18e1      	adds	r1, r4, r3
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	2030      	movs	r0, #48	; 0x30
 8005a46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a4a:	4422      	add	r2, r4
 8005a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a54:	3302      	adds	r3, #2
 8005a56:	e7c7      	b.n	80059e8 <_printf_common+0x58>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d0e6      	beq.n	8005a34 <_printf_common+0xa4>
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7d9      	b.n	8005a1e <_printf_common+0x8e>
	...

08005a6c <_printf_i>:
 8005a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	460c      	mov	r4, r1
 8005a72:	4691      	mov	r9, r2
 8005a74:	7e27      	ldrb	r7, [r4, #24]
 8005a76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a78:	2f78      	cmp	r7, #120	; 0x78
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a82:	d807      	bhi.n	8005a94 <_printf_i+0x28>
 8005a84:	2f62      	cmp	r7, #98	; 0x62
 8005a86:	d80a      	bhi.n	8005a9e <_printf_i+0x32>
 8005a88:	2f00      	cmp	r7, #0
 8005a8a:	f000 80d8 	beq.w	8005c3e <_printf_i+0x1d2>
 8005a8e:	2f58      	cmp	r7, #88	; 0x58
 8005a90:	f000 80a3 	beq.w	8005bda <_printf_i+0x16e>
 8005a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a9c:	e03a      	b.n	8005b14 <_printf_i+0xa8>
 8005a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aa2:	2b15      	cmp	r3, #21
 8005aa4:	d8f6      	bhi.n	8005a94 <_printf_i+0x28>
 8005aa6:	a001      	add	r0, pc, #4	; (adr r0, 8005aac <_printf_i+0x40>)
 8005aa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005aac:	08005b05 	.word	0x08005b05
 8005ab0:	08005b19 	.word	0x08005b19
 8005ab4:	08005a95 	.word	0x08005a95
 8005ab8:	08005a95 	.word	0x08005a95
 8005abc:	08005a95 	.word	0x08005a95
 8005ac0:	08005a95 	.word	0x08005a95
 8005ac4:	08005b19 	.word	0x08005b19
 8005ac8:	08005a95 	.word	0x08005a95
 8005acc:	08005a95 	.word	0x08005a95
 8005ad0:	08005a95 	.word	0x08005a95
 8005ad4:	08005a95 	.word	0x08005a95
 8005ad8:	08005c25 	.word	0x08005c25
 8005adc:	08005b49 	.word	0x08005b49
 8005ae0:	08005c07 	.word	0x08005c07
 8005ae4:	08005a95 	.word	0x08005a95
 8005ae8:	08005a95 	.word	0x08005a95
 8005aec:	08005c47 	.word	0x08005c47
 8005af0:	08005a95 	.word	0x08005a95
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005a95 	.word	0x08005a95
 8005afc:	08005a95 	.word	0x08005a95
 8005b00:	08005c0f 	.word	0x08005c0f
 8005b04:	680b      	ldr	r3, [r1, #0]
 8005b06:	1d1a      	adds	r2, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	600a      	str	r2, [r1, #0]
 8005b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0a3      	b.n	8005c60 <_printf_i+0x1f4>
 8005b18:	6825      	ldr	r5, [r4, #0]
 8005b1a:	6808      	ldr	r0, [r1, #0]
 8005b1c:	062e      	lsls	r6, r5, #24
 8005b1e:	f100 0304 	add.w	r3, r0, #4
 8005b22:	d50a      	bpl.n	8005b3a <_printf_i+0xce>
 8005b24:	6805      	ldr	r5, [r0, #0]
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	da03      	bge.n	8005b34 <_printf_i+0xc8>
 8005b2c:	232d      	movs	r3, #45	; 0x2d
 8005b2e:	426d      	negs	r5, r5
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b34:	485e      	ldr	r0, [pc, #376]	; (8005cb0 <_printf_i+0x244>)
 8005b36:	230a      	movs	r3, #10
 8005b38:	e019      	b.n	8005b6e <_printf_i+0x102>
 8005b3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b3e:	6805      	ldr	r5, [r0, #0]
 8005b40:	600b      	str	r3, [r1, #0]
 8005b42:	bf18      	it	ne
 8005b44:	b22d      	sxthne	r5, r5
 8005b46:	e7ef      	b.n	8005b28 <_printf_i+0xbc>
 8005b48:	680b      	ldr	r3, [r1, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	1d18      	adds	r0, r3, #4
 8005b4e:	6008      	str	r0, [r1, #0]
 8005b50:	0628      	lsls	r0, r5, #24
 8005b52:	d501      	bpl.n	8005b58 <_printf_i+0xec>
 8005b54:	681d      	ldr	r5, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <_printf_i+0xf2>
 8005b58:	0669      	lsls	r1, r5, #25
 8005b5a:	d5fb      	bpl.n	8005b54 <_printf_i+0xe8>
 8005b5c:	881d      	ldrh	r5, [r3, #0]
 8005b5e:	4854      	ldr	r0, [pc, #336]	; (8005cb0 <_printf_i+0x244>)
 8005b60:	2f6f      	cmp	r7, #111	; 0x6f
 8005b62:	bf0c      	ite	eq
 8005b64:	2308      	moveq	r3, #8
 8005b66:	230a      	movne	r3, #10
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b6e:	6866      	ldr	r6, [r4, #4]
 8005b70:	60a6      	str	r6, [r4, #8]
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	bfa2      	ittt	ge
 8005b76:	6821      	ldrge	r1, [r4, #0]
 8005b78:	f021 0104 	bicge.w	r1, r1, #4
 8005b7c:	6021      	strge	r1, [r4, #0]
 8005b7e:	b90d      	cbnz	r5, 8005b84 <_printf_i+0x118>
 8005b80:	2e00      	cmp	r6, #0
 8005b82:	d04d      	beq.n	8005c20 <_printf_i+0x1b4>
 8005b84:	4616      	mov	r6, r2
 8005b86:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b8a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b8e:	5dc7      	ldrb	r7, [r0, r7]
 8005b90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b94:	462f      	mov	r7, r5
 8005b96:	42bb      	cmp	r3, r7
 8005b98:	460d      	mov	r5, r1
 8005b9a:	d9f4      	bls.n	8005b86 <_printf_i+0x11a>
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d10b      	bne.n	8005bb8 <_printf_i+0x14c>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	07df      	lsls	r7, r3, #31
 8005ba4:	d508      	bpl.n	8005bb8 <_printf_i+0x14c>
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	6861      	ldr	r1, [r4, #4]
 8005baa:	4299      	cmp	r1, r3
 8005bac:	bfde      	ittt	le
 8005bae:	2330      	movle	r3, #48	; 0x30
 8005bb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bb8:	1b92      	subs	r2, r2, r6
 8005bba:	6122      	str	r2, [r4, #16]
 8005bbc:	f8cd a000 	str.w	sl, [sp]
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	aa03      	add	r2, sp, #12
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	f7ff fee2 	bl	8005990 <_printf_common>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d14c      	bne.n	8005c6a <_printf_i+0x1fe>
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	b004      	add	sp, #16
 8005bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bda:	4835      	ldr	r0, [pc, #212]	; (8005cb0 <_printf_i+0x244>)
 8005bdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	680e      	ldr	r6, [r1, #0]
 8005be4:	061f      	lsls	r7, r3, #24
 8005be6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bea:	600e      	str	r6, [r1, #0]
 8005bec:	d514      	bpl.n	8005c18 <_printf_i+0x1ac>
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	bf44      	itt	mi
 8005bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bf6:	6023      	strmi	r3, [r4, #0]
 8005bf8:	b91d      	cbnz	r5, 8005c02 <_printf_i+0x196>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f023 0320 	bic.w	r3, r3, #32
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	2310      	movs	r3, #16
 8005c04:	e7b0      	b.n	8005b68 <_printf_i+0xfc>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	f043 0320 	orr.w	r3, r3, #32
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	2378      	movs	r3, #120	; 0x78
 8005c10:	4828      	ldr	r0, [pc, #160]	; (8005cb4 <_printf_i+0x248>)
 8005c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c16:	e7e3      	b.n	8005be0 <_printf_i+0x174>
 8005c18:	065e      	lsls	r6, r3, #25
 8005c1a:	bf48      	it	mi
 8005c1c:	b2ad      	uxthmi	r5, r5
 8005c1e:	e7e6      	b.n	8005bee <_printf_i+0x182>
 8005c20:	4616      	mov	r6, r2
 8005c22:	e7bb      	b.n	8005b9c <_printf_i+0x130>
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	6826      	ldr	r6, [r4, #0]
 8005c28:	6960      	ldr	r0, [r4, #20]
 8005c2a:	1d1d      	adds	r5, r3, #4
 8005c2c:	600d      	str	r5, [r1, #0]
 8005c2e:	0635      	lsls	r5, r6, #24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0x1cc>
 8005c34:	6018      	str	r0, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0x1d2>
 8005c38:	0671      	lsls	r1, r6, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0x1c8>
 8005c3c:	8018      	strh	r0, [r3, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	4616      	mov	r6, r2
 8005c44:	e7ba      	b.n	8005bbc <_printf_i+0x150>
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	600a      	str	r2, [r1, #0]
 8005c4c:	681e      	ldr	r6, [r3, #0]
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7fa fac4 	bl	80001e0 <memchr>
 8005c58:	b108      	cbz	r0, 8005c5e <_printf_i+0x1f2>
 8005c5a:	1b80      	subs	r0, r0, r6
 8005c5c:	6060      	str	r0, [r4, #4]
 8005c5e:	6863      	ldr	r3, [r4, #4]
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	2300      	movs	r3, #0
 8005c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c68:	e7a8      	b.n	8005bbc <_printf_i+0x150>
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4640      	mov	r0, r8
 8005c72:	47d0      	blx	sl
 8005c74:	3001      	adds	r0, #1
 8005c76:	d0ab      	beq.n	8005bd0 <_printf_i+0x164>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d413      	bmi.n	8005ca6 <_printf_i+0x23a>
 8005c7e:	68e0      	ldr	r0, [r4, #12]
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	4298      	cmp	r0, r3
 8005c84:	bfb8      	it	lt
 8005c86:	4618      	movlt	r0, r3
 8005c88:	e7a4      	b.n	8005bd4 <_printf_i+0x168>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d09b      	beq.n	8005bd0 <_printf_i+0x164>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	9903      	ldr	r1, [sp, #12]
 8005c9e:	1a5b      	subs	r3, r3, r1
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dcf2      	bgt.n	8005c8a <_printf_i+0x21e>
 8005ca4:	e7eb      	b.n	8005c7e <_printf_i+0x212>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	f104 0619 	add.w	r6, r4, #25
 8005cac:	e7f5      	b.n	8005c9a <_printf_i+0x22e>
 8005cae:	bf00      	nop
 8005cb0:	08009c76 	.word	0x08009c76
 8005cb4:	08009c87 	.word	0x08009c87

08005cb8 <_scanf_float>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	b087      	sub	sp, #28
 8005cbe:	4617      	mov	r7, r2
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	688b      	ldr	r3, [r1, #8]
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cca:	bf83      	ittte	hi
 8005ccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cd0:	195b      	addhi	r3, r3, r5
 8005cd2:	9302      	strhi	r3, [sp, #8]
 8005cd4:	2300      	movls	r3, #0
 8005cd6:	bf86      	itte	hi
 8005cd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005cdc:	608b      	strhi	r3, [r1, #8]
 8005cde:	9302      	strls	r3, [sp, #8]
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	468b      	mov	fp, r1
 8005ce4:	2500      	movs	r5, #0
 8005ce6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cea:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	465e      	mov	r6, fp
 8005cf8:	46aa      	mov	sl, r5
 8005cfa:	46a9      	mov	r9, r5
 8005cfc:	9501      	str	r5, [sp, #4]
 8005cfe:	68a2      	ldr	r2, [r4, #8]
 8005d00:	b152      	cbz	r2, 8005d18 <_scanf_float+0x60>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b4e      	cmp	r3, #78	; 0x4e
 8005d08:	d864      	bhi.n	8005dd4 <_scanf_float+0x11c>
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d83c      	bhi.n	8005d88 <_scanf_float+0xd0>
 8005d0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d12:	b2c8      	uxtb	r0, r1
 8005d14:	280e      	cmp	r0, #14
 8005d16:	d93a      	bls.n	8005d8e <_scanf_float+0xd6>
 8005d18:	f1b9 0f00 	cmp.w	r9, #0
 8005d1c:	d003      	beq.n	8005d26 <_scanf_float+0x6e>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d2a:	f1ba 0f01 	cmp.w	sl, #1
 8005d2e:	f200 8113 	bhi.w	8005f58 <_scanf_float+0x2a0>
 8005d32:	455e      	cmp	r6, fp
 8005d34:	f200 8105 	bhi.w	8005f42 <_scanf_float+0x28a>
 8005d38:	2501      	movs	r5, #1
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	b007      	add	sp, #28
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d46:	2a0d      	cmp	r2, #13
 8005d48:	d8e6      	bhi.n	8005d18 <_scanf_float+0x60>
 8005d4a:	a101      	add	r1, pc, #4	; (adr r1, 8005d50 <_scanf_float+0x98>)
 8005d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d50:	08005e8f 	.word	0x08005e8f
 8005d54:	08005d19 	.word	0x08005d19
 8005d58:	08005d19 	.word	0x08005d19
 8005d5c:	08005d19 	.word	0x08005d19
 8005d60:	08005eef 	.word	0x08005eef
 8005d64:	08005ec7 	.word	0x08005ec7
 8005d68:	08005d19 	.word	0x08005d19
 8005d6c:	08005d19 	.word	0x08005d19
 8005d70:	08005e9d 	.word	0x08005e9d
 8005d74:	08005d19 	.word	0x08005d19
 8005d78:	08005d19 	.word	0x08005d19
 8005d7c:	08005d19 	.word	0x08005d19
 8005d80:	08005d19 	.word	0x08005d19
 8005d84:	08005e55 	.word	0x08005e55
 8005d88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d8c:	e7db      	b.n	8005d46 <_scanf_float+0x8e>
 8005d8e:	290e      	cmp	r1, #14
 8005d90:	d8c2      	bhi.n	8005d18 <_scanf_float+0x60>
 8005d92:	a001      	add	r0, pc, #4	; (adr r0, 8005d98 <_scanf_float+0xe0>)
 8005d94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d98:	08005e47 	.word	0x08005e47
 8005d9c:	08005d19 	.word	0x08005d19
 8005da0:	08005e47 	.word	0x08005e47
 8005da4:	08005edb 	.word	0x08005edb
 8005da8:	08005d19 	.word	0x08005d19
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005e31 	.word	0x08005e31
 8005db4:	08005e31 	.word	0x08005e31
 8005db8:	08005e31 	.word	0x08005e31
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005e31 	.word	0x08005e31
 8005dd4:	2b6e      	cmp	r3, #110	; 0x6e
 8005dd6:	d809      	bhi.n	8005dec <_scanf_float+0x134>
 8005dd8:	2b60      	cmp	r3, #96	; 0x60
 8005dda:	d8b2      	bhi.n	8005d42 <_scanf_float+0x8a>
 8005ddc:	2b54      	cmp	r3, #84	; 0x54
 8005dde:	d077      	beq.n	8005ed0 <_scanf_float+0x218>
 8005de0:	2b59      	cmp	r3, #89	; 0x59
 8005de2:	d199      	bne.n	8005d18 <_scanf_float+0x60>
 8005de4:	2d07      	cmp	r5, #7
 8005de6:	d197      	bne.n	8005d18 <_scanf_float+0x60>
 8005de8:	2508      	movs	r5, #8
 8005dea:	e029      	b.n	8005e40 <_scanf_float+0x188>
 8005dec:	2b74      	cmp	r3, #116	; 0x74
 8005dee:	d06f      	beq.n	8005ed0 <_scanf_float+0x218>
 8005df0:	2b79      	cmp	r3, #121	; 0x79
 8005df2:	e7f6      	b.n	8005de2 <_scanf_float+0x12a>
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	05c8      	lsls	r0, r1, #23
 8005df8:	d51a      	bpl.n	8005e30 <_scanf_float+0x178>
 8005dfa:	9b02      	ldr	r3, [sp, #8]
 8005dfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e00:	6021      	str	r1, [r4, #0]
 8005e02:	f109 0901 	add.w	r9, r9, #1
 8005e06:	b11b      	cbz	r3, 8005e10 <_scanf_float+0x158>
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	3201      	adds	r2, #1
 8005e0c:	9302      	str	r3, [sp, #8]
 8005e0e:	60a2      	str	r2, [r4, #8]
 8005e10:	68a3      	ldr	r3, [r4, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60a3      	str	r3, [r4, #8]
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	f340 8084 	ble.w	8005f30 <_scanf_float+0x278>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	e766      	b.n	8005cfe <_scanf_float+0x46>
 8005e30:	eb1a 0f05 	cmn.w	sl, r5
 8005e34:	f47f af70 	bne.w	8005d18 <_scanf_float+0x60>
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	f806 3b01 	strb.w	r3, [r6], #1
 8005e44:	e7e4      	b.n	8005e10 <_scanf_float+0x158>
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	0610      	lsls	r0, r2, #24
 8005e4a:	f57f af65 	bpl.w	8005d18 <_scanf_float+0x60>
 8005e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e52:	e7f4      	b.n	8005e3e <_scanf_float+0x186>
 8005e54:	f1ba 0f00 	cmp.w	sl, #0
 8005e58:	d10e      	bne.n	8005e78 <_scanf_float+0x1c0>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	d10e      	bne.n	8005e7e <_scanf_float+0x1c6>
 8005e60:	6822      	ldr	r2, [r4, #0]
 8005e62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e6a:	d108      	bne.n	8005e7e <_scanf_float+0x1c6>
 8005e6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e70:	6022      	str	r2, [r4, #0]
 8005e72:	f04f 0a01 	mov.w	sl, #1
 8005e76:	e7e3      	b.n	8005e40 <_scanf_float+0x188>
 8005e78:	f1ba 0f02 	cmp.w	sl, #2
 8005e7c:	d055      	beq.n	8005f2a <_scanf_float+0x272>
 8005e7e:	2d01      	cmp	r5, #1
 8005e80:	d002      	beq.n	8005e88 <_scanf_float+0x1d0>
 8005e82:	2d04      	cmp	r5, #4
 8005e84:	f47f af48 	bne.w	8005d18 <_scanf_float+0x60>
 8005e88:	3501      	adds	r5, #1
 8005e8a:	b2ed      	uxtb	r5, r5
 8005e8c:	e7d8      	b.n	8005e40 <_scanf_float+0x188>
 8005e8e:	f1ba 0f01 	cmp.w	sl, #1
 8005e92:	f47f af41 	bne.w	8005d18 <_scanf_float+0x60>
 8005e96:	f04f 0a02 	mov.w	sl, #2
 8005e9a:	e7d1      	b.n	8005e40 <_scanf_float+0x188>
 8005e9c:	b97d      	cbnz	r5, 8005ebe <_scanf_float+0x206>
 8005e9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ea2:	f47f af3c 	bne.w	8005d1e <_scanf_float+0x66>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005eac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005eb0:	f47f af39 	bne.w	8005d26 <_scanf_float+0x6e>
 8005eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005eb8:	6022      	str	r2, [r4, #0]
 8005eba:	2501      	movs	r5, #1
 8005ebc:	e7c0      	b.n	8005e40 <_scanf_float+0x188>
 8005ebe:	2d03      	cmp	r5, #3
 8005ec0:	d0e2      	beq.n	8005e88 <_scanf_float+0x1d0>
 8005ec2:	2d05      	cmp	r5, #5
 8005ec4:	e7de      	b.n	8005e84 <_scanf_float+0x1cc>
 8005ec6:	2d02      	cmp	r5, #2
 8005ec8:	f47f af26 	bne.w	8005d18 <_scanf_float+0x60>
 8005ecc:	2503      	movs	r5, #3
 8005ece:	e7b7      	b.n	8005e40 <_scanf_float+0x188>
 8005ed0:	2d06      	cmp	r5, #6
 8005ed2:	f47f af21 	bne.w	8005d18 <_scanf_float+0x60>
 8005ed6:	2507      	movs	r5, #7
 8005ed8:	e7b2      	b.n	8005e40 <_scanf_float+0x188>
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	0591      	lsls	r1, r2, #22
 8005ede:	f57f af1b 	bpl.w	8005d18 <_scanf_float+0x60>
 8005ee2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005eec:	e7a8      	b.n	8005e40 <_scanf_float+0x188>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ef4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ef8:	d006      	beq.n	8005f08 <_scanf_float+0x250>
 8005efa:	0550      	lsls	r0, r2, #21
 8005efc:	f57f af0c 	bpl.w	8005d18 <_scanf_float+0x60>
 8005f00:	f1b9 0f00 	cmp.w	r9, #0
 8005f04:	f43f af0f 	beq.w	8005d26 <_scanf_float+0x6e>
 8005f08:	0591      	lsls	r1, r2, #22
 8005f0a:	bf58      	it	pl
 8005f0c:	9901      	ldrpl	r1, [sp, #4]
 8005f0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f12:	bf58      	it	pl
 8005f14:	eba9 0101 	subpl.w	r1, r9, r1
 8005f18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f1c:	bf58      	it	pl
 8005f1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	f04f 0900 	mov.w	r9, #0
 8005f28:	e78a      	b.n	8005e40 <_scanf_float+0x188>
 8005f2a:	f04f 0a03 	mov.w	sl, #3
 8005f2e:	e787      	b.n	8005e40 <_scanf_float+0x188>
 8005f30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f34:	4639      	mov	r1, r7
 8005f36:	4640      	mov	r0, r8
 8005f38:	4798      	blx	r3
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f aedf 	beq.w	8005cfe <_scanf_float+0x46>
 8005f40:	e6ea      	b.n	8005d18 <_scanf_float+0x60>
 8005f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	4798      	blx	r3
 8005f50:	6923      	ldr	r3, [r4, #16]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	e6ec      	b.n	8005d32 <_scanf_float+0x7a>
 8005f58:	1e6b      	subs	r3, r5, #1
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d825      	bhi.n	8005faa <_scanf_float+0x2f2>
 8005f5e:	2d02      	cmp	r5, #2
 8005f60:	d836      	bhi.n	8005fd0 <_scanf_float+0x318>
 8005f62:	455e      	cmp	r6, fp
 8005f64:	f67f aee8 	bls.w	8005d38 <_scanf_float+0x80>
 8005f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f70:	463a      	mov	r2, r7
 8005f72:	4640      	mov	r0, r8
 8005f74:	4798      	blx	r3
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	e7f1      	b.n	8005f62 <_scanf_float+0x2aa>
 8005f7e:	9802      	ldr	r0, [sp, #8]
 8005f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f88:	9002      	str	r0, [sp, #8]
 8005f8a:	463a      	mov	r2, r7
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4798      	blx	r3
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8005f9e:	f1ba 0f02 	cmp.w	sl, #2
 8005fa2:	d1ec      	bne.n	8005f7e <_scanf_float+0x2c6>
 8005fa4:	3d03      	subs	r5, #3
 8005fa6:	b2ed      	uxtb	r5, r5
 8005fa8:	1b76      	subs	r6, r6, r5
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	05da      	lsls	r2, r3, #23
 8005fae:	d52f      	bpl.n	8006010 <_scanf_float+0x358>
 8005fb0:	055b      	lsls	r3, r3, #21
 8005fb2:	d510      	bpl.n	8005fd6 <_scanf_float+0x31e>
 8005fb4:	455e      	cmp	r6, fp
 8005fb6:	f67f aebf 	bls.w	8005d38 <_scanf_float+0x80>
 8005fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	4798      	blx	r3
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	e7f1      	b.n	8005fb4 <_scanf_float+0x2fc>
 8005fd0:	46aa      	mov	sl, r5
 8005fd2:	9602      	str	r6, [sp, #8]
 8005fd4:	e7df      	b.n	8005f96 <_scanf_float+0x2de>
 8005fd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	2965      	cmp	r1, #101	; 0x65
 8005fde:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fe2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	d00c      	beq.n	8006004 <_scanf_float+0x34c>
 8005fea:	2945      	cmp	r1, #69	; 0x45
 8005fec:	d00a      	beq.n	8006004 <_scanf_float+0x34c>
 8005fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff2:	463a      	mov	r2, r7
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4798      	blx	r3
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	1eb5      	subs	r5, r6, #2
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006008:	463a      	mov	r2, r7
 800600a:	4640      	mov	r0, r8
 800600c:	4798      	blx	r3
 800600e:	462e      	mov	r6, r5
 8006010:	6825      	ldr	r5, [r4, #0]
 8006012:	f015 0510 	ands.w	r5, r5, #16
 8006016:	d158      	bne.n	80060ca <_scanf_float+0x412>
 8006018:	7035      	strb	r5, [r6, #0]
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006024:	d11c      	bne.n	8006060 <_scanf_float+0x3a8>
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	454b      	cmp	r3, r9
 800602a:	eba3 0209 	sub.w	r2, r3, r9
 800602e:	d124      	bne.n	800607a <_scanf_float+0x3c2>
 8006030:	2200      	movs	r2, #0
 8006032:	4659      	mov	r1, fp
 8006034:	4640      	mov	r0, r8
 8006036:	f000 fe9d 	bl	8006d74 <_strtod_r>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	6821      	ldr	r1, [r4, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f011 0f02 	tst.w	r1, #2
 8006044:	ec57 6b10 	vmov	r6, r7, d0
 8006048:	f103 0204 	add.w	r2, r3, #4
 800604c:	d020      	beq.n	8006090 <_scanf_float+0x3d8>
 800604e:	9903      	ldr	r1, [sp, #12]
 8006050:	600a      	str	r2, [r1, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	e9c3 6700 	strd	r6, r7, [r3]
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60e3      	str	r3, [r4, #12]
 800605e:	e66c      	b.n	8005d3a <_scanf_float+0x82>
 8006060:	9b04      	ldr	r3, [sp, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0e4      	beq.n	8006030 <_scanf_float+0x378>
 8006066:	9905      	ldr	r1, [sp, #20]
 8006068:	230a      	movs	r3, #10
 800606a:	462a      	mov	r2, r5
 800606c:	3101      	adds	r1, #1
 800606e:	4640      	mov	r0, r8
 8006070:	f000 ff0a 	bl	8006e88 <_strtol_r>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	9e05      	ldr	r6, [sp, #20]
 8006078:	1ac2      	subs	r2, r0, r3
 800607a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800607e:	429e      	cmp	r6, r3
 8006080:	bf28      	it	cs
 8006082:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006086:	4912      	ldr	r1, [pc, #72]	; (80060d0 <_scanf_float+0x418>)
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f82b 	bl	80060e4 <siprintf>
 800608e:	e7cf      	b.n	8006030 <_scanf_float+0x378>
 8006090:	f011 0f04 	tst.w	r1, #4
 8006094:	9903      	ldr	r1, [sp, #12]
 8006096:	600a      	str	r2, [r1, #0]
 8006098:	d1db      	bne.n	8006052 <_scanf_float+0x39a>
 800609a:	f8d3 8000 	ldr.w	r8, [r3]
 800609e:	ee10 2a10 	vmov	r2, s0
 80060a2:	ee10 0a10 	vmov	r0, s0
 80060a6:	463b      	mov	r3, r7
 80060a8:	4639      	mov	r1, r7
 80060aa:	f7fa fd3f 	bl	8000b2c <__aeabi_dcmpun>
 80060ae:	b128      	cbz	r0, 80060bc <_scanf_float+0x404>
 80060b0:	4808      	ldr	r0, [pc, #32]	; (80060d4 <_scanf_float+0x41c>)
 80060b2:	f000 f811 	bl	80060d8 <nanf>
 80060b6:	ed88 0a00 	vstr	s0, [r8]
 80060ba:	e7cd      	b.n	8006058 <_scanf_float+0x3a0>
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f7fa fd92 	bl	8000be8 <__aeabi_d2f>
 80060c4:	f8c8 0000 	str.w	r0, [r8]
 80060c8:	e7c6      	b.n	8006058 <_scanf_float+0x3a0>
 80060ca:	2500      	movs	r5, #0
 80060cc:	e635      	b.n	8005d3a <_scanf_float+0x82>
 80060ce:	bf00      	nop
 80060d0:	08009c98 	.word	0x08009c98
 80060d4:	0800a0b0 	.word	0x0800a0b0

080060d8 <nanf>:
 80060d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80060e0 <nanf+0x8>
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	7fc00000 	.word	0x7fc00000

080060e4 <siprintf>:
 80060e4:	b40e      	push	{r1, r2, r3}
 80060e6:	b500      	push	{lr}
 80060e8:	b09c      	sub	sp, #112	; 0x70
 80060ea:	ab1d      	add	r3, sp, #116	; 0x74
 80060ec:	9002      	str	r0, [sp, #8]
 80060ee:	9006      	str	r0, [sp, #24]
 80060f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060f4:	4809      	ldr	r0, [pc, #36]	; (800611c <siprintf+0x38>)
 80060f6:	9107      	str	r1, [sp, #28]
 80060f8:	9104      	str	r1, [sp, #16]
 80060fa:	4909      	ldr	r1, [pc, #36]	; (8006120 <siprintf+0x3c>)
 80060fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006100:	9105      	str	r1, [sp, #20]
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	a902      	add	r1, sp, #8
 8006108:	f002 fea6 	bl	8008e58 <_svfiprintf_r>
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	b01c      	add	sp, #112	; 0x70
 8006114:	f85d eb04 	ldr.w	lr, [sp], #4
 8006118:	b003      	add	sp, #12
 800611a:	4770      	bx	lr
 800611c:	2000000c 	.word	0x2000000c
 8006120:	ffff0208 	.word	0xffff0208

08006124 <sulp>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	ec45 4b10 	vmov	d0, r4, r5
 800612e:	4616      	mov	r6, r2
 8006130:	f002 fc2e 	bl	8008990 <__ulp>
 8006134:	ec51 0b10 	vmov	r0, r1, d0
 8006138:	b17e      	cbz	r6, 800615a <sulp+0x36>
 800613a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800613e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006142:	2b00      	cmp	r3, #0
 8006144:	dd09      	ble.n	800615a <sulp+0x36>
 8006146:	051b      	lsls	r3, r3, #20
 8006148:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800614c:	2400      	movs	r4, #0
 800614e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	f7fa fa4f 	bl	80005f8 <__aeabi_dmul>
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	0000      	movs	r0, r0
	...

08006160 <_strtod_l>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	b0a3      	sub	sp, #140	; 0x8c
 8006166:	461f      	mov	r7, r3
 8006168:	2300      	movs	r3, #0
 800616a:	931e      	str	r3, [sp, #120]	; 0x78
 800616c:	4ba4      	ldr	r3, [pc, #656]	; (8006400 <_strtod_l+0x2a0>)
 800616e:	9219      	str	r2, [sp, #100]	; 0x64
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	9307      	str	r3, [sp, #28]
 8006174:	4604      	mov	r4, r0
 8006176:	4618      	mov	r0, r3
 8006178:	4688      	mov	r8, r1
 800617a:	f7fa f829 	bl	80001d0 <strlen>
 800617e:	f04f 0a00 	mov.w	sl, #0
 8006182:	4605      	mov	r5, r0
 8006184:	f04f 0b00 	mov.w	fp, #0
 8006188:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800618c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	2a2b      	cmp	r2, #43	; 0x2b
 8006192:	d04c      	beq.n	800622e <_strtod_l+0xce>
 8006194:	d839      	bhi.n	800620a <_strtod_l+0xaa>
 8006196:	2a0d      	cmp	r2, #13
 8006198:	d832      	bhi.n	8006200 <_strtod_l+0xa0>
 800619a:	2a08      	cmp	r2, #8
 800619c:	d832      	bhi.n	8006204 <_strtod_l+0xa4>
 800619e:	2a00      	cmp	r2, #0
 80061a0:	d03c      	beq.n	800621c <_strtod_l+0xbc>
 80061a2:	2300      	movs	r3, #0
 80061a4:	930e      	str	r3, [sp, #56]	; 0x38
 80061a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80061a8:	7833      	ldrb	r3, [r6, #0]
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	f040 80b4 	bne.w	8006318 <_strtod_l+0x1b8>
 80061b0:	7873      	ldrb	r3, [r6, #1]
 80061b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061b6:	2b58      	cmp	r3, #88	; 0x58
 80061b8:	d16c      	bne.n	8006294 <_strtod_l+0x134>
 80061ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	ab1e      	add	r3, sp, #120	; 0x78
 80061c0:	9702      	str	r7, [sp, #8]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	4a8f      	ldr	r2, [pc, #572]	; (8006404 <_strtod_l+0x2a4>)
 80061c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80061c8:	a91d      	add	r1, sp, #116	; 0x74
 80061ca:	4620      	mov	r0, r4
 80061cc:	f001 fd40 	bl	8007c50 <__gethex>
 80061d0:	f010 0707 	ands.w	r7, r0, #7
 80061d4:	4605      	mov	r5, r0
 80061d6:	d005      	beq.n	80061e4 <_strtod_l+0x84>
 80061d8:	2f06      	cmp	r7, #6
 80061da:	d12a      	bne.n	8006232 <_strtod_l+0xd2>
 80061dc:	3601      	adds	r6, #1
 80061de:	2300      	movs	r3, #0
 80061e0:	961d      	str	r6, [sp, #116]	; 0x74
 80061e2:	930e      	str	r3, [sp, #56]	; 0x38
 80061e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 8596 	bne.w	8006d18 <_strtod_l+0xbb8>
 80061ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ee:	b1db      	cbz	r3, 8006228 <_strtod_l+0xc8>
 80061f0:	4652      	mov	r2, sl
 80061f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061f6:	ec43 2b10 	vmov	d0, r2, r3
 80061fa:	b023      	add	sp, #140	; 0x8c
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	2a20      	cmp	r2, #32
 8006202:	d1ce      	bne.n	80061a2 <_strtod_l+0x42>
 8006204:	3301      	adds	r3, #1
 8006206:	931d      	str	r3, [sp, #116]	; 0x74
 8006208:	e7c0      	b.n	800618c <_strtod_l+0x2c>
 800620a:	2a2d      	cmp	r2, #45	; 0x2d
 800620c:	d1c9      	bne.n	80061a2 <_strtod_l+0x42>
 800620e:	2201      	movs	r2, #1
 8006210:	920e      	str	r2, [sp, #56]	; 0x38
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	921d      	str	r2, [sp, #116]	; 0x74
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1c4      	bne.n	80061a6 <_strtod_l+0x46>
 800621c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800621e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8576 	bne.w	8006d14 <_strtod_l+0xbb4>
 8006228:	4652      	mov	r2, sl
 800622a:	465b      	mov	r3, fp
 800622c:	e7e3      	b.n	80061f6 <_strtod_l+0x96>
 800622e:	2200      	movs	r2, #0
 8006230:	e7ee      	b.n	8006210 <_strtod_l+0xb0>
 8006232:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006234:	b13a      	cbz	r2, 8006246 <_strtod_l+0xe6>
 8006236:	2135      	movs	r1, #53	; 0x35
 8006238:	a820      	add	r0, sp, #128	; 0x80
 800623a:	f002 fcb4 	bl	8008ba6 <__copybits>
 800623e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006240:	4620      	mov	r0, r4
 8006242:	f002 f879 	bl	8008338 <_Bfree>
 8006246:	3f01      	subs	r7, #1
 8006248:	2f05      	cmp	r7, #5
 800624a:	d807      	bhi.n	800625c <_strtod_l+0xfc>
 800624c:	e8df f007 	tbb	[pc, r7]
 8006250:	1d180b0e 	.word	0x1d180b0e
 8006254:	030e      	.short	0x030e
 8006256:	f04f 0b00 	mov.w	fp, #0
 800625a:	46da      	mov	sl, fp
 800625c:	0728      	lsls	r0, r5, #28
 800625e:	d5c1      	bpl.n	80061e4 <_strtod_l+0x84>
 8006260:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006264:	e7be      	b.n	80061e4 <_strtod_l+0x84>
 8006266:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800626a:	e7f7      	b.n	800625c <_strtod_l+0xfc>
 800626c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006270:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006272:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006276:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800627a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800627e:	e7ed      	b.n	800625c <_strtod_l+0xfc>
 8006280:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006408 <_strtod_l+0x2a8>
 8006284:	f04f 0a00 	mov.w	sl, #0
 8006288:	e7e8      	b.n	800625c <_strtod_l+0xfc>
 800628a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800628e:	f04f 3aff 	mov.w	sl, #4294967295
 8006292:	e7e3      	b.n	800625c <_strtod_l+0xfc>
 8006294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	921d      	str	r2, [sp, #116]	; 0x74
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d0f9      	beq.n	8006294 <_strtod_l+0x134>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d09f      	beq.n	80061e4 <_strtod_l+0x84>
 80062a4:	2301      	movs	r3, #1
 80062a6:	f04f 0900 	mov.w	r9, #0
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062b4:	464f      	mov	r7, r9
 80062b6:	220a      	movs	r2, #10
 80062b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80062ba:	7806      	ldrb	r6, [r0, #0]
 80062bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80062c0:	b2d9      	uxtb	r1, r3
 80062c2:	2909      	cmp	r1, #9
 80062c4:	d92a      	bls.n	800631c <_strtod_l+0x1bc>
 80062c6:	9907      	ldr	r1, [sp, #28]
 80062c8:	462a      	mov	r2, r5
 80062ca:	f002 fedd 	bl	8009088 <strncmp>
 80062ce:	b398      	cbz	r0, 8006338 <_strtod_l+0x1d8>
 80062d0:	2000      	movs	r0, #0
 80062d2:	4633      	mov	r3, r6
 80062d4:	463d      	mov	r5, r7
 80062d6:	9007      	str	r0, [sp, #28]
 80062d8:	4602      	mov	r2, r0
 80062da:	2b65      	cmp	r3, #101	; 0x65
 80062dc:	d001      	beq.n	80062e2 <_strtod_l+0x182>
 80062de:	2b45      	cmp	r3, #69	; 0x45
 80062e0:	d118      	bne.n	8006314 <_strtod_l+0x1b4>
 80062e2:	b91d      	cbnz	r5, 80062ec <_strtod_l+0x18c>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	4303      	orrs	r3, r0
 80062e8:	d098      	beq.n	800621c <_strtod_l+0xbc>
 80062ea:	2500      	movs	r5, #0
 80062ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80062f0:	f108 0301 	add.w	r3, r8, #1
 80062f4:	931d      	str	r3, [sp, #116]	; 0x74
 80062f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80062fa:	2b2b      	cmp	r3, #43	; 0x2b
 80062fc:	d075      	beq.n	80063ea <_strtod_l+0x28a>
 80062fe:	2b2d      	cmp	r3, #45	; 0x2d
 8006300:	d07b      	beq.n	80063fa <_strtod_l+0x29a>
 8006302:	f04f 0c00 	mov.w	ip, #0
 8006306:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800630a:	2909      	cmp	r1, #9
 800630c:	f240 8082 	bls.w	8006414 <_strtod_l+0x2b4>
 8006310:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006314:	2600      	movs	r6, #0
 8006316:	e09d      	b.n	8006454 <_strtod_l+0x2f4>
 8006318:	2300      	movs	r3, #0
 800631a:	e7c4      	b.n	80062a6 <_strtod_l+0x146>
 800631c:	2f08      	cmp	r7, #8
 800631e:	bfd8      	it	le
 8006320:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006322:	f100 0001 	add.w	r0, r0, #1
 8006326:	bfda      	itte	le
 8006328:	fb02 3301 	mlale	r3, r2, r1, r3
 800632c:	9309      	strle	r3, [sp, #36]	; 0x24
 800632e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006332:	3701      	adds	r7, #1
 8006334:	901d      	str	r0, [sp, #116]	; 0x74
 8006336:	e7bf      	b.n	80062b8 <_strtod_l+0x158>
 8006338:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800633a:	195a      	adds	r2, r3, r5
 800633c:	921d      	str	r2, [sp, #116]	; 0x74
 800633e:	5d5b      	ldrb	r3, [r3, r5]
 8006340:	2f00      	cmp	r7, #0
 8006342:	d037      	beq.n	80063b4 <_strtod_l+0x254>
 8006344:	9007      	str	r0, [sp, #28]
 8006346:	463d      	mov	r5, r7
 8006348:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800634c:	2a09      	cmp	r2, #9
 800634e:	d912      	bls.n	8006376 <_strtod_l+0x216>
 8006350:	2201      	movs	r2, #1
 8006352:	e7c2      	b.n	80062da <_strtod_l+0x17a>
 8006354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	921d      	str	r2, [sp, #116]	; 0x74
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	3001      	adds	r0, #1
 800635e:	2b30      	cmp	r3, #48	; 0x30
 8006360:	d0f8      	beq.n	8006354 <_strtod_l+0x1f4>
 8006362:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006366:	2a08      	cmp	r2, #8
 8006368:	f200 84db 	bhi.w	8006d22 <_strtod_l+0xbc2>
 800636c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800636e:	9007      	str	r0, [sp, #28]
 8006370:	2000      	movs	r0, #0
 8006372:	920a      	str	r2, [sp, #40]	; 0x28
 8006374:	4605      	mov	r5, r0
 8006376:	3b30      	subs	r3, #48	; 0x30
 8006378:	f100 0201 	add.w	r2, r0, #1
 800637c:	d014      	beq.n	80063a8 <_strtod_l+0x248>
 800637e:	9907      	ldr	r1, [sp, #28]
 8006380:	4411      	add	r1, r2
 8006382:	9107      	str	r1, [sp, #28]
 8006384:	462a      	mov	r2, r5
 8006386:	eb00 0e05 	add.w	lr, r0, r5
 800638a:	210a      	movs	r1, #10
 800638c:	4572      	cmp	r2, lr
 800638e:	d113      	bne.n	80063b8 <_strtod_l+0x258>
 8006390:	182a      	adds	r2, r5, r0
 8006392:	2a08      	cmp	r2, #8
 8006394:	f105 0501 	add.w	r5, r5, #1
 8006398:	4405      	add	r5, r0
 800639a:	dc1c      	bgt.n	80063d6 <_strtod_l+0x276>
 800639c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800639e:	220a      	movs	r2, #10
 80063a0:	fb02 3301 	mla	r3, r2, r1, r3
 80063a4:	9309      	str	r3, [sp, #36]	; 0x24
 80063a6:	2200      	movs	r2, #0
 80063a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	911d      	str	r1, [sp, #116]	; 0x74
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	4610      	mov	r0, r2
 80063b2:	e7c9      	b.n	8006348 <_strtod_l+0x1e8>
 80063b4:	4638      	mov	r0, r7
 80063b6:	e7d2      	b.n	800635e <_strtod_l+0x1fe>
 80063b8:	2a08      	cmp	r2, #8
 80063ba:	dc04      	bgt.n	80063c6 <_strtod_l+0x266>
 80063bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063be:	434e      	muls	r6, r1
 80063c0:	9609      	str	r6, [sp, #36]	; 0x24
 80063c2:	3201      	adds	r2, #1
 80063c4:	e7e2      	b.n	800638c <_strtod_l+0x22c>
 80063c6:	f102 0c01 	add.w	ip, r2, #1
 80063ca:	f1bc 0f10 	cmp.w	ip, #16
 80063ce:	bfd8      	it	le
 80063d0:	fb01 f909 	mulle.w	r9, r1, r9
 80063d4:	e7f5      	b.n	80063c2 <_strtod_l+0x262>
 80063d6:	2d10      	cmp	r5, #16
 80063d8:	bfdc      	itt	le
 80063da:	220a      	movle	r2, #10
 80063dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80063e0:	e7e1      	b.n	80063a6 <_strtod_l+0x246>
 80063e2:	2300      	movs	r3, #0
 80063e4:	9307      	str	r3, [sp, #28]
 80063e6:	2201      	movs	r2, #1
 80063e8:	e77c      	b.n	80062e4 <_strtod_l+0x184>
 80063ea:	f04f 0c00 	mov.w	ip, #0
 80063ee:	f108 0302 	add.w	r3, r8, #2
 80063f2:	931d      	str	r3, [sp, #116]	; 0x74
 80063f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80063f8:	e785      	b.n	8006306 <_strtod_l+0x1a6>
 80063fa:	f04f 0c01 	mov.w	ip, #1
 80063fe:	e7f6      	b.n	80063ee <_strtod_l+0x28e>
 8006400:	08009ef0 	.word	0x08009ef0
 8006404:	08009ca0 	.word	0x08009ca0
 8006408:	7ff00000 	.word	0x7ff00000
 800640c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	911d      	str	r1, [sp, #116]	; 0x74
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d0f9      	beq.n	800640c <_strtod_l+0x2ac>
 8006418:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800641c:	2908      	cmp	r1, #8
 800641e:	f63f af79 	bhi.w	8006314 <_strtod_l+0x1b4>
 8006422:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006426:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	911d      	str	r1, [sp, #116]	; 0x74
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006436:	2e09      	cmp	r6, #9
 8006438:	d937      	bls.n	80064aa <_strtod_l+0x34a>
 800643a:	9e08      	ldr	r6, [sp, #32]
 800643c:	1b89      	subs	r1, r1, r6
 800643e:	2908      	cmp	r1, #8
 8006440:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006444:	dc02      	bgt.n	800644c <_strtod_l+0x2ec>
 8006446:	4576      	cmp	r6, lr
 8006448:	bfa8      	it	ge
 800644a:	4676      	movge	r6, lr
 800644c:	f1bc 0f00 	cmp.w	ip, #0
 8006450:	d000      	beq.n	8006454 <_strtod_l+0x2f4>
 8006452:	4276      	negs	r6, r6
 8006454:	2d00      	cmp	r5, #0
 8006456:	d14f      	bne.n	80064f8 <_strtod_l+0x398>
 8006458:	9904      	ldr	r1, [sp, #16]
 800645a:	4301      	orrs	r1, r0
 800645c:	f47f aec2 	bne.w	80061e4 <_strtod_l+0x84>
 8006460:	2a00      	cmp	r2, #0
 8006462:	f47f aedb 	bne.w	800621c <_strtod_l+0xbc>
 8006466:	2b69      	cmp	r3, #105	; 0x69
 8006468:	d027      	beq.n	80064ba <_strtod_l+0x35a>
 800646a:	dc24      	bgt.n	80064b6 <_strtod_l+0x356>
 800646c:	2b49      	cmp	r3, #73	; 0x49
 800646e:	d024      	beq.n	80064ba <_strtod_l+0x35a>
 8006470:	2b4e      	cmp	r3, #78	; 0x4e
 8006472:	f47f aed3 	bne.w	800621c <_strtod_l+0xbc>
 8006476:	499e      	ldr	r1, [pc, #632]	; (80066f0 <_strtod_l+0x590>)
 8006478:	a81d      	add	r0, sp, #116	; 0x74
 800647a:	f001 fe41 	bl	8008100 <__match>
 800647e:	2800      	cmp	r0, #0
 8006480:	f43f aecc 	beq.w	800621c <_strtod_l+0xbc>
 8006484:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b28      	cmp	r3, #40	; 0x28
 800648a:	d12d      	bne.n	80064e8 <_strtod_l+0x388>
 800648c:	4999      	ldr	r1, [pc, #612]	; (80066f4 <_strtod_l+0x594>)
 800648e:	aa20      	add	r2, sp, #128	; 0x80
 8006490:	a81d      	add	r0, sp, #116	; 0x74
 8006492:	f001 fe49 	bl	8008128 <__hexnan>
 8006496:	2805      	cmp	r0, #5
 8006498:	d126      	bne.n	80064e8 <_strtod_l+0x388>
 800649a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800649c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80064a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80064a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80064a8:	e69c      	b.n	80061e4 <_strtod_l+0x84>
 80064aa:	210a      	movs	r1, #10
 80064ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80064b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80064b4:	e7b9      	b.n	800642a <_strtod_l+0x2ca>
 80064b6:	2b6e      	cmp	r3, #110	; 0x6e
 80064b8:	e7db      	b.n	8006472 <_strtod_l+0x312>
 80064ba:	498f      	ldr	r1, [pc, #572]	; (80066f8 <_strtod_l+0x598>)
 80064bc:	a81d      	add	r0, sp, #116	; 0x74
 80064be:	f001 fe1f 	bl	8008100 <__match>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f43f aeaa 	beq.w	800621c <_strtod_l+0xbc>
 80064c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064ca:	498c      	ldr	r1, [pc, #560]	; (80066fc <_strtod_l+0x59c>)
 80064cc:	3b01      	subs	r3, #1
 80064ce:	a81d      	add	r0, sp, #116	; 0x74
 80064d0:	931d      	str	r3, [sp, #116]	; 0x74
 80064d2:	f001 fe15 	bl	8008100 <__match>
 80064d6:	b910      	cbnz	r0, 80064de <_strtod_l+0x37e>
 80064d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064da:	3301      	adds	r3, #1
 80064dc:	931d      	str	r3, [sp, #116]	; 0x74
 80064de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800670c <_strtod_l+0x5ac>
 80064e2:	f04f 0a00 	mov.w	sl, #0
 80064e6:	e67d      	b.n	80061e4 <_strtod_l+0x84>
 80064e8:	4885      	ldr	r0, [pc, #532]	; (8006700 <_strtod_l+0x5a0>)
 80064ea:	f002 fdb5 	bl	8009058 <nan>
 80064ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80064f6:	e675      	b.n	80061e4 <_strtod_l+0x84>
 80064f8:	9b07      	ldr	r3, [sp, #28]
 80064fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fc:	1af3      	subs	r3, r6, r3
 80064fe:	2f00      	cmp	r7, #0
 8006500:	bf08      	it	eq
 8006502:	462f      	moveq	r7, r5
 8006504:	2d10      	cmp	r5, #16
 8006506:	9308      	str	r3, [sp, #32]
 8006508:	46a8      	mov	r8, r5
 800650a:	bfa8      	it	ge
 800650c:	f04f 0810 	movge.w	r8, #16
 8006510:	f7f9 fff8 	bl	8000504 <__aeabi_ui2d>
 8006514:	2d09      	cmp	r5, #9
 8006516:	4682      	mov	sl, r0
 8006518:	468b      	mov	fp, r1
 800651a:	dd13      	ble.n	8006544 <_strtod_l+0x3e4>
 800651c:	4b79      	ldr	r3, [pc, #484]	; (8006704 <_strtod_l+0x5a4>)
 800651e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006522:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006526:	f7fa f867 	bl	80005f8 <__aeabi_dmul>
 800652a:	4682      	mov	sl, r0
 800652c:	4648      	mov	r0, r9
 800652e:	468b      	mov	fp, r1
 8006530:	f7f9 ffe8 	bl	8000504 <__aeabi_ui2d>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4650      	mov	r0, sl
 800653a:	4659      	mov	r1, fp
 800653c:	f7f9 fea6 	bl	800028c <__adddf3>
 8006540:	4682      	mov	sl, r0
 8006542:	468b      	mov	fp, r1
 8006544:	2d0f      	cmp	r5, #15
 8006546:	dc38      	bgt.n	80065ba <_strtod_l+0x45a>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f43f ae4a 	beq.w	80061e4 <_strtod_l+0x84>
 8006550:	dd24      	ble.n	800659c <_strtod_l+0x43c>
 8006552:	2b16      	cmp	r3, #22
 8006554:	dc0b      	bgt.n	800656e <_strtod_l+0x40e>
 8006556:	4d6b      	ldr	r5, [pc, #428]	; (8006704 <_strtod_l+0x5a4>)
 8006558:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800655c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006560:	4652      	mov	r2, sl
 8006562:	465b      	mov	r3, fp
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	4682      	mov	sl, r0
 800656a:	468b      	mov	fp, r1
 800656c:	e63a      	b.n	80061e4 <_strtod_l+0x84>
 800656e:	9a08      	ldr	r2, [sp, #32]
 8006570:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006574:	4293      	cmp	r3, r2
 8006576:	db20      	blt.n	80065ba <_strtod_l+0x45a>
 8006578:	4c62      	ldr	r4, [pc, #392]	; (8006704 <_strtod_l+0x5a4>)
 800657a:	f1c5 050f 	rsb	r5, r5, #15
 800657e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006582:	4652      	mov	r2, sl
 8006584:	465b      	mov	r3, fp
 8006586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800658a:	f7fa f835 	bl	80005f8 <__aeabi_dmul>
 800658e:	9b08      	ldr	r3, [sp, #32]
 8006590:	1b5d      	subs	r5, r3, r5
 8006592:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006596:	e9d4 2300 	ldrd	r2, r3, [r4]
 800659a:	e7e3      	b.n	8006564 <_strtod_l+0x404>
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	3316      	adds	r3, #22
 80065a0:	db0b      	blt.n	80065ba <_strtod_l+0x45a>
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	4a57      	ldr	r2, [pc, #348]	; (8006704 <_strtod_l+0x5a4>)
 80065a6:	1b9e      	subs	r6, r3, r6
 80065a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80065ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065b0:	4650      	mov	r0, sl
 80065b2:	4659      	mov	r1, fp
 80065b4:	f7fa f94a 	bl	800084c <__aeabi_ddiv>
 80065b8:	e7d6      	b.n	8006568 <_strtod_l+0x408>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	eba5 0808 	sub.w	r8, r5, r8
 80065c0:	4498      	add	r8, r3
 80065c2:	f1b8 0f00 	cmp.w	r8, #0
 80065c6:	dd71      	ble.n	80066ac <_strtod_l+0x54c>
 80065c8:	f018 030f 	ands.w	r3, r8, #15
 80065cc:	d00a      	beq.n	80065e4 <_strtod_l+0x484>
 80065ce:	494d      	ldr	r1, [pc, #308]	; (8006704 <_strtod_l+0x5a4>)
 80065d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065d4:	4652      	mov	r2, sl
 80065d6:	465b      	mov	r3, fp
 80065d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065dc:	f7fa f80c 	bl	80005f8 <__aeabi_dmul>
 80065e0:	4682      	mov	sl, r0
 80065e2:	468b      	mov	fp, r1
 80065e4:	f038 080f 	bics.w	r8, r8, #15
 80065e8:	d04d      	beq.n	8006686 <_strtod_l+0x526>
 80065ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80065ee:	dd22      	ble.n	8006636 <_strtod_l+0x4d6>
 80065f0:	2500      	movs	r5, #0
 80065f2:	462e      	mov	r6, r5
 80065f4:	9509      	str	r5, [sp, #36]	; 0x24
 80065f6:	9507      	str	r5, [sp, #28]
 80065f8:	2322      	movs	r3, #34	; 0x22
 80065fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800670c <_strtod_l+0x5ac>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	f04f 0a00 	mov.w	sl, #0
 8006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	f43f adec 	beq.w	80061e4 <_strtod_l+0x84>
 800660c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800660e:	4620      	mov	r0, r4
 8006610:	f001 fe92 	bl	8008338 <_Bfree>
 8006614:	9907      	ldr	r1, [sp, #28]
 8006616:	4620      	mov	r0, r4
 8006618:	f001 fe8e 	bl	8008338 <_Bfree>
 800661c:	4631      	mov	r1, r6
 800661e:	4620      	mov	r0, r4
 8006620:	f001 fe8a 	bl	8008338 <_Bfree>
 8006624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006626:	4620      	mov	r0, r4
 8006628:	f001 fe86 	bl	8008338 <_Bfree>
 800662c:	4629      	mov	r1, r5
 800662e:	4620      	mov	r0, r4
 8006630:	f001 fe82 	bl	8008338 <_Bfree>
 8006634:	e5d6      	b.n	80061e4 <_strtod_l+0x84>
 8006636:	2300      	movs	r3, #0
 8006638:	ea4f 1828 	mov.w	r8, r8, asr #4
 800663c:	4650      	mov	r0, sl
 800663e:	4659      	mov	r1, fp
 8006640:	4699      	mov	r9, r3
 8006642:	f1b8 0f01 	cmp.w	r8, #1
 8006646:	dc21      	bgt.n	800668c <_strtod_l+0x52c>
 8006648:	b10b      	cbz	r3, 800664e <_strtod_l+0x4ee>
 800664a:	4682      	mov	sl, r0
 800664c:	468b      	mov	fp, r1
 800664e:	4b2e      	ldr	r3, [pc, #184]	; (8006708 <_strtod_l+0x5a8>)
 8006650:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006654:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006658:	4652      	mov	r2, sl
 800665a:	465b      	mov	r3, fp
 800665c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <_strtod_l+0x5ac>)
 8006666:	460a      	mov	r2, r1
 8006668:	400b      	ands	r3, r1
 800666a:	4929      	ldr	r1, [pc, #164]	; (8006710 <_strtod_l+0x5b0>)
 800666c:	428b      	cmp	r3, r1
 800666e:	4682      	mov	sl, r0
 8006670:	d8be      	bhi.n	80065f0 <_strtod_l+0x490>
 8006672:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006676:	428b      	cmp	r3, r1
 8006678:	bf86      	itte	hi
 800667a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006714 <_strtod_l+0x5b4>
 800667e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006682:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006686:	2300      	movs	r3, #0
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	e081      	b.n	8006790 <_strtod_l+0x630>
 800668c:	f018 0f01 	tst.w	r8, #1
 8006690:	d007      	beq.n	80066a2 <_strtod_l+0x542>
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <_strtod_l+0x5a8>)
 8006694:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7f9 ffac 	bl	80005f8 <__aeabi_dmul>
 80066a0:	2301      	movs	r3, #1
 80066a2:	f109 0901 	add.w	r9, r9, #1
 80066a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066aa:	e7ca      	b.n	8006642 <_strtod_l+0x4e2>
 80066ac:	d0eb      	beq.n	8006686 <_strtod_l+0x526>
 80066ae:	f1c8 0800 	rsb	r8, r8, #0
 80066b2:	f018 020f 	ands.w	r2, r8, #15
 80066b6:	d00a      	beq.n	80066ce <_strtod_l+0x56e>
 80066b8:	4b12      	ldr	r3, [pc, #72]	; (8006704 <_strtod_l+0x5a4>)
 80066ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066be:	4650      	mov	r0, sl
 80066c0:	4659      	mov	r1, fp
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7fa f8c1 	bl	800084c <__aeabi_ddiv>
 80066ca:	4682      	mov	sl, r0
 80066cc:	468b      	mov	fp, r1
 80066ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80066d2:	d0d8      	beq.n	8006686 <_strtod_l+0x526>
 80066d4:	f1b8 0f1f 	cmp.w	r8, #31
 80066d8:	dd1e      	ble.n	8006718 <_strtod_l+0x5b8>
 80066da:	2500      	movs	r5, #0
 80066dc:	462e      	mov	r6, r5
 80066de:	9509      	str	r5, [sp, #36]	; 0x24
 80066e0:	9507      	str	r5, [sp, #28]
 80066e2:	2322      	movs	r3, #34	; 0x22
 80066e4:	f04f 0a00 	mov.w	sl, #0
 80066e8:	f04f 0b00 	mov.w	fp, #0
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	e789      	b.n	8006604 <_strtod_l+0x4a4>
 80066f0:	08009c71 	.word	0x08009c71
 80066f4:	08009cb4 	.word	0x08009cb4
 80066f8:	08009c69 	.word	0x08009c69
 80066fc:	08009df4 	.word	0x08009df4
 8006700:	0800a0b0 	.word	0x0800a0b0
 8006704:	08009f90 	.word	0x08009f90
 8006708:	08009f68 	.word	0x08009f68
 800670c:	7ff00000 	.word	0x7ff00000
 8006710:	7ca00000 	.word	0x7ca00000
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	f018 0310 	ands.w	r3, r8, #16
 800671c:	bf18      	it	ne
 800671e:	236a      	movne	r3, #106	; 0x6a
 8006720:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006ad8 <_strtod_l+0x978>
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	4650      	mov	r0, sl
 8006728:	4659      	mov	r1, fp
 800672a:	2300      	movs	r3, #0
 800672c:	f018 0f01 	tst.w	r8, #1
 8006730:	d004      	beq.n	800673c <_strtod_l+0x5dc>
 8006732:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	2301      	movs	r3, #1
 800673c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006740:	f109 0908 	add.w	r9, r9, #8
 8006744:	d1f2      	bne.n	800672c <_strtod_l+0x5cc>
 8006746:	b10b      	cbz	r3, 800674c <_strtod_l+0x5ec>
 8006748:	4682      	mov	sl, r0
 800674a:	468b      	mov	fp, r1
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	b1bb      	cbz	r3, 8006780 <_strtod_l+0x620>
 8006750:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006754:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006758:	2b00      	cmp	r3, #0
 800675a:	4659      	mov	r1, fp
 800675c:	dd10      	ble.n	8006780 <_strtod_l+0x620>
 800675e:	2b1f      	cmp	r3, #31
 8006760:	f340 8128 	ble.w	80069b4 <_strtod_l+0x854>
 8006764:	2b34      	cmp	r3, #52	; 0x34
 8006766:	bfde      	ittt	le
 8006768:	3b20      	suble	r3, #32
 800676a:	f04f 32ff 	movle.w	r2, #4294967295
 800676e:	fa02 f303 	lslle.w	r3, r2, r3
 8006772:	f04f 0a00 	mov.w	sl, #0
 8006776:	bfcc      	ite	gt
 8006778:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800677c:	ea03 0b01 	andle.w	fp, r3, r1
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	4650      	mov	r0, sl
 8006786:	4659      	mov	r1, fp
 8006788:	f7fa f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800678c:	2800      	cmp	r0, #0
 800678e:	d1a4      	bne.n	80066da <_strtod_l+0x57a>
 8006790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006796:	462b      	mov	r3, r5
 8006798:	463a      	mov	r2, r7
 800679a:	4620      	mov	r0, r4
 800679c:	f001 fe38 	bl	8008410 <__s2b>
 80067a0:	9009      	str	r0, [sp, #36]	; 0x24
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f43f af24 	beq.w	80065f0 <_strtod_l+0x490>
 80067a8:	9b07      	ldr	r3, [sp, #28]
 80067aa:	1b9e      	subs	r6, r3, r6
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb4      	ite	lt
 80067b2:	4633      	movlt	r3, r6
 80067b4:	2300      	movge	r3, #0
 80067b6:	9310      	str	r3, [sp, #64]	; 0x40
 80067b8:	9b08      	ldr	r3, [sp, #32]
 80067ba:	2500      	movs	r5, #0
 80067bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067c0:	9318      	str	r3, [sp, #96]	; 0x60
 80067c2:	462e      	mov	r6, r5
 80067c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c6:	4620      	mov	r0, r4
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	f001 fd75 	bl	80082b8 <_Balloc>
 80067ce:	9007      	str	r0, [sp, #28]
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f43f af11 	beq.w	80065f8 <_strtod_l+0x498>
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	3202      	adds	r2, #2
 80067dc:	f103 010c 	add.w	r1, r3, #12
 80067e0:	0092      	lsls	r2, r2, #2
 80067e2:	300c      	adds	r0, #12
 80067e4:	f001 fd5a 	bl	800829c <memcpy>
 80067e8:	ec4b ab10 	vmov	d0, sl, fp
 80067ec:	aa20      	add	r2, sp, #128	; 0x80
 80067ee:	a91f      	add	r1, sp, #124	; 0x7c
 80067f0:	4620      	mov	r0, r4
 80067f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80067f6:	f002 f947 	bl	8008a88 <__d2b>
 80067fa:	901e      	str	r0, [sp, #120]	; 0x78
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f43f aefb 	beq.w	80065f8 <_strtod_l+0x498>
 8006802:	2101      	movs	r1, #1
 8006804:	4620      	mov	r0, r4
 8006806:	f001 fe9d 	bl	8008544 <__i2b>
 800680a:	4606      	mov	r6, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	f43f aef3 	beq.w	80065f8 <_strtod_l+0x498>
 8006812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006814:	9904      	ldr	r1, [sp, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfab      	itete	ge
 800681a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800681c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800681e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006820:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006824:	bfac      	ite	ge
 8006826:	eb03 0902 	addge.w	r9, r3, r2
 800682a:	1ad7      	sublt	r7, r2, r3
 800682c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800682e:	eba3 0801 	sub.w	r8, r3, r1
 8006832:	4490      	add	r8, r2
 8006834:	4ba3      	ldr	r3, [pc, #652]	; (8006ac4 <_strtod_l+0x964>)
 8006836:	f108 38ff 	add.w	r8, r8, #4294967295
 800683a:	4598      	cmp	r8, r3
 800683c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006840:	f280 80cc 	bge.w	80069dc <_strtod_l+0x87c>
 8006844:	eba3 0308 	sub.w	r3, r3, r8
 8006848:	2b1f      	cmp	r3, #31
 800684a:	eba2 0203 	sub.w	r2, r2, r3
 800684e:	f04f 0101 	mov.w	r1, #1
 8006852:	f300 80b6 	bgt.w	80069c2 <_strtod_l+0x862>
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	9311      	str	r3, [sp, #68]	; 0x44
 800685c:	2300      	movs	r3, #0
 800685e:	930c      	str	r3, [sp, #48]	; 0x30
 8006860:	eb09 0802 	add.w	r8, r9, r2
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	45c1      	cmp	r9, r8
 8006868:	4417      	add	r7, r2
 800686a:	441f      	add	r7, r3
 800686c:	464b      	mov	r3, r9
 800686e:	bfa8      	it	ge
 8006870:	4643      	movge	r3, r8
 8006872:	42bb      	cmp	r3, r7
 8006874:	bfa8      	it	ge
 8006876:	463b      	movge	r3, r7
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfc2      	ittt	gt
 800687c:	eba8 0803 	subgt.w	r8, r8, r3
 8006880:	1aff      	subgt	r7, r7, r3
 8006882:	eba9 0903 	subgt.w	r9, r9, r3
 8006886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	dd17      	ble.n	80068bc <_strtod_l+0x75c>
 800688c:	4631      	mov	r1, r6
 800688e:	461a      	mov	r2, r3
 8006890:	4620      	mov	r0, r4
 8006892:	f001 ff13 	bl	80086bc <__pow5mult>
 8006896:	4606      	mov	r6, r0
 8006898:	2800      	cmp	r0, #0
 800689a:	f43f aead 	beq.w	80065f8 <_strtod_l+0x498>
 800689e:	4601      	mov	r1, r0
 80068a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068a2:	4620      	mov	r0, r4
 80068a4:	f001 fe64 	bl	8008570 <__multiply>
 80068a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80068aa:	2800      	cmp	r0, #0
 80068ac:	f43f aea4 	beq.w	80065f8 <_strtod_l+0x498>
 80068b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068b2:	4620      	mov	r0, r4
 80068b4:	f001 fd40 	bl	8008338 <_Bfree>
 80068b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ba:	931e      	str	r3, [sp, #120]	; 0x78
 80068bc:	f1b8 0f00 	cmp.w	r8, #0
 80068c0:	f300 8091 	bgt.w	80069e6 <_strtod_l+0x886>
 80068c4:	9b08      	ldr	r3, [sp, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd08      	ble.n	80068dc <_strtod_l+0x77c>
 80068ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068cc:	9907      	ldr	r1, [sp, #28]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f001 fef4 	bl	80086bc <__pow5mult>
 80068d4:	9007      	str	r0, [sp, #28]
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f43f ae8e 	beq.w	80065f8 <_strtod_l+0x498>
 80068dc:	2f00      	cmp	r7, #0
 80068de:	dd08      	ble.n	80068f2 <_strtod_l+0x792>
 80068e0:	9907      	ldr	r1, [sp, #28]
 80068e2:	463a      	mov	r2, r7
 80068e4:	4620      	mov	r0, r4
 80068e6:	f001 ff43 	bl	8008770 <__lshift>
 80068ea:	9007      	str	r0, [sp, #28]
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f43f ae83 	beq.w	80065f8 <_strtod_l+0x498>
 80068f2:	f1b9 0f00 	cmp.w	r9, #0
 80068f6:	dd08      	ble.n	800690a <_strtod_l+0x7aa>
 80068f8:	4631      	mov	r1, r6
 80068fa:	464a      	mov	r2, r9
 80068fc:	4620      	mov	r0, r4
 80068fe:	f001 ff37 	bl	8008770 <__lshift>
 8006902:	4606      	mov	r6, r0
 8006904:	2800      	cmp	r0, #0
 8006906:	f43f ae77 	beq.w	80065f8 <_strtod_l+0x498>
 800690a:	9a07      	ldr	r2, [sp, #28]
 800690c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800690e:	4620      	mov	r0, r4
 8006910:	f001 ffb6 	bl	8008880 <__mdiff>
 8006914:	4605      	mov	r5, r0
 8006916:	2800      	cmp	r0, #0
 8006918:	f43f ae6e 	beq.w	80065f8 <_strtod_l+0x498>
 800691c:	68c3      	ldr	r3, [r0, #12]
 800691e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006920:	2300      	movs	r3, #0
 8006922:	60c3      	str	r3, [r0, #12]
 8006924:	4631      	mov	r1, r6
 8006926:	f001 ff8f 	bl	8008848 <__mcmp>
 800692a:	2800      	cmp	r0, #0
 800692c:	da65      	bge.n	80069fa <_strtod_l+0x89a>
 800692e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006930:	ea53 030a 	orrs.w	r3, r3, sl
 8006934:	f040 8087 	bne.w	8006a46 <_strtod_l+0x8e6>
 8006938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8082 	bne.w	8006a46 <_strtod_l+0x8e6>
 8006942:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006946:	0d1b      	lsrs	r3, r3, #20
 8006948:	051b      	lsls	r3, r3, #20
 800694a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800694e:	d97a      	bls.n	8006a46 <_strtod_l+0x8e6>
 8006950:	696b      	ldr	r3, [r5, #20]
 8006952:	b913      	cbnz	r3, 800695a <_strtod_l+0x7fa>
 8006954:	692b      	ldr	r3, [r5, #16]
 8006956:	2b01      	cmp	r3, #1
 8006958:	dd75      	ble.n	8006a46 <_strtod_l+0x8e6>
 800695a:	4629      	mov	r1, r5
 800695c:	2201      	movs	r2, #1
 800695e:	4620      	mov	r0, r4
 8006960:	f001 ff06 	bl	8008770 <__lshift>
 8006964:	4631      	mov	r1, r6
 8006966:	4605      	mov	r5, r0
 8006968:	f001 ff6e 	bl	8008848 <__mcmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	dd6a      	ble.n	8006a46 <_strtod_l+0x8e6>
 8006970:	9904      	ldr	r1, [sp, #16]
 8006972:	4a55      	ldr	r2, [pc, #340]	; (8006ac8 <_strtod_l+0x968>)
 8006974:	465b      	mov	r3, fp
 8006976:	2900      	cmp	r1, #0
 8006978:	f000 8085 	beq.w	8006a86 <_strtod_l+0x926>
 800697c:	ea02 010b 	and.w	r1, r2, fp
 8006980:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006984:	dc7f      	bgt.n	8006a86 <_strtod_l+0x926>
 8006986:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800698a:	f77f aeaa 	ble.w	80066e2 <_strtod_l+0x582>
 800698e:	4a4f      	ldr	r2, [pc, #316]	; (8006acc <_strtod_l+0x96c>)
 8006990:	2300      	movs	r3, #0
 8006992:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006996:	4650      	mov	r0, sl
 8006998:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800699c:	4659      	mov	r1, fp
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	460b      	mov	r3, r1
 80069a4:	4303      	orrs	r3, r0
 80069a6:	bf08      	it	eq
 80069a8:	2322      	moveq	r3, #34	; 0x22
 80069aa:	4682      	mov	sl, r0
 80069ac:	468b      	mov	fp, r1
 80069ae:	bf08      	it	eq
 80069b0:	6023      	streq	r3, [r4, #0]
 80069b2:	e62b      	b.n	800660c <_strtod_l+0x4ac>
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	ea03 0a0a 	and.w	sl, r3, sl
 80069c0:	e6de      	b.n	8006780 <_strtod_l+0x620>
 80069c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80069c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80069ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80069ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80069d2:	fa01 f308 	lsl.w	r3, r1, r8
 80069d6:	930c      	str	r3, [sp, #48]	; 0x30
 80069d8:	9111      	str	r1, [sp, #68]	; 0x44
 80069da:	e741      	b.n	8006860 <_strtod_l+0x700>
 80069dc:	2300      	movs	r3, #0
 80069de:	930c      	str	r3, [sp, #48]	; 0x30
 80069e0:	2301      	movs	r3, #1
 80069e2:	9311      	str	r3, [sp, #68]	; 0x44
 80069e4:	e73c      	b.n	8006860 <_strtod_l+0x700>
 80069e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069e8:	4642      	mov	r2, r8
 80069ea:	4620      	mov	r0, r4
 80069ec:	f001 fec0 	bl	8008770 <__lshift>
 80069f0:	901e      	str	r0, [sp, #120]	; 0x78
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f47f af66 	bne.w	80068c4 <_strtod_l+0x764>
 80069f8:	e5fe      	b.n	80065f8 <_strtod_l+0x498>
 80069fa:	465f      	mov	r7, fp
 80069fc:	d16e      	bne.n	8006adc <_strtod_l+0x97c>
 80069fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a04:	b342      	cbz	r2, 8006a58 <_strtod_l+0x8f8>
 8006a06:	4a32      	ldr	r2, [pc, #200]	; (8006ad0 <_strtod_l+0x970>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d128      	bne.n	8006a5e <_strtod_l+0x8fe>
 8006a0c:	9b04      	ldr	r3, [sp, #16]
 8006a0e:	4650      	mov	r0, sl
 8006a10:	b1eb      	cbz	r3, 8006a4e <_strtod_l+0x8ee>
 8006a12:	4a2d      	ldr	r2, [pc, #180]	; (8006ac8 <_strtod_l+0x968>)
 8006a14:	403a      	ands	r2, r7
 8006a16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a1e:	d819      	bhi.n	8006a54 <_strtod_l+0x8f4>
 8006a20:	0d12      	lsrs	r2, r2, #20
 8006a22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a26:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2a:	4298      	cmp	r0, r3
 8006a2c:	d117      	bne.n	8006a5e <_strtod_l+0x8fe>
 8006a2e:	4b29      	ldr	r3, [pc, #164]	; (8006ad4 <_strtod_l+0x974>)
 8006a30:	429f      	cmp	r7, r3
 8006a32:	d102      	bne.n	8006a3a <_strtod_l+0x8da>
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f addf 	beq.w	80065f8 <_strtod_l+0x498>
 8006a3a:	4b23      	ldr	r3, [pc, #140]	; (8006ac8 <_strtod_l+0x968>)
 8006a3c:	403b      	ands	r3, r7
 8006a3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006a42:	f04f 0a00 	mov.w	sl, #0
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1a0      	bne.n	800698e <_strtod_l+0x82e>
 8006a4c:	e5de      	b.n	800660c <_strtod_l+0x4ac>
 8006a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a52:	e7ea      	b.n	8006a2a <_strtod_l+0x8ca>
 8006a54:	460b      	mov	r3, r1
 8006a56:	e7e8      	b.n	8006a2a <_strtod_l+0x8ca>
 8006a58:	ea53 030a 	orrs.w	r3, r3, sl
 8006a5c:	d088      	beq.n	8006970 <_strtod_l+0x810>
 8006a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a60:	b1db      	cbz	r3, 8006a9a <_strtod_l+0x93a>
 8006a62:	423b      	tst	r3, r7
 8006a64:	d0ef      	beq.n	8006a46 <_strtod_l+0x8e6>
 8006a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	b1c3      	cbz	r3, 8006aa2 <_strtod_l+0x942>
 8006a70:	f7ff fb58 	bl	8006124 <sulp>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a7c:	f7f9 fc06 	bl	800028c <__adddf3>
 8006a80:	4682      	mov	sl, r0
 8006a82:	468b      	mov	fp, r1
 8006a84:	e7df      	b.n	8006a46 <_strtod_l+0x8e6>
 8006a86:	4013      	ands	r3, r2
 8006a88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006a90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006a94:	f04f 3aff 	mov.w	sl, #4294967295
 8006a98:	e7d5      	b.n	8006a46 <_strtod_l+0x8e6>
 8006a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a9c:	ea13 0f0a 	tst.w	r3, sl
 8006aa0:	e7e0      	b.n	8006a64 <_strtod_l+0x904>
 8006aa2:	f7ff fb3f 	bl	8006124 <sulp>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aae:	f7f9 fbeb 	bl	8000288 <__aeabi_dsub>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	468b      	mov	fp, r1
 8006aba:	f7fa f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d0c1      	beq.n	8006a46 <_strtod_l+0x8e6>
 8006ac2:	e60e      	b.n	80066e2 <_strtod_l+0x582>
 8006ac4:	fffffc02 	.word	0xfffffc02
 8006ac8:	7ff00000 	.word	0x7ff00000
 8006acc:	39500000 	.word	0x39500000
 8006ad0:	000fffff 	.word	0x000fffff
 8006ad4:	7fefffff 	.word	0x7fefffff
 8006ad8:	08009cc8 	.word	0x08009cc8
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f002 f82e 	bl	8008b40 <__ratio>
 8006ae4:	ec59 8b10 	vmov	r8, r9, d0
 8006ae8:	ee10 0a10 	vmov	r0, s0
 8006aec:	2200      	movs	r2, #0
 8006aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fffc 	bl	8000af0 <__aeabi_dcmple>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d07c      	beq.n	8006bf6 <_strtod_l+0xa96>
 8006afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d04c      	beq.n	8006b9c <_strtod_l+0xa3c>
 8006b02:	4b95      	ldr	r3, [pc, #596]	; (8006d58 <_strtod_l+0xbf8>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006b0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006d58 <_strtod_l+0xbf8>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	4b92      	ldr	r3, [pc, #584]	; (8006d5c <_strtod_l+0xbfc>)
 8006b14:	403b      	ands	r3, r7
 8006b16:	9311      	str	r3, [sp, #68]	; 0x44
 8006b18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b1a:	4b91      	ldr	r3, [pc, #580]	; (8006d60 <_strtod_l+0xc00>)
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	f040 80b2 	bne.w	8006c86 <_strtod_l+0xb26>
 8006b22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006b2e:	ec4b ab10 	vmov	d0, sl, fp
 8006b32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006b36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b3a:	f001 ff29 	bl	8008990 <__ulp>
 8006b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b42:	ec53 2b10 	vmov	r2, r3, d0
 8006b46:	f7f9 fd57 	bl	80005f8 <__aeabi_dmul>
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	465b      	mov	r3, fp
 8006b4e:	f7f9 fb9d 	bl	800028c <__adddf3>
 8006b52:	460b      	mov	r3, r1
 8006b54:	4981      	ldr	r1, [pc, #516]	; (8006d5c <_strtod_l+0xbfc>)
 8006b56:	4a83      	ldr	r2, [pc, #524]	; (8006d64 <_strtod_l+0xc04>)
 8006b58:	4019      	ands	r1, r3
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	d95e      	bls.n	8006c1e <_strtod_l+0xabe>
 8006b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d103      	bne.n	8006b72 <_strtod_l+0xa12>
 8006b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f43f ad43 	beq.w	80065f8 <_strtod_l+0x498>
 8006b72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006d70 <_strtod_l+0xc10>
 8006b76:	f04f 3aff 	mov.w	sl, #4294967295
 8006b7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f001 fbdb 	bl	8008338 <_Bfree>
 8006b82:	9907      	ldr	r1, [sp, #28]
 8006b84:	4620      	mov	r0, r4
 8006b86:	f001 fbd7 	bl	8008338 <_Bfree>
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f001 fbd3 	bl	8008338 <_Bfree>
 8006b92:	4629      	mov	r1, r5
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 fbcf 	bl	8008338 <_Bfree>
 8006b9a:	e613      	b.n	80067c4 <_strtod_l+0x664>
 8006b9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ba0:	d11b      	bne.n	8006bda <_strtod_l+0xa7a>
 8006ba2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ba6:	b9f3      	cbnz	r3, 8006be6 <_strtod_l+0xa86>
 8006ba8:	4b6b      	ldr	r3, [pc, #428]	; (8006d58 <_strtod_l+0xbf8>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 ff94 	bl	8000adc <__aeabi_dcmplt>
 8006bb4:	b9d0      	cbnz	r0, 8006bec <_strtod_l+0xa8c>
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	4649      	mov	r1, r9
 8006bba:	4b6b      	ldr	r3, [pc, #428]	; (8006d68 <_strtod_l+0xc08>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f7f9 fd1b 	bl	80005f8 <__aeabi_dmul>
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	4689      	mov	r9, r1
 8006bc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006bce:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006bd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006bd8:	e79b      	b.n	8006b12 <_strtod_l+0x9b2>
 8006bda:	f1ba 0f01 	cmp.w	sl, #1
 8006bde:	d102      	bne.n	8006be6 <_strtod_l+0xa86>
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	f43f ad7e 	beq.w	80066e2 <_strtod_l+0x582>
 8006be6:	4b61      	ldr	r3, [pc, #388]	; (8006d6c <_strtod_l+0xc0c>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	e78c      	b.n	8006b06 <_strtod_l+0x9a6>
 8006bec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d68 <_strtod_l+0xc08>
 8006bf0:	f04f 0800 	mov.w	r8, #0
 8006bf4:	e7e7      	b.n	8006bc6 <_strtod_l+0xa66>
 8006bf6:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <_strtod_l+0xc08>)
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f7f9 fcfb 	bl	80005f8 <__aeabi_dmul>
 8006c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c04:	4680      	mov	r8, r0
 8006c06:	4689      	mov	r9, r1
 8006c08:	b933      	cbnz	r3, 8006c18 <_strtod_l+0xab8>
 8006c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c0e:	9012      	str	r0, [sp, #72]	; 0x48
 8006c10:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006c16:	e7dd      	b.n	8006bd4 <_strtod_l+0xa74>
 8006c18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006c1c:	e7f9      	b.n	8006c12 <_strtod_l+0xab2>
 8006c1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1a8      	bne.n	8006b7a <_strtod_l+0xa1a>
 8006c28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c2e:	0d1b      	lsrs	r3, r3, #20
 8006c30:	051b      	lsls	r3, r3, #20
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d1a1      	bne.n	8006b7a <_strtod_l+0xa1a>
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7fa f83d 	bl	8000cb8 <__aeabi_d2lz>
 8006c3e:	f7f9 fcad 	bl	800059c <__aeabi_l2d>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fb1d 	bl	8000288 <__aeabi_dsub>
 8006c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c54:	ea43 030a 	orr.w	r3, r3, sl
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	d053      	beq.n	8006d08 <_strtod_l+0xba8>
 8006c60:	a335      	add	r3, pc, #212	; (adr r3, 8006d38 <_strtod_l+0xbd8>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 ff39 	bl	8000adc <__aeabi_dcmplt>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f47f acce 	bne.w	800660c <_strtod_l+0x4ac>
 8006c70:	a333      	add	r3, pc, #204	; (adr r3, 8006d40 <_strtod_l+0xbe0>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 ff4d 	bl	8000b18 <__aeabi_dcmpgt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f af7b 	beq.w	8006b7a <_strtod_l+0xa1a>
 8006c84:	e4c2      	b.n	800660c <_strtod_l+0x4ac>
 8006c86:	9b04      	ldr	r3, [sp, #16]
 8006c88:	b333      	cbz	r3, 8006cd8 <_strtod_l+0xb78>
 8006c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c90:	d822      	bhi.n	8006cd8 <_strtod_l+0xb78>
 8006c92:	a32d      	add	r3, pc, #180	; (adr r3, 8006d48 <_strtod_l+0xbe8>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	f7f9 ff28 	bl	8000af0 <__aeabi_dcmple>
 8006ca0:	b1a0      	cbz	r0, 8006ccc <_strtod_l+0xb6c>
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	f7f9 ff7f 	bl	8000ba8 <__aeabi_d2uiz>
 8006caa:	2801      	cmp	r0, #1
 8006cac:	bf38      	it	cc
 8006cae:	2001      	movcc	r0, #1
 8006cb0:	f7f9 fc28 	bl	8000504 <__aeabi_ui2d>
 8006cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	4689      	mov	r9, r1
 8006cba:	bb13      	cbnz	r3, 8006d02 <_strtod_l+0xba2>
 8006cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cc0:	9014      	str	r0, [sp, #80]	; 0x50
 8006cc2:	9315      	str	r3, [sp, #84]	; 0x54
 8006cc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006cc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cdc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006ce0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ce4:	f001 fe54 	bl	8008990 <__ulp>
 8006ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cec:	ec53 2b10 	vmov	r2, r3, d0
 8006cf0:	f7f9 fc82 	bl	80005f8 <__aeabi_dmul>
 8006cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cf8:	f7f9 fac8 	bl	800028c <__adddf3>
 8006cfc:	4682      	mov	sl, r0
 8006cfe:	468b      	mov	fp, r1
 8006d00:	e78f      	b.n	8006c22 <_strtod_l+0xac2>
 8006d02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006d06:	e7dd      	b.n	8006cc4 <_strtod_l+0xb64>
 8006d08:	a311      	add	r3, pc, #68	; (adr r3, 8006d50 <_strtod_l+0xbf0>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fee5 	bl	8000adc <__aeabi_dcmplt>
 8006d12:	e7b4      	b.n	8006c7e <_strtod_l+0xb1e>
 8006d14:	2300      	movs	r3, #0
 8006d16:	930e      	str	r3, [sp, #56]	; 0x38
 8006d18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	f7ff ba65 	b.w	80061ec <_strtod_l+0x8c>
 8006d22:	2b65      	cmp	r3, #101	; 0x65
 8006d24:	f43f ab5d 	beq.w	80063e2 <_strtod_l+0x282>
 8006d28:	2b45      	cmp	r3, #69	; 0x45
 8006d2a:	f43f ab5a 	beq.w	80063e2 <_strtod_l+0x282>
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f7ff bb92 	b.w	8006458 <_strtod_l+0x2f8>
 8006d34:	f3af 8000 	nop.w
 8006d38:	94a03595 	.word	0x94a03595
 8006d3c:	3fdfffff 	.word	0x3fdfffff
 8006d40:	35afe535 	.word	0x35afe535
 8006d44:	3fe00000 	.word	0x3fe00000
 8006d48:	ffc00000 	.word	0xffc00000
 8006d4c:	41dfffff 	.word	0x41dfffff
 8006d50:	94a03595 	.word	0x94a03595
 8006d54:	3fcfffff 	.word	0x3fcfffff
 8006d58:	3ff00000 	.word	0x3ff00000
 8006d5c:	7ff00000 	.word	0x7ff00000
 8006d60:	7fe00000 	.word	0x7fe00000
 8006d64:	7c9fffff 	.word	0x7c9fffff
 8006d68:	3fe00000 	.word	0x3fe00000
 8006d6c:	bff00000 	.word	0xbff00000
 8006d70:	7fefffff 	.word	0x7fefffff

08006d74 <_strtod_r>:
 8006d74:	4b01      	ldr	r3, [pc, #4]	; (8006d7c <_strtod_r+0x8>)
 8006d76:	f7ff b9f3 	b.w	8006160 <_strtod_l>
 8006d7a:	bf00      	nop
 8006d7c:	20000074 	.word	0x20000074

08006d80 <_strtol_l.isra.0>:
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d86:	d001      	beq.n	8006d8c <_strtol_l.isra.0+0xc>
 8006d88:	2b24      	cmp	r3, #36	; 0x24
 8006d8a:	d906      	bls.n	8006d9a <_strtol_l.isra.0+0x1a>
 8006d8c:	f7fe faf8 	bl	8005380 <__errno>
 8006d90:	2316      	movs	r3, #22
 8006d92:	6003      	str	r3, [r0, #0]
 8006d94:	2000      	movs	r0, #0
 8006d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9a:	4f3a      	ldr	r7, [pc, #232]	; (8006e84 <_strtol_l.isra.0+0x104>)
 8006d9c:	468e      	mov	lr, r1
 8006d9e:	4676      	mov	r6, lr
 8006da0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006da4:	5de5      	ldrb	r5, [r4, r7]
 8006da6:	f015 0508 	ands.w	r5, r5, #8
 8006daa:	d1f8      	bne.n	8006d9e <_strtol_l.isra.0+0x1e>
 8006dac:	2c2d      	cmp	r4, #45	; 0x2d
 8006dae:	d134      	bne.n	8006e1a <_strtol_l.isra.0+0x9a>
 8006db0:	f89e 4000 	ldrb.w	r4, [lr]
 8006db4:	f04f 0801 	mov.w	r8, #1
 8006db8:	f106 0e02 	add.w	lr, r6, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d05c      	beq.n	8006e7a <_strtol_l.isra.0+0xfa>
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d10c      	bne.n	8006dde <_strtol_l.isra.0+0x5e>
 8006dc4:	2c30      	cmp	r4, #48	; 0x30
 8006dc6:	d10a      	bne.n	8006dde <_strtol_l.isra.0+0x5e>
 8006dc8:	f89e 4000 	ldrb.w	r4, [lr]
 8006dcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dd0:	2c58      	cmp	r4, #88	; 0x58
 8006dd2:	d14d      	bne.n	8006e70 <_strtol_l.isra.0+0xf0>
 8006dd4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f10e 0e02 	add.w	lr, lr, #2
 8006dde:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006de2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006de6:	2600      	movs	r6, #0
 8006de8:	fbbc f9f3 	udiv	r9, ip, r3
 8006dec:	4635      	mov	r5, r6
 8006dee:	fb03 ca19 	mls	sl, r3, r9, ip
 8006df2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006df6:	2f09      	cmp	r7, #9
 8006df8:	d818      	bhi.n	8006e2c <_strtol_l.isra.0+0xac>
 8006dfa:	463c      	mov	r4, r7
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	dd24      	ble.n	8006e4a <_strtol_l.isra.0+0xca>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	db1f      	blt.n	8006e44 <_strtol_l.isra.0+0xc4>
 8006e04:	45a9      	cmp	r9, r5
 8006e06:	d31d      	bcc.n	8006e44 <_strtol_l.isra.0+0xc4>
 8006e08:	d101      	bne.n	8006e0e <_strtol_l.isra.0+0x8e>
 8006e0a:	45a2      	cmp	sl, r4
 8006e0c:	db1a      	blt.n	8006e44 <_strtol_l.isra.0+0xc4>
 8006e0e:	fb05 4503 	mla	r5, r5, r3, r4
 8006e12:	2601      	movs	r6, #1
 8006e14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e18:	e7eb      	b.n	8006df2 <_strtol_l.isra.0+0x72>
 8006e1a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e1c:	bf08      	it	eq
 8006e1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006e22:	46a8      	mov	r8, r5
 8006e24:	bf08      	it	eq
 8006e26:	f106 0e02 	addeq.w	lr, r6, #2
 8006e2a:	e7c7      	b.n	8006dbc <_strtol_l.isra.0+0x3c>
 8006e2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e30:	2f19      	cmp	r7, #25
 8006e32:	d801      	bhi.n	8006e38 <_strtol_l.isra.0+0xb8>
 8006e34:	3c37      	subs	r4, #55	; 0x37
 8006e36:	e7e1      	b.n	8006dfc <_strtol_l.isra.0+0x7c>
 8006e38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e3c:	2f19      	cmp	r7, #25
 8006e3e:	d804      	bhi.n	8006e4a <_strtol_l.isra.0+0xca>
 8006e40:	3c57      	subs	r4, #87	; 0x57
 8006e42:	e7db      	b.n	8006dfc <_strtol_l.isra.0+0x7c>
 8006e44:	f04f 36ff 	mov.w	r6, #4294967295
 8006e48:	e7e4      	b.n	8006e14 <_strtol_l.isra.0+0x94>
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	da05      	bge.n	8006e5a <_strtol_l.isra.0+0xda>
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	4665      	mov	r5, ip
 8006e54:	b942      	cbnz	r2, 8006e68 <_strtol_l.isra.0+0xe8>
 8006e56:	4628      	mov	r0, r5
 8006e58:	e79d      	b.n	8006d96 <_strtol_l.isra.0+0x16>
 8006e5a:	f1b8 0f00 	cmp.w	r8, #0
 8006e5e:	d000      	beq.n	8006e62 <_strtol_l.isra.0+0xe2>
 8006e60:	426d      	negs	r5, r5
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	d0f7      	beq.n	8006e56 <_strtol_l.isra.0+0xd6>
 8006e66:	b10e      	cbz	r6, 8006e6c <_strtol_l.isra.0+0xec>
 8006e68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006e6c:	6011      	str	r1, [r2, #0]
 8006e6e:	e7f2      	b.n	8006e56 <_strtol_l.isra.0+0xd6>
 8006e70:	2430      	movs	r4, #48	; 0x30
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1b3      	bne.n	8006dde <_strtol_l.isra.0+0x5e>
 8006e76:	2308      	movs	r3, #8
 8006e78:	e7b1      	b.n	8006dde <_strtol_l.isra.0+0x5e>
 8006e7a:	2c30      	cmp	r4, #48	; 0x30
 8006e7c:	d0a4      	beq.n	8006dc8 <_strtol_l.isra.0+0x48>
 8006e7e:	230a      	movs	r3, #10
 8006e80:	e7ad      	b.n	8006dde <_strtol_l.isra.0+0x5e>
 8006e82:	bf00      	nop
 8006e84:	08009cf1 	.word	0x08009cf1

08006e88 <_strtol_r>:
 8006e88:	f7ff bf7a 	b.w	8006d80 <_strtol_l.isra.0>

08006e8c <quorem>:
 8006e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	6903      	ldr	r3, [r0, #16]
 8006e92:	690c      	ldr	r4, [r1, #16]
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	4607      	mov	r7, r0
 8006e98:	f2c0 8081 	blt.w	8006f9e <quorem+0x112>
 8006e9c:	3c01      	subs	r4, #1
 8006e9e:	f101 0814 	add.w	r8, r1, #20
 8006ea2:	f100 0514 	add.w	r5, r0, #20
 8006ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ec4:	d331      	bcc.n	8006f2a <quorem+0x9e>
 8006ec6:	f04f 0e00 	mov.w	lr, #0
 8006eca:	4640      	mov	r0, r8
 8006ecc:	46ac      	mov	ip, r5
 8006ece:	46f2      	mov	sl, lr
 8006ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ed4:	b293      	uxth	r3, r2
 8006ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8006eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ee4:	0c12      	lsrs	r2, r2, #16
 8006ee6:	f8dc a000 	ldr.w	sl, [ip]
 8006eea:	fb06 e202 	mla	r2, r6, r2, lr
 8006eee:	fa13 f38a 	uxtah	r3, r3, sl
 8006ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ef6:	fa1f fa82 	uxth.w	sl, r2
 8006efa:	f8dc 2000 	ldr.w	r2, [ip]
 8006efe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f0c:	4581      	cmp	r9, r0
 8006f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f16:	d2db      	bcs.n	8006ed0 <quorem+0x44>
 8006f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f1c:	b92b      	cbnz	r3, 8006f2a <quorem+0x9e>
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	429d      	cmp	r5, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	d32e      	bcc.n	8006f86 <quorem+0xfa>
 8006f28:	613c      	str	r4, [r7, #16]
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f001 fc8c 	bl	8008848 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	db24      	blt.n	8006f7e <quorem+0xf2>
 8006f34:	3601      	adds	r6, #1
 8006f36:	4628      	mov	r0, r5
 8006f38:	f04f 0c00 	mov.w	ip, #0
 8006f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f40:	f8d0 e000 	ldr.w	lr, [r0]
 8006f44:	b293      	uxth	r3, r2
 8006f46:	ebac 0303 	sub.w	r3, ip, r3
 8006f4a:	0c12      	lsrs	r2, r2, #16
 8006f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5e:	45c1      	cmp	r9, r8
 8006f60:	f840 3b04 	str.w	r3, [r0], #4
 8006f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f68:	d2e8      	bcs.n	8006f3c <quorem+0xb0>
 8006f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f72:	b922      	cbnz	r2, 8006f7e <quorem+0xf2>
 8006f74:	3b04      	subs	r3, #4
 8006f76:	429d      	cmp	r5, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	d30a      	bcc.n	8006f92 <quorem+0x106>
 8006f7c:	613c      	str	r4, [r7, #16]
 8006f7e:	4630      	mov	r0, r6
 8006f80:	b003      	add	sp, #12
 8006f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1cc      	bne.n	8006f28 <quorem+0x9c>
 8006f8e:	3c01      	subs	r4, #1
 8006f90:	e7c7      	b.n	8006f22 <quorem+0x96>
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d1f0      	bne.n	8006f7c <quorem+0xf0>
 8006f9a:	3c01      	subs	r4, #1
 8006f9c:	e7eb      	b.n	8006f76 <quorem+0xea>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e7ee      	b.n	8006f80 <quorem+0xf4>
 8006fa2:	0000      	movs	r0, r0
 8006fa4:	0000      	movs	r0, r0
	...

08006fa8 <_dtoa_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	ed2d 8b02 	vpush	{d8}
 8006fb0:	ec57 6b10 	vmov	r6, r7, d0
 8006fb4:	b095      	sub	sp, #84	; 0x54
 8006fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fbc:	9105      	str	r1, [sp, #20]
 8006fbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fc8:	b975      	cbnz	r5, 8006fe8 <_dtoa_r+0x40>
 8006fca:	2010      	movs	r0, #16
 8006fcc:	f001 f94c 	bl	8008268 <malloc>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fd4:	b920      	cbnz	r0, 8006fe0 <_dtoa_r+0x38>
 8006fd6:	4bb2      	ldr	r3, [pc, #712]	; (80072a0 <_dtoa_r+0x2f8>)
 8006fd8:	21ea      	movs	r1, #234	; 0xea
 8006fda:	48b2      	ldr	r0, [pc, #712]	; (80072a4 <_dtoa_r+0x2fc>)
 8006fdc:	f002 f874 	bl	80090c8 <__assert_func>
 8006fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fe4:	6005      	str	r5, [r0, #0]
 8006fe6:	60c5      	str	r5, [r0, #12]
 8006fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	b151      	cbz	r1, 8007004 <_dtoa_r+0x5c>
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	604a      	str	r2, [r1, #4]
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4093      	lsls	r3, r2
 8006ff6:	608b      	str	r3, [r1, #8]
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 f99d 	bl	8008338 <_Bfree>
 8006ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	1e3b      	subs	r3, r7, #0
 8007006:	bfb9      	ittee	lt
 8007008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800700c:	9303      	strlt	r3, [sp, #12]
 800700e:	2300      	movge	r3, #0
 8007010:	f8c8 3000 	strge.w	r3, [r8]
 8007014:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007018:	4ba3      	ldr	r3, [pc, #652]	; (80072a8 <_dtoa_r+0x300>)
 800701a:	bfbc      	itt	lt
 800701c:	2201      	movlt	r2, #1
 800701e:	f8c8 2000 	strlt.w	r2, [r8]
 8007022:	ea33 0309 	bics.w	r3, r3, r9
 8007026:	d11b      	bne.n	8007060 <_dtoa_r+0xb8>
 8007028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800702a:	f242 730f 	movw	r3, #9999	; 0x270f
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007034:	4333      	orrs	r3, r6
 8007036:	f000 857a 	beq.w	8007b2e <_dtoa_r+0xb86>
 800703a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800703c:	b963      	cbnz	r3, 8007058 <_dtoa_r+0xb0>
 800703e:	4b9b      	ldr	r3, [pc, #620]	; (80072ac <_dtoa_r+0x304>)
 8007040:	e024      	b.n	800708c <_dtoa_r+0xe4>
 8007042:	4b9b      	ldr	r3, [pc, #620]	; (80072b0 <_dtoa_r+0x308>)
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	9800      	ldr	r0, [sp, #0]
 800704e:	b015      	add	sp, #84	; 0x54
 8007050:	ecbd 8b02 	vpop	{d8}
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	4b94      	ldr	r3, [pc, #592]	; (80072ac <_dtoa_r+0x304>)
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	3303      	adds	r3, #3
 800705e:	e7f3      	b.n	8007048 <_dtoa_r+0xa0>
 8007060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	ec51 0b17 	vmov	r0, r1, d7
 800706a:	2300      	movs	r3, #0
 800706c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007070:	f7f9 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007074:	4680      	mov	r8, r0
 8007076:	b158      	cbz	r0, 8007090 <_dtoa_r+0xe8>
 8007078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800707a:	2301      	movs	r3, #1
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8551 	beq.w	8007b28 <_dtoa_r+0xb80>
 8007086:	488b      	ldr	r0, [pc, #556]	; (80072b4 <_dtoa_r+0x30c>)
 8007088:	6018      	str	r0, [r3, #0]
 800708a:	1e43      	subs	r3, r0, #1
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	e7dd      	b.n	800704c <_dtoa_r+0xa4>
 8007090:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007094:	aa12      	add	r2, sp, #72	; 0x48
 8007096:	a913      	add	r1, sp, #76	; 0x4c
 8007098:	4620      	mov	r0, r4
 800709a:	f001 fcf5 	bl	8008a88 <__d2b>
 800709e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070a2:	4683      	mov	fp, r0
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	d07c      	beq.n	80071a2 <_dtoa_r+0x1fa>
 80070a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070c2:	4b7d      	ldr	r3, [pc, #500]	; (80072b8 <_dtoa_r+0x310>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 f8dd 	bl	8000288 <__aeabi_dsub>
 80070ce:	a36e      	add	r3, pc, #440	; (adr r3, 8007288 <_dtoa_r+0x2e0>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	a36d      	add	r3, pc, #436	; (adr r3, 8007290 <_dtoa_r+0x2e8>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 f8d5 	bl	800028c <__adddf3>
 80070e2:	4606      	mov	r6, r0
 80070e4:	4628      	mov	r0, r5
 80070e6:	460f      	mov	r7, r1
 80070e8:	f7f9 fa1c 	bl	8000524 <__aeabi_i2d>
 80070ec:	a36a      	add	r3, pc, #424	; (adr r3, 8007298 <_dtoa_r+0x2f0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 fa81 	bl	80005f8 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 f8c5 	bl	800028c <__adddf3>
 8007102:	4606      	mov	r6, r0
 8007104:	460f      	mov	r7, r1
 8007106:	f7f9 fd27 	bl	8000b58 <__aeabi_d2iz>
 800710a:	2200      	movs	r2, #0
 800710c:	4682      	mov	sl, r0
 800710e:	2300      	movs	r3, #0
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fce2 	bl	8000adc <__aeabi_dcmplt>
 8007118:	b148      	cbz	r0, 800712e <_dtoa_r+0x186>
 800711a:	4650      	mov	r0, sl
 800711c:	f7f9 fa02 	bl	8000524 <__aeabi_i2d>
 8007120:	4632      	mov	r2, r6
 8007122:	463b      	mov	r3, r7
 8007124:	f7f9 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007128:	b908      	cbnz	r0, 800712e <_dtoa_r+0x186>
 800712a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800712e:	f1ba 0f16 	cmp.w	sl, #22
 8007132:	d854      	bhi.n	80071de <_dtoa_r+0x236>
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <_dtoa_r+0x314>)
 8007136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007142:	f7f9 fccb 	bl	8000adc <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d04b      	beq.n	80071e2 <_dtoa_r+0x23a>
 800714a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800714e:	2300      	movs	r3, #0
 8007150:	930e      	str	r3, [sp, #56]	; 0x38
 8007152:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007154:	1b5d      	subs	r5, r3, r5
 8007156:	1e6b      	subs	r3, r5, #1
 8007158:	9304      	str	r3, [sp, #16]
 800715a:	bf43      	ittte	mi
 800715c:	2300      	movmi	r3, #0
 800715e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007162:	9304      	strmi	r3, [sp, #16]
 8007164:	f04f 0800 	movpl.w	r8, #0
 8007168:	f1ba 0f00 	cmp.w	sl, #0
 800716c:	db3b      	blt.n	80071e6 <_dtoa_r+0x23e>
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007174:	4453      	add	r3, sl
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	2300      	movs	r3, #0
 800717a:	9306      	str	r3, [sp, #24]
 800717c:	9b05      	ldr	r3, [sp, #20]
 800717e:	2b09      	cmp	r3, #9
 8007180:	d869      	bhi.n	8007256 <_dtoa_r+0x2ae>
 8007182:	2b05      	cmp	r3, #5
 8007184:	bfc4      	itt	gt
 8007186:	3b04      	subgt	r3, #4
 8007188:	9305      	strgt	r3, [sp, #20]
 800718a:	9b05      	ldr	r3, [sp, #20]
 800718c:	f1a3 0302 	sub.w	r3, r3, #2
 8007190:	bfcc      	ite	gt
 8007192:	2500      	movgt	r5, #0
 8007194:	2501      	movle	r5, #1
 8007196:	2b03      	cmp	r3, #3
 8007198:	d869      	bhi.n	800726e <_dtoa_r+0x2c6>
 800719a:	e8df f003 	tbb	[pc, r3]
 800719e:	4e2c      	.short	0x4e2c
 80071a0:	5a4c      	.short	0x5a4c
 80071a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071a6:	441d      	add	r5, r3
 80071a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	bfc1      	itttt	gt
 80071b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80071bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c0:	bfda      	itte	le
 80071c2:	f1c3 0320 	rsble	r3, r3, #32
 80071c6:	fa06 f003 	lslle.w	r0, r6, r3
 80071ca:	4318      	orrgt	r0, r3
 80071cc:	f7f9 f99a 	bl	8000504 <__aeabi_ui2d>
 80071d0:	2301      	movs	r3, #1
 80071d2:	4606      	mov	r6, r0
 80071d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071d8:	3d01      	subs	r5, #1
 80071da:	9310      	str	r3, [sp, #64]	; 0x40
 80071dc:	e771      	b.n	80070c2 <_dtoa_r+0x11a>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7b6      	b.n	8007150 <_dtoa_r+0x1a8>
 80071e2:	900e      	str	r0, [sp, #56]	; 0x38
 80071e4:	e7b5      	b.n	8007152 <_dtoa_r+0x1aa>
 80071e6:	f1ca 0300 	rsb	r3, sl, #0
 80071ea:	9306      	str	r3, [sp, #24]
 80071ec:	2300      	movs	r3, #0
 80071ee:	eba8 080a 	sub.w	r8, r8, sl
 80071f2:	930d      	str	r3, [sp, #52]	; 0x34
 80071f4:	e7c2      	b.n	800717c <_dtoa_r+0x1d4>
 80071f6:	2300      	movs	r3, #0
 80071f8:	9308      	str	r3, [sp, #32]
 80071fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dc39      	bgt.n	8007274 <_dtoa_r+0x2cc>
 8007200:	f04f 0901 	mov.w	r9, #1
 8007204:	f8cd 9004 	str.w	r9, [sp, #4]
 8007208:	464b      	mov	r3, r9
 800720a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800720e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007210:	2200      	movs	r2, #0
 8007212:	6042      	str	r2, [r0, #4]
 8007214:	2204      	movs	r2, #4
 8007216:	f102 0614 	add.w	r6, r2, #20
 800721a:	429e      	cmp	r6, r3
 800721c:	6841      	ldr	r1, [r0, #4]
 800721e:	d92f      	bls.n	8007280 <_dtoa_r+0x2d8>
 8007220:	4620      	mov	r0, r4
 8007222:	f001 f849 	bl	80082b8 <_Balloc>
 8007226:	9000      	str	r0, [sp, #0]
 8007228:	2800      	cmp	r0, #0
 800722a:	d14b      	bne.n	80072c4 <_dtoa_r+0x31c>
 800722c:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <_dtoa_r+0x318>)
 800722e:	4602      	mov	r2, r0
 8007230:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007234:	e6d1      	b.n	8006fda <_dtoa_r+0x32>
 8007236:	2301      	movs	r3, #1
 8007238:	e7de      	b.n	80071f8 <_dtoa_r+0x250>
 800723a:	2300      	movs	r3, #0
 800723c:	9308      	str	r3, [sp, #32]
 800723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007240:	eb0a 0903 	add.w	r9, sl, r3
 8007244:	f109 0301 	add.w	r3, r9, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	bfb8      	it	lt
 800724e:	2301      	movlt	r3, #1
 8007250:	e7dd      	b.n	800720e <_dtoa_r+0x266>
 8007252:	2301      	movs	r3, #1
 8007254:	e7f2      	b.n	800723c <_dtoa_r+0x294>
 8007256:	2501      	movs	r5, #1
 8007258:	2300      	movs	r3, #0
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	9508      	str	r5, [sp, #32]
 800725e:	f04f 39ff 	mov.w	r9, #4294967295
 8007262:	2200      	movs	r2, #0
 8007264:	f8cd 9004 	str.w	r9, [sp, #4]
 8007268:	2312      	movs	r3, #18
 800726a:	9209      	str	r2, [sp, #36]	; 0x24
 800726c:	e7cf      	b.n	800720e <_dtoa_r+0x266>
 800726e:	2301      	movs	r3, #1
 8007270:	9308      	str	r3, [sp, #32]
 8007272:	e7f4      	b.n	800725e <_dtoa_r+0x2b6>
 8007274:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007278:	f8cd 9004 	str.w	r9, [sp, #4]
 800727c:	464b      	mov	r3, r9
 800727e:	e7c6      	b.n	800720e <_dtoa_r+0x266>
 8007280:	3101      	adds	r1, #1
 8007282:	6041      	str	r1, [r0, #4]
 8007284:	0052      	lsls	r2, r2, #1
 8007286:	e7c6      	b.n	8007216 <_dtoa_r+0x26e>
 8007288:	636f4361 	.word	0x636f4361
 800728c:	3fd287a7 	.word	0x3fd287a7
 8007290:	8b60c8b3 	.word	0x8b60c8b3
 8007294:	3fc68a28 	.word	0x3fc68a28
 8007298:	509f79fb 	.word	0x509f79fb
 800729c:	3fd34413 	.word	0x3fd34413
 80072a0:	08009dfe 	.word	0x08009dfe
 80072a4:	08009e15 	.word	0x08009e15
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	08009dfa 	.word	0x08009dfa
 80072b0:	08009df1 	.word	0x08009df1
 80072b4:	08009c75 	.word	0x08009c75
 80072b8:	3ff80000 	.word	0x3ff80000
 80072bc:	08009f90 	.word	0x08009f90
 80072c0:	08009e74 	.word	0x08009e74
 80072c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c6:	9a00      	ldr	r2, [sp, #0]
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	2b0e      	cmp	r3, #14
 80072ce:	f200 80ad 	bhi.w	800742c <_dtoa_r+0x484>
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	f000 80aa 	beq.w	800742c <_dtoa_r+0x484>
 80072d8:	f1ba 0f00 	cmp.w	sl, #0
 80072dc:	dd36      	ble.n	800734c <_dtoa_r+0x3a4>
 80072de:	4ac3      	ldr	r2, [pc, #780]	; (80075ec <_dtoa_r+0x644>)
 80072e0:	f00a 030f 	and.w	r3, sl, #15
 80072e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072e8:	ed93 7b00 	vldr	d7, [r3]
 80072ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072f4:	eeb0 8a47 	vmov.f32	s16, s14
 80072f8:	eef0 8a67 	vmov.f32	s17, s15
 80072fc:	d016      	beq.n	800732c <_dtoa_r+0x384>
 80072fe:	4bbc      	ldr	r3, [pc, #752]	; (80075f0 <_dtoa_r+0x648>)
 8007300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007308:	f7f9 faa0 	bl	800084c <__aeabi_ddiv>
 800730c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007310:	f007 070f 	and.w	r7, r7, #15
 8007314:	2503      	movs	r5, #3
 8007316:	4eb6      	ldr	r6, [pc, #728]	; (80075f0 <_dtoa_r+0x648>)
 8007318:	b957      	cbnz	r7, 8007330 <_dtoa_r+0x388>
 800731a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800731e:	ec53 2b18 	vmov	r2, r3, d8
 8007322:	f7f9 fa93 	bl	800084c <__aeabi_ddiv>
 8007326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732a:	e029      	b.n	8007380 <_dtoa_r+0x3d8>
 800732c:	2502      	movs	r5, #2
 800732e:	e7f2      	b.n	8007316 <_dtoa_r+0x36e>
 8007330:	07f9      	lsls	r1, r7, #31
 8007332:	d508      	bpl.n	8007346 <_dtoa_r+0x39e>
 8007334:	ec51 0b18 	vmov	r0, r1, d8
 8007338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	ec41 0b18 	vmov	d8, r0, r1
 8007344:	3501      	adds	r5, #1
 8007346:	107f      	asrs	r7, r7, #1
 8007348:	3608      	adds	r6, #8
 800734a:	e7e5      	b.n	8007318 <_dtoa_r+0x370>
 800734c:	f000 80a6 	beq.w	800749c <_dtoa_r+0x4f4>
 8007350:	f1ca 0600 	rsb	r6, sl, #0
 8007354:	4ba5      	ldr	r3, [pc, #660]	; (80075ec <_dtoa_r+0x644>)
 8007356:	4fa6      	ldr	r7, [pc, #664]	; (80075f0 <_dtoa_r+0x648>)
 8007358:	f006 020f 	and.w	r2, r6, #15
 800735c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007368:	f7f9 f946 	bl	80005f8 <__aeabi_dmul>
 800736c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007370:	1136      	asrs	r6, r6, #4
 8007372:	2300      	movs	r3, #0
 8007374:	2502      	movs	r5, #2
 8007376:	2e00      	cmp	r6, #0
 8007378:	f040 8085 	bne.w	8007486 <_dtoa_r+0x4de>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1d2      	bne.n	8007326 <_dtoa_r+0x37e>
 8007380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 808c 	beq.w	80074a0 <_dtoa_r+0x4f8>
 8007388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738c:	4b99      	ldr	r3, [pc, #612]	; (80075f4 <_dtoa_r+0x64c>)
 800738e:	2200      	movs	r2, #0
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fba2 	bl	8000adc <__aeabi_dcmplt>
 8007398:	2800      	cmp	r0, #0
 800739a:	f000 8081 	beq.w	80074a0 <_dtoa_r+0x4f8>
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d07d      	beq.n	80074a0 <_dtoa_r+0x4f8>
 80073a4:	f1b9 0f00 	cmp.w	r9, #0
 80073a8:	dd3c      	ble.n	8007424 <_dtoa_r+0x47c>
 80073aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	2200      	movs	r2, #0
 80073b2:	4b91      	ldr	r3, [pc, #580]	; (80075f8 <_dtoa_r+0x650>)
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 f91e 	bl	80005f8 <__aeabi_dmul>
 80073bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c0:	3501      	adds	r5, #1
 80073c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7f9 f8aa 	bl	8000524 <__aeabi_i2d>
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4b88      	ldr	r3, [pc, #544]	; (80075fc <_dtoa_r+0x654>)
 80073da:	2200      	movs	r2, #0
 80073dc:	f7f8 ff56 	bl	800028c <__adddf3>
 80073e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e8:	9303      	str	r3, [sp, #12]
 80073ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d15c      	bne.n	80074aa <_dtoa_r+0x502>
 80073f0:	4b83      	ldr	r3, [pc, #524]	; (8007600 <_dtoa_r+0x658>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	4630      	mov	r0, r6
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f8 ff46 	bl	8000288 <__aeabi_dsub>
 80073fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
 8007404:	f7f9 fb88 	bl	8000b18 <__aeabi_dcmpgt>
 8007408:	2800      	cmp	r0, #0
 800740a:	f040 8296 	bne.w	800793a <_dtoa_r+0x992>
 800740e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007412:	4630      	mov	r0, r6
 8007414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 fb5f 	bl	8000adc <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	f040 8288 	bne.w	8007934 <_dtoa_r+0x98c>
 8007424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007428:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800742c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f2c0 8158 	blt.w	80076e4 <_dtoa_r+0x73c>
 8007434:	f1ba 0f0e 	cmp.w	sl, #14
 8007438:	f300 8154 	bgt.w	80076e4 <_dtoa_r+0x73c>
 800743c:	4b6b      	ldr	r3, [pc, #428]	; (80075ec <_dtoa_r+0x644>)
 800743e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007442:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	f280 80e3 	bge.w	8007614 <_dtoa_r+0x66c>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f300 80df 	bgt.w	8007614 <_dtoa_r+0x66c>
 8007456:	f040 826d 	bne.w	8007934 <_dtoa_r+0x98c>
 800745a:	4b69      	ldr	r3, [pc, #420]	; (8007600 <_dtoa_r+0x658>)
 800745c:	2200      	movs	r2, #0
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f9 f8c9 	bl	80005f8 <__aeabi_dmul>
 8007466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800746a:	f7f9 fb4b 	bl	8000b04 <__aeabi_dcmpge>
 800746e:	9e01      	ldr	r6, [sp, #4]
 8007470:	4637      	mov	r7, r6
 8007472:	2800      	cmp	r0, #0
 8007474:	f040 8243 	bne.w	80078fe <_dtoa_r+0x956>
 8007478:	9d00      	ldr	r5, [sp, #0]
 800747a:	2331      	movs	r3, #49	; 0x31
 800747c:	f805 3b01 	strb.w	r3, [r5], #1
 8007480:	f10a 0a01 	add.w	sl, sl, #1
 8007484:	e23f      	b.n	8007906 <_dtoa_r+0x95e>
 8007486:	07f2      	lsls	r2, r6, #31
 8007488:	d505      	bpl.n	8007496 <_dtoa_r+0x4ee>
 800748a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748e:	f7f9 f8b3 	bl	80005f8 <__aeabi_dmul>
 8007492:	3501      	adds	r5, #1
 8007494:	2301      	movs	r3, #1
 8007496:	1076      	asrs	r6, r6, #1
 8007498:	3708      	adds	r7, #8
 800749a:	e76c      	b.n	8007376 <_dtoa_r+0x3ce>
 800749c:	2502      	movs	r5, #2
 800749e:	e76f      	b.n	8007380 <_dtoa_r+0x3d8>
 80074a0:	9b01      	ldr	r3, [sp, #4]
 80074a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80074a6:	930c      	str	r3, [sp, #48]	; 0x30
 80074a8:	e78d      	b.n	80073c6 <_dtoa_r+0x41e>
 80074aa:	9900      	ldr	r1, [sp, #0]
 80074ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074b0:	4b4e      	ldr	r3, [pc, #312]	; (80075ec <_dtoa_r+0x644>)
 80074b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074b6:	4401      	add	r1, r0
 80074b8:	9102      	str	r1, [sp, #8]
 80074ba:	9908      	ldr	r1, [sp, #32]
 80074bc:	eeb0 8a47 	vmov.f32	s16, s14
 80074c0:	eef0 8a67 	vmov.f32	s17, s15
 80074c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074cc:	2900      	cmp	r1, #0
 80074ce:	d045      	beq.n	800755c <_dtoa_r+0x5b4>
 80074d0:	494c      	ldr	r1, [pc, #304]	; (8007604 <_dtoa_r+0x65c>)
 80074d2:	2000      	movs	r0, #0
 80074d4:	f7f9 f9ba 	bl	800084c <__aeabi_ddiv>
 80074d8:	ec53 2b18 	vmov	r2, r3, d8
 80074dc:	f7f8 fed4 	bl	8000288 <__aeabi_dsub>
 80074e0:	9d00      	ldr	r5, [sp, #0]
 80074e2:	ec41 0b18 	vmov	d8, r0, r1
 80074e6:	4639      	mov	r1, r7
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7f9 fb35 	bl	8000b58 <__aeabi_d2iz>
 80074ee:	900c      	str	r0, [sp, #48]	; 0x30
 80074f0:	f7f9 f818 	bl	8000524 <__aeabi_i2d>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f8 fec4 	bl	8000288 <__aeabi_dsub>
 8007500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007502:	3330      	adds	r3, #48	; 0x30
 8007504:	f805 3b01 	strb.w	r3, [r5], #1
 8007508:	ec53 2b18 	vmov	r2, r3, d8
 800750c:	4606      	mov	r6, r0
 800750e:	460f      	mov	r7, r1
 8007510:	f7f9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	d165      	bne.n	80075e4 <_dtoa_r+0x63c>
 8007518:	4632      	mov	r2, r6
 800751a:	463b      	mov	r3, r7
 800751c:	4935      	ldr	r1, [pc, #212]	; (80075f4 <_dtoa_r+0x64c>)
 800751e:	2000      	movs	r0, #0
 8007520:	f7f8 feb2 	bl	8000288 <__aeabi_dsub>
 8007524:	ec53 2b18 	vmov	r2, r3, d8
 8007528:	f7f9 fad8 	bl	8000adc <__aeabi_dcmplt>
 800752c:	2800      	cmp	r0, #0
 800752e:	f040 80b9 	bne.w	80076a4 <_dtoa_r+0x6fc>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	429d      	cmp	r5, r3
 8007536:	f43f af75 	beq.w	8007424 <_dtoa_r+0x47c>
 800753a:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <_dtoa_r+0x650>)
 800753c:	ec51 0b18 	vmov	r0, r1, d8
 8007540:	2200      	movs	r2, #0
 8007542:	f7f9 f859 	bl	80005f8 <__aeabi_dmul>
 8007546:	4b2c      	ldr	r3, [pc, #176]	; (80075f8 <_dtoa_r+0x650>)
 8007548:	ec41 0b18 	vmov	d8, r0, r1
 800754c:	2200      	movs	r2, #0
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f9 f851 	bl	80005f8 <__aeabi_dmul>
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	e7c4      	b.n	80074e6 <_dtoa_r+0x53e>
 800755c:	ec51 0b17 	vmov	r0, r1, d7
 8007560:	f7f9 f84a 	bl	80005f8 <__aeabi_dmul>
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	9d00      	ldr	r5, [sp, #0]
 8007568:	930c      	str	r3, [sp, #48]	; 0x30
 800756a:	ec41 0b18 	vmov	d8, r0, r1
 800756e:	4639      	mov	r1, r7
 8007570:	4630      	mov	r0, r6
 8007572:	f7f9 faf1 	bl	8000b58 <__aeabi_d2iz>
 8007576:	9011      	str	r0, [sp, #68]	; 0x44
 8007578:	f7f8 ffd4 	bl	8000524 <__aeabi_i2d>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f8 fe80 	bl	8000288 <__aeabi_dsub>
 8007588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800758a:	3330      	adds	r3, #48	; 0x30
 800758c:	f805 3b01 	strb.w	r3, [r5], #1
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	429d      	cmp	r5, r3
 8007594:	4606      	mov	r6, r0
 8007596:	460f      	mov	r7, r1
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	d134      	bne.n	8007608 <_dtoa_r+0x660>
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <_dtoa_r+0x65c>)
 80075a0:	ec51 0b18 	vmov	r0, r1, d8
 80075a4:	f7f8 fe72 	bl	800028c <__adddf3>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f9 fab2 	bl	8000b18 <__aeabi_dcmpgt>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d175      	bne.n	80076a4 <_dtoa_r+0x6fc>
 80075b8:	ec53 2b18 	vmov	r2, r3, d8
 80075bc:	4911      	ldr	r1, [pc, #68]	; (8007604 <_dtoa_r+0x65c>)
 80075be:	2000      	movs	r0, #0
 80075c0:	f7f8 fe62 	bl	8000288 <__aeabi_dsub>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4630      	mov	r0, r6
 80075ca:	4639      	mov	r1, r7
 80075cc:	f7f9 fa86 	bl	8000adc <__aeabi_dcmplt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f43f af27 	beq.w	8007424 <_dtoa_r+0x47c>
 80075d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d8:	1e6b      	subs	r3, r5, #1
 80075da:	930c      	str	r3, [sp, #48]	; 0x30
 80075dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d0f8      	beq.n	80075d6 <_dtoa_r+0x62e>
 80075e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075e8:	e04a      	b.n	8007680 <_dtoa_r+0x6d8>
 80075ea:	bf00      	nop
 80075ec:	08009f90 	.word	0x08009f90
 80075f0:	08009f68 	.word	0x08009f68
 80075f4:	3ff00000 	.word	0x3ff00000
 80075f8:	40240000 	.word	0x40240000
 80075fc:	401c0000 	.word	0x401c0000
 8007600:	40140000 	.word	0x40140000
 8007604:	3fe00000 	.word	0x3fe00000
 8007608:	4baf      	ldr	r3, [pc, #700]	; (80078c8 <_dtoa_r+0x920>)
 800760a:	f7f8 fff5 	bl	80005f8 <__aeabi_dmul>
 800760e:	4606      	mov	r6, r0
 8007610:	460f      	mov	r7, r1
 8007612:	e7ac      	b.n	800756e <_dtoa_r+0x5c6>
 8007614:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007618:	9d00      	ldr	r5, [sp, #0]
 800761a:	4642      	mov	r2, r8
 800761c:	464b      	mov	r3, r9
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f9 f913 	bl	800084c <__aeabi_ddiv>
 8007626:	f7f9 fa97 	bl	8000b58 <__aeabi_d2iz>
 800762a:	9002      	str	r0, [sp, #8]
 800762c:	f7f8 ff7a 	bl	8000524 <__aeabi_i2d>
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f7f8 ffe0 	bl	80005f8 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f8 fe22 	bl	8000288 <__aeabi_dsub>
 8007644:	9e02      	ldr	r6, [sp, #8]
 8007646:	9f01      	ldr	r7, [sp, #4]
 8007648:	3630      	adds	r6, #48	; 0x30
 800764a:	f805 6b01 	strb.w	r6, [r5], #1
 800764e:	9e00      	ldr	r6, [sp, #0]
 8007650:	1bae      	subs	r6, r5, r6
 8007652:	42b7      	cmp	r7, r6
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	d137      	bne.n	80076ca <_dtoa_r+0x722>
 800765a:	f7f8 fe17 	bl	800028c <__adddf3>
 800765e:	4642      	mov	r2, r8
 8007660:	464b      	mov	r3, r9
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	f7f9 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800766a:	b9c8      	cbnz	r0, 80076a0 <_dtoa_r+0x6f8>
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	4630      	mov	r0, r6
 8007672:	4639      	mov	r1, r7
 8007674:	f7f9 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007678:	b110      	cbz	r0, 8007680 <_dtoa_r+0x6d8>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	07d9      	lsls	r1, r3, #31
 800767e:	d40f      	bmi.n	80076a0 <_dtoa_r+0x6f8>
 8007680:	4620      	mov	r0, r4
 8007682:	4659      	mov	r1, fp
 8007684:	f000 fe58 	bl	8008338 <_Bfree>
 8007688:	2300      	movs	r3, #0
 800768a:	702b      	strb	r3, [r5, #0]
 800768c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768e:	f10a 0001 	add.w	r0, sl, #1
 8007692:	6018      	str	r0, [r3, #0]
 8007694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007696:	2b00      	cmp	r3, #0
 8007698:	f43f acd8 	beq.w	800704c <_dtoa_r+0xa4>
 800769c:	601d      	str	r5, [r3, #0]
 800769e:	e4d5      	b.n	800704c <_dtoa_r+0xa4>
 80076a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80076a4:	462b      	mov	r3, r5
 80076a6:	461d      	mov	r5, r3
 80076a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ac:	2a39      	cmp	r2, #57	; 0x39
 80076ae:	d108      	bne.n	80076c2 <_dtoa_r+0x71a>
 80076b0:	9a00      	ldr	r2, [sp, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d1f7      	bne.n	80076a6 <_dtoa_r+0x6fe>
 80076b6:	9a07      	ldr	r2, [sp, #28]
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	3201      	adds	r2, #1
 80076bc:	9207      	str	r2, [sp, #28]
 80076be:	2230      	movs	r2, #48	; 0x30
 80076c0:	700a      	strb	r2, [r1, #0]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	3201      	adds	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e78c      	b.n	80075e4 <_dtoa_r+0x63c>
 80076ca:	4b7f      	ldr	r3, [pc, #508]	; (80078c8 <_dtoa_r+0x920>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	4606      	mov	r6, r0
 80076d8:	460f      	mov	r7, r1
 80076da:	f7f9 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d09b      	beq.n	800761a <_dtoa_r+0x672>
 80076e2:	e7cd      	b.n	8007680 <_dtoa_r+0x6d8>
 80076e4:	9a08      	ldr	r2, [sp, #32]
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	f000 80c4 	beq.w	8007874 <_dtoa_r+0x8cc>
 80076ec:	9a05      	ldr	r2, [sp, #20]
 80076ee:	2a01      	cmp	r2, #1
 80076f0:	f300 80a8 	bgt.w	8007844 <_dtoa_r+0x89c>
 80076f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	f000 80a0 	beq.w	800783c <_dtoa_r+0x894>
 80076fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007700:	9e06      	ldr	r6, [sp, #24]
 8007702:	4645      	mov	r5, r8
 8007704:	9a04      	ldr	r2, [sp, #16]
 8007706:	2101      	movs	r1, #1
 8007708:	441a      	add	r2, r3
 800770a:	4620      	mov	r0, r4
 800770c:	4498      	add	r8, r3
 800770e:	9204      	str	r2, [sp, #16]
 8007710:	f000 ff18 	bl	8008544 <__i2b>
 8007714:	4607      	mov	r7, r0
 8007716:	2d00      	cmp	r5, #0
 8007718:	dd0b      	ble.n	8007732 <_dtoa_r+0x78a>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd08      	ble.n	8007732 <_dtoa_r+0x78a>
 8007720:	42ab      	cmp	r3, r5
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	bfa8      	it	ge
 8007726:	462b      	movge	r3, r5
 8007728:	eba8 0803 	sub.w	r8, r8, r3
 800772c:	1aed      	subs	r5, r5, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9b06      	ldr	r3, [sp, #24]
 8007734:	b1fb      	cbz	r3, 8007776 <_dtoa_r+0x7ce>
 8007736:	9b08      	ldr	r3, [sp, #32]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 809f 	beq.w	800787c <_dtoa_r+0x8d4>
 800773e:	2e00      	cmp	r6, #0
 8007740:	dd11      	ble.n	8007766 <_dtoa_r+0x7be>
 8007742:	4639      	mov	r1, r7
 8007744:	4632      	mov	r2, r6
 8007746:	4620      	mov	r0, r4
 8007748:	f000 ffb8 	bl	80086bc <__pow5mult>
 800774c:	465a      	mov	r2, fp
 800774e:	4601      	mov	r1, r0
 8007750:	4607      	mov	r7, r0
 8007752:	4620      	mov	r0, r4
 8007754:	f000 ff0c 	bl	8008570 <__multiply>
 8007758:	4659      	mov	r1, fp
 800775a:	9007      	str	r0, [sp, #28]
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fdeb 	bl	8008338 <_Bfree>
 8007762:	9b07      	ldr	r3, [sp, #28]
 8007764:	469b      	mov	fp, r3
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	1b9a      	subs	r2, r3, r6
 800776a:	d004      	beq.n	8007776 <_dtoa_r+0x7ce>
 800776c:	4659      	mov	r1, fp
 800776e:	4620      	mov	r0, r4
 8007770:	f000 ffa4 	bl	80086bc <__pow5mult>
 8007774:	4683      	mov	fp, r0
 8007776:	2101      	movs	r1, #1
 8007778:	4620      	mov	r0, r4
 800777a:	f000 fee3 	bl	8008544 <__i2b>
 800777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007780:	2b00      	cmp	r3, #0
 8007782:	4606      	mov	r6, r0
 8007784:	dd7c      	ble.n	8007880 <_dtoa_r+0x8d8>
 8007786:	461a      	mov	r2, r3
 8007788:	4601      	mov	r1, r0
 800778a:	4620      	mov	r0, r4
 800778c:	f000 ff96 	bl	80086bc <__pow5mult>
 8007790:	9b05      	ldr	r3, [sp, #20]
 8007792:	2b01      	cmp	r3, #1
 8007794:	4606      	mov	r6, r0
 8007796:	dd76      	ble.n	8007886 <_dtoa_r+0x8de>
 8007798:	2300      	movs	r3, #0
 800779a:	9306      	str	r3, [sp, #24]
 800779c:	6933      	ldr	r3, [r6, #16]
 800779e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077a2:	6918      	ldr	r0, [r3, #16]
 80077a4:	f000 fe7e 	bl	80084a4 <__hi0bits>
 80077a8:	f1c0 0020 	rsb	r0, r0, #32
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4418      	add	r0, r3
 80077b0:	f010 001f 	ands.w	r0, r0, #31
 80077b4:	f000 8086 	beq.w	80078c4 <_dtoa_r+0x91c>
 80077b8:	f1c0 0320 	rsb	r3, r0, #32
 80077bc:	2b04      	cmp	r3, #4
 80077be:	dd7f      	ble.n	80078c0 <_dtoa_r+0x918>
 80077c0:	f1c0 001c 	rsb	r0, r0, #28
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	4403      	add	r3, r0
 80077c8:	4480      	add	r8, r0
 80077ca:	4405      	add	r5, r0
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	f1b8 0f00 	cmp.w	r8, #0
 80077d2:	dd05      	ble.n	80077e0 <_dtoa_r+0x838>
 80077d4:	4659      	mov	r1, fp
 80077d6:	4642      	mov	r2, r8
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 ffc9 	bl	8008770 <__lshift>
 80077de:	4683      	mov	fp, r0
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	dd05      	ble.n	80077f2 <_dtoa_r+0x84a>
 80077e6:	4631      	mov	r1, r6
 80077e8:	461a      	mov	r2, r3
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 ffc0 	bl	8008770 <__lshift>
 80077f0:	4606      	mov	r6, r0
 80077f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d069      	beq.n	80078cc <_dtoa_r+0x924>
 80077f8:	4631      	mov	r1, r6
 80077fa:	4658      	mov	r0, fp
 80077fc:	f001 f824 	bl	8008848 <__mcmp>
 8007800:	2800      	cmp	r0, #0
 8007802:	da63      	bge.n	80078cc <_dtoa_r+0x924>
 8007804:	2300      	movs	r3, #0
 8007806:	4659      	mov	r1, fp
 8007808:	220a      	movs	r2, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f000 fdb6 	bl	800837c <__multadd>
 8007810:	9b08      	ldr	r3, [sp, #32]
 8007812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007816:	4683      	mov	fp, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 818f 	beq.w	8007b3c <_dtoa_r+0xb94>
 800781e:	4639      	mov	r1, r7
 8007820:	2300      	movs	r3, #0
 8007822:	220a      	movs	r2, #10
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fda9 	bl	800837c <__multadd>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	4607      	mov	r7, r0
 8007830:	f300 808e 	bgt.w	8007950 <_dtoa_r+0x9a8>
 8007834:	9b05      	ldr	r3, [sp, #20]
 8007836:	2b02      	cmp	r3, #2
 8007838:	dc50      	bgt.n	80078dc <_dtoa_r+0x934>
 800783a:	e089      	b.n	8007950 <_dtoa_r+0x9a8>
 800783c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800783e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007842:	e75d      	b.n	8007700 <_dtoa_r+0x758>
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	1e5e      	subs	r6, r3, #1
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	42b3      	cmp	r3, r6
 800784c:	bfbf      	itttt	lt
 800784e:	9b06      	ldrlt	r3, [sp, #24]
 8007850:	9606      	strlt	r6, [sp, #24]
 8007852:	1af2      	sublt	r2, r6, r3
 8007854:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007856:	bfb6      	itet	lt
 8007858:	189b      	addlt	r3, r3, r2
 800785a:	1b9e      	subge	r6, r3, r6
 800785c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	bfb8      	it	lt
 8007862:	2600      	movlt	r6, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	bfb5      	itete	lt
 8007868:	eba8 0503 	sublt.w	r5, r8, r3
 800786c:	9b01      	ldrge	r3, [sp, #4]
 800786e:	2300      	movlt	r3, #0
 8007870:	4645      	movge	r5, r8
 8007872:	e747      	b.n	8007704 <_dtoa_r+0x75c>
 8007874:	9e06      	ldr	r6, [sp, #24]
 8007876:	9f08      	ldr	r7, [sp, #32]
 8007878:	4645      	mov	r5, r8
 800787a:	e74c      	b.n	8007716 <_dtoa_r+0x76e>
 800787c:	9a06      	ldr	r2, [sp, #24]
 800787e:	e775      	b.n	800776c <_dtoa_r+0x7c4>
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	2b01      	cmp	r3, #1
 8007884:	dc18      	bgt.n	80078b8 <_dtoa_r+0x910>
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	b9b3      	cbnz	r3, 80078b8 <_dtoa_r+0x910>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007890:	b9a3      	cbnz	r3, 80078bc <_dtoa_r+0x914>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	b12b      	cbz	r3, 80078aa <_dtoa_r+0x902>
 800789e:	9b04      	ldr	r3, [sp, #16]
 80078a0:	3301      	adds	r3, #1
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	2301      	movs	r3, #1
 80078aa:	9306      	str	r3, [sp, #24]
 80078ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f47f af74 	bne.w	800779c <_dtoa_r+0x7f4>
 80078b4:	2001      	movs	r0, #1
 80078b6:	e779      	b.n	80077ac <_dtoa_r+0x804>
 80078b8:	2300      	movs	r3, #0
 80078ba:	e7f6      	b.n	80078aa <_dtoa_r+0x902>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	e7f4      	b.n	80078aa <_dtoa_r+0x902>
 80078c0:	d085      	beq.n	80077ce <_dtoa_r+0x826>
 80078c2:	4618      	mov	r0, r3
 80078c4:	301c      	adds	r0, #28
 80078c6:	e77d      	b.n	80077c4 <_dtoa_r+0x81c>
 80078c8:	40240000 	.word	0x40240000
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dc38      	bgt.n	8007944 <_dtoa_r+0x99c>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	dd35      	ble.n	8007944 <_dtoa_r+0x99c>
 80078d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	d10d      	bne.n	80078fe <_dtoa_r+0x956>
 80078e2:	4631      	mov	r1, r6
 80078e4:	464b      	mov	r3, r9
 80078e6:	2205      	movs	r2, #5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fd47 	bl	800837c <__multadd>
 80078ee:	4601      	mov	r1, r0
 80078f0:	4606      	mov	r6, r0
 80078f2:	4658      	mov	r0, fp
 80078f4:	f000 ffa8 	bl	8008848 <__mcmp>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f73f adbd 	bgt.w	8007478 <_dtoa_r+0x4d0>
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	9d00      	ldr	r5, [sp, #0]
 8007902:	ea6f 0a03 	mvn.w	sl, r3
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	4631      	mov	r1, r6
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fd13 	bl	8008338 <_Bfree>
 8007912:	2f00      	cmp	r7, #0
 8007914:	f43f aeb4 	beq.w	8007680 <_dtoa_r+0x6d8>
 8007918:	f1b8 0f00 	cmp.w	r8, #0
 800791c:	d005      	beq.n	800792a <_dtoa_r+0x982>
 800791e:	45b8      	cmp	r8, r7
 8007920:	d003      	beq.n	800792a <_dtoa_r+0x982>
 8007922:	4641      	mov	r1, r8
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fd07 	bl	8008338 <_Bfree>
 800792a:	4639      	mov	r1, r7
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fd03 	bl	8008338 <_Bfree>
 8007932:	e6a5      	b.n	8007680 <_dtoa_r+0x6d8>
 8007934:	2600      	movs	r6, #0
 8007936:	4637      	mov	r7, r6
 8007938:	e7e1      	b.n	80078fe <_dtoa_r+0x956>
 800793a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800793c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007940:	4637      	mov	r7, r6
 8007942:	e599      	b.n	8007478 <_dtoa_r+0x4d0>
 8007944:	9b08      	ldr	r3, [sp, #32]
 8007946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80fd 	beq.w	8007b4a <_dtoa_r+0xba2>
 8007950:	2d00      	cmp	r5, #0
 8007952:	dd05      	ble.n	8007960 <_dtoa_r+0x9b8>
 8007954:	4639      	mov	r1, r7
 8007956:	462a      	mov	r2, r5
 8007958:	4620      	mov	r0, r4
 800795a:	f000 ff09 	bl	8008770 <__lshift>
 800795e:	4607      	mov	r7, r0
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d05c      	beq.n	8007a20 <_dtoa_r+0xa78>
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fca5 	bl	80082b8 <_Balloc>
 800796e:	4605      	mov	r5, r0
 8007970:	b928      	cbnz	r0, 800797e <_dtoa_r+0x9d6>
 8007972:	4b80      	ldr	r3, [pc, #512]	; (8007b74 <_dtoa_r+0xbcc>)
 8007974:	4602      	mov	r2, r0
 8007976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800797a:	f7ff bb2e 	b.w	8006fda <_dtoa_r+0x32>
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	3202      	adds	r2, #2
 8007982:	0092      	lsls	r2, r2, #2
 8007984:	f107 010c 	add.w	r1, r7, #12
 8007988:	300c      	adds	r0, #12
 800798a:	f000 fc87 	bl	800829c <memcpy>
 800798e:	2201      	movs	r2, #1
 8007990:	4629      	mov	r1, r5
 8007992:	4620      	mov	r0, r4
 8007994:	f000 feec 	bl	8008770 <__lshift>
 8007998:	9b00      	ldr	r3, [sp, #0]
 800799a:	3301      	adds	r3, #1
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	444b      	add	r3, r9
 80079a2:	9307      	str	r3, [sp, #28]
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	46b8      	mov	r8, r7
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	4607      	mov	r7, r0
 80079b0:	9b01      	ldr	r3, [sp, #4]
 80079b2:	4631      	mov	r1, r6
 80079b4:	3b01      	subs	r3, #1
 80079b6:	4658      	mov	r0, fp
 80079b8:	9302      	str	r3, [sp, #8]
 80079ba:	f7ff fa67 	bl	8006e8c <quorem>
 80079be:	4603      	mov	r3, r0
 80079c0:	3330      	adds	r3, #48	; 0x30
 80079c2:	9004      	str	r0, [sp, #16]
 80079c4:	4641      	mov	r1, r8
 80079c6:	4658      	mov	r0, fp
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	f000 ff3d 	bl	8008848 <__mcmp>
 80079ce:	463a      	mov	r2, r7
 80079d0:	4681      	mov	r9, r0
 80079d2:	4631      	mov	r1, r6
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 ff53 	bl	8008880 <__mdiff>
 80079da:	68c2      	ldr	r2, [r0, #12]
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	4605      	mov	r5, r0
 80079e0:	bb02      	cbnz	r2, 8007a24 <_dtoa_r+0xa7c>
 80079e2:	4601      	mov	r1, r0
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 ff2f 	bl	8008848 <__mcmp>
 80079ea:	9b08      	ldr	r3, [sp, #32]
 80079ec:	4602      	mov	r2, r0
 80079ee:	4629      	mov	r1, r5
 80079f0:	4620      	mov	r0, r4
 80079f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079f6:	f000 fc9f 	bl	8008338 <_Bfree>
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fe:	9d01      	ldr	r5, [sp, #4]
 8007a00:	ea43 0102 	orr.w	r1, r3, r2
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	430b      	orrs	r3, r1
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	d10d      	bne.n	8007a28 <_dtoa_r+0xa80>
 8007a0c:	2b39      	cmp	r3, #57	; 0x39
 8007a0e:	d029      	beq.n	8007a64 <_dtoa_r+0xabc>
 8007a10:	f1b9 0f00 	cmp.w	r9, #0
 8007a14:	dd01      	ble.n	8007a1a <_dtoa_r+0xa72>
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	3331      	adds	r3, #49	; 0x31
 8007a1a:	9a02      	ldr	r2, [sp, #8]
 8007a1c:	7013      	strb	r3, [r2, #0]
 8007a1e:	e774      	b.n	800790a <_dtoa_r+0x962>
 8007a20:	4638      	mov	r0, r7
 8007a22:	e7b9      	b.n	8007998 <_dtoa_r+0x9f0>
 8007a24:	2201      	movs	r2, #1
 8007a26:	e7e2      	b.n	80079ee <_dtoa_r+0xa46>
 8007a28:	f1b9 0f00 	cmp.w	r9, #0
 8007a2c:	db06      	blt.n	8007a3c <_dtoa_r+0xa94>
 8007a2e:	9905      	ldr	r1, [sp, #20]
 8007a30:	ea41 0909 	orr.w	r9, r1, r9
 8007a34:	9906      	ldr	r1, [sp, #24]
 8007a36:	ea59 0101 	orrs.w	r1, r9, r1
 8007a3a:	d120      	bne.n	8007a7e <_dtoa_r+0xad6>
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	ddec      	ble.n	8007a1a <_dtoa_r+0xa72>
 8007a40:	4659      	mov	r1, fp
 8007a42:	2201      	movs	r2, #1
 8007a44:	4620      	mov	r0, r4
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	f000 fe92 	bl	8008770 <__lshift>
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4683      	mov	fp, r0
 8007a50:	f000 fefa 	bl	8008848 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	dc02      	bgt.n	8007a60 <_dtoa_r+0xab8>
 8007a5a:	d1de      	bne.n	8007a1a <_dtoa_r+0xa72>
 8007a5c:	07da      	lsls	r2, r3, #31
 8007a5e:	d5dc      	bpl.n	8007a1a <_dtoa_r+0xa72>
 8007a60:	2b39      	cmp	r3, #57	; 0x39
 8007a62:	d1d8      	bne.n	8007a16 <_dtoa_r+0xa6e>
 8007a64:	9a02      	ldr	r2, [sp, #8]
 8007a66:	2339      	movs	r3, #57	; 0x39
 8007a68:	7013      	strb	r3, [r2, #0]
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	461d      	mov	r5, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a74:	2a39      	cmp	r2, #57	; 0x39
 8007a76:	d050      	beq.n	8007b1a <_dtoa_r+0xb72>
 8007a78:	3201      	adds	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e745      	b.n	800790a <_dtoa_r+0x962>
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	dd03      	ble.n	8007a8a <_dtoa_r+0xae2>
 8007a82:	2b39      	cmp	r3, #57	; 0x39
 8007a84:	d0ee      	beq.n	8007a64 <_dtoa_r+0xabc>
 8007a86:	3301      	adds	r3, #1
 8007a88:	e7c7      	b.n	8007a1a <_dtoa_r+0xa72>
 8007a8a:	9a01      	ldr	r2, [sp, #4]
 8007a8c:	9907      	ldr	r1, [sp, #28]
 8007a8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d02a      	beq.n	8007aec <_dtoa_r+0xb44>
 8007a96:	4659      	mov	r1, fp
 8007a98:	2300      	movs	r3, #0
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 fc6d 	bl	800837c <__multadd>
 8007aa2:	45b8      	cmp	r8, r7
 8007aa4:	4683      	mov	fp, r0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	f04f 020a 	mov.w	r2, #10
 8007aae:	4641      	mov	r1, r8
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	d107      	bne.n	8007ac4 <_dtoa_r+0xb1c>
 8007ab4:	f000 fc62 	bl	800837c <__multadd>
 8007ab8:	4680      	mov	r8, r0
 8007aba:	4607      	mov	r7, r0
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	e775      	b.n	80079b0 <_dtoa_r+0xa08>
 8007ac4:	f000 fc5a 	bl	800837c <__multadd>
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4680      	mov	r8, r0
 8007acc:	2300      	movs	r3, #0
 8007ace:	220a      	movs	r2, #10
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 fc53 	bl	800837c <__multadd>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	e7f0      	b.n	8007abc <_dtoa_r+0xb14>
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	9a00      	ldr	r2, [sp, #0]
 8007ae0:	bfcc      	ite	gt
 8007ae2:	464d      	movgt	r5, r9
 8007ae4:	2501      	movle	r5, #1
 8007ae6:	4415      	add	r5, r2
 8007ae8:	f04f 0800 	mov.w	r8, #0
 8007aec:	4659      	mov	r1, fp
 8007aee:	2201      	movs	r2, #1
 8007af0:	4620      	mov	r0, r4
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f000 fe3c 	bl	8008770 <__lshift>
 8007af8:	4631      	mov	r1, r6
 8007afa:	4683      	mov	fp, r0
 8007afc:	f000 fea4 	bl	8008848 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dcb2      	bgt.n	8007a6a <_dtoa_r+0xac2>
 8007b04:	d102      	bne.n	8007b0c <_dtoa_r+0xb64>
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	07db      	lsls	r3, r3, #31
 8007b0a:	d4ae      	bmi.n	8007a6a <_dtoa_r+0xac2>
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	461d      	mov	r5, r3
 8007b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b14:	2a30      	cmp	r2, #48	; 0x30
 8007b16:	d0fa      	beq.n	8007b0e <_dtoa_r+0xb66>
 8007b18:	e6f7      	b.n	800790a <_dtoa_r+0x962>
 8007b1a:	9a00      	ldr	r2, [sp, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d1a5      	bne.n	8007a6c <_dtoa_r+0xac4>
 8007b20:	f10a 0a01 	add.w	sl, sl, #1
 8007b24:	2331      	movs	r3, #49	; 0x31
 8007b26:	e779      	b.n	8007a1c <_dtoa_r+0xa74>
 8007b28:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <_dtoa_r+0xbd0>)
 8007b2a:	f7ff baaf 	b.w	800708c <_dtoa_r+0xe4>
 8007b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f47f aa86 	bne.w	8007042 <_dtoa_r+0x9a>
 8007b36:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <_dtoa_r+0xbd4>)
 8007b38:	f7ff baa8 	b.w	800708c <_dtoa_r+0xe4>
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	dc03      	bgt.n	8007b4a <_dtoa_r+0xba2>
 8007b42:	9b05      	ldr	r3, [sp, #20]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	f73f aec9 	bgt.w	80078dc <_dtoa_r+0x934>
 8007b4a:	9d00      	ldr	r5, [sp, #0]
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f7ff f99c 	bl	8006e8c <quorem>
 8007b54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b58:	f805 3b01 	strb.w	r3, [r5], #1
 8007b5c:	9a00      	ldr	r2, [sp, #0]
 8007b5e:	1aaa      	subs	r2, r5, r2
 8007b60:	4591      	cmp	r9, r2
 8007b62:	ddba      	ble.n	8007ada <_dtoa_r+0xb32>
 8007b64:	4659      	mov	r1, fp
 8007b66:	2300      	movs	r3, #0
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fc06 	bl	800837c <__multadd>
 8007b70:	4683      	mov	fp, r0
 8007b72:	e7eb      	b.n	8007b4c <_dtoa_r+0xba4>
 8007b74:	08009e74 	.word	0x08009e74
 8007b78:	08009c74 	.word	0x08009c74
 8007b7c:	08009df1 	.word	0x08009df1

08007b80 <rshift>:
 8007b80:	6903      	ldr	r3, [r0, #16]
 8007b82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b8e:	f100 0414 	add.w	r4, r0, #20
 8007b92:	dd45      	ble.n	8007c20 <rshift+0xa0>
 8007b94:	f011 011f 	ands.w	r1, r1, #31
 8007b98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ba0:	d10c      	bne.n	8007bbc <rshift+0x3c>
 8007ba2:	f100 0710 	add.w	r7, r0, #16
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	42b1      	cmp	r1, r6
 8007baa:	d334      	bcc.n	8007c16 <rshift+0x96>
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	1eea      	subs	r2, r5, #3
 8007bb2:	4296      	cmp	r6, r2
 8007bb4:	bf38      	it	cc
 8007bb6:	2300      	movcc	r3, #0
 8007bb8:	4423      	add	r3, r4
 8007bba:	e015      	b.n	8007be8 <rshift+0x68>
 8007bbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bc0:	f1c1 0820 	rsb	r8, r1, #32
 8007bc4:	40cf      	lsrs	r7, r1
 8007bc6:	f105 0e04 	add.w	lr, r5, #4
 8007bca:	46a1      	mov	r9, r4
 8007bcc:	4576      	cmp	r6, lr
 8007bce:	46f4      	mov	ip, lr
 8007bd0:	d815      	bhi.n	8007bfe <rshift+0x7e>
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	009a      	lsls	r2, r3, #2
 8007bd6:	3a04      	subs	r2, #4
 8007bd8:	3501      	adds	r5, #1
 8007bda:	42ae      	cmp	r6, r5
 8007bdc:	bf38      	it	cc
 8007bde:	2200      	movcc	r2, #0
 8007be0:	18a3      	adds	r3, r4, r2
 8007be2:	50a7      	str	r7, [r4, r2]
 8007be4:	b107      	cbz	r7, 8007be8 <rshift+0x68>
 8007be6:	3304      	adds	r3, #4
 8007be8:	1b1a      	subs	r2, r3, r4
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bf0:	bf08      	it	eq
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	6102      	str	r2, [r0, #16]
 8007bf6:	bf08      	it	eq
 8007bf8:	6143      	streq	r3, [r0, #20]
 8007bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfe:	f8dc c000 	ldr.w	ip, [ip]
 8007c02:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c06:	ea4c 0707 	orr.w	r7, ip, r7
 8007c0a:	f849 7b04 	str.w	r7, [r9], #4
 8007c0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c12:	40cf      	lsrs	r7, r1
 8007c14:	e7da      	b.n	8007bcc <rshift+0x4c>
 8007c16:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c1e:	e7c3      	b.n	8007ba8 <rshift+0x28>
 8007c20:	4623      	mov	r3, r4
 8007c22:	e7e1      	b.n	8007be8 <rshift+0x68>

08007c24 <__hexdig_fun>:
 8007c24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d802      	bhi.n	8007c32 <__hexdig_fun+0xe>
 8007c2c:	3820      	subs	r0, #32
 8007c2e:	b2c0      	uxtb	r0, r0
 8007c30:	4770      	bx	lr
 8007c32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d801      	bhi.n	8007c3e <__hexdig_fun+0x1a>
 8007c3a:	3847      	subs	r0, #71	; 0x47
 8007c3c:	e7f7      	b.n	8007c2e <__hexdig_fun+0xa>
 8007c3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d801      	bhi.n	8007c4a <__hexdig_fun+0x26>
 8007c46:	3827      	subs	r0, #39	; 0x27
 8007c48:	e7f1      	b.n	8007c2e <__hexdig_fun+0xa>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	4770      	bx	lr
	...

08007c50 <__gethex>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	ed2d 8b02 	vpush	{d8}
 8007c58:	b089      	sub	sp, #36	; 0x24
 8007c5a:	ee08 0a10 	vmov	s16, r0
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	4bbc      	ldr	r3, [pc, #752]	; (8007f54 <__gethex+0x304>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	4618      	mov	r0, r3
 8007c68:	468b      	mov	fp, r1
 8007c6a:	4690      	mov	r8, r2
 8007c6c:	f7f8 fab0 	bl	80001d0 <strlen>
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	f8db 2000 	ldr.w	r2, [fp]
 8007c76:	4403      	add	r3, r0
 8007c78:	4682      	mov	sl, r0
 8007c7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c7e:	9305      	str	r3, [sp, #20]
 8007c80:	1c93      	adds	r3, r2, #2
 8007c82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c8a:	32fe      	adds	r2, #254	; 0xfe
 8007c8c:	18d1      	adds	r1, r2, r3
 8007c8e:	461f      	mov	r7, r3
 8007c90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c94:	9100      	str	r1, [sp, #0]
 8007c96:	2830      	cmp	r0, #48	; 0x30
 8007c98:	d0f8      	beq.n	8007c8c <__gethex+0x3c>
 8007c9a:	f7ff ffc3 	bl	8007c24 <__hexdig_fun>
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d13a      	bne.n	8007d1a <__gethex+0xca>
 8007ca4:	9901      	ldr	r1, [sp, #4]
 8007ca6:	4652      	mov	r2, sl
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f001 f9ed 	bl	8009088 <strncmp>
 8007cae:	4605      	mov	r5, r0
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d168      	bne.n	8007d86 <__gethex+0x136>
 8007cb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007cb8:	eb07 060a 	add.w	r6, r7, sl
 8007cbc:	f7ff ffb2 	bl	8007c24 <__hexdig_fun>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d062      	beq.n	8007d8a <__gethex+0x13a>
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	7818      	ldrb	r0, [r3, #0]
 8007cc8:	2830      	cmp	r0, #48	; 0x30
 8007cca:	461f      	mov	r7, r3
 8007ccc:	f103 0301 	add.w	r3, r3, #1
 8007cd0:	d0f9      	beq.n	8007cc6 <__gethex+0x76>
 8007cd2:	f7ff ffa7 	bl	8007c24 <__hexdig_fun>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	fab0 f480 	clz	r4, r0
 8007cdc:	0964      	lsrs	r4, r4, #5
 8007cde:	4635      	mov	r5, r6
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	463a      	mov	r2, r7
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	3201      	adds	r2, #1
 8007ce8:	7830      	ldrb	r0, [r6, #0]
 8007cea:	f7ff ff9b 	bl	8007c24 <__hexdig_fun>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1f8      	bne.n	8007ce4 <__gethex+0x94>
 8007cf2:	9901      	ldr	r1, [sp, #4]
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f001 f9c6 	bl	8009088 <strncmp>
 8007cfc:	b980      	cbnz	r0, 8007d20 <__gethex+0xd0>
 8007cfe:	b94d      	cbnz	r5, 8007d14 <__gethex+0xc4>
 8007d00:	eb06 050a 	add.w	r5, r6, sl
 8007d04:	462a      	mov	r2, r5
 8007d06:	4616      	mov	r6, r2
 8007d08:	3201      	adds	r2, #1
 8007d0a:	7830      	ldrb	r0, [r6, #0]
 8007d0c:	f7ff ff8a 	bl	8007c24 <__hexdig_fun>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d1f8      	bne.n	8007d06 <__gethex+0xb6>
 8007d14:	1bad      	subs	r5, r5, r6
 8007d16:	00ad      	lsls	r5, r5, #2
 8007d18:	e004      	b.n	8007d24 <__gethex+0xd4>
 8007d1a:	2400      	movs	r4, #0
 8007d1c:	4625      	mov	r5, r4
 8007d1e:	e7e0      	b.n	8007ce2 <__gethex+0x92>
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	d1f7      	bne.n	8007d14 <__gethex+0xc4>
 8007d24:	7833      	ldrb	r3, [r6, #0]
 8007d26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d2a:	2b50      	cmp	r3, #80	; 0x50
 8007d2c:	d13b      	bne.n	8007da6 <__gethex+0x156>
 8007d2e:	7873      	ldrb	r3, [r6, #1]
 8007d30:	2b2b      	cmp	r3, #43	; 0x2b
 8007d32:	d02c      	beq.n	8007d8e <__gethex+0x13e>
 8007d34:	2b2d      	cmp	r3, #45	; 0x2d
 8007d36:	d02e      	beq.n	8007d96 <__gethex+0x146>
 8007d38:	1c71      	adds	r1, r6, #1
 8007d3a:	f04f 0900 	mov.w	r9, #0
 8007d3e:	7808      	ldrb	r0, [r1, #0]
 8007d40:	f7ff ff70 	bl	8007c24 <__hexdig_fun>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b18      	cmp	r3, #24
 8007d4a:	d82c      	bhi.n	8007da6 <__gethex+0x156>
 8007d4c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d54:	f7ff ff66 	bl	8007c24 <__hexdig_fun>
 8007d58:	1e43      	subs	r3, r0, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b18      	cmp	r3, #24
 8007d5e:	d91d      	bls.n	8007d9c <__gethex+0x14c>
 8007d60:	f1b9 0f00 	cmp.w	r9, #0
 8007d64:	d000      	beq.n	8007d68 <__gethex+0x118>
 8007d66:	4252      	negs	r2, r2
 8007d68:	4415      	add	r5, r2
 8007d6a:	f8cb 1000 	str.w	r1, [fp]
 8007d6e:	b1e4      	cbz	r4, 8007daa <__gethex+0x15a>
 8007d70:	9b00      	ldr	r3, [sp, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2700      	movne	r7, #0
 8007d78:	2706      	moveq	r7, #6
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	b009      	add	sp, #36	; 0x24
 8007d7e:	ecbd 8b02 	vpop	{d8}
 8007d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	463e      	mov	r6, r7
 8007d88:	4625      	mov	r5, r4
 8007d8a:	2401      	movs	r4, #1
 8007d8c:	e7ca      	b.n	8007d24 <__gethex+0xd4>
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	1cb1      	adds	r1, r6, #2
 8007d94:	e7d3      	b.n	8007d3e <__gethex+0xee>
 8007d96:	f04f 0901 	mov.w	r9, #1
 8007d9a:	e7fa      	b.n	8007d92 <__gethex+0x142>
 8007d9c:	230a      	movs	r3, #10
 8007d9e:	fb03 0202 	mla	r2, r3, r2, r0
 8007da2:	3a10      	subs	r2, #16
 8007da4:	e7d4      	b.n	8007d50 <__gethex+0x100>
 8007da6:	4631      	mov	r1, r6
 8007da8:	e7df      	b.n	8007d6a <__gethex+0x11a>
 8007daa:	1bf3      	subs	r3, r6, r7
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4621      	mov	r1, r4
 8007db0:	2b07      	cmp	r3, #7
 8007db2:	dc0b      	bgt.n	8007dcc <__gethex+0x17c>
 8007db4:	ee18 0a10 	vmov	r0, s16
 8007db8:	f000 fa7e 	bl	80082b8 <_Balloc>
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	b940      	cbnz	r0, 8007dd2 <__gethex+0x182>
 8007dc0:	4b65      	ldr	r3, [pc, #404]	; (8007f58 <__gethex+0x308>)
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	21de      	movs	r1, #222	; 0xde
 8007dc6:	4865      	ldr	r0, [pc, #404]	; (8007f5c <__gethex+0x30c>)
 8007dc8:	f001 f97e 	bl	80090c8 <__assert_func>
 8007dcc:	3101      	adds	r1, #1
 8007dce:	105b      	asrs	r3, r3, #1
 8007dd0:	e7ee      	b.n	8007db0 <__gethex+0x160>
 8007dd2:	f100 0914 	add.w	r9, r0, #20
 8007dd6:	f04f 0b00 	mov.w	fp, #0
 8007dda:	f1ca 0301 	rsb	r3, sl, #1
 8007dde:	f8cd 9008 	str.w	r9, [sp, #8]
 8007de2:	f8cd b000 	str.w	fp, [sp]
 8007de6:	9306      	str	r3, [sp, #24]
 8007de8:	42b7      	cmp	r7, r6
 8007dea:	d340      	bcc.n	8007e6e <__gethex+0x21e>
 8007dec:	9802      	ldr	r0, [sp, #8]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	f840 3b04 	str.w	r3, [r0], #4
 8007df4:	eba0 0009 	sub.w	r0, r0, r9
 8007df8:	1080      	asrs	r0, r0, #2
 8007dfa:	0146      	lsls	r6, r0, #5
 8007dfc:	6120      	str	r0, [r4, #16]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fb50 	bl	80084a4 <__hi0bits>
 8007e04:	1a30      	subs	r0, r6, r0
 8007e06:	f8d8 6000 	ldr.w	r6, [r8]
 8007e0a:	42b0      	cmp	r0, r6
 8007e0c:	dd63      	ble.n	8007ed6 <__gethex+0x286>
 8007e0e:	1b87      	subs	r7, r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 feea 	bl	8008bec <__any_on>
 8007e18:	4682      	mov	sl, r0
 8007e1a:	b1a8      	cbz	r0, 8007e48 <__gethex+0x1f8>
 8007e1c:	1e7b      	subs	r3, r7, #1
 8007e1e:	1159      	asrs	r1, r3, #5
 8007e20:	f003 021f 	and.w	r2, r3, #31
 8007e24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e28:	f04f 0a01 	mov.w	sl, #1
 8007e2c:	fa0a f202 	lsl.w	r2, sl, r2
 8007e30:	420a      	tst	r2, r1
 8007e32:	d009      	beq.n	8007e48 <__gethex+0x1f8>
 8007e34:	4553      	cmp	r3, sl
 8007e36:	dd05      	ble.n	8007e44 <__gethex+0x1f4>
 8007e38:	1eb9      	subs	r1, r7, #2
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fed6 	bl	8008bec <__any_on>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d145      	bne.n	8007ed0 <__gethex+0x280>
 8007e44:	f04f 0a02 	mov.w	sl, #2
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fe98 	bl	8007b80 <rshift>
 8007e50:	443d      	add	r5, r7
 8007e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e56:	42ab      	cmp	r3, r5
 8007e58:	da4c      	bge.n	8007ef4 <__gethex+0x2a4>
 8007e5a:	ee18 0a10 	vmov	r0, s16
 8007e5e:	4621      	mov	r1, r4
 8007e60:	f000 fa6a 	bl	8008338 <_Bfree>
 8007e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e66:	2300      	movs	r3, #0
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	27a3      	movs	r7, #163	; 0xa3
 8007e6c:	e785      	b.n	8007d7a <__gethex+0x12a>
 8007e6e:	1e73      	subs	r3, r6, #1
 8007e70:	9a05      	ldr	r2, [sp, #20]
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d019      	beq.n	8007eb0 <__gethex+0x260>
 8007e7c:	f1bb 0f20 	cmp.w	fp, #32
 8007e80:	d107      	bne.n	8007e92 <__gethex+0x242>
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	9a00      	ldr	r2, [sp, #0]
 8007e86:	f843 2b04 	str.w	r2, [r3], #4
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	469b      	mov	fp, r3
 8007e92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e96:	f7ff fec5 	bl	8007c24 <__hexdig_fun>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	f000 000f 	and.w	r0, r0, #15
 8007ea0:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ea4:	4303      	orrs	r3, r0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	f10b 0b04 	add.w	fp, fp, #4
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	e00d      	b.n	8007ecc <__gethex+0x27c>
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	9a06      	ldr	r2, [sp, #24]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	42bb      	cmp	r3, r7
 8007eb8:	d3e0      	bcc.n	8007e7c <__gethex+0x22c>
 8007eba:	4618      	mov	r0, r3
 8007ebc:	9901      	ldr	r1, [sp, #4]
 8007ebe:	9307      	str	r3, [sp, #28]
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	f001 f8e1 	bl	8009088 <strncmp>
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1d7      	bne.n	8007e7c <__gethex+0x22c>
 8007ecc:	461e      	mov	r6, r3
 8007ece:	e78b      	b.n	8007de8 <__gethex+0x198>
 8007ed0:	f04f 0a03 	mov.w	sl, #3
 8007ed4:	e7b8      	b.n	8007e48 <__gethex+0x1f8>
 8007ed6:	da0a      	bge.n	8007eee <__gethex+0x29e>
 8007ed8:	1a37      	subs	r7, r6, r0
 8007eda:	4621      	mov	r1, r4
 8007edc:	ee18 0a10 	vmov	r0, s16
 8007ee0:	463a      	mov	r2, r7
 8007ee2:	f000 fc45 	bl	8008770 <__lshift>
 8007ee6:	1bed      	subs	r5, r5, r7
 8007ee8:	4604      	mov	r4, r0
 8007eea:	f100 0914 	add.w	r9, r0, #20
 8007eee:	f04f 0a00 	mov.w	sl, #0
 8007ef2:	e7ae      	b.n	8007e52 <__gethex+0x202>
 8007ef4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ef8:	42a8      	cmp	r0, r5
 8007efa:	dd72      	ble.n	8007fe2 <__gethex+0x392>
 8007efc:	1b45      	subs	r5, r0, r5
 8007efe:	42ae      	cmp	r6, r5
 8007f00:	dc36      	bgt.n	8007f70 <__gethex+0x320>
 8007f02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d02a      	beq.n	8007f60 <__gethex+0x310>
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d02c      	beq.n	8007f68 <__gethex+0x318>
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d115      	bne.n	8007f3e <__gethex+0x2ee>
 8007f12:	42ae      	cmp	r6, r5
 8007f14:	d113      	bne.n	8007f3e <__gethex+0x2ee>
 8007f16:	2e01      	cmp	r6, #1
 8007f18:	d10b      	bne.n	8007f32 <__gethex+0x2e2>
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	2301      	movs	r3, #1
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	f8c9 3000 	str.w	r3, [r9]
 8007f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f2c:	2762      	movs	r7, #98	; 0x62
 8007f2e:	601c      	str	r4, [r3, #0]
 8007f30:	e723      	b.n	8007d7a <__gethex+0x12a>
 8007f32:	1e71      	subs	r1, r6, #1
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 fe59 	bl	8008bec <__any_on>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1ed      	bne.n	8007f1a <__gethex+0x2ca>
 8007f3e:	ee18 0a10 	vmov	r0, s16
 8007f42:	4621      	mov	r1, r4
 8007f44:	f000 f9f8 	bl	8008338 <_Bfree>
 8007f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	2750      	movs	r7, #80	; 0x50
 8007f50:	e713      	b.n	8007d7a <__gethex+0x12a>
 8007f52:	bf00      	nop
 8007f54:	08009ef0 	.word	0x08009ef0
 8007f58:	08009e74 	.word	0x08009e74
 8007f5c:	08009e85 	.word	0x08009e85
 8007f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1eb      	bne.n	8007f3e <__gethex+0x2ee>
 8007f66:	e7d8      	b.n	8007f1a <__gethex+0x2ca>
 8007f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1d5      	bne.n	8007f1a <__gethex+0x2ca>
 8007f6e:	e7e6      	b.n	8007f3e <__gethex+0x2ee>
 8007f70:	1e6f      	subs	r7, r5, #1
 8007f72:	f1ba 0f00 	cmp.w	sl, #0
 8007f76:	d131      	bne.n	8007fdc <__gethex+0x38c>
 8007f78:	b127      	cbz	r7, 8007f84 <__gethex+0x334>
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fe35 	bl	8008bec <__any_on>
 8007f82:	4682      	mov	sl, r0
 8007f84:	117b      	asrs	r3, r7, #5
 8007f86:	2101      	movs	r1, #1
 8007f88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007f8c:	f007 071f 	and.w	r7, r7, #31
 8007f90:	fa01 f707 	lsl.w	r7, r1, r7
 8007f94:	421f      	tst	r7, r3
 8007f96:	4629      	mov	r1, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bf18      	it	ne
 8007f9c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007fa0:	1b76      	subs	r6, r6, r5
 8007fa2:	f7ff fded 	bl	8007b80 <rshift>
 8007fa6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007faa:	2702      	movs	r7, #2
 8007fac:	f1ba 0f00 	cmp.w	sl, #0
 8007fb0:	d048      	beq.n	8008044 <__gethex+0x3f4>
 8007fb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d015      	beq.n	8007fe6 <__gethex+0x396>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d017      	beq.n	8007fee <__gethex+0x39e>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d109      	bne.n	8007fd6 <__gethex+0x386>
 8007fc2:	f01a 0f02 	tst.w	sl, #2
 8007fc6:	d006      	beq.n	8007fd6 <__gethex+0x386>
 8007fc8:	f8d9 0000 	ldr.w	r0, [r9]
 8007fcc:	ea4a 0a00 	orr.w	sl, sl, r0
 8007fd0:	f01a 0f01 	tst.w	sl, #1
 8007fd4:	d10e      	bne.n	8007ff4 <__gethex+0x3a4>
 8007fd6:	f047 0710 	orr.w	r7, r7, #16
 8007fda:	e033      	b.n	8008044 <__gethex+0x3f4>
 8007fdc:	f04f 0a01 	mov.w	sl, #1
 8007fe0:	e7d0      	b.n	8007f84 <__gethex+0x334>
 8007fe2:	2701      	movs	r7, #1
 8007fe4:	e7e2      	b.n	8007fac <__gethex+0x35c>
 8007fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe8:	f1c3 0301 	rsb	r3, r3, #1
 8007fec:	9315      	str	r3, [sp, #84]	; 0x54
 8007fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0f0      	beq.n	8007fd6 <__gethex+0x386>
 8007ff4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ff8:	f104 0314 	add.w	r3, r4, #20
 8007ffc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008000:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008004:	f04f 0c00 	mov.w	ip, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f853 2b04 	ldr.w	r2, [r3], #4
 800800e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008012:	d01c      	beq.n	800804e <__gethex+0x3fe>
 8008014:	3201      	adds	r2, #1
 8008016:	6002      	str	r2, [r0, #0]
 8008018:	2f02      	cmp	r7, #2
 800801a:	f104 0314 	add.w	r3, r4, #20
 800801e:	d13f      	bne.n	80080a0 <__gethex+0x450>
 8008020:	f8d8 2000 	ldr.w	r2, [r8]
 8008024:	3a01      	subs	r2, #1
 8008026:	42b2      	cmp	r2, r6
 8008028:	d10a      	bne.n	8008040 <__gethex+0x3f0>
 800802a:	1171      	asrs	r1, r6, #5
 800802c:	2201      	movs	r2, #1
 800802e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008032:	f006 061f 	and.w	r6, r6, #31
 8008036:	fa02 f606 	lsl.w	r6, r2, r6
 800803a:	421e      	tst	r6, r3
 800803c:	bf18      	it	ne
 800803e:	4617      	movne	r7, r2
 8008040:	f047 0720 	orr.w	r7, r7, #32
 8008044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008046:	601c      	str	r4, [r3, #0]
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	601d      	str	r5, [r3, #0]
 800804c:	e695      	b.n	8007d7a <__gethex+0x12a>
 800804e:	4299      	cmp	r1, r3
 8008050:	f843 cc04 	str.w	ip, [r3, #-4]
 8008054:	d8d8      	bhi.n	8008008 <__gethex+0x3b8>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	459b      	cmp	fp, r3
 800805a:	db19      	blt.n	8008090 <__gethex+0x440>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	ee18 0a10 	vmov	r0, s16
 8008062:	3101      	adds	r1, #1
 8008064:	f000 f928 	bl	80082b8 <_Balloc>
 8008068:	4681      	mov	r9, r0
 800806a:	b918      	cbnz	r0, 8008074 <__gethex+0x424>
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <__gethex+0x488>)
 800806e:	4602      	mov	r2, r0
 8008070:	2184      	movs	r1, #132	; 0x84
 8008072:	e6a8      	b.n	8007dc6 <__gethex+0x176>
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	3202      	adds	r2, #2
 8008078:	f104 010c 	add.w	r1, r4, #12
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	300c      	adds	r0, #12
 8008080:	f000 f90c 	bl	800829c <memcpy>
 8008084:	4621      	mov	r1, r4
 8008086:	ee18 0a10 	vmov	r0, s16
 800808a:	f000 f955 	bl	8008338 <_Bfree>
 800808e:	464c      	mov	r4, r9
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008098:	6122      	str	r2, [r4, #16]
 800809a:	2201      	movs	r2, #1
 800809c:	615a      	str	r2, [r3, #20]
 800809e:	e7bb      	b.n	8008018 <__gethex+0x3c8>
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	455a      	cmp	r2, fp
 80080a4:	dd0b      	ble.n	80080be <__gethex+0x46e>
 80080a6:	2101      	movs	r1, #1
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7ff fd69 	bl	8007b80 <rshift>
 80080ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080b2:	3501      	adds	r5, #1
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	f6ff aed0 	blt.w	8007e5a <__gethex+0x20a>
 80080ba:	2701      	movs	r7, #1
 80080bc:	e7c0      	b.n	8008040 <__gethex+0x3f0>
 80080be:	f016 061f 	ands.w	r6, r6, #31
 80080c2:	d0fa      	beq.n	80080ba <__gethex+0x46a>
 80080c4:	449a      	add	sl, r3
 80080c6:	f1c6 0620 	rsb	r6, r6, #32
 80080ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80080ce:	f000 f9e9 	bl	80084a4 <__hi0bits>
 80080d2:	42b0      	cmp	r0, r6
 80080d4:	dbe7      	blt.n	80080a6 <__gethex+0x456>
 80080d6:	e7f0      	b.n	80080ba <__gethex+0x46a>
 80080d8:	08009e74 	.word	0x08009e74

080080dc <L_shift>:
 80080dc:	f1c2 0208 	rsb	r2, r2, #8
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	b570      	push	{r4, r5, r6, lr}
 80080e4:	f1c2 0620 	rsb	r6, r2, #32
 80080e8:	6843      	ldr	r3, [r0, #4]
 80080ea:	6804      	ldr	r4, [r0, #0]
 80080ec:	fa03 f506 	lsl.w	r5, r3, r6
 80080f0:	432c      	orrs	r4, r5
 80080f2:	40d3      	lsrs	r3, r2
 80080f4:	6004      	str	r4, [r0, #0]
 80080f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80080fa:	4288      	cmp	r0, r1
 80080fc:	d3f4      	bcc.n	80080e8 <L_shift+0xc>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}

08008100 <__match>:
 8008100:	b530      	push	{r4, r5, lr}
 8008102:	6803      	ldr	r3, [r0, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800810a:	b914      	cbnz	r4, 8008112 <__match+0x12>
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	2001      	movs	r0, #1
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008116:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800811a:	2d19      	cmp	r5, #25
 800811c:	bf98      	it	ls
 800811e:	3220      	addls	r2, #32
 8008120:	42a2      	cmp	r2, r4
 8008122:	d0f0      	beq.n	8008106 <__match+0x6>
 8008124:	2000      	movs	r0, #0
 8008126:	e7f3      	b.n	8008110 <__match+0x10>

08008128 <__hexnan>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	680b      	ldr	r3, [r1, #0]
 800812e:	6801      	ldr	r1, [r0, #0]
 8008130:	115e      	asrs	r6, r3, #5
 8008132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008136:	f013 031f 	ands.w	r3, r3, #31
 800813a:	b087      	sub	sp, #28
 800813c:	bf18      	it	ne
 800813e:	3604      	addne	r6, #4
 8008140:	2500      	movs	r5, #0
 8008142:	1f37      	subs	r7, r6, #4
 8008144:	4682      	mov	sl, r0
 8008146:	4690      	mov	r8, r2
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	f846 5c04 	str.w	r5, [r6, #-4]
 800814e:	46b9      	mov	r9, r7
 8008150:	463c      	mov	r4, r7
 8008152:	9502      	str	r5, [sp, #8]
 8008154:	46ab      	mov	fp, r5
 8008156:	784a      	ldrb	r2, [r1, #1]
 8008158:	1c4b      	adds	r3, r1, #1
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	b342      	cbz	r2, 80081b0 <__hexnan+0x88>
 800815e:	4610      	mov	r0, r2
 8008160:	9105      	str	r1, [sp, #20]
 8008162:	9204      	str	r2, [sp, #16]
 8008164:	f7ff fd5e 	bl	8007c24 <__hexdig_fun>
 8008168:	2800      	cmp	r0, #0
 800816a:	d14f      	bne.n	800820c <__hexnan+0xe4>
 800816c:	9a04      	ldr	r2, [sp, #16]
 800816e:	9905      	ldr	r1, [sp, #20]
 8008170:	2a20      	cmp	r2, #32
 8008172:	d818      	bhi.n	80081a6 <__hexnan+0x7e>
 8008174:	9b02      	ldr	r3, [sp, #8]
 8008176:	459b      	cmp	fp, r3
 8008178:	dd13      	ble.n	80081a2 <__hexnan+0x7a>
 800817a:	454c      	cmp	r4, r9
 800817c:	d206      	bcs.n	800818c <__hexnan+0x64>
 800817e:	2d07      	cmp	r5, #7
 8008180:	dc04      	bgt.n	800818c <__hexnan+0x64>
 8008182:	462a      	mov	r2, r5
 8008184:	4649      	mov	r1, r9
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff ffa8 	bl	80080dc <L_shift>
 800818c:	4544      	cmp	r4, r8
 800818e:	d950      	bls.n	8008232 <__hexnan+0x10a>
 8008190:	2300      	movs	r3, #0
 8008192:	f1a4 0904 	sub.w	r9, r4, #4
 8008196:	f844 3c04 	str.w	r3, [r4, #-4]
 800819a:	f8cd b008 	str.w	fp, [sp, #8]
 800819e:	464c      	mov	r4, r9
 80081a0:	461d      	mov	r5, r3
 80081a2:	9903      	ldr	r1, [sp, #12]
 80081a4:	e7d7      	b.n	8008156 <__hexnan+0x2e>
 80081a6:	2a29      	cmp	r2, #41	; 0x29
 80081a8:	d156      	bne.n	8008258 <__hexnan+0x130>
 80081aa:	3102      	adds	r1, #2
 80081ac:	f8ca 1000 	str.w	r1, [sl]
 80081b0:	f1bb 0f00 	cmp.w	fp, #0
 80081b4:	d050      	beq.n	8008258 <__hexnan+0x130>
 80081b6:	454c      	cmp	r4, r9
 80081b8:	d206      	bcs.n	80081c8 <__hexnan+0xa0>
 80081ba:	2d07      	cmp	r5, #7
 80081bc:	dc04      	bgt.n	80081c8 <__hexnan+0xa0>
 80081be:	462a      	mov	r2, r5
 80081c0:	4649      	mov	r1, r9
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7ff ff8a 	bl	80080dc <L_shift>
 80081c8:	4544      	cmp	r4, r8
 80081ca:	d934      	bls.n	8008236 <__hexnan+0x10e>
 80081cc:	f1a8 0204 	sub.w	r2, r8, #4
 80081d0:	4623      	mov	r3, r4
 80081d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80081d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80081da:	429f      	cmp	r7, r3
 80081dc:	d2f9      	bcs.n	80081d2 <__hexnan+0xaa>
 80081de:	1b3b      	subs	r3, r7, r4
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	3304      	adds	r3, #4
 80081e6:	3401      	adds	r4, #1
 80081e8:	3e03      	subs	r6, #3
 80081ea:	42b4      	cmp	r4, r6
 80081ec:	bf88      	it	hi
 80081ee:	2304      	movhi	r3, #4
 80081f0:	4443      	add	r3, r8
 80081f2:	2200      	movs	r2, #0
 80081f4:	f843 2b04 	str.w	r2, [r3], #4
 80081f8:	429f      	cmp	r7, r3
 80081fa:	d2fb      	bcs.n	80081f4 <__hexnan+0xcc>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	b91b      	cbnz	r3, 8008208 <__hexnan+0xe0>
 8008200:	4547      	cmp	r7, r8
 8008202:	d127      	bne.n	8008254 <__hexnan+0x12c>
 8008204:	2301      	movs	r3, #1
 8008206:	603b      	str	r3, [r7, #0]
 8008208:	2005      	movs	r0, #5
 800820a:	e026      	b.n	800825a <__hexnan+0x132>
 800820c:	3501      	adds	r5, #1
 800820e:	2d08      	cmp	r5, #8
 8008210:	f10b 0b01 	add.w	fp, fp, #1
 8008214:	dd06      	ble.n	8008224 <__hexnan+0xfc>
 8008216:	4544      	cmp	r4, r8
 8008218:	d9c3      	bls.n	80081a2 <__hexnan+0x7a>
 800821a:	2300      	movs	r3, #0
 800821c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008220:	2501      	movs	r5, #1
 8008222:	3c04      	subs	r4, #4
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	f000 000f 	and.w	r0, r0, #15
 800822a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	e7b7      	b.n	80081a2 <__hexnan+0x7a>
 8008232:	2508      	movs	r5, #8
 8008234:	e7b5      	b.n	80081a2 <__hexnan+0x7a>
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0df      	beq.n	80081fc <__hexnan+0xd4>
 800823c:	f04f 32ff 	mov.w	r2, #4294967295
 8008240:	f1c3 0320 	rsb	r3, r3, #32
 8008244:	fa22 f303 	lsr.w	r3, r2, r3
 8008248:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800824c:	401a      	ands	r2, r3
 800824e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008252:	e7d3      	b.n	80081fc <__hexnan+0xd4>
 8008254:	3f04      	subs	r7, #4
 8008256:	e7d1      	b.n	80081fc <__hexnan+0xd4>
 8008258:	2004      	movs	r0, #4
 800825a:	b007      	add	sp, #28
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008260 <_localeconv_r>:
 8008260:	4800      	ldr	r0, [pc, #0]	; (8008264 <_localeconv_r+0x4>)
 8008262:	4770      	bx	lr
 8008264:	20000164 	.word	0x20000164

08008268 <malloc>:
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <malloc+0xc>)
 800826a:	4601      	mov	r1, r0
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f000 bd3d 	b.w	8008cec <_malloc_r>
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c

08008278 <__ascii_mbtowc>:
 8008278:	b082      	sub	sp, #8
 800827a:	b901      	cbnz	r1, 800827e <__ascii_mbtowc+0x6>
 800827c:	a901      	add	r1, sp, #4
 800827e:	b142      	cbz	r2, 8008292 <__ascii_mbtowc+0x1a>
 8008280:	b14b      	cbz	r3, 8008296 <__ascii_mbtowc+0x1e>
 8008282:	7813      	ldrb	r3, [r2, #0]
 8008284:	600b      	str	r3, [r1, #0]
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	1e10      	subs	r0, r2, #0
 800828a:	bf18      	it	ne
 800828c:	2001      	movne	r0, #1
 800828e:	b002      	add	sp, #8
 8008290:	4770      	bx	lr
 8008292:	4610      	mov	r0, r2
 8008294:	e7fb      	b.n	800828e <__ascii_mbtowc+0x16>
 8008296:	f06f 0001 	mvn.w	r0, #1
 800829a:	e7f8      	b.n	800828e <__ascii_mbtowc+0x16>

0800829c <memcpy>:
 800829c:	440a      	add	r2, r1
 800829e:	4291      	cmp	r1, r2
 80082a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a4:	d100      	bne.n	80082a8 <memcpy+0xc>
 80082a6:	4770      	bx	lr
 80082a8:	b510      	push	{r4, lr}
 80082aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b2:	4291      	cmp	r1, r2
 80082b4:	d1f9      	bne.n	80082aa <memcpy+0xe>
 80082b6:	bd10      	pop	{r4, pc}

080082b8 <_Balloc>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	b976      	cbnz	r6, 80082e0 <_Balloc+0x28>
 80082c2:	2010      	movs	r0, #16
 80082c4:	f7ff ffd0 	bl	8008268 <malloc>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6260      	str	r0, [r4, #36]	; 0x24
 80082cc:	b920      	cbnz	r0, 80082d8 <_Balloc+0x20>
 80082ce:	4b18      	ldr	r3, [pc, #96]	; (8008330 <_Balloc+0x78>)
 80082d0:	4818      	ldr	r0, [pc, #96]	; (8008334 <_Balloc+0x7c>)
 80082d2:	2166      	movs	r1, #102	; 0x66
 80082d4:	f000 fef8 	bl	80090c8 <__assert_func>
 80082d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082dc:	6006      	str	r6, [r0, #0]
 80082de:	60c6      	str	r6, [r0, #12]
 80082e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082e2:	68f3      	ldr	r3, [r6, #12]
 80082e4:	b183      	cbz	r3, 8008308 <_Balloc+0x50>
 80082e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082ee:	b9b8      	cbnz	r0, 8008320 <_Balloc+0x68>
 80082f0:	2101      	movs	r1, #1
 80082f2:	fa01 f605 	lsl.w	r6, r1, r5
 80082f6:	1d72      	adds	r2, r6, #5
 80082f8:	0092      	lsls	r2, r2, #2
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fc97 	bl	8008c2e <_calloc_r>
 8008300:	b160      	cbz	r0, 800831c <_Balloc+0x64>
 8008302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008306:	e00e      	b.n	8008326 <_Balloc+0x6e>
 8008308:	2221      	movs	r2, #33	; 0x21
 800830a:	2104      	movs	r1, #4
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fc8e 	bl	8008c2e <_calloc_r>
 8008312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008314:	60f0      	str	r0, [r6, #12]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e4      	bne.n	80082e6 <_Balloc+0x2e>
 800831c:	2000      	movs	r0, #0
 800831e:	bd70      	pop	{r4, r5, r6, pc}
 8008320:	6802      	ldr	r2, [r0, #0]
 8008322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008326:	2300      	movs	r3, #0
 8008328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800832c:	e7f7      	b.n	800831e <_Balloc+0x66>
 800832e:	bf00      	nop
 8008330:	08009dfe 	.word	0x08009dfe
 8008334:	08009f04 	.word	0x08009f04

08008338 <_Bfree>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	b976      	cbnz	r6, 8008360 <_Bfree+0x28>
 8008342:	2010      	movs	r0, #16
 8008344:	f7ff ff90 	bl	8008268 <malloc>
 8008348:	4602      	mov	r2, r0
 800834a:	6268      	str	r0, [r5, #36]	; 0x24
 800834c:	b920      	cbnz	r0, 8008358 <_Bfree+0x20>
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <_Bfree+0x3c>)
 8008350:	4809      	ldr	r0, [pc, #36]	; (8008378 <_Bfree+0x40>)
 8008352:	218a      	movs	r1, #138	; 0x8a
 8008354:	f000 feb8 	bl	80090c8 <__assert_func>
 8008358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800835c:	6006      	str	r6, [r0, #0]
 800835e:	60c6      	str	r6, [r0, #12]
 8008360:	b13c      	cbz	r4, 8008372 <_Bfree+0x3a>
 8008362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008364:	6862      	ldr	r2, [r4, #4]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800836c:	6021      	str	r1, [r4, #0]
 800836e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	08009dfe 	.word	0x08009dfe
 8008378:	08009f04 	.word	0x08009f04

0800837c <__multadd>:
 800837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008380:	690e      	ldr	r6, [r1, #16]
 8008382:	4607      	mov	r7, r0
 8008384:	4698      	mov	r8, r3
 8008386:	460c      	mov	r4, r1
 8008388:	f101 0014 	add.w	r0, r1, #20
 800838c:	2300      	movs	r3, #0
 800838e:	6805      	ldr	r5, [r0, #0]
 8008390:	b2a9      	uxth	r1, r5
 8008392:	fb02 8101 	mla	r1, r2, r1, r8
 8008396:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800839a:	0c2d      	lsrs	r5, r5, #16
 800839c:	fb02 c505 	mla	r5, r2, r5, ip
 80083a0:	b289      	uxth	r1, r1
 80083a2:	3301      	adds	r3, #1
 80083a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80083a8:	429e      	cmp	r6, r3
 80083aa:	f840 1b04 	str.w	r1, [r0], #4
 80083ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80083b2:	dcec      	bgt.n	800838e <__multadd+0x12>
 80083b4:	f1b8 0f00 	cmp.w	r8, #0
 80083b8:	d022      	beq.n	8008400 <__multadd+0x84>
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	42b3      	cmp	r3, r6
 80083be:	dc19      	bgt.n	80083f4 <__multadd+0x78>
 80083c0:	6861      	ldr	r1, [r4, #4]
 80083c2:	4638      	mov	r0, r7
 80083c4:	3101      	adds	r1, #1
 80083c6:	f7ff ff77 	bl	80082b8 <_Balloc>
 80083ca:	4605      	mov	r5, r0
 80083cc:	b928      	cbnz	r0, 80083da <__multadd+0x5e>
 80083ce:	4602      	mov	r2, r0
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <__multadd+0x8c>)
 80083d2:	480e      	ldr	r0, [pc, #56]	; (800840c <__multadd+0x90>)
 80083d4:	21b5      	movs	r1, #181	; 0xb5
 80083d6:	f000 fe77 	bl	80090c8 <__assert_func>
 80083da:	6922      	ldr	r2, [r4, #16]
 80083dc:	3202      	adds	r2, #2
 80083de:	f104 010c 	add.w	r1, r4, #12
 80083e2:	0092      	lsls	r2, r2, #2
 80083e4:	300c      	adds	r0, #12
 80083e6:	f7ff ff59 	bl	800829c <memcpy>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff ffa3 	bl	8008338 <_Bfree>
 80083f2:	462c      	mov	r4, r5
 80083f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80083f8:	3601      	adds	r6, #1
 80083fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80083fe:	6126      	str	r6, [r4, #16]
 8008400:	4620      	mov	r0, r4
 8008402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008406:	bf00      	nop
 8008408:	08009e74 	.word	0x08009e74
 800840c:	08009f04 	.word	0x08009f04

08008410 <__s2b>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	460c      	mov	r4, r1
 8008416:	4615      	mov	r5, r2
 8008418:	461f      	mov	r7, r3
 800841a:	2209      	movs	r2, #9
 800841c:	3308      	adds	r3, #8
 800841e:	4606      	mov	r6, r0
 8008420:	fb93 f3f2 	sdiv	r3, r3, r2
 8008424:	2100      	movs	r1, #0
 8008426:	2201      	movs	r2, #1
 8008428:	429a      	cmp	r2, r3
 800842a:	db09      	blt.n	8008440 <__s2b+0x30>
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff ff43 	bl	80082b8 <_Balloc>
 8008432:	b940      	cbnz	r0, 8008446 <__s2b+0x36>
 8008434:	4602      	mov	r2, r0
 8008436:	4b19      	ldr	r3, [pc, #100]	; (800849c <__s2b+0x8c>)
 8008438:	4819      	ldr	r0, [pc, #100]	; (80084a0 <__s2b+0x90>)
 800843a:	21ce      	movs	r1, #206	; 0xce
 800843c:	f000 fe44 	bl	80090c8 <__assert_func>
 8008440:	0052      	lsls	r2, r2, #1
 8008442:	3101      	adds	r1, #1
 8008444:	e7f0      	b.n	8008428 <__s2b+0x18>
 8008446:	9b08      	ldr	r3, [sp, #32]
 8008448:	6143      	str	r3, [r0, #20]
 800844a:	2d09      	cmp	r5, #9
 800844c:	f04f 0301 	mov.w	r3, #1
 8008450:	6103      	str	r3, [r0, #16]
 8008452:	dd16      	ble.n	8008482 <__s2b+0x72>
 8008454:	f104 0909 	add.w	r9, r4, #9
 8008458:	46c8      	mov	r8, r9
 800845a:	442c      	add	r4, r5
 800845c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008460:	4601      	mov	r1, r0
 8008462:	3b30      	subs	r3, #48	; 0x30
 8008464:	220a      	movs	r2, #10
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff ff88 	bl	800837c <__multadd>
 800846c:	45a0      	cmp	r8, r4
 800846e:	d1f5      	bne.n	800845c <__s2b+0x4c>
 8008470:	f1a5 0408 	sub.w	r4, r5, #8
 8008474:	444c      	add	r4, r9
 8008476:	1b2d      	subs	r5, r5, r4
 8008478:	1963      	adds	r3, r4, r5
 800847a:	42bb      	cmp	r3, r7
 800847c:	db04      	blt.n	8008488 <__s2b+0x78>
 800847e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008482:	340a      	adds	r4, #10
 8008484:	2509      	movs	r5, #9
 8008486:	e7f6      	b.n	8008476 <__s2b+0x66>
 8008488:	f814 3b01 	ldrb.w	r3, [r4], #1
 800848c:	4601      	mov	r1, r0
 800848e:	3b30      	subs	r3, #48	; 0x30
 8008490:	220a      	movs	r2, #10
 8008492:	4630      	mov	r0, r6
 8008494:	f7ff ff72 	bl	800837c <__multadd>
 8008498:	e7ee      	b.n	8008478 <__s2b+0x68>
 800849a:	bf00      	nop
 800849c:	08009e74 	.word	0x08009e74
 80084a0:	08009f04 	.word	0x08009f04

080084a4 <__hi0bits>:
 80084a4:	0c03      	lsrs	r3, r0, #16
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	b9d3      	cbnz	r3, 80084e0 <__hi0bits+0x3c>
 80084aa:	0400      	lsls	r0, r0, #16
 80084ac:	2310      	movs	r3, #16
 80084ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084b2:	bf04      	itt	eq
 80084b4:	0200      	lsleq	r0, r0, #8
 80084b6:	3308      	addeq	r3, #8
 80084b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084bc:	bf04      	itt	eq
 80084be:	0100      	lsleq	r0, r0, #4
 80084c0:	3304      	addeq	r3, #4
 80084c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084c6:	bf04      	itt	eq
 80084c8:	0080      	lsleq	r0, r0, #2
 80084ca:	3302      	addeq	r3, #2
 80084cc:	2800      	cmp	r0, #0
 80084ce:	db05      	blt.n	80084dc <__hi0bits+0x38>
 80084d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084d4:	f103 0301 	add.w	r3, r3, #1
 80084d8:	bf08      	it	eq
 80084da:	2320      	moveq	r3, #32
 80084dc:	4618      	mov	r0, r3
 80084de:	4770      	bx	lr
 80084e0:	2300      	movs	r3, #0
 80084e2:	e7e4      	b.n	80084ae <__hi0bits+0xa>

080084e4 <__lo0bits>:
 80084e4:	6803      	ldr	r3, [r0, #0]
 80084e6:	f013 0207 	ands.w	r2, r3, #7
 80084ea:	4601      	mov	r1, r0
 80084ec:	d00b      	beq.n	8008506 <__lo0bits+0x22>
 80084ee:	07da      	lsls	r2, r3, #31
 80084f0:	d424      	bmi.n	800853c <__lo0bits+0x58>
 80084f2:	0798      	lsls	r0, r3, #30
 80084f4:	bf49      	itett	mi
 80084f6:	085b      	lsrmi	r3, r3, #1
 80084f8:	089b      	lsrpl	r3, r3, #2
 80084fa:	2001      	movmi	r0, #1
 80084fc:	600b      	strmi	r3, [r1, #0]
 80084fe:	bf5c      	itt	pl
 8008500:	600b      	strpl	r3, [r1, #0]
 8008502:	2002      	movpl	r0, #2
 8008504:	4770      	bx	lr
 8008506:	b298      	uxth	r0, r3
 8008508:	b9b0      	cbnz	r0, 8008538 <__lo0bits+0x54>
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	2010      	movs	r0, #16
 800850e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008512:	bf04      	itt	eq
 8008514:	0a1b      	lsreq	r3, r3, #8
 8008516:	3008      	addeq	r0, #8
 8008518:	071a      	lsls	r2, r3, #28
 800851a:	bf04      	itt	eq
 800851c:	091b      	lsreq	r3, r3, #4
 800851e:	3004      	addeq	r0, #4
 8008520:	079a      	lsls	r2, r3, #30
 8008522:	bf04      	itt	eq
 8008524:	089b      	lsreq	r3, r3, #2
 8008526:	3002      	addeq	r0, #2
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	d403      	bmi.n	8008534 <__lo0bits+0x50>
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	f100 0001 	add.w	r0, r0, #1
 8008532:	d005      	beq.n	8008540 <__lo0bits+0x5c>
 8008534:	600b      	str	r3, [r1, #0]
 8008536:	4770      	bx	lr
 8008538:	4610      	mov	r0, r2
 800853a:	e7e8      	b.n	800850e <__lo0bits+0x2a>
 800853c:	2000      	movs	r0, #0
 800853e:	4770      	bx	lr
 8008540:	2020      	movs	r0, #32
 8008542:	4770      	bx	lr

08008544 <__i2b>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	2101      	movs	r1, #1
 800854a:	f7ff feb5 	bl	80082b8 <_Balloc>
 800854e:	4602      	mov	r2, r0
 8008550:	b928      	cbnz	r0, 800855e <__i2b+0x1a>
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <__i2b+0x24>)
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <__i2b+0x28>)
 8008556:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800855a:	f000 fdb5 	bl	80090c8 <__assert_func>
 800855e:	2301      	movs	r3, #1
 8008560:	6144      	str	r4, [r0, #20]
 8008562:	6103      	str	r3, [r0, #16]
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	08009e74 	.word	0x08009e74
 800856c:	08009f04 	.word	0x08009f04

08008570 <__multiply>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4614      	mov	r4, r2
 8008576:	690a      	ldr	r2, [r1, #16]
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	429a      	cmp	r2, r3
 800857c:	bfb8      	it	lt
 800857e:	460b      	movlt	r3, r1
 8008580:	460d      	mov	r5, r1
 8008582:	bfbc      	itt	lt
 8008584:	4625      	movlt	r5, r4
 8008586:	461c      	movlt	r4, r3
 8008588:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800858c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008590:	68ab      	ldr	r3, [r5, #8]
 8008592:	6869      	ldr	r1, [r5, #4]
 8008594:	eb0a 0709 	add.w	r7, sl, r9
 8008598:	42bb      	cmp	r3, r7
 800859a:	b085      	sub	sp, #20
 800859c:	bfb8      	it	lt
 800859e:	3101      	addlt	r1, #1
 80085a0:	f7ff fe8a 	bl	80082b8 <_Balloc>
 80085a4:	b930      	cbnz	r0, 80085b4 <__multiply+0x44>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b42      	ldr	r3, [pc, #264]	; (80086b4 <__multiply+0x144>)
 80085aa:	4843      	ldr	r0, [pc, #268]	; (80086b8 <__multiply+0x148>)
 80085ac:	f240 115d 	movw	r1, #349	; 0x15d
 80085b0:	f000 fd8a 	bl	80090c8 <__assert_func>
 80085b4:	f100 0614 	add.w	r6, r0, #20
 80085b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085bc:	4633      	mov	r3, r6
 80085be:	2200      	movs	r2, #0
 80085c0:	4543      	cmp	r3, r8
 80085c2:	d31e      	bcc.n	8008602 <__multiply+0x92>
 80085c4:	f105 0c14 	add.w	ip, r5, #20
 80085c8:	f104 0314 	add.w	r3, r4, #20
 80085cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085d4:	9202      	str	r2, [sp, #8]
 80085d6:	ebac 0205 	sub.w	r2, ip, r5
 80085da:	3a15      	subs	r2, #21
 80085dc:	f022 0203 	bic.w	r2, r2, #3
 80085e0:	3204      	adds	r2, #4
 80085e2:	f105 0115 	add.w	r1, r5, #21
 80085e6:	458c      	cmp	ip, r1
 80085e8:	bf38      	it	cc
 80085ea:	2204      	movcc	r2, #4
 80085ec:	9201      	str	r2, [sp, #4]
 80085ee:	9a02      	ldr	r2, [sp, #8]
 80085f0:	9303      	str	r3, [sp, #12]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d808      	bhi.n	8008608 <__multiply+0x98>
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	dc55      	bgt.n	80086a6 <__multiply+0x136>
 80085fa:	6107      	str	r7, [r0, #16]
 80085fc:	b005      	add	sp, #20
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	f843 2b04 	str.w	r2, [r3], #4
 8008606:	e7db      	b.n	80085c0 <__multiply+0x50>
 8008608:	f8b3 a000 	ldrh.w	sl, [r3]
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d020      	beq.n	8008654 <__multiply+0xe4>
 8008612:	f105 0e14 	add.w	lr, r5, #20
 8008616:	46b1      	mov	r9, r6
 8008618:	2200      	movs	r2, #0
 800861a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800861e:	f8d9 b000 	ldr.w	fp, [r9]
 8008622:	b2a1      	uxth	r1, r4
 8008624:	fa1f fb8b 	uxth.w	fp, fp
 8008628:	fb0a b101 	mla	r1, sl, r1, fp
 800862c:	4411      	add	r1, r2
 800862e:	f8d9 2000 	ldr.w	r2, [r9]
 8008632:	0c24      	lsrs	r4, r4, #16
 8008634:	0c12      	lsrs	r2, r2, #16
 8008636:	fb0a 2404 	mla	r4, sl, r4, r2
 800863a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800863e:	b289      	uxth	r1, r1
 8008640:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008644:	45f4      	cmp	ip, lr
 8008646:	f849 1b04 	str.w	r1, [r9], #4
 800864a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800864e:	d8e4      	bhi.n	800861a <__multiply+0xaa>
 8008650:	9901      	ldr	r1, [sp, #4]
 8008652:	5072      	str	r2, [r6, r1]
 8008654:	9a03      	ldr	r2, [sp, #12]
 8008656:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800865a:	3304      	adds	r3, #4
 800865c:	f1b9 0f00 	cmp.w	r9, #0
 8008660:	d01f      	beq.n	80086a2 <__multiply+0x132>
 8008662:	6834      	ldr	r4, [r6, #0]
 8008664:	f105 0114 	add.w	r1, r5, #20
 8008668:	46b6      	mov	lr, r6
 800866a:	f04f 0a00 	mov.w	sl, #0
 800866e:	880a      	ldrh	r2, [r1, #0]
 8008670:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008674:	fb09 b202 	mla	r2, r9, r2, fp
 8008678:	4492      	add	sl, r2
 800867a:	b2a4      	uxth	r4, r4
 800867c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008680:	f84e 4b04 	str.w	r4, [lr], #4
 8008684:	f851 4b04 	ldr.w	r4, [r1], #4
 8008688:	f8be 2000 	ldrh.w	r2, [lr]
 800868c:	0c24      	lsrs	r4, r4, #16
 800868e:	fb09 2404 	mla	r4, r9, r4, r2
 8008692:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008696:	458c      	cmp	ip, r1
 8008698:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800869c:	d8e7      	bhi.n	800866e <__multiply+0xfe>
 800869e:	9a01      	ldr	r2, [sp, #4]
 80086a0:	50b4      	str	r4, [r6, r2]
 80086a2:	3604      	adds	r6, #4
 80086a4:	e7a3      	b.n	80085ee <__multiply+0x7e>
 80086a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1a5      	bne.n	80085fa <__multiply+0x8a>
 80086ae:	3f01      	subs	r7, #1
 80086b0:	e7a1      	b.n	80085f6 <__multiply+0x86>
 80086b2:	bf00      	nop
 80086b4:	08009e74 	.word	0x08009e74
 80086b8:	08009f04 	.word	0x08009f04

080086bc <__pow5mult>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4615      	mov	r5, r2
 80086c2:	f012 0203 	ands.w	r2, r2, #3
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	d007      	beq.n	80086dc <__pow5mult+0x20>
 80086cc:	4c25      	ldr	r4, [pc, #148]	; (8008764 <__pow5mult+0xa8>)
 80086ce:	3a01      	subs	r2, #1
 80086d0:	2300      	movs	r3, #0
 80086d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086d6:	f7ff fe51 	bl	800837c <__multadd>
 80086da:	4607      	mov	r7, r0
 80086dc:	10ad      	asrs	r5, r5, #2
 80086de:	d03d      	beq.n	800875c <__pow5mult+0xa0>
 80086e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086e2:	b97c      	cbnz	r4, 8008704 <__pow5mult+0x48>
 80086e4:	2010      	movs	r0, #16
 80086e6:	f7ff fdbf 	bl	8008268 <malloc>
 80086ea:	4602      	mov	r2, r0
 80086ec:	6270      	str	r0, [r6, #36]	; 0x24
 80086ee:	b928      	cbnz	r0, 80086fc <__pow5mult+0x40>
 80086f0:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <__pow5mult+0xac>)
 80086f2:	481e      	ldr	r0, [pc, #120]	; (800876c <__pow5mult+0xb0>)
 80086f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086f8:	f000 fce6 	bl	80090c8 <__assert_func>
 80086fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008700:	6004      	str	r4, [r0, #0]
 8008702:	60c4      	str	r4, [r0, #12]
 8008704:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800870c:	b94c      	cbnz	r4, 8008722 <__pow5mult+0x66>
 800870e:	f240 2171 	movw	r1, #625	; 0x271
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff16 	bl	8008544 <__i2b>
 8008718:	2300      	movs	r3, #0
 800871a:	f8c8 0008 	str.w	r0, [r8, #8]
 800871e:	4604      	mov	r4, r0
 8008720:	6003      	str	r3, [r0, #0]
 8008722:	f04f 0900 	mov.w	r9, #0
 8008726:	07eb      	lsls	r3, r5, #31
 8008728:	d50a      	bpl.n	8008740 <__pow5mult+0x84>
 800872a:	4639      	mov	r1, r7
 800872c:	4622      	mov	r2, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff ff1e 	bl	8008570 <__multiply>
 8008734:	4639      	mov	r1, r7
 8008736:	4680      	mov	r8, r0
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff fdfd 	bl	8008338 <_Bfree>
 800873e:	4647      	mov	r7, r8
 8008740:	106d      	asrs	r5, r5, #1
 8008742:	d00b      	beq.n	800875c <__pow5mult+0xa0>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	b938      	cbnz	r0, 8008758 <__pow5mult+0x9c>
 8008748:	4622      	mov	r2, r4
 800874a:	4621      	mov	r1, r4
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff ff0f 	bl	8008570 <__multiply>
 8008752:	6020      	str	r0, [r4, #0]
 8008754:	f8c0 9000 	str.w	r9, [r0]
 8008758:	4604      	mov	r4, r0
 800875a:	e7e4      	b.n	8008726 <__pow5mult+0x6a>
 800875c:	4638      	mov	r0, r7
 800875e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008762:	bf00      	nop
 8008764:	0800a058 	.word	0x0800a058
 8008768:	08009dfe 	.word	0x08009dfe
 800876c:	08009f04 	.word	0x08009f04

08008770 <__lshift>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	460c      	mov	r4, r1
 8008776:	6849      	ldr	r1, [r1, #4]
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	4607      	mov	r7, r0
 8008782:	4691      	mov	r9, r2
 8008784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008788:	f108 0601 	add.w	r6, r8, #1
 800878c:	42b3      	cmp	r3, r6
 800878e:	db0b      	blt.n	80087a8 <__lshift+0x38>
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff fd91 	bl	80082b8 <_Balloc>
 8008796:	4605      	mov	r5, r0
 8008798:	b948      	cbnz	r0, 80087ae <__lshift+0x3e>
 800879a:	4602      	mov	r2, r0
 800879c:	4b28      	ldr	r3, [pc, #160]	; (8008840 <__lshift+0xd0>)
 800879e:	4829      	ldr	r0, [pc, #164]	; (8008844 <__lshift+0xd4>)
 80087a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087a4:	f000 fc90 	bl	80090c8 <__assert_func>
 80087a8:	3101      	adds	r1, #1
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	e7ee      	b.n	800878c <__lshift+0x1c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	f100 0114 	add.w	r1, r0, #20
 80087b4:	f100 0210 	add.w	r2, r0, #16
 80087b8:	4618      	mov	r0, r3
 80087ba:	4553      	cmp	r3, sl
 80087bc:	db33      	blt.n	8008826 <__lshift+0xb6>
 80087be:	6920      	ldr	r0, [r4, #16]
 80087c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087c4:	f104 0314 	add.w	r3, r4, #20
 80087c8:	f019 091f 	ands.w	r9, r9, #31
 80087cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087d4:	d02b      	beq.n	800882e <__lshift+0xbe>
 80087d6:	f1c9 0e20 	rsb	lr, r9, #32
 80087da:	468a      	mov	sl, r1
 80087dc:	2200      	movs	r2, #0
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	fa00 f009 	lsl.w	r0, r0, r9
 80087e4:	4302      	orrs	r2, r0
 80087e6:	f84a 2b04 	str.w	r2, [sl], #4
 80087ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ee:	459c      	cmp	ip, r3
 80087f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087f4:	d8f3      	bhi.n	80087de <__lshift+0x6e>
 80087f6:	ebac 0304 	sub.w	r3, ip, r4
 80087fa:	3b15      	subs	r3, #21
 80087fc:	f023 0303 	bic.w	r3, r3, #3
 8008800:	3304      	adds	r3, #4
 8008802:	f104 0015 	add.w	r0, r4, #21
 8008806:	4584      	cmp	ip, r0
 8008808:	bf38      	it	cc
 800880a:	2304      	movcc	r3, #4
 800880c:	50ca      	str	r2, [r1, r3]
 800880e:	b10a      	cbz	r2, 8008814 <__lshift+0xa4>
 8008810:	f108 0602 	add.w	r6, r8, #2
 8008814:	3e01      	subs	r6, #1
 8008816:	4638      	mov	r0, r7
 8008818:	612e      	str	r6, [r5, #16]
 800881a:	4621      	mov	r1, r4
 800881c:	f7ff fd8c 	bl	8008338 <_Bfree>
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	f842 0f04 	str.w	r0, [r2, #4]!
 800882a:	3301      	adds	r3, #1
 800882c:	e7c5      	b.n	80087ba <__lshift+0x4a>
 800882e:	3904      	subs	r1, #4
 8008830:	f853 2b04 	ldr.w	r2, [r3], #4
 8008834:	f841 2f04 	str.w	r2, [r1, #4]!
 8008838:	459c      	cmp	ip, r3
 800883a:	d8f9      	bhi.n	8008830 <__lshift+0xc0>
 800883c:	e7ea      	b.n	8008814 <__lshift+0xa4>
 800883e:	bf00      	nop
 8008840:	08009e74 	.word	0x08009e74
 8008844:	08009f04 	.word	0x08009f04

08008848 <__mcmp>:
 8008848:	b530      	push	{r4, r5, lr}
 800884a:	6902      	ldr	r2, [r0, #16]
 800884c:	690c      	ldr	r4, [r1, #16]
 800884e:	1b12      	subs	r2, r2, r4
 8008850:	d10e      	bne.n	8008870 <__mcmp+0x28>
 8008852:	f100 0314 	add.w	r3, r0, #20
 8008856:	3114      	adds	r1, #20
 8008858:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800885c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008860:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008864:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008868:	42a5      	cmp	r5, r4
 800886a:	d003      	beq.n	8008874 <__mcmp+0x2c>
 800886c:	d305      	bcc.n	800887a <__mcmp+0x32>
 800886e:	2201      	movs	r2, #1
 8008870:	4610      	mov	r0, r2
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	4283      	cmp	r3, r0
 8008876:	d3f3      	bcc.n	8008860 <__mcmp+0x18>
 8008878:	e7fa      	b.n	8008870 <__mcmp+0x28>
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	e7f7      	b.n	8008870 <__mcmp+0x28>

08008880 <__mdiff>:
 8008880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	4606      	mov	r6, r0
 8008888:	4611      	mov	r1, r2
 800888a:	4620      	mov	r0, r4
 800888c:	4617      	mov	r7, r2
 800888e:	f7ff ffdb 	bl	8008848 <__mcmp>
 8008892:	1e05      	subs	r5, r0, #0
 8008894:	d110      	bne.n	80088b8 <__mdiff+0x38>
 8008896:	4629      	mov	r1, r5
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff fd0d 	bl	80082b8 <_Balloc>
 800889e:	b930      	cbnz	r0, 80088ae <__mdiff+0x2e>
 80088a0:	4b39      	ldr	r3, [pc, #228]	; (8008988 <__mdiff+0x108>)
 80088a2:	4602      	mov	r2, r0
 80088a4:	f240 2132 	movw	r1, #562	; 0x232
 80088a8:	4838      	ldr	r0, [pc, #224]	; (800898c <__mdiff+0x10c>)
 80088aa:	f000 fc0d 	bl	80090c8 <__assert_func>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	bfa4      	itt	ge
 80088ba:	463b      	movge	r3, r7
 80088bc:	4627      	movge	r7, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	bfa6      	itte	ge
 80088c4:	461c      	movge	r4, r3
 80088c6:	2500      	movge	r5, #0
 80088c8:	2501      	movlt	r5, #1
 80088ca:	f7ff fcf5 	bl	80082b8 <_Balloc>
 80088ce:	b920      	cbnz	r0, 80088da <__mdiff+0x5a>
 80088d0:	4b2d      	ldr	r3, [pc, #180]	; (8008988 <__mdiff+0x108>)
 80088d2:	4602      	mov	r2, r0
 80088d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088d8:	e7e6      	b.n	80088a8 <__mdiff+0x28>
 80088da:	693e      	ldr	r6, [r7, #16]
 80088dc:	60c5      	str	r5, [r0, #12]
 80088de:	6925      	ldr	r5, [r4, #16]
 80088e0:	f107 0114 	add.w	r1, r7, #20
 80088e4:	f104 0914 	add.w	r9, r4, #20
 80088e8:	f100 0e14 	add.w	lr, r0, #20
 80088ec:	f107 0210 	add.w	r2, r7, #16
 80088f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80088f8:	46f2      	mov	sl, lr
 80088fa:	2700      	movs	r7, #0
 80088fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008904:	fa1f f883 	uxth.w	r8, r3
 8008908:	fa17 f78b 	uxtah	r7, r7, fp
 800890c:	0c1b      	lsrs	r3, r3, #16
 800890e:	eba7 0808 	sub.w	r8, r7, r8
 8008912:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008916:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800891a:	fa1f f888 	uxth.w	r8, r8
 800891e:	141f      	asrs	r7, r3, #16
 8008920:	454d      	cmp	r5, r9
 8008922:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008926:	f84a 3b04 	str.w	r3, [sl], #4
 800892a:	d8e7      	bhi.n	80088fc <__mdiff+0x7c>
 800892c:	1b2b      	subs	r3, r5, r4
 800892e:	3b15      	subs	r3, #21
 8008930:	f023 0303 	bic.w	r3, r3, #3
 8008934:	3304      	adds	r3, #4
 8008936:	3415      	adds	r4, #21
 8008938:	42a5      	cmp	r5, r4
 800893a:	bf38      	it	cc
 800893c:	2304      	movcc	r3, #4
 800893e:	4419      	add	r1, r3
 8008940:	4473      	add	r3, lr
 8008942:	469e      	mov	lr, r3
 8008944:	460d      	mov	r5, r1
 8008946:	4565      	cmp	r5, ip
 8008948:	d30e      	bcc.n	8008968 <__mdiff+0xe8>
 800894a:	f10c 0203 	add.w	r2, ip, #3
 800894e:	1a52      	subs	r2, r2, r1
 8008950:	f022 0203 	bic.w	r2, r2, #3
 8008954:	3903      	subs	r1, #3
 8008956:	458c      	cmp	ip, r1
 8008958:	bf38      	it	cc
 800895a:	2200      	movcc	r2, #0
 800895c:	441a      	add	r2, r3
 800895e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008962:	b17b      	cbz	r3, 8008984 <__mdiff+0x104>
 8008964:	6106      	str	r6, [r0, #16]
 8008966:	e7a5      	b.n	80088b4 <__mdiff+0x34>
 8008968:	f855 8b04 	ldr.w	r8, [r5], #4
 800896c:	fa17 f488 	uxtah	r4, r7, r8
 8008970:	1422      	asrs	r2, r4, #16
 8008972:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008976:	b2a4      	uxth	r4, r4
 8008978:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800897c:	f84e 4b04 	str.w	r4, [lr], #4
 8008980:	1417      	asrs	r7, r2, #16
 8008982:	e7e0      	b.n	8008946 <__mdiff+0xc6>
 8008984:	3e01      	subs	r6, #1
 8008986:	e7ea      	b.n	800895e <__mdiff+0xde>
 8008988:	08009e74 	.word	0x08009e74
 800898c:	08009f04 	.word	0x08009f04

08008990 <__ulp>:
 8008990:	b082      	sub	sp, #8
 8008992:	ed8d 0b00 	vstr	d0, [sp]
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	4912      	ldr	r1, [pc, #72]	; (80089e4 <__ulp+0x54>)
 800899a:	4019      	ands	r1, r3
 800899c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80089a0:	2900      	cmp	r1, #0
 80089a2:	dd05      	ble.n	80089b0 <__ulp+0x20>
 80089a4:	2200      	movs	r2, #0
 80089a6:	460b      	mov	r3, r1
 80089a8:	ec43 2b10 	vmov	d0, r2, r3
 80089ac:	b002      	add	sp, #8
 80089ae:	4770      	bx	lr
 80089b0:	4249      	negs	r1, r1
 80089b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80089b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	da04      	bge.n	80089ce <__ulp+0x3e>
 80089c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089c8:	fa41 f300 	asr.w	r3, r1, r0
 80089cc:	e7ec      	b.n	80089a8 <__ulp+0x18>
 80089ce:	f1a0 0114 	sub.w	r1, r0, #20
 80089d2:	291e      	cmp	r1, #30
 80089d4:	bfda      	itte	le
 80089d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80089da:	fa20 f101 	lsrle.w	r1, r0, r1
 80089de:	2101      	movgt	r1, #1
 80089e0:	460a      	mov	r2, r1
 80089e2:	e7e1      	b.n	80089a8 <__ulp+0x18>
 80089e4:	7ff00000 	.word	0x7ff00000

080089e8 <__b2d>:
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ea:	6905      	ldr	r5, [r0, #16]
 80089ec:	f100 0714 	add.w	r7, r0, #20
 80089f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80089f4:	1f2e      	subs	r6, r5, #4
 80089f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f7ff fd52 	bl	80084a4 <__hi0bits>
 8008a00:	f1c0 0320 	rsb	r3, r0, #32
 8008a04:	280a      	cmp	r0, #10
 8008a06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008a84 <__b2d+0x9c>
 8008a0a:	600b      	str	r3, [r1, #0]
 8008a0c:	dc14      	bgt.n	8008a38 <__b2d+0x50>
 8008a0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a12:	fa24 f10e 	lsr.w	r1, r4, lr
 8008a16:	42b7      	cmp	r7, r6
 8008a18:	ea41 030c 	orr.w	r3, r1, ip
 8008a1c:	bf34      	ite	cc
 8008a1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a22:	2100      	movcs	r1, #0
 8008a24:	3015      	adds	r0, #21
 8008a26:	fa04 f000 	lsl.w	r0, r4, r0
 8008a2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008a2e:	ea40 0201 	orr.w	r2, r0, r1
 8008a32:	ec43 2b10 	vmov	d0, r2, r3
 8008a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a38:	42b7      	cmp	r7, r6
 8008a3a:	bf3a      	itte	cc
 8008a3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a40:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a44:	2100      	movcs	r1, #0
 8008a46:	380b      	subs	r0, #11
 8008a48:	d017      	beq.n	8008a7a <__b2d+0x92>
 8008a4a:	f1c0 0c20 	rsb	ip, r0, #32
 8008a4e:	fa04 f500 	lsl.w	r5, r4, r0
 8008a52:	42be      	cmp	r6, r7
 8008a54:	fa21 f40c 	lsr.w	r4, r1, ip
 8008a58:	ea45 0504 	orr.w	r5, r5, r4
 8008a5c:	bf8c      	ite	hi
 8008a5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a62:	2400      	movls	r4, #0
 8008a64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008a68:	fa01 f000 	lsl.w	r0, r1, r0
 8008a6c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008a70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a74:	ea40 0204 	orr.w	r2, r0, r4
 8008a78:	e7db      	b.n	8008a32 <__b2d+0x4a>
 8008a7a:	ea44 030c 	orr.w	r3, r4, ip
 8008a7e:	460a      	mov	r2, r1
 8008a80:	e7d7      	b.n	8008a32 <__b2d+0x4a>
 8008a82:	bf00      	nop
 8008a84:	3ff00000 	.word	0x3ff00000

08008a88 <__d2b>:
 8008a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	4689      	mov	r9, r1
 8008a8e:	2101      	movs	r1, #1
 8008a90:	ec57 6b10 	vmov	r6, r7, d0
 8008a94:	4690      	mov	r8, r2
 8008a96:	f7ff fc0f 	bl	80082b8 <_Balloc>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	b930      	cbnz	r0, 8008aac <__d2b+0x24>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <__d2b+0xb0>)
 8008aa2:	4826      	ldr	r0, [pc, #152]	; (8008b3c <__d2b+0xb4>)
 8008aa4:	f240 310a 	movw	r1, #778	; 0x30a
 8008aa8:	f000 fb0e 	bl	80090c8 <__assert_func>
 8008aac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ab4:	bb35      	cbnz	r5, 8008b04 <__d2b+0x7c>
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	d028      	beq.n	8008b0e <__d2b+0x86>
 8008abc:	4668      	mov	r0, sp
 8008abe:	9600      	str	r6, [sp, #0]
 8008ac0:	f7ff fd10 	bl	80084e4 <__lo0bits>
 8008ac4:	9900      	ldr	r1, [sp, #0]
 8008ac6:	b300      	cbz	r0, 8008b0a <__d2b+0x82>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f1c0 0320 	rsb	r3, r0, #32
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	40c2      	lsrs	r2, r0
 8008ad6:	6163      	str	r3, [r4, #20]
 8008ad8:	9201      	str	r2, [sp, #4]
 8008ada:	9b01      	ldr	r3, [sp, #4]
 8008adc:	61a3      	str	r3, [r4, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2202      	movne	r2, #2
 8008ae4:	2201      	moveq	r2, #1
 8008ae6:	6122      	str	r2, [r4, #16]
 8008ae8:	b1d5      	cbz	r5, 8008b20 <__d2b+0x98>
 8008aea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008aee:	4405      	add	r5, r0
 8008af0:	f8c9 5000 	str.w	r5, [r9]
 8008af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008af8:	f8c8 0000 	str.w	r0, [r8]
 8008afc:	4620      	mov	r0, r4
 8008afe:	b003      	add	sp, #12
 8008b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b08:	e7d5      	b.n	8008ab6 <__d2b+0x2e>
 8008b0a:	6161      	str	r1, [r4, #20]
 8008b0c:	e7e5      	b.n	8008ada <__d2b+0x52>
 8008b0e:	a801      	add	r0, sp, #4
 8008b10:	f7ff fce8 	bl	80084e4 <__lo0bits>
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	6163      	str	r3, [r4, #20]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	6122      	str	r2, [r4, #16]
 8008b1c:	3020      	adds	r0, #32
 8008b1e:	e7e3      	b.n	8008ae8 <__d2b+0x60>
 8008b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b28:	f8c9 0000 	str.w	r0, [r9]
 8008b2c:	6918      	ldr	r0, [r3, #16]
 8008b2e:	f7ff fcb9 	bl	80084a4 <__hi0bits>
 8008b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b36:	e7df      	b.n	8008af8 <__d2b+0x70>
 8008b38:	08009e74 	.word	0x08009e74
 8008b3c:	08009f04 	.word	0x08009f04

08008b40 <__ratio>:
 8008b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	4688      	mov	r8, r1
 8008b46:	4669      	mov	r1, sp
 8008b48:	4681      	mov	r9, r0
 8008b4a:	f7ff ff4d 	bl	80089e8 <__b2d>
 8008b4e:	a901      	add	r1, sp, #4
 8008b50:	4640      	mov	r0, r8
 8008b52:	ec55 4b10 	vmov	r4, r5, d0
 8008b56:	f7ff ff47 	bl	80089e8 <__b2d>
 8008b5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b62:	eba3 0c02 	sub.w	ip, r3, r2
 8008b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfd6      	itet	le
 8008b78:	460a      	movle	r2, r1
 8008b7a:	462a      	movgt	r2, r5
 8008b7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b80:	468b      	mov	fp, r1
 8008b82:	462f      	mov	r7, r5
 8008b84:	bfd4      	ite	le
 8008b86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b8e:	4620      	mov	r0, r4
 8008b90:	ee10 2a10 	vmov	r2, s0
 8008b94:	465b      	mov	r3, fp
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 fe58 	bl	800084c <__aeabi_ddiv>
 8008b9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ba6 <__copybits>:
 8008ba6:	3901      	subs	r1, #1
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	1149      	asrs	r1, r1, #5
 8008bac:	6914      	ldr	r4, [r2, #16]
 8008bae:	3101      	adds	r1, #1
 8008bb0:	f102 0314 	add.w	r3, r2, #20
 8008bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bbc:	1f05      	subs	r5, r0, #4
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	d30c      	bcc.n	8008bdc <__copybits+0x36>
 8008bc2:	1aa3      	subs	r3, r4, r2
 8008bc4:	3b11      	subs	r3, #17
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	3211      	adds	r2, #17
 8008bcc:	42a2      	cmp	r2, r4
 8008bce:	bf88      	it	hi
 8008bd0:	2300      	movhi	r3, #0
 8008bd2:	4418      	add	r0, r3
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4288      	cmp	r0, r1
 8008bd8:	d305      	bcc.n	8008be6 <__copybits+0x40>
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
 8008bdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8008be0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008be4:	e7eb      	b.n	8008bbe <__copybits+0x18>
 8008be6:	f840 3b04 	str.w	r3, [r0], #4
 8008bea:	e7f4      	b.n	8008bd6 <__copybits+0x30>

08008bec <__any_on>:
 8008bec:	f100 0214 	add.w	r2, r0, #20
 8008bf0:	6900      	ldr	r0, [r0, #16]
 8008bf2:	114b      	asrs	r3, r1, #5
 8008bf4:	4298      	cmp	r0, r3
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	db11      	blt.n	8008c1e <__any_on+0x32>
 8008bfa:	dd0a      	ble.n	8008c12 <__any_on+0x26>
 8008bfc:	f011 011f 	ands.w	r1, r1, #31
 8008c00:	d007      	beq.n	8008c12 <__any_on+0x26>
 8008c02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c06:	fa24 f001 	lsr.w	r0, r4, r1
 8008c0a:	fa00 f101 	lsl.w	r1, r0, r1
 8008c0e:	428c      	cmp	r4, r1
 8008c10:	d10b      	bne.n	8008c2a <__any_on+0x3e>
 8008c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d803      	bhi.n	8008c22 <__any_on+0x36>
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	4603      	mov	r3, r0
 8008c20:	e7f7      	b.n	8008c12 <__any_on+0x26>
 8008c22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c26:	2900      	cmp	r1, #0
 8008c28:	d0f5      	beq.n	8008c16 <__any_on+0x2a>
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e7f6      	b.n	8008c1c <__any_on+0x30>

08008c2e <_calloc_r>:
 8008c2e:	b513      	push	{r0, r1, r4, lr}
 8008c30:	434a      	muls	r2, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	9201      	str	r2, [sp, #4]
 8008c36:	f000 f859 	bl	8008cec <_malloc_r>
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	b118      	cbz	r0, 8008c46 <_calloc_r+0x18>
 8008c3e:	9a01      	ldr	r2, [sp, #4]
 8008c40:	2100      	movs	r1, #0
 8008c42:	f7fc fbc7 	bl	80053d4 <memset>
 8008c46:	4620      	mov	r0, r4
 8008c48:	b002      	add	sp, #8
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <_free_r>:
 8008c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d048      	beq.n	8008ce4 <_free_r+0x98>
 8008c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c56:	9001      	str	r0, [sp, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5e:	bfb8      	it	lt
 8008c60:	18e4      	addlt	r4, r4, r3
 8008c62:	f000 fa7b 	bl	800915c <__malloc_lock>
 8008c66:	4a20      	ldr	r2, [pc, #128]	; (8008ce8 <_free_r+0x9c>)
 8008c68:	9801      	ldr	r0, [sp, #4]
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	4615      	mov	r5, r2
 8008c6e:	b933      	cbnz	r3, 8008c7e <_free_r+0x32>
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	6014      	str	r4, [r2, #0]
 8008c74:	b003      	add	sp, #12
 8008c76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c7a:	f000 ba75 	b.w	8009168 <__malloc_unlock>
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	d90b      	bls.n	8008c9a <_free_r+0x4e>
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	1862      	adds	r2, r4, r1
 8008c86:	4293      	cmp	r3, r2
 8008c88:	bf04      	itt	eq
 8008c8a:	681a      	ldreq	r2, [r3, #0]
 8008c8c:	685b      	ldreq	r3, [r3, #4]
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	bf04      	itt	eq
 8008c92:	1852      	addeq	r2, r2, r1
 8008c94:	6022      	streq	r2, [r4, #0]
 8008c96:	602c      	str	r4, [r5, #0]
 8008c98:	e7ec      	b.n	8008c74 <_free_r+0x28>
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b10b      	cbz	r3, 8008ca4 <_free_r+0x58>
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	d9fa      	bls.n	8008c9a <_free_r+0x4e>
 8008ca4:	6811      	ldr	r1, [r2, #0]
 8008ca6:	1855      	adds	r5, r2, r1
 8008ca8:	42a5      	cmp	r5, r4
 8008caa:	d10b      	bne.n	8008cc4 <_free_r+0x78>
 8008cac:	6824      	ldr	r4, [r4, #0]
 8008cae:	4421      	add	r1, r4
 8008cb0:	1854      	adds	r4, r2, r1
 8008cb2:	42a3      	cmp	r3, r4
 8008cb4:	6011      	str	r1, [r2, #0]
 8008cb6:	d1dd      	bne.n	8008c74 <_free_r+0x28>
 8008cb8:	681c      	ldr	r4, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	6053      	str	r3, [r2, #4]
 8008cbe:	4421      	add	r1, r4
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	e7d7      	b.n	8008c74 <_free_r+0x28>
 8008cc4:	d902      	bls.n	8008ccc <_free_r+0x80>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	e7d3      	b.n	8008c74 <_free_r+0x28>
 8008ccc:	6825      	ldr	r5, [r4, #0]
 8008cce:	1961      	adds	r1, r4, r5
 8008cd0:	428b      	cmp	r3, r1
 8008cd2:	bf04      	itt	eq
 8008cd4:	6819      	ldreq	r1, [r3, #0]
 8008cd6:	685b      	ldreq	r3, [r3, #4]
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	bf04      	itt	eq
 8008cdc:	1949      	addeq	r1, r1, r5
 8008cde:	6021      	streq	r1, [r4, #0]
 8008ce0:	6054      	str	r4, [r2, #4]
 8008ce2:	e7c7      	b.n	8008c74 <_free_r+0x28>
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	20000200 	.word	0x20000200

08008cec <_malloc_r>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	1ccd      	adds	r5, r1, #3
 8008cf0:	f025 0503 	bic.w	r5, r5, #3
 8008cf4:	3508      	adds	r5, #8
 8008cf6:	2d0c      	cmp	r5, #12
 8008cf8:	bf38      	it	cc
 8008cfa:	250c      	movcc	r5, #12
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	4606      	mov	r6, r0
 8008d00:	db01      	blt.n	8008d06 <_malloc_r+0x1a>
 8008d02:	42a9      	cmp	r1, r5
 8008d04:	d903      	bls.n	8008d0e <_malloc_r+0x22>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6033      	str	r3, [r6, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0e:	f000 fa25 	bl	800915c <__malloc_lock>
 8008d12:	4921      	ldr	r1, [pc, #132]	; (8008d98 <_malloc_r+0xac>)
 8008d14:	680a      	ldr	r2, [r1, #0]
 8008d16:	4614      	mov	r4, r2
 8008d18:	b99c      	cbnz	r4, 8008d42 <_malloc_r+0x56>
 8008d1a:	4f20      	ldr	r7, [pc, #128]	; (8008d9c <_malloc_r+0xb0>)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	b923      	cbnz	r3, 8008d2a <_malloc_r+0x3e>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f000 f9a0 	bl	8009068 <_sbrk_r>
 8008d28:	6038      	str	r0, [r7, #0]
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 f99b 	bl	8009068 <_sbrk_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d123      	bne.n	8008d7e <_malloc_r+0x92>
 8008d36:	230c      	movs	r3, #12
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 fa14 	bl	8009168 <__malloc_unlock>
 8008d40:	e7e3      	b.n	8008d0a <_malloc_r+0x1e>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	1b5b      	subs	r3, r3, r5
 8008d46:	d417      	bmi.n	8008d78 <_malloc_r+0x8c>
 8008d48:	2b0b      	cmp	r3, #11
 8008d4a:	d903      	bls.n	8008d54 <_malloc_r+0x68>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	441c      	add	r4, r3
 8008d50:	6025      	str	r5, [r4, #0]
 8008d52:	e004      	b.n	8008d5e <_malloc_r+0x72>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	42a2      	cmp	r2, r4
 8008d58:	bf0c      	ite	eq
 8008d5a:	600b      	streq	r3, [r1, #0]
 8008d5c:	6053      	strne	r3, [r2, #4]
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 fa02 	bl	8009168 <__malloc_unlock>
 8008d64:	f104 000b 	add.w	r0, r4, #11
 8008d68:	1d23      	adds	r3, r4, #4
 8008d6a:	f020 0007 	bic.w	r0, r0, #7
 8008d6e:	1ac2      	subs	r2, r0, r3
 8008d70:	d0cc      	beq.n	8008d0c <_malloc_r+0x20>
 8008d72:	1a1b      	subs	r3, r3, r0
 8008d74:	50a3      	str	r3, [r4, r2]
 8008d76:	e7c9      	b.n	8008d0c <_malloc_r+0x20>
 8008d78:	4622      	mov	r2, r4
 8008d7a:	6864      	ldr	r4, [r4, #4]
 8008d7c:	e7cc      	b.n	8008d18 <_malloc_r+0x2c>
 8008d7e:	1cc4      	adds	r4, r0, #3
 8008d80:	f024 0403 	bic.w	r4, r4, #3
 8008d84:	42a0      	cmp	r0, r4
 8008d86:	d0e3      	beq.n	8008d50 <_malloc_r+0x64>
 8008d88:	1a21      	subs	r1, r4, r0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 f96c 	bl	8009068 <_sbrk_r>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d1dd      	bne.n	8008d50 <_malloc_r+0x64>
 8008d94:	e7cf      	b.n	8008d36 <_malloc_r+0x4a>
 8008d96:	bf00      	nop
 8008d98:	20000200 	.word	0x20000200
 8008d9c:	20000204 	.word	0x20000204

08008da0 <__ssputs_r>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	688e      	ldr	r6, [r1, #8]
 8008da6:	429e      	cmp	r6, r3
 8008da8:	4682      	mov	sl, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4690      	mov	r8, r2
 8008dae:	461f      	mov	r7, r3
 8008db0:	d838      	bhi.n	8008e24 <__ssputs_r+0x84>
 8008db2:	898a      	ldrh	r2, [r1, #12]
 8008db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db8:	d032      	beq.n	8008e20 <__ssputs_r+0x80>
 8008dba:	6825      	ldr	r5, [r4, #0]
 8008dbc:	6909      	ldr	r1, [r1, #16]
 8008dbe:	eba5 0901 	sub.w	r9, r5, r1
 8008dc2:	6965      	ldr	r5, [r4, #20]
 8008dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dcc:	3301      	adds	r3, #1
 8008dce:	444b      	add	r3, r9
 8008dd0:	106d      	asrs	r5, r5, #1
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	bf38      	it	cc
 8008dd6:	461d      	movcc	r5, r3
 8008dd8:	0553      	lsls	r3, r2, #21
 8008dda:	d531      	bpl.n	8008e40 <__ssputs_r+0xa0>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	f7ff ff85 	bl	8008cec <_malloc_r>
 8008de2:	4606      	mov	r6, r0
 8008de4:	b950      	cbnz	r0, 8008dfc <__ssputs_r+0x5c>
 8008de6:	230c      	movs	r3, #12
 8008de8:	f8ca 3000 	str.w	r3, [sl]
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfc:	6921      	ldr	r1, [r4, #16]
 8008dfe:	464a      	mov	r2, r9
 8008e00:	f7ff fa4c 	bl	800829c <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	6126      	str	r6, [r4, #16]
 8008e12:	6165      	str	r5, [r4, #20]
 8008e14:	444e      	add	r6, r9
 8008e16:	eba5 0509 	sub.w	r5, r5, r9
 8008e1a:	6026      	str	r6, [r4, #0]
 8008e1c:	60a5      	str	r5, [r4, #8]
 8008e1e:	463e      	mov	r6, r7
 8008e20:	42be      	cmp	r6, r7
 8008e22:	d900      	bls.n	8008e26 <__ssputs_r+0x86>
 8008e24:	463e      	mov	r6, r7
 8008e26:	4632      	mov	r2, r6
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	f000 f97c 	bl	8009128 <memmove>
 8008e30:	68a3      	ldr	r3, [r4, #8]
 8008e32:	6822      	ldr	r2, [r4, #0]
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	4432      	add	r2, r6
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	6022      	str	r2, [r4, #0]
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e7db      	b.n	8008df8 <__ssputs_r+0x58>
 8008e40:	462a      	mov	r2, r5
 8008e42:	f000 f997 	bl	8009174 <_realloc_r>
 8008e46:	4606      	mov	r6, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1e1      	bne.n	8008e10 <__ssputs_r+0x70>
 8008e4c:	6921      	ldr	r1, [r4, #16]
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7ff fefc 	bl	8008c4c <_free_r>
 8008e54:	e7c7      	b.n	8008de6 <__ssputs_r+0x46>
	...

08008e58 <_svfiprintf_r>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	4698      	mov	r8, r3
 8008e5e:	898b      	ldrh	r3, [r1, #12]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	b09d      	sub	sp, #116	; 0x74
 8008e64:	4607      	mov	r7, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	d50e      	bpl.n	8008e8a <_svfiprintf_r+0x32>
 8008e6c:	690b      	ldr	r3, [r1, #16]
 8008e6e:	b963      	cbnz	r3, 8008e8a <_svfiprintf_r+0x32>
 8008e70:	2140      	movs	r1, #64	; 0x40
 8008e72:	f7ff ff3b 	bl	8008cec <_malloc_r>
 8008e76:	6028      	str	r0, [r5, #0]
 8008e78:	6128      	str	r0, [r5, #16]
 8008e7a:	b920      	cbnz	r0, 8008e86 <_svfiprintf_r+0x2e>
 8008e7c:	230c      	movs	r3, #12
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e0d1      	b.n	800902a <_svfiprintf_r+0x1d2>
 8008e86:	2340      	movs	r3, #64	; 0x40
 8008e88:	616b      	str	r3, [r5, #20]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8e:	2320      	movs	r3, #32
 8008e90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e98:	2330      	movs	r3, #48	; 0x30
 8008e9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009044 <_svfiprintf_r+0x1ec>
 8008e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea2:	f04f 0901 	mov.w	r9, #1
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	469a      	mov	sl, r3
 8008eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eae:	b10a      	cbz	r2, 8008eb4 <_svfiprintf_r+0x5c>
 8008eb0:	2a25      	cmp	r2, #37	; 0x25
 8008eb2:	d1f9      	bne.n	8008ea8 <_svfiprintf_r+0x50>
 8008eb4:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb8:	d00b      	beq.n	8008ed2 <_svfiprintf_r+0x7a>
 8008eba:	465b      	mov	r3, fp
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ff6d 	bl	8008da0 <__ssputs_r>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f000 80aa 	beq.w	8009020 <_svfiprintf_r+0x1c8>
 8008ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ece:	445a      	add	r2, fp
 8008ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80a2 	beq.w	8009020 <_svfiprintf_r+0x1c8>
 8008edc:	2300      	movs	r3, #0
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee6:	f10a 0a01 	add.w	sl, sl, #1
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	9307      	str	r3, [sp, #28]
 8008eee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef4:	4654      	mov	r4, sl
 8008ef6:	2205      	movs	r2, #5
 8008ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efc:	4851      	ldr	r0, [pc, #324]	; (8009044 <_svfiprintf_r+0x1ec>)
 8008efe:	f7f7 f96f 	bl	80001e0 <memchr>
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	b9d8      	cbnz	r0, 8008f3e <_svfiprintf_r+0xe6>
 8008f06:	06d0      	lsls	r0, r2, #27
 8008f08:	bf44      	itt	mi
 8008f0a:	2320      	movmi	r3, #32
 8008f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f10:	0711      	lsls	r1, r2, #28
 8008f12:	bf44      	itt	mi
 8008f14:	232b      	movmi	r3, #43	; 0x2b
 8008f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f20:	d015      	beq.n	8008f4e <_svfiprintf_r+0xf6>
 8008f22:	9a07      	ldr	r2, [sp, #28]
 8008f24:	4654      	mov	r4, sl
 8008f26:	2000      	movs	r0, #0
 8008f28:	f04f 0c0a 	mov.w	ip, #10
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f32:	3b30      	subs	r3, #48	; 0x30
 8008f34:	2b09      	cmp	r3, #9
 8008f36:	d94e      	bls.n	8008fd6 <_svfiprintf_r+0x17e>
 8008f38:	b1b0      	cbz	r0, 8008f68 <_svfiprintf_r+0x110>
 8008f3a:	9207      	str	r2, [sp, #28]
 8008f3c:	e014      	b.n	8008f68 <_svfiprintf_r+0x110>
 8008f3e:	eba0 0308 	sub.w	r3, r0, r8
 8008f42:	fa09 f303 	lsl.w	r3, r9, r3
 8008f46:	4313      	orrs	r3, r2
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	46a2      	mov	sl, r4
 8008f4c:	e7d2      	b.n	8008ef4 <_svfiprintf_r+0x9c>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	1d19      	adds	r1, r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	9103      	str	r1, [sp, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfbb      	ittet	lt
 8008f5a:	425b      	neglt	r3, r3
 8008f5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f60:	9307      	strge	r3, [sp, #28]
 8008f62:	9307      	strlt	r3, [sp, #28]
 8008f64:	bfb8      	it	lt
 8008f66:	9204      	strlt	r2, [sp, #16]
 8008f68:	7823      	ldrb	r3, [r4, #0]
 8008f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f6c:	d10c      	bne.n	8008f88 <_svfiprintf_r+0x130>
 8008f6e:	7863      	ldrb	r3, [r4, #1]
 8008f70:	2b2a      	cmp	r3, #42	; 0x2a
 8008f72:	d135      	bne.n	8008fe0 <_svfiprintf_r+0x188>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	9203      	str	r2, [sp, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfb8      	it	lt
 8008f80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f84:	3402      	adds	r4, #2
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009054 <_svfiprintf_r+0x1fc>
 8008f8c:	7821      	ldrb	r1, [r4, #0]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7f7 f925 	bl	80001e0 <memchr>
 8008f96:	b140      	cbz	r0, 8008faa <_svfiprintf_r+0x152>
 8008f98:	2340      	movs	r3, #64	; 0x40
 8008f9a:	eba0 000a 	sub.w	r0, r0, sl
 8008f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	4303      	orrs	r3, r0
 8008fa6:	3401      	adds	r4, #1
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fae:	4826      	ldr	r0, [pc, #152]	; (8009048 <_svfiprintf_r+0x1f0>)
 8008fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb4:	2206      	movs	r2, #6
 8008fb6:	f7f7 f913 	bl	80001e0 <memchr>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d038      	beq.n	8009030 <_svfiprintf_r+0x1d8>
 8008fbe:	4b23      	ldr	r3, [pc, #140]	; (800904c <_svfiprintf_r+0x1f4>)
 8008fc0:	bb1b      	cbnz	r3, 800900a <_svfiprintf_r+0x1b2>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3307      	adds	r3, #7
 8008fc6:	f023 0307 	bic.w	r3, r3, #7
 8008fca:	3308      	adds	r3, #8
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	4433      	add	r3, r6
 8008fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd4:	e767      	b.n	8008ea6 <_svfiprintf_r+0x4e>
 8008fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fda:	460c      	mov	r4, r1
 8008fdc:	2001      	movs	r0, #1
 8008fde:	e7a5      	b.n	8008f2c <_svfiprintf_r+0xd4>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	3401      	adds	r4, #1
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f04f 0c0a 	mov.w	ip, #10
 8008fec:	4620      	mov	r0, r4
 8008fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff2:	3a30      	subs	r2, #48	; 0x30
 8008ff4:	2a09      	cmp	r2, #9
 8008ff6:	d903      	bls.n	8009000 <_svfiprintf_r+0x1a8>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0c5      	beq.n	8008f88 <_svfiprintf_r+0x130>
 8008ffc:	9105      	str	r1, [sp, #20]
 8008ffe:	e7c3      	b.n	8008f88 <_svfiprintf_r+0x130>
 8009000:	fb0c 2101 	mla	r1, ip, r1, r2
 8009004:	4604      	mov	r4, r0
 8009006:	2301      	movs	r3, #1
 8009008:	e7f0      	b.n	8008fec <_svfiprintf_r+0x194>
 800900a:	ab03      	add	r3, sp, #12
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	462a      	mov	r2, r5
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <_svfiprintf_r+0x1f8>)
 8009012:	a904      	add	r1, sp, #16
 8009014:	4638      	mov	r0, r7
 8009016:	f7fc fa85 	bl	8005524 <_printf_float>
 800901a:	1c42      	adds	r2, r0, #1
 800901c:	4606      	mov	r6, r0
 800901e:	d1d6      	bne.n	8008fce <_svfiprintf_r+0x176>
 8009020:	89ab      	ldrh	r3, [r5, #12]
 8009022:	065b      	lsls	r3, r3, #25
 8009024:	f53f af2c 	bmi.w	8008e80 <_svfiprintf_r+0x28>
 8009028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902a:	b01d      	add	sp, #116	; 0x74
 800902c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4b06      	ldr	r3, [pc, #24]	; (8009050 <_svfiprintf_r+0x1f8>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4638      	mov	r0, r7
 800903c:	f7fc fd16 	bl	8005a6c <_printf_i>
 8009040:	e7eb      	b.n	800901a <_svfiprintf_r+0x1c2>
 8009042:	bf00      	nop
 8009044:	0800a064 	.word	0x0800a064
 8009048:	0800a06e 	.word	0x0800a06e
 800904c:	08005525 	.word	0x08005525
 8009050:	08008da1 	.word	0x08008da1
 8009054:	0800a06a 	.word	0x0800a06a

08009058 <nan>:
 8009058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009060 <nan+0x8>
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	00000000 	.word	0x00000000
 8009064:	7ff80000 	.word	0x7ff80000

08009068 <_sbrk_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	; (8009084 <_sbrk_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f8 fc10 	bl	8001898 <_sbrk>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_sbrk_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_sbrk_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	200002f4 	.word	0x200002f4

08009088 <strncmp>:
 8009088:	b510      	push	{r4, lr}
 800908a:	b16a      	cbz	r2, 80090a8 <strncmp+0x20>
 800908c:	3901      	subs	r1, #1
 800908e:	1884      	adds	r4, r0, r2
 8009090:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009094:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009098:	4293      	cmp	r3, r2
 800909a:	d103      	bne.n	80090a4 <strncmp+0x1c>
 800909c:	42a0      	cmp	r0, r4
 800909e:	d001      	beq.n	80090a4 <strncmp+0x1c>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1f5      	bne.n	8009090 <strncmp+0x8>
 80090a4:	1a98      	subs	r0, r3, r2
 80090a6:	bd10      	pop	{r4, pc}
 80090a8:	4610      	mov	r0, r2
 80090aa:	e7fc      	b.n	80090a6 <strncmp+0x1e>

080090ac <__ascii_wctomb>:
 80090ac:	b149      	cbz	r1, 80090c2 <__ascii_wctomb+0x16>
 80090ae:	2aff      	cmp	r2, #255	; 0xff
 80090b0:	bf85      	ittet	hi
 80090b2:	238a      	movhi	r3, #138	; 0x8a
 80090b4:	6003      	strhi	r3, [r0, #0]
 80090b6:	700a      	strbls	r2, [r1, #0]
 80090b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80090bc:	bf98      	it	ls
 80090be:	2001      	movls	r0, #1
 80090c0:	4770      	bx	lr
 80090c2:	4608      	mov	r0, r1
 80090c4:	4770      	bx	lr
	...

080090c8 <__assert_func>:
 80090c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ca:	4614      	mov	r4, r2
 80090cc:	461a      	mov	r2, r3
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <__assert_func+0x2c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4605      	mov	r5, r0
 80090d4:	68d8      	ldr	r0, [r3, #12]
 80090d6:	b14c      	cbz	r4, 80090ec <__assert_func+0x24>
 80090d8:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <__assert_func+0x30>)
 80090da:	9100      	str	r1, [sp, #0]
 80090dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e0:	4906      	ldr	r1, [pc, #24]	; (80090fc <__assert_func+0x34>)
 80090e2:	462b      	mov	r3, r5
 80090e4:	f000 f80e 	bl	8009104 <fiprintf>
 80090e8:	f000 fa84 	bl	80095f4 <abort>
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <__assert_func+0x38>)
 80090ee:	461c      	mov	r4, r3
 80090f0:	e7f3      	b.n	80090da <__assert_func+0x12>
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c
 80090f8:	0800a075 	.word	0x0800a075
 80090fc:	0800a082 	.word	0x0800a082
 8009100:	0800a0b0 	.word	0x0800a0b0

08009104 <fiprintf>:
 8009104:	b40e      	push	{r1, r2, r3}
 8009106:	b503      	push	{r0, r1, lr}
 8009108:	4601      	mov	r1, r0
 800910a:	ab03      	add	r3, sp, #12
 800910c:	4805      	ldr	r0, [pc, #20]	; (8009124 <fiprintf+0x20>)
 800910e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	f000 f87d 	bl	8009214 <_vfiprintf_r>
 800911a:	b002      	add	sp, #8
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	b003      	add	sp, #12
 8009122:	4770      	bx	lr
 8009124:	2000000c 	.word	0x2000000c

08009128 <memmove>:
 8009128:	4288      	cmp	r0, r1
 800912a:	b510      	push	{r4, lr}
 800912c:	eb01 0402 	add.w	r4, r1, r2
 8009130:	d902      	bls.n	8009138 <memmove+0x10>
 8009132:	4284      	cmp	r4, r0
 8009134:	4623      	mov	r3, r4
 8009136:	d807      	bhi.n	8009148 <memmove+0x20>
 8009138:	1e43      	subs	r3, r0, #1
 800913a:	42a1      	cmp	r1, r4
 800913c:	d008      	beq.n	8009150 <memmove+0x28>
 800913e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009146:	e7f8      	b.n	800913a <memmove+0x12>
 8009148:	4402      	add	r2, r0
 800914a:	4601      	mov	r1, r0
 800914c:	428a      	cmp	r2, r1
 800914e:	d100      	bne.n	8009152 <memmove+0x2a>
 8009150:	bd10      	pop	{r4, pc}
 8009152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800915a:	e7f7      	b.n	800914c <memmove+0x24>

0800915c <__malloc_lock>:
 800915c:	4801      	ldr	r0, [pc, #4]	; (8009164 <__malloc_lock+0x8>)
 800915e:	f000 bc09 	b.w	8009974 <__retarget_lock_acquire_recursive>
 8009162:	bf00      	nop
 8009164:	200002fc 	.word	0x200002fc

08009168 <__malloc_unlock>:
 8009168:	4801      	ldr	r0, [pc, #4]	; (8009170 <__malloc_unlock+0x8>)
 800916a:	f000 bc04 	b.w	8009976 <__retarget_lock_release_recursive>
 800916e:	bf00      	nop
 8009170:	200002fc 	.word	0x200002fc

08009174 <_realloc_r>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	4607      	mov	r7, r0
 8009178:	4614      	mov	r4, r2
 800917a:	460e      	mov	r6, r1
 800917c:	b921      	cbnz	r1, 8009188 <_realloc_r+0x14>
 800917e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009182:	4611      	mov	r1, r2
 8009184:	f7ff bdb2 	b.w	8008cec <_malloc_r>
 8009188:	b922      	cbnz	r2, 8009194 <_realloc_r+0x20>
 800918a:	f7ff fd5f 	bl	8008c4c <_free_r>
 800918e:	4625      	mov	r5, r4
 8009190:	4628      	mov	r0, r5
 8009192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009194:	f000 fc54 	bl	8009a40 <_malloc_usable_size_r>
 8009198:	42a0      	cmp	r0, r4
 800919a:	d20f      	bcs.n	80091bc <_realloc_r+0x48>
 800919c:	4621      	mov	r1, r4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff fda4 	bl	8008cec <_malloc_r>
 80091a4:	4605      	mov	r5, r0
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d0f2      	beq.n	8009190 <_realloc_r+0x1c>
 80091aa:	4631      	mov	r1, r6
 80091ac:	4622      	mov	r2, r4
 80091ae:	f7ff f875 	bl	800829c <memcpy>
 80091b2:	4631      	mov	r1, r6
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff fd49 	bl	8008c4c <_free_r>
 80091ba:	e7e9      	b.n	8009190 <_realloc_r+0x1c>
 80091bc:	4635      	mov	r5, r6
 80091be:	e7e7      	b.n	8009190 <_realloc_r+0x1c>

080091c0 <__sfputc_r>:
 80091c0:	6893      	ldr	r3, [r2, #8]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	b410      	push	{r4}
 80091c8:	6093      	str	r3, [r2, #8]
 80091ca:	da08      	bge.n	80091de <__sfputc_r+0x1e>
 80091cc:	6994      	ldr	r4, [r2, #24]
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	db01      	blt.n	80091d6 <__sfputc_r+0x16>
 80091d2:	290a      	cmp	r1, #10
 80091d4:	d103      	bne.n	80091de <__sfputc_r+0x1e>
 80091d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091da:	f000 b94b 	b.w	8009474 <__swbuf_r>
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	1c58      	adds	r0, r3, #1
 80091e2:	6010      	str	r0, [r2, #0]
 80091e4:	7019      	strb	r1, [r3, #0]
 80091e6:	4608      	mov	r0, r1
 80091e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <__sfputs_r>:
 80091ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f0:	4606      	mov	r6, r0
 80091f2:	460f      	mov	r7, r1
 80091f4:	4614      	mov	r4, r2
 80091f6:	18d5      	adds	r5, r2, r3
 80091f8:	42ac      	cmp	r4, r5
 80091fa:	d101      	bne.n	8009200 <__sfputs_r+0x12>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e007      	b.n	8009210 <__sfputs_r+0x22>
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	463a      	mov	r2, r7
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ffda 	bl	80091c0 <__sfputc_r>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d1f3      	bne.n	80091f8 <__sfputs_r+0xa>
 8009210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009214 <_vfiprintf_r>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	460d      	mov	r5, r1
 800921a:	b09d      	sub	sp, #116	; 0x74
 800921c:	4614      	mov	r4, r2
 800921e:	4698      	mov	r8, r3
 8009220:	4606      	mov	r6, r0
 8009222:	b118      	cbz	r0, 800922c <_vfiprintf_r+0x18>
 8009224:	6983      	ldr	r3, [r0, #24]
 8009226:	b90b      	cbnz	r3, 800922c <_vfiprintf_r+0x18>
 8009228:	f000 fb06 	bl	8009838 <__sinit>
 800922c:	4b89      	ldr	r3, [pc, #548]	; (8009454 <_vfiprintf_r+0x240>)
 800922e:	429d      	cmp	r5, r3
 8009230:	d11b      	bne.n	800926a <_vfiprintf_r+0x56>
 8009232:	6875      	ldr	r5, [r6, #4]
 8009234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d405      	bmi.n	8009246 <_vfiprintf_r+0x32>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	059a      	lsls	r2, r3, #22
 800923e:	d402      	bmi.n	8009246 <_vfiprintf_r+0x32>
 8009240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009242:	f000 fb97 	bl	8009974 <__retarget_lock_acquire_recursive>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	071b      	lsls	r3, r3, #28
 800924a:	d501      	bpl.n	8009250 <_vfiprintf_r+0x3c>
 800924c:	692b      	ldr	r3, [r5, #16]
 800924e:	b9eb      	cbnz	r3, 800928c <_vfiprintf_r+0x78>
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f960 	bl	8009518 <__swsetup_r>
 8009258:	b1c0      	cbz	r0, 800928c <_vfiprintf_r+0x78>
 800925a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800925c:	07dc      	lsls	r4, r3, #31
 800925e:	d50e      	bpl.n	800927e <_vfiprintf_r+0x6a>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	b01d      	add	sp, #116	; 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	4b7b      	ldr	r3, [pc, #492]	; (8009458 <_vfiprintf_r+0x244>)
 800926c:	429d      	cmp	r5, r3
 800926e:	d101      	bne.n	8009274 <_vfiprintf_r+0x60>
 8009270:	68b5      	ldr	r5, [r6, #8]
 8009272:	e7df      	b.n	8009234 <_vfiprintf_r+0x20>
 8009274:	4b79      	ldr	r3, [pc, #484]	; (800945c <_vfiprintf_r+0x248>)
 8009276:	429d      	cmp	r5, r3
 8009278:	bf08      	it	eq
 800927a:	68f5      	ldreq	r5, [r6, #12]
 800927c:	e7da      	b.n	8009234 <_vfiprintf_r+0x20>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	0598      	lsls	r0, r3, #22
 8009282:	d4ed      	bmi.n	8009260 <_vfiprintf_r+0x4c>
 8009284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009286:	f000 fb76 	bl	8009976 <__retarget_lock_release_recursive>
 800928a:	e7e9      	b.n	8009260 <_vfiprintf_r+0x4c>
 800928c:	2300      	movs	r3, #0
 800928e:	9309      	str	r3, [sp, #36]	; 0x24
 8009290:	2320      	movs	r3, #32
 8009292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009296:	f8cd 800c 	str.w	r8, [sp, #12]
 800929a:	2330      	movs	r3, #48	; 0x30
 800929c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009460 <_vfiprintf_r+0x24c>
 80092a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a4:	f04f 0901 	mov.w	r9, #1
 80092a8:	4623      	mov	r3, r4
 80092aa:	469a      	mov	sl, r3
 80092ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b0:	b10a      	cbz	r2, 80092b6 <_vfiprintf_r+0xa2>
 80092b2:	2a25      	cmp	r2, #37	; 0x25
 80092b4:	d1f9      	bne.n	80092aa <_vfiprintf_r+0x96>
 80092b6:	ebba 0b04 	subs.w	fp, sl, r4
 80092ba:	d00b      	beq.n	80092d4 <_vfiprintf_r+0xc0>
 80092bc:	465b      	mov	r3, fp
 80092be:	4622      	mov	r2, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff93 	bl	80091ee <__sfputs_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f000 80aa 	beq.w	8009422 <_vfiprintf_r+0x20e>
 80092ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d0:	445a      	add	r2, fp
 80092d2:	9209      	str	r2, [sp, #36]	; 0x24
 80092d4:	f89a 3000 	ldrb.w	r3, [sl]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80a2 	beq.w	8009422 <_vfiprintf_r+0x20e>
 80092de:	2300      	movs	r3, #0
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e8:	f10a 0a01 	add.w	sl, sl, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f4:	931a      	str	r3, [sp, #104]	; 0x68
 80092f6:	4654      	mov	r4, sl
 80092f8:	2205      	movs	r2, #5
 80092fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fe:	4858      	ldr	r0, [pc, #352]	; (8009460 <_vfiprintf_r+0x24c>)
 8009300:	f7f6 ff6e 	bl	80001e0 <memchr>
 8009304:	9a04      	ldr	r2, [sp, #16]
 8009306:	b9d8      	cbnz	r0, 8009340 <_vfiprintf_r+0x12c>
 8009308:	06d1      	lsls	r1, r2, #27
 800930a:	bf44      	itt	mi
 800930c:	2320      	movmi	r3, #32
 800930e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009312:	0713      	lsls	r3, r2, #28
 8009314:	bf44      	itt	mi
 8009316:	232b      	movmi	r3, #43	; 0x2b
 8009318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931c:	f89a 3000 	ldrb.w	r3, [sl]
 8009320:	2b2a      	cmp	r3, #42	; 0x2a
 8009322:	d015      	beq.n	8009350 <_vfiprintf_r+0x13c>
 8009324:	9a07      	ldr	r2, [sp, #28]
 8009326:	4654      	mov	r4, sl
 8009328:	2000      	movs	r0, #0
 800932a:	f04f 0c0a 	mov.w	ip, #10
 800932e:	4621      	mov	r1, r4
 8009330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009334:	3b30      	subs	r3, #48	; 0x30
 8009336:	2b09      	cmp	r3, #9
 8009338:	d94e      	bls.n	80093d8 <_vfiprintf_r+0x1c4>
 800933a:	b1b0      	cbz	r0, 800936a <_vfiprintf_r+0x156>
 800933c:	9207      	str	r2, [sp, #28]
 800933e:	e014      	b.n	800936a <_vfiprintf_r+0x156>
 8009340:	eba0 0308 	sub.w	r3, r0, r8
 8009344:	fa09 f303 	lsl.w	r3, r9, r3
 8009348:	4313      	orrs	r3, r2
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	46a2      	mov	sl, r4
 800934e:	e7d2      	b.n	80092f6 <_vfiprintf_r+0xe2>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	1d19      	adds	r1, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	9103      	str	r1, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfbb      	ittet	lt
 800935c:	425b      	neglt	r3, r3
 800935e:	f042 0202 	orrlt.w	r2, r2, #2
 8009362:	9307      	strge	r3, [sp, #28]
 8009364:	9307      	strlt	r3, [sp, #28]
 8009366:	bfb8      	it	lt
 8009368:	9204      	strlt	r2, [sp, #16]
 800936a:	7823      	ldrb	r3, [r4, #0]
 800936c:	2b2e      	cmp	r3, #46	; 0x2e
 800936e:	d10c      	bne.n	800938a <_vfiprintf_r+0x176>
 8009370:	7863      	ldrb	r3, [r4, #1]
 8009372:	2b2a      	cmp	r3, #42	; 0x2a
 8009374:	d135      	bne.n	80093e2 <_vfiprintf_r+0x1ce>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9203      	str	r2, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	f04f 33ff 	movlt.w	r3, #4294967295
 8009386:	3402      	adds	r4, #2
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009470 <_vfiprintf_r+0x25c>
 800938e:	7821      	ldrb	r1, [r4, #0]
 8009390:	2203      	movs	r2, #3
 8009392:	4650      	mov	r0, sl
 8009394:	f7f6 ff24 	bl	80001e0 <memchr>
 8009398:	b140      	cbz	r0, 80093ac <_vfiprintf_r+0x198>
 800939a:	2340      	movs	r3, #64	; 0x40
 800939c:	eba0 000a 	sub.w	r0, r0, sl
 80093a0:	fa03 f000 	lsl.w	r0, r3, r0
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	4303      	orrs	r3, r0
 80093a8:	3401      	adds	r4, #1
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b0:	482c      	ldr	r0, [pc, #176]	; (8009464 <_vfiprintf_r+0x250>)
 80093b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b6:	2206      	movs	r2, #6
 80093b8:	f7f6 ff12 	bl	80001e0 <memchr>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d03f      	beq.n	8009440 <_vfiprintf_r+0x22c>
 80093c0:	4b29      	ldr	r3, [pc, #164]	; (8009468 <_vfiprintf_r+0x254>)
 80093c2:	bb1b      	cbnz	r3, 800940c <_vfiprintf_r+0x1f8>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	3307      	adds	r3, #7
 80093c8:	f023 0307 	bic.w	r3, r3, #7
 80093cc:	3308      	adds	r3, #8
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	443b      	add	r3, r7
 80093d4:	9309      	str	r3, [sp, #36]	; 0x24
 80093d6:	e767      	b.n	80092a8 <_vfiprintf_r+0x94>
 80093d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093dc:	460c      	mov	r4, r1
 80093de:	2001      	movs	r0, #1
 80093e0:	e7a5      	b.n	800932e <_vfiprintf_r+0x11a>
 80093e2:	2300      	movs	r3, #0
 80093e4:	3401      	adds	r4, #1
 80093e6:	9305      	str	r3, [sp, #20]
 80093e8:	4619      	mov	r1, r3
 80093ea:	f04f 0c0a 	mov.w	ip, #10
 80093ee:	4620      	mov	r0, r4
 80093f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f4:	3a30      	subs	r2, #48	; 0x30
 80093f6:	2a09      	cmp	r2, #9
 80093f8:	d903      	bls.n	8009402 <_vfiprintf_r+0x1ee>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0c5      	beq.n	800938a <_vfiprintf_r+0x176>
 80093fe:	9105      	str	r1, [sp, #20]
 8009400:	e7c3      	b.n	800938a <_vfiprintf_r+0x176>
 8009402:	fb0c 2101 	mla	r1, ip, r1, r2
 8009406:	4604      	mov	r4, r0
 8009408:	2301      	movs	r3, #1
 800940a:	e7f0      	b.n	80093ee <_vfiprintf_r+0x1da>
 800940c:	ab03      	add	r3, sp, #12
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	462a      	mov	r2, r5
 8009412:	4b16      	ldr	r3, [pc, #88]	; (800946c <_vfiprintf_r+0x258>)
 8009414:	a904      	add	r1, sp, #16
 8009416:	4630      	mov	r0, r6
 8009418:	f7fc f884 	bl	8005524 <_printf_float>
 800941c:	4607      	mov	r7, r0
 800941e:	1c78      	adds	r0, r7, #1
 8009420:	d1d6      	bne.n	80093d0 <_vfiprintf_r+0x1bc>
 8009422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009424:	07d9      	lsls	r1, r3, #31
 8009426:	d405      	bmi.n	8009434 <_vfiprintf_r+0x220>
 8009428:	89ab      	ldrh	r3, [r5, #12]
 800942a:	059a      	lsls	r2, r3, #22
 800942c:	d402      	bmi.n	8009434 <_vfiprintf_r+0x220>
 800942e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009430:	f000 faa1 	bl	8009976 <__retarget_lock_release_recursive>
 8009434:	89ab      	ldrh	r3, [r5, #12]
 8009436:	065b      	lsls	r3, r3, #25
 8009438:	f53f af12 	bmi.w	8009260 <_vfiprintf_r+0x4c>
 800943c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943e:	e711      	b.n	8009264 <_vfiprintf_r+0x50>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <_vfiprintf_r+0x258>)
 8009448:	a904      	add	r1, sp, #16
 800944a:	4630      	mov	r0, r6
 800944c:	f7fc fb0e 	bl	8005a6c <_printf_i>
 8009450:	e7e4      	b.n	800941c <_vfiprintf_r+0x208>
 8009452:	bf00      	nop
 8009454:	0800a0d4 	.word	0x0800a0d4
 8009458:	0800a0f4 	.word	0x0800a0f4
 800945c:	0800a0b4 	.word	0x0800a0b4
 8009460:	0800a064 	.word	0x0800a064
 8009464:	0800a06e 	.word	0x0800a06e
 8009468:	08005525 	.word	0x08005525
 800946c:	080091ef 	.word	0x080091ef
 8009470:	0800a06a 	.word	0x0800a06a

08009474 <__swbuf_r>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	460e      	mov	r6, r1
 8009478:	4614      	mov	r4, r2
 800947a:	4605      	mov	r5, r0
 800947c:	b118      	cbz	r0, 8009486 <__swbuf_r+0x12>
 800947e:	6983      	ldr	r3, [r0, #24]
 8009480:	b90b      	cbnz	r3, 8009486 <__swbuf_r+0x12>
 8009482:	f000 f9d9 	bl	8009838 <__sinit>
 8009486:	4b21      	ldr	r3, [pc, #132]	; (800950c <__swbuf_r+0x98>)
 8009488:	429c      	cmp	r4, r3
 800948a:	d12b      	bne.n	80094e4 <__swbuf_r+0x70>
 800948c:	686c      	ldr	r4, [r5, #4]
 800948e:	69a3      	ldr	r3, [r4, #24]
 8009490:	60a3      	str	r3, [r4, #8]
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	071a      	lsls	r2, r3, #28
 8009496:	d52f      	bpl.n	80094f8 <__swbuf_r+0x84>
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	b36b      	cbz	r3, 80094f8 <__swbuf_r+0x84>
 800949c:	6923      	ldr	r3, [r4, #16]
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	1ac0      	subs	r0, r0, r3
 80094a2:	6963      	ldr	r3, [r4, #20]
 80094a4:	b2f6      	uxtb	r6, r6
 80094a6:	4283      	cmp	r3, r0
 80094a8:	4637      	mov	r7, r6
 80094aa:	dc04      	bgt.n	80094b6 <__swbuf_r+0x42>
 80094ac:	4621      	mov	r1, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 f92e 	bl	8009710 <_fflush_r>
 80094b4:	bb30      	cbnz	r0, 8009504 <__swbuf_r+0x90>
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	60a3      	str	r3, [r4, #8]
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	6022      	str	r2, [r4, #0]
 80094c2:	701e      	strb	r6, [r3, #0]
 80094c4:	6963      	ldr	r3, [r4, #20]
 80094c6:	3001      	adds	r0, #1
 80094c8:	4283      	cmp	r3, r0
 80094ca:	d004      	beq.n	80094d6 <__swbuf_r+0x62>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	07db      	lsls	r3, r3, #31
 80094d0:	d506      	bpl.n	80094e0 <__swbuf_r+0x6c>
 80094d2:	2e0a      	cmp	r6, #10
 80094d4:	d104      	bne.n	80094e0 <__swbuf_r+0x6c>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f919 	bl	8009710 <_fflush_r>
 80094de:	b988      	cbnz	r0, 8009504 <__swbuf_r+0x90>
 80094e0:	4638      	mov	r0, r7
 80094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e4:	4b0a      	ldr	r3, [pc, #40]	; (8009510 <__swbuf_r+0x9c>)
 80094e6:	429c      	cmp	r4, r3
 80094e8:	d101      	bne.n	80094ee <__swbuf_r+0x7a>
 80094ea:	68ac      	ldr	r4, [r5, #8]
 80094ec:	e7cf      	b.n	800948e <__swbuf_r+0x1a>
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <__swbuf_r+0xa0>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	bf08      	it	eq
 80094f4:	68ec      	ldreq	r4, [r5, #12]
 80094f6:	e7ca      	b.n	800948e <__swbuf_r+0x1a>
 80094f8:	4621      	mov	r1, r4
 80094fa:	4628      	mov	r0, r5
 80094fc:	f000 f80c 	bl	8009518 <__swsetup_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	d0cb      	beq.n	800949c <__swbuf_r+0x28>
 8009504:	f04f 37ff 	mov.w	r7, #4294967295
 8009508:	e7ea      	b.n	80094e0 <__swbuf_r+0x6c>
 800950a:	bf00      	nop
 800950c:	0800a0d4 	.word	0x0800a0d4
 8009510:	0800a0f4 	.word	0x0800a0f4
 8009514:	0800a0b4 	.word	0x0800a0b4

08009518 <__swsetup_r>:
 8009518:	4b32      	ldr	r3, [pc, #200]	; (80095e4 <__swsetup_r+0xcc>)
 800951a:	b570      	push	{r4, r5, r6, lr}
 800951c:	681d      	ldr	r5, [r3, #0]
 800951e:	4606      	mov	r6, r0
 8009520:	460c      	mov	r4, r1
 8009522:	b125      	cbz	r5, 800952e <__swsetup_r+0x16>
 8009524:	69ab      	ldr	r3, [r5, #24]
 8009526:	b913      	cbnz	r3, 800952e <__swsetup_r+0x16>
 8009528:	4628      	mov	r0, r5
 800952a:	f000 f985 	bl	8009838 <__sinit>
 800952e:	4b2e      	ldr	r3, [pc, #184]	; (80095e8 <__swsetup_r+0xd0>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d10f      	bne.n	8009554 <__swsetup_r+0x3c>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800953c:	0719      	lsls	r1, r3, #28
 800953e:	d42c      	bmi.n	800959a <__swsetup_r+0x82>
 8009540:	06dd      	lsls	r5, r3, #27
 8009542:	d411      	bmi.n	8009568 <__swsetup_r+0x50>
 8009544:	2309      	movs	r3, #9
 8009546:	6033      	str	r3, [r6, #0]
 8009548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	e03e      	b.n	80095d2 <__swsetup_r+0xba>
 8009554:	4b25      	ldr	r3, [pc, #148]	; (80095ec <__swsetup_r+0xd4>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d101      	bne.n	800955e <__swsetup_r+0x46>
 800955a:	68ac      	ldr	r4, [r5, #8]
 800955c:	e7eb      	b.n	8009536 <__swsetup_r+0x1e>
 800955e:	4b24      	ldr	r3, [pc, #144]	; (80095f0 <__swsetup_r+0xd8>)
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	68ec      	ldreq	r4, [r5, #12]
 8009566:	e7e6      	b.n	8009536 <__swsetup_r+0x1e>
 8009568:	0758      	lsls	r0, r3, #29
 800956a:	d512      	bpl.n	8009592 <__swsetup_r+0x7a>
 800956c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800956e:	b141      	cbz	r1, 8009582 <__swsetup_r+0x6a>
 8009570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009574:	4299      	cmp	r1, r3
 8009576:	d002      	beq.n	800957e <__swsetup_r+0x66>
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff fb67 	bl	8008c4c <_free_r>
 800957e:	2300      	movs	r3, #0
 8009580:	6363      	str	r3, [r4, #52]	; 0x34
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	2300      	movs	r3, #0
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f043 0308 	orr.w	r3, r3, #8
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	b94b      	cbnz	r3, 80095b2 <__swsetup_r+0x9a>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a8:	d003      	beq.n	80095b2 <__swsetup_r+0x9a>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4630      	mov	r0, r6
 80095ae:	f000 fa07 	bl	80099c0 <__smakebuf_r>
 80095b2:	89a0      	ldrh	r0, [r4, #12]
 80095b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095b8:	f010 0301 	ands.w	r3, r0, #1
 80095bc:	d00a      	beq.n	80095d4 <__swsetup_r+0xbc>
 80095be:	2300      	movs	r3, #0
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	6963      	ldr	r3, [r4, #20]
 80095c4:	425b      	negs	r3, r3
 80095c6:	61a3      	str	r3, [r4, #24]
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	b943      	cbnz	r3, 80095de <__swsetup_r+0xc6>
 80095cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095d0:	d1ba      	bne.n	8009548 <__swsetup_r+0x30>
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	0781      	lsls	r1, r0, #30
 80095d6:	bf58      	it	pl
 80095d8:	6963      	ldrpl	r3, [r4, #20]
 80095da:	60a3      	str	r3, [r4, #8]
 80095dc:	e7f4      	b.n	80095c8 <__swsetup_r+0xb0>
 80095de:	2000      	movs	r0, #0
 80095e0:	e7f7      	b.n	80095d2 <__swsetup_r+0xba>
 80095e2:	bf00      	nop
 80095e4:	2000000c 	.word	0x2000000c
 80095e8:	0800a0d4 	.word	0x0800a0d4
 80095ec:	0800a0f4 	.word	0x0800a0f4
 80095f0:	0800a0b4 	.word	0x0800a0b4

080095f4 <abort>:
 80095f4:	b508      	push	{r3, lr}
 80095f6:	2006      	movs	r0, #6
 80095f8:	f000 fa52 	bl	8009aa0 <raise>
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7f8 f8d3 	bl	80017a8 <_exit>
	...

08009604 <__sflush_r>:
 8009604:	898a      	ldrh	r2, [r1, #12]
 8009606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960a:	4605      	mov	r5, r0
 800960c:	0710      	lsls	r0, r2, #28
 800960e:	460c      	mov	r4, r1
 8009610:	d458      	bmi.n	80096c4 <__sflush_r+0xc0>
 8009612:	684b      	ldr	r3, [r1, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dc05      	bgt.n	8009624 <__sflush_r+0x20>
 8009618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	dc02      	bgt.n	8009624 <__sflush_r+0x20>
 800961e:	2000      	movs	r0, #0
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009626:	2e00      	cmp	r6, #0
 8009628:	d0f9      	beq.n	800961e <__sflush_r+0x1a>
 800962a:	2300      	movs	r3, #0
 800962c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009630:	682f      	ldr	r7, [r5, #0]
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	d032      	beq.n	800969c <__sflush_r+0x98>
 8009636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	075a      	lsls	r2, r3, #29
 800963c:	d505      	bpl.n	800964a <__sflush_r+0x46>
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	1ac0      	subs	r0, r0, r3
 8009642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009644:	b10b      	cbz	r3, 800964a <__sflush_r+0x46>
 8009646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009648:	1ac0      	subs	r0, r0, r3
 800964a:	2300      	movs	r3, #0
 800964c:	4602      	mov	r2, r0
 800964e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009650:	6a21      	ldr	r1, [r4, #32]
 8009652:	4628      	mov	r0, r5
 8009654:	47b0      	blx	r6
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	d106      	bne.n	800966a <__sflush_r+0x66>
 800965c:	6829      	ldr	r1, [r5, #0]
 800965e:	291d      	cmp	r1, #29
 8009660:	d82c      	bhi.n	80096bc <__sflush_r+0xb8>
 8009662:	4a2a      	ldr	r2, [pc, #168]	; (800970c <__sflush_r+0x108>)
 8009664:	40ca      	lsrs	r2, r1
 8009666:	07d6      	lsls	r6, r2, #31
 8009668:	d528      	bpl.n	80096bc <__sflush_r+0xb8>
 800966a:	2200      	movs	r2, #0
 800966c:	6062      	str	r2, [r4, #4]
 800966e:	04d9      	lsls	r1, r3, #19
 8009670:	6922      	ldr	r2, [r4, #16]
 8009672:	6022      	str	r2, [r4, #0]
 8009674:	d504      	bpl.n	8009680 <__sflush_r+0x7c>
 8009676:	1c42      	adds	r2, r0, #1
 8009678:	d101      	bne.n	800967e <__sflush_r+0x7a>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	b903      	cbnz	r3, 8009680 <__sflush_r+0x7c>
 800967e:	6560      	str	r0, [r4, #84]	; 0x54
 8009680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009682:	602f      	str	r7, [r5, #0]
 8009684:	2900      	cmp	r1, #0
 8009686:	d0ca      	beq.n	800961e <__sflush_r+0x1a>
 8009688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800968c:	4299      	cmp	r1, r3
 800968e:	d002      	beq.n	8009696 <__sflush_r+0x92>
 8009690:	4628      	mov	r0, r5
 8009692:	f7ff fadb 	bl	8008c4c <_free_r>
 8009696:	2000      	movs	r0, #0
 8009698:	6360      	str	r0, [r4, #52]	; 0x34
 800969a:	e7c1      	b.n	8009620 <__sflush_r+0x1c>
 800969c:	6a21      	ldr	r1, [r4, #32]
 800969e:	2301      	movs	r3, #1
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b0      	blx	r6
 80096a4:	1c41      	adds	r1, r0, #1
 80096a6:	d1c7      	bne.n	8009638 <__sflush_r+0x34>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0c4      	beq.n	8009638 <__sflush_r+0x34>
 80096ae:	2b1d      	cmp	r3, #29
 80096b0:	d001      	beq.n	80096b6 <__sflush_r+0xb2>
 80096b2:	2b16      	cmp	r3, #22
 80096b4:	d101      	bne.n	80096ba <__sflush_r+0xb6>
 80096b6:	602f      	str	r7, [r5, #0]
 80096b8:	e7b1      	b.n	800961e <__sflush_r+0x1a>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	e7ad      	b.n	8009620 <__sflush_r+0x1c>
 80096c4:	690f      	ldr	r7, [r1, #16]
 80096c6:	2f00      	cmp	r7, #0
 80096c8:	d0a9      	beq.n	800961e <__sflush_r+0x1a>
 80096ca:	0793      	lsls	r3, r2, #30
 80096cc:	680e      	ldr	r6, [r1, #0]
 80096ce:	bf08      	it	eq
 80096d0:	694b      	ldreq	r3, [r1, #20]
 80096d2:	600f      	str	r7, [r1, #0]
 80096d4:	bf18      	it	ne
 80096d6:	2300      	movne	r3, #0
 80096d8:	eba6 0807 	sub.w	r8, r6, r7
 80096dc:	608b      	str	r3, [r1, #8]
 80096de:	f1b8 0f00 	cmp.w	r8, #0
 80096e2:	dd9c      	ble.n	800961e <__sflush_r+0x1a>
 80096e4:	6a21      	ldr	r1, [r4, #32]
 80096e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096e8:	4643      	mov	r3, r8
 80096ea:	463a      	mov	r2, r7
 80096ec:	4628      	mov	r0, r5
 80096ee:	47b0      	blx	r6
 80096f0:	2800      	cmp	r0, #0
 80096f2:	dc06      	bgt.n	8009702 <__sflush_r+0xfe>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	e78e      	b.n	8009620 <__sflush_r+0x1c>
 8009702:	4407      	add	r7, r0
 8009704:	eba8 0800 	sub.w	r8, r8, r0
 8009708:	e7e9      	b.n	80096de <__sflush_r+0xda>
 800970a:	bf00      	nop
 800970c:	20400001 	.word	0x20400001

08009710 <_fflush_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	690b      	ldr	r3, [r1, #16]
 8009714:	4605      	mov	r5, r0
 8009716:	460c      	mov	r4, r1
 8009718:	b913      	cbnz	r3, 8009720 <_fflush_r+0x10>
 800971a:	2500      	movs	r5, #0
 800971c:	4628      	mov	r0, r5
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	b118      	cbz	r0, 800972a <_fflush_r+0x1a>
 8009722:	6983      	ldr	r3, [r0, #24]
 8009724:	b90b      	cbnz	r3, 800972a <_fflush_r+0x1a>
 8009726:	f000 f887 	bl	8009838 <__sinit>
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <_fflush_r+0x6c>)
 800972c:	429c      	cmp	r4, r3
 800972e:	d11b      	bne.n	8009768 <_fflush_r+0x58>
 8009730:	686c      	ldr	r4, [r5, #4]
 8009732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0ef      	beq.n	800971a <_fflush_r+0xa>
 800973a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800973c:	07d0      	lsls	r0, r2, #31
 800973e:	d404      	bmi.n	800974a <_fflush_r+0x3a>
 8009740:	0599      	lsls	r1, r3, #22
 8009742:	d402      	bmi.n	800974a <_fflush_r+0x3a>
 8009744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009746:	f000 f915 	bl	8009974 <__retarget_lock_acquire_recursive>
 800974a:	4628      	mov	r0, r5
 800974c:	4621      	mov	r1, r4
 800974e:	f7ff ff59 	bl	8009604 <__sflush_r>
 8009752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009754:	07da      	lsls	r2, r3, #31
 8009756:	4605      	mov	r5, r0
 8009758:	d4e0      	bmi.n	800971c <_fflush_r+0xc>
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	059b      	lsls	r3, r3, #22
 800975e:	d4dd      	bmi.n	800971c <_fflush_r+0xc>
 8009760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009762:	f000 f908 	bl	8009976 <__retarget_lock_release_recursive>
 8009766:	e7d9      	b.n	800971c <_fflush_r+0xc>
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <_fflush_r+0x70>)
 800976a:	429c      	cmp	r4, r3
 800976c:	d101      	bne.n	8009772 <_fflush_r+0x62>
 800976e:	68ac      	ldr	r4, [r5, #8]
 8009770:	e7df      	b.n	8009732 <_fflush_r+0x22>
 8009772:	4b04      	ldr	r3, [pc, #16]	; (8009784 <_fflush_r+0x74>)
 8009774:	429c      	cmp	r4, r3
 8009776:	bf08      	it	eq
 8009778:	68ec      	ldreq	r4, [r5, #12]
 800977a:	e7da      	b.n	8009732 <_fflush_r+0x22>
 800977c:	0800a0d4 	.word	0x0800a0d4
 8009780:	0800a0f4 	.word	0x0800a0f4
 8009784:	0800a0b4 	.word	0x0800a0b4

08009788 <std>:
 8009788:	2300      	movs	r3, #0
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	e9c0 3300 	strd	r3, r3, [r0]
 8009792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009796:	6083      	str	r3, [r0, #8]
 8009798:	8181      	strh	r1, [r0, #12]
 800979a:	6643      	str	r3, [r0, #100]	; 0x64
 800979c:	81c2      	strh	r2, [r0, #14]
 800979e:	6183      	str	r3, [r0, #24]
 80097a0:	4619      	mov	r1, r3
 80097a2:	2208      	movs	r2, #8
 80097a4:	305c      	adds	r0, #92	; 0x5c
 80097a6:	f7fb fe15 	bl	80053d4 <memset>
 80097aa:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <std+0x38>)
 80097ac:	6263      	str	r3, [r4, #36]	; 0x24
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <std+0x3c>)
 80097b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <std+0x40>)
 80097b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x44>)
 80097b8:	6224      	str	r4, [r4, #32]
 80097ba:	6323      	str	r3, [r4, #48]	; 0x30
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	bf00      	nop
 80097c0:	08009ad9 	.word	0x08009ad9
 80097c4:	08009afb 	.word	0x08009afb
 80097c8:	08009b33 	.word	0x08009b33
 80097cc:	08009b57 	.word	0x08009b57

080097d0 <_cleanup_r>:
 80097d0:	4901      	ldr	r1, [pc, #4]	; (80097d8 <_cleanup_r+0x8>)
 80097d2:	f000 b8af 	b.w	8009934 <_fwalk_reent>
 80097d6:	bf00      	nop
 80097d8:	08009711 	.word	0x08009711

080097dc <__sfmoreglue>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	1e4a      	subs	r2, r1, #1
 80097e0:	2568      	movs	r5, #104	; 0x68
 80097e2:	4355      	muls	r5, r2
 80097e4:	460e      	mov	r6, r1
 80097e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097ea:	f7ff fa7f 	bl	8008cec <_malloc_r>
 80097ee:	4604      	mov	r4, r0
 80097f0:	b140      	cbz	r0, 8009804 <__sfmoreglue+0x28>
 80097f2:	2100      	movs	r1, #0
 80097f4:	e9c0 1600 	strd	r1, r6, [r0]
 80097f8:	300c      	adds	r0, #12
 80097fa:	60a0      	str	r0, [r4, #8]
 80097fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009800:	f7fb fde8 	bl	80053d4 <memset>
 8009804:	4620      	mov	r0, r4
 8009806:	bd70      	pop	{r4, r5, r6, pc}

08009808 <__sfp_lock_acquire>:
 8009808:	4801      	ldr	r0, [pc, #4]	; (8009810 <__sfp_lock_acquire+0x8>)
 800980a:	f000 b8b3 	b.w	8009974 <__retarget_lock_acquire_recursive>
 800980e:	bf00      	nop
 8009810:	20000300 	.word	0x20000300

08009814 <__sfp_lock_release>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sfp_lock_release+0x8>)
 8009816:	f000 b8ae 	b.w	8009976 <__retarget_lock_release_recursive>
 800981a:	bf00      	nop
 800981c:	20000300 	.word	0x20000300

08009820 <__sinit_lock_acquire>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__sinit_lock_acquire+0x8>)
 8009822:	f000 b8a7 	b.w	8009974 <__retarget_lock_acquire_recursive>
 8009826:	bf00      	nop
 8009828:	200002fb 	.word	0x200002fb

0800982c <__sinit_lock_release>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sinit_lock_release+0x8>)
 800982e:	f000 b8a2 	b.w	8009976 <__retarget_lock_release_recursive>
 8009832:	bf00      	nop
 8009834:	200002fb 	.word	0x200002fb

08009838 <__sinit>:
 8009838:	b510      	push	{r4, lr}
 800983a:	4604      	mov	r4, r0
 800983c:	f7ff fff0 	bl	8009820 <__sinit_lock_acquire>
 8009840:	69a3      	ldr	r3, [r4, #24]
 8009842:	b11b      	cbz	r3, 800984c <__sinit+0x14>
 8009844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009848:	f7ff bff0 	b.w	800982c <__sinit_lock_release>
 800984c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009850:	6523      	str	r3, [r4, #80]	; 0x50
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <__sinit+0x68>)
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <__sinit+0x6c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	62a2      	str	r2, [r4, #40]	; 0x28
 800985a:	42a3      	cmp	r3, r4
 800985c:	bf04      	itt	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	61a3      	streq	r3, [r4, #24]
 8009862:	4620      	mov	r0, r4
 8009864:	f000 f820 	bl	80098a8 <__sfp>
 8009868:	6060      	str	r0, [r4, #4]
 800986a:	4620      	mov	r0, r4
 800986c:	f000 f81c 	bl	80098a8 <__sfp>
 8009870:	60a0      	str	r0, [r4, #8]
 8009872:	4620      	mov	r0, r4
 8009874:	f000 f818 	bl	80098a8 <__sfp>
 8009878:	2200      	movs	r2, #0
 800987a:	60e0      	str	r0, [r4, #12]
 800987c:	2104      	movs	r1, #4
 800987e:	6860      	ldr	r0, [r4, #4]
 8009880:	f7ff ff82 	bl	8009788 <std>
 8009884:	68a0      	ldr	r0, [r4, #8]
 8009886:	2201      	movs	r2, #1
 8009888:	2109      	movs	r1, #9
 800988a:	f7ff ff7d 	bl	8009788 <std>
 800988e:	68e0      	ldr	r0, [r4, #12]
 8009890:	2202      	movs	r2, #2
 8009892:	2112      	movs	r1, #18
 8009894:	f7ff ff78 	bl	8009788 <std>
 8009898:	2301      	movs	r3, #1
 800989a:	61a3      	str	r3, [r4, #24]
 800989c:	e7d2      	b.n	8009844 <__sinit+0xc>
 800989e:	bf00      	nop
 80098a0:	08009c60 	.word	0x08009c60
 80098a4:	080097d1 	.word	0x080097d1

080098a8 <__sfp>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	4607      	mov	r7, r0
 80098ac:	f7ff ffac 	bl	8009808 <__sfp_lock_acquire>
 80098b0:	4b1e      	ldr	r3, [pc, #120]	; (800992c <__sfp+0x84>)
 80098b2:	681e      	ldr	r6, [r3, #0]
 80098b4:	69b3      	ldr	r3, [r6, #24]
 80098b6:	b913      	cbnz	r3, 80098be <__sfp+0x16>
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff ffbd 	bl	8009838 <__sinit>
 80098be:	3648      	adds	r6, #72	; 0x48
 80098c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	d503      	bpl.n	80098d0 <__sfp+0x28>
 80098c8:	6833      	ldr	r3, [r6, #0]
 80098ca:	b30b      	cbz	r3, 8009910 <__sfp+0x68>
 80098cc:	6836      	ldr	r6, [r6, #0]
 80098ce:	e7f7      	b.n	80098c0 <__sfp+0x18>
 80098d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098d4:	b9d5      	cbnz	r5, 800990c <__sfp+0x64>
 80098d6:	4b16      	ldr	r3, [pc, #88]	; (8009930 <__sfp+0x88>)
 80098d8:	60e3      	str	r3, [r4, #12]
 80098da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098de:	6665      	str	r5, [r4, #100]	; 0x64
 80098e0:	f000 f847 	bl	8009972 <__retarget_lock_init_recursive>
 80098e4:	f7ff ff96 	bl	8009814 <__sfp_lock_release>
 80098e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098f0:	6025      	str	r5, [r4, #0]
 80098f2:	61a5      	str	r5, [r4, #24]
 80098f4:	2208      	movs	r2, #8
 80098f6:	4629      	mov	r1, r5
 80098f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098fc:	f7fb fd6a 	bl	80053d4 <memset>
 8009900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009908:	4620      	mov	r0, r4
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	3468      	adds	r4, #104	; 0x68
 800990e:	e7d9      	b.n	80098c4 <__sfp+0x1c>
 8009910:	2104      	movs	r1, #4
 8009912:	4638      	mov	r0, r7
 8009914:	f7ff ff62 	bl	80097dc <__sfmoreglue>
 8009918:	4604      	mov	r4, r0
 800991a:	6030      	str	r0, [r6, #0]
 800991c:	2800      	cmp	r0, #0
 800991e:	d1d5      	bne.n	80098cc <__sfp+0x24>
 8009920:	f7ff ff78 	bl	8009814 <__sfp_lock_release>
 8009924:	230c      	movs	r3, #12
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	e7ee      	b.n	8009908 <__sfp+0x60>
 800992a:	bf00      	nop
 800992c:	08009c60 	.word	0x08009c60
 8009930:	ffff0001 	.word	0xffff0001

08009934 <_fwalk_reent>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4606      	mov	r6, r0
 800993a:	4688      	mov	r8, r1
 800993c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009940:	2700      	movs	r7, #0
 8009942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009946:	f1b9 0901 	subs.w	r9, r9, #1
 800994a:	d505      	bpl.n	8009958 <_fwalk_reent+0x24>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	2c00      	cmp	r4, #0
 8009950:	d1f7      	bne.n	8009942 <_fwalk_reent+0xe>
 8009952:	4638      	mov	r0, r7
 8009954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009958:	89ab      	ldrh	r3, [r5, #12]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d907      	bls.n	800996e <_fwalk_reent+0x3a>
 800995e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009962:	3301      	adds	r3, #1
 8009964:	d003      	beq.n	800996e <_fwalk_reent+0x3a>
 8009966:	4629      	mov	r1, r5
 8009968:	4630      	mov	r0, r6
 800996a:	47c0      	blx	r8
 800996c:	4307      	orrs	r7, r0
 800996e:	3568      	adds	r5, #104	; 0x68
 8009970:	e7e9      	b.n	8009946 <_fwalk_reent+0x12>

08009972 <__retarget_lock_init_recursive>:
 8009972:	4770      	bx	lr

08009974 <__retarget_lock_acquire_recursive>:
 8009974:	4770      	bx	lr

08009976 <__retarget_lock_release_recursive>:
 8009976:	4770      	bx	lr

08009978 <__swhatbuf_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	2900      	cmp	r1, #0
 8009982:	b096      	sub	sp, #88	; 0x58
 8009984:	4614      	mov	r4, r2
 8009986:	461d      	mov	r5, r3
 8009988:	da07      	bge.n	800999a <__swhatbuf_r+0x22>
 800998a:	2300      	movs	r3, #0
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	89b3      	ldrh	r3, [r6, #12]
 8009990:	061a      	lsls	r2, r3, #24
 8009992:	d410      	bmi.n	80099b6 <__swhatbuf_r+0x3e>
 8009994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009998:	e00e      	b.n	80099b8 <__swhatbuf_r+0x40>
 800999a:	466a      	mov	r2, sp
 800999c:	f000 f902 	bl	8009ba4 <_fstat_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dbf2      	blt.n	800998a <__swhatbuf_r+0x12>
 80099a4:	9a01      	ldr	r2, [sp, #4]
 80099a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ae:	425a      	negs	r2, r3
 80099b0:	415a      	adcs	r2, r3
 80099b2:	602a      	str	r2, [r5, #0]
 80099b4:	e7ee      	b.n	8009994 <__swhatbuf_r+0x1c>
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	2000      	movs	r0, #0
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	b016      	add	sp, #88	; 0x58
 80099be:	bd70      	pop	{r4, r5, r6, pc}

080099c0 <__smakebuf_r>:
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c4:	079d      	lsls	r5, r3, #30
 80099c6:	4606      	mov	r6, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	d507      	bpl.n	80099dc <__smakebuf_r+0x1c>
 80099cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	6123      	str	r3, [r4, #16]
 80099d4:	2301      	movs	r3, #1
 80099d6:	6163      	str	r3, [r4, #20]
 80099d8:	b002      	add	sp, #8
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	ab01      	add	r3, sp, #4
 80099de:	466a      	mov	r2, sp
 80099e0:	f7ff ffca 	bl	8009978 <__swhatbuf_r>
 80099e4:	9900      	ldr	r1, [sp, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff f97f 	bl	8008cec <_malloc_r>
 80099ee:	b948      	cbnz	r0, 8009a04 <__smakebuf_r+0x44>
 80099f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d4ef      	bmi.n	80099d8 <__smakebuf_r+0x18>
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	f043 0302 	orr.w	r3, r3, #2
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7e3      	b.n	80099cc <__smakebuf_r+0xc>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <__smakebuf_r+0x7c>)
 8009a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	6020      	str	r0, [r4, #0]
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a10:	81a3      	strh	r3, [r4, #12]
 8009a12:	9b00      	ldr	r3, [sp, #0]
 8009a14:	6163      	str	r3, [r4, #20]
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	6120      	str	r0, [r4, #16]
 8009a1a:	b15b      	cbz	r3, 8009a34 <__smakebuf_r+0x74>
 8009a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 f8d1 	bl	8009bc8 <_isatty_r>
 8009a26:	b128      	cbz	r0, 8009a34 <__smakebuf_r+0x74>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	89a0      	ldrh	r0, [r4, #12]
 8009a36:	4305      	orrs	r5, r0
 8009a38:	81a5      	strh	r5, [r4, #12]
 8009a3a:	e7cd      	b.n	80099d8 <__smakebuf_r+0x18>
 8009a3c:	080097d1 	.word	0x080097d1

08009a40 <_malloc_usable_size_r>:
 8009a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a44:	1f18      	subs	r0, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfbc      	itt	lt
 8009a4a:	580b      	ldrlt	r3, [r1, r0]
 8009a4c:	18c0      	addlt	r0, r0, r3
 8009a4e:	4770      	bx	lr

08009a50 <_raise_r>:
 8009a50:	291f      	cmp	r1, #31
 8009a52:	b538      	push	{r3, r4, r5, lr}
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	d904      	bls.n	8009a64 <_raise_r+0x14>
 8009a5a:	2316      	movs	r3, #22
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a66:	b112      	cbz	r2, 8009a6e <_raise_r+0x1e>
 8009a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a6c:	b94b      	cbnz	r3, 8009a82 <_raise_r+0x32>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 f830 	bl	8009ad4 <_getpid_r>
 8009a74:	462a      	mov	r2, r5
 8009a76:	4601      	mov	r1, r0
 8009a78:	4620      	mov	r0, r4
 8009a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a7e:	f000 b817 	b.w	8009ab0 <_kill_r>
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d00a      	beq.n	8009a9c <_raise_r+0x4c>
 8009a86:	1c59      	adds	r1, r3, #1
 8009a88:	d103      	bne.n	8009a92 <_raise_r+0x42>
 8009a8a:	2316      	movs	r3, #22
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	e7e7      	b.n	8009a62 <_raise_r+0x12>
 8009a92:	2400      	movs	r4, #0
 8009a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a98:	4628      	mov	r0, r5
 8009a9a:	4798      	blx	r3
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e7e0      	b.n	8009a62 <_raise_r+0x12>

08009aa0 <raise>:
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <raise+0xc>)
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f7ff bfd3 	b.w	8009a50 <_raise_r>
 8009aaa:	bf00      	nop
 8009aac:	2000000c 	.word	0x2000000c

08009ab0 <_kill_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_kill_r+0x20>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	4611      	mov	r1, r2
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	f7f7 fe63 	bl	8001788 <_kill>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	d102      	bne.n	8009acc <_kill_r+0x1c>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b103      	cbz	r3, 8009acc <_kill_r+0x1c>
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	bf00      	nop
 8009ad0:	200002f4 	.word	0x200002f4

08009ad4 <_getpid_r>:
 8009ad4:	f7f7 be50 	b.w	8001778 <_getpid>

08009ad8 <__sread>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	460c      	mov	r4, r1
 8009adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae0:	f000 f894 	bl	8009c0c <_read_r>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	bfab      	itete	ge
 8009ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009aea:	89a3      	ldrhlt	r3, [r4, #12]
 8009aec:	181b      	addge	r3, r3, r0
 8009aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009af2:	bfac      	ite	ge
 8009af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009af6:	81a3      	strhlt	r3, [r4, #12]
 8009af8:	bd10      	pop	{r4, pc}

08009afa <__swrite>:
 8009afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afe:	461f      	mov	r7, r3
 8009b00:	898b      	ldrh	r3, [r1, #12]
 8009b02:	05db      	lsls	r3, r3, #23
 8009b04:	4605      	mov	r5, r0
 8009b06:	460c      	mov	r4, r1
 8009b08:	4616      	mov	r6, r2
 8009b0a:	d505      	bpl.n	8009b18 <__swrite+0x1e>
 8009b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b10:	2302      	movs	r3, #2
 8009b12:	2200      	movs	r2, #0
 8009b14:	f000 f868 	bl	8009be8 <_lseek_r>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	4632      	mov	r2, r6
 8009b26:	463b      	mov	r3, r7
 8009b28:	4628      	mov	r0, r5
 8009b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2e:	f000 b817 	b.w	8009b60 <_write_r>

08009b32 <__sseek>:
 8009b32:	b510      	push	{r4, lr}
 8009b34:	460c      	mov	r4, r1
 8009b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b3a:	f000 f855 	bl	8009be8 <_lseek_r>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	bf15      	itete	ne
 8009b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b4e:	81a3      	strheq	r3, [r4, #12]
 8009b50:	bf18      	it	ne
 8009b52:	81a3      	strhne	r3, [r4, #12]
 8009b54:	bd10      	pop	{r4, pc}

08009b56 <__sclose>:
 8009b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5a:	f000 b813 	b.w	8009b84 <_close_r>
	...

08009b60 <_write_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	; (8009b80 <_write_r+0x20>)
 8009b64:	4604      	mov	r4, r0
 8009b66:	4608      	mov	r0, r1
 8009b68:	4611      	mov	r1, r2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	602a      	str	r2, [r5, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f7f7 fe41 	bl	80017f6 <_write>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d102      	bne.n	8009b7e <_write_r+0x1e>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <_write_r+0x1e>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	200002f4 	.word	0x200002f4

08009b84 <_close_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d06      	ldr	r5, [pc, #24]	; (8009ba0 <_close_r+0x1c>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	f7f7 fe4d 	bl	800182e <_close>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_close_r+0x1a>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_close_r+0x1a>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	200002f4 	.word	0x200002f4

08009ba4 <_fstat_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_fstat_r+0x20>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	4611      	mov	r1, r2
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	f7f7 fe48 	bl	8001846 <_fstat>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d102      	bne.n	8009bc0 <_fstat_r+0x1c>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	b103      	cbz	r3, 8009bc0 <_fstat_r+0x1c>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
 8009bc2:	bf00      	nop
 8009bc4:	200002f4 	.word	0x200002f4

08009bc8 <_isatty_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d06      	ldr	r5, [pc, #24]	; (8009be4 <_isatty_r+0x1c>)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	f7f7 fe47 	bl	8001866 <_isatty>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_isatty_r+0x1a>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_isatty_r+0x1a>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	200002f4 	.word	0x200002f4

08009be8 <_lseek_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	; (8009c08 <_lseek_r+0x20>)
 8009bec:	4604      	mov	r4, r0
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7f7 fe40 	bl	800187c <_lseek>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_lseek_r+0x1e>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_lseek_r+0x1e>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200002f4 	.word	0x200002f4

08009c0c <_read_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	; (8009c2c <_read_r+0x20>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7f7 fdce 	bl	80017bc <_read>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_read_r+0x1e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_read_r+0x1e>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200002f4 	.word	0x200002f4

08009c30 <_init>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr

08009c3c <_fini>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr
