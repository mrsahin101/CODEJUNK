
003_I2C_COMMUNUCATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080079c8  080079c8  000179c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000124  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfb1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd5  00000000  00000000  0002e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  000308d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229b2  00000000  00000000  00031298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2eb  00000000  00000000  00053c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2dfe  00000000  00000000  00060f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00133d33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf4  00000000  00000000  00133d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079ac 	.word	0x080079ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080079ac 	.word	0x080079ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f000 fbe3 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f8bb 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f97b 	bl	80011a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb2:	f000 f921 	bl	80010f8 <MX_I2C1_Init>
#ifdef SLAVE_BOARD
  MX_ADC1_Init();
#endif

  MX_USART2_UART_Init();
 8000eb6:	f000 f94d 	bl	8001154 <MX_USART2_UART_Init>

#else //Master board

  while(1)
  {
	  i2cBuf[0] = WHO_AM_I_REGISTER;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	713b      	strb	r3, [r7, #4]
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, I2C_SLAVE_ADDR, i2cBuf,
 8000ebe:	1d3a      	adds	r2, r7, #4
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2133      	movs	r1, #51	; 0x33
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <main+0x170>)
 8000eca:	f001 f889 	bl	8001fe0 <HAL_I2C_Master_Seq_Transmit_IT>
	                                          1, I2C_FIRST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000ece:	bf00      	nop
 8000ed0:	484f      	ldr	r0, [pc, #316]	; (8001010 <main+0x170>)
 8000ed2:	f001 fcbb 	bl	800284c <HAL_I2C_GetState>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b20      	cmp	r3, #32
 8000eda:	d1f9      	bne.n	8000ed0 <main+0x30>

	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, I2C_SLAVE_ADDR, i2cBuf,
 8000edc:	1d3a      	adds	r2, r7, #4
 8000ede:	2320      	movs	r3, #32
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2133      	movs	r1, #51	; 0x33
 8000ee6:	484a      	ldr	r0, [pc, #296]	; (8001010 <main+0x170>)
 8000ee8:	f001 f940 	bl	800216c <HAL_I2C_Master_Seq_Receive_IT>
	                                         1, I2C_LAST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000eec:	bf00      	nop
 8000eee:	4848      	ldr	r0, [pc, #288]	; (8001010 <main+0x170>)
 8000ef0:	f001 fcac 	bl	800284c <HAL_I2C_GetState>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b20      	cmp	r3, #32
 8000ef8:	d1f9      	bne.n	8000eee <main+0x4e>

	    sprintf(uartBuf, "WHO AM I: %x\r\n", i2cBuf[0]);
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4944      	ldr	r1, [pc, #272]	; (8001014 <main+0x174>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fb27 	bl	8005558 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*) uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f95e 	bl	80001d0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f107 0108 	add.w	r1, r7, #8
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	483d      	ldr	r0, [pc, #244]	; (8001018 <main+0x178>)
 8000f22:	f003 fbb4 	bl	800468e <HAL_UART_Transmit>

	    i2cBuf[0] = TEMP_OUT_INT_REGISTER;
 8000f26:	2300      	movs	r3, #0
 8000f28:	713b      	strb	r3, [r7, #4]
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, I2C_SLAVE_ADDR, i2cBuf,
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2133      	movs	r1, #51	; 0x33
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <main+0x170>)
 8000f36:	f001 f853 	bl	8001fe0 <HAL_I2C_Master_Seq_Transmit_IT>
	                                          1, I2C_FIRST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000f3a:	bf00      	nop
 8000f3c:	4834      	ldr	r0, [pc, #208]	; (8001010 <main+0x170>)
 8000f3e:	f001 fc85 	bl	800284c <HAL_I2C_GetState>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d1f9      	bne.n	8000f3c <main+0x9c>

	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, I2C_SLAVE_ADDR, (uint8_t*)&t_int,
 8000f48:	1cba      	adds	r2, r7, #2
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	2133      	movs	r1, #51	; 0x33
 8000f52:	482f      	ldr	r0, [pc, #188]	; (8001010 <main+0x170>)
 8000f54:	f001 f90a 	bl	800216c <HAL_I2C_Master_Seq_Receive_IT>
	                                         1, I2C_LAST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000f58:	bf00      	nop
 8000f5a:	482d      	ldr	r0, [pc, #180]	; (8001010 <main+0x170>)
 8000f5c:	f001 fc76 	bl	800284c <HAL_I2C_GetState>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d1f9      	bne.n	8000f5a <main+0xba>

	    i2cBuf[0] = TEMP_OUT_FRAC_REGISTER;
 8000f66:	2301      	movs	r3, #1
 8000f68:	713b      	strb	r3, [r7, #4]
	    HAL_I2C_Master_Sequential_Transmit_IT(&hi2c1, I2C_SLAVE_ADDR, i2cBuf,
 8000f6a:	1d3a      	adds	r2, r7, #4
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	2133      	movs	r1, #51	; 0x33
 8000f74:	4826      	ldr	r0, [pc, #152]	; (8001010 <main+0x170>)
 8000f76:	f001 f833 	bl	8001fe0 <HAL_I2C_Master_Seq_Transmit_IT>
	                                          1, I2C_FIRST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000f7a:	bf00      	nop
 8000f7c:	4824      	ldr	r0, [pc, #144]	; (8001010 <main+0x170>)
 8000f7e:	f001 fc65 	bl	800284c <HAL_I2C_GetState>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b20      	cmp	r3, #32
 8000f86:	d1f9      	bne.n	8000f7c <main+0xdc>

	    HAL_I2C_Master_Sequential_Receive_IT(&hi2c1, I2C_SLAVE_ADDR, (uint8_t*)&t_frac,
 8000f88:	1cfa      	adds	r2, r7, #3
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2133      	movs	r1, #51	; 0x33
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <main+0x170>)
 8000f94:	f001 f8ea 	bl	800216c <HAL_I2C_Master_Seq_Receive_IT>
	                                         1, I2C_LAST_FRAME);
	    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000f98:	bf00      	nop
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <main+0x170>)
 8000f9c:	f001 fc56 	bl	800284c <HAL_I2C_GetState>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b20      	cmp	r3, #32
 8000fa4:	d1f9      	bne.n	8000f9a <main+0xfa>

	    ftemp = ((float)t_frac)/100.0;
 8000fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800101c <main+0x17c>
 8000fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fba:	edc7 7a07 	vstr	s15, [r7, #28]
	    ftemp += (float)t_int;
 8000fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fca:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd2:	edc7 7a07 	vstr	s15, [r7, #28]

	    sprintf(uartBuf, "Temperature: %.2f\r\n", ftemp);
 8000fd6:	69f8      	ldr	r0, [r7, #28]
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	f107 0008 	add.w	r0, r7, #8
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <main+0x180>)
 8000fe6:	f004 fab7 	bl	8005558 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*) uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8ee 	bl	80001d0 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f107 0108 	add.w	r1, r7, #8
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <main+0x178>)
 8001002:	f003 fb44 	bl	800468e <HAL_UART_Transmit>
	    HAL_Delay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f000 fba3 	bl	8001754 <HAL_Delay>
	  i2cBuf[0] = WHO_AM_I_REGISTER;
 800100e:	e754      	b.n	8000eba <main+0x1a>
 8001010:	20000204 	.word	0x20000204
 8001014:	080079c8 	.word	0x080079c8
 8001018:	200002a4 	.word	0x200002a4
 800101c:	42c80000 	.word	0x42c80000
 8001020:	080079d8 	.word	0x080079d8

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	; 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	; 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fe1e 	bl	8004c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <SystemClock_Config+0xcc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <SystemClock_Config+0xcc>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <SystemClock_Config+0xd0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <SystemClock_Config+0xd0>)
 800106e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001098:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fe2e 	bl	8003d0c <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010b6:	f000 f8cd 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2302      	movs	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2105      	movs	r1, #5
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 f88f 	bl	80041fc <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010e4:	f000 f8b6 	bl	8001254 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3750      	adds	r7, #80	; 0x50
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f000 fe0f 	bl	8001d58 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f888 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000204 	.word	0x20000204
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART2_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001160:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x4c>)
 800118c:	f003 fa32 	bl	80045f4 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f85d 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200002a4 	.word	0x200002a4
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_GPIO_Init+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <MX_GPIO_Init+0x68>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_GPIO_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_GPIO_Init+0x68>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <MX_GPIO_Init+0x68>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_GPIO_Init+0x68>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_GPIO_Init+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <MX_GPIO_Init+0x68>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_GPIO_Init+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
 8001220:	4613      	mov	r3, r2
 8001222:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  if(hi2c->Instance == I2C1) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_I2C_AddrCallback+0x34>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d105      	bne.n	800123a <HAL_I2C_AddrCallback+0x26>
    transferRequested = 1;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_I2C_AddrCallback+0x38>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
    transferDirection = TransferDirection;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_I2C_AddrCallback+0x3c>)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	7013      	strb	r3, [r2, #0]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	200002e8 	.word	0x200002e8
 8001250:	200002a0 	.word	0x200002a0

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129e:	2007      	movs	r0, #7
 80012a0:	f000 fb4c 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_I2C_MspInit+0xa4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d13b      	bne.n	800134a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ee:	23c0      	movs	r3, #192	; 0xc0
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f2:	2312      	movs	r3, #18
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fe:	2304      	movs	r3, #4
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <HAL_I2C_MspInit+0xac>)
 800130a:	f000 fb89 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 8001318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_I2C_MspInit+0xa8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201f      	movs	r0, #31
 8001330:	f000 fb0f 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001334:	201f      	movs	r0, #31
 8001336:	f000 fb28 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2020      	movs	r0, #32
 8001340:	f000 fb07 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001344:	2020      	movs	r0, #32
 8001346:	f000 fb20 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x8c>)
 80013d6:	f000 fb23 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f96a 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <I2C1_EV_IRQHandler+0x10>)
 800144a:	f000 ff8d 	bl	8002368 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000204 	.word	0x20000204

08001458 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <I2C1_ER_IRQHandler+0x10>)
 800145e:	f001 f8f4 	bl	800264a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000204 	.word	0x20000204

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_kill>:

int _kill(int pid, int sig)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001486:	f003 fbcb 	bl	8004c20 <__errno>
 800148a:	4603      	mov	r3, r0
 800148c:	2216      	movs	r2, #22
 800148e:	601a      	str	r2, [r3, #0]
	return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_exit>:

void _exit (int status)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe7 	bl	800147c <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ae:	e7fe      	b.n	80014ae <_exit+0x12>

080014b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
	}

return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e009      	b.n	8001510 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf1      	blt.n	80014fc <_write+0x12>
	}
	return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f003 fb30 	bl	8004c20 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20020000 	.word	0x20020000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200001f8 	.word	0x200001f8
 80015f4:	20000300 	.word	0x20000300

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f003 faef 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff fc27 	bl	8000ea0 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001660:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8001664:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001668:	20000300 	.word	0x20000300

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fddc 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	200002ec 	.word	0x200002ec

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200002ec 	.word	0x200002ec

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d004      	beq.n	80019dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e00c      	b.n	80019f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2205      	movs	r2, #5
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e16b      	b.n	8001d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 815a 	bne.w	8001d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80b4 	beq.w	8001d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <HAL_GPIO_Init+0x30c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <HAL_GPIO_Init+0x30c>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_GPIO_Init+0x30c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc2:	4a5b      	ldr	r2, [pc, #364]	; (8001d30 <HAL_GPIO_Init+0x310>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_GPIO_Init+0x314>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02b      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x318>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x222>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_GPIO_Init+0x31c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x21e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x324>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x216>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_GPIO_Init+0x328>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x32c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x20e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_GPIO_Init+0x330>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x20a>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00e      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x228>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_GPIO_Init+0x310>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8a:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d08:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_GPIO_Init+0x334>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f ae90 	bls.w	8001a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40021c00 	.word	0x40021c00
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e12b      	b.n	8001fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fa96 	bl	80012b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dbc:	f002 fbf2 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8001dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a81      	ldr	r2, [pc, #516]	; (8001fcc <HAL_I2C_Init+0x274>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d807      	bhi.n	8001ddc <HAL_I2C_Init+0x84>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a80      	ldr	r2, [pc, #512]	; (8001fd0 <HAL_I2C_Init+0x278>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	bf94      	ite	ls
 8001dd4:	2301      	movls	r3, #1
 8001dd6:	2300      	movhi	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	e006      	b.n	8001dea <HAL_I2C_Init+0x92>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a7d      	ldr	r2, [pc, #500]	; (8001fd4 <HAL_I2C_Init+0x27c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	bf94      	ite	ls
 8001de4:	2301      	movls	r3, #1
 8001de6:	2300      	movhi	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0e7      	b.n	8001fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a78      	ldr	r2, [pc, #480]	; (8001fd8 <HAL_I2C_Init+0x280>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a6a      	ldr	r2, [pc, #424]	; (8001fcc <HAL_I2C_Init+0x274>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d802      	bhi.n	8001e2c <HAL_I2C_Init+0xd4>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	e009      	b.n	8001e40 <HAL_I2C_Init+0xe8>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <HAL_I2C_Init+0x284>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	099b      	lsrs	r3, r3, #6
 8001e3e:	3301      	adds	r3, #1
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	495c      	ldr	r1, [pc, #368]	; (8001fcc <HAL_I2C_Init+0x274>)
 8001e5c:	428b      	cmp	r3, r1
 8001e5e:	d819      	bhi.n	8001e94 <HAL_I2C_Init+0x13c>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e59      	subs	r1, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6e:	1c59      	adds	r1, r3, #1
 8001e70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e74:	400b      	ands	r3, r1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_I2C_Init+0x138>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e59      	subs	r1, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	e051      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e04f      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d111      	bne.n	8001ec0 <HAL_I2C_Init+0x168>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e012      	b.n	8001ee6 <HAL_I2C_Init+0x18e>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	0099      	lsls	r1, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Init+0x196>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e022      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <HAL_I2C_Init+0x1bc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1e58      	subs	r0, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	440b      	add	r3, r1
 8001f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f12:	e00f      	b.n	8001f34 <HAL_I2C_Init+0x1dc>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	0099      	lsls	r1, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	6809      	ldr	r1, [r1, #0]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6911      	ldr	r1, [r2, #16]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	000186a0 	.word	0x000186a0
 8001fd0:	001e847f 	.word	0x001e847f
 8001fd4:	003d08ff 	.word	0x003d08ff
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b20      	cmp	r3, #32
 8002006:	f040 80a6 	bne.w	8002156 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002018:	d005      	beq.n	8002026 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d002      	beq.n	8002026 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d130      	bne.n	8002088 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002026:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a1a      	lsrs	r2, r3, #8
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009a      	lsls	r2, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3b01      	subs	r3, #1
 8002044:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d116      	bne.n	800207a <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f043 0220 	orr.w	r2, r3, #32
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06e      	b.n	8002158 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b02      	cmp	r3, #2
 8002086:	d0db      	beq.n	8002040 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8002092:	2302      	movs	r3, #2
 8002094:	e060      	b.n	8002158 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d007      	beq.n	80020bc <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2221      	movs	r2, #33	; 0x21
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2210      	movs	r2, #16
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	893a      	ldrh	r2, [r7, #8]
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a3a      	ldr	r2, [r7, #32]
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80020fe:	897a      	ldrh	r2, [r7, #10]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b11      	cmp	r3, #17
 800210e:	d10c      	bne.n	800212a <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002116:	d003      	beq.n	8002120 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800211e:	d101      	bne.n	8002124 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8002124:	2300      	movs	r3, #0
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002138:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002150:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000000 	.word	0x20000000
 8002168:	14f8b589 	.word	0x14f8b589

0800216c <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	461a      	mov	r2, r3
 8002178:	460b      	mov	r3, r1
 800217a:	817b      	strh	r3, [r7, #10]
 800217c:	4613      	mov	r3, r2
 800217e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002188:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800218c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 80da 	bne.w	8002350 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	d005      	beq.n	80021b8 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d002      	beq.n	80021b8 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d130      	bne.n	800221a <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80021b8:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0a1a      	lsrs	r2, r3, #8
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0a2      	b.n	8002352 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b02      	cmp	r3, #2
 8002218:	d0db      	beq.n	80021d2 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8002224:	2302      	movs	r3, #2
 8002226:	e094      	b.n	8002352 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d007      	beq.n	800224e <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2222      	movs	r2, #34	; 0x22
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2210      	movs	r2, #16
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002290:	897a      	ldrh	r2, [r7, #10]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d126      	bne.n	80022f4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d002      	beq.n	80022b2 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d120      	bne.n	80022f4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d114      	bne.n	80022e2 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d6:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022de:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80022e0:	e010      	b.n	8002304 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80022f2:	e007      	b.n	8002304 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002302:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b12      	cmp	r3, #18
 8002308:	d10c      	bne.n	8002324 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002310:	d003      	beq.n	800231a <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002318:	d101      	bne.n	800231e <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800231e:	2300      	movs	r3, #0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002332:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000000 	.word	0x20000000
 8002364:	14f8b589 	.word	0x14f8b589

08002368 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002388:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002390:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b10      	cmp	r3, #16
 8002396:	d003      	beq.n	80023a0 <HAL_I2C_EV_IRQHandler+0x38>
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	f040 80c1 	bne.w	8002522 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80023c0:	d003      	beq.n	80023ca <HAL_I2C_EV_IRQHandler+0x62>
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x66>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x68>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	f000 8132 	beq.w	800263a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0x92>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	0a5b      	lsrs	r3, r3, #9
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 fc71 	bl	8003cd4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fd79 	bl	8002eea <I2C_Master_SB>
 80023f8:	e092      	b.n	8002520 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xb2>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	0a5b      	lsrs	r3, r3, #9
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fdef 	bl	8002ff6 <I2C_Master_ADD10>
 8002418:	e082      	b.n	8002520 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_I2C_EV_IRQHandler+0xd2>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	0a5b      	lsrs	r3, r3, #9
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fe09 	bl	800304a <I2C_Master_ADDR>
 8002438:	e072      	b.n	8002520 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03b      	beq.n	80024be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002454:	f000 80f3 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	09db      	lsrs	r3, r3, #7
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00f      	beq.n	8002484 <HAL_I2C_EV_IRQHandler+0x11c>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_I2C_EV_IRQHandler+0x11c>
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9f3 	bl	8002868 <I2C_MasterTransmit_TXE>
 8002482:	e04d      	b.n	8002520 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80d6 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	0a5b      	lsrs	r3, r3, #9
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80cf 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	2b21      	cmp	r3, #33	; 0x21
 80024a4:	d103      	bne.n	80024ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa7a 	bl	80029a0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ac:	e0c7      	b.n	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	f040 80c4 	bne.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fae8 	bl	8002a8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024bc:	e0bf      	b.n	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	f000 80b7 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00f      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x194>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x194>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb5d 	bl	8002bb4 <I2C_MasterReceive_RXNE>
 80024fa:	e011      	b.n	8002520 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 809a 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	0a5b      	lsrs	r3, r3, #9
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8093 	beq.w	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fbfc 	bl	8002d16 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251e:	e08e      	b.n	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002520:	e08d      	b.n	800263e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e007      	b.n	8002544 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x20e>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	0a5b      	lsrs	r3, r3, #9
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00c      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 ffba 	bl	80034e8 <I2C_Slave_ADDR>
 8002574:	e066      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0x22e>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0a5b      	lsrs	r3, r3, #9
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fff4 	bl	800357c <I2C_Slave_STOPF>
 8002594:	e056      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002596:	7bbb      	ldrb	r3, [r7, #14]
 8002598:	2b21      	cmp	r3, #33	; 0x21
 800259a:	d002      	beq.n	80025a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	2b29      	cmp	r3, #41	; 0x29
 80025a0:	d125      	bne.n	80025ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	09db      	lsrs	r3, r3, #7
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00f      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x266>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	0a9b      	lsrs	r3, r3, #10
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x266>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fed0 	bl	800336c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025cc:	e039      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d033      	beq.n	8002642 <HAL_I2C_EV_IRQHandler+0x2da>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02d      	beq.n	8002642 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fefd 	bl	80033e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ec:	e029      	b.n	8002642 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00f      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x2b2>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	0a9b      	lsrs	r3, r3, #10
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 ff08 	bl	8003428 <I2C_SlaveReceive_RXNE>
 8002618:	e014      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00e      	beq.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	0a5b      	lsrs	r3, r3, #9
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 ff36 	bl	80034a4 <I2C_SlaveReceive_BTF>
 8002638:	e004      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002642:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b08a      	sub	sp, #40	; 0x28
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00e      	beq.n	8002698 <HAL_I2C_ER_IRQHandler+0x4e>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002696:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	0a5b      	lsrs	r3, r3, #9
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <HAL_I2C_ER_IRQHandler+0x78>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80026c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	0a9b      	lsrs	r3, r3, #10
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03f      	beq.n	800274e <HAL_I2C_ER_IRQHandler+0x104>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d039      	beq.n	800274e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80026da:	7efb      	ldrb	r3, [r7, #27]
 80026dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026f4:	7ebb      	ldrb	r3, [r7, #26]
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d112      	bne.n	8002720 <HAL_I2C_ER_IRQHandler+0xd6>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <HAL_I2C_ER_IRQHandler+0xd6>
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b21      	cmp	r3, #33	; 0x21
 8002704:	d008      	beq.n	8002718 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b29      	cmp	r3, #41	; 0x29
 800270a:	d005      	beq.n	8002718 <HAL_I2C_ER_IRQHandler+0xce>
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b28      	cmp	r3, #40	; 0x28
 8002710:	d106      	bne.n	8002720 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b21      	cmp	r3, #33	; 0x21
 8002716:	d103      	bne.n	8002720 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f001 f85f 	bl	80037dc <I2C_Slave_AF>
 800271e:	e016      	b.n	800274e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002728:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002732:	7efb      	ldrb	r3, [r7, #27]
 8002734:	2b10      	cmp	r3, #16
 8002736:	d002      	beq.n	800273e <HAL_I2C_ER_IRQHandler+0xf4>
 8002738:	7efb      	ldrb	r3, [r7, #27]
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d107      	bne.n	800274e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	0adb      	lsrs	r3, r3, #11
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <HAL_I2C_ER_IRQHandler+0x12e>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f043 0308 	orr.w	r3, r3, #8
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002776:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f001 f896 	bl	80038bc <I2C_ITError>
  }
}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	; 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002876:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d150      	bne.n	8002930 <I2C_MasterTransmit_TXE+0xc8>
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b21      	cmp	r3, #33	; 0x21
 8002892:	d14d      	bne.n	8002930 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d01d      	beq.n	80028d6 <I2C_MasterTransmit_TXE+0x6e>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b20      	cmp	r3, #32
 800289e:	d01a      	beq.n	80028d6 <I2C_MasterTransmit_TXE+0x6e>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a6:	d016      	beq.n	80028d6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2211      	movs	r2, #17
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff62 	bl	8002798 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028d4:	e060      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028e4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d107      	bne.n	8002920 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff6f 	bl	80027fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800291e:	e03b      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff35 	bl	8002798 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800292e:	e033      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b21      	cmp	r3, #33	; 0x21
 8002934:	d005      	beq.n	8002942 <I2C_MasterTransmit_TXE+0xda>
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d12d      	bne.n	8002998 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b22      	cmp	r3, #34	; 0x22
 8002940:	d12a      	bne.n	8002998 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800295c:	e01c      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d103      	bne.n	8002972 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f88e 	bl	8002a8c <I2C_MemoryTransmit_TXE_BTF>
}
 8002970:	e012      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002996:	e7ff      	b.n	8002998 <I2C_MasterTransmit_TXE+0x130>
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b21      	cmp	r3, #33	; 0x21
 80029b8:	d164      	bne.n	8002a84 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029e8:	e04c      	b.n	8002a84 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d01d      	beq.n	8002a2c <I2C_MasterTransmit_BTF+0x8c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d01a      	beq.n	8002a2c <I2C_MasterTransmit_BTF+0x8c>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029fc:	d016      	beq.n	8002a2c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a0c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2211      	movs	r2, #17
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff feb7 	bl	8002798 <HAL_I2C_MasterTxCpltCallback>
}
 8002a2a:	e02b      	b.n	8002a84 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a3a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d107      	bne.n	8002a76 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fec4 	bl	80027fc <HAL_I2C_MemTxCpltCallback>
}
 8002a74:	e006      	b.n	8002a84 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fe8a 	bl	8002798 <HAL_I2C_MasterTxCpltCallback>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11d      	bne.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10b      	bne.n	8002ac4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	1c9a      	adds	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ac2:	e073      	b.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	121b      	asrs	r3, r3, #8
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ade:	e065      	b.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10b      	bne.n	8002b00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002afe:	e055      	b.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d151      	bne.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b22      	cmp	r3, #34	; 0x22
 8002b0c:	d10d      	bne.n	8002b2a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b28:	e040      	b.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b21      	cmp	r3, #33	; 0x21
 8002b38:	d112      	bne.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b5e:	e025      	b.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d120      	bne.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b21      	cmp	r3, #33	; 0x21
 8002b6e:	d11d      	bne.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b7e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fe28 	bl	80027fc <HAL_I2C_MemTxCpltCallback>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b22      	cmp	r3, #34	; 0x22
 8002bc6:	f040 80a2 	bne.w	8002d0e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d921      	bls.n	8002c1c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	f040 8082 	bne.w	8002d0e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c18:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c1a:	e078      	b.n	8002d0e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d074      	beq.n	8002d0e <I2C_MasterReceive_RXNE+0x15a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <I2C_MasterReceive_RXNE+0x7c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d16e      	bne.n	8002d0e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 f81d 	bl	8003c70 <I2C_WaitOnSTOPRequestThroughIT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d142      	bne.n	8002cc2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d10a      	bne.n	8002cac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fdb3 	bl	8002810 <HAL_I2C_MemRxCpltCallback>
}
 8002caa:	e030      	b.n	8002d0e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2212      	movs	r2, #18
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fd76 	bl	80027ac <HAL_I2C_MasterRxCpltCallback>
}
 8002cc0:	e025      	b.n	8002d0e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fd8b 	bl	8002824 <HAL_I2C_ErrorCallback>
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d11b      	bne.n	8002d66 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d64:	e0bd      	b.n	8002ee2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d129      	bne.n	8002dc4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00a      	beq.n	8002d9c <I2C_MasterReceive_BTF+0x86>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d007      	beq.n	8002d9c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dc2:	e08e      	b.n	8002ee2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d176      	bne.n	8002ebc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d002      	beq.n	8002dda <I2C_MasterReceive_BTF+0xc4>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d108      	bne.n	8002dec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e019      	b.n	8002e20 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d002      	beq.n	8002df8 <I2C_MasterReceive_BTF+0xe2>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d108      	bne.n	8002e0a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e00a      	b.n	8002e20 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d007      	beq.n	8002e20 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d10a      	bne.n	8002ea6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fcb6 	bl	8002810 <HAL_I2C_MemRxCpltCallback>
}
 8002ea4:	e01d      	b.n	8002ee2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2212      	movs	r2, #18
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fc79 	bl	80027ac <HAL_I2C_MasterRxCpltCallback>
}
 8002eba:	e012      	b.n	8002ee2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d117      	bne.n	8002f2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f18:	e067      	b.n	8002fea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
}
 8002f2c:	e05d      	b.n	8002fea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f36:	d133      	bne.n	8002fa0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b21      	cmp	r3, #33	; 0x21
 8002f42:	d109      	bne.n	8002f58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e008      	b.n	8002f6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <I2C_Master_SB+0x92>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d032      	beq.n	8002fea <I2C_Master_SB+0x100>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02d      	beq.n	8002fea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9c:	605a      	str	r2, [r3, #4]
}
 8002f9e:	e024      	b.n	8002fea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10e      	bne.n	8002fc6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	11db      	asrs	r3, r3, #7
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 0306 	and.w	r3, r3, #6
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f063 030f 	orn	r3, r3, #15
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	611a      	str	r2, [r3, #16]
}
 8002fc4:	e011      	b.n	8002fea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10d      	bne.n	8002fea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	11db      	asrs	r3, r3, #7
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f003 0306 	and.w	r3, r3, #6
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f063 030e 	orn	r3, r3, #14
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	b2da      	uxtb	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <I2C_Master_ADD10+0x26>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d108      	bne.n	800302e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00c      	beq.n	800303e <I2C_Master_ADD10+0x48>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303c:	605a      	str	r2, [r3, #4]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800304a:	b480      	push	{r7}
 800304c:	b091      	sub	sp, #68	; 0x44
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b22      	cmp	r3, #34	; 0x22
 8003072:	f040 8169 	bne.w	8003348 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <I2C_Master_ADDR+0x54>
 800307e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d10b      	bne.n	800309e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	e160      	b.n	8003360 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11d      	bne.n	80030e2 <I2C_Master_ADDR+0x98>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ae:	d118      	bne.n	80030e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	651a      	str	r2, [r3, #80]	; 0x50
 80030e0:	e13e      	b.n	8003360 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d113      	bne.n	8003114 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e115      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	f040 808a 	bne.w	8003234 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003126:	d137      	bne.n	8003198 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003136:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d113      	bne.n	8003170 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	e0e7      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e0d3      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	2b08      	cmp	r3, #8
 800319c:	d02e      	beq.n	80031fc <I2C_Master_ADDR+0x1b2>
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d02b      	beq.n	80031fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	2b12      	cmp	r3, #18
 80031a8:	d102      	bne.n	80031b0 <I2C_Master_ADDR+0x166>
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d125      	bne.n	80031fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00e      	beq.n	80031d4 <I2C_Master_ADDR+0x18a>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d00b      	beq.n	80031d4 <I2C_Master_ADDR+0x18a>
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d008      	beq.n	80031d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e007      	b.n	80031e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	e0a1      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e085      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d14d      	bne.n	80032da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	2b04      	cmp	r3, #4
 8003242:	d016      	beq.n	8003272 <I2C_Master_ADDR+0x228>
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	2b02      	cmp	r3, #2
 8003248:	d013      	beq.n	8003272 <I2C_Master_ADDR+0x228>
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b10      	cmp	r3, #16
 800324e:	d010      	beq.n	8003272 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e007      	b.n	8003282 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003280:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d117      	bne.n	80032c2 <I2C_Master_ADDR+0x278>
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d00b      	beq.n	80032b2 <I2C_Master_ADDR+0x268>
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	2b01      	cmp	r3, #1
 800329e:	d008      	beq.n	80032b2 <I2C_Master_ADDR+0x268>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d005      	beq.n	80032b2 <I2C_Master_ADDR+0x268>
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d002      	beq.n	80032b2 <I2C_Master_ADDR+0x268>
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d107      	bne.n	80032c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	e032      	b.n	8003340 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	d117      	bne.n	800332a <I2C_Master_ADDR+0x2e0>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003300:	d00b      	beq.n	800331a <I2C_Master_ADDR+0x2d0>
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b01      	cmp	r3, #1
 8003306:	d008      	beq.n	800331a <I2C_Master_ADDR+0x2d0>
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	2b08      	cmp	r3, #8
 800330c:	d005      	beq.n	800331a <I2C_Master_ADDR+0x2d0>
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b10      	cmp	r3, #16
 8003312:	d002      	beq.n	800331a <I2C_Master_ADDR+0x2d0>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b20      	cmp	r3, #32
 8003318:	d107      	bne.n	800332a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003328:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003346:	e00b      	b.n	8003360 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
}
 800335e:	e7ff      	b.n	8003360 <I2C_Master_ADDR+0x316>
 8003360:	bf00      	nop
 8003362:	3744      	adds	r7, #68	; 0x44
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02b      	beq.n	80033de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d114      	bne.n	80033de <I2C_SlaveTransmit_TXE+0x72>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b29      	cmp	r3, #41	; 0x29
 80033b8:	d111      	bne.n	80033de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2221      	movs	r2, #33	; 0x21
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2228      	movs	r2, #40	; 0x28
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff f9f1 	bl	80027c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d011      	beq.n	800341c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003436:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02c      	beq.n	800349c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d114      	bne.n	800349c <I2C_SlaveReceive_RXNE+0x74>
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b2a      	cmp	r3, #42	; 0x2a
 8003476:	d111      	bne.n	800349c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2222      	movs	r2, #34	; 0x22
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2228      	movs	r2, #40	; 0x28
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff f99c 	bl	80027d4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003502:	2b28      	cmp	r3, #40	; 0x28
 8003504:	d127      	bne.n	8003556 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	09db      	lsrs	r3, r3, #7
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	81bb      	strh	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003548:	89ba      	ldrh	r2, [r7, #12]
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fe60 	bl	8001214 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003554:	e00e      	b.n	8003574 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800359a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d172      	bne.n	80036c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b22      	cmp	r3, #34	; 0x22
 80035de:	d002      	beq.n	80035e6 <I2C_Slave_STOPF+0x6a>
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b2a      	cmp	r3, #42	; 0x2a
 80035e4:	d135      	bne.n	8003652 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003618:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f9ef 	bl	8001a02 <HAL_DMA_GetState>
 8003624:	4603      	mov	r3, r0
 8003626:	2b01      	cmp	r3, #1
 8003628:	d049      	beq.n	80036be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	4a69      	ldr	r2, [pc, #420]	; (80037d4 <I2C_Slave_STOPF+0x258>)
 8003630:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f9c1 	bl	80019be <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03d      	beq.n	80036be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003650:	e035      	b.n	80036be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f043 0204 	orr.w	r2, r3, #4
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003684:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe f9b9 	bl	8001a02 <HAL_DMA_GetState>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d014      	beq.n	80036c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <I2C_Slave_STOPF+0x258>)
 800369c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f98b 	bl	80019be <HAL_DMA_Abort_IT>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
 80036bc:	e000      	b.n	80036c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d03e      	beq.n	8003748 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d112      	bne.n	80036fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d112      	bne.n	8003732 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8b3 	bl	80038bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003756:	e039      	b.n	80037cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b2a      	cmp	r3, #42	; 0x2a
 800375c:	d109      	bne.n	8003772 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2228      	movs	r2, #40	; 0x28
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff f831 	bl	80027d4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b28      	cmp	r3, #40	; 0x28
 800377c:	d111      	bne.n	80037a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <I2C_Slave_STOPF+0x25c>)
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff f824 	bl	80027e8 <HAL_I2C_ListenCpltCallback>
}
 80037a0:	e014      	b.n	80037cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2b22      	cmp	r3, #34	; 0x22
 80037a8:	d002      	beq.n	80037b0 <I2C_Slave_STOPF+0x234>
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b22      	cmp	r3, #34	; 0x22
 80037ae:	d10d      	bne.n	80037cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff f804 	bl	80027d4 <HAL_I2C_SlaveRxCpltCallback>
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08003b21 	.word	0x08003b21
 80037d8:	ffff0000 	.word	0xffff0000

080037dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d002      	beq.n	80037fe <I2C_Slave_AF+0x22>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d129      	bne.n	8003852 <I2C_Slave_AF+0x76>
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b28      	cmp	r3, #40	; 0x28
 8003802:	d126      	bne.n	8003852 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <I2C_Slave_AF+0xdc>)
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003818:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003822:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe ffcc 	bl	80027e8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003850:	e02e      	b.n	80038b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b21      	cmp	r3, #33	; 0x21
 8003856:	d126      	bne.n	80038a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <I2C_Slave_AF+0xdc>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003882:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe ff8e 	bl	80027c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80038a4:	e004      	b.n	80038b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ae:	615a      	str	r2, [r3, #20]
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038d4:	7bbb      	ldrb	r3, [r7, #14]
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d002      	beq.n	80038e0 <I2C_ITError+0x24>
 80038da:	7bbb      	ldrb	r3, [r7, #14]
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d10a      	bne.n	80038f6 <I2C_ITError+0x3a>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b22      	cmp	r3, #34	; 0x22
 80038e4:	d107      	bne.n	80038f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038fc:	2b28      	cmp	r3, #40	; 0x28
 80038fe:	d107      	bne.n	8003910 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2228      	movs	r2, #40	; 0x28
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800390e:	e015      	b.n	800393c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391e:	d00a      	beq.n	8003936 <I2C_ITError+0x7a>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b60      	cmp	r3, #96	; 0x60
 8003924:	d007      	beq.n	8003936 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394a:	d162      	bne.n	8003a12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d020      	beq.n	80039ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4a6a      	ldr	r2, [pc, #424]	; (8003b18 <I2C_ITError+0x25c>)
 8003970:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe f821 	bl	80019be <HAL_DMA_Abort_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8089 	beq.w	8003a96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039a6:	4610      	mov	r0, r2
 80039a8:	4798      	blx	r3
 80039aa:	e074      	b.n	8003a96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	4a59      	ldr	r2, [pc, #356]	; (8003b18 <I2C_ITError+0x25c>)
 80039b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe f800 	bl	80019be <HAL_DMA_Abort_IT>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d068      	beq.n	8003a96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d10b      	bne.n	80039ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
 8003a10:	e041      	b.n	8003a96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b60      	cmp	r3, #96	; 0x60
 8003a1c:	d125      	bne.n	8003a6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d10b      	bne.n	8003a52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fee8 	bl	8002838 <HAL_I2C_AbortCpltCallback>
 8003a68:	e015      	b.n	8003a96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10b      	bne.n	8003a90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fe fec7 	bl	8002824 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10e      	bne.n	8003ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d113      	bne.n	8003b10 <I2C_ITError+0x254>
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b28      	cmp	r3, #40	; 0x28
 8003aec:	d110      	bne.n	8003b10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <I2C_ITError+0x260>)
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe fe6c 	bl	80027e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	ffff0000 	.word	0xffff0000

08003b20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <I2C_DMAAbort+0x148>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <I2C_DMAAbort+0x14c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0a1a      	lsrs	r2, r3, #8
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	00da      	lsls	r2, r3, #3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003b66:	e00a      	b.n	8003b7e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d0ea      	beq.n	8003b54 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d10e      	bne.n	8003c0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7fe fe16 	bl	8002838 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c0c:	e027      	b.n	8003c5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c14:	2b28      	cmp	r3, #40	; 0x28
 8003c16:	d117      	bne.n	8003c48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2228      	movs	r2, #40	; 0x28
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c46:	e007      	b.n	8003c58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f7fe fde3 	bl	8002824 <HAL_I2C_ErrorCallback>
}
 8003c5e:	bf00      	nop
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	14f8b589 	.word	0x14f8b589

08003c70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	0a1a      	lsrs	r2, r3, #8
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d107      	bne.n	8003cae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e008      	b.n	8003cc0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cbc:	d0e9      	beq.n	8003c92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	14f8b589 	.word	0x14f8b589

08003cd4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ce4:	d103      	bne.n	8003cee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cec:	e007      	b.n	8003cfe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cf6:	d102      	bne.n	8003cfe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e264      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2a:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d112      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b9d      	ldr	r3, [pc, #628]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	4b99      	ldr	r3, [pc, #612]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d05b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x108>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d157      	bne.n	8003e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e23f      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d106      	bne.n	8003d80 <HAL_RCC_OscConfig+0x74>
 8003d72:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a90      	ldr	r2, [pc, #576]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a8a      	ldr	r2, [pc, #552]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a87      	ldr	r2, [pc, #540]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003da4:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a83      	ldr	r2, [pc, #524]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fcba 	bl	800173c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fd fcb6 	bl	800173c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e204      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xc0>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd fca6 	bl	800173c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd fca2 	bl	800173c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1f0      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b5c      	ldr	r3, [pc, #368]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c4      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4952      	ldr	r1, [pc, #328]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd fc5b 	bl	800173c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fc57 	bl	800173c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a5      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4940      	ldr	r1, [pc, #256]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fc3a 	bl	800173c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fd fc36 	bl	800173c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e184      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d030      	beq.n	8003f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fc1a 	bl	800173c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fc16 	bl	800173c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e164      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x200>
 8003f2a:	e015      	b.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fd fc03 	bl	800173c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fd fbff 	bl	800173c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e14d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a0 	beq.w	80040a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d121      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fd fbc5 	bl	800173c <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e011      	b.n	8003fda <HAL_RCC_OscConfig+0x2ce>
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470000 	.word	0x42470000
 8003fc0:	42470e80 	.word	0x42470e80
 8003fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fd fbb8 	bl	800173c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e106      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x4e4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
 8003fee:	4b81      	ldr	r3, [pc, #516]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a80      	ldr	r2, [pc, #512]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b78      	ldr	r3, [pc, #480]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a77      	ldr	r2, [pc, #476]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 800401e:	4b75      	ldr	r3, [pc, #468]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a74      	ldr	r2, [pc, #464]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b72      	ldr	r3, [pc, #456]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a71      	ldr	r2, [pc, #452]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fd fb7d 	bl	800173c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fd fb79 	bl	800173c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0c5      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x33a>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fd fb67 	bl	800173c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fd fb63 	bl	800173c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0af      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a55      	ldr	r2, [pc, #340]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 809b 	beq.w	80041e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d05c      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d141      	bne.n	8004148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fd fb37 	bl	800173c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fd fb33 	bl	800173c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e081      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e4:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	019b      	lsls	r3, r3, #6
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	4937      	ldr	r1, [pc, #220]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd fb0c 	bl	800173c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd fb08 	bl	800173c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e056      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b2e      	ldr	r3, [pc, #184]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x41c>
 8004146:	e04e      	b.n	80041e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x4ec>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fd faf5 	bl	800173c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fd faf1 	bl	800173c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e03f      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x44a>
 8004174:	e037      	b.n	80041e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e032      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <HAL_RCC_OscConfig+0x4e8>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d028      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d121      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d11a      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d111      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40007000 	.word	0x40007000
 80041f4:	40023800 	.word	0x40023800
 80041f8:	42470060 	.word	0x42470060

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0cc      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90c      	bls.n	8004238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800425a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d044      	beq.n	800431c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ca:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e067      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042da:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0203 	bic.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4934      	ldr	r1, [pc, #208]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ec:	f7fd fa26 	bl	800173c <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	e00a      	b.n	800430a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f4:	f7fd fa22 	bl	800173c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 020c 	and.w	r2, r3, #12
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	429a      	cmp	r2, r3
 800431a:	d1eb      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d20c      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f821 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004386:	4602      	mov	r2, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	490a      	ldr	r1, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	5ccb      	ldrb	r3, [r1, r3]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f986 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00
 80043b8:	40023800 	.word	0x40023800
 80043bc:	080079ec 	.word	0x080079ec
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000004 	.word	0x20000004

080043c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	2300      	movs	r3, #0
 80043da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043e0:	4b67      	ldr	r3, [pc, #412]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d00d      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x40>
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	f200 80bd 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x1a4>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x34>
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x3a>
 80043fa:	e0b7      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043fe:	60bb      	str	r3, [r7, #8]
       break;
 8004400:	e0b7      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004402:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004404:	60bb      	str	r3, [r7, #8]
      break;
 8004406:	e0b4      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004408:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04d      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441e:	4b58      	ldr	r3, [pc, #352]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	461a      	mov	r2, r3
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	ea02 0800 	and.w	r8, r2, r0
 8004436:	ea03 0901 	and.w	r9, r3, r1
 800443a:	4640      	mov	r0, r8
 800443c:	4649      	mov	r1, r9
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	014b      	lsls	r3, r1, #5
 8004448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800444c:	0142      	lsls	r2, r0, #5
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	ebb0 0008 	subs.w	r0, r0, r8
 8004456:	eb61 0109 	sbc.w	r1, r1, r9
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	018b      	lsls	r3, r1, #6
 8004464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004468:	0182      	lsls	r2, r0, #6
 800446a:	1a12      	subs	r2, r2, r0
 800446c:	eb63 0301 	sbc.w	r3, r3, r1
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	00d9      	lsls	r1, r3, #3
 800447a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800447e:	00d0      	lsls	r0, r2, #3
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	eb12 0208 	adds.w	r2, r2, r8
 8004488:	eb43 0309 	adc.w	r3, r3, r9
 800448c:	f04f 0000 	mov.w	r0, #0
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	0259      	lsls	r1, r3, #9
 8004496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800449a:	0250      	lsls	r0, r2, #9
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f7fc fb7c 	bl	8000ba8 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e04a      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ba:	4b31      	ldr	r3, [pc, #196]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	461a      	mov	r2, r3
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	ea02 0400 	and.w	r4, r2, r0
 80044d2:	ea03 0501 	and.w	r5, r3, r1
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	014b      	lsls	r3, r1, #5
 80044e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044e8:	0142      	lsls	r2, r0, #5
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	1b00      	subs	r0, r0, r4
 80044f0:	eb61 0105 	sbc.w	r1, r1, r5
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	018b      	lsls	r3, r1, #6
 80044fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004502:	0182      	lsls	r2, r0, #6
 8004504:	1a12      	subs	r2, r2, r0
 8004506:	eb63 0301 	sbc.w	r3, r3, r1
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	00d9      	lsls	r1, r3, #3
 8004514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004518:	00d0      	lsls	r0, r2, #3
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	1912      	adds	r2, r2, r4
 8004520:	eb45 0303 	adc.w	r3, r5, r3
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	0299      	lsls	r1, r3, #10
 800452e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004532:	0290      	lsls	r0, r2, #10
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	461a      	mov	r2, r3
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	f7fc fb30 	bl	8000ba8 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800456e:	60bb      	str	r3, [r7, #8]
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	68bb      	ldr	r3, [r7, #8]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	007a1200 	.word	0x007a1200

0800458c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000000 	.word	0x20000000

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff0 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	080079fc 	.word	0x080079fc

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff ffdc 	bl	800458c <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0b5b      	lsrs	r3, r3, #13
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	080079fc 	.word	0x080079fc

080045f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e03f      	b.n	8004686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fc fea0 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f929 	bl	8004890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800464c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800465c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b08a      	sub	sp, #40	; 0x28
 8004692:	af02      	add	r7, sp, #8
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d17c      	bne.n	80047a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Transmit+0x2c>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e075      	b.n	80047aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Transmit+0x3e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e06e      	b.n	80047aa <HAL_UART_Transmit+0x11c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e2:	f7fd f82b 	bl	800173c <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d108      	bne.n	8004710 <HAL_UART_Transmit+0x82>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e003      	b.n	8004718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004720:	e02a      	b.n	8004778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f840 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e036      	b.n	80047aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e007      	b.n	800476a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1cf      	bne.n	8004722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	; 0x40
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f810 	bl	80047b2 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e006      	b.n	80047aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b090      	sub	sp, #64	; 0x40
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	e050      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d04c      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d2:	f7fc ffb3 	bl	800173c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047de:	429a      	cmp	r2, r3
 80047e0:	d241      	bcs.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004802:	637a      	str	r2, [r7, #52]	; 0x34
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004836:	623a      	str	r2, [r7, #32]
 8004838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d09f      	beq.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3740      	adds	r7, #64	; 0x40
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	b09f      	sub	sp, #124	; 0x7c
 8004896:	af00      	add	r7, sp, #0
 8004898:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a6:	68d9      	ldr	r1, [r3, #12]
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048d4:	f021 010c 	bic.w	r1, r1, #12
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048de:	430b      	orrs	r3, r1
 80048e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	6999      	ldr	r1, [r3, #24]
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	ea40 0301 	orr.w	r3, r0, r1
 80048f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4bc5      	ldr	r3, [pc, #788]	; (8004c14 <UART_SetConfig+0x384>)
 8004900:	429a      	cmp	r2, r3
 8004902:	d004      	beq.n	800490e <UART_SetConfig+0x7e>
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4bc3      	ldr	r3, [pc, #780]	; (8004c18 <UART_SetConfig+0x388>)
 800490a:	429a      	cmp	r2, r3
 800490c:	d103      	bne.n	8004916 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800490e:	f7ff fe5d 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8004912:	6778      	str	r0, [r7, #116]	; 0x74
 8004914:	e002      	b.n	800491c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004916:	f7ff fe45 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 800491a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	f040 80b6 	bne.w	8004a94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492a:	461c      	mov	r4, r3
 800492c:	f04f 0500 	mov.w	r5, #0
 8004930:	4622      	mov	r2, r4
 8004932:	462b      	mov	r3, r5
 8004934:	1891      	adds	r1, r2, r2
 8004936:	6439      	str	r1, [r7, #64]	; 0x40
 8004938:	415b      	adcs	r3, r3
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004940:	1912      	adds	r2, r2, r4
 8004942:	eb45 0303 	adc.w	r3, r5, r3
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	00d9      	lsls	r1, r3, #3
 8004950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004954:	00d0      	lsls	r0, r2, #3
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	1911      	adds	r1, r2, r4
 800495c:	6639      	str	r1, [r7, #96]	; 0x60
 800495e:	416b      	adcs	r3, r5
 8004960:	667b      	str	r3, [r7, #100]	; 0x64
 8004962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	461a      	mov	r2, r3
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	1891      	adds	r1, r2, r2
 800496e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004970:	415b      	adcs	r3, r3
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004978:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800497c:	f7fc f914 	bl	8000ba8 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4ba5      	ldr	r3, [pc, #660]	; (8004c1c <UART_SetConfig+0x38c>)
 8004986:	fba3 2302 	umull	r2, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	011e      	lsls	r6, r3, #4
 800498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004990:	461c      	mov	r4, r3
 8004992:	f04f 0500 	mov.w	r5, #0
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	1891      	adds	r1, r2, r2
 800499c:	6339      	str	r1, [r7, #48]	; 0x30
 800499e:	415b      	adcs	r3, r3
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
 80049a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049a6:	1912      	adds	r2, r2, r4
 80049a8:	eb45 0303 	adc.w	r3, r5, r3
 80049ac:	f04f 0000 	mov.w	r0, #0
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	00d9      	lsls	r1, r3, #3
 80049b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ba:	00d0      	lsls	r0, r2, #3
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	1911      	adds	r1, r2, r4
 80049c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80049c4:	416b      	adcs	r3, r5
 80049c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	461a      	mov	r2, r3
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	1891      	adds	r1, r2, r2
 80049d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80049d6:	415b      	adcs	r3, r3
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049e2:	f7fc f8e1 	bl	8000ba8 <__aeabi_uldivmod>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4b8c      	ldr	r3, [pc, #560]	; (8004c1c <UART_SetConfig+0x38c>)
 80049ec:	fba3 1302 	umull	r1, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2164      	movs	r1, #100	; 0x64
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a87      	ldr	r2, [pc, #540]	; (8004c1c <UART_SetConfig+0x38c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0c:	441e      	add	r6, r3
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a10:	4618      	mov	r0, r3
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	1894      	adds	r4, r2, r2
 8004a1c:	623c      	str	r4, [r7, #32]
 8004a1e:	415b      	adcs	r3, r3
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
 8004a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a26:	1812      	adds	r2, r2, r0
 8004a28:	eb41 0303 	adc.w	r3, r1, r3
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	f04f 0500 	mov.w	r5, #0
 8004a34:	00dd      	lsls	r5, r3, #3
 8004a36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a3a:	00d4      	lsls	r4, r2, #3
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	1814      	adds	r4, r2, r0
 8004a42:	653c      	str	r4, [r7, #80]	; 0x50
 8004a44:	414b      	adcs	r3, r1
 8004a46:	657b      	str	r3, [r7, #84]	; 0x54
 8004a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	61b9      	str	r1, [r7, #24]
 8004a56:	415b      	adcs	r3, r3
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a62:	f7fc f8a1 	bl	8000ba8 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4b6c      	ldr	r3, [pc, #432]	; (8004c1c <UART_SetConfig+0x38c>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	2164      	movs	r1, #100	; 0x64
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	3332      	adds	r3, #50	; 0x32
 8004a7e:	4a67      	ldr	r2, [pc, #412]	; (8004c1c <UART_SetConfig+0x38c>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	f003 0207 	and.w	r2, r3, #7
 8004a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4432      	add	r2, r6
 8004a90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a92:	e0b9      	b.n	8004c08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a96:	461c      	mov	r4, r3
 8004a98:	f04f 0500 	mov.w	r5, #0
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	6139      	str	r1, [r7, #16]
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004aac:	1912      	adds	r2, r2, r4
 8004aae:	eb45 0303 	adc.w	r3, r5, r3
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	00d9      	lsls	r1, r3, #3
 8004abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac0:	00d0      	lsls	r0, r2, #3
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	eb12 0804 	adds.w	r8, r2, r4
 8004aca:	eb43 0905 	adc.w	r9, r3, r5
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	008b      	lsls	r3, r1, #2
 8004ae2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ae6:	0082      	lsls	r2, r0, #2
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fc f85c 	bl	8000ba8 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <UART_SetConfig+0x38c>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	011e      	lsls	r6, r3, #4
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	4618      	mov	r0, r3
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	1894      	adds	r4, r2, r2
 8004b0c:	60bc      	str	r4, [r7, #8]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b16:	1812      	adds	r2, r2, r0
 8004b18:	eb41 0303 	adc.w	r3, r1, r3
 8004b1c:	f04f 0400 	mov.w	r4, #0
 8004b20:	f04f 0500 	mov.w	r5, #0
 8004b24:	00dd      	lsls	r5, r3, #3
 8004b26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b2a:	00d4      	lsls	r4, r2, #3
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	462b      	mov	r3, r5
 8004b30:	1814      	adds	r4, r2, r0
 8004b32:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b34:	414b      	adcs	r3, r1
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b50:	0082      	lsls	r2, r0, #2
 8004b52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b56:	f7fc f827 	bl	8000ba8 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <UART_SetConfig+0x38c>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a2a      	ldr	r2, [pc, #168]	; (8004c1c <UART_SetConfig+0x38c>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7e:	441e      	add	r6, r3
 8004b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b82:	4618      	mov	r0, r3
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	1894      	adds	r4, r2, r2
 8004b8e:	603c      	str	r4, [r7, #0]
 8004b90:	415b      	adcs	r3, r3
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b98:	1812      	adds	r2, r2, r0
 8004b9a:	eb41 0303 	adc.w	r3, r1, r3
 8004b9e:	f04f 0400 	mov.w	r4, #0
 8004ba2:	f04f 0500 	mov.w	r5, #0
 8004ba6:	00dd      	lsls	r5, r3, #3
 8004ba8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bac:	00d4      	lsls	r4, r2, #3
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	eb12 0a00 	adds.w	sl, r2, r0
 8004bb6:	eb43 0b01 	adc.w	fp, r3, r1
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	008b      	lsls	r3, r1, #2
 8004bce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bd2:	0082      	lsls	r2, r0, #2
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	f7fb ffe6 	bl	8000ba8 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <UART_SetConfig+0x38c>)
 8004be2:	fba3 1302 	umull	r1, r3, r3, r2
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2164      	movs	r1, #100	; 0x64
 8004bea:	fb01 f303 	mul.w	r3, r1, r3
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	3332      	adds	r3, #50	; 0x32
 8004bf4:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <UART_SetConfig+0x38c>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4432      	add	r2, r6
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	377c      	adds	r7, #124	; 0x7c
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	bf00      	nop
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	51eb851f 	.word	0x51eb851f

08004c20 <__errno>:
 8004c20:	4b01      	ldr	r3, [pc, #4]	; (8004c28 <__errno+0x8>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	; (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	; (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2600      	movs	r6, #0
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4d0b      	ldr	r5, [pc, #44]	; (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	; (8004c70 <__libc_init_array+0x44>)
 8004c40:	f002 feb4 	bl	80079ac <_init>
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2600      	movs	r6, #0
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	08007dec 	.word	0x08007dec
 8004c68:	08007dec 	.word	0x08007dec
 8004c6c:	08007dec 	.word	0x08007dec
 8004c70:	08007df0 	.word	0x08007df0

08004c74 <memset>:
 8004c74:	4402      	add	r2, r0
 8004c76:	4603      	mov	r3, r0
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <memset+0xa>
 8004c7c:	4770      	bx	lr
 8004c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c82:	e7f9      	b.n	8004c78 <memset+0x4>

08004c84 <__cvt>:
 8004c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	ec55 4b10 	vmov	r4, r5, d0
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	460e      	mov	r6, r1
 8004c90:	4619      	mov	r1, r3
 8004c92:	462b      	mov	r3, r5
 8004c94:	bfbb      	ittet	lt
 8004c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c9a:	461d      	movlt	r5, r3
 8004c9c:	2300      	movge	r3, #0
 8004c9e:	232d      	movlt	r3, #45	; 0x2d
 8004ca0:	700b      	strb	r3, [r1, #0]
 8004ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ca8:	4691      	mov	r9, r2
 8004caa:	f023 0820 	bic.w	r8, r3, #32
 8004cae:	bfbc      	itt	lt
 8004cb0:	4622      	movlt	r2, r4
 8004cb2:	4614      	movlt	r4, r2
 8004cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cb8:	d005      	beq.n	8004cc6 <__cvt+0x42>
 8004cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cbe:	d100      	bne.n	8004cc2 <__cvt+0x3e>
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	e000      	b.n	8004cc8 <__cvt+0x44>
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	ab03      	add	r3, sp, #12
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	ab02      	add	r3, sp, #8
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	ec45 4b10 	vmov	d0, r4, r5
 8004cd4:	4653      	mov	r3, sl
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	f000 fcea 	bl	80056b0 <_dtoa_r>
 8004cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	d102      	bne.n	8004cea <__cvt+0x66>
 8004ce4:	f019 0f01 	tst.w	r9, #1
 8004ce8:	d022      	beq.n	8004d30 <__cvt+0xac>
 8004cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cee:	eb07 0906 	add.w	r9, r7, r6
 8004cf2:	d110      	bne.n	8004d16 <__cvt+0x92>
 8004cf4:	783b      	ldrb	r3, [r7, #0]
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	d10a      	bne.n	8004d10 <__cvt+0x8c>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d06:	b918      	cbnz	r0, 8004d10 <__cvt+0x8c>
 8004d08:	f1c6 0601 	rsb	r6, r6, #1
 8004d0c:	f8ca 6000 	str.w	r6, [sl]
 8004d10:	f8da 3000 	ldr.w	r3, [sl]
 8004d14:	4499      	add	r9, r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7fb fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d22:	b108      	cbz	r0, 8004d28 <__cvt+0xa4>
 8004d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d28:	2230      	movs	r2, #48	; 0x30
 8004d2a:	9b03      	ldr	r3, [sp, #12]
 8004d2c:	454b      	cmp	r3, r9
 8004d2e:	d307      	bcc.n	8004d40 <__cvt+0xbc>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d34:	1bdb      	subs	r3, r3, r7
 8004d36:	4638      	mov	r0, r7
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	b004      	add	sp, #16
 8004d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	9103      	str	r1, [sp, #12]
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e7f0      	b.n	8004d2a <__cvt+0xa6>

08004d48 <__exponent>:
 8004d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	bfb8      	it	lt
 8004d50:	4249      	neglt	r1, r1
 8004d52:	f803 2b02 	strb.w	r2, [r3], #2
 8004d56:	bfb4      	ite	lt
 8004d58:	222d      	movlt	r2, #45	; 0x2d
 8004d5a:	222b      	movge	r2, #43	; 0x2b
 8004d5c:	2909      	cmp	r1, #9
 8004d5e:	7042      	strb	r2, [r0, #1]
 8004d60:	dd2a      	ble.n	8004db8 <__exponent+0x70>
 8004d62:	f10d 0407 	add.w	r4, sp, #7
 8004d66:	46a4      	mov	ip, r4
 8004d68:	270a      	movs	r7, #10
 8004d6a:	46a6      	mov	lr, r4
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d72:	fb07 1516 	mls	r5, r7, r6, r1
 8004d76:	3530      	adds	r5, #48	; 0x30
 8004d78:	2a63      	cmp	r2, #99	; 0x63
 8004d7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d82:	4631      	mov	r1, r6
 8004d84:	dcf1      	bgt.n	8004d6a <__exponent+0x22>
 8004d86:	3130      	adds	r1, #48	; 0x30
 8004d88:	f1ae 0502 	sub.w	r5, lr, #2
 8004d8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d90:	1c44      	adds	r4, r0, #1
 8004d92:	4629      	mov	r1, r5
 8004d94:	4561      	cmp	r1, ip
 8004d96:	d30a      	bcc.n	8004dae <__exponent+0x66>
 8004d98:	f10d 0209 	add.w	r2, sp, #9
 8004d9c:	eba2 020e 	sub.w	r2, r2, lr
 8004da0:	4565      	cmp	r5, ip
 8004da2:	bf88      	it	hi
 8004da4:	2200      	movhi	r2, #0
 8004da6:	4413      	add	r3, r2
 8004da8:	1a18      	subs	r0, r3, r0
 8004daa:	b003      	add	sp, #12
 8004dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004db6:	e7ed      	b.n	8004d94 <__exponent+0x4c>
 8004db8:	2330      	movs	r3, #48	; 0x30
 8004dba:	3130      	adds	r1, #48	; 0x30
 8004dbc:	7083      	strb	r3, [r0, #2]
 8004dbe:	70c1      	strb	r1, [r0, #3]
 8004dc0:	1d03      	adds	r3, r0, #4
 8004dc2:	e7f1      	b.n	8004da8 <__exponent+0x60>

08004dc4 <_printf_float>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	ed2d 8b02 	vpush	{d8}
 8004dcc:	b08d      	sub	sp, #52	; 0x34
 8004dce:	460c      	mov	r4, r1
 8004dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	4605      	mov	r5, r0
 8004dda:	f001 fa55 	bl	8006288 <_localeconv_r>
 8004dde:	f8d0 a000 	ldr.w	sl, [r0]
 8004de2:	4650      	mov	r0, sl
 8004de4:	f7fb f9f4 	bl	80001d0 <strlen>
 8004de8:	2300      	movs	r3, #0
 8004dea:	930a      	str	r3, [sp, #40]	; 0x28
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	9305      	str	r3, [sp, #20]
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004df8:	3307      	adds	r3, #7
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	f103 0208 	add.w	r2, r3, #8
 8004e02:	f8c8 2000 	str.w	r2, [r8]
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e1c:	ee08 0a10 	vmov	s16, r0
 8004e20:	4b9f      	ldr	r3, [pc, #636]	; (80050a0 <_printf_float+0x2dc>)
 8004e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e26:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2a:	f7fb fe7f 	bl	8000b2c <__aeabi_dcmpun>
 8004e2e:	bb88      	cbnz	r0, 8004e94 <_printf_float+0xd0>
 8004e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e34:	4b9a      	ldr	r3, [pc, #616]	; (80050a0 <_printf_float+0x2dc>)
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	f7fb fe59 	bl	8000af0 <__aeabi_dcmple>
 8004e3e:	bb48      	cbnz	r0, 8004e94 <_printf_float+0xd0>
 8004e40:	2200      	movs	r2, #0
 8004e42:	2300      	movs	r3, #0
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f7fb fe48 	bl	8000adc <__aeabi_dcmplt>
 8004e4c:	b110      	cbz	r0, 8004e54 <_printf_float+0x90>
 8004e4e:	232d      	movs	r3, #45	; 0x2d
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e54:	4b93      	ldr	r3, [pc, #588]	; (80050a4 <_printf_float+0x2e0>)
 8004e56:	4894      	ldr	r0, [pc, #592]	; (80050a8 <_printf_float+0x2e4>)
 8004e58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e5c:	bf94      	ite	ls
 8004e5e:	4698      	movls	r8, r3
 8004e60:	4680      	movhi	r8, r0
 8004e62:	2303      	movs	r3, #3
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	f023 0204 	bic.w	r2, r3, #4
 8004e6c:	6022      	str	r2, [r4, #0]
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	9700      	str	r7, [sp, #0]
 8004e74:	4633      	mov	r3, r6
 8004e76:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f9d8 	bl	8005230 <_printf_common>
 8004e80:	3001      	adds	r0, #1
 8004e82:	f040 8090 	bne.w	8004fa6 <_printf_float+0x1e2>
 8004e86:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8a:	b00d      	add	sp, #52	; 0x34
 8004e8c:	ecbd 8b02 	vpop	{d8}
 8004e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe46 	bl	8000b2c <__aeabi_dcmpun>
 8004ea0:	b140      	cbz	r0, 8004eb4 <_printf_float+0xf0>
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bfbc      	itt	lt
 8004ea8:	232d      	movlt	r3, #45	; 0x2d
 8004eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eae:	487f      	ldr	r0, [pc, #508]	; (80050ac <_printf_float+0x2e8>)
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <_printf_float+0x2ec>)
 8004eb2:	e7d1      	b.n	8004e58 <_printf_float+0x94>
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004eba:	9206      	str	r2, [sp, #24]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	d13f      	bne.n	8004f40 <_printf_float+0x17c>
 8004ec0:	2306      	movs	r3, #6
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	9b05      	ldr	r3, [sp, #20]
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ed2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ed6:	ab09      	add	r3, sp, #36	; 0x24
 8004ed8:	ec49 8b10 	vmov	d0, r8, r9
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff fecd 	bl	8004c84 <__cvt>
 8004eea:	9b06      	ldr	r3, [sp, #24]
 8004eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eee:	2b47      	cmp	r3, #71	; 0x47
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	d108      	bne.n	8004f06 <_printf_float+0x142>
 8004ef4:	1cc8      	adds	r0, r1, #3
 8004ef6:	db02      	blt.n	8004efe <_printf_float+0x13a>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	4299      	cmp	r1, r3
 8004efc:	dd41      	ble.n	8004f82 <_printf_float+0x1be>
 8004efe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f02:	fa5f fb8b 	uxtb.w	fp, fp
 8004f06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f0a:	d820      	bhi.n	8004f4e <_printf_float+0x18a>
 8004f0c:	3901      	subs	r1, #1
 8004f0e:	465a      	mov	r2, fp
 8004f10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f14:	9109      	str	r1, [sp, #36]	; 0x24
 8004f16:	f7ff ff17 	bl	8004d48 <__exponent>
 8004f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f1c:	1813      	adds	r3, r2, r0
 8004f1e:	2a01      	cmp	r2, #1
 8004f20:	4681      	mov	r9, r0
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	dc02      	bgt.n	8004f2c <_printf_float+0x168>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	07d2      	lsls	r2, r2, #31
 8004f2a:	d501      	bpl.n	8004f30 <_printf_float+0x16c>
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d09c      	beq.n	8004e72 <_printf_float+0xae>
 8004f38:	232d      	movs	r3, #45	; 0x2d
 8004f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3e:	e798      	b.n	8004e72 <_printf_float+0xae>
 8004f40:	9a06      	ldr	r2, [sp, #24]
 8004f42:	2a47      	cmp	r2, #71	; 0x47
 8004f44:	d1be      	bne.n	8004ec4 <_printf_float+0x100>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1bc      	bne.n	8004ec4 <_printf_float+0x100>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7b9      	b.n	8004ec2 <_printf_float+0xfe>
 8004f4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f52:	d118      	bne.n	8004f86 <_printf_float+0x1c2>
 8004f54:	2900      	cmp	r1, #0
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	dd0b      	ble.n	8004f72 <_printf_float+0x1ae>
 8004f5a:	6121      	str	r1, [r4, #16]
 8004f5c:	b913      	cbnz	r3, 8004f64 <_printf_float+0x1a0>
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	07d0      	lsls	r0, r2, #31
 8004f62:	d502      	bpl.n	8004f6a <_printf_float+0x1a6>
 8004f64:	3301      	adds	r3, #1
 8004f66:	440b      	add	r3, r1
 8004f68:	6123      	str	r3, [r4, #16]
 8004f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	e7de      	b.n	8004f30 <_printf_float+0x16c>
 8004f72:	b913      	cbnz	r3, 8004f7a <_printf_float+0x1b6>
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	07d2      	lsls	r2, r2, #31
 8004f78:	d501      	bpl.n	8004f7e <_printf_float+0x1ba>
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	e7f4      	b.n	8004f68 <_printf_float+0x1a4>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e7f2      	b.n	8004f68 <_printf_float+0x1a4>
 8004f82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	db05      	blt.n	8004f98 <_printf_float+0x1d4>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	6121      	str	r1, [r4, #16]
 8004f90:	07d8      	lsls	r0, r3, #31
 8004f92:	d5ea      	bpl.n	8004f6a <_printf_float+0x1a6>
 8004f94:	1c4b      	adds	r3, r1, #1
 8004f96:	e7e7      	b.n	8004f68 <_printf_float+0x1a4>
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	bfd4      	ite	le
 8004f9c:	f1c1 0202 	rsble	r2, r1, #2
 8004fa0:	2201      	movgt	r2, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	e7e0      	b.n	8004f68 <_printf_float+0x1a4>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	055a      	lsls	r2, r3, #21
 8004faa:	d407      	bmi.n	8004fbc <_printf_float+0x1f8>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	4642      	mov	r2, r8
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d12c      	bne.n	8005014 <_printf_float+0x250>
 8004fba:	e764      	b.n	8004e86 <_printf_float+0xc2>
 8004fbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fc0:	f240 80e0 	bls.w	8005184 <_printf_float+0x3c0>
 8004fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f7fb fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d034      	beq.n	800503e <_printf_float+0x27a>
 8004fd4:	4a37      	ldr	r2, [pc, #220]	; (80050b4 <_printf_float+0x2f0>)
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f af51 	beq.w	8004e86 <_printf_float+0xc2>
 8004fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	db02      	blt.n	8004ff2 <_printf_float+0x22e>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	07d8      	lsls	r0, r3, #31
 8004ff0:	d510      	bpl.n	8005014 <_printf_float+0x250>
 8004ff2:	ee18 3a10 	vmov	r3, s16
 8004ff6:	4652      	mov	r2, sl
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b8      	blx	r7
 8004ffe:	3001      	adds	r0, #1
 8005000:	f43f af41 	beq.w	8004e86 <_printf_float+0xc2>
 8005004:	f04f 0800 	mov.w	r8, #0
 8005008:	f104 091a 	add.w	r9, r4, #26
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	4543      	cmp	r3, r8
 8005012:	dc09      	bgt.n	8005028 <_printf_float+0x264>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	f100 8105 	bmi.w	8005226 <_printf_float+0x462>
 800501c:	68e0      	ldr	r0, [r4, #12]
 800501e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005020:	4298      	cmp	r0, r3
 8005022:	bfb8      	it	lt
 8005024:	4618      	movlt	r0, r3
 8005026:	e730      	b.n	8004e8a <_printf_float+0xc6>
 8005028:	2301      	movs	r3, #1
 800502a:	464a      	mov	r2, r9
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af27 	beq.w	8004e86 <_printf_float+0xc2>
 8005038:	f108 0801 	add.w	r8, r8, #1
 800503c:	e7e6      	b.n	800500c <_printf_float+0x248>
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	dc39      	bgt.n	80050b8 <_printf_float+0x2f4>
 8005044:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <_printf_float+0x2f0>)
 8005046:	2301      	movs	r3, #1
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f af19 	beq.w	8004e86 <_printf_float+0xc2>
 8005054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005058:	4313      	orrs	r3, r2
 800505a:	d102      	bne.n	8005062 <_printf_float+0x29e>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	07d9      	lsls	r1, r3, #31
 8005060:	d5d8      	bpl.n	8005014 <_printf_float+0x250>
 8005062:	ee18 3a10 	vmov	r3, s16
 8005066:	4652      	mov	r2, sl
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	47b8      	blx	r7
 800506e:	3001      	adds	r0, #1
 8005070:	f43f af09 	beq.w	8004e86 <_printf_float+0xc2>
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	f104 0a1a 	add.w	sl, r4, #26
 800507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507e:	425b      	negs	r3, r3
 8005080:	454b      	cmp	r3, r9
 8005082:	dc01      	bgt.n	8005088 <_printf_float+0x2c4>
 8005084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005086:	e792      	b.n	8004fae <_printf_float+0x1ea>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f aef7 	beq.w	8004e86 <_printf_float+0xc2>
 8005098:	f109 0901 	add.w	r9, r9, #1
 800509c:	e7ee      	b.n	800507c <_printf_float+0x2b8>
 800509e:	bf00      	nop
 80050a0:	7fefffff 	.word	0x7fefffff
 80050a4:	08007a08 	.word	0x08007a08
 80050a8:	08007a0c 	.word	0x08007a0c
 80050ac:	08007a14 	.word	0x08007a14
 80050b0:	08007a10 	.word	0x08007a10
 80050b4:	08007a18 	.word	0x08007a18
 80050b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050bc:	429a      	cmp	r2, r3
 80050be:	bfa8      	it	ge
 80050c0:	461a      	movge	r2, r3
 80050c2:	2a00      	cmp	r2, #0
 80050c4:	4691      	mov	r9, r2
 80050c6:	dc37      	bgt.n	8005138 <_printf_float+0x374>
 80050c8:	f04f 0b00 	mov.w	fp, #0
 80050cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050d0:	f104 021a 	add.w	r2, r4, #26
 80050d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	eba3 0309 	sub.w	r3, r3, r9
 80050dc:	455b      	cmp	r3, fp
 80050de:	dc33      	bgt.n	8005148 <_printf_float+0x384>
 80050e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e4:	429a      	cmp	r2, r3
 80050e6:	db3b      	blt.n	8005160 <_printf_float+0x39c>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	07da      	lsls	r2, r3, #31
 80050ec:	d438      	bmi.n	8005160 <_printf_float+0x39c>
 80050ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050f0:	9b05      	ldr	r3, [sp, #20]
 80050f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	eba2 0901 	sub.w	r9, r2, r1
 80050fa:	4599      	cmp	r9, r3
 80050fc:	bfa8      	it	ge
 80050fe:	4699      	movge	r9, r3
 8005100:	f1b9 0f00 	cmp.w	r9, #0
 8005104:	dc35      	bgt.n	8005172 <_printf_float+0x3ae>
 8005106:	f04f 0800 	mov.w	r8, #0
 800510a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800510e:	f104 0a1a 	add.w	sl, r4, #26
 8005112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	eba3 0309 	sub.w	r3, r3, r9
 800511c:	4543      	cmp	r3, r8
 800511e:	f77f af79 	ble.w	8005014 <_printf_float+0x250>
 8005122:	2301      	movs	r3, #1
 8005124:	4652      	mov	r2, sl
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	f43f aeaa 	beq.w	8004e86 <_printf_float+0xc2>
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	e7ec      	b.n	8005112 <_printf_float+0x34e>
 8005138:	4613      	mov	r3, r2
 800513a:	4631      	mov	r1, r6
 800513c:	4642      	mov	r2, r8
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	d1c0      	bne.n	80050c8 <_printf_float+0x304>
 8005146:	e69e      	b.n	8004e86 <_printf_float+0xc2>
 8005148:	2301      	movs	r3, #1
 800514a:	4631      	mov	r1, r6
 800514c:	4628      	mov	r0, r5
 800514e:	9205      	str	r2, [sp, #20]
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f ae97 	beq.w	8004e86 <_printf_float+0xc2>
 8005158:	9a05      	ldr	r2, [sp, #20]
 800515a:	f10b 0b01 	add.w	fp, fp, #1
 800515e:	e7b9      	b.n	80050d4 <_printf_float+0x310>
 8005160:	ee18 3a10 	vmov	r3, s16
 8005164:	4652      	mov	r2, sl
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	d1be      	bne.n	80050ee <_printf_float+0x32a>
 8005170:	e689      	b.n	8004e86 <_printf_float+0xc2>
 8005172:	9a05      	ldr	r2, [sp, #20]
 8005174:	464b      	mov	r3, r9
 8005176:	4442      	add	r2, r8
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d1c1      	bne.n	8005106 <_printf_float+0x342>
 8005182:	e680      	b.n	8004e86 <_printf_float+0xc2>
 8005184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005186:	2a01      	cmp	r2, #1
 8005188:	dc01      	bgt.n	800518e <_printf_float+0x3ca>
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d538      	bpl.n	8005200 <_printf_float+0x43c>
 800518e:	2301      	movs	r3, #1
 8005190:	4642      	mov	r2, r8
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f ae74 	beq.w	8004e86 <_printf_float+0xc2>
 800519e:	ee18 3a10 	vmov	r3, s16
 80051a2:	4652      	mov	r2, sl
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f ae6b 	beq.w	8004e86 <_printf_float+0xc2>
 80051b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f7fb fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80051bc:	b9d8      	cbnz	r0, 80051f6 <_printf_float+0x432>
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	f108 0201 	add.w	r2, r8, #1
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	d10e      	bne.n	80051ee <_printf_float+0x42a>
 80051d0:	e659      	b.n	8004e86 <_printf_float+0xc2>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4652      	mov	r2, sl
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f ae52 	beq.w	8004e86 <_printf_float+0xc2>
 80051e2:	f108 0801 	add.w	r8, r8, #1
 80051e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	4543      	cmp	r3, r8
 80051ec:	dcf1      	bgt.n	80051d2 <_printf_float+0x40e>
 80051ee:	464b      	mov	r3, r9
 80051f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051f4:	e6dc      	b.n	8004fb0 <_printf_float+0x1ec>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	f104 0a1a 	add.w	sl, r4, #26
 80051fe:	e7f2      	b.n	80051e6 <_printf_float+0x422>
 8005200:	2301      	movs	r3, #1
 8005202:	4642      	mov	r2, r8
 8005204:	e7df      	b.n	80051c6 <_printf_float+0x402>
 8005206:	2301      	movs	r3, #1
 8005208:	464a      	mov	r2, r9
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae38 	beq.w	8004e86 <_printf_float+0xc2>
 8005216:	f108 0801 	add.w	r8, r8, #1
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	4543      	cmp	r3, r8
 8005222:	dcf0      	bgt.n	8005206 <_printf_float+0x442>
 8005224:	e6fa      	b.n	800501c <_printf_float+0x258>
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	f104 0919 	add.w	r9, r4, #25
 800522e:	e7f4      	b.n	800521a <_printf_float+0x456>

08005230 <_printf_common>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	4616      	mov	r6, r2
 8005236:	4699      	mov	r9, r3
 8005238:	688a      	ldr	r2, [r1, #8]
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005240:	4293      	cmp	r3, r2
 8005242:	bfb8      	it	lt
 8005244:	4613      	movlt	r3, r2
 8005246:	6033      	str	r3, [r6, #0]
 8005248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800524c:	4607      	mov	r7, r0
 800524e:	460c      	mov	r4, r1
 8005250:	b10a      	cbz	r2, 8005256 <_printf_common+0x26>
 8005252:	3301      	adds	r3, #1
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	0699      	lsls	r1, r3, #26
 800525a:	bf42      	ittt	mi
 800525c:	6833      	ldrmi	r3, [r6, #0]
 800525e:	3302      	addmi	r3, #2
 8005260:	6033      	strmi	r3, [r6, #0]
 8005262:	6825      	ldr	r5, [r4, #0]
 8005264:	f015 0506 	ands.w	r5, r5, #6
 8005268:	d106      	bne.n	8005278 <_printf_common+0x48>
 800526a:	f104 0a19 	add.w	sl, r4, #25
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	6832      	ldr	r2, [r6, #0]
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	42ab      	cmp	r3, r5
 8005276:	dc26      	bgt.n	80052c6 <_printf_common+0x96>
 8005278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800527c:	1e13      	subs	r3, r2, #0
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	bf18      	it	ne
 8005282:	2301      	movne	r3, #1
 8005284:	0692      	lsls	r2, r2, #26
 8005286:	d42b      	bmi.n	80052e0 <_printf_common+0xb0>
 8005288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528c:	4649      	mov	r1, r9
 800528e:	4638      	mov	r0, r7
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d01e      	beq.n	80052d4 <_printf_common+0xa4>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	68e5      	ldr	r5, [r4, #12]
 800529a:	6832      	ldr	r2, [r6, #0]
 800529c:	f003 0306 	and.w	r3, r3, #6
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	bf08      	it	eq
 80052a4:	1aad      	subeq	r5, r5, r2
 80052a6:	68a3      	ldr	r3, [r4, #8]
 80052a8:	6922      	ldr	r2, [r4, #16]
 80052aa:	bf0c      	ite	eq
 80052ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b0:	2500      	movne	r5, #0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	bfc4      	itt	gt
 80052b6:	1a9b      	subgt	r3, r3, r2
 80052b8:	18ed      	addgt	r5, r5, r3
 80052ba:	2600      	movs	r6, #0
 80052bc:	341a      	adds	r4, #26
 80052be:	42b5      	cmp	r5, r6
 80052c0:	d11a      	bne.n	80052f8 <_printf_common+0xc8>
 80052c2:	2000      	movs	r0, #0
 80052c4:	e008      	b.n	80052d8 <_printf_common+0xa8>
 80052c6:	2301      	movs	r3, #1
 80052c8:	4652      	mov	r2, sl
 80052ca:	4649      	mov	r1, r9
 80052cc:	4638      	mov	r0, r7
 80052ce:	47c0      	blx	r8
 80052d0:	3001      	adds	r0, #1
 80052d2:	d103      	bne.n	80052dc <_printf_common+0xac>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	3501      	adds	r5, #1
 80052de:	e7c6      	b.n	800526e <_printf_common+0x3e>
 80052e0:	18e1      	adds	r1, r4, r3
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	2030      	movs	r0, #48	; 0x30
 80052e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ea:	4422      	add	r2, r4
 80052ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052f4:	3302      	adds	r3, #2
 80052f6:	e7c7      	b.n	8005288 <_printf_common+0x58>
 80052f8:	2301      	movs	r3, #1
 80052fa:	4622      	mov	r2, r4
 80052fc:	4649      	mov	r1, r9
 80052fe:	4638      	mov	r0, r7
 8005300:	47c0      	blx	r8
 8005302:	3001      	adds	r0, #1
 8005304:	d0e6      	beq.n	80052d4 <_printf_common+0xa4>
 8005306:	3601      	adds	r6, #1
 8005308:	e7d9      	b.n	80052be <_printf_common+0x8e>
	...

0800530c <_printf_i>:
 800530c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	460c      	mov	r4, r1
 8005312:	4691      	mov	r9, r2
 8005314:	7e27      	ldrb	r7, [r4, #24]
 8005316:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005318:	2f78      	cmp	r7, #120	; 0x78
 800531a:	4680      	mov	r8, r0
 800531c:	469a      	mov	sl, r3
 800531e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005322:	d807      	bhi.n	8005334 <_printf_i+0x28>
 8005324:	2f62      	cmp	r7, #98	; 0x62
 8005326:	d80a      	bhi.n	800533e <_printf_i+0x32>
 8005328:	2f00      	cmp	r7, #0
 800532a:	f000 80d8 	beq.w	80054de <_printf_i+0x1d2>
 800532e:	2f58      	cmp	r7, #88	; 0x58
 8005330:	f000 80a3 	beq.w	800547a <_printf_i+0x16e>
 8005334:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800533c:	e03a      	b.n	80053b4 <_printf_i+0xa8>
 800533e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005342:	2b15      	cmp	r3, #21
 8005344:	d8f6      	bhi.n	8005334 <_printf_i+0x28>
 8005346:	a001      	add	r0, pc, #4	; (adr r0, 800534c <_printf_i+0x40>)
 8005348:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800534c:	080053a5 	.word	0x080053a5
 8005350:	080053b9 	.word	0x080053b9
 8005354:	08005335 	.word	0x08005335
 8005358:	08005335 	.word	0x08005335
 800535c:	08005335 	.word	0x08005335
 8005360:	08005335 	.word	0x08005335
 8005364:	080053b9 	.word	0x080053b9
 8005368:	08005335 	.word	0x08005335
 800536c:	08005335 	.word	0x08005335
 8005370:	08005335 	.word	0x08005335
 8005374:	08005335 	.word	0x08005335
 8005378:	080054c5 	.word	0x080054c5
 800537c:	080053e9 	.word	0x080053e9
 8005380:	080054a7 	.word	0x080054a7
 8005384:	08005335 	.word	0x08005335
 8005388:	08005335 	.word	0x08005335
 800538c:	080054e7 	.word	0x080054e7
 8005390:	08005335 	.word	0x08005335
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005335 	.word	0x08005335
 800539c:	08005335 	.word	0x08005335
 80053a0:	080054af 	.word	0x080054af
 80053a4:	680b      	ldr	r3, [r1, #0]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	600a      	str	r2, [r1, #0]
 80053ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0a3      	b.n	8005500 <_printf_i+0x1f4>
 80053b8:	6825      	ldr	r5, [r4, #0]
 80053ba:	6808      	ldr	r0, [r1, #0]
 80053bc:	062e      	lsls	r6, r5, #24
 80053be:	f100 0304 	add.w	r3, r0, #4
 80053c2:	d50a      	bpl.n	80053da <_printf_i+0xce>
 80053c4:	6805      	ldr	r5, [r0, #0]
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	da03      	bge.n	80053d4 <_printf_i+0xc8>
 80053cc:	232d      	movs	r3, #45	; 0x2d
 80053ce:	426d      	negs	r5, r5
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d4:	485e      	ldr	r0, [pc, #376]	; (8005550 <_printf_i+0x244>)
 80053d6:	230a      	movs	r3, #10
 80053d8:	e019      	b.n	800540e <_printf_i+0x102>
 80053da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053de:	6805      	ldr	r5, [r0, #0]
 80053e0:	600b      	str	r3, [r1, #0]
 80053e2:	bf18      	it	ne
 80053e4:	b22d      	sxthne	r5, r5
 80053e6:	e7ef      	b.n	80053c8 <_printf_i+0xbc>
 80053e8:	680b      	ldr	r3, [r1, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	1d18      	adds	r0, r3, #4
 80053ee:	6008      	str	r0, [r1, #0]
 80053f0:	0628      	lsls	r0, r5, #24
 80053f2:	d501      	bpl.n	80053f8 <_printf_i+0xec>
 80053f4:	681d      	ldr	r5, [r3, #0]
 80053f6:	e002      	b.n	80053fe <_printf_i+0xf2>
 80053f8:	0669      	lsls	r1, r5, #25
 80053fa:	d5fb      	bpl.n	80053f4 <_printf_i+0xe8>
 80053fc:	881d      	ldrh	r5, [r3, #0]
 80053fe:	4854      	ldr	r0, [pc, #336]	; (8005550 <_printf_i+0x244>)
 8005400:	2f6f      	cmp	r7, #111	; 0x6f
 8005402:	bf0c      	ite	eq
 8005404:	2308      	moveq	r3, #8
 8005406:	230a      	movne	r3, #10
 8005408:	2100      	movs	r1, #0
 800540a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800540e:	6866      	ldr	r6, [r4, #4]
 8005410:	60a6      	str	r6, [r4, #8]
 8005412:	2e00      	cmp	r6, #0
 8005414:	bfa2      	ittt	ge
 8005416:	6821      	ldrge	r1, [r4, #0]
 8005418:	f021 0104 	bicge.w	r1, r1, #4
 800541c:	6021      	strge	r1, [r4, #0]
 800541e:	b90d      	cbnz	r5, 8005424 <_printf_i+0x118>
 8005420:	2e00      	cmp	r6, #0
 8005422:	d04d      	beq.n	80054c0 <_printf_i+0x1b4>
 8005424:	4616      	mov	r6, r2
 8005426:	fbb5 f1f3 	udiv	r1, r5, r3
 800542a:	fb03 5711 	mls	r7, r3, r1, r5
 800542e:	5dc7      	ldrb	r7, [r0, r7]
 8005430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005434:	462f      	mov	r7, r5
 8005436:	42bb      	cmp	r3, r7
 8005438:	460d      	mov	r5, r1
 800543a:	d9f4      	bls.n	8005426 <_printf_i+0x11a>
 800543c:	2b08      	cmp	r3, #8
 800543e:	d10b      	bne.n	8005458 <_printf_i+0x14c>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07df      	lsls	r7, r3, #31
 8005444:	d508      	bpl.n	8005458 <_printf_i+0x14c>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6861      	ldr	r1, [r4, #4]
 800544a:	4299      	cmp	r1, r3
 800544c:	bfde      	ittt	le
 800544e:	2330      	movle	r3, #48	; 0x30
 8005450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005454:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005458:	1b92      	subs	r2, r2, r6
 800545a:	6122      	str	r2, [r4, #16]
 800545c:	f8cd a000 	str.w	sl, [sp]
 8005460:	464b      	mov	r3, r9
 8005462:	aa03      	add	r2, sp, #12
 8005464:	4621      	mov	r1, r4
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fee2 	bl	8005230 <_printf_common>
 800546c:	3001      	adds	r0, #1
 800546e:	d14c      	bne.n	800550a <_printf_i+0x1fe>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	b004      	add	sp, #16
 8005476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547a:	4835      	ldr	r0, [pc, #212]	; (8005550 <_printf_i+0x244>)
 800547c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	680e      	ldr	r6, [r1, #0]
 8005484:	061f      	lsls	r7, r3, #24
 8005486:	f856 5b04 	ldr.w	r5, [r6], #4
 800548a:	600e      	str	r6, [r1, #0]
 800548c:	d514      	bpl.n	80054b8 <_printf_i+0x1ac>
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	bf44      	itt	mi
 8005492:	f043 0320 	orrmi.w	r3, r3, #32
 8005496:	6023      	strmi	r3, [r4, #0]
 8005498:	b91d      	cbnz	r5, 80054a2 <_printf_i+0x196>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f023 0320 	bic.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	2310      	movs	r3, #16
 80054a4:	e7b0      	b.n	8005408 <_printf_i+0xfc>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	2378      	movs	r3, #120	; 0x78
 80054b0:	4828      	ldr	r0, [pc, #160]	; (8005554 <_printf_i+0x248>)
 80054b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054b6:	e7e3      	b.n	8005480 <_printf_i+0x174>
 80054b8:	065e      	lsls	r6, r3, #25
 80054ba:	bf48      	it	mi
 80054bc:	b2ad      	uxthmi	r5, r5
 80054be:	e7e6      	b.n	800548e <_printf_i+0x182>
 80054c0:	4616      	mov	r6, r2
 80054c2:	e7bb      	b.n	800543c <_printf_i+0x130>
 80054c4:	680b      	ldr	r3, [r1, #0]
 80054c6:	6826      	ldr	r6, [r4, #0]
 80054c8:	6960      	ldr	r0, [r4, #20]
 80054ca:	1d1d      	adds	r5, r3, #4
 80054cc:	600d      	str	r5, [r1, #0]
 80054ce:	0635      	lsls	r5, r6, #24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	d501      	bpl.n	80054d8 <_printf_i+0x1cc>
 80054d4:	6018      	str	r0, [r3, #0]
 80054d6:	e002      	b.n	80054de <_printf_i+0x1d2>
 80054d8:	0671      	lsls	r1, r6, #25
 80054da:	d5fb      	bpl.n	80054d4 <_printf_i+0x1c8>
 80054dc:	8018      	strh	r0, [r3, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	4616      	mov	r6, r2
 80054e4:	e7ba      	b.n	800545c <_printf_i+0x150>
 80054e6:	680b      	ldr	r3, [r1, #0]
 80054e8:	1d1a      	adds	r2, r3, #4
 80054ea:	600a      	str	r2, [r1, #0]
 80054ec:	681e      	ldr	r6, [r3, #0]
 80054ee:	6862      	ldr	r2, [r4, #4]
 80054f0:	2100      	movs	r1, #0
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7fa fe74 	bl	80001e0 <memchr>
 80054f8:	b108      	cbz	r0, 80054fe <_printf_i+0x1f2>
 80054fa:	1b80      	subs	r0, r0, r6
 80054fc:	6060      	str	r0, [r4, #4]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	6123      	str	r3, [r4, #16]
 8005502:	2300      	movs	r3, #0
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005508:	e7a8      	b.n	800545c <_printf_i+0x150>
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	4632      	mov	r2, r6
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	47d0      	blx	sl
 8005514:	3001      	adds	r0, #1
 8005516:	d0ab      	beq.n	8005470 <_printf_i+0x164>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	079b      	lsls	r3, r3, #30
 800551c:	d413      	bmi.n	8005546 <_printf_i+0x23a>
 800551e:	68e0      	ldr	r0, [r4, #12]
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	4298      	cmp	r0, r3
 8005524:	bfb8      	it	lt
 8005526:	4618      	movlt	r0, r3
 8005528:	e7a4      	b.n	8005474 <_printf_i+0x168>
 800552a:	2301      	movs	r3, #1
 800552c:	4632      	mov	r2, r6
 800552e:	4649      	mov	r1, r9
 8005530:	4640      	mov	r0, r8
 8005532:	47d0      	blx	sl
 8005534:	3001      	adds	r0, #1
 8005536:	d09b      	beq.n	8005470 <_printf_i+0x164>
 8005538:	3501      	adds	r5, #1
 800553a:	68e3      	ldr	r3, [r4, #12]
 800553c:	9903      	ldr	r1, [sp, #12]
 800553e:	1a5b      	subs	r3, r3, r1
 8005540:	42ab      	cmp	r3, r5
 8005542:	dcf2      	bgt.n	800552a <_printf_i+0x21e>
 8005544:	e7eb      	b.n	800551e <_printf_i+0x212>
 8005546:	2500      	movs	r5, #0
 8005548:	f104 0619 	add.w	r6, r4, #25
 800554c:	e7f5      	b.n	800553a <_printf_i+0x22e>
 800554e:	bf00      	nop
 8005550:	08007a1a 	.word	0x08007a1a
 8005554:	08007a2b 	.word	0x08007a2b

08005558 <siprintf>:
 8005558:	b40e      	push	{r1, r2, r3}
 800555a:	b500      	push	{lr}
 800555c:	b09c      	sub	sp, #112	; 0x70
 800555e:	ab1d      	add	r3, sp, #116	; 0x74
 8005560:	9002      	str	r0, [sp, #8]
 8005562:	9006      	str	r0, [sp, #24]
 8005564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005568:	4809      	ldr	r0, [pc, #36]	; (8005590 <siprintf+0x38>)
 800556a:	9107      	str	r1, [sp, #28]
 800556c:	9104      	str	r1, [sp, #16]
 800556e:	4909      	ldr	r1, [pc, #36]	; (8005594 <siprintf+0x3c>)
 8005570:	f853 2b04 	ldr.w	r2, [r3], #4
 8005574:	9105      	str	r1, [sp, #20]
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	a902      	add	r1, sp, #8
 800557c:	f001 fb32 	bl	8006be4 <_svfiprintf_r>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	b01c      	add	sp, #112	; 0x70
 8005588:	f85d eb04 	ldr.w	lr, [sp], #4
 800558c:	b003      	add	sp, #12
 800558e:	4770      	bx	lr
 8005590:	2000000c 	.word	0x2000000c
 8005594:	ffff0208 	.word	0xffff0208

08005598 <quorem>:
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	6903      	ldr	r3, [r0, #16]
 800559e:	690c      	ldr	r4, [r1, #16]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	4607      	mov	r7, r0
 80055a4:	f2c0 8081 	blt.w	80056aa <quorem+0x112>
 80055a8:	3c01      	subs	r4, #1
 80055aa:	f101 0814 	add.w	r8, r1, #20
 80055ae:	f100 0514 	add.w	r5, r0, #20
 80055b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c0:	3301      	adds	r3, #1
 80055c2:	429a      	cmp	r2, r3
 80055c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80055d0:	d331      	bcc.n	8005636 <quorem+0x9e>
 80055d2:	f04f 0e00 	mov.w	lr, #0
 80055d6:	4640      	mov	r0, r8
 80055d8:	46ac      	mov	ip, r5
 80055da:	46f2      	mov	sl, lr
 80055dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80055e0:	b293      	uxth	r3, r2
 80055e2:	fb06 e303 	mla	r3, r6, r3, lr
 80055e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ebaa 0303 	sub.w	r3, sl, r3
 80055f0:	0c12      	lsrs	r2, r2, #16
 80055f2:	f8dc a000 	ldr.w	sl, [ip]
 80055f6:	fb06 e202 	mla	r2, r6, r2, lr
 80055fa:	fa13 f38a 	uxtah	r3, r3, sl
 80055fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005602:	fa1f fa82 	uxth.w	sl, r2
 8005606:	f8dc 2000 	ldr.w	r2, [ip]
 800560a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800560e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005618:	4581      	cmp	r9, r0
 800561a:	f84c 3b04 	str.w	r3, [ip], #4
 800561e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005622:	d2db      	bcs.n	80055dc <quorem+0x44>
 8005624:	f855 300b 	ldr.w	r3, [r5, fp]
 8005628:	b92b      	cbnz	r3, 8005636 <quorem+0x9e>
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	3b04      	subs	r3, #4
 800562e:	429d      	cmp	r5, r3
 8005630:	461a      	mov	r2, r3
 8005632:	d32e      	bcc.n	8005692 <quorem+0xfa>
 8005634:	613c      	str	r4, [r7, #16]
 8005636:	4638      	mov	r0, r7
 8005638:	f001 f8be 	bl	80067b8 <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	db24      	blt.n	800568a <quorem+0xf2>
 8005640:	3601      	adds	r6, #1
 8005642:	4628      	mov	r0, r5
 8005644:	f04f 0c00 	mov.w	ip, #0
 8005648:	f858 2b04 	ldr.w	r2, [r8], #4
 800564c:	f8d0 e000 	ldr.w	lr, [r0]
 8005650:	b293      	uxth	r3, r2
 8005652:	ebac 0303 	sub.w	r3, ip, r3
 8005656:	0c12      	lsrs	r2, r2, #16
 8005658:	fa13 f38e 	uxtah	r3, r3, lr
 800565c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800566a:	45c1      	cmp	r9, r8
 800566c:	f840 3b04 	str.w	r3, [r0], #4
 8005670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005674:	d2e8      	bcs.n	8005648 <quorem+0xb0>
 8005676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800567a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800567e:	b922      	cbnz	r2, 800568a <quorem+0xf2>
 8005680:	3b04      	subs	r3, #4
 8005682:	429d      	cmp	r5, r3
 8005684:	461a      	mov	r2, r3
 8005686:	d30a      	bcc.n	800569e <quorem+0x106>
 8005688:	613c      	str	r4, [r7, #16]
 800568a:	4630      	mov	r0, r6
 800568c:	b003      	add	sp, #12
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	3b04      	subs	r3, #4
 8005696:	2a00      	cmp	r2, #0
 8005698:	d1cc      	bne.n	8005634 <quorem+0x9c>
 800569a:	3c01      	subs	r4, #1
 800569c:	e7c7      	b.n	800562e <quorem+0x96>
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	3b04      	subs	r3, #4
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d1f0      	bne.n	8005688 <quorem+0xf0>
 80056a6:	3c01      	subs	r4, #1
 80056a8:	e7eb      	b.n	8005682 <quorem+0xea>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e7ee      	b.n	800568c <quorem+0xf4>
	...

080056b0 <_dtoa_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ed2d 8b02 	vpush	{d8}
 80056b8:	ec57 6b10 	vmov	r6, r7, d0
 80056bc:	b095      	sub	sp, #84	; 0x54
 80056be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056c4:	9105      	str	r1, [sp, #20]
 80056c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80056ca:	4604      	mov	r4, r0
 80056cc:	9209      	str	r2, [sp, #36]	; 0x24
 80056ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80056d0:	b975      	cbnz	r5, 80056f0 <_dtoa_r+0x40>
 80056d2:	2010      	movs	r0, #16
 80056d4:	f000 fddc 	bl	8006290 <malloc>
 80056d8:	4602      	mov	r2, r0
 80056da:	6260      	str	r0, [r4, #36]	; 0x24
 80056dc:	b920      	cbnz	r0, 80056e8 <_dtoa_r+0x38>
 80056de:	4bb2      	ldr	r3, [pc, #712]	; (80059a8 <_dtoa_r+0x2f8>)
 80056e0:	21ea      	movs	r1, #234	; 0xea
 80056e2:	48b2      	ldr	r0, [pc, #712]	; (80059ac <_dtoa_r+0x2fc>)
 80056e4:	f001 fb8e 	bl	8006e04 <__assert_func>
 80056e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ec:	6005      	str	r5, [r0, #0]
 80056ee:	60c5      	str	r5, [r0, #12]
 80056f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	b151      	cbz	r1, 800570c <_dtoa_r+0x5c>
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	604a      	str	r2, [r1, #4]
 80056fa:	2301      	movs	r3, #1
 80056fc:	4093      	lsls	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fe1b 	bl	800633c <_Bfree>
 8005706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	1e3b      	subs	r3, r7, #0
 800570e:	bfb9      	ittee	lt
 8005710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005714:	9303      	strlt	r3, [sp, #12]
 8005716:	2300      	movge	r3, #0
 8005718:	f8c8 3000 	strge.w	r3, [r8]
 800571c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005720:	4ba3      	ldr	r3, [pc, #652]	; (80059b0 <_dtoa_r+0x300>)
 8005722:	bfbc      	itt	lt
 8005724:	2201      	movlt	r2, #1
 8005726:	f8c8 2000 	strlt.w	r2, [r8]
 800572a:	ea33 0309 	bics.w	r3, r3, r9
 800572e:	d11b      	bne.n	8005768 <_dtoa_r+0xb8>
 8005730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005732:	f242 730f 	movw	r3, #9999	; 0x270f
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800573c:	4333      	orrs	r3, r6
 800573e:	f000 857a 	beq.w	8006236 <_dtoa_r+0xb86>
 8005742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005744:	b963      	cbnz	r3, 8005760 <_dtoa_r+0xb0>
 8005746:	4b9b      	ldr	r3, [pc, #620]	; (80059b4 <_dtoa_r+0x304>)
 8005748:	e024      	b.n	8005794 <_dtoa_r+0xe4>
 800574a:	4b9b      	ldr	r3, [pc, #620]	; (80059b8 <_dtoa_r+0x308>)
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	9800      	ldr	r0, [sp, #0]
 8005756:	b015      	add	sp, #84	; 0x54
 8005758:	ecbd 8b02 	vpop	{d8}
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	4b94      	ldr	r3, [pc, #592]	; (80059b4 <_dtoa_r+0x304>)
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	3303      	adds	r3, #3
 8005766:	e7f3      	b.n	8005750 <_dtoa_r+0xa0>
 8005768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	ec51 0b17 	vmov	r0, r1, d7
 8005772:	2300      	movs	r3, #0
 8005774:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005778:	f7fb f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800577c:	4680      	mov	r8, r0
 800577e:	b158      	cbz	r0, 8005798 <_dtoa_r+0xe8>
 8005780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005782:	2301      	movs	r3, #1
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8551 	beq.w	8006230 <_dtoa_r+0xb80>
 800578e:	488b      	ldr	r0, [pc, #556]	; (80059bc <_dtoa_r+0x30c>)
 8005790:	6018      	str	r0, [r3, #0]
 8005792:	1e43      	subs	r3, r0, #1
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	e7dd      	b.n	8005754 <_dtoa_r+0xa4>
 8005798:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800579c:	aa12      	add	r2, sp, #72	; 0x48
 800579e:	a913      	add	r1, sp, #76	; 0x4c
 80057a0:	4620      	mov	r0, r4
 80057a2:	f001 f8ad 	bl	8006900 <__d2b>
 80057a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057aa:	4683      	mov	fp, r0
 80057ac:	2d00      	cmp	r5, #0
 80057ae:	d07c      	beq.n	80058aa <_dtoa_r+0x1fa>
 80057b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80057b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80057be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057ca:	4b7d      	ldr	r3, [pc, #500]	; (80059c0 <_dtoa_r+0x310>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fa fd59 	bl	8000288 <__aeabi_dsub>
 80057d6:	a36e      	add	r3, pc, #440	; (adr r3, 8005990 <_dtoa_r+0x2e0>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	a36d      	add	r3, pc, #436	; (adr r3, 8005998 <_dtoa_r+0x2e8>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f7fa fd51 	bl	800028c <__adddf3>
 80057ea:	4606      	mov	r6, r0
 80057ec:	4628      	mov	r0, r5
 80057ee:	460f      	mov	r7, r1
 80057f0:	f7fa fe98 	bl	8000524 <__aeabi_i2d>
 80057f4:	a36a      	add	r3, pc, #424	; (adr r3, 80059a0 <_dtoa_r+0x2f0>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fefd 	bl	80005f8 <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fd41 	bl	800028c <__adddf3>
 800580a:	4606      	mov	r6, r0
 800580c:	460f      	mov	r7, r1
 800580e:	f7fb f9a3 	bl	8000b58 <__aeabi_d2iz>
 8005812:	2200      	movs	r2, #0
 8005814:	4682      	mov	sl, r0
 8005816:	2300      	movs	r3, #0
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f95e 	bl	8000adc <__aeabi_dcmplt>
 8005820:	b148      	cbz	r0, 8005836 <_dtoa_r+0x186>
 8005822:	4650      	mov	r0, sl
 8005824:	f7fa fe7e 	bl	8000524 <__aeabi_i2d>
 8005828:	4632      	mov	r2, r6
 800582a:	463b      	mov	r3, r7
 800582c:	f7fb f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005830:	b908      	cbnz	r0, 8005836 <_dtoa_r+0x186>
 8005832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005836:	f1ba 0f16 	cmp.w	sl, #22
 800583a:	d854      	bhi.n	80058e6 <_dtoa_r+0x236>
 800583c:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <_dtoa_r+0x314>)
 800583e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800584a:	f7fb f947 	bl	8000adc <__aeabi_dcmplt>
 800584e:	2800      	cmp	r0, #0
 8005850:	d04b      	beq.n	80058ea <_dtoa_r+0x23a>
 8005852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005856:	2300      	movs	r3, #0
 8005858:	930e      	str	r3, [sp, #56]	; 0x38
 800585a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800585c:	1b5d      	subs	r5, r3, r5
 800585e:	1e6b      	subs	r3, r5, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	bf43      	ittte	mi
 8005864:	2300      	movmi	r3, #0
 8005866:	f1c5 0801 	rsbmi	r8, r5, #1
 800586a:	9304      	strmi	r3, [sp, #16]
 800586c:	f04f 0800 	movpl.w	r8, #0
 8005870:	f1ba 0f00 	cmp.w	sl, #0
 8005874:	db3b      	blt.n	80058ee <_dtoa_r+0x23e>
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800587c:	4453      	add	r3, sl
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	9306      	str	r3, [sp, #24]
 8005884:	9b05      	ldr	r3, [sp, #20]
 8005886:	2b09      	cmp	r3, #9
 8005888:	d869      	bhi.n	800595e <_dtoa_r+0x2ae>
 800588a:	2b05      	cmp	r3, #5
 800588c:	bfc4      	itt	gt
 800588e:	3b04      	subgt	r3, #4
 8005890:	9305      	strgt	r3, [sp, #20]
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	f1a3 0302 	sub.w	r3, r3, #2
 8005898:	bfcc      	ite	gt
 800589a:	2500      	movgt	r5, #0
 800589c:	2501      	movle	r5, #1
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d869      	bhi.n	8005976 <_dtoa_r+0x2c6>
 80058a2:	e8df f003 	tbb	[pc, r3]
 80058a6:	4e2c      	.short	0x4e2c
 80058a8:	5a4c      	.short	0x5a4c
 80058aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80058ae:	441d      	add	r5, r3
 80058b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	bfc1      	itttt	gt
 80058b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80058c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058c8:	bfda      	itte	le
 80058ca:	f1c3 0320 	rsble	r3, r3, #32
 80058ce:	fa06 f003 	lslle.w	r0, r6, r3
 80058d2:	4318      	orrgt	r0, r3
 80058d4:	f7fa fe16 	bl	8000504 <__aeabi_ui2d>
 80058d8:	2301      	movs	r3, #1
 80058da:	4606      	mov	r6, r0
 80058dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058e0:	3d01      	subs	r5, #1
 80058e2:	9310      	str	r3, [sp, #64]	; 0x40
 80058e4:	e771      	b.n	80057ca <_dtoa_r+0x11a>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e7b6      	b.n	8005858 <_dtoa_r+0x1a8>
 80058ea:	900e      	str	r0, [sp, #56]	; 0x38
 80058ec:	e7b5      	b.n	800585a <_dtoa_r+0x1aa>
 80058ee:	f1ca 0300 	rsb	r3, sl, #0
 80058f2:	9306      	str	r3, [sp, #24]
 80058f4:	2300      	movs	r3, #0
 80058f6:	eba8 080a 	sub.w	r8, r8, sl
 80058fa:	930d      	str	r3, [sp, #52]	; 0x34
 80058fc:	e7c2      	b.n	8005884 <_dtoa_r+0x1d4>
 80058fe:	2300      	movs	r3, #0
 8005900:	9308      	str	r3, [sp, #32]
 8005902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	dc39      	bgt.n	800597c <_dtoa_r+0x2cc>
 8005908:	f04f 0901 	mov.w	r9, #1
 800590c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005910:	464b      	mov	r3, r9
 8005912:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005916:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005918:	2200      	movs	r2, #0
 800591a:	6042      	str	r2, [r0, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	f102 0614 	add.w	r6, r2, #20
 8005922:	429e      	cmp	r6, r3
 8005924:	6841      	ldr	r1, [r0, #4]
 8005926:	d92f      	bls.n	8005988 <_dtoa_r+0x2d8>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fcc7 	bl	80062bc <_Balloc>
 800592e:	9000      	str	r0, [sp, #0]
 8005930:	2800      	cmp	r0, #0
 8005932:	d14b      	bne.n	80059cc <_dtoa_r+0x31c>
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <_dtoa_r+0x318>)
 8005936:	4602      	mov	r2, r0
 8005938:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800593c:	e6d1      	b.n	80056e2 <_dtoa_r+0x32>
 800593e:	2301      	movs	r3, #1
 8005940:	e7de      	b.n	8005900 <_dtoa_r+0x250>
 8005942:	2300      	movs	r3, #0
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	eb0a 0903 	add.w	r9, sl, r3
 800594c:	f109 0301 	add.w	r3, r9, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	bfb8      	it	lt
 8005956:	2301      	movlt	r3, #1
 8005958:	e7dd      	b.n	8005916 <_dtoa_r+0x266>
 800595a:	2301      	movs	r3, #1
 800595c:	e7f2      	b.n	8005944 <_dtoa_r+0x294>
 800595e:	2501      	movs	r5, #1
 8005960:	2300      	movs	r3, #0
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	9508      	str	r5, [sp, #32]
 8005966:	f04f 39ff 	mov.w	r9, #4294967295
 800596a:	2200      	movs	r2, #0
 800596c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005970:	2312      	movs	r3, #18
 8005972:	9209      	str	r2, [sp, #36]	; 0x24
 8005974:	e7cf      	b.n	8005916 <_dtoa_r+0x266>
 8005976:	2301      	movs	r3, #1
 8005978:	9308      	str	r3, [sp, #32]
 800597a:	e7f4      	b.n	8005966 <_dtoa_r+0x2b6>
 800597c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005980:	f8cd 9004 	str.w	r9, [sp, #4]
 8005984:	464b      	mov	r3, r9
 8005986:	e7c6      	b.n	8005916 <_dtoa_r+0x266>
 8005988:	3101      	adds	r1, #1
 800598a:	6041      	str	r1, [r0, #4]
 800598c:	0052      	lsls	r2, r2, #1
 800598e:	e7c6      	b.n	800591e <_dtoa_r+0x26e>
 8005990:	636f4361 	.word	0x636f4361
 8005994:	3fd287a7 	.word	0x3fd287a7
 8005998:	8b60c8b3 	.word	0x8b60c8b3
 800599c:	3fc68a28 	.word	0x3fc68a28
 80059a0:	509f79fb 	.word	0x509f79fb
 80059a4:	3fd34413 	.word	0x3fd34413
 80059a8:	08007a49 	.word	0x08007a49
 80059ac:	08007a60 	.word	0x08007a60
 80059b0:	7ff00000 	.word	0x7ff00000
 80059b4:	08007a45 	.word	0x08007a45
 80059b8:	08007a3c 	.word	0x08007a3c
 80059bc:	08007a19 	.word	0x08007a19
 80059c0:	3ff80000 	.word	0x3ff80000
 80059c4:	08007b58 	.word	0x08007b58
 80059c8:	08007abf 	.word	0x08007abf
 80059cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ce:	9a00      	ldr	r2, [sp, #0]
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	2b0e      	cmp	r3, #14
 80059d6:	f200 80ad 	bhi.w	8005b34 <_dtoa_r+0x484>
 80059da:	2d00      	cmp	r5, #0
 80059dc:	f000 80aa 	beq.w	8005b34 <_dtoa_r+0x484>
 80059e0:	f1ba 0f00 	cmp.w	sl, #0
 80059e4:	dd36      	ble.n	8005a54 <_dtoa_r+0x3a4>
 80059e6:	4ac3      	ldr	r2, [pc, #780]	; (8005cf4 <_dtoa_r+0x644>)
 80059e8:	f00a 030f 	and.w	r3, sl, #15
 80059ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059f0:	ed93 7b00 	vldr	d7, [r3]
 80059f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80059f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80059fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005a00:	eef0 8a67 	vmov.f32	s17, s15
 8005a04:	d016      	beq.n	8005a34 <_dtoa_r+0x384>
 8005a06:	4bbc      	ldr	r3, [pc, #752]	; (8005cf8 <_dtoa_r+0x648>)
 8005a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a10:	f7fa ff1c 	bl	800084c <__aeabi_ddiv>
 8005a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a18:	f007 070f 	and.w	r7, r7, #15
 8005a1c:	2503      	movs	r5, #3
 8005a1e:	4eb6      	ldr	r6, [pc, #728]	; (8005cf8 <_dtoa_r+0x648>)
 8005a20:	b957      	cbnz	r7, 8005a38 <_dtoa_r+0x388>
 8005a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a26:	ec53 2b18 	vmov	r2, r3, d8
 8005a2a:	f7fa ff0f 	bl	800084c <__aeabi_ddiv>
 8005a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a32:	e029      	b.n	8005a88 <_dtoa_r+0x3d8>
 8005a34:	2502      	movs	r5, #2
 8005a36:	e7f2      	b.n	8005a1e <_dtoa_r+0x36e>
 8005a38:	07f9      	lsls	r1, r7, #31
 8005a3a:	d508      	bpl.n	8005a4e <_dtoa_r+0x39e>
 8005a3c:	ec51 0b18 	vmov	r0, r1, d8
 8005a40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	ec41 0b18 	vmov	d8, r0, r1
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	107f      	asrs	r7, r7, #1
 8005a50:	3608      	adds	r6, #8
 8005a52:	e7e5      	b.n	8005a20 <_dtoa_r+0x370>
 8005a54:	f000 80a6 	beq.w	8005ba4 <_dtoa_r+0x4f4>
 8005a58:	f1ca 0600 	rsb	r6, sl, #0
 8005a5c:	4ba5      	ldr	r3, [pc, #660]	; (8005cf4 <_dtoa_r+0x644>)
 8005a5e:	4fa6      	ldr	r7, [pc, #664]	; (8005cf8 <_dtoa_r+0x648>)
 8005a60:	f006 020f 	and.w	r2, r6, #15
 8005a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a70:	f7fa fdc2 	bl	80005f8 <__aeabi_dmul>
 8005a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a78:	1136      	asrs	r6, r6, #4
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2502      	movs	r5, #2
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	f040 8085 	bne.w	8005b8e <_dtoa_r+0x4de>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1d2      	bne.n	8005a2e <_dtoa_r+0x37e>
 8005a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808c 	beq.w	8005ba8 <_dtoa_r+0x4f8>
 8005a90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a94:	4b99      	ldr	r3, [pc, #612]	; (8005cfc <_dtoa_r+0x64c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	4630      	mov	r0, r6
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	f7fb f81e 	bl	8000adc <__aeabi_dcmplt>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f000 8081 	beq.w	8005ba8 <_dtoa_r+0x4f8>
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d07d      	beq.n	8005ba8 <_dtoa_r+0x4f8>
 8005aac:	f1b9 0f00 	cmp.w	r9, #0
 8005ab0:	dd3c      	ble.n	8005b2c <_dtoa_r+0x47c>
 8005ab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4b91      	ldr	r3, [pc, #580]	; (8005d00 <_dtoa_r+0x650>)
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fd9a 	bl	80005f8 <__aeabi_dmul>
 8005ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac8:	3501      	adds	r5, #1
 8005aca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ace:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f7fa fd26 	bl	8000524 <__aeabi_i2d>
 8005ad8:	4632      	mov	r2, r6
 8005ada:	463b      	mov	r3, r7
 8005adc:	f7fa fd8c 	bl	80005f8 <__aeabi_dmul>
 8005ae0:	4b88      	ldr	r3, [pc, #544]	; (8005d04 <_dtoa_r+0x654>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f7fa fbd2 	bl	800028c <__adddf3>
 8005ae8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d15c      	bne.n	8005bb2 <_dtoa_r+0x502>
 8005af8:	4b83      	ldr	r3, [pc, #524]	; (8005d08 <_dtoa_r+0x658>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fbc2 	bl	8000288 <__aeabi_dsub>
 8005b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	f7fb f804 	bl	8000b18 <__aeabi_dcmpgt>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	f040 8296 	bne.w	8006042 <_dtoa_r+0x992>
 8005b16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa ffdb 	bl	8000adc <__aeabi_dcmplt>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f040 8288 	bne.w	800603c <_dtoa_r+0x98c>
 8005b2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f2c0 8158 	blt.w	8005dec <_dtoa_r+0x73c>
 8005b3c:	f1ba 0f0e 	cmp.w	sl, #14
 8005b40:	f300 8154 	bgt.w	8005dec <_dtoa_r+0x73c>
 8005b44:	4b6b      	ldr	r3, [pc, #428]	; (8005cf4 <_dtoa_r+0x644>)
 8005b46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f280 80e3 	bge.w	8005d1c <_dtoa_r+0x66c>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f300 80df 	bgt.w	8005d1c <_dtoa_r+0x66c>
 8005b5e:	f040 826d 	bne.w	800603c <_dtoa_r+0x98c>
 8005b62:	4b69      	ldr	r3, [pc, #420]	; (8005d08 <_dtoa_r+0x658>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fd45 	bl	80005f8 <__aeabi_dmul>
 8005b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b72:	f7fa ffc7 	bl	8000b04 <__aeabi_dcmpge>
 8005b76:	9e01      	ldr	r6, [sp, #4]
 8005b78:	4637      	mov	r7, r6
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f040 8243 	bne.w	8006006 <_dtoa_r+0x956>
 8005b80:	9d00      	ldr	r5, [sp, #0]
 8005b82:	2331      	movs	r3, #49	; 0x31
 8005b84:	f805 3b01 	strb.w	r3, [r5], #1
 8005b88:	f10a 0a01 	add.w	sl, sl, #1
 8005b8c:	e23f      	b.n	800600e <_dtoa_r+0x95e>
 8005b8e:	07f2      	lsls	r2, r6, #31
 8005b90:	d505      	bpl.n	8005b9e <_dtoa_r+0x4ee>
 8005b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b96:	f7fa fd2f 	bl	80005f8 <__aeabi_dmul>
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	1076      	asrs	r6, r6, #1
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	e76c      	b.n	8005a7e <_dtoa_r+0x3ce>
 8005ba4:	2502      	movs	r5, #2
 8005ba6:	e76f      	b.n	8005a88 <_dtoa_r+0x3d8>
 8005ba8:	9b01      	ldr	r3, [sp, #4]
 8005baa:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bae:	930c      	str	r3, [sp, #48]	; 0x30
 8005bb0:	e78d      	b.n	8005ace <_dtoa_r+0x41e>
 8005bb2:	9900      	ldr	r1, [sp, #0]
 8005bb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb8:	4b4e      	ldr	r3, [pc, #312]	; (8005cf4 <_dtoa_r+0x644>)
 8005bba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	9102      	str	r1, [sp, #8]
 8005bc2:	9908      	ldr	r1, [sp, #32]
 8005bc4:	eeb0 8a47 	vmov.f32	s16, s14
 8005bc8:	eef0 8a67 	vmov.f32	s17, s15
 8005bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	d045      	beq.n	8005c64 <_dtoa_r+0x5b4>
 8005bd8:	494c      	ldr	r1, [pc, #304]	; (8005d0c <_dtoa_r+0x65c>)
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f7fa fe36 	bl	800084c <__aeabi_ddiv>
 8005be0:	ec53 2b18 	vmov	r2, r3, d8
 8005be4:	f7fa fb50 	bl	8000288 <__aeabi_dsub>
 8005be8:	9d00      	ldr	r5, [sp, #0]
 8005bea:	ec41 0b18 	vmov	d8, r0, r1
 8005bee:	4639      	mov	r1, r7
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7fa ffb1 	bl	8000b58 <__aeabi_d2iz>
 8005bf6:	900c      	str	r0, [sp, #48]	; 0x30
 8005bf8:	f7fa fc94 	bl	8000524 <__aeabi_i2d>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fb40 	bl	8000288 <__aeabi_dsub>
 8005c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c0a:	3330      	adds	r3, #48	; 0x30
 8005c0c:	f805 3b01 	strb.w	r3, [r5], #1
 8005c10:	ec53 2b18 	vmov	r2, r3, d8
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	f7fa ff60 	bl	8000adc <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d165      	bne.n	8005cec <_dtoa_r+0x63c>
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	4935      	ldr	r1, [pc, #212]	; (8005cfc <_dtoa_r+0x64c>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7fa fb2e 	bl	8000288 <__aeabi_dsub>
 8005c2c:	ec53 2b18 	vmov	r2, r3, d8
 8005c30:	f7fa ff54 	bl	8000adc <__aeabi_dcmplt>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f040 80b9 	bne.w	8005dac <_dtoa_r+0x6fc>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	429d      	cmp	r5, r3
 8005c3e:	f43f af75 	beq.w	8005b2c <_dtoa_r+0x47c>
 8005c42:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <_dtoa_r+0x650>)
 8005c44:	ec51 0b18 	vmov	r0, r1, d8
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <_dtoa_r+0x650>)
 8005c50:	ec41 0b18 	vmov	d8, r0, r1
 8005c54:	2200      	movs	r2, #0
 8005c56:	4630      	mov	r0, r6
 8005c58:	4639      	mov	r1, r7
 8005c5a:	f7fa fccd 	bl	80005f8 <__aeabi_dmul>
 8005c5e:	4606      	mov	r6, r0
 8005c60:	460f      	mov	r7, r1
 8005c62:	e7c4      	b.n	8005bee <_dtoa_r+0x53e>
 8005c64:	ec51 0b17 	vmov	r0, r1, d7
 8005c68:	f7fa fcc6 	bl	80005f8 <__aeabi_dmul>
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	9d00      	ldr	r5, [sp, #0]
 8005c70:	930c      	str	r3, [sp, #48]	; 0x30
 8005c72:	ec41 0b18 	vmov	d8, r0, r1
 8005c76:	4639      	mov	r1, r7
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7fa ff6d 	bl	8000b58 <__aeabi_d2iz>
 8005c7e:	9011      	str	r0, [sp, #68]	; 0x44
 8005c80:	f7fa fc50 	bl	8000524 <__aeabi_i2d>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f7fa fafc 	bl	8000288 <__aeabi_dsub>
 8005c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c92:	3330      	adds	r3, #48	; 0x30
 8005c94:	f805 3b01 	strb.w	r3, [r5], #1
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	d134      	bne.n	8005d10 <_dtoa_r+0x660>
 8005ca6:	4b19      	ldr	r3, [pc, #100]	; (8005d0c <_dtoa_r+0x65c>)
 8005ca8:	ec51 0b18 	vmov	r0, r1, d8
 8005cac:	f7fa faee 	bl	800028c <__adddf3>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	f7fa ff2e 	bl	8000b18 <__aeabi_dcmpgt>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d175      	bne.n	8005dac <_dtoa_r+0x6fc>
 8005cc0:	ec53 2b18 	vmov	r2, r3, d8
 8005cc4:	4911      	ldr	r1, [pc, #68]	; (8005d0c <_dtoa_r+0x65c>)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fa fade 	bl	8000288 <__aeabi_dsub>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa ff02 	bl	8000adc <__aeabi_dcmplt>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f43f af27 	beq.w	8005b2c <_dtoa_r+0x47c>
 8005cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce0:	1e6b      	subs	r3, r5, #1
 8005ce2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d0f8      	beq.n	8005cde <_dtoa_r+0x62e>
 8005cec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005cf0:	e04a      	b.n	8005d88 <_dtoa_r+0x6d8>
 8005cf2:	bf00      	nop
 8005cf4:	08007b58 	.word	0x08007b58
 8005cf8:	08007b30 	.word	0x08007b30
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	40240000 	.word	0x40240000
 8005d04:	401c0000 	.word	0x401c0000
 8005d08:	40140000 	.word	0x40140000
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	4baf      	ldr	r3, [pc, #700]	; (8005fd0 <_dtoa_r+0x920>)
 8005d12:	f7fa fc71 	bl	80005f8 <__aeabi_dmul>
 8005d16:	4606      	mov	r6, r0
 8005d18:	460f      	mov	r7, r1
 8005d1a:	e7ac      	b.n	8005c76 <_dtoa_r+0x5c6>
 8005d1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d20:	9d00      	ldr	r5, [sp, #0]
 8005d22:	4642      	mov	r2, r8
 8005d24:	464b      	mov	r3, r9
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fd8f 	bl	800084c <__aeabi_ddiv>
 8005d2e:	f7fa ff13 	bl	8000b58 <__aeabi_d2iz>
 8005d32:	9002      	str	r0, [sp, #8]
 8005d34:	f7fa fbf6 	bl	8000524 <__aeabi_i2d>
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f7fa fc5c 	bl	80005f8 <__aeabi_dmul>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa fa9e 	bl	8000288 <__aeabi_dsub>
 8005d4c:	9e02      	ldr	r6, [sp, #8]
 8005d4e:	9f01      	ldr	r7, [sp, #4]
 8005d50:	3630      	adds	r6, #48	; 0x30
 8005d52:	f805 6b01 	strb.w	r6, [r5], #1
 8005d56:	9e00      	ldr	r6, [sp, #0]
 8005d58:	1bae      	subs	r6, r5, r6
 8005d5a:	42b7      	cmp	r7, r6
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	d137      	bne.n	8005dd2 <_dtoa_r+0x722>
 8005d62:	f7fa fa93 	bl	800028c <__adddf3>
 8005d66:	4642      	mov	r2, r8
 8005d68:	464b      	mov	r3, r9
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8005d72:	b9c8      	cbnz	r0, 8005da8 <_dtoa_r+0x6f8>
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d80:	b110      	cbz	r0, 8005d88 <_dtoa_r+0x6d8>
 8005d82:	9b02      	ldr	r3, [sp, #8]
 8005d84:	07d9      	lsls	r1, r3, #31
 8005d86:	d40f      	bmi.n	8005da8 <_dtoa_r+0x6f8>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	4659      	mov	r1, fp
 8005d8c:	f000 fad6 	bl	800633c <_Bfree>
 8005d90:	2300      	movs	r3, #0
 8005d92:	702b      	strb	r3, [r5, #0]
 8005d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d96:	f10a 0001 	add.w	r0, sl, #1
 8005d9a:	6018      	str	r0, [r3, #0]
 8005d9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f43f acd8 	beq.w	8005754 <_dtoa_r+0xa4>
 8005da4:	601d      	str	r5, [r3, #0]
 8005da6:	e4d5      	b.n	8005754 <_dtoa_r+0xa4>
 8005da8:	f8cd a01c 	str.w	sl, [sp, #28]
 8005dac:	462b      	mov	r3, r5
 8005dae:	461d      	mov	r5, r3
 8005db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d108      	bne.n	8005dca <_dtoa_r+0x71a>
 8005db8:	9a00      	ldr	r2, [sp, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d1f7      	bne.n	8005dae <_dtoa_r+0x6fe>
 8005dbe:	9a07      	ldr	r2, [sp, #28]
 8005dc0:	9900      	ldr	r1, [sp, #0]
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	9207      	str	r2, [sp, #28]
 8005dc6:	2230      	movs	r2, #48	; 0x30
 8005dc8:	700a      	strb	r2, [r1, #0]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	3201      	adds	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e78c      	b.n	8005cec <_dtoa_r+0x63c>
 8005dd2:	4b7f      	ldr	r3, [pc, #508]	; (8005fd0 <_dtoa_r+0x920>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f7fa fc0f 	bl	80005f8 <__aeabi_dmul>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4606      	mov	r6, r0
 8005de0:	460f      	mov	r7, r1
 8005de2:	f7fa fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d09b      	beq.n	8005d22 <_dtoa_r+0x672>
 8005dea:	e7cd      	b.n	8005d88 <_dtoa_r+0x6d8>
 8005dec:	9a08      	ldr	r2, [sp, #32]
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	f000 80c4 	beq.w	8005f7c <_dtoa_r+0x8cc>
 8005df4:	9a05      	ldr	r2, [sp, #20]
 8005df6:	2a01      	cmp	r2, #1
 8005df8:	f300 80a8 	bgt.w	8005f4c <_dtoa_r+0x89c>
 8005dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	f000 80a0 	beq.w	8005f44 <_dtoa_r+0x894>
 8005e04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e08:	9e06      	ldr	r6, [sp, #24]
 8005e0a:	4645      	mov	r5, r8
 8005e0c:	9a04      	ldr	r2, [sp, #16]
 8005e0e:	2101      	movs	r1, #1
 8005e10:	441a      	add	r2, r3
 8005e12:	4620      	mov	r0, r4
 8005e14:	4498      	add	r8, r3
 8005e16:	9204      	str	r2, [sp, #16]
 8005e18:	f000 fb4c 	bl	80064b4 <__i2b>
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	dd0b      	ble.n	8005e3a <_dtoa_r+0x78a>
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd08      	ble.n	8005e3a <_dtoa_r+0x78a>
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	9a04      	ldr	r2, [sp, #16]
 8005e2c:	bfa8      	it	ge
 8005e2e:	462b      	movge	r3, r5
 8005e30:	eba8 0803 	sub.w	r8, r8, r3
 8005e34:	1aed      	subs	r5, r5, r3
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	b1fb      	cbz	r3, 8005e7e <_dtoa_r+0x7ce>
 8005e3e:	9b08      	ldr	r3, [sp, #32]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 809f 	beq.w	8005f84 <_dtoa_r+0x8d4>
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	dd11      	ble.n	8005e6e <_dtoa_r+0x7be>
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 fbec 	bl	800662c <__pow5mult>
 8005e54:	465a      	mov	r2, fp
 8005e56:	4601      	mov	r1, r0
 8005e58:	4607      	mov	r7, r0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fb40 	bl	80064e0 <__multiply>
 8005e60:	4659      	mov	r1, fp
 8005e62:	9007      	str	r0, [sp, #28]
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fa69 	bl	800633c <_Bfree>
 8005e6a:	9b07      	ldr	r3, [sp, #28]
 8005e6c:	469b      	mov	fp, r3
 8005e6e:	9b06      	ldr	r3, [sp, #24]
 8005e70:	1b9a      	subs	r2, r3, r6
 8005e72:	d004      	beq.n	8005e7e <_dtoa_r+0x7ce>
 8005e74:	4659      	mov	r1, fp
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 fbd8 	bl	800662c <__pow5mult>
 8005e7c:	4683      	mov	fp, r0
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fb17 	bl	80064b4 <__i2b>
 8005e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	dd7c      	ble.n	8005f88 <_dtoa_r+0x8d8>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4601      	mov	r1, r0
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 fbca 	bl	800662c <__pow5mult>
 8005e98:	9b05      	ldr	r3, [sp, #20]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	dd76      	ble.n	8005f8e <_dtoa_r+0x8de>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9306      	str	r3, [sp, #24]
 8005ea4:	6933      	ldr	r3, [r6, #16]
 8005ea6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005eaa:	6918      	ldr	r0, [r3, #16]
 8005eac:	f000 fab2 	bl	8006414 <__hi0bits>
 8005eb0:	f1c0 0020 	rsb	r0, r0, #32
 8005eb4:	9b04      	ldr	r3, [sp, #16]
 8005eb6:	4418      	add	r0, r3
 8005eb8:	f010 001f 	ands.w	r0, r0, #31
 8005ebc:	f000 8086 	beq.w	8005fcc <_dtoa_r+0x91c>
 8005ec0:	f1c0 0320 	rsb	r3, r0, #32
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	dd7f      	ble.n	8005fc8 <_dtoa_r+0x918>
 8005ec8:	f1c0 001c 	rsb	r0, r0, #28
 8005ecc:	9b04      	ldr	r3, [sp, #16]
 8005ece:	4403      	add	r3, r0
 8005ed0:	4480      	add	r8, r0
 8005ed2:	4405      	add	r5, r0
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	f1b8 0f00 	cmp.w	r8, #0
 8005eda:	dd05      	ble.n	8005ee8 <_dtoa_r+0x838>
 8005edc:	4659      	mov	r1, fp
 8005ede:	4642      	mov	r2, r8
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fbfd 	bl	80066e0 <__lshift>
 8005ee6:	4683      	mov	fp, r0
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dd05      	ble.n	8005efa <_dtoa_r+0x84a>
 8005eee:	4631      	mov	r1, r6
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 fbf4 	bl	80066e0 <__lshift>
 8005ef8:	4606      	mov	r6, r0
 8005efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d069      	beq.n	8005fd4 <_dtoa_r+0x924>
 8005f00:	4631      	mov	r1, r6
 8005f02:	4658      	mov	r0, fp
 8005f04:	f000 fc58 	bl	80067b8 <__mcmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	da63      	bge.n	8005fd4 <_dtoa_r+0x924>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4659      	mov	r1, fp
 8005f10:	220a      	movs	r2, #10
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fa34 	bl	8006380 <__multadd>
 8005f18:	9b08      	ldr	r3, [sp, #32]
 8005f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f1e:	4683      	mov	fp, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 818f 	beq.w	8006244 <_dtoa_r+0xb94>
 8005f26:	4639      	mov	r1, r7
 8005f28:	2300      	movs	r3, #0
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f000 fa27 	bl	8006380 <__multadd>
 8005f32:	f1b9 0f00 	cmp.w	r9, #0
 8005f36:	4607      	mov	r7, r0
 8005f38:	f300 808e 	bgt.w	8006058 <_dtoa_r+0x9a8>
 8005f3c:	9b05      	ldr	r3, [sp, #20]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	dc50      	bgt.n	8005fe4 <_dtoa_r+0x934>
 8005f42:	e089      	b.n	8006058 <_dtoa_r+0x9a8>
 8005f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f4a:	e75d      	b.n	8005e08 <_dtoa_r+0x758>
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	1e5e      	subs	r6, r3, #1
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	42b3      	cmp	r3, r6
 8005f54:	bfbf      	itttt	lt
 8005f56:	9b06      	ldrlt	r3, [sp, #24]
 8005f58:	9606      	strlt	r6, [sp, #24]
 8005f5a:	1af2      	sublt	r2, r6, r3
 8005f5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005f5e:	bfb6      	itet	lt
 8005f60:	189b      	addlt	r3, r3, r2
 8005f62:	1b9e      	subge	r6, r3, r6
 8005f64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005f66:	9b01      	ldr	r3, [sp, #4]
 8005f68:	bfb8      	it	lt
 8005f6a:	2600      	movlt	r6, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb5      	itete	lt
 8005f70:	eba8 0503 	sublt.w	r5, r8, r3
 8005f74:	9b01      	ldrge	r3, [sp, #4]
 8005f76:	2300      	movlt	r3, #0
 8005f78:	4645      	movge	r5, r8
 8005f7a:	e747      	b.n	8005e0c <_dtoa_r+0x75c>
 8005f7c:	9e06      	ldr	r6, [sp, #24]
 8005f7e:	9f08      	ldr	r7, [sp, #32]
 8005f80:	4645      	mov	r5, r8
 8005f82:	e74c      	b.n	8005e1e <_dtoa_r+0x76e>
 8005f84:	9a06      	ldr	r2, [sp, #24]
 8005f86:	e775      	b.n	8005e74 <_dtoa_r+0x7c4>
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	dc18      	bgt.n	8005fc0 <_dtoa_r+0x910>
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	b9b3      	cbnz	r3, 8005fc0 <_dtoa_r+0x910>
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f98:	b9a3      	cbnz	r3, 8005fc4 <_dtoa_r+0x914>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	0d1b      	lsrs	r3, r3, #20
 8005fa2:	051b      	lsls	r3, r3, #20
 8005fa4:	b12b      	cbz	r3, 8005fb2 <_dtoa_r+0x902>
 8005fa6:	9b04      	ldr	r3, [sp, #16]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	f108 0801 	add.w	r8, r8, #1
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f47f af74 	bne.w	8005ea4 <_dtoa_r+0x7f4>
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	e779      	b.n	8005eb4 <_dtoa_r+0x804>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e7f6      	b.n	8005fb2 <_dtoa_r+0x902>
 8005fc4:	9b02      	ldr	r3, [sp, #8]
 8005fc6:	e7f4      	b.n	8005fb2 <_dtoa_r+0x902>
 8005fc8:	d085      	beq.n	8005ed6 <_dtoa_r+0x826>
 8005fca:	4618      	mov	r0, r3
 8005fcc:	301c      	adds	r0, #28
 8005fce:	e77d      	b.n	8005ecc <_dtoa_r+0x81c>
 8005fd0:	40240000 	.word	0x40240000
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dc38      	bgt.n	800604c <_dtoa_r+0x99c>
 8005fda:	9b05      	ldr	r3, [sp, #20]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	dd35      	ble.n	800604c <_dtoa_r+0x99c>
 8005fe0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005fe4:	f1b9 0f00 	cmp.w	r9, #0
 8005fe8:	d10d      	bne.n	8006006 <_dtoa_r+0x956>
 8005fea:	4631      	mov	r1, r6
 8005fec:	464b      	mov	r3, r9
 8005fee:	2205      	movs	r2, #5
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 f9c5 	bl	8006380 <__multadd>
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	4658      	mov	r0, fp
 8005ffc:	f000 fbdc 	bl	80067b8 <__mcmp>
 8006000:	2800      	cmp	r0, #0
 8006002:	f73f adbd 	bgt.w	8005b80 <_dtoa_r+0x4d0>
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	9d00      	ldr	r5, [sp, #0]
 800600a:	ea6f 0a03 	mvn.w	sl, r3
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	4631      	mov	r1, r6
 8006014:	4620      	mov	r0, r4
 8006016:	f000 f991 	bl	800633c <_Bfree>
 800601a:	2f00      	cmp	r7, #0
 800601c:	f43f aeb4 	beq.w	8005d88 <_dtoa_r+0x6d8>
 8006020:	f1b8 0f00 	cmp.w	r8, #0
 8006024:	d005      	beq.n	8006032 <_dtoa_r+0x982>
 8006026:	45b8      	cmp	r8, r7
 8006028:	d003      	beq.n	8006032 <_dtoa_r+0x982>
 800602a:	4641      	mov	r1, r8
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f985 	bl	800633c <_Bfree>
 8006032:	4639      	mov	r1, r7
 8006034:	4620      	mov	r0, r4
 8006036:	f000 f981 	bl	800633c <_Bfree>
 800603a:	e6a5      	b.n	8005d88 <_dtoa_r+0x6d8>
 800603c:	2600      	movs	r6, #0
 800603e:	4637      	mov	r7, r6
 8006040:	e7e1      	b.n	8006006 <_dtoa_r+0x956>
 8006042:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006048:	4637      	mov	r7, r6
 800604a:	e599      	b.n	8005b80 <_dtoa_r+0x4d0>
 800604c:	9b08      	ldr	r3, [sp, #32]
 800604e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80fd 	beq.w	8006252 <_dtoa_r+0xba2>
 8006058:	2d00      	cmp	r5, #0
 800605a:	dd05      	ble.n	8006068 <_dtoa_r+0x9b8>
 800605c:	4639      	mov	r1, r7
 800605e:	462a      	mov	r2, r5
 8006060:	4620      	mov	r0, r4
 8006062:	f000 fb3d 	bl	80066e0 <__lshift>
 8006066:	4607      	mov	r7, r0
 8006068:	9b06      	ldr	r3, [sp, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d05c      	beq.n	8006128 <_dtoa_r+0xa78>
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4620      	mov	r0, r4
 8006072:	f000 f923 	bl	80062bc <_Balloc>
 8006076:	4605      	mov	r5, r0
 8006078:	b928      	cbnz	r0, 8006086 <_dtoa_r+0x9d6>
 800607a:	4b80      	ldr	r3, [pc, #512]	; (800627c <_dtoa_r+0xbcc>)
 800607c:	4602      	mov	r2, r0
 800607e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006082:	f7ff bb2e 	b.w	80056e2 <_dtoa_r+0x32>
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	3202      	adds	r2, #2
 800608a:	0092      	lsls	r2, r2, #2
 800608c:	f107 010c 	add.w	r1, r7, #12
 8006090:	300c      	adds	r0, #12
 8006092:	f000 f905 	bl	80062a0 <memcpy>
 8006096:	2201      	movs	r2, #1
 8006098:	4629      	mov	r1, r5
 800609a:	4620      	mov	r0, r4
 800609c:	f000 fb20 	bl	80066e0 <__lshift>
 80060a0:	9b00      	ldr	r3, [sp, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	444b      	add	r3, r9
 80060aa:	9307      	str	r3, [sp, #28]
 80060ac:	9b02      	ldr	r3, [sp, #8]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	46b8      	mov	r8, r7
 80060b4:	9306      	str	r3, [sp, #24]
 80060b6:	4607      	mov	r7, r0
 80060b8:	9b01      	ldr	r3, [sp, #4]
 80060ba:	4631      	mov	r1, r6
 80060bc:	3b01      	subs	r3, #1
 80060be:	4658      	mov	r0, fp
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	f7ff fa69 	bl	8005598 <quorem>
 80060c6:	4603      	mov	r3, r0
 80060c8:	3330      	adds	r3, #48	; 0x30
 80060ca:	9004      	str	r0, [sp, #16]
 80060cc:	4641      	mov	r1, r8
 80060ce:	4658      	mov	r0, fp
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	f000 fb71 	bl	80067b8 <__mcmp>
 80060d6:	463a      	mov	r2, r7
 80060d8:	4681      	mov	r9, r0
 80060da:	4631      	mov	r1, r6
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fb87 	bl	80067f0 <__mdiff>
 80060e2:	68c2      	ldr	r2, [r0, #12]
 80060e4:	9b08      	ldr	r3, [sp, #32]
 80060e6:	4605      	mov	r5, r0
 80060e8:	bb02      	cbnz	r2, 800612c <_dtoa_r+0xa7c>
 80060ea:	4601      	mov	r1, r0
 80060ec:	4658      	mov	r0, fp
 80060ee:	f000 fb63 	bl	80067b8 <__mcmp>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	4602      	mov	r2, r0
 80060f6:	4629      	mov	r1, r5
 80060f8:	4620      	mov	r0, r4
 80060fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80060fe:	f000 f91d 	bl	800633c <_Bfree>
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006106:	9d01      	ldr	r5, [sp, #4]
 8006108:	ea43 0102 	orr.w	r1, r3, r2
 800610c:	9b06      	ldr	r3, [sp, #24]
 800610e:	430b      	orrs	r3, r1
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	d10d      	bne.n	8006130 <_dtoa_r+0xa80>
 8006114:	2b39      	cmp	r3, #57	; 0x39
 8006116:	d029      	beq.n	800616c <_dtoa_r+0xabc>
 8006118:	f1b9 0f00 	cmp.w	r9, #0
 800611c:	dd01      	ble.n	8006122 <_dtoa_r+0xa72>
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	3331      	adds	r3, #49	; 0x31
 8006122:	9a02      	ldr	r2, [sp, #8]
 8006124:	7013      	strb	r3, [r2, #0]
 8006126:	e774      	b.n	8006012 <_dtoa_r+0x962>
 8006128:	4638      	mov	r0, r7
 800612a:	e7b9      	b.n	80060a0 <_dtoa_r+0x9f0>
 800612c:	2201      	movs	r2, #1
 800612e:	e7e2      	b.n	80060f6 <_dtoa_r+0xa46>
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	db06      	blt.n	8006144 <_dtoa_r+0xa94>
 8006136:	9905      	ldr	r1, [sp, #20]
 8006138:	ea41 0909 	orr.w	r9, r1, r9
 800613c:	9906      	ldr	r1, [sp, #24]
 800613e:	ea59 0101 	orrs.w	r1, r9, r1
 8006142:	d120      	bne.n	8006186 <_dtoa_r+0xad6>
 8006144:	2a00      	cmp	r2, #0
 8006146:	ddec      	ble.n	8006122 <_dtoa_r+0xa72>
 8006148:	4659      	mov	r1, fp
 800614a:	2201      	movs	r2, #1
 800614c:	4620      	mov	r0, r4
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	f000 fac6 	bl	80066e0 <__lshift>
 8006154:	4631      	mov	r1, r6
 8006156:	4683      	mov	fp, r0
 8006158:	f000 fb2e 	bl	80067b8 <__mcmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	dc02      	bgt.n	8006168 <_dtoa_r+0xab8>
 8006162:	d1de      	bne.n	8006122 <_dtoa_r+0xa72>
 8006164:	07da      	lsls	r2, r3, #31
 8006166:	d5dc      	bpl.n	8006122 <_dtoa_r+0xa72>
 8006168:	2b39      	cmp	r3, #57	; 0x39
 800616a:	d1d8      	bne.n	800611e <_dtoa_r+0xa6e>
 800616c:	9a02      	ldr	r2, [sp, #8]
 800616e:	2339      	movs	r3, #57	; 0x39
 8006170:	7013      	strb	r3, [r2, #0]
 8006172:	462b      	mov	r3, r5
 8006174:	461d      	mov	r5, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800617c:	2a39      	cmp	r2, #57	; 0x39
 800617e:	d050      	beq.n	8006222 <_dtoa_r+0xb72>
 8006180:	3201      	adds	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e745      	b.n	8006012 <_dtoa_r+0x962>
 8006186:	2a00      	cmp	r2, #0
 8006188:	dd03      	ble.n	8006192 <_dtoa_r+0xae2>
 800618a:	2b39      	cmp	r3, #57	; 0x39
 800618c:	d0ee      	beq.n	800616c <_dtoa_r+0xabc>
 800618e:	3301      	adds	r3, #1
 8006190:	e7c7      	b.n	8006122 <_dtoa_r+0xa72>
 8006192:	9a01      	ldr	r2, [sp, #4]
 8006194:	9907      	ldr	r1, [sp, #28]
 8006196:	f802 3c01 	strb.w	r3, [r2, #-1]
 800619a:	428a      	cmp	r2, r1
 800619c:	d02a      	beq.n	80061f4 <_dtoa_r+0xb44>
 800619e:	4659      	mov	r1, fp
 80061a0:	2300      	movs	r3, #0
 80061a2:	220a      	movs	r2, #10
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 f8eb 	bl	8006380 <__multadd>
 80061aa:	45b8      	cmp	r8, r7
 80061ac:	4683      	mov	fp, r0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	f04f 020a 	mov.w	r2, #10
 80061b6:	4641      	mov	r1, r8
 80061b8:	4620      	mov	r0, r4
 80061ba:	d107      	bne.n	80061cc <_dtoa_r+0xb1c>
 80061bc:	f000 f8e0 	bl	8006380 <__multadd>
 80061c0:	4680      	mov	r8, r0
 80061c2:	4607      	mov	r7, r0
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	3301      	adds	r3, #1
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	e775      	b.n	80060b8 <_dtoa_r+0xa08>
 80061cc:	f000 f8d8 	bl	8006380 <__multadd>
 80061d0:	4639      	mov	r1, r7
 80061d2:	4680      	mov	r8, r0
 80061d4:	2300      	movs	r3, #0
 80061d6:	220a      	movs	r2, #10
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 f8d1 	bl	8006380 <__multadd>
 80061de:	4607      	mov	r7, r0
 80061e0:	e7f0      	b.n	80061c4 <_dtoa_r+0xb14>
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	9a00      	ldr	r2, [sp, #0]
 80061e8:	bfcc      	ite	gt
 80061ea:	464d      	movgt	r5, r9
 80061ec:	2501      	movle	r5, #1
 80061ee:	4415      	add	r5, r2
 80061f0:	f04f 0800 	mov.w	r8, #0
 80061f4:	4659      	mov	r1, fp
 80061f6:	2201      	movs	r2, #1
 80061f8:	4620      	mov	r0, r4
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	f000 fa70 	bl	80066e0 <__lshift>
 8006200:	4631      	mov	r1, r6
 8006202:	4683      	mov	fp, r0
 8006204:	f000 fad8 	bl	80067b8 <__mcmp>
 8006208:	2800      	cmp	r0, #0
 800620a:	dcb2      	bgt.n	8006172 <_dtoa_r+0xac2>
 800620c:	d102      	bne.n	8006214 <_dtoa_r+0xb64>
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	07db      	lsls	r3, r3, #31
 8006212:	d4ae      	bmi.n	8006172 <_dtoa_r+0xac2>
 8006214:	462b      	mov	r3, r5
 8006216:	461d      	mov	r5, r3
 8006218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800621c:	2a30      	cmp	r2, #48	; 0x30
 800621e:	d0fa      	beq.n	8006216 <_dtoa_r+0xb66>
 8006220:	e6f7      	b.n	8006012 <_dtoa_r+0x962>
 8006222:	9a00      	ldr	r2, [sp, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d1a5      	bne.n	8006174 <_dtoa_r+0xac4>
 8006228:	f10a 0a01 	add.w	sl, sl, #1
 800622c:	2331      	movs	r3, #49	; 0x31
 800622e:	e779      	b.n	8006124 <_dtoa_r+0xa74>
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <_dtoa_r+0xbd0>)
 8006232:	f7ff baaf 	b.w	8005794 <_dtoa_r+0xe4>
 8006236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	f47f aa86 	bne.w	800574a <_dtoa_r+0x9a>
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <_dtoa_r+0xbd4>)
 8006240:	f7ff baa8 	b.w	8005794 <_dtoa_r+0xe4>
 8006244:	f1b9 0f00 	cmp.w	r9, #0
 8006248:	dc03      	bgt.n	8006252 <_dtoa_r+0xba2>
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	2b02      	cmp	r3, #2
 800624e:	f73f aec9 	bgt.w	8005fe4 <_dtoa_r+0x934>
 8006252:	9d00      	ldr	r5, [sp, #0]
 8006254:	4631      	mov	r1, r6
 8006256:	4658      	mov	r0, fp
 8006258:	f7ff f99e 	bl	8005598 <quorem>
 800625c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006260:	f805 3b01 	strb.w	r3, [r5], #1
 8006264:	9a00      	ldr	r2, [sp, #0]
 8006266:	1aaa      	subs	r2, r5, r2
 8006268:	4591      	cmp	r9, r2
 800626a:	ddba      	ble.n	80061e2 <_dtoa_r+0xb32>
 800626c:	4659      	mov	r1, fp
 800626e:	2300      	movs	r3, #0
 8006270:	220a      	movs	r2, #10
 8006272:	4620      	mov	r0, r4
 8006274:	f000 f884 	bl	8006380 <__multadd>
 8006278:	4683      	mov	fp, r0
 800627a:	e7eb      	b.n	8006254 <_dtoa_r+0xba4>
 800627c:	08007abf 	.word	0x08007abf
 8006280:	08007a18 	.word	0x08007a18
 8006284:	08007a3c 	.word	0x08007a3c

08006288 <_localeconv_r>:
 8006288:	4800      	ldr	r0, [pc, #0]	; (800628c <_localeconv_r+0x4>)
 800628a:	4770      	bx	lr
 800628c:	20000160 	.word	0x20000160

08006290 <malloc>:
 8006290:	4b02      	ldr	r3, [pc, #8]	; (800629c <malloc+0xc>)
 8006292:	4601      	mov	r1, r0
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f000 bbef 	b.w	8006a78 <_malloc_r>
 800629a:	bf00      	nop
 800629c:	2000000c 	.word	0x2000000c

080062a0 <memcpy>:
 80062a0:	440a      	add	r2, r1
 80062a2:	4291      	cmp	r1, r2
 80062a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062a8:	d100      	bne.n	80062ac <memcpy+0xc>
 80062aa:	4770      	bx	lr
 80062ac:	b510      	push	{r4, lr}
 80062ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062b6:	4291      	cmp	r1, r2
 80062b8:	d1f9      	bne.n	80062ae <memcpy+0xe>
 80062ba:	bd10      	pop	{r4, pc}

080062bc <_Balloc>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	b976      	cbnz	r6, 80062e4 <_Balloc+0x28>
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7ff ffe2 	bl	8006290 <malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6260      	str	r0, [r4, #36]	; 0x24
 80062d0:	b920      	cbnz	r0, 80062dc <_Balloc+0x20>
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <_Balloc+0x78>)
 80062d4:	4818      	ldr	r0, [pc, #96]	; (8006338 <_Balloc+0x7c>)
 80062d6:	2166      	movs	r1, #102	; 0x66
 80062d8:	f000 fd94 	bl	8006e04 <__assert_func>
 80062dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e0:	6006      	str	r6, [r0, #0]
 80062e2:	60c6      	str	r6, [r0, #12]
 80062e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062e6:	68f3      	ldr	r3, [r6, #12]
 80062e8:	b183      	cbz	r3, 800630c <_Balloc+0x50>
 80062ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062f2:	b9b8      	cbnz	r0, 8006324 <_Balloc+0x68>
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f605 	lsl.w	r6, r1, r5
 80062fa:	1d72      	adds	r2, r6, #5
 80062fc:	0092      	lsls	r2, r2, #2
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 fb5a 	bl	80069b8 <_calloc_r>
 8006304:	b160      	cbz	r0, 8006320 <_Balloc+0x64>
 8006306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800630a:	e00e      	b.n	800632a <_Balloc+0x6e>
 800630c:	2221      	movs	r2, #33	; 0x21
 800630e:	2104      	movs	r1, #4
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fb51 	bl	80069b8 <_calloc_r>
 8006316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006318:	60f0      	str	r0, [r6, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <_Balloc+0x2e>
 8006320:	2000      	movs	r0, #0
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	6802      	ldr	r2, [r0, #0]
 8006326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800632a:	2300      	movs	r3, #0
 800632c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006330:	e7f7      	b.n	8006322 <_Balloc+0x66>
 8006332:	bf00      	nop
 8006334:	08007a49 	.word	0x08007a49
 8006338:	08007ad0 	.word	0x08007ad0

0800633c <_Bfree>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b976      	cbnz	r6, 8006364 <_Bfree+0x28>
 8006346:	2010      	movs	r0, #16
 8006348:	f7ff ffa2 	bl	8006290 <malloc>
 800634c:	4602      	mov	r2, r0
 800634e:	6268      	str	r0, [r5, #36]	; 0x24
 8006350:	b920      	cbnz	r0, 800635c <_Bfree+0x20>
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_Bfree+0x3c>)
 8006354:	4809      	ldr	r0, [pc, #36]	; (800637c <_Bfree+0x40>)
 8006356:	218a      	movs	r1, #138	; 0x8a
 8006358:	f000 fd54 	bl	8006e04 <__assert_func>
 800635c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006360:	6006      	str	r6, [r0, #0]
 8006362:	60c6      	str	r6, [r0, #12]
 8006364:	b13c      	cbz	r4, 8006376 <_Bfree+0x3a>
 8006366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006370:	6021      	str	r1, [r4, #0]
 8006372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	08007a49 	.word	0x08007a49
 800637c:	08007ad0 	.word	0x08007ad0

08006380 <__multadd>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	690e      	ldr	r6, [r1, #16]
 8006386:	4607      	mov	r7, r0
 8006388:	4698      	mov	r8, r3
 800638a:	460c      	mov	r4, r1
 800638c:	f101 0014 	add.w	r0, r1, #20
 8006390:	2300      	movs	r3, #0
 8006392:	6805      	ldr	r5, [r0, #0]
 8006394:	b2a9      	uxth	r1, r5
 8006396:	fb02 8101 	mla	r1, r2, r1, r8
 800639a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800639e:	0c2d      	lsrs	r5, r5, #16
 80063a0:	fb02 c505 	mla	r5, r2, r5, ip
 80063a4:	b289      	uxth	r1, r1
 80063a6:	3301      	adds	r3, #1
 80063a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80063ac:	429e      	cmp	r6, r3
 80063ae:	f840 1b04 	str.w	r1, [r0], #4
 80063b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80063b6:	dcec      	bgt.n	8006392 <__multadd+0x12>
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	d022      	beq.n	8006404 <__multadd+0x84>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	42b3      	cmp	r3, r6
 80063c2:	dc19      	bgt.n	80063f8 <__multadd+0x78>
 80063c4:	6861      	ldr	r1, [r4, #4]
 80063c6:	4638      	mov	r0, r7
 80063c8:	3101      	adds	r1, #1
 80063ca:	f7ff ff77 	bl	80062bc <_Balloc>
 80063ce:	4605      	mov	r5, r0
 80063d0:	b928      	cbnz	r0, 80063de <__multadd+0x5e>
 80063d2:	4602      	mov	r2, r0
 80063d4:	4b0d      	ldr	r3, [pc, #52]	; (800640c <__multadd+0x8c>)
 80063d6:	480e      	ldr	r0, [pc, #56]	; (8006410 <__multadd+0x90>)
 80063d8:	21b5      	movs	r1, #181	; 0xb5
 80063da:	f000 fd13 	bl	8006e04 <__assert_func>
 80063de:	6922      	ldr	r2, [r4, #16]
 80063e0:	3202      	adds	r2, #2
 80063e2:	f104 010c 	add.w	r1, r4, #12
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	300c      	adds	r0, #12
 80063ea:	f7ff ff59 	bl	80062a0 <memcpy>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ffa3 	bl	800633c <_Bfree>
 80063f6:	462c      	mov	r4, r5
 80063f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80063fc:	3601      	adds	r6, #1
 80063fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8006402:	6126      	str	r6, [r4, #16]
 8006404:	4620      	mov	r0, r4
 8006406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640a:	bf00      	nop
 800640c:	08007abf 	.word	0x08007abf
 8006410:	08007ad0 	.word	0x08007ad0

08006414 <__hi0bits>:
 8006414:	0c03      	lsrs	r3, r0, #16
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	b9d3      	cbnz	r3, 8006450 <__hi0bits+0x3c>
 800641a:	0400      	lsls	r0, r0, #16
 800641c:	2310      	movs	r3, #16
 800641e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006422:	bf04      	itt	eq
 8006424:	0200      	lsleq	r0, r0, #8
 8006426:	3308      	addeq	r3, #8
 8006428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800642c:	bf04      	itt	eq
 800642e:	0100      	lsleq	r0, r0, #4
 8006430:	3304      	addeq	r3, #4
 8006432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006436:	bf04      	itt	eq
 8006438:	0080      	lsleq	r0, r0, #2
 800643a:	3302      	addeq	r3, #2
 800643c:	2800      	cmp	r0, #0
 800643e:	db05      	blt.n	800644c <__hi0bits+0x38>
 8006440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006444:	f103 0301 	add.w	r3, r3, #1
 8006448:	bf08      	it	eq
 800644a:	2320      	moveq	r3, #32
 800644c:	4618      	mov	r0, r3
 800644e:	4770      	bx	lr
 8006450:	2300      	movs	r3, #0
 8006452:	e7e4      	b.n	800641e <__hi0bits+0xa>

08006454 <__lo0bits>:
 8006454:	6803      	ldr	r3, [r0, #0]
 8006456:	f013 0207 	ands.w	r2, r3, #7
 800645a:	4601      	mov	r1, r0
 800645c:	d00b      	beq.n	8006476 <__lo0bits+0x22>
 800645e:	07da      	lsls	r2, r3, #31
 8006460:	d424      	bmi.n	80064ac <__lo0bits+0x58>
 8006462:	0798      	lsls	r0, r3, #30
 8006464:	bf49      	itett	mi
 8006466:	085b      	lsrmi	r3, r3, #1
 8006468:	089b      	lsrpl	r3, r3, #2
 800646a:	2001      	movmi	r0, #1
 800646c:	600b      	strmi	r3, [r1, #0]
 800646e:	bf5c      	itt	pl
 8006470:	600b      	strpl	r3, [r1, #0]
 8006472:	2002      	movpl	r0, #2
 8006474:	4770      	bx	lr
 8006476:	b298      	uxth	r0, r3
 8006478:	b9b0      	cbnz	r0, 80064a8 <__lo0bits+0x54>
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	2010      	movs	r0, #16
 800647e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006482:	bf04      	itt	eq
 8006484:	0a1b      	lsreq	r3, r3, #8
 8006486:	3008      	addeq	r0, #8
 8006488:	071a      	lsls	r2, r3, #28
 800648a:	bf04      	itt	eq
 800648c:	091b      	lsreq	r3, r3, #4
 800648e:	3004      	addeq	r0, #4
 8006490:	079a      	lsls	r2, r3, #30
 8006492:	bf04      	itt	eq
 8006494:	089b      	lsreq	r3, r3, #2
 8006496:	3002      	addeq	r0, #2
 8006498:	07da      	lsls	r2, r3, #31
 800649a:	d403      	bmi.n	80064a4 <__lo0bits+0x50>
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	f100 0001 	add.w	r0, r0, #1
 80064a2:	d005      	beq.n	80064b0 <__lo0bits+0x5c>
 80064a4:	600b      	str	r3, [r1, #0]
 80064a6:	4770      	bx	lr
 80064a8:	4610      	mov	r0, r2
 80064aa:	e7e8      	b.n	800647e <__lo0bits+0x2a>
 80064ac:	2000      	movs	r0, #0
 80064ae:	4770      	bx	lr
 80064b0:	2020      	movs	r0, #32
 80064b2:	4770      	bx	lr

080064b4 <__i2b>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	2101      	movs	r1, #1
 80064ba:	f7ff feff 	bl	80062bc <_Balloc>
 80064be:	4602      	mov	r2, r0
 80064c0:	b928      	cbnz	r0, 80064ce <__i2b+0x1a>
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <__i2b+0x24>)
 80064c4:	4805      	ldr	r0, [pc, #20]	; (80064dc <__i2b+0x28>)
 80064c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064ca:	f000 fc9b 	bl	8006e04 <__assert_func>
 80064ce:	2301      	movs	r3, #1
 80064d0:	6144      	str	r4, [r0, #20]
 80064d2:	6103      	str	r3, [r0, #16]
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	bf00      	nop
 80064d8:	08007abf 	.word	0x08007abf
 80064dc:	08007ad0 	.word	0x08007ad0

080064e0 <__multiply>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	4614      	mov	r4, r2
 80064e6:	690a      	ldr	r2, [r1, #16]
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	bfb8      	it	lt
 80064ee:	460b      	movlt	r3, r1
 80064f0:	460d      	mov	r5, r1
 80064f2:	bfbc      	itt	lt
 80064f4:	4625      	movlt	r5, r4
 80064f6:	461c      	movlt	r4, r3
 80064f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80064fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006500:	68ab      	ldr	r3, [r5, #8]
 8006502:	6869      	ldr	r1, [r5, #4]
 8006504:	eb0a 0709 	add.w	r7, sl, r9
 8006508:	42bb      	cmp	r3, r7
 800650a:	b085      	sub	sp, #20
 800650c:	bfb8      	it	lt
 800650e:	3101      	addlt	r1, #1
 8006510:	f7ff fed4 	bl	80062bc <_Balloc>
 8006514:	b930      	cbnz	r0, 8006524 <__multiply+0x44>
 8006516:	4602      	mov	r2, r0
 8006518:	4b42      	ldr	r3, [pc, #264]	; (8006624 <__multiply+0x144>)
 800651a:	4843      	ldr	r0, [pc, #268]	; (8006628 <__multiply+0x148>)
 800651c:	f240 115d 	movw	r1, #349	; 0x15d
 8006520:	f000 fc70 	bl	8006e04 <__assert_func>
 8006524:	f100 0614 	add.w	r6, r0, #20
 8006528:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800652c:	4633      	mov	r3, r6
 800652e:	2200      	movs	r2, #0
 8006530:	4543      	cmp	r3, r8
 8006532:	d31e      	bcc.n	8006572 <__multiply+0x92>
 8006534:	f105 0c14 	add.w	ip, r5, #20
 8006538:	f104 0314 	add.w	r3, r4, #20
 800653c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006540:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006544:	9202      	str	r2, [sp, #8]
 8006546:	ebac 0205 	sub.w	r2, ip, r5
 800654a:	3a15      	subs	r2, #21
 800654c:	f022 0203 	bic.w	r2, r2, #3
 8006550:	3204      	adds	r2, #4
 8006552:	f105 0115 	add.w	r1, r5, #21
 8006556:	458c      	cmp	ip, r1
 8006558:	bf38      	it	cc
 800655a:	2204      	movcc	r2, #4
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	9a02      	ldr	r2, [sp, #8]
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	d808      	bhi.n	8006578 <__multiply+0x98>
 8006566:	2f00      	cmp	r7, #0
 8006568:	dc55      	bgt.n	8006616 <__multiply+0x136>
 800656a:	6107      	str	r7, [r0, #16]
 800656c:	b005      	add	sp, #20
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	f843 2b04 	str.w	r2, [r3], #4
 8006576:	e7db      	b.n	8006530 <__multiply+0x50>
 8006578:	f8b3 a000 	ldrh.w	sl, [r3]
 800657c:	f1ba 0f00 	cmp.w	sl, #0
 8006580:	d020      	beq.n	80065c4 <__multiply+0xe4>
 8006582:	f105 0e14 	add.w	lr, r5, #20
 8006586:	46b1      	mov	r9, r6
 8006588:	2200      	movs	r2, #0
 800658a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800658e:	f8d9 b000 	ldr.w	fp, [r9]
 8006592:	b2a1      	uxth	r1, r4
 8006594:	fa1f fb8b 	uxth.w	fp, fp
 8006598:	fb0a b101 	mla	r1, sl, r1, fp
 800659c:	4411      	add	r1, r2
 800659e:	f8d9 2000 	ldr.w	r2, [r9]
 80065a2:	0c24      	lsrs	r4, r4, #16
 80065a4:	0c12      	lsrs	r2, r2, #16
 80065a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80065aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80065ae:	b289      	uxth	r1, r1
 80065b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065b4:	45f4      	cmp	ip, lr
 80065b6:	f849 1b04 	str.w	r1, [r9], #4
 80065ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80065be:	d8e4      	bhi.n	800658a <__multiply+0xaa>
 80065c0:	9901      	ldr	r1, [sp, #4]
 80065c2:	5072      	str	r2, [r6, r1]
 80065c4:	9a03      	ldr	r2, [sp, #12]
 80065c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065ca:	3304      	adds	r3, #4
 80065cc:	f1b9 0f00 	cmp.w	r9, #0
 80065d0:	d01f      	beq.n	8006612 <__multiply+0x132>
 80065d2:	6834      	ldr	r4, [r6, #0]
 80065d4:	f105 0114 	add.w	r1, r5, #20
 80065d8:	46b6      	mov	lr, r6
 80065da:	f04f 0a00 	mov.w	sl, #0
 80065de:	880a      	ldrh	r2, [r1, #0]
 80065e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80065e4:	fb09 b202 	mla	r2, r9, r2, fp
 80065e8:	4492      	add	sl, r2
 80065ea:	b2a4      	uxth	r4, r4
 80065ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80065f0:	f84e 4b04 	str.w	r4, [lr], #4
 80065f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80065f8:	f8be 2000 	ldrh.w	r2, [lr]
 80065fc:	0c24      	lsrs	r4, r4, #16
 80065fe:	fb09 2404 	mla	r4, r9, r4, r2
 8006602:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006606:	458c      	cmp	ip, r1
 8006608:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800660c:	d8e7      	bhi.n	80065de <__multiply+0xfe>
 800660e:	9a01      	ldr	r2, [sp, #4]
 8006610:	50b4      	str	r4, [r6, r2]
 8006612:	3604      	adds	r6, #4
 8006614:	e7a3      	b.n	800655e <__multiply+0x7e>
 8006616:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1a5      	bne.n	800656a <__multiply+0x8a>
 800661e:	3f01      	subs	r7, #1
 8006620:	e7a1      	b.n	8006566 <__multiply+0x86>
 8006622:	bf00      	nop
 8006624:	08007abf 	.word	0x08007abf
 8006628:	08007ad0 	.word	0x08007ad0

0800662c <__pow5mult>:
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006630:	4615      	mov	r5, r2
 8006632:	f012 0203 	ands.w	r2, r2, #3
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	d007      	beq.n	800664c <__pow5mult+0x20>
 800663c:	4c25      	ldr	r4, [pc, #148]	; (80066d4 <__pow5mult+0xa8>)
 800663e:	3a01      	subs	r2, #1
 8006640:	2300      	movs	r3, #0
 8006642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006646:	f7ff fe9b 	bl	8006380 <__multadd>
 800664a:	4607      	mov	r7, r0
 800664c:	10ad      	asrs	r5, r5, #2
 800664e:	d03d      	beq.n	80066cc <__pow5mult+0xa0>
 8006650:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006652:	b97c      	cbnz	r4, 8006674 <__pow5mult+0x48>
 8006654:	2010      	movs	r0, #16
 8006656:	f7ff fe1b 	bl	8006290 <malloc>
 800665a:	4602      	mov	r2, r0
 800665c:	6270      	str	r0, [r6, #36]	; 0x24
 800665e:	b928      	cbnz	r0, 800666c <__pow5mult+0x40>
 8006660:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <__pow5mult+0xac>)
 8006662:	481e      	ldr	r0, [pc, #120]	; (80066dc <__pow5mult+0xb0>)
 8006664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006668:	f000 fbcc 	bl	8006e04 <__assert_func>
 800666c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006670:	6004      	str	r4, [r0, #0]
 8006672:	60c4      	str	r4, [r0, #12]
 8006674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800667c:	b94c      	cbnz	r4, 8006692 <__pow5mult+0x66>
 800667e:	f240 2171 	movw	r1, #625	; 0x271
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ff16 	bl	80064b4 <__i2b>
 8006688:	2300      	movs	r3, #0
 800668a:	f8c8 0008 	str.w	r0, [r8, #8]
 800668e:	4604      	mov	r4, r0
 8006690:	6003      	str	r3, [r0, #0]
 8006692:	f04f 0900 	mov.w	r9, #0
 8006696:	07eb      	lsls	r3, r5, #31
 8006698:	d50a      	bpl.n	80066b0 <__pow5mult+0x84>
 800669a:	4639      	mov	r1, r7
 800669c:	4622      	mov	r2, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ff1e 	bl	80064e0 <__multiply>
 80066a4:	4639      	mov	r1, r7
 80066a6:	4680      	mov	r8, r0
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff fe47 	bl	800633c <_Bfree>
 80066ae:	4647      	mov	r7, r8
 80066b0:	106d      	asrs	r5, r5, #1
 80066b2:	d00b      	beq.n	80066cc <__pow5mult+0xa0>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	b938      	cbnz	r0, 80066c8 <__pow5mult+0x9c>
 80066b8:	4622      	mov	r2, r4
 80066ba:	4621      	mov	r1, r4
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff ff0f 	bl	80064e0 <__multiply>
 80066c2:	6020      	str	r0, [r4, #0]
 80066c4:	f8c0 9000 	str.w	r9, [r0]
 80066c8:	4604      	mov	r4, r0
 80066ca:	e7e4      	b.n	8006696 <__pow5mult+0x6a>
 80066cc:	4638      	mov	r0, r7
 80066ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d2:	bf00      	nop
 80066d4:	08007c20 	.word	0x08007c20
 80066d8:	08007a49 	.word	0x08007a49
 80066dc:	08007ad0 	.word	0x08007ad0

080066e0 <__lshift>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	6849      	ldr	r1, [r1, #4]
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	4607      	mov	r7, r0
 80066f2:	4691      	mov	r9, r2
 80066f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066f8:	f108 0601 	add.w	r6, r8, #1
 80066fc:	42b3      	cmp	r3, r6
 80066fe:	db0b      	blt.n	8006718 <__lshift+0x38>
 8006700:	4638      	mov	r0, r7
 8006702:	f7ff fddb 	bl	80062bc <_Balloc>
 8006706:	4605      	mov	r5, r0
 8006708:	b948      	cbnz	r0, 800671e <__lshift+0x3e>
 800670a:	4602      	mov	r2, r0
 800670c:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <__lshift+0xd0>)
 800670e:	4829      	ldr	r0, [pc, #164]	; (80067b4 <__lshift+0xd4>)
 8006710:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006714:	f000 fb76 	bl	8006e04 <__assert_func>
 8006718:	3101      	adds	r1, #1
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	e7ee      	b.n	80066fc <__lshift+0x1c>
 800671e:	2300      	movs	r3, #0
 8006720:	f100 0114 	add.w	r1, r0, #20
 8006724:	f100 0210 	add.w	r2, r0, #16
 8006728:	4618      	mov	r0, r3
 800672a:	4553      	cmp	r3, sl
 800672c:	db33      	blt.n	8006796 <__lshift+0xb6>
 800672e:	6920      	ldr	r0, [r4, #16]
 8006730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006734:	f104 0314 	add.w	r3, r4, #20
 8006738:	f019 091f 	ands.w	r9, r9, #31
 800673c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006744:	d02b      	beq.n	800679e <__lshift+0xbe>
 8006746:	f1c9 0e20 	rsb	lr, r9, #32
 800674a:	468a      	mov	sl, r1
 800674c:	2200      	movs	r2, #0
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	fa00 f009 	lsl.w	r0, r0, r9
 8006754:	4302      	orrs	r2, r0
 8006756:	f84a 2b04 	str.w	r2, [sl], #4
 800675a:	f853 2b04 	ldr.w	r2, [r3], #4
 800675e:	459c      	cmp	ip, r3
 8006760:	fa22 f20e 	lsr.w	r2, r2, lr
 8006764:	d8f3      	bhi.n	800674e <__lshift+0x6e>
 8006766:	ebac 0304 	sub.w	r3, ip, r4
 800676a:	3b15      	subs	r3, #21
 800676c:	f023 0303 	bic.w	r3, r3, #3
 8006770:	3304      	adds	r3, #4
 8006772:	f104 0015 	add.w	r0, r4, #21
 8006776:	4584      	cmp	ip, r0
 8006778:	bf38      	it	cc
 800677a:	2304      	movcc	r3, #4
 800677c:	50ca      	str	r2, [r1, r3]
 800677e:	b10a      	cbz	r2, 8006784 <__lshift+0xa4>
 8006780:	f108 0602 	add.w	r6, r8, #2
 8006784:	3e01      	subs	r6, #1
 8006786:	4638      	mov	r0, r7
 8006788:	612e      	str	r6, [r5, #16]
 800678a:	4621      	mov	r1, r4
 800678c:	f7ff fdd6 	bl	800633c <_Bfree>
 8006790:	4628      	mov	r0, r5
 8006792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006796:	f842 0f04 	str.w	r0, [r2, #4]!
 800679a:	3301      	adds	r3, #1
 800679c:	e7c5      	b.n	800672a <__lshift+0x4a>
 800679e:	3904      	subs	r1, #4
 80067a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80067a8:	459c      	cmp	ip, r3
 80067aa:	d8f9      	bhi.n	80067a0 <__lshift+0xc0>
 80067ac:	e7ea      	b.n	8006784 <__lshift+0xa4>
 80067ae:	bf00      	nop
 80067b0:	08007abf 	.word	0x08007abf
 80067b4:	08007ad0 	.word	0x08007ad0

080067b8 <__mcmp>:
 80067b8:	b530      	push	{r4, r5, lr}
 80067ba:	6902      	ldr	r2, [r0, #16]
 80067bc:	690c      	ldr	r4, [r1, #16]
 80067be:	1b12      	subs	r2, r2, r4
 80067c0:	d10e      	bne.n	80067e0 <__mcmp+0x28>
 80067c2:	f100 0314 	add.w	r3, r0, #20
 80067c6:	3114      	adds	r1, #20
 80067c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067d8:	42a5      	cmp	r5, r4
 80067da:	d003      	beq.n	80067e4 <__mcmp+0x2c>
 80067dc:	d305      	bcc.n	80067ea <__mcmp+0x32>
 80067de:	2201      	movs	r2, #1
 80067e0:	4610      	mov	r0, r2
 80067e2:	bd30      	pop	{r4, r5, pc}
 80067e4:	4283      	cmp	r3, r0
 80067e6:	d3f3      	bcc.n	80067d0 <__mcmp+0x18>
 80067e8:	e7fa      	b.n	80067e0 <__mcmp+0x28>
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295
 80067ee:	e7f7      	b.n	80067e0 <__mcmp+0x28>

080067f0 <__mdiff>:
 80067f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	4606      	mov	r6, r0
 80067f8:	4611      	mov	r1, r2
 80067fa:	4620      	mov	r0, r4
 80067fc:	4617      	mov	r7, r2
 80067fe:	f7ff ffdb 	bl	80067b8 <__mcmp>
 8006802:	1e05      	subs	r5, r0, #0
 8006804:	d110      	bne.n	8006828 <__mdiff+0x38>
 8006806:	4629      	mov	r1, r5
 8006808:	4630      	mov	r0, r6
 800680a:	f7ff fd57 	bl	80062bc <_Balloc>
 800680e:	b930      	cbnz	r0, 800681e <__mdiff+0x2e>
 8006810:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <__mdiff+0x108>)
 8006812:	4602      	mov	r2, r0
 8006814:	f240 2132 	movw	r1, #562	; 0x232
 8006818:	4838      	ldr	r0, [pc, #224]	; (80068fc <__mdiff+0x10c>)
 800681a:	f000 faf3 	bl	8006e04 <__assert_func>
 800681e:	2301      	movs	r3, #1
 8006820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	bfa4      	itt	ge
 800682a:	463b      	movge	r3, r7
 800682c:	4627      	movge	r7, r4
 800682e:	4630      	mov	r0, r6
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	bfa6      	itte	ge
 8006834:	461c      	movge	r4, r3
 8006836:	2500      	movge	r5, #0
 8006838:	2501      	movlt	r5, #1
 800683a:	f7ff fd3f 	bl	80062bc <_Balloc>
 800683e:	b920      	cbnz	r0, 800684a <__mdiff+0x5a>
 8006840:	4b2d      	ldr	r3, [pc, #180]	; (80068f8 <__mdiff+0x108>)
 8006842:	4602      	mov	r2, r0
 8006844:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006848:	e7e6      	b.n	8006818 <__mdiff+0x28>
 800684a:	693e      	ldr	r6, [r7, #16]
 800684c:	60c5      	str	r5, [r0, #12]
 800684e:	6925      	ldr	r5, [r4, #16]
 8006850:	f107 0114 	add.w	r1, r7, #20
 8006854:	f104 0914 	add.w	r9, r4, #20
 8006858:	f100 0e14 	add.w	lr, r0, #20
 800685c:	f107 0210 	add.w	r2, r7, #16
 8006860:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006864:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006868:	46f2      	mov	sl, lr
 800686a:	2700      	movs	r7, #0
 800686c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006874:	fa1f f883 	uxth.w	r8, r3
 8006878:	fa17 f78b 	uxtah	r7, r7, fp
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	eba7 0808 	sub.w	r8, r7, r8
 8006882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800688a:	fa1f f888 	uxth.w	r8, r8
 800688e:	141f      	asrs	r7, r3, #16
 8006890:	454d      	cmp	r5, r9
 8006892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006896:	f84a 3b04 	str.w	r3, [sl], #4
 800689a:	d8e7      	bhi.n	800686c <__mdiff+0x7c>
 800689c:	1b2b      	subs	r3, r5, r4
 800689e:	3b15      	subs	r3, #21
 80068a0:	f023 0303 	bic.w	r3, r3, #3
 80068a4:	3304      	adds	r3, #4
 80068a6:	3415      	adds	r4, #21
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	bf38      	it	cc
 80068ac:	2304      	movcc	r3, #4
 80068ae:	4419      	add	r1, r3
 80068b0:	4473      	add	r3, lr
 80068b2:	469e      	mov	lr, r3
 80068b4:	460d      	mov	r5, r1
 80068b6:	4565      	cmp	r5, ip
 80068b8:	d30e      	bcc.n	80068d8 <__mdiff+0xe8>
 80068ba:	f10c 0203 	add.w	r2, ip, #3
 80068be:	1a52      	subs	r2, r2, r1
 80068c0:	f022 0203 	bic.w	r2, r2, #3
 80068c4:	3903      	subs	r1, #3
 80068c6:	458c      	cmp	ip, r1
 80068c8:	bf38      	it	cc
 80068ca:	2200      	movcc	r2, #0
 80068cc:	441a      	add	r2, r3
 80068ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068d2:	b17b      	cbz	r3, 80068f4 <__mdiff+0x104>
 80068d4:	6106      	str	r6, [r0, #16]
 80068d6:	e7a5      	b.n	8006824 <__mdiff+0x34>
 80068d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80068dc:	fa17 f488 	uxtah	r4, r7, r8
 80068e0:	1422      	asrs	r2, r4, #16
 80068e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80068e6:	b2a4      	uxth	r4, r4
 80068e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80068ec:	f84e 4b04 	str.w	r4, [lr], #4
 80068f0:	1417      	asrs	r7, r2, #16
 80068f2:	e7e0      	b.n	80068b6 <__mdiff+0xc6>
 80068f4:	3e01      	subs	r6, #1
 80068f6:	e7ea      	b.n	80068ce <__mdiff+0xde>
 80068f8:	08007abf 	.word	0x08007abf
 80068fc:	08007ad0 	.word	0x08007ad0

08006900 <__d2b>:
 8006900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006904:	4689      	mov	r9, r1
 8006906:	2101      	movs	r1, #1
 8006908:	ec57 6b10 	vmov	r6, r7, d0
 800690c:	4690      	mov	r8, r2
 800690e:	f7ff fcd5 	bl	80062bc <_Balloc>
 8006912:	4604      	mov	r4, r0
 8006914:	b930      	cbnz	r0, 8006924 <__d2b+0x24>
 8006916:	4602      	mov	r2, r0
 8006918:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <__d2b+0xb0>)
 800691a:	4826      	ldr	r0, [pc, #152]	; (80069b4 <__d2b+0xb4>)
 800691c:	f240 310a 	movw	r1, #778	; 0x30a
 8006920:	f000 fa70 	bl	8006e04 <__assert_func>
 8006924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800692c:	bb35      	cbnz	r5, 800697c <__d2b+0x7c>
 800692e:	2e00      	cmp	r6, #0
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	d028      	beq.n	8006986 <__d2b+0x86>
 8006934:	4668      	mov	r0, sp
 8006936:	9600      	str	r6, [sp, #0]
 8006938:	f7ff fd8c 	bl	8006454 <__lo0bits>
 800693c:	9900      	ldr	r1, [sp, #0]
 800693e:	b300      	cbz	r0, 8006982 <__d2b+0x82>
 8006940:	9a01      	ldr	r2, [sp, #4]
 8006942:	f1c0 0320 	rsb	r3, r0, #32
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	430b      	orrs	r3, r1
 800694c:	40c2      	lsrs	r2, r0
 800694e:	6163      	str	r3, [r4, #20]
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	9b01      	ldr	r3, [sp, #4]
 8006954:	61a3      	str	r3, [r4, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	bf14      	ite	ne
 800695a:	2202      	movne	r2, #2
 800695c:	2201      	moveq	r2, #1
 800695e:	6122      	str	r2, [r4, #16]
 8006960:	b1d5      	cbz	r5, 8006998 <__d2b+0x98>
 8006962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006966:	4405      	add	r5, r0
 8006968:	f8c9 5000 	str.w	r5, [r9]
 800696c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006970:	f8c8 0000 	str.w	r0, [r8]
 8006974:	4620      	mov	r0, r4
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800697c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006980:	e7d5      	b.n	800692e <__d2b+0x2e>
 8006982:	6161      	str	r1, [r4, #20]
 8006984:	e7e5      	b.n	8006952 <__d2b+0x52>
 8006986:	a801      	add	r0, sp, #4
 8006988:	f7ff fd64 	bl	8006454 <__lo0bits>
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	6163      	str	r3, [r4, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	6122      	str	r2, [r4, #16]
 8006994:	3020      	adds	r0, #32
 8006996:	e7e3      	b.n	8006960 <__d2b+0x60>
 8006998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800699c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069a0:	f8c9 0000 	str.w	r0, [r9]
 80069a4:	6918      	ldr	r0, [r3, #16]
 80069a6:	f7ff fd35 	bl	8006414 <__hi0bits>
 80069aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069ae:	e7df      	b.n	8006970 <__d2b+0x70>
 80069b0:	08007abf 	.word	0x08007abf
 80069b4:	08007ad0 	.word	0x08007ad0

080069b8 <_calloc_r>:
 80069b8:	b513      	push	{r0, r1, r4, lr}
 80069ba:	434a      	muls	r2, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	9201      	str	r2, [sp, #4]
 80069c0:	f000 f85a 	bl	8006a78 <_malloc_r>
 80069c4:	4604      	mov	r4, r0
 80069c6:	b118      	cbz	r0, 80069d0 <_calloc_r+0x18>
 80069c8:	9a01      	ldr	r2, [sp, #4]
 80069ca:	2100      	movs	r1, #0
 80069cc:	f7fe f952 	bl	8004c74 <memset>
 80069d0:	4620      	mov	r0, r4
 80069d2:	b002      	add	sp, #8
 80069d4:	bd10      	pop	{r4, pc}
	...

080069d8 <_free_r>:
 80069d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069da:	2900      	cmp	r1, #0
 80069dc:	d048      	beq.n	8006a70 <_free_r+0x98>
 80069de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e2:	9001      	str	r0, [sp, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f1a1 0404 	sub.w	r4, r1, #4
 80069ea:	bfb8      	it	lt
 80069ec:	18e4      	addlt	r4, r4, r3
 80069ee:	f000 fa65 	bl	8006ebc <__malloc_lock>
 80069f2:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <_free_r+0x9c>)
 80069f4:	9801      	ldr	r0, [sp, #4]
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	4615      	mov	r5, r2
 80069fa:	b933      	cbnz	r3, 8006a0a <_free_r+0x32>
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	6014      	str	r4, [r2, #0]
 8006a00:	b003      	add	sp, #12
 8006a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a06:	f000 ba5f 	b.w	8006ec8 <__malloc_unlock>
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	d90b      	bls.n	8006a26 <_free_r+0x4e>
 8006a0e:	6821      	ldr	r1, [r4, #0]
 8006a10:	1862      	adds	r2, r4, r1
 8006a12:	4293      	cmp	r3, r2
 8006a14:	bf04      	itt	eq
 8006a16:	681a      	ldreq	r2, [r3, #0]
 8006a18:	685b      	ldreq	r3, [r3, #4]
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	bf04      	itt	eq
 8006a1e:	1852      	addeq	r2, r2, r1
 8006a20:	6022      	streq	r2, [r4, #0]
 8006a22:	602c      	str	r4, [r5, #0]
 8006a24:	e7ec      	b.n	8006a00 <_free_r+0x28>
 8006a26:	461a      	mov	r2, r3
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b10b      	cbz	r3, 8006a30 <_free_r+0x58>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d9fa      	bls.n	8006a26 <_free_r+0x4e>
 8006a30:	6811      	ldr	r1, [r2, #0]
 8006a32:	1855      	adds	r5, r2, r1
 8006a34:	42a5      	cmp	r5, r4
 8006a36:	d10b      	bne.n	8006a50 <_free_r+0x78>
 8006a38:	6824      	ldr	r4, [r4, #0]
 8006a3a:	4421      	add	r1, r4
 8006a3c:	1854      	adds	r4, r2, r1
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	6011      	str	r1, [r2, #0]
 8006a42:	d1dd      	bne.n	8006a00 <_free_r+0x28>
 8006a44:	681c      	ldr	r4, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	6053      	str	r3, [r2, #4]
 8006a4a:	4421      	add	r1, r4
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	e7d7      	b.n	8006a00 <_free_r+0x28>
 8006a50:	d902      	bls.n	8006a58 <_free_r+0x80>
 8006a52:	230c      	movs	r3, #12
 8006a54:	6003      	str	r3, [r0, #0]
 8006a56:	e7d3      	b.n	8006a00 <_free_r+0x28>
 8006a58:	6825      	ldr	r5, [r4, #0]
 8006a5a:	1961      	adds	r1, r4, r5
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	bf04      	itt	eq
 8006a60:	6819      	ldreq	r1, [r3, #0]
 8006a62:	685b      	ldreq	r3, [r3, #4]
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	bf04      	itt	eq
 8006a68:	1949      	addeq	r1, r1, r5
 8006a6a:	6021      	streq	r1, [r4, #0]
 8006a6c:	6054      	str	r4, [r2, #4]
 8006a6e:	e7c7      	b.n	8006a00 <_free_r+0x28>
 8006a70:	b003      	add	sp, #12
 8006a72:	bd30      	pop	{r4, r5, pc}
 8006a74:	200001fc 	.word	0x200001fc

08006a78 <_malloc_r>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	1ccd      	adds	r5, r1, #3
 8006a7c:	f025 0503 	bic.w	r5, r5, #3
 8006a80:	3508      	adds	r5, #8
 8006a82:	2d0c      	cmp	r5, #12
 8006a84:	bf38      	it	cc
 8006a86:	250c      	movcc	r5, #12
 8006a88:	2d00      	cmp	r5, #0
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	db01      	blt.n	8006a92 <_malloc_r+0x1a>
 8006a8e:	42a9      	cmp	r1, r5
 8006a90:	d903      	bls.n	8006a9a <_malloc_r+0x22>
 8006a92:	230c      	movs	r3, #12
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	2000      	movs	r0, #0
 8006a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a9a:	f000 fa0f 	bl	8006ebc <__malloc_lock>
 8006a9e:	4921      	ldr	r1, [pc, #132]	; (8006b24 <_malloc_r+0xac>)
 8006aa0:	680a      	ldr	r2, [r1, #0]
 8006aa2:	4614      	mov	r4, r2
 8006aa4:	b99c      	cbnz	r4, 8006ace <_malloc_r+0x56>
 8006aa6:	4f20      	ldr	r7, [pc, #128]	; (8006b28 <_malloc_r+0xb0>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	b923      	cbnz	r3, 8006ab6 <_malloc_r+0x3e>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 f998 	bl	8006de4 <_sbrk_r>
 8006ab4:	6038      	str	r0, [r7, #0]
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f000 f993 	bl	8006de4 <_sbrk_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d123      	bne.n	8006b0a <_malloc_r+0x92>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	6033      	str	r3, [r6, #0]
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f9fe 	bl	8006ec8 <__malloc_unlock>
 8006acc:	e7e3      	b.n	8006a96 <_malloc_r+0x1e>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	1b5b      	subs	r3, r3, r5
 8006ad2:	d417      	bmi.n	8006b04 <_malloc_r+0x8c>
 8006ad4:	2b0b      	cmp	r3, #11
 8006ad6:	d903      	bls.n	8006ae0 <_malloc_r+0x68>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	441c      	add	r4, r3
 8006adc:	6025      	str	r5, [r4, #0]
 8006ade:	e004      	b.n	8006aea <_malloc_r+0x72>
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	42a2      	cmp	r2, r4
 8006ae4:	bf0c      	ite	eq
 8006ae6:	600b      	streq	r3, [r1, #0]
 8006ae8:	6053      	strne	r3, [r2, #4]
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 f9ec 	bl	8006ec8 <__malloc_unlock>
 8006af0:	f104 000b 	add.w	r0, r4, #11
 8006af4:	1d23      	adds	r3, r4, #4
 8006af6:	f020 0007 	bic.w	r0, r0, #7
 8006afa:	1ac2      	subs	r2, r0, r3
 8006afc:	d0cc      	beq.n	8006a98 <_malloc_r+0x20>
 8006afe:	1a1b      	subs	r3, r3, r0
 8006b00:	50a3      	str	r3, [r4, r2]
 8006b02:	e7c9      	b.n	8006a98 <_malloc_r+0x20>
 8006b04:	4622      	mov	r2, r4
 8006b06:	6864      	ldr	r4, [r4, #4]
 8006b08:	e7cc      	b.n	8006aa4 <_malloc_r+0x2c>
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d0e3      	beq.n	8006adc <_malloc_r+0x64>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4630      	mov	r0, r6
 8006b18:	f000 f964 	bl	8006de4 <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1dd      	bne.n	8006adc <_malloc_r+0x64>
 8006b20:	e7cf      	b.n	8006ac2 <_malloc_r+0x4a>
 8006b22:	bf00      	nop
 8006b24:	200001fc 	.word	0x200001fc
 8006b28:	20000200 	.word	0x20000200

08006b2c <__ssputs_r>:
 8006b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	688e      	ldr	r6, [r1, #8]
 8006b32:	429e      	cmp	r6, r3
 8006b34:	4682      	mov	sl, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	4690      	mov	r8, r2
 8006b3a:	461f      	mov	r7, r3
 8006b3c:	d838      	bhi.n	8006bb0 <__ssputs_r+0x84>
 8006b3e:	898a      	ldrh	r2, [r1, #12]
 8006b40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b44:	d032      	beq.n	8006bac <__ssputs_r+0x80>
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	6909      	ldr	r1, [r1, #16]
 8006b4a:	eba5 0901 	sub.w	r9, r5, r1
 8006b4e:	6965      	ldr	r5, [r4, #20]
 8006b50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b58:	3301      	adds	r3, #1
 8006b5a:	444b      	add	r3, r9
 8006b5c:	106d      	asrs	r5, r5, #1
 8006b5e:	429d      	cmp	r5, r3
 8006b60:	bf38      	it	cc
 8006b62:	461d      	movcc	r5, r3
 8006b64:	0553      	lsls	r3, r2, #21
 8006b66:	d531      	bpl.n	8006bcc <__ssputs_r+0xa0>
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7ff ff85 	bl	8006a78 <_malloc_r>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	b950      	cbnz	r0, 8006b88 <__ssputs_r+0x5c>
 8006b72:	230c      	movs	r3, #12
 8006b74:	f8ca 3000 	str.w	r3, [sl]
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b88:	6921      	ldr	r1, [r4, #16]
 8006b8a:	464a      	mov	r2, r9
 8006b8c:	f7ff fb88 	bl	80062a0 <memcpy>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	81a3      	strh	r3, [r4, #12]
 8006b9c:	6126      	str	r6, [r4, #16]
 8006b9e:	6165      	str	r5, [r4, #20]
 8006ba0:	444e      	add	r6, r9
 8006ba2:	eba5 0509 	sub.w	r5, r5, r9
 8006ba6:	6026      	str	r6, [r4, #0]
 8006ba8:	60a5      	str	r5, [r4, #8]
 8006baa:	463e      	mov	r6, r7
 8006bac:	42be      	cmp	r6, r7
 8006bae:	d900      	bls.n	8006bb2 <__ssputs_r+0x86>
 8006bb0:	463e      	mov	r6, r7
 8006bb2:	4632      	mov	r2, r6
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	f000 f966 	bl	8006e88 <memmove>
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	1b9b      	subs	r3, r3, r6
 8006bc2:	4432      	add	r2, r6
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7db      	b.n	8006b84 <__ssputs_r+0x58>
 8006bcc:	462a      	mov	r2, r5
 8006bce:	f000 f981 	bl	8006ed4 <_realloc_r>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d1e1      	bne.n	8006b9c <__ssputs_r+0x70>
 8006bd8:	6921      	ldr	r1, [r4, #16]
 8006bda:	4650      	mov	r0, sl
 8006bdc:	f7ff fefc 	bl	80069d8 <_free_r>
 8006be0:	e7c7      	b.n	8006b72 <__ssputs_r+0x46>
	...

08006be4 <_svfiprintf_r>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4698      	mov	r8, r3
 8006bea:	898b      	ldrh	r3, [r1, #12]
 8006bec:	061b      	lsls	r3, r3, #24
 8006bee:	b09d      	sub	sp, #116	; 0x74
 8006bf0:	4607      	mov	r7, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	d50e      	bpl.n	8006c16 <_svfiprintf_r+0x32>
 8006bf8:	690b      	ldr	r3, [r1, #16]
 8006bfa:	b963      	cbnz	r3, 8006c16 <_svfiprintf_r+0x32>
 8006bfc:	2140      	movs	r1, #64	; 0x40
 8006bfe:	f7ff ff3b 	bl	8006a78 <_malloc_r>
 8006c02:	6028      	str	r0, [r5, #0]
 8006c04:	6128      	str	r0, [r5, #16]
 8006c06:	b920      	cbnz	r0, 8006c12 <_svfiprintf_r+0x2e>
 8006c08:	230c      	movs	r3, #12
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	e0d1      	b.n	8006db6 <_svfiprintf_r+0x1d2>
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	616b      	str	r3, [r5, #20]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1a:	2320      	movs	r3, #32
 8006c1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c24:	2330      	movs	r3, #48	; 0x30
 8006c26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dd0 <_svfiprintf_r+0x1ec>
 8006c2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c2e:	f04f 0901 	mov.w	r9, #1
 8006c32:	4623      	mov	r3, r4
 8006c34:	469a      	mov	sl, r3
 8006c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c3a:	b10a      	cbz	r2, 8006c40 <_svfiprintf_r+0x5c>
 8006c3c:	2a25      	cmp	r2, #37	; 0x25
 8006c3e:	d1f9      	bne.n	8006c34 <_svfiprintf_r+0x50>
 8006c40:	ebba 0b04 	subs.w	fp, sl, r4
 8006c44:	d00b      	beq.n	8006c5e <_svfiprintf_r+0x7a>
 8006c46:	465b      	mov	r3, fp
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff ff6d 	bl	8006b2c <__ssputs_r>
 8006c52:	3001      	adds	r0, #1
 8006c54:	f000 80aa 	beq.w	8006dac <_svfiprintf_r+0x1c8>
 8006c58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c5a:	445a      	add	r2, fp
 8006c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80a2 	beq.w	8006dac <_svfiprintf_r+0x1c8>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c72:	f10a 0a01 	add.w	sl, sl, #1
 8006c76:	9304      	str	r3, [sp, #16]
 8006c78:	9307      	str	r3, [sp, #28]
 8006c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c80:	4654      	mov	r4, sl
 8006c82:	2205      	movs	r2, #5
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	4851      	ldr	r0, [pc, #324]	; (8006dd0 <_svfiprintf_r+0x1ec>)
 8006c8a:	f7f9 faa9 	bl	80001e0 <memchr>
 8006c8e:	9a04      	ldr	r2, [sp, #16]
 8006c90:	b9d8      	cbnz	r0, 8006cca <_svfiprintf_r+0xe6>
 8006c92:	06d0      	lsls	r0, r2, #27
 8006c94:	bf44      	itt	mi
 8006c96:	2320      	movmi	r3, #32
 8006c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9c:	0711      	lsls	r1, r2, #28
 8006c9e:	bf44      	itt	mi
 8006ca0:	232b      	movmi	r3, #43	; 0x2b
 8006ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8006caa:	2b2a      	cmp	r3, #42	; 0x2a
 8006cac:	d015      	beq.n	8006cda <_svfiprintf_r+0xf6>
 8006cae:	9a07      	ldr	r2, [sp, #28]
 8006cb0:	4654      	mov	r4, sl
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	f04f 0c0a 	mov.w	ip, #10
 8006cb8:	4621      	mov	r1, r4
 8006cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cbe:	3b30      	subs	r3, #48	; 0x30
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d94e      	bls.n	8006d62 <_svfiprintf_r+0x17e>
 8006cc4:	b1b0      	cbz	r0, 8006cf4 <_svfiprintf_r+0x110>
 8006cc6:	9207      	str	r2, [sp, #28]
 8006cc8:	e014      	b.n	8006cf4 <_svfiprintf_r+0x110>
 8006cca:	eba0 0308 	sub.w	r3, r0, r8
 8006cce:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	9304      	str	r3, [sp, #16]
 8006cd6:	46a2      	mov	sl, r4
 8006cd8:	e7d2      	b.n	8006c80 <_svfiprintf_r+0x9c>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	9103      	str	r1, [sp, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bfbb      	ittet	lt
 8006ce6:	425b      	neglt	r3, r3
 8006ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cec:	9307      	strge	r3, [sp, #28]
 8006cee:	9307      	strlt	r3, [sp, #28]
 8006cf0:	bfb8      	it	lt
 8006cf2:	9204      	strlt	r2, [sp, #16]
 8006cf4:	7823      	ldrb	r3, [r4, #0]
 8006cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf8:	d10c      	bne.n	8006d14 <_svfiprintf_r+0x130>
 8006cfa:	7863      	ldrb	r3, [r4, #1]
 8006cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfe:	d135      	bne.n	8006d6c <_svfiprintf_r+0x188>
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	9203      	str	r2, [sp, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bfb8      	it	lt
 8006d0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d10:	3402      	adds	r4, #2
 8006d12:	9305      	str	r3, [sp, #20]
 8006d14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006de0 <_svfiprintf_r+0x1fc>
 8006d18:	7821      	ldrb	r1, [r4, #0]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	f7f9 fa5f 	bl	80001e0 <memchr>
 8006d22:	b140      	cbz	r0, 8006d36 <_svfiprintf_r+0x152>
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	eba0 000a 	sub.w	r0, r0, sl
 8006d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	4303      	orrs	r3, r0
 8006d32:	3401      	adds	r4, #1
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3a:	4826      	ldr	r0, [pc, #152]	; (8006dd4 <_svfiprintf_r+0x1f0>)
 8006d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d40:	2206      	movs	r2, #6
 8006d42:	f7f9 fa4d 	bl	80001e0 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d038      	beq.n	8006dbc <_svfiprintf_r+0x1d8>
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <_svfiprintf_r+0x1f4>)
 8006d4c:	bb1b      	cbnz	r3, 8006d96 <_svfiprintf_r+0x1b2>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	3308      	adds	r3, #8
 8006d58:	9303      	str	r3, [sp, #12]
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	4433      	add	r3, r6
 8006d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d60:	e767      	b.n	8006c32 <_svfiprintf_r+0x4e>
 8006d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d66:	460c      	mov	r4, r1
 8006d68:	2001      	movs	r0, #1
 8006d6a:	e7a5      	b.n	8006cb8 <_svfiprintf_r+0xd4>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	3401      	adds	r4, #1
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	4619      	mov	r1, r3
 8006d74:	f04f 0c0a 	mov.w	ip, #10
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d7e:	3a30      	subs	r2, #48	; 0x30
 8006d80:	2a09      	cmp	r2, #9
 8006d82:	d903      	bls.n	8006d8c <_svfiprintf_r+0x1a8>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0c5      	beq.n	8006d14 <_svfiprintf_r+0x130>
 8006d88:	9105      	str	r1, [sp, #20]
 8006d8a:	e7c3      	b.n	8006d14 <_svfiprintf_r+0x130>
 8006d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d90:	4604      	mov	r4, r0
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7f0      	b.n	8006d78 <_svfiprintf_r+0x194>
 8006d96:	ab03      	add	r3, sp, #12
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <_svfiprintf_r+0x1f8>)
 8006d9e:	a904      	add	r1, sp, #16
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7fe f80f 	bl	8004dc4 <_printf_float>
 8006da6:	1c42      	adds	r2, r0, #1
 8006da8:	4606      	mov	r6, r0
 8006daa:	d1d6      	bne.n	8006d5a <_svfiprintf_r+0x176>
 8006dac:	89ab      	ldrh	r3, [r5, #12]
 8006dae:	065b      	lsls	r3, r3, #25
 8006db0:	f53f af2c 	bmi.w	8006c0c <_svfiprintf_r+0x28>
 8006db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db6:	b01d      	add	sp, #116	; 0x74
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <_svfiprintf_r+0x1f8>)
 8006dc4:	a904      	add	r1, sp, #16
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7fe faa0 	bl	800530c <_printf_i>
 8006dcc:	e7eb      	b.n	8006da6 <_svfiprintf_r+0x1c2>
 8006dce:	bf00      	nop
 8006dd0:	08007c2c 	.word	0x08007c2c
 8006dd4:	08007c36 	.word	0x08007c36
 8006dd8:	08004dc5 	.word	0x08004dc5
 8006ddc:	08006b2d 	.word	0x08006b2d
 8006de0:	08007c32 	.word	0x08007c32

08006de4 <_sbrk_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_sbrk_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fa fbcc 	bl	800158c <_sbrk>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_sbrk_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_sbrk_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	200002f0 	.word	0x200002f0

08006e04 <__assert_func>:
 8006e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e06:	4614      	mov	r4, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <__assert_func+0x2c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4605      	mov	r5, r0
 8006e10:	68d8      	ldr	r0, [r3, #12]
 8006e12:	b14c      	cbz	r4, 8006e28 <__assert_func+0x24>
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <__assert_func+0x30>)
 8006e16:	9100      	str	r1, [sp, #0]
 8006e18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e1c:	4906      	ldr	r1, [pc, #24]	; (8006e38 <__assert_func+0x34>)
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f000 f80e 	bl	8006e40 <fiprintf>
 8006e24:	f000 faa4 	bl	8007370 <abort>
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <__assert_func+0x38>)
 8006e2a:	461c      	mov	r4, r3
 8006e2c:	e7f3      	b.n	8006e16 <__assert_func+0x12>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c
 8006e34:	08007c3d 	.word	0x08007c3d
 8006e38:	08007c4a 	.word	0x08007c4a
 8006e3c:	08007c78 	.word	0x08007c78

08006e40 <fiprintf>:
 8006e40:	b40e      	push	{r1, r2, r3}
 8006e42:	b503      	push	{r0, r1, lr}
 8006e44:	4601      	mov	r1, r0
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	4805      	ldr	r0, [pc, #20]	; (8006e60 <fiprintf+0x20>)
 8006e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	f000 f88f 	bl	8006f74 <_vfiprintf_r>
 8006e56:	b002      	add	sp, #8
 8006e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5c:	b003      	add	sp, #12
 8006e5e:	4770      	bx	lr
 8006e60:	2000000c 	.word	0x2000000c

08006e64 <__ascii_mbtowc>:
 8006e64:	b082      	sub	sp, #8
 8006e66:	b901      	cbnz	r1, 8006e6a <__ascii_mbtowc+0x6>
 8006e68:	a901      	add	r1, sp, #4
 8006e6a:	b142      	cbz	r2, 8006e7e <__ascii_mbtowc+0x1a>
 8006e6c:	b14b      	cbz	r3, 8006e82 <__ascii_mbtowc+0x1e>
 8006e6e:	7813      	ldrb	r3, [r2, #0]
 8006e70:	600b      	str	r3, [r1, #0]
 8006e72:	7812      	ldrb	r2, [r2, #0]
 8006e74:	1e10      	subs	r0, r2, #0
 8006e76:	bf18      	it	ne
 8006e78:	2001      	movne	r0, #1
 8006e7a:	b002      	add	sp, #8
 8006e7c:	4770      	bx	lr
 8006e7e:	4610      	mov	r0, r2
 8006e80:	e7fb      	b.n	8006e7a <__ascii_mbtowc+0x16>
 8006e82:	f06f 0001 	mvn.w	r0, #1
 8006e86:	e7f8      	b.n	8006e7a <__ascii_mbtowc+0x16>

08006e88 <memmove>:
 8006e88:	4288      	cmp	r0, r1
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	eb01 0402 	add.w	r4, r1, r2
 8006e90:	d902      	bls.n	8006e98 <memmove+0x10>
 8006e92:	4284      	cmp	r4, r0
 8006e94:	4623      	mov	r3, r4
 8006e96:	d807      	bhi.n	8006ea8 <memmove+0x20>
 8006e98:	1e43      	subs	r3, r0, #1
 8006e9a:	42a1      	cmp	r1, r4
 8006e9c:	d008      	beq.n	8006eb0 <memmove+0x28>
 8006e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ea6:	e7f8      	b.n	8006e9a <memmove+0x12>
 8006ea8:	4402      	add	r2, r0
 8006eaa:	4601      	mov	r1, r0
 8006eac:	428a      	cmp	r2, r1
 8006eae:	d100      	bne.n	8006eb2 <memmove+0x2a>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eba:	e7f7      	b.n	8006eac <memmove+0x24>

08006ebc <__malloc_lock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__malloc_lock+0x8>)
 8006ebe:	f000 bc17 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200002f8 	.word	0x200002f8

08006ec8 <__malloc_unlock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__malloc_unlock+0x8>)
 8006eca:	f000 bc12 	b.w	80076f2 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200002f8 	.word	0x200002f8

08006ed4 <_realloc_r>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	4614      	mov	r4, r2
 8006eda:	460e      	mov	r6, r1
 8006edc:	b921      	cbnz	r1, 8006ee8 <_realloc_r+0x14>
 8006ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	f7ff bdc8 	b.w	8006a78 <_malloc_r>
 8006ee8:	b922      	cbnz	r2, 8006ef4 <_realloc_r+0x20>
 8006eea:	f7ff fd75 	bl	80069d8 <_free_r>
 8006eee:	4625      	mov	r5, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	f000 fc62 	bl	80077bc <_malloc_usable_size_r>
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d20f      	bcs.n	8006f1c <_realloc_r+0x48>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7ff fdba 	bl	8006a78 <_malloc_r>
 8006f04:	4605      	mov	r5, r0
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0f2      	beq.n	8006ef0 <_realloc_r+0x1c>
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	f7ff f9c7 	bl	80062a0 <memcpy>
 8006f12:	4631      	mov	r1, r6
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff fd5f 	bl	80069d8 <_free_r>
 8006f1a:	e7e9      	b.n	8006ef0 <_realloc_r+0x1c>
 8006f1c:	4635      	mov	r5, r6
 8006f1e:	e7e7      	b.n	8006ef0 <_realloc_r+0x1c>

08006f20 <__sfputc_r>:
 8006f20:	6893      	ldr	r3, [r2, #8]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	b410      	push	{r4}
 8006f28:	6093      	str	r3, [r2, #8]
 8006f2a:	da08      	bge.n	8006f3e <__sfputc_r+0x1e>
 8006f2c:	6994      	ldr	r4, [r2, #24]
 8006f2e:	42a3      	cmp	r3, r4
 8006f30:	db01      	blt.n	8006f36 <__sfputc_r+0x16>
 8006f32:	290a      	cmp	r1, #10
 8006f34:	d103      	bne.n	8006f3e <__sfputc_r+0x1e>
 8006f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f3a:	f000 b94b 	b.w	80071d4 <__swbuf_r>
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	1c58      	adds	r0, r3, #1
 8006f42:	6010      	str	r0, [r2, #0]
 8006f44:	7019      	strb	r1, [r3, #0]
 8006f46:	4608      	mov	r0, r1
 8006f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <__sfputs_r>:
 8006f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	18d5      	adds	r5, r2, r3
 8006f58:	42ac      	cmp	r4, r5
 8006f5a:	d101      	bne.n	8006f60 <__sfputs_r+0x12>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e007      	b.n	8006f70 <__sfputs_r+0x22>
 8006f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f64:	463a      	mov	r2, r7
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ffda 	bl	8006f20 <__sfputc_r>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d1f3      	bne.n	8006f58 <__sfputs_r+0xa>
 8006f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f74 <_vfiprintf_r>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	460d      	mov	r5, r1
 8006f7a:	b09d      	sub	sp, #116	; 0x74
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	4698      	mov	r8, r3
 8006f80:	4606      	mov	r6, r0
 8006f82:	b118      	cbz	r0, 8006f8c <_vfiprintf_r+0x18>
 8006f84:	6983      	ldr	r3, [r0, #24]
 8006f86:	b90b      	cbnz	r3, 8006f8c <_vfiprintf_r+0x18>
 8006f88:	f000 fb14 	bl	80075b4 <__sinit>
 8006f8c:	4b89      	ldr	r3, [pc, #548]	; (80071b4 <_vfiprintf_r+0x240>)
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	d11b      	bne.n	8006fca <_vfiprintf_r+0x56>
 8006f92:	6875      	ldr	r5, [r6, #4]
 8006f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f96:	07d9      	lsls	r1, r3, #31
 8006f98:	d405      	bmi.n	8006fa6 <_vfiprintf_r+0x32>
 8006f9a:	89ab      	ldrh	r3, [r5, #12]
 8006f9c:	059a      	lsls	r2, r3, #22
 8006f9e:	d402      	bmi.n	8006fa6 <_vfiprintf_r+0x32>
 8006fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fa2:	f000 fba5 	bl	80076f0 <__retarget_lock_acquire_recursive>
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	071b      	lsls	r3, r3, #28
 8006faa:	d501      	bpl.n	8006fb0 <_vfiprintf_r+0x3c>
 8006fac:	692b      	ldr	r3, [r5, #16]
 8006fae:	b9eb      	cbnz	r3, 8006fec <_vfiprintf_r+0x78>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f000 f96e 	bl	8007294 <__swsetup_r>
 8006fb8:	b1c0      	cbz	r0, 8006fec <_vfiprintf_r+0x78>
 8006fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fbc:	07dc      	lsls	r4, r3, #31
 8006fbe:	d50e      	bpl.n	8006fde <_vfiprintf_r+0x6a>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	b01d      	add	sp, #116	; 0x74
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	4b7b      	ldr	r3, [pc, #492]	; (80071b8 <_vfiprintf_r+0x244>)
 8006fcc:	429d      	cmp	r5, r3
 8006fce:	d101      	bne.n	8006fd4 <_vfiprintf_r+0x60>
 8006fd0:	68b5      	ldr	r5, [r6, #8]
 8006fd2:	e7df      	b.n	8006f94 <_vfiprintf_r+0x20>
 8006fd4:	4b79      	ldr	r3, [pc, #484]	; (80071bc <_vfiprintf_r+0x248>)
 8006fd6:	429d      	cmp	r5, r3
 8006fd8:	bf08      	it	eq
 8006fda:	68f5      	ldreq	r5, [r6, #12]
 8006fdc:	e7da      	b.n	8006f94 <_vfiprintf_r+0x20>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	0598      	lsls	r0, r3, #22
 8006fe2:	d4ed      	bmi.n	8006fc0 <_vfiprintf_r+0x4c>
 8006fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe6:	f000 fb84 	bl	80076f2 <__retarget_lock_release_recursive>
 8006fea:	e7e9      	b.n	8006fc0 <_vfiprintf_r+0x4c>
 8006fec:	2300      	movs	r3, #0
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ffa:	2330      	movs	r3, #48	; 0x30
 8006ffc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071c0 <_vfiprintf_r+0x24c>
 8007000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007004:	f04f 0901 	mov.w	r9, #1
 8007008:	4623      	mov	r3, r4
 800700a:	469a      	mov	sl, r3
 800700c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007010:	b10a      	cbz	r2, 8007016 <_vfiprintf_r+0xa2>
 8007012:	2a25      	cmp	r2, #37	; 0x25
 8007014:	d1f9      	bne.n	800700a <_vfiprintf_r+0x96>
 8007016:	ebba 0b04 	subs.w	fp, sl, r4
 800701a:	d00b      	beq.n	8007034 <_vfiprintf_r+0xc0>
 800701c:	465b      	mov	r3, fp
 800701e:	4622      	mov	r2, r4
 8007020:	4629      	mov	r1, r5
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ff93 	bl	8006f4e <__sfputs_r>
 8007028:	3001      	adds	r0, #1
 800702a:	f000 80aa 	beq.w	8007182 <_vfiprintf_r+0x20e>
 800702e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007030:	445a      	add	r2, fp
 8007032:	9209      	str	r2, [sp, #36]	; 0x24
 8007034:	f89a 3000 	ldrb.w	r3, [sl]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a2 	beq.w	8007182 <_vfiprintf_r+0x20e>
 800703e:	2300      	movs	r3, #0
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007048:	f10a 0a01 	add.w	sl, sl, #1
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007054:	931a      	str	r3, [sp, #104]	; 0x68
 8007056:	4654      	mov	r4, sl
 8007058:	2205      	movs	r2, #5
 800705a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705e:	4858      	ldr	r0, [pc, #352]	; (80071c0 <_vfiprintf_r+0x24c>)
 8007060:	f7f9 f8be 	bl	80001e0 <memchr>
 8007064:	9a04      	ldr	r2, [sp, #16]
 8007066:	b9d8      	cbnz	r0, 80070a0 <_vfiprintf_r+0x12c>
 8007068:	06d1      	lsls	r1, r2, #27
 800706a:	bf44      	itt	mi
 800706c:	2320      	movmi	r3, #32
 800706e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007072:	0713      	lsls	r3, r2, #28
 8007074:	bf44      	itt	mi
 8007076:	232b      	movmi	r3, #43	; 0x2b
 8007078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707c:	f89a 3000 	ldrb.w	r3, [sl]
 8007080:	2b2a      	cmp	r3, #42	; 0x2a
 8007082:	d015      	beq.n	80070b0 <_vfiprintf_r+0x13c>
 8007084:	9a07      	ldr	r2, [sp, #28]
 8007086:	4654      	mov	r4, sl
 8007088:	2000      	movs	r0, #0
 800708a:	f04f 0c0a 	mov.w	ip, #10
 800708e:	4621      	mov	r1, r4
 8007090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007094:	3b30      	subs	r3, #48	; 0x30
 8007096:	2b09      	cmp	r3, #9
 8007098:	d94e      	bls.n	8007138 <_vfiprintf_r+0x1c4>
 800709a:	b1b0      	cbz	r0, 80070ca <_vfiprintf_r+0x156>
 800709c:	9207      	str	r2, [sp, #28]
 800709e:	e014      	b.n	80070ca <_vfiprintf_r+0x156>
 80070a0:	eba0 0308 	sub.w	r3, r0, r8
 80070a4:	fa09 f303 	lsl.w	r3, r9, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	46a2      	mov	sl, r4
 80070ae:	e7d2      	b.n	8007056 <_vfiprintf_r+0xe2>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	1d19      	adds	r1, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	9103      	str	r1, [sp, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bfbb      	ittet	lt
 80070bc:	425b      	neglt	r3, r3
 80070be:	f042 0202 	orrlt.w	r2, r2, #2
 80070c2:	9307      	strge	r3, [sp, #28]
 80070c4:	9307      	strlt	r3, [sp, #28]
 80070c6:	bfb8      	it	lt
 80070c8:	9204      	strlt	r2, [sp, #16]
 80070ca:	7823      	ldrb	r3, [r4, #0]
 80070cc:	2b2e      	cmp	r3, #46	; 0x2e
 80070ce:	d10c      	bne.n	80070ea <_vfiprintf_r+0x176>
 80070d0:	7863      	ldrb	r3, [r4, #1]
 80070d2:	2b2a      	cmp	r3, #42	; 0x2a
 80070d4:	d135      	bne.n	8007142 <_vfiprintf_r+0x1ce>
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	9203      	str	r2, [sp, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb8      	it	lt
 80070e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070e6:	3402      	adds	r4, #2
 80070e8:	9305      	str	r3, [sp, #20]
 80070ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071d0 <_vfiprintf_r+0x25c>
 80070ee:	7821      	ldrb	r1, [r4, #0]
 80070f0:	2203      	movs	r2, #3
 80070f2:	4650      	mov	r0, sl
 80070f4:	f7f9 f874 	bl	80001e0 <memchr>
 80070f8:	b140      	cbz	r0, 800710c <_vfiprintf_r+0x198>
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	eba0 000a 	sub.w	r0, r0, sl
 8007100:	fa03 f000 	lsl.w	r0, r3, r0
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	4303      	orrs	r3, r0
 8007108:	3401      	adds	r4, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007110:	482c      	ldr	r0, [pc, #176]	; (80071c4 <_vfiprintf_r+0x250>)
 8007112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007116:	2206      	movs	r2, #6
 8007118:	f7f9 f862 	bl	80001e0 <memchr>
 800711c:	2800      	cmp	r0, #0
 800711e:	d03f      	beq.n	80071a0 <_vfiprintf_r+0x22c>
 8007120:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <_vfiprintf_r+0x254>)
 8007122:	bb1b      	cbnz	r3, 800716c <_vfiprintf_r+0x1f8>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	3307      	adds	r3, #7
 8007128:	f023 0307 	bic.w	r3, r3, #7
 800712c:	3308      	adds	r3, #8
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007132:	443b      	add	r3, r7
 8007134:	9309      	str	r3, [sp, #36]	; 0x24
 8007136:	e767      	b.n	8007008 <_vfiprintf_r+0x94>
 8007138:	fb0c 3202 	mla	r2, ip, r2, r3
 800713c:	460c      	mov	r4, r1
 800713e:	2001      	movs	r0, #1
 8007140:	e7a5      	b.n	800708e <_vfiprintf_r+0x11a>
 8007142:	2300      	movs	r3, #0
 8007144:	3401      	adds	r4, #1
 8007146:	9305      	str	r3, [sp, #20]
 8007148:	4619      	mov	r1, r3
 800714a:	f04f 0c0a 	mov.w	ip, #10
 800714e:	4620      	mov	r0, r4
 8007150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007154:	3a30      	subs	r2, #48	; 0x30
 8007156:	2a09      	cmp	r2, #9
 8007158:	d903      	bls.n	8007162 <_vfiprintf_r+0x1ee>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0c5      	beq.n	80070ea <_vfiprintf_r+0x176>
 800715e:	9105      	str	r1, [sp, #20]
 8007160:	e7c3      	b.n	80070ea <_vfiprintf_r+0x176>
 8007162:	fb0c 2101 	mla	r1, ip, r1, r2
 8007166:	4604      	mov	r4, r0
 8007168:	2301      	movs	r3, #1
 800716a:	e7f0      	b.n	800714e <_vfiprintf_r+0x1da>
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	462a      	mov	r2, r5
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <_vfiprintf_r+0x258>)
 8007174:	a904      	add	r1, sp, #16
 8007176:	4630      	mov	r0, r6
 8007178:	f7fd fe24 	bl	8004dc4 <_printf_float>
 800717c:	4607      	mov	r7, r0
 800717e:	1c78      	adds	r0, r7, #1
 8007180:	d1d6      	bne.n	8007130 <_vfiprintf_r+0x1bc>
 8007182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007184:	07d9      	lsls	r1, r3, #31
 8007186:	d405      	bmi.n	8007194 <_vfiprintf_r+0x220>
 8007188:	89ab      	ldrh	r3, [r5, #12]
 800718a:	059a      	lsls	r2, r3, #22
 800718c:	d402      	bmi.n	8007194 <_vfiprintf_r+0x220>
 800718e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007190:	f000 faaf 	bl	80076f2 <__retarget_lock_release_recursive>
 8007194:	89ab      	ldrh	r3, [r5, #12]
 8007196:	065b      	lsls	r3, r3, #25
 8007198:	f53f af12 	bmi.w	8006fc0 <_vfiprintf_r+0x4c>
 800719c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800719e:	e711      	b.n	8006fc4 <_vfiprintf_r+0x50>
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <_vfiprintf_r+0x258>)
 80071a8:	a904      	add	r1, sp, #16
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7fe f8ae 	bl	800530c <_printf_i>
 80071b0:	e7e4      	b.n	800717c <_vfiprintf_r+0x208>
 80071b2:	bf00      	nop
 80071b4:	08007da4 	.word	0x08007da4
 80071b8:	08007dc4 	.word	0x08007dc4
 80071bc:	08007d84 	.word	0x08007d84
 80071c0:	08007c2c 	.word	0x08007c2c
 80071c4:	08007c36 	.word	0x08007c36
 80071c8:	08004dc5 	.word	0x08004dc5
 80071cc:	08006f4f 	.word	0x08006f4f
 80071d0:	08007c32 	.word	0x08007c32

080071d4 <__swbuf_r>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	4605      	mov	r5, r0
 80071dc:	b118      	cbz	r0, 80071e6 <__swbuf_r+0x12>
 80071de:	6983      	ldr	r3, [r0, #24]
 80071e0:	b90b      	cbnz	r3, 80071e6 <__swbuf_r+0x12>
 80071e2:	f000 f9e7 	bl	80075b4 <__sinit>
 80071e6:	4b21      	ldr	r3, [pc, #132]	; (800726c <__swbuf_r+0x98>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d12b      	bne.n	8007244 <__swbuf_r+0x70>
 80071ec:	686c      	ldr	r4, [r5, #4]
 80071ee:	69a3      	ldr	r3, [r4, #24]
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	071a      	lsls	r2, r3, #28
 80071f6:	d52f      	bpl.n	8007258 <__swbuf_r+0x84>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	b36b      	cbz	r3, 8007258 <__swbuf_r+0x84>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	1ac0      	subs	r0, r0, r3
 8007202:	6963      	ldr	r3, [r4, #20]
 8007204:	b2f6      	uxtb	r6, r6
 8007206:	4283      	cmp	r3, r0
 8007208:	4637      	mov	r7, r6
 800720a:	dc04      	bgt.n	8007216 <__swbuf_r+0x42>
 800720c:	4621      	mov	r1, r4
 800720e:	4628      	mov	r0, r5
 8007210:	f000 f93c 	bl	800748c <_fflush_r>
 8007214:	bb30      	cbnz	r0, 8007264 <__swbuf_r+0x90>
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	3b01      	subs	r3, #1
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	701e      	strb	r6, [r3, #0]
 8007224:	6963      	ldr	r3, [r4, #20]
 8007226:	3001      	adds	r0, #1
 8007228:	4283      	cmp	r3, r0
 800722a:	d004      	beq.n	8007236 <__swbuf_r+0x62>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	07db      	lsls	r3, r3, #31
 8007230:	d506      	bpl.n	8007240 <__swbuf_r+0x6c>
 8007232:	2e0a      	cmp	r6, #10
 8007234:	d104      	bne.n	8007240 <__swbuf_r+0x6c>
 8007236:	4621      	mov	r1, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f000 f927 	bl	800748c <_fflush_r>
 800723e:	b988      	cbnz	r0, 8007264 <__swbuf_r+0x90>
 8007240:	4638      	mov	r0, r7
 8007242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <__swbuf_r+0x9c>)
 8007246:	429c      	cmp	r4, r3
 8007248:	d101      	bne.n	800724e <__swbuf_r+0x7a>
 800724a:	68ac      	ldr	r4, [r5, #8]
 800724c:	e7cf      	b.n	80071ee <__swbuf_r+0x1a>
 800724e:	4b09      	ldr	r3, [pc, #36]	; (8007274 <__swbuf_r+0xa0>)
 8007250:	429c      	cmp	r4, r3
 8007252:	bf08      	it	eq
 8007254:	68ec      	ldreq	r4, [r5, #12]
 8007256:	e7ca      	b.n	80071ee <__swbuf_r+0x1a>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f81a 	bl	8007294 <__swsetup_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	d0cb      	beq.n	80071fc <__swbuf_r+0x28>
 8007264:	f04f 37ff 	mov.w	r7, #4294967295
 8007268:	e7ea      	b.n	8007240 <__swbuf_r+0x6c>
 800726a:	bf00      	nop
 800726c:	08007da4 	.word	0x08007da4
 8007270:	08007dc4 	.word	0x08007dc4
 8007274:	08007d84 	.word	0x08007d84

08007278 <__ascii_wctomb>:
 8007278:	b149      	cbz	r1, 800728e <__ascii_wctomb+0x16>
 800727a:	2aff      	cmp	r2, #255	; 0xff
 800727c:	bf85      	ittet	hi
 800727e:	238a      	movhi	r3, #138	; 0x8a
 8007280:	6003      	strhi	r3, [r0, #0]
 8007282:	700a      	strbls	r2, [r1, #0]
 8007284:	f04f 30ff 	movhi.w	r0, #4294967295
 8007288:	bf98      	it	ls
 800728a:	2001      	movls	r0, #1
 800728c:	4770      	bx	lr
 800728e:	4608      	mov	r0, r1
 8007290:	4770      	bx	lr
	...

08007294 <__swsetup_r>:
 8007294:	4b32      	ldr	r3, [pc, #200]	; (8007360 <__swsetup_r+0xcc>)
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	4606      	mov	r6, r0
 800729c:	460c      	mov	r4, r1
 800729e:	b125      	cbz	r5, 80072aa <__swsetup_r+0x16>
 80072a0:	69ab      	ldr	r3, [r5, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__swsetup_r+0x16>
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 f985 	bl	80075b4 <__sinit>
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <__swsetup_r+0xd0>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d10f      	bne.n	80072d0 <__swsetup_r+0x3c>
 80072b0:	686c      	ldr	r4, [r5, #4]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b8:	0719      	lsls	r1, r3, #28
 80072ba:	d42c      	bmi.n	8007316 <__swsetup_r+0x82>
 80072bc:	06dd      	lsls	r5, r3, #27
 80072be:	d411      	bmi.n	80072e4 <__swsetup_r+0x50>
 80072c0:	2309      	movs	r3, #9
 80072c2:	6033      	str	r3, [r6, #0]
 80072c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	e03e      	b.n	800734e <__swsetup_r+0xba>
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <__swsetup_r+0xd4>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swsetup_r+0x46>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7eb      	b.n	80072b2 <__swsetup_r+0x1e>
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <__swsetup_r+0xd8>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7e6      	b.n	80072b2 <__swsetup_r+0x1e>
 80072e4:	0758      	lsls	r0, r3, #29
 80072e6:	d512      	bpl.n	800730e <__swsetup_r+0x7a>
 80072e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ea:	b141      	cbz	r1, 80072fe <__swsetup_r+0x6a>
 80072ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f0:	4299      	cmp	r1, r3
 80072f2:	d002      	beq.n	80072fa <__swsetup_r+0x66>
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fb6f 	bl	80069d8 <_free_r>
 80072fa:	2300      	movs	r3, #0
 80072fc:	6363      	str	r3, [r4, #52]	; 0x34
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	2300      	movs	r3, #0
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0308 	orr.w	r3, r3, #8
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	b94b      	cbnz	r3, 800732e <__swsetup_r+0x9a>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007324:	d003      	beq.n	800732e <__swsetup_r+0x9a>
 8007326:	4621      	mov	r1, r4
 8007328:	4630      	mov	r0, r6
 800732a:	f000 fa07 	bl	800773c <__smakebuf_r>
 800732e:	89a0      	ldrh	r0, [r4, #12]
 8007330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007334:	f010 0301 	ands.w	r3, r0, #1
 8007338:	d00a      	beq.n	8007350 <__swsetup_r+0xbc>
 800733a:	2300      	movs	r3, #0
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	6963      	ldr	r3, [r4, #20]
 8007340:	425b      	negs	r3, r3
 8007342:	61a3      	str	r3, [r4, #24]
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b943      	cbnz	r3, 800735a <__swsetup_r+0xc6>
 8007348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800734c:	d1ba      	bne.n	80072c4 <__swsetup_r+0x30>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	0781      	lsls	r1, r0, #30
 8007352:	bf58      	it	pl
 8007354:	6963      	ldrpl	r3, [r4, #20]
 8007356:	60a3      	str	r3, [r4, #8]
 8007358:	e7f4      	b.n	8007344 <__swsetup_r+0xb0>
 800735a:	2000      	movs	r0, #0
 800735c:	e7f7      	b.n	800734e <__swsetup_r+0xba>
 800735e:	bf00      	nop
 8007360:	2000000c 	.word	0x2000000c
 8007364:	08007da4 	.word	0x08007da4
 8007368:	08007dc4 	.word	0x08007dc4
 800736c:	08007d84 	.word	0x08007d84

08007370 <abort>:
 8007370:	b508      	push	{r3, lr}
 8007372:	2006      	movs	r0, #6
 8007374:	f000 fa52 	bl	800781c <raise>
 8007378:	2001      	movs	r0, #1
 800737a:	f7fa f88f 	bl	800149c <_exit>
	...

08007380 <__sflush_r>:
 8007380:	898a      	ldrh	r2, [r1, #12]
 8007382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007386:	4605      	mov	r5, r0
 8007388:	0710      	lsls	r0, r2, #28
 800738a:	460c      	mov	r4, r1
 800738c:	d458      	bmi.n	8007440 <__sflush_r+0xc0>
 800738e:	684b      	ldr	r3, [r1, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc05      	bgt.n	80073a0 <__sflush_r+0x20>
 8007394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	dc02      	bgt.n	80073a0 <__sflush_r+0x20>
 800739a:	2000      	movs	r0, #0
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	d0f9      	beq.n	800739a <__sflush_r+0x1a>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073ac:	682f      	ldr	r7, [r5, #0]
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	d032      	beq.n	8007418 <__sflush_r+0x98>
 80073b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	075a      	lsls	r2, r3, #29
 80073b8:	d505      	bpl.n	80073c6 <__sflush_r+0x46>
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	1ac0      	subs	r0, r0, r3
 80073be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073c0:	b10b      	cbz	r3, 80073c6 <__sflush_r+0x46>
 80073c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c4:	1ac0      	subs	r0, r0, r3
 80073c6:	2300      	movs	r3, #0
 80073c8:	4602      	mov	r2, r0
 80073ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073cc:	6a21      	ldr	r1, [r4, #32]
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b0      	blx	r6
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	d106      	bne.n	80073e6 <__sflush_r+0x66>
 80073d8:	6829      	ldr	r1, [r5, #0]
 80073da:	291d      	cmp	r1, #29
 80073dc:	d82c      	bhi.n	8007438 <__sflush_r+0xb8>
 80073de:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <__sflush_r+0x108>)
 80073e0:	40ca      	lsrs	r2, r1
 80073e2:	07d6      	lsls	r6, r2, #31
 80073e4:	d528      	bpl.n	8007438 <__sflush_r+0xb8>
 80073e6:	2200      	movs	r2, #0
 80073e8:	6062      	str	r2, [r4, #4]
 80073ea:	04d9      	lsls	r1, r3, #19
 80073ec:	6922      	ldr	r2, [r4, #16]
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	d504      	bpl.n	80073fc <__sflush_r+0x7c>
 80073f2:	1c42      	adds	r2, r0, #1
 80073f4:	d101      	bne.n	80073fa <__sflush_r+0x7a>
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	b903      	cbnz	r3, 80073fc <__sflush_r+0x7c>
 80073fa:	6560      	str	r0, [r4, #84]	; 0x54
 80073fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073fe:	602f      	str	r7, [r5, #0]
 8007400:	2900      	cmp	r1, #0
 8007402:	d0ca      	beq.n	800739a <__sflush_r+0x1a>
 8007404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__sflush_r+0x92>
 800740c:	4628      	mov	r0, r5
 800740e:	f7ff fae3 	bl	80069d8 <_free_r>
 8007412:	2000      	movs	r0, #0
 8007414:	6360      	str	r0, [r4, #52]	; 0x34
 8007416:	e7c1      	b.n	800739c <__sflush_r+0x1c>
 8007418:	6a21      	ldr	r1, [r4, #32]
 800741a:	2301      	movs	r3, #1
 800741c:	4628      	mov	r0, r5
 800741e:	47b0      	blx	r6
 8007420:	1c41      	adds	r1, r0, #1
 8007422:	d1c7      	bne.n	80073b4 <__sflush_r+0x34>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0c4      	beq.n	80073b4 <__sflush_r+0x34>
 800742a:	2b1d      	cmp	r3, #29
 800742c:	d001      	beq.n	8007432 <__sflush_r+0xb2>
 800742e:	2b16      	cmp	r3, #22
 8007430:	d101      	bne.n	8007436 <__sflush_r+0xb6>
 8007432:	602f      	str	r7, [r5, #0]
 8007434:	e7b1      	b.n	800739a <__sflush_r+0x1a>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	e7ad      	b.n	800739c <__sflush_r+0x1c>
 8007440:	690f      	ldr	r7, [r1, #16]
 8007442:	2f00      	cmp	r7, #0
 8007444:	d0a9      	beq.n	800739a <__sflush_r+0x1a>
 8007446:	0793      	lsls	r3, r2, #30
 8007448:	680e      	ldr	r6, [r1, #0]
 800744a:	bf08      	it	eq
 800744c:	694b      	ldreq	r3, [r1, #20]
 800744e:	600f      	str	r7, [r1, #0]
 8007450:	bf18      	it	ne
 8007452:	2300      	movne	r3, #0
 8007454:	eba6 0807 	sub.w	r8, r6, r7
 8007458:	608b      	str	r3, [r1, #8]
 800745a:	f1b8 0f00 	cmp.w	r8, #0
 800745e:	dd9c      	ble.n	800739a <__sflush_r+0x1a>
 8007460:	6a21      	ldr	r1, [r4, #32]
 8007462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007464:	4643      	mov	r3, r8
 8007466:	463a      	mov	r2, r7
 8007468:	4628      	mov	r0, r5
 800746a:	47b0      	blx	r6
 800746c:	2800      	cmp	r0, #0
 800746e:	dc06      	bgt.n	800747e <__sflush_r+0xfe>
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	e78e      	b.n	800739c <__sflush_r+0x1c>
 800747e:	4407      	add	r7, r0
 8007480:	eba8 0800 	sub.w	r8, r8, r0
 8007484:	e7e9      	b.n	800745a <__sflush_r+0xda>
 8007486:	bf00      	nop
 8007488:	20400001 	.word	0x20400001

0800748c <_fflush_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	4605      	mov	r5, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b913      	cbnz	r3, 800749c <_fflush_r+0x10>
 8007496:	2500      	movs	r5, #0
 8007498:	4628      	mov	r0, r5
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	b118      	cbz	r0, 80074a6 <_fflush_r+0x1a>
 800749e:	6983      	ldr	r3, [r0, #24]
 80074a0:	b90b      	cbnz	r3, 80074a6 <_fflush_r+0x1a>
 80074a2:	f000 f887 	bl	80075b4 <__sinit>
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <_fflush_r+0x6c>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d11b      	bne.n	80074e4 <_fflush_r+0x58>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0ef      	beq.n	8007496 <_fflush_r+0xa>
 80074b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074b8:	07d0      	lsls	r0, r2, #31
 80074ba:	d404      	bmi.n	80074c6 <_fflush_r+0x3a>
 80074bc:	0599      	lsls	r1, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_fflush_r+0x3a>
 80074c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c2:	f000 f915 	bl	80076f0 <__retarget_lock_acquire_recursive>
 80074c6:	4628      	mov	r0, r5
 80074c8:	4621      	mov	r1, r4
 80074ca:	f7ff ff59 	bl	8007380 <__sflush_r>
 80074ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d0:	07da      	lsls	r2, r3, #31
 80074d2:	4605      	mov	r5, r0
 80074d4:	d4e0      	bmi.n	8007498 <_fflush_r+0xc>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	059b      	lsls	r3, r3, #22
 80074da:	d4dd      	bmi.n	8007498 <_fflush_r+0xc>
 80074dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074de:	f000 f908 	bl	80076f2 <__retarget_lock_release_recursive>
 80074e2:	e7d9      	b.n	8007498 <_fflush_r+0xc>
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <_fflush_r+0x70>)
 80074e6:	429c      	cmp	r4, r3
 80074e8:	d101      	bne.n	80074ee <_fflush_r+0x62>
 80074ea:	68ac      	ldr	r4, [r5, #8]
 80074ec:	e7df      	b.n	80074ae <_fflush_r+0x22>
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <_fflush_r+0x74>)
 80074f0:	429c      	cmp	r4, r3
 80074f2:	bf08      	it	eq
 80074f4:	68ec      	ldreq	r4, [r5, #12]
 80074f6:	e7da      	b.n	80074ae <_fflush_r+0x22>
 80074f8:	08007da4 	.word	0x08007da4
 80074fc:	08007dc4 	.word	0x08007dc4
 8007500:	08007d84 	.word	0x08007d84

08007504 <std>:
 8007504:	2300      	movs	r3, #0
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	e9c0 3300 	strd	r3, r3, [r0]
 800750e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007512:	6083      	str	r3, [r0, #8]
 8007514:	8181      	strh	r1, [r0, #12]
 8007516:	6643      	str	r3, [r0, #100]	; 0x64
 8007518:	81c2      	strh	r2, [r0, #14]
 800751a:	6183      	str	r3, [r0, #24]
 800751c:	4619      	mov	r1, r3
 800751e:	2208      	movs	r2, #8
 8007520:	305c      	adds	r0, #92	; 0x5c
 8007522:	f7fd fba7 	bl	8004c74 <memset>
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <std+0x38>)
 8007528:	6263      	str	r3, [r4, #36]	; 0x24
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <std+0x3c>)
 800752c:	62a3      	str	r3, [r4, #40]	; 0x28
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x40>)
 8007530:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007532:	4b05      	ldr	r3, [pc, #20]	; (8007548 <std+0x44>)
 8007534:	6224      	str	r4, [r4, #32]
 8007536:	6323      	str	r3, [r4, #48]	; 0x30
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	08007855 	.word	0x08007855
 8007540:	08007877 	.word	0x08007877
 8007544:	080078af 	.word	0x080078af
 8007548:	080078d3 	.word	0x080078d3

0800754c <_cleanup_r>:
 800754c:	4901      	ldr	r1, [pc, #4]	; (8007554 <_cleanup_r+0x8>)
 800754e:	f000 b8af 	b.w	80076b0 <_fwalk_reent>
 8007552:	bf00      	nop
 8007554:	0800748d 	.word	0x0800748d

08007558 <__sfmoreglue>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	1e4a      	subs	r2, r1, #1
 800755c:	2568      	movs	r5, #104	; 0x68
 800755e:	4355      	muls	r5, r2
 8007560:	460e      	mov	r6, r1
 8007562:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007566:	f7ff fa87 	bl	8006a78 <_malloc_r>
 800756a:	4604      	mov	r4, r0
 800756c:	b140      	cbz	r0, 8007580 <__sfmoreglue+0x28>
 800756e:	2100      	movs	r1, #0
 8007570:	e9c0 1600 	strd	r1, r6, [r0]
 8007574:	300c      	adds	r0, #12
 8007576:	60a0      	str	r0, [r4, #8]
 8007578:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800757c:	f7fd fb7a 	bl	8004c74 <memset>
 8007580:	4620      	mov	r0, r4
 8007582:	bd70      	pop	{r4, r5, r6, pc}

08007584 <__sfp_lock_acquire>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__sfp_lock_acquire+0x8>)
 8007586:	f000 b8b3 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	200002fc 	.word	0x200002fc

08007590 <__sfp_lock_release>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__sfp_lock_release+0x8>)
 8007592:	f000 b8ae 	b.w	80076f2 <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	200002fc 	.word	0x200002fc

0800759c <__sinit_lock_acquire>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__sinit_lock_acquire+0x8>)
 800759e:	f000 b8a7 	b.w	80076f0 <__retarget_lock_acquire_recursive>
 80075a2:	bf00      	nop
 80075a4:	200002f7 	.word	0x200002f7

080075a8 <__sinit_lock_release>:
 80075a8:	4801      	ldr	r0, [pc, #4]	; (80075b0 <__sinit_lock_release+0x8>)
 80075aa:	f000 b8a2 	b.w	80076f2 <__retarget_lock_release_recursive>
 80075ae:	bf00      	nop
 80075b0:	200002f7 	.word	0x200002f7

080075b4 <__sinit>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	f7ff fff0 	bl	800759c <__sinit_lock_acquire>
 80075bc:	69a3      	ldr	r3, [r4, #24]
 80075be:	b11b      	cbz	r3, 80075c8 <__sinit+0x14>
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f7ff bff0 	b.w	80075a8 <__sinit_lock_release>
 80075c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075cc:	6523      	str	r3, [r4, #80]	; 0x50
 80075ce:	4b13      	ldr	r3, [pc, #76]	; (800761c <__sinit+0x68>)
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <__sinit+0x6c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	bf04      	itt	eq
 80075da:	2301      	moveq	r3, #1
 80075dc:	61a3      	streq	r3, [r4, #24]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f820 	bl	8007624 <__sfp>
 80075e4:	6060      	str	r0, [r4, #4]
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f81c 	bl	8007624 <__sfp>
 80075ec:	60a0      	str	r0, [r4, #8]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f818 	bl	8007624 <__sfp>
 80075f4:	2200      	movs	r2, #0
 80075f6:	60e0      	str	r0, [r4, #12]
 80075f8:	2104      	movs	r1, #4
 80075fa:	6860      	ldr	r0, [r4, #4]
 80075fc:	f7ff ff82 	bl	8007504 <std>
 8007600:	68a0      	ldr	r0, [r4, #8]
 8007602:	2201      	movs	r2, #1
 8007604:	2109      	movs	r1, #9
 8007606:	f7ff ff7d 	bl	8007504 <std>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	2202      	movs	r2, #2
 800760e:	2112      	movs	r1, #18
 8007610:	f7ff ff78 	bl	8007504 <std>
 8007614:	2301      	movs	r3, #1
 8007616:	61a3      	str	r3, [r4, #24]
 8007618:	e7d2      	b.n	80075c0 <__sinit+0xc>
 800761a:	bf00      	nop
 800761c:	08007a04 	.word	0x08007a04
 8007620:	0800754d 	.word	0x0800754d

08007624 <__sfp>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	4607      	mov	r7, r0
 8007628:	f7ff ffac 	bl	8007584 <__sfp_lock_acquire>
 800762c:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <__sfp+0x84>)
 800762e:	681e      	ldr	r6, [r3, #0]
 8007630:	69b3      	ldr	r3, [r6, #24]
 8007632:	b913      	cbnz	r3, 800763a <__sfp+0x16>
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff ffbd 	bl	80075b4 <__sinit>
 800763a:	3648      	adds	r6, #72	; 0x48
 800763c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	d503      	bpl.n	800764c <__sfp+0x28>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	b30b      	cbz	r3, 800768c <__sfp+0x68>
 8007648:	6836      	ldr	r6, [r6, #0]
 800764a:	e7f7      	b.n	800763c <__sfp+0x18>
 800764c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007650:	b9d5      	cbnz	r5, 8007688 <__sfp+0x64>
 8007652:	4b16      	ldr	r3, [pc, #88]	; (80076ac <__sfp+0x88>)
 8007654:	60e3      	str	r3, [r4, #12]
 8007656:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800765a:	6665      	str	r5, [r4, #100]	; 0x64
 800765c:	f000 f847 	bl	80076ee <__retarget_lock_init_recursive>
 8007660:	f7ff ff96 	bl	8007590 <__sfp_lock_release>
 8007664:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007668:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800766c:	6025      	str	r5, [r4, #0]
 800766e:	61a5      	str	r5, [r4, #24]
 8007670:	2208      	movs	r2, #8
 8007672:	4629      	mov	r1, r5
 8007674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007678:	f7fd fafc 	bl	8004c74 <memset>
 800767c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007684:	4620      	mov	r0, r4
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	3468      	adds	r4, #104	; 0x68
 800768a:	e7d9      	b.n	8007640 <__sfp+0x1c>
 800768c:	2104      	movs	r1, #4
 800768e:	4638      	mov	r0, r7
 8007690:	f7ff ff62 	bl	8007558 <__sfmoreglue>
 8007694:	4604      	mov	r4, r0
 8007696:	6030      	str	r0, [r6, #0]
 8007698:	2800      	cmp	r0, #0
 800769a:	d1d5      	bne.n	8007648 <__sfp+0x24>
 800769c:	f7ff ff78 	bl	8007590 <__sfp_lock_release>
 80076a0:	230c      	movs	r3, #12
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	e7ee      	b.n	8007684 <__sfp+0x60>
 80076a6:	bf00      	nop
 80076a8:	08007a04 	.word	0x08007a04
 80076ac:	ffff0001 	.word	0xffff0001

080076b0 <_fwalk_reent>:
 80076b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4606      	mov	r6, r0
 80076b6:	4688      	mov	r8, r1
 80076b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076bc:	2700      	movs	r7, #0
 80076be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076c2:	f1b9 0901 	subs.w	r9, r9, #1
 80076c6:	d505      	bpl.n	80076d4 <_fwalk_reent+0x24>
 80076c8:	6824      	ldr	r4, [r4, #0]
 80076ca:	2c00      	cmp	r4, #0
 80076cc:	d1f7      	bne.n	80076be <_fwalk_reent+0xe>
 80076ce:	4638      	mov	r0, r7
 80076d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d4:	89ab      	ldrh	r3, [r5, #12]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d907      	bls.n	80076ea <_fwalk_reent+0x3a>
 80076da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076de:	3301      	adds	r3, #1
 80076e0:	d003      	beq.n	80076ea <_fwalk_reent+0x3a>
 80076e2:	4629      	mov	r1, r5
 80076e4:	4630      	mov	r0, r6
 80076e6:	47c0      	blx	r8
 80076e8:	4307      	orrs	r7, r0
 80076ea:	3568      	adds	r5, #104	; 0x68
 80076ec:	e7e9      	b.n	80076c2 <_fwalk_reent+0x12>

080076ee <__retarget_lock_init_recursive>:
 80076ee:	4770      	bx	lr

080076f0 <__retarget_lock_acquire_recursive>:
 80076f0:	4770      	bx	lr

080076f2 <__retarget_lock_release_recursive>:
 80076f2:	4770      	bx	lr

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460e      	mov	r6, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	2900      	cmp	r1, #0
 80076fe:	b096      	sub	sp, #88	; 0x58
 8007700:	4614      	mov	r4, r2
 8007702:	461d      	mov	r5, r3
 8007704:	da07      	bge.n	8007716 <__swhatbuf_r+0x22>
 8007706:	2300      	movs	r3, #0
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	89b3      	ldrh	r3, [r6, #12]
 800770c:	061a      	lsls	r2, r3, #24
 800770e:	d410      	bmi.n	8007732 <__swhatbuf_r+0x3e>
 8007710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007714:	e00e      	b.n	8007734 <__swhatbuf_r+0x40>
 8007716:	466a      	mov	r2, sp
 8007718:	f000 f902 	bl	8007920 <_fstat_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	dbf2      	blt.n	8007706 <__swhatbuf_r+0x12>
 8007720:	9a01      	ldr	r2, [sp, #4]
 8007722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007726:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800772a:	425a      	negs	r2, r3
 800772c:	415a      	adcs	r2, r3
 800772e:	602a      	str	r2, [r5, #0]
 8007730:	e7ee      	b.n	8007710 <__swhatbuf_r+0x1c>
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	2000      	movs	r0, #0
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	b016      	add	sp, #88	; 0x58
 800773a:	bd70      	pop	{r4, r5, r6, pc}

0800773c <__smakebuf_r>:
 800773c:	898b      	ldrh	r3, [r1, #12]
 800773e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007740:	079d      	lsls	r5, r3, #30
 8007742:	4606      	mov	r6, r0
 8007744:	460c      	mov	r4, r1
 8007746:	d507      	bpl.n	8007758 <__smakebuf_r+0x1c>
 8007748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	2301      	movs	r3, #1
 8007752:	6163      	str	r3, [r4, #20]
 8007754:	b002      	add	sp, #8
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	ab01      	add	r3, sp, #4
 800775a:	466a      	mov	r2, sp
 800775c:	f7ff ffca 	bl	80076f4 <__swhatbuf_r>
 8007760:	9900      	ldr	r1, [sp, #0]
 8007762:	4605      	mov	r5, r0
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff f987 	bl	8006a78 <_malloc_r>
 800776a:	b948      	cbnz	r0, 8007780 <__smakebuf_r+0x44>
 800776c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007770:	059a      	lsls	r2, r3, #22
 8007772:	d4ef      	bmi.n	8007754 <__smakebuf_r+0x18>
 8007774:	f023 0303 	bic.w	r3, r3, #3
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	e7e3      	b.n	8007748 <__smakebuf_r+0xc>
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <__smakebuf_r+0x7c>)
 8007782:	62b3      	str	r3, [r6, #40]	; 0x28
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	6020      	str	r0, [r4, #0]
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	6163      	str	r3, [r4, #20]
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	6120      	str	r0, [r4, #16]
 8007796:	b15b      	cbz	r3, 80077b0 <__smakebuf_r+0x74>
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	4630      	mov	r0, r6
 800779e:	f000 f8d1 	bl	8007944 <_isatty_r>
 80077a2:	b128      	cbz	r0, 80077b0 <__smakebuf_r+0x74>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	89a0      	ldrh	r0, [r4, #12]
 80077b2:	4305      	orrs	r5, r0
 80077b4:	81a5      	strh	r5, [r4, #12]
 80077b6:	e7cd      	b.n	8007754 <__smakebuf_r+0x18>
 80077b8:	0800754d 	.word	0x0800754d

080077bc <_malloc_usable_size_r>:
 80077bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c0:	1f18      	subs	r0, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfbc      	itt	lt
 80077c6:	580b      	ldrlt	r3, [r1, r0]
 80077c8:	18c0      	addlt	r0, r0, r3
 80077ca:	4770      	bx	lr

080077cc <_raise_r>:
 80077cc:	291f      	cmp	r1, #31
 80077ce:	b538      	push	{r3, r4, r5, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	d904      	bls.n	80077e0 <_raise_r+0x14>
 80077d6:	2316      	movs	r3, #22
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077e2:	b112      	cbz	r2, 80077ea <_raise_r+0x1e>
 80077e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077e8:	b94b      	cbnz	r3, 80077fe <_raise_r+0x32>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 f830 	bl	8007850 <_getpid_r>
 80077f0:	462a      	mov	r2, r5
 80077f2:	4601      	mov	r1, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fa:	f000 b817 	b.w	800782c <_kill_r>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d00a      	beq.n	8007818 <_raise_r+0x4c>
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	d103      	bne.n	800780e <_raise_r+0x42>
 8007806:	2316      	movs	r3, #22
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	2001      	movs	r0, #1
 800780c:	e7e7      	b.n	80077de <_raise_r+0x12>
 800780e:	2400      	movs	r4, #0
 8007810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007814:	4628      	mov	r0, r5
 8007816:	4798      	blx	r3
 8007818:	2000      	movs	r0, #0
 800781a:	e7e0      	b.n	80077de <_raise_r+0x12>

0800781c <raise>:
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <raise+0xc>)
 800781e:	4601      	mov	r1, r0
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f7ff bfd3 	b.w	80077cc <_raise_r>
 8007826:	bf00      	nop
 8007828:	2000000c 	.word	0x2000000c

0800782c <_kill_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_kill_r+0x20>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f7f9 fe1f 	bl	800147c <_kill>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d102      	bne.n	8007848 <_kill_r+0x1c>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	b103      	cbz	r3, 8007848 <_kill_r+0x1c>
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	bf00      	nop
 800784c:	200002f0 	.word	0x200002f0

08007850 <_getpid_r>:
 8007850:	f7f9 be0c 	b.w	800146c <_getpid>

08007854 <__sread>:
 8007854:	b510      	push	{r4, lr}
 8007856:	460c      	mov	r4, r1
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	f000 f894 	bl	8007988 <_read_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	bfab      	itete	ge
 8007864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007866:	89a3      	ldrhlt	r3, [r4, #12]
 8007868:	181b      	addge	r3, r3, r0
 800786a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800786e:	bfac      	ite	ge
 8007870:	6563      	strge	r3, [r4, #84]	; 0x54
 8007872:	81a3      	strhlt	r3, [r4, #12]
 8007874:	bd10      	pop	{r4, pc}

08007876 <__swrite>:
 8007876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	461f      	mov	r7, r3
 800787c:	898b      	ldrh	r3, [r1, #12]
 800787e:	05db      	lsls	r3, r3, #23
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
 8007884:	4616      	mov	r6, r2
 8007886:	d505      	bpl.n	8007894 <__swrite+0x1e>
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	2302      	movs	r3, #2
 800788e:	2200      	movs	r2, #0
 8007890:	f000 f868 	bl	8007964 <_lseek_r>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	4628      	mov	r0, r5
 80078a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078aa:	f000 b817 	b.w	80078dc <_write_r>

080078ae <__sseek>:
 80078ae:	b510      	push	{r4, lr}
 80078b0:	460c      	mov	r4, r1
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 f855 	bl	8007964 <_lseek_r>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	bf15      	itete	ne
 80078c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ca:	81a3      	strheq	r3, [r4, #12]
 80078cc:	bf18      	it	ne
 80078ce:	81a3      	strhne	r3, [r4, #12]
 80078d0:	bd10      	pop	{r4, pc}

080078d2 <__sclose>:
 80078d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d6:	f000 b813 	b.w	8007900 <_close_r>
	...

080078dc <_write_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_write_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7f9 fdfd 	bl	80014ea <_write>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_write_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_write_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	200002f0 	.word	0x200002f0

08007900 <_close_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d06      	ldr	r5, [pc, #24]	; (800791c <_close_r+0x1c>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	f7f9 fe09 	bl	8001522 <_close>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_close_r+0x1a>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_close_r+0x1a>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	200002f0 	.word	0x200002f0

08007920 <_fstat_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	; (8007940 <_fstat_r+0x20>)
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7f9 fe04 	bl	800153a <_fstat>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_fstat_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_fstat_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	200002f0 	.word	0x200002f0

08007944 <_isatty_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	; (8007960 <_isatty_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7f9 fe03 	bl	800155a <_isatty>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_isatty_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_isatty_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	200002f0 	.word	0x200002f0

08007964 <_lseek_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	; (8007984 <_lseek_r+0x20>)
 8007968:	4604      	mov	r4, r0
 800796a:	4608      	mov	r0, r1
 800796c:	4611      	mov	r1, r2
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7f9 fdfc 	bl	8001570 <_lseek>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_lseek_r+0x1e>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_lseek_r+0x1e>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200002f0 	.word	0x200002f0

08007988 <_read_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d07      	ldr	r5, [pc, #28]	; (80079a8 <_read_r+0x20>)
 800798c:	4604      	mov	r4, r0
 800798e:	4608      	mov	r0, r1
 8007990:	4611      	mov	r1, r2
 8007992:	2200      	movs	r2, #0
 8007994:	602a      	str	r2, [r5, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f7f9 fd8a 	bl	80014b0 <_read>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_read_r+0x1e>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_read_r+0x1e>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	200002f0 	.word	0x200002f0

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
