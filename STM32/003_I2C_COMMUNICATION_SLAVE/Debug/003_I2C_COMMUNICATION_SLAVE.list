
003_I2C_COMMUNICATION_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c0  080035c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000080  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008455  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001524  00000000  00000000  00028491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c8  00000000  00000000  0002a100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f49b  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000946e  00000000  00000000  00049c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be9c4  00000000  00000000  000530d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00111a95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d64  00000000  00000000  00111ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003588 	.word	0x08003588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003588 	.word	0x08003588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fa4d 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f841 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8e7 	bl	80006a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8a7 	bl	8000624 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT(&hi2c1);
 80004d6:	481c      	ldr	r0, [pc, #112]	; (8000548 <main+0x88>)
 80004d8:	f000 ffd8 	bl	800148c <HAL_I2C_EnableListen_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(transferDirection == TRANSFER_DIR_WRITE) {
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <main+0x8c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d122      	bne.n	800052c <main+0x6c>
	      /* Master is sending register address */
	      HAL_I2C_Slave_Sequential_Receive_IT(&hi2c1, i2cBuf, 1, I2C_FIRST_FRAME);
 80004e6:	1d39      	adds	r1, r7, #4
 80004e8:	2301      	movs	r3, #1
 80004ea:	2201      	movs	r2, #1
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x88>)
 80004ee:	f000 ff5a 	bl	80013a6 <HAL_I2C_Slave_Seq_Receive_IT>
	      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_LISTEN);
 80004f2:	bf00      	nop
 80004f4:	4814      	ldr	r0, [pc, #80]	; (8000548 <main+0x88>)
 80004f6:	f001 f9ca 	bl	800188e <HAL_I2C_GetState>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b28      	cmp	r3, #40	; 0x28
 80004fe:	d1f9      	bne.n	80004f4 <main+0x34>

	      switch(i2cBuf[0]) {
 8000500:	793b      	ldrb	r3, [r7, #4]
 8000502:	2b0f      	cmp	r3, #15
 8000504:	d006      	beq.n	8000514 <main+0x54>
 8000506:	2b0f      	cmp	r3, #15
 8000508:	dc0d      	bgt.n	8000526 <main+0x66>
 800050a:	2b00      	cmp	r3, #0
 800050c:	d005      	beq.n	800051a <main+0x5a>
 800050e:	2b01      	cmp	r3, #1
 8000510:	d006      	beq.n	8000520 <main+0x60>
 8000512:	e008      	b.n	8000526 <main+0x66>
	        case WHO_AM_I_REGISTER:
	          i2cBuf[0] = WHO_AM_I_VALUE;
 8000514:	23bc      	movs	r3, #188	; 0xbc
 8000516:	713b      	strb	r3, [r7, #4]
	          break;
 8000518:	e015      	b.n	8000546 <main+0x86>
	        case TEMP_OUT_INT_REGISTER:
	          i2cBuf[0] = t_int;
 800051a:	7fbb      	ldrb	r3, [r7, #30]
 800051c:	713b      	strb	r3, [r7, #4]
	          break;
 800051e:	e012      	b.n	8000546 <main+0x86>
	        case TEMP_OUT_FRAC_REGISTER:
	          i2cBuf[0] = t_frac;
 8000520:	7ffb      	ldrb	r3, [r7, #31]
 8000522:	713b      	strb	r3, [r7, #4]
	          break;
 8000524:	e00f      	b.n	8000546 <main+0x86>
	        default:
	          i2cBuf[0] = 0xFF;
 8000526:	23ff      	movs	r3, #255	; 0xff
 8000528:	713b      	strb	r3, [r7, #4]
 800052a:	e7d7      	b.n	80004dc <main+0x1c>
	      }

	    }
	    else
	    {
	    	HAL_I2C_Slave_Sequential_Transmit_IT(&hi2c1, i2cBuf, 1, I2C_NEXT_FRAME);
 800052c:	1d39      	adds	r1, r7, #4
 800052e:	2304      	movs	r3, #4
 8000530:	2201      	movs	r2, #1
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x88>)
 8000534:	f000 fec4 	bl	80012c0 <HAL_I2C_Slave_Seq_Transmit_IT>
	    		      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000538:	bf00      	nop
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <main+0x88>)
 800053c:	f001 f9a7 	bl	800188e <HAL_I2C_GetState>
 8000540:	4603      	mov	r3, r0
 8000542:	2b20      	cmp	r3, #32
 8000544:	d1f9      	bne.n	800053a <main+0x7a>
	    if(transferDirection == TRANSFER_DIR_WRITE) {
 8000546:	e7c9      	b.n	80004dc <main+0x1c>
 8000548:	20000028 	.word	0x20000028
 800054c:	20000084 	.word	0x20000084

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 f80a 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fb4a 	bl	8002c70 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e2:	f000 f8d1 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2105      	movs	r1, #5
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fdab 	bl	8003160 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000610:	f000 f8ba 	bl	8000788 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_I2C1_Init+0x70>)
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x74>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_I2C1_Init+0x70>)
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <MX_I2C1_Init+0x78>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_I2C1_Init+0x70>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x50;
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_I2C1_Init+0x70>)
 800063c:	2250      	movs	r2, #80	; 0x50
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_I2C1_Init+0x70>)
 8000642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x70>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x70>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x70>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x70>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_I2C1_Init+0x70>)
 8000662:	f000 fce9 	bl	8001038 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f88c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	201f      	movs	r0, #31
 8000676:	f000 fac2 	bl	8000bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800067a:	201f      	movs	r0, #31
 800067c:	f000 fadb 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2020      	movs	r0, #32
 8000686:	f000 faba 	bl	8000bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800068a:	2020      	movs	r0, #32
 800068c:	f000 fad3 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40005400 	.word	0x40005400
 800069c:	00013880 	.word	0x00013880

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a1f      	ldr	r2, [pc, #124]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_GPIO_Init+0x9c>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_GPIO_Init+0x9c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_GPIO_Init+0x9c>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0x9c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0xa0>)
 8000712:	f000 fc77 	bl	8001004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0xa0>)
 8000730:	f000 facc 	bl	8000ccc <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020c00 	.word	0x40020c00

08000744 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
 8000750:	4613      	mov	r3, r2
 8000752:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  if(hi2c->Instance == I2C1) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_I2C_AddrCallback+0x34>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d108      	bne.n	8000770 <HAL_I2C_AddrCallback+0x2c>
    transferRequested = 1;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_I2C_AddrCallback+0x38>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
    transferDirection = TransferDirection;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_I2C_AddrCallback+0x3c>)
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	7013      	strb	r3, [r2, #0]
    HAL_I2C_EnableListen_IT(&hi2c1);
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <HAL_I2C_AddrCallback+0x40>)
 800076c:	f000 fe8e 	bl	800148c <HAL_I2C_EnableListen_IT>
  }
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005400 	.word	0x40005400
 800077c:	20000085 	.word	0x20000085
 8000780:	20000084 	.word	0x20000084
 8000784:	20000028 	.word	0x20000028

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fa08 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <HAL_I2C_MspInit+0x94>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d133      	bne.n	800086e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_I2C_MspInit+0x98>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1b      	ldr	r2, [pc, #108]	; (800087c <HAL_I2C_MspInit+0x98>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_I2C_MspInit+0x98>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000822:	23c0      	movs	r3, #192	; 0xc0
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4810      	ldr	r0, [pc, #64]	; (8000880 <HAL_I2C_MspInit+0x9c>)
 800083e:	f000 fa45 	bl	8000ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_I2C_MspInit+0x98>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x98>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_I2C_MspInit+0x98>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	201f      	movs	r0, #31
 8000864:	f000 f9cb 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000868:	201f      	movs	r0, #31
 800086a:	f000 f9e4 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f89a 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <I2C1_EV_IRQHandler+0x10>)
 80008de:	f000 fe0b 	bl	80014f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000028 	.word	0x20000028

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopFillZerobss+0x26>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093a:	f7ff ffd7 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 fdf7 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdbd 	bl	80004c0 <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	080035c8 	.word	0x080035c8
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	2000008c 	.word	0x2000008c

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f92b 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fefc 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f943 	bl	8000c52 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f90b 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000088 	.word	0x20000088

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000088 	.word	0x20000088

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff29 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff3e 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff31 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d004      	beq.n	8000c88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00c      	b.n	8000ca2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 0201 	bic.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cbc:	b2db      	uxtb	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	e16b      	b.n	8000fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 815a 	bne.w	8000fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d130      	bne.n	8000d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d017      	beq.n	8000dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d123      	bne.n	8000e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	69b9      	ldr	r1, [r7, #24]
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0203 	and.w	r2, r3, #3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80b4 	beq.w	8000fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <HAL_GPIO_Init+0x30c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a5f      	ldr	r2, [pc, #380]	; (8000fd8 <HAL_GPIO_Init+0x30c>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_GPIO_Init+0x30c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HAL_GPIO_Init+0x310>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <HAL_GPIO_Init+0x314>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d02b      	beq.n	8000ef2 <HAL_GPIO_Init+0x226>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a51      	ldr	r2, [pc, #324]	; (8000fe4 <HAL_GPIO_Init+0x318>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d025      	beq.n	8000eee <HAL_GPIO_Init+0x222>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a50      	ldr	r2, [pc, #320]	; (8000fe8 <HAL_GPIO_Init+0x31c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d01f      	beq.n	8000eea <HAL_GPIO_Init+0x21e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4f      	ldr	r2, [pc, #316]	; (8000fec <HAL_GPIO_Init+0x320>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d019      	beq.n	8000ee6 <HAL_GPIO_Init+0x21a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	; (8000ff0 <HAL_GPIO_Init+0x324>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0x216>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x328>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d00d      	beq.n	8000ede <HAL_GPIO_Init+0x212>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x32c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d007      	beq.n	8000eda <HAL_GPIO_Init+0x20e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <HAL_GPIO_Init+0x330>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_GPIO_Init+0x20a>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e00e      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	e00c      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000eda:	2306      	movs	r3, #6
 8000edc:	e00a      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x228>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f04:	4935      	ldr	r1, [pc, #212]	; (8000fdc <HAL_GPIO_Init+0x310>)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f36:	4a32      	ldr	r2, [pc, #200]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_GPIO_Init+0x334>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	f67f ae90 	bls.w	8000ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40021400 	.word	0x40021400
 8000ff8:	40021800 	.word	0x40021800
 8000ffc:	40021c00 	.word	0x40021c00
 8001000:	40013c00 	.word	0x40013c00

08001004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001020:	e003      	b.n	800102a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	041a      	lsls	r2, r3, #16
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e12b      	b.n	80012a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fbc0 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2224      	movs	r2, #36	; 0x24
 8001068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800108a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800109a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800109c:	f002 fa34 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a81      	ldr	r2, [pc, #516]	; (80012ac <HAL_I2C_Init+0x274>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d807      	bhi.n	80010bc <HAL_I2C_Init+0x84>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a80      	ldr	r2, [pc, #512]	; (80012b0 <HAL_I2C_Init+0x278>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	e006      	b.n	80010ca <HAL_I2C_Init+0x92>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4a7d      	ldr	r2, [pc, #500]	; (80012b4 <HAL_I2C_Init+0x27c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	bf94      	ite	ls
 80010c4:	2301      	movls	r3, #1
 80010c6:	2300      	movhi	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0e7      	b.n	80012a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4a78      	ldr	r2, [pc, #480]	; (80012b8 <HAL_I2C_Init+0x280>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	0c9b      	lsrs	r3, r3, #18
 80010dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <HAL_I2C_Init+0x274>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d802      	bhi.n	800110c <HAL_I2C_Init+0xd4>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3301      	adds	r3, #1
 800110a:	e009      	b.n	8001120 <HAL_I2C_Init+0xe8>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4a69      	ldr	r2, [pc, #420]	; (80012bc <HAL_I2C_Init+0x284>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	3301      	adds	r3, #1
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	495c      	ldr	r1, [pc, #368]	; (80012ac <HAL_I2C_Init+0x274>)
 800113c:	428b      	cmp	r3, r1
 800113e:	d819      	bhi.n	8001174 <HAL_I2C_Init+0x13c>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e59      	subs	r1, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fbb1 f3f3 	udiv	r3, r1, r3
 800114e:	1c59      	adds	r1, r3, #1
 8001150:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001154:	400b      	ands	r3, r1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <HAL_I2C_Init+0x138>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1e59      	subs	r1, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fbb1 f3f3 	udiv	r3, r1, r3
 8001168:	3301      	adds	r3, #1
 800116a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116e:	e051      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 8001170:	2304      	movs	r3, #4
 8001172:	e04f      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d111      	bne.n	80011a0 <HAL_I2C_Init+0x168>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	440b      	add	r3, r1
 800118a:	fbb0 f3f3 	udiv	r3, r0, r3
 800118e:	3301      	adds	r3, #1
 8001190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	e012      	b.n	80011c6 <HAL_I2C_Init+0x18e>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	0099      	lsls	r1, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Init+0x196>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e022      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <HAL_I2C_Init+0x1bc>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e58      	subs	r0, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6859      	ldr	r1, [r3, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	440b      	add	r3, r1
 80011e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	e00f      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	0099      	lsls	r1, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	fbb0 f3f3 	udiv	r3, r0, r3
 800120a:	3301      	adds	r3, #1
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	6809      	ldr	r1, [r1, #0]
 8001218:	4313      	orrs	r3, r2
 800121a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6911      	ldr	r1, [r2, #16]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68d2      	ldr	r2, [r2, #12]
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	430b      	orrs	r3, r1
 8001256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2220      	movs	r2, #32
 800128e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	000186a0 	.word	0x000186a0
 80012b0:	001e847f 	.word	0x001e847f
 80012b4:	003d08ff 	.word	0x003d08ff
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	10624dd3 	.word	0x10624dd3

080012c0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80012dc:	2b28      	cmp	r3, #40	; 0x28
 80012de:	d15b      	bne.n	8001398 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e054      	b.n	800139a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e04d      	b.n	800139a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d007      	beq.n	8001324 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2229      	movs	r2, #41	; 0x29
 8001338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2220      	movs	r2, #32
 8001340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135a:	b29a      	uxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001392:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001398:	2302      	movs	r3, #2
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80013c2:	2b28      	cmp	r3, #40	; 0x28
 80013c4:	d15b      	bne.n	800147e <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e054      	b.n	8001480 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e04d      	b.n	8001480 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d007      	beq.n	800140a <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001418:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	222a      	movs	r2, #42	; 0x2a
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2220      	movs	r2, #32
 8001426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	88fa      	ldrh	r2, [r7, #6]
 800143a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29a      	uxth	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001478:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	d124      	bne.n	80014ea <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2228      	movs	r2, #40	; 0x28
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d007      	beq.n	80014c6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014d4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80014e4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
  }
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001518:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001520:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b10      	cmp	r3, #16
 8001526:	d003      	beq.n	8001530 <HAL_I2C_EV_IRQHandler+0x38>
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b40      	cmp	r3, #64	; 0x40
 800152c:	f040 80c1 	bne.w	80016b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <HAL_I2C_EV_IRQHandler+0x6e>
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001550:	d003      	beq.n	800155a <HAL_I2C_EV_IRQHandler+0x62>
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001558:	d101      	bne.n	800155e <HAL_I2C_EV_IRQHandler+0x66>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_I2C_EV_IRQHandler+0x68>
 800155e:	2300      	movs	r3, #0
 8001560:	2b01      	cmp	r3, #1
 8001562:	f000 8132 	beq.w	80017ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00c      	beq.n	800158a <HAL_I2C_EV_IRQHandler+0x92>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	0a5b      	lsrs	r3, r3, #9
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f001 fb5b 	bl	8002c38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fcd2 	bl	8001f2c <I2C_Master_SB>
 8001588:	e092      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_I2C_EV_IRQHandler+0xb2>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	0a5b      	lsrs	r3, r3, #9
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fd48 	bl	8002038 <I2C_Master_ADD10>
 80015a8:	e082      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_I2C_EV_IRQHandler+0xd2>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	0a5b      	lsrs	r3, r3, #9
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fd62 	bl	800208c <I2C_Master_ADDR>
 80015c8:	e072      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03b      	beq.n	800164e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015e4:	f000 80f3 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00f      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x11c>
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	0a9b      	lsrs	r3, r3, #10
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x11c>
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f94c 	bl	80018aa <I2C_MasterTransmit_TXE>
 8001612:	e04d      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80d6 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	0a5b      	lsrs	r3, r3, #9
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80cf 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	2b21      	cmp	r3, #33	; 0x21
 8001634:	d103      	bne.n	800163e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f9d3 	bl	80019e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800163c:	e0c7      	b.n	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	f040 80c4 	bne.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fa41 	bl	8001ace <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800164c:	e0bf      	b.n	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800165c:	f000 80b7 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	099b      	lsrs	r3, r3, #6
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00f      	beq.n	800168c <HAL_I2C_EV_IRQHandler+0x194>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	0a9b      	lsrs	r3, r3, #10
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_I2C_EV_IRQHandler+0x194>
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fab6 	bl	8001bf6 <I2C_MasterReceive_RXNE>
 800168a:	e011      	b.n	80016b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 809a 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	0a5b      	lsrs	r3, r3, #9
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8093 	beq.w	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fb55 	bl	8001d58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ae:	e08e      	b.n	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80016b0:	e08d      	b.n	80017ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e007      	b.n	80016d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d012      	beq.n	8001706 <HAL_I2C_EV_IRQHandler+0x20e>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	0a5b      	lsrs	r3, r3, #9
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80016fc:	69b9      	ldr	r1, [r7, #24]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 ff13 	bl	800252a <I2C_Slave_ADDR>
 8001704:	e066      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x22e>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	0a5b      	lsrs	r3, r3, #9
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 ff4e 	bl	80025c0 <I2C_Slave_STOPF>
 8001724:	e056      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	2b21      	cmp	r3, #33	; 0x21
 800172a:	d002      	beq.n	8001732 <HAL_I2C_EV_IRQHandler+0x23a>
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	2b29      	cmp	r3, #41	; 0x29
 8001730:	d125      	bne.n	800177e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	09db      	lsrs	r3, r3, #7
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00f      	beq.n	800175e <HAL_I2C_EV_IRQHandler+0x266>
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	0a9b      	lsrs	r3, r3, #10
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_I2C_EV_IRQHandler+0x266>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fe29 	bl	80023ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800175c:	e039      	b.n	80017d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d033      	beq.n	80017d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	0a5b      	lsrs	r3, r3, #9
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d02d      	beq.n	80017d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fe56 	bl	8002428 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800177c:	e029      	b.n	80017d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00f      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	0a9b      	lsrs	r3, r3, #10
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fe61 	bl	800246a <I2C_SlaveReceive_RXNE>
 80017a8:	e014      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00e      	beq.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	0a5b      	lsrs	r3, r3, #9
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fe8f 	bl	80024e6 <I2C_SlaveReceive_BTF>
 80017c8:	e004      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80017ca:	bf00      	nop
 80017cc:	e002      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ce:	bf00      	nop
 80017d0:	e000      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800189c:	b2db      	uxtb	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d150      	bne.n	8001972 <I2C_MasterTransmit_TXE+0xc8>
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b21      	cmp	r3, #33	; 0x21
 80018d4:	d14d      	bne.n	8001972 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d01d      	beq.n	8001918 <I2C_MasterTransmit_TXE+0x6e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d01a      	beq.n	8001918 <I2C_MasterTransmit_TXE+0x6e>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018e8:	d016      	beq.n	8001918 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2211      	movs	r2, #17
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff62 	bl	80017da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001916:	e060      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001926:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001936:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d107      	bne.n	8001962 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff6f 	bl	800183e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001960:	e03b      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff35 	bl	80017da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001970:	e033      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b21      	cmp	r3, #33	; 0x21
 8001976:	d005      	beq.n	8001984 <I2C_MasterTransmit_TXE+0xda>
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d12d      	bne.n	80019da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b22      	cmp	r3, #34	; 0x22
 8001982:	d12a      	bne.n	80019da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29b      	uxth	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800199e:	e01c      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b40      	cmp	r3, #64	; 0x40
 80019aa:	d103      	bne.n	80019b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f88e 	bl	8001ace <I2C_MemoryTransmit_TXE_BTF>
}
 80019b2:	e012      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019d8:	e7ff      	b.n	80019da <I2C_MasterTransmit_TXE+0x130>
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b21      	cmp	r3, #33	; 0x21
 80019fa:	d164      	bne.n	8001ac6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d012      	beq.n	8001a2c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a2a:	e04c      	b.n	8001ac6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d01d      	beq.n	8001a6e <I2C_MasterTransmit_BTF+0x8c>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	d01a      	beq.n	8001a6e <I2C_MasterTransmit_BTF+0x8c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a3e:	d016      	beq.n	8001a6e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a4e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2211      	movs	r2, #17
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff feb7 	bl	80017da <HAL_I2C_MasterTxCpltCallback>
}
 8001a6c:	e02b      	b.n	8001ac6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a7c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d107      	bne.n	8001ab8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fec4 	bl	800183e <HAL_I2C_MemTxCpltCallback>
}
 8001ab6:	e006      	b.n	8001ac6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fe8a 	bl	80017da <HAL_I2C_MasterTxCpltCallback>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11d      	bne.n	8001b22 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10b      	bne.n	8001b06 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	1c9a      	adds	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001b04:	e073      	b.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	121b      	asrs	r3, r3, #8
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b20:	e065      	b.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10b      	bne.n	8001b42 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b40:	e055      	b.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d151      	bne.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b22      	cmp	r3, #34	; 0x22
 8001b4e:	d10d      	bne.n	8001b6c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b6a:	e040      	b.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b21      	cmp	r3, #33	; 0x21
 8001b7a:	d112      	bne.n	8001ba2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ba0:	e025      	b.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d120      	bne.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b21      	cmp	r3, #33	; 0x21
 8001bb0:	d11d      	bne.n	8001bee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bc0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fe28 	bl	800183e <HAL_I2C_MemTxCpltCallback>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b22      	cmp	r3, #34	; 0x22
 8001c08:	f040 80a2 	bne.w	8001d50 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d921      	bls.n	8001c5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	f040 8082 	bne.w	8001d50 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c5c:	e078      	b.n	8001d50 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d074      	beq.n	8001d50 <I2C_MasterReceive_RXNE+0x15a>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d002      	beq.n	8001c72 <I2C_MasterReceive_RXNE+0x7c>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d16e      	bne.n	8001d50 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 ffae 	bl	8002bd4 <I2C_WaitOnSTOPRequestThroughIT>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d142      	bne.n	8001d04 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d10a      	bne.n	8001cee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fdb3 	bl	8001852 <HAL_I2C_MemRxCpltCallback>
}
 8001cec:	e030      	b.n	8001d50 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2212      	movs	r2, #18
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fd76 	bl	80017ee <HAL_I2C_MasterRxCpltCallback>
}
 8001d02:	e025      	b.n	8001d50 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fd8b 	bl	8001866 <HAL_I2C_ErrorCallback>
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11b      	bne.n	8001da8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001da6:	e0bd      	b.n	8001f24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d129      	bne.n	8001e06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00a      	beq.n	8001dde <I2C_MasterReceive_BTF+0x86>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d007      	beq.n	8001dde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ddc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e04:	e08e      	b.n	8001f24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d176      	bne.n	8001efe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <I2C_MasterReceive_BTF+0xc4>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d108      	bne.n	8001e2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e019      	b.n	8001e62 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d002      	beq.n	8001e3a <I2C_MasterReceive_BTF+0xe2>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d108      	bne.n	8001e4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e00a      	b.n	8001e62 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d007      	beq.n	8001e62 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ebc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d10a      	bne.n	8001ee8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fcb6 	bl	8001852 <HAL_I2C_MemRxCpltCallback>
}
 8001ee6:	e01d      	b.n	8001f24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2212      	movs	r2, #18
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fc79 	bl	80017ee <HAL_I2C_MasterRxCpltCallback>
}
 8001efc:	e012      	b.n	8001f24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d117      	bne.n	8001f70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f5a:	e067      	b.n	800202c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
}
 8001f6e:	e05d      	b.n	800202c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f78:	d133      	bne.n	8001fe2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b21      	cmp	r3, #33	; 0x21
 8001f84:	d109      	bne.n	8001f9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	e008      	b.n	8001fac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <I2C_Master_SB+0x92>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d108      	bne.n	8001fd0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d032      	beq.n	800202c <I2C_Master_SB+0x100>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02d      	beq.n	800202c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fde:	605a      	str	r2, [r3, #4]
}
 8001fe0:	e024      	b.n	800202c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10e      	bne.n	8002008 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	11db      	asrs	r3, r3, #7
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 0306 	and.w	r3, r3, #6
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f063 030f 	orn	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	611a      	str	r2, [r3, #16]
}
 8002006:	e011      	b.n	800202c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	b29b      	uxth	r3, r3
 8002016:	11db      	asrs	r3, r3, #7
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f003 0306 	and.w	r3, r3, #6
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f063 030e 	orn	r3, r3, #14
 8002024:	b2da      	uxtb	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	611a      	str	r2, [r3, #16]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <I2C_Master_ADD10+0x26>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <I2C_Master_ADD10+0x48>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800207e:	605a      	str	r2, [r3, #4]
  }
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800208c:	b480      	push	{r7}
 800208e:	b091      	sub	sp, #68	; 0x44
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b22      	cmp	r3, #34	; 0x22
 80020b4:	f040 8169 	bne.w	800238a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10f      	bne.n	80020e0 <I2C_Master_ADDR+0x54>
 80020c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d10b      	bne.n	80020e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c8:	2300      	movs	r3, #0
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	e160      	b.n	80023a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11d      	bne.n	8002124 <I2C_Master_ADDR+0x98>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020f0:	d118      	bne.n	8002124 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002116:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	651a      	str	r2, [r3, #80]	; 0x50
 8002122:	e13e      	b.n	80023a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d113      	bne.n	8002156 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e115      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 808a 	bne.w	8002276 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002168:	d137      	bne.n	80021da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002188:	d113      	bne.n	80021b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	e0e7      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e0d3      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d02e      	beq.n	800223e <I2C_Master_ADDR+0x1b2>
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d02b      	beq.n	800223e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d102      	bne.n	80021f2 <I2C_Master_ADDR+0x166>
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d125      	bne.n	800223e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00e      	beq.n	8002216 <I2C_Master_ADDR+0x18a>
 80021f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d00b      	beq.n	8002216 <I2C_Master_ADDR+0x18a>
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	2b10      	cmp	r3, #16
 8002202:	d008      	beq.n	8002216 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002224:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	e0a1      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e085      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d14d      	bne.n	800231c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	2b04      	cmp	r3, #4
 8002284:	d016      	beq.n	80022b4 <I2C_Master_ADDR+0x228>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2b02      	cmp	r3, #2
 800228a:	d013      	beq.n	80022b4 <I2C_Master_ADDR+0x228>
 800228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228e:	2b10      	cmp	r3, #16
 8002290:	d010      	beq.n	80022b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e007      	b.n	80022c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d2:	d117      	bne.n	8002304 <I2C_Master_ADDR+0x278>
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022da:	d00b      	beq.n	80022f4 <I2C_Master_ADDR+0x268>
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d008      	beq.n	80022f4 <I2C_Master_ADDR+0x268>
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d005      	beq.n	80022f4 <I2C_Master_ADDR+0x268>
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d002      	beq.n	80022f4 <I2C_Master_ADDR+0x268>
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d107      	bne.n	8002304 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002302:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	e032      	b.n	8002382 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800232a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800233a:	d117      	bne.n	800236c <I2C_Master_ADDR+0x2e0>
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002342:	d00b      	beq.n	800235c <I2C_Master_ADDR+0x2d0>
 8002344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002346:	2b01      	cmp	r3, #1
 8002348:	d008      	beq.n	800235c <I2C_Master_ADDR+0x2d0>
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	2b08      	cmp	r3, #8
 800234e:	d005      	beq.n	800235c <I2C_Master_ADDR+0x2d0>
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	2b10      	cmp	r3, #16
 8002354:	d002      	beq.n	800235c <I2C_Master_ADDR+0x2d0>
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	2b20      	cmp	r3, #32
 800235a:	d107      	bne.n	800236c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800236a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002388:	e00b      	b.n	80023a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	e7ff      	b.n	80023a2 <I2C_Master_ADDR+0x316>
 80023a2:	bf00      	nop
 80023a4:	3744      	adds	r7, #68	; 0x44
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02b      	beq.n	8002420 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d114      	bne.n	8002420 <I2C_SlaveTransmit_TXE+0x72>
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b29      	cmp	r3, #41	; 0x29
 80023fa:	d111      	bne.n	8002420 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2221      	movs	r2, #33	; 0x21
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2228      	movs	r2, #40	; 0x28
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff f9f1 	bl	8001802 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d011      	beq.n	800245e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02c      	beq.n	80024de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d114      	bne.n	80024de <I2C_SlaveReceive_RXNE+0x74>
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b2a      	cmp	r3, #42	; 0x2a
 80024b8:	d111      	bne.n	80024de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2222      	movs	r2, #34	; 0x22
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2228      	movs	r2, #40	; 0x28
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff f99c 	bl	8001816 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d012      	beq.n	800251e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002544:	2b28      	cmp	r3, #40	; 0x28
 8002546:	d127      	bne.n	8002598 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	09db      	lsrs	r3, r3, #7
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	81bb      	strh	r3, [r7, #12]
 800257a:	e002      	b.n	8002582 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800258a:	89ba      	ldrh	r2, [r7, #12]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe f8d7 	bl	8000744 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002596:	e00e      	b.n	80025b6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800261c:	d172      	bne.n	8002704 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b22      	cmp	r3, #34	; 0x22
 8002622:	d002      	beq.n	800262a <I2C_Slave_STOPF+0x6a>
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b2a      	cmp	r3, #42	; 0x2a
 8002628:	d135      	bne.n	8002696 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f043 0204 	orr.w	r2, r3, #4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fb23 	bl	8000cae <HAL_DMA_GetState>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d049      	beq.n	8002702 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <I2C_Slave_STOPF+0x258>)
 8002674:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe faf5 	bl	8000c6a <HAL_DMA_Abort_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d03d      	beq.n	8002702 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002690:	4610      	mov	r0, r2
 8002692:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002694:	e035      	b.n	8002702 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0204 	orr.w	r2, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe faed 	bl	8000cae <HAL_DMA_GetState>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d014      	beq.n	8002704 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <I2C_Slave_STOPF+0x258>)
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fabf 	bl	8000c6a <HAL_DMA_Abort_IT>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026fc:	4610      	mov	r0, r2
 80026fe:	4798      	blx	r3
 8002700:	e000      	b.n	8002704 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002702:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03e      	beq.n	800278c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d112      	bne.n	8002742 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d112      	bne.n	8002776 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f843 	bl	8002820 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800279a:	e039      	b.n	8002810 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b2a      	cmp	r3, #42	; 0x2a
 80027a0:	d109      	bne.n	80027b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2228      	movs	r2, #40	; 0x28
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff f830 	bl	8001816 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b28      	cmp	r3, #40	; 0x28
 80027c0:	d111      	bne.n	80027e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <I2C_Slave_STOPF+0x25c>)
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff f823 	bl	800182a <HAL_I2C_ListenCpltCallback>
}
 80027e4:	e014      	b.n	8002810 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	2b22      	cmp	r3, #34	; 0x22
 80027ec:	d002      	beq.n	80027f4 <I2C_Slave_STOPF+0x234>
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b22      	cmp	r3, #34	; 0x22
 80027f2:	d10d      	bne.n	8002810 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff f803 	bl	8001816 <HAL_I2C_SlaveRxCpltCallback>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	08002a85 	.word	0x08002a85
 800281c:	ffff0000 	.word	0xffff0000

08002820 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002836:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d002      	beq.n	8002844 <I2C_ITError+0x24>
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d10a      	bne.n	800285a <I2C_ITError+0x3a>
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b22      	cmp	r3, #34	; 0x22
 8002848:	d107      	bne.n	800285a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002858:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002860:	2b28      	cmp	r3, #40	; 0x28
 8002862:	d107      	bne.n	8002874 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2228      	movs	r2, #40	; 0x28
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002872:	e015      	b.n	80028a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002882:	d00a      	beq.n	800289a <I2C_ITError+0x7a>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b60      	cmp	r3, #96	; 0x60
 8002888:	d007      	beq.n	800289a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ae:	d162      	bne.n	8002976 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d020      	beq.n	8002910 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <I2C_ITError+0x25c>)
 80028d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f9c5 	bl	8000c6a <HAL_DMA_Abort_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8089 	beq.w	80029fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290a:	4610      	mov	r0, r2
 800290c:	4798      	blx	r3
 800290e:	e074      	b.n	80029fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <I2C_ITError+0x25c>)
 8002916:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe f9a4 	bl	8000c6a <HAL_DMA_Abort_IT>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d068      	beq.n	80029fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d10b      	bne.n	800294e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002970:	4610      	mov	r0, r2
 8002972:	4798      	blx	r3
 8002974:	e041      	b.n	80029fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b60      	cmp	r3, #96	; 0x60
 8002980:	d125      	bne.n	80029ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d10b      	bne.n	80029b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe ff57 	bl	800187a <HAL_I2C_AbortCpltCallback>
 80029cc:	e015      	b.n	80029fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d10b      	bne.n	80029f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe ff36 	bl	8001866 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d113      	bne.n	8002a74 <I2C_ITError+0x254>
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b28      	cmp	r3, #40	; 0x28
 8002a50:	d110      	bne.n	8002a74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <I2C_ITError+0x260>)
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fedb 	bl	800182a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08002a85 	.word	0x08002a85
 8002a80:	ffff0000 	.word	0xffff0000

08002a84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a9e:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <I2C_DMAAbort+0x148>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <I2C_DMAAbort+0x14c>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a1a      	lsrs	r2, r3, #8
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00da      	lsls	r2, r3, #3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002aca:	e00a      	b.n	8002ae2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d0ea      	beq.n	8002ab8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aee:	2200      	movs	r2, #0
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	2200      	movs	r2, #0
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	2200      	movs	r2, #0
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	2200      	movs	r2, #0
 8002b36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b60      	cmp	r3, #96	; 0x60
 8002b52:	d10e      	bne.n	8002b72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7fe fe85 	bl	800187a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b70:	e027      	b.n	8002bc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b78:	2b28      	cmp	r3, #40	; 0x28
 8002b7a:	d117      	bne.n	8002bac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2228      	movs	r2, #40	; 0x28
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002baa:	e007      	b.n	8002bbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f7fe fe52 	bl	8001866 <HAL_I2C_ErrorCallback>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	14f8b589 	.word	0x14f8b589

08002bd4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0a1a      	lsrs	r2, r3, #8
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e008      	b.n	8002c24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c20:	d0e9      	beq.n	8002bf6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	20000000 	.word	0x20000000
 8002c34:	14f8b589 	.word	0x14f8b589

08002c38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c48:	d103      	bne.n	8002c52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c50:	e007      	b.n	8002c62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c5a:	d102      	bne.n	8002c62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e264      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d075      	beq.n	8002d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	4ba0      	ldr	r3, [pc, #640]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d112      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca6:	4b9d      	ldr	r3, [pc, #628]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	4b99      	ldr	r3, [pc, #612]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x108>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d157      	bne.n	8002d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e23f      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x74>
 8002cd6:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e01d      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x98>
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a8a      	ldr	r2, [pc, #552]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xb0>
 8002d08:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a83      	ldr	r2, [pc, #524]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fd fe82 	bl	8000a30 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fd fe7e 	bl	8000a30 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e204      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xc0>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fe6e 	bl	8000a30 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fd fe6a 	bl	8000a30 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1f0      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0xe8>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1c4      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4952      	ldr	r1, [pc, #328]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x2b0>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fd fe23 	bl	8000a30 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fd fe1f 	bl	8000a30 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1a5      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4940      	ldr	r1, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x2b0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fd fe02 	bl	8000a30 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fd fdfe 	bl	8000a30 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e184      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d030      	beq.n	8002ebc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <HAL_RCC_OscConfig+0x2b4>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fd fde2 	bl	8000a30 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fd fdde 	bl	8000a30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e164      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x200>
 8002e8e:	e015      	b.n	8002ebc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x2b4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fd fdcb 	bl	8000a30 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fd fdc7 	bl	8000a30 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e14d      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a0 	beq.w	800300a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d121      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_RCC_OscConfig+0x2b8>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fd fd8d 	bl	8000a30 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	e011      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ce>
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
 8002f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fd fd80 	bl	8000a30 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e106      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b85      	ldr	r3, [pc, #532]	; (8003154 <HAL_RCC_OscConfig+0x4e4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e01c      	b.n	8002f9a <HAL_RCC_OscConfig+0x32a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d10c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x312>
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b78      	ldr	r3, [pc, #480]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e00b      	b.n	8002f9a <HAL_RCC_OscConfig+0x32a>
 8002f82:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a74      	ldr	r2, [pc, #464]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a71      	ldr	r2, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d015      	beq.n	8002fce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fd45 	bl	8000a30 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fd fd41 	bl	8000a30 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0c5      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ee      	beq.n	8002faa <HAL_RCC_OscConfig+0x33a>
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fd fd2f 	bl	8000a30 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fd fd2b 	bl	8000a30 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0af      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ee      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 809b 	beq.w	800314a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d05c      	beq.n	80030da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d141      	bne.n	80030ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fd fcff 	bl	8000a30 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7fd fcfb 	bl	8000a30 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e081      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	019b      	lsls	r3, r3, #6
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	4937      	ldr	r1, [pc, #220]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fd fcd4 	bl	8000a30 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fd fcd0 	bl	8000a30 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e056      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x41c>
 80030aa:	e04e      	b.n	800314a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x4ec>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd fcbd 	bl	8000a30 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fcb9 	bl	8000a30 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03f      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x44a>
 80030d8:	e037      	b.n	800314a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e032      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCC_OscConfig+0x4e8>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d028      	beq.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d121      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d11a      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800311c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40007000 	.word	0x40007000
 8003158:	40023800 	.word	0x40023800
 800315c:	42470060 	.word	0x42470060

08003160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0cc      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d90c      	bls.n	800319c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b8      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d044      	beq.n	8003280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d119      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d003      	beq.n	800321e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321a:	2b03      	cmp	r3, #3
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321e:	4b3f      	ldr	r3, [pc, #252]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e067      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b37      	ldr	r3, [pc, #220]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4934      	ldr	r1, [pc, #208]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fd fbee 	bl	8000a30 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fbea 	bl	8000a30 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e04f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d20c      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e032      	b.n	800330e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032e6:	f000 f821 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490a      	ldr	r1, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fb4e 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023c00 	.word	0x40023c00
 800331c:	40023800 	.word	0x40023800
 8003320:	080035a0 	.word	0x080035a0
 8003324:	20000000 	.word	0x20000000
 8003328:	20000004 	.word	0x20000004

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	4b67      	ldr	r3, [pc, #412]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d00d      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x40>
 8003350:	2b08      	cmp	r3, #8
 8003352:	f200 80bd 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x3a>
 800335e:	e0b7      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003362:	60bb      	str	r3, [r7, #8]
       break;
 8003364:	e0b7      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003368:	60bb      	str	r3, [r7, #8]
      break;
 800336a:	e0b4      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003374:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003376:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04d      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b58      	ldr	r3, [pc, #352]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	461a      	mov	r2, r3
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	ea02 0800 	and.w	r8, r2, r0
 800339a:	ea03 0901 	and.w	r9, r3, r1
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	014b      	lsls	r3, r1, #5
 80033ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b0:	0142      	lsls	r2, r0, #5
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	ebb0 0008 	subs.w	r0, r0, r8
 80033ba:	eb61 0109 	sbc.w	r1, r1, r9
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	018b      	lsls	r3, r1, #6
 80033c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033cc:	0182      	lsls	r2, r0, #6
 80033ce:	1a12      	subs	r2, r2, r0
 80033d0:	eb63 0301 	sbc.w	r3, r3, r1
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	00d9      	lsls	r1, r3, #3
 80033de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033e2:	00d0      	lsls	r0, r2, #3
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	eb12 0208 	adds.w	r2, r2, r8
 80033ec:	eb43 0309 	adc.w	r3, r3, r9
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0259      	lsls	r1, r3, #9
 80033fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033fe:	0250      	lsls	r0, r2, #9
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	461a      	mov	r2, r3
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f7fc feda 	bl	80001c8 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e04a      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	ea02 0400 	and.w	r4, r2, r0
 8003436:	ea03 0501 	and.w	r5, r3, r1
 800343a:	4620      	mov	r0, r4
 800343c:	4629      	mov	r1, r5
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	014b      	lsls	r3, r1, #5
 8003448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800344c:	0142      	lsls	r2, r0, #5
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	1b00      	subs	r0, r0, r4
 8003454:	eb61 0105 	sbc.w	r1, r1, r5
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	018b      	lsls	r3, r1, #6
 8003462:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003466:	0182      	lsls	r2, r0, #6
 8003468:	1a12      	subs	r2, r2, r0
 800346a:	eb63 0301 	sbc.w	r3, r3, r1
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	00d9      	lsls	r1, r3, #3
 8003478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800347c:	00d0      	lsls	r0, r2, #3
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	1912      	adds	r2, r2, r4
 8003484:	eb45 0303 	adc.w	r3, r5, r3
 8003488:	f04f 0000 	mov.w	r0, #0
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	0299      	lsls	r1, r3, #10
 8003492:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003496:	0290      	lsls	r0, r2, #10
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	f7fc fe8e 	bl	80001c8 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4613      	mov	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	60bb      	str	r3, [r7, #8]
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034d2:	60bb      	str	r3, [r7, #8]
      break;
 80034d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d6:	68bb      	ldr	r3, [r7, #8]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080035b0 	.word	0x080035b0

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4d0d      	ldr	r5, [pc, #52]	; (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2600      	movs	r6, #0
 800353c:	42a6      	cmp	r6, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4d0b      	ldr	r5, [pc, #44]	; (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	; (8003574 <__libc_init_array+0x44>)
 8003544:	f000 f820 	bl	8003588 <_init>
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2600      	movs	r6, #0
 800354e:	42a6      	cmp	r6, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f855 3b04 	ldr.w	r3, [r5], #4
 8003558:	4798      	blx	r3
 800355a:	3601      	adds	r6, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003562:	4798      	blx	r3
 8003564:	3601      	adds	r6, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	080035c0 	.word	0x080035c0
 800356c:	080035c0 	.word	0x080035c0
 8003570:	080035c0 	.word	0x080035c0
 8003574:	080035c4 	.word	0x080035c4

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
