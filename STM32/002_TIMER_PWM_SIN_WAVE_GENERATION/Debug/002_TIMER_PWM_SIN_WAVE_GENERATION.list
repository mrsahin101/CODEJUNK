
002_TIMER_PWM_SIN_WAVE_GENERATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fbc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08004148  08004148  00014148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4a3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f7  00000000  00000000  0002a4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000930  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205f4  00000000  00000000  0002cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad38  00000000  00000000  0004d5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c81c2  00000000  00000000  0005831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001204de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bec  00000000  00000000  00120534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800412c 	.word	0x0800412c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800412c 	.word	0x0800412c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96e 	b.w	8000b68 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468c      	mov	ip, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f040 8083 	bne.w	80009ba <__udivmoddi4+0x116>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4617      	mov	r7, r2
 80008b8:	d947      	bls.n	800094a <__udivmoddi4+0xa6>
 80008ba:	fab2 f282 	clz	r2, r2
 80008be:	b142      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	f1c2 0020 	rsb	r0, r2, #32
 80008c4:	fa24 f000 	lsr.w	r0, r4, r0
 80008c8:	4091      	lsls	r1, r2
 80008ca:	4097      	lsls	r7, r2
 80008cc:	ea40 0c01 	orr.w	ip, r0, r1
 80008d0:	4094      	lsls	r4, r2
 80008d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008d6:	0c23      	lsrs	r3, r4, #16
 80008d8:	fbbc f6f8 	udiv	r6, ip, r8
 80008dc:	fa1f fe87 	uxth.w	lr, r7
 80008e0:	fb08 c116 	mls	r1, r8, r6, ip
 80008e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d909      	bls.n	8000904 <__udivmoddi4+0x60>
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f6:	f080 8119 	bcs.w	8000b2c <__udivmoddi4+0x288>
 80008fa:	4299      	cmp	r1, r3
 80008fc:	f240 8116 	bls.w	8000b2c <__udivmoddi4+0x288>
 8000900:	3e02      	subs	r6, #2
 8000902:	443b      	add	r3, r7
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb3 f0f8 	udiv	r0, r3, r8
 800090c:	fb08 3310 	mls	r3, r8, r0, r3
 8000910:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000914:	fb00 fe0e 	mul.w	lr, r0, lr
 8000918:	45a6      	cmp	lr, r4
 800091a:	d909      	bls.n	8000930 <__udivmoddi4+0x8c>
 800091c:	193c      	adds	r4, r7, r4
 800091e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000922:	f080 8105 	bcs.w	8000b30 <__udivmoddi4+0x28c>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f240 8102 	bls.w	8000b30 <__udivmoddi4+0x28c>
 800092c:	3802      	subs	r0, #2
 800092e:	443c      	add	r4, r7
 8000930:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000934:	eba4 040e 	sub.w	r4, r4, lr
 8000938:	2600      	movs	r6, #0
 800093a:	b11d      	cbz	r5, 8000944 <__udivmoddi4+0xa0>
 800093c:	40d4      	lsrs	r4, r2
 800093e:	2300      	movs	r3, #0
 8000940:	e9c5 4300 	strd	r4, r3, [r5]
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	b902      	cbnz	r2, 800094e <__udivmoddi4+0xaa>
 800094c:	deff      	udf	#255	; 0xff
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	2a00      	cmp	r2, #0
 8000954:	d150      	bne.n	80009f8 <__udivmoddi4+0x154>
 8000956:	1bcb      	subs	r3, r1, r7
 8000958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800095c:	fa1f f887 	uxth.w	r8, r7
 8000960:	2601      	movs	r6, #1
 8000962:	fbb3 fcfe 	udiv	ip, r3, lr
 8000966:	0c21      	lsrs	r1, r4, #16
 8000968:	fb0e 331c 	mls	r3, lr, ip, r3
 800096c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000970:	fb08 f30c 	mul.w	r3, r8, ip
 8000974:	428b      	cmp	r3, r1
 8000976:	d907      	bls.n	8000988 <__udivmoddi4+0xe4>
 8000978:	1879      	adds	r1, r7, r1
 800097a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0xe2>
 8000980:	428b      	cmp	r3, r1
 8000982:	f200 80e9 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 8000986:	4684      	mov	ip, r0
 8000988:	1ac9      	subs	r1, r1, r3
 800098a:	b2a3      	uxth	r3, r4
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fb0e 1110 	mls	r1, lr, r0, r1
 8000994:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000998:	fb08 f800 	mul.w	r8, r8, r0
 800099c:	45a0      	cmp	r8, r4
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x10c>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x10a>
 80009a8:	45a0      	cmp	r8, r4
 80009aa:	f200 80d9 	bhi.w	8000b60 <__udivmoddi4+0x2bc>
 80009ae:	4618      	mov	r0, r3
 80009b0:	eba4 0408 	sub.w	r4, r4, r8
 80009b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009b8:	e7bf      	b.n	800093a <__udivmoddi4+0x96>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d909      	bls.n	80009d2 <__udivmoddi4+0x12e>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	f000 80b1 	beq.w	8000b26 <__udivmoddi4+0x282>
 80009c4:	2600      	movs	r6, #0
 80009c6:	e9c5 0100 	strd	r0, r1, [r5]
 80009ca:	4630      	mov	r0, r6
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	fab3 f683 	clz	r6, r3
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d14a      	bne.n	8000a70 <__udivmoddi4+0x1cc>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d302      	bcc.n	80009e4 <__udivmoddi4+0x140>
 80009de:	4282      	cmp	r2, r0
 80009e0:	f200 80b8 	bhi.w	8000b54 <__udivmoddi4+0x2b0>
 80009e4:	1a84      	subs	r4, r0, r2
 80009e6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ea:	2001      	movs	r0, #1
 80009ec:	468c      	mov	ip, r1
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d0a8      	beq.n	8000944 <__udivmoddi4+0xa0>
 80009f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009f6:	e7a5      	b.n	8000944 <__udivmoddi4+0xa0>
 80009f8:	f1c2 0320 	rsb	r3, r2, #32
 80009fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000a00:	4097      	lsls	r7, r2
 8000a02:	fa01 f002 	lsl.w	r0, r1, r2
 8000a06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a0a:	40d9      	lsrs	r1, r3
 8000a0c:	4330      	orrs	r0, r6
 8000a0e:	0c03      	lsrs	r3, r0, #16
 8000a10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a14:	fa1f f887 	uxth.w	r8, r7
 8000a18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f108 	mul.w	r1, r6, r8
 8000a24:	4299      	cmp	r1, r3
 8000a26:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2a:	d909      	bls.n	8000a40 <__udivmoddi4+0x19c>
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a32:	f080 808d 	bcs.w	8000b50 <__udivmoddi4+0x2ac>
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f240 808a 	bls.w	8000b50 <__udivmoddi4+0x2ac>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	443b      	add	r3, r7
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	b281      	uxth	r1, r0
 8000a44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a50:	fb00 f308 	mul.w	r3, r0, r8
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d907      	bls.n	8000a68 <__udivmoddi4+0x1c4>
 8000a58:	1879      	adds	r1, r7, r1
 8000a5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a5e:	d273      	bcs.n	8000b48 <__udivmoddi4+0x2a4>
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d971      	bls.n	8000b48 <__udivmoddi4+0x2a4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4439      	add	r1, r7
 8000a68:	1acb      	subs	r3, r1, r3
 8000a6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a6e:	e778      	b.n	8000962 <__udivmoddi4+0xbe>
 8000a70:	f1c6 0c20 	rsb	ip, r6, #32
 8000a74:	fa03 f406 	lsl.w	r4, r3, r6
 8000a78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a7c:	431c      	orrs	r4, r3
 8000a7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a82:	fa01 f306 	lsl.w	r3, r1, r6
 8000a86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a8e:	431f      	orrs	r7, r3
 8000a90:	0c3b      	lsrs	r3, r7, #16
 8000a92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a96:	fa1f f884 	uxth.w	r8, r4
 8000a9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aa2:	fb09 fa08 	mul.w	sl, r9, r8
 8000aa6:	458a      	cmp	sl, r1
 8000aa8:	fa02 f206 	lsl.w	r2, r2, r6
 8000aac:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x220>
 8000ab2:	1861      	adds	r1, r4, r1
 8000ab4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab8:	d248      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000aba:	458a      	cmp	sl, r1
 8000abc:	d946      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000abe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac2:	4421      	add	r1, r4
 8000ac4:	eba1 010a 	sub.w	r1, r1, sl
 8000ac8:	b2bf      	uxth	r7, r7
 8000aca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ace:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ad6:	fb00 f808 	mul.w	r8, r0, r8
 8000ada:	45b8      	cmp	r8, r7
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x24a>
 8000ade:	19e7      	adds	r7, r4, r7
 8000ae0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae4:	d22e      	bcs.n	8000b44 <__udivmoddi4+0x2a0>
 8000ae6:	45b8      	cmp	r8, r7
 8000ae8:	d92c      	bls.n	8000b44 <__udivmoddi4+0x2a0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4427      	add	r7, r4
 8000aee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af2:	eba7 0708 	sub.w	r7, r7, r8
 8000af6:	fba0 8902 	umull	r8, r9, r0, r2
 8000afa:	454f      	cmp	r7, r9
 8000afc:	46c6      	mov	lr, r8
 8000afe:	4649      	mov	r1, r9
 8000b00:	d31a      	bcc.n	8000b38 <__udivmoddi4+0x294>
 8000b02:	d017      	beq.n	8000b34 <__udivmoddi4+0x290>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x27a>
 8000b06:	ebb3 020e 	subs.w	r2, r3, lr
 8000b0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000b0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b12:	40f2      	lsrs	r2, r6
 8000b14:	ea4c 0202 	orr.w	r2, ip, r2
 8000b18:	40f7      	lsrs	r7, r6
 8000b1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	462e      	mov	r6, r5
 8000b28:	4628      	mov	r0, r5
 8000b2a:	e70b      	b.n	8000944 <__udivmoddi4+0xa0>
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	e6e9      	b.n	8000904 <__udivmoddi4+0x60>
 8000b30:	4618      	mov	r0, r3
 8000b32:	e6fd      	b.n	8000930 <__udivmoddi4+0x8c>
 8000b34:	4543      	cmp	r3, r8
 8000b36:	d2e5      	bcs.n	8000b04 <__udivmoddi4+0x260>
 8000b38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b40:	3801      	subs	r0, #1
 8000b42:	e7df      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b44:	4608      	mov	r0, r1
 8000b46:	e7d2      	b.n	8000aee <__udivmoddi4+0x24a>
 8000b48:	4660      	mov	r0, ip
 8000b4a:	e78d      	b.n	8000a68 <__udivmoddi4+0x1c4>
 8000b4c:	4681      	mov	r9, r0
 8000b4e:	e7b9      	b.n	8000ac4 <__udivmoddi4+0x220>
 8000b50:	4666      	mov	r6, ip
 8000b52:	e775      	b.n	8000a40 <__udivmoddi4+0x19c>
 8000b54:	4630      	mov	r0, r6
 8000b56:	e74a      	b.n	80009ee <__udivmoddi4+0x14a>
 8000b58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b5c:	4439      	add	r1, r7
 8000b5e:	e713      	b.n	8000988 <__udivmoddi4+0xe4>
 8000b60:	3802      	subs	r0, #2
 8000b62:	443c      	add	r4, r7
 8000b64:	e724      	b.n	80009b0 <__udivmoddi4+0x10c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0e7      	sub	sp, #412	; 0x19c
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fad9 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f877 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f981 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 f95f 	bl	8000e44 <MX_DMA_Init>
  MX_TIM1_Init();
 8000b86:	f000 f8db 	bl	8000d40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  for (uint8_t i = 0; i < 200; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000b90:	e051      	b.n	8000c36 <main+0xc6>
    angle = ASR*(float)i;
 8000b92:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b9e:	ee17 0a90 	vmov	r0, s15
 8000ba2:	f7ff fd9f 	bl	80006e4 <__aeabi_f2d>
 8000ba6:	a32d      	add	r3, pc, #180	; (adr r3, 8000c5c <main+0xec>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	f7ff fb0c 	bl	80001c8 <__aeabi_dmul>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f7ff fe0c 	bl	80007d4 <__aeabi_d2f>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    IV[i] = (uint16_t) rint(100 + 99*sinf(angle*(PI/180)));
 8000bc2:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8000bc6:	f7ff fd8d 	bl	80006e4 <__aeabi_f2d>
 8000bca:	a326      	add	r3, pc, #152	; (adr r3, 8000c64 <main+0xf4>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fafa 	bl	80001c8 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f7ff fdfa 	bl	80007d4 <__aeabi_d2f>
 8000be0:	4603      	mov	r3, r0
 8000be2:	ee00 3a10 	vmov	s0, r3
 8000be6:	f002 fd35 	bl	8003654 <sinf>
 8000bea:	eef0 7a40 	vmov.f32	s15, s0
 8000bee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000c50 <main+0xe0>
 8000bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000c54 <main+0xe4>
 8000bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bfe:	ee17 0a90 	vmov	r0, s15
 8000c02:	f7ff fd6f 	bl	80006e4 <__aeabi_f2d>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	ec43 2b10 	vmov	d0, r2, r3
 8000c0e:	f002 fc97 	bl	8003540 <rint>
 8000c12:	ec53 2b10 	vmov	r2, r3, d0
 8000c16:	f897 4197 	ldrb.w	r4, [r7, #407]	; 0x197
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff fdb9 	bl	8000794 <__aeabi_d2uiz>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	463b      	mov	r3, r7
 8000c28:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint8_t i = 0; i < 200; i++) {
 8000c2c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000c30:	3301      	adds	r3, #1
 8000c32:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000c36:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000c3a:	2bc7      	cmp	r3, #199	; 0xc7
 8000c3c:	d9a9      	bls.n	8000b92 <main+0x22>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)IV, 200);
 8000c3e:	463a      	mov	r2, r7
 8000c40:	23c8      	movs	r3, #200	; 0xc8
 8000c42:	2100      	movs	r1, #0
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <main+0xe8>)
 8000c46:	f001 fd91 	bl	800276c <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <main+0xda>
 8000c4c:	f3af 8000 	nop.w
 8000c50:	42c60000 	.word	0x42c60000
 8000c54:	42c80000 	.word	0x42c80000
 8000c58:	20000088 	.word	0x20000088
 8000c5c:	cccccccd 	.word	0xcccccccd
 8000c60:	3ffccccc 	.word	0x3ffccccc
 8000c64:	a50de270 	.word	0xa50de270
 8000c68:	3f91df45 	.word	0x3f91df45

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fc58 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <SystemClock_Config+0xcc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <SystemClock_Config+0xcc>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <SystemClock_Config+0xcc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ce0:	23a8      	movs	r3, #168	; 0xa8
 8000ce2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 f8ab 	bl	8001e4c <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cfc:	f000 f8ea 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fb0c 	bl	800233c <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d2a:	f000 f8d3 	bl	8000ed4 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3750      	adds	r7, #80	; 0x50
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40007000 	.word	0x40007000

08000d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b092      	sub	sp, #72	; 0x48
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 fbe0 	bl	8003530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d72:	4a33      	ldr	r2, [pc, #204]	; (8000e40 <MX_TIM1_Init+0x100>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000d76:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d78:	22a7      	movs	r2, #167	; 0xa7
 8000d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d84:	22c7      	movs	r2, #199	; 0xc7
 8000d86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000d9c:	f001 fc96 	bl	80026cc <HAL_TIM_PWM_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f000 f895 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000dba:	f002 fac7 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000dc4:	f000 f886 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000dee:	f001 fe85 	bl	8002afc <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000df8:	f000 f86c 	bl	8000ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000e20:	f002 fb10 	bl	8003444 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000e2a:	f000 f853 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <MX_TIM1_Init+0xfc>)
 8000e30:	f000 f8d2 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000e34:	bf00      	nop
 8000e36:	3748      	adds	r7, #72	; 0x48
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000088 	.word	0x20000088
 8000e40:	40010000 	.word	0x40010000

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_DMA_Init+0x3c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <MX_DMA_Init+0x3c>)
 8000e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_DMA_Init+0x3c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2039      	movs	r0, #57	; 0x39
 8000e6c:	f000 faab 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e70:	2039      	movs	r0, #57	; 0x39
 8000e72:	f000 fac4 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_GPIO_Init+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 fa46 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x98>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d13e      	bne.n	8000fc0 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_TIM_PWM_MspInit+0x9c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <HAL_TIM_PWM_MspInit+0x9c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_TIM_PWM_MspInit+0x9c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <HAL_TIM_PWM_MspInit+0xa4>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f66:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000fa6:	f000 fa45 	bl	8001434 <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000fb0:	f7ff ff90 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_TIM_PWM_MspInit+0xa0>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	40026428 	.word	0x40026428

08000fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_TIM_MspPostInit+0x68>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d11e      	bne.n	8001038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_TIM_MspPostInit+0x6c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_TIM_MspPostInit+0x70>)
 8001034:	f000 fd6e 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010000 	.word	0x40010000
 8001044:	40023800 	.word	0x40023800
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f89a 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA2_Stream1_IRQHandler+0x10>)
 80010a6:	f000 facb 	bl	8001640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000028 	.word	0x20000028

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001102:	f7ff ffd7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 f9ef 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fd31 	bl	8000b70 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800111c:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8001120:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001124:	200000d4 	.word	0x200000d4

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f92b 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff febe 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f943 	bl	800141a <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f90b 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	200000d0 	.word	0x200000d0

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200000d0 	.word	0x200000d0

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff3e 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff feda 	bl	80011f8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e099      	b.n	8001584 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001470:	e00f      	b.n	8001492 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001472:	f7ff fec1 	bl	80011f8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b05      	cmp	r3, #5
 800147e:	d908      	bls.n	8001492 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2220      	movs	r2, #32
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e078      	b.n	8001584 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e8      	bne.n	8001472 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <HAL_DMA_Init+0x158>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d107      	bne.n	80014fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4313      	orrs	r3, r2
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f023 0307 	bic.w	r3, r3, #7
 8001512:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2b04      	cmp	r3, #4
 8001524:	d117      	bne.n	8001556 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00e      	beq.n	8001556 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fa6f 	bl	8001a1c <DMA_CheckFifoParam>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001552:	2301      	movs	r3, #1
 8001554:	e016      	b.n	8001584 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fa26 	bl	80019b0 <DMA_CalcBaseAndBitshift>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	223f      	movs	r2, #63	; 0x3f
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	f010803f 	.word	0xf010803f

08001590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Start_IT+0x26>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e040      	b.n	8001638 <HAL_DMA_Start_IT+0xa8>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d12f      	bne.n	800162a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 f9b8 	bl	8001954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	223f      	movs	r2, #63	; 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0216 	orr.w	r2, r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0208 	orr.w	r2, r2, #8
 8001616:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e005      	b.n	8001636 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_DMA_IRQHandler+0x258>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a92      	ldr	r2, [pc, #584]	; (800189c <HAL_DMA_IRQHandler+0x25c>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2208      	movs	r2, #8
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01a      	beq.n	80016ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2208      	movs	r2, #8
 800169a:	409a      	lsls	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d012      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2201      	movs	r2, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2204      	movs	r2, #4
 80016e8:	409a      	lsls	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d012      	beq.n	8001718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2204      	movs	r2, #4
 8001706:	409a      	lsls	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f043 0204 	orr.w	r2, r3, #4
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2210      	movs	r2, #16
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d043      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03c      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2210      	movs	r2, #16
 800173c:	409a      	lsls	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d018      	beq.n	8001782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d024      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
 800176e:	e01f      	b.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
 8001780:	e016      	b.n	80017b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0208 	bic.w	r2, r2, #8
 800179e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2220      	movs	r2, #32
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 808e 	beq.w	80018de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8086 	beq.w	80018de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2220      	movs	r2, #32
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d136      	bne.n	8001858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0216 	bic.w	r2, r2, #22
 80017f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_DMA_IRQHandler+0x1da>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0208 	bic.w	r2, r2, #8
 8001828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07d      	beq.n	800194a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
        }
        return;
 8001856:	e078      	b.n	800194a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01c      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	2b00      	cmp	r3, #0
 800187a:	d030      	beq.n	80018de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
 8001884:	e02b      	b.n	80018de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d027      	beq.n	80018de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
 8001896:	e022      	b.n	80018de <HAL_DMA_IRQHandler+0x29e>
 8001898:	20000000 	.word	0x20000000
 800189c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10f      	bne.n	80018ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0210 	bic.w	r2, r2, #16
 80018bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d032      	beq.n	800194c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d022      	beq.n	8001938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2205      	movs	r2, #5
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0201 	bic.w	r2, r2, #1
 8001908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3301      	adds	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	d307      	bcc.n	8001926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f2      	bne.n	800190a <HAL_DMA_IRQHandler+0x2ca>
 8001924:	e000      	b.n	8001928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001926:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
 8001948:	e000      	b.n	800194c <HAL_DMA_IRQHandler+0x30c>
        return;
 800194a:	bf00      	nop
    }
  }
}
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop

08001954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	d108      	bne.n	8001994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001992:	e007      	b.n	80019a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3b10      	subs	r3, #16
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <DMA_CalcBaseAndBitshift+0x64>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <DMA_CalcBaseAndBitshift+0x68>)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d909      	bls.n	80019f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e6:	f023 0303 	bic.w	r3, r3, #3
 80019ea:	1d1a      	adds	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	659a      	str	r2, [r3, #88]	; 0x58
 80019f0:	e007      	b.n	8001a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	aaaaaaab 	.word	0xaaaaaaab
 8001a18:	08004158 	.word	0x08004158

08001a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11f      	bne.n	8001a76 <DMA_CheckFifoParam+0x5a>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d856      	bhi.n	8001aea <DMA_CheckFifoParam+0xce>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <DMA_CheckFifoParam+0x28>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a67 	.word	0x08001a67
 8001a4c:	08001a55 	.word	0x08001a55
 8001a50:	08001aeb 	.word	0x08001aeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d046      	beq.n	8001aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a64:	e043      	b.n	8001aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a6e:	d140      	bne.n	8001af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a74:	e03d      	b.n	8001af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7e:	d121      	bne.n	8001ac4 <DMA_CheckFifoParam+0xa8>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d837      	bhi.n	8001af6 <DMA_CheckFifoParam+0xda>
 8001a86:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <DMA_CheckFifoParam+0x70>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001aa3 	.word	0x08001aa3
 8001a94:	08001a9d 	.word	0x08001a9d
 8001a98:	08001ab5 	.word	0x08001ab5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa0:	e030      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d025      	beq.n	8001afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab2:	e022      	b.n	8001afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001abc:	d11f      	bne.n	8001afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ac2:	e01c      	b.n	8001afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d903      	bls.n	8001ad2 <DMA_CheckFifoParam+0xb6>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d003      	beq.n	8001ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ad0:	e018      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad6:	e015      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae8:	e00b      	b.n	8001b02 <DMA_CheckFifoParam+0xe6>
      break;
 8001aea:	bf00      	nop
 8001aec:	e00a      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;
 8001aee:	bf00      	nop
 8001af0:	e008      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
 8001af4:	e006      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;
 8001af6:	bf00      	nop
 8001af8:	e004      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;
 8001afa:	bf00      	nop
 8001afc:	e002      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001afe:	bf00      	nop
 8001b00:	e000      	b.n	8001b04 <DMA_CheckFifoParam+0xe8>
      break;
 8001b02:	bf00      	nop
    }
  } 
  
  return status; 
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e16b      	b.n	8001e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 815a 	bne.w	8001e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d005      	beq.n	8001b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d130      	bne.n	8001bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 0201 	and.w	r2, r3, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d017      	beq.n	8001c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80b4 	beq.w	8001e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x314>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d02b      	beq.n	8001d3a <HAL_GPIO_Init+0x226>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x318>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_Init+0x222>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x31c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x21e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x21a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	; (8001e38 <HAL_GPIO_Init+0x324>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x216>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_GPIO_Init+0x328>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_GPIO_Init+0x32c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x20e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	; (8001e44 <HAL_GPIO_Init+0x330>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x20a>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e00e      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d1e:	2308      	movs	r3, #8
 8001d20:	e00c      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d22:	2306      	movs	r3, #6
 8001d24:	e00a      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d26:	2305      	movs	r3, #5
 8001d28:	e008      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e004      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e002      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x228>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4093      	lsls	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4c:	4935      	ldr	r1, [pc, #212]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7e:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_GPIO_Init+0x334>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f67f ae90 	bls.w	8001b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40021800 	.word	0x40021800
 8001e44:	40021c00 	.word	0x40021c00
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e264      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e23f      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b91      	ldr	r3, [pc, #580]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a90      	ldr	r2, [pc, #576]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a8a      	ldr	r2, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a83      	ldr	r2, [pc, #524]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff f978 	bl	80011f8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f974 	bl	80011f8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e204      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f964 	bl	80011f8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f960 	bl	80011f8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1f0      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1c4      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4952      	ldr	r1, [pc, #328]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f919 	bl	80011f8 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f915 	bl	80011f8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1a5      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4940      	ldr	r1, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x2b0>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f8f8 	bl	80011f8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff f8f4 	bl	80011f8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e184      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d030      	beq.n	8002098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f8d8 	bl	80011f8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff f8d4 	bl	80011f8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e164      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
 800206a:	e015      	b.n	8002098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x2b4>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff f8c1 	bl	80011f8 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f8bd 	bl	80011f8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e14d      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_RCC_OscConfig+0x2b8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff f883 	bl	80011f8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e011      	b.n	800211a <HAL_RCC_OscConfig+0x2ce>
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
 8002104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7ff f876 	bl	80011f8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e106      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b85      	ldr	r3, [pc, #532]	; (8002330 <HAL_RCC_OscConfig+0x4e4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x2f0>
 800212e:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a80      	ldr	r2, [pc, #512]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002144:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a7a      	ldr	r2, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x32a>
 800215e:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a74      	ldr	r2, [pc, #464]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff f83b 	bl	80011f8 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f837 	bl	80011f8 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0c5      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b65      	ldr	r3, [pc, #404]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x33a>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7ff f825 	bl	80011f8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f821 	bl	80011f8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0af      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b56      	ldr	r3, [pc, #344]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a55      	ldr	r2, [pc, #340]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 809b 	beq.w	8002326 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d05c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d141      	bne.n	8002288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x4ec>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fff5 	bl	80011f8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fff1 	bl	80011f8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e081      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	019b      	lsls	r3, r3, #6
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	4937      	ldr	r1, [pc, #220]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <HAL_RCC_OscConfig+0x4ec>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ffca 	bl	80011f8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe ffc6 	bl	80011f8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e056      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x41c>
 8002286:	e04e      	b.n	8002326 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0x4ec>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ffb3 	bl	80011f8 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe ffaf 	bl	80011f8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03f      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x44a>
 80022b4:	e037      	b.n	8002326 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e032      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d028      	beq.n	8002322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d121      	bne.n	8002322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d11a      	bne.n	8002322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d107      	bne.n	8002322 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40007000 	.word	0x40007000
 8002334:	40023800 	.word	0x40023800
 8002338:	42470060 	.word	0x42470060

0800233c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0cc      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d90c      	bls.n	8002378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d044      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d119      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e067      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4934      	ldr	r1, [pc, #208]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7fe fee4 	bl	80011f8 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7fe fee0 	bl	80011f8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e04f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d20c      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fe44 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08004148 	.word	0x08004148
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d00d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 800252c:	2b08      	cmp	r3, #8
 800252e:	f200 80bd 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3a>
 800253a:	e0b7      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800253e:	60bb      	str	r3, [r7, #8]
       break;
 8002540:	e0b7      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002544:	60bb      	str	r3, [r7, #8]
      break;
 8002546:	e0b4      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002550:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002552:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d04d      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	461a      	mov	r2, r3
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	ea02 0800 	and.w	r8, r2, r0
 8002576:	ea03 0901 	and.w	r9, r3, r1
 800257a:	4640      	mov	r0, r8
 800257c:	4649      	mov	r1, r9
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	014b      	lsls	r3, r1, #5
 8002588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800258c:	0142      	lsls	r2, r0, #5
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	ebb0 0008 	subs.w	r0, r0, r8
 8002596:	eb61 0109 	sbc.w	r1, r1, r9
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	018b      	lsls	r3, r1, #6
 80025a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025a8:	0182      	lsls	r2, r0, #6
 80025aa:	1a12      	subs	r2, r2, r0
 80025ac:	eb63 0301 	sbc.w	r3, r3, r1
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	00d9      	lsls	r1, r3, #3
 80025ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025be:	00d0      	lsls	r0, r2, #3
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	eb12 0208 	adds.w	r2, r2, r8
 80025c8:	eb43 0309 	adc.w	r3, r3, r9
 80025cc:	f04f 0000 	mov.w	r0, #0
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	0259      	lsls	r1, r3, #9
 80025d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025da:	0250      	lsls	r0, r2, #9
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f7fe f942 	bl	8000874 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4613      	mov	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e04a      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	461a      	mov	r2, r3
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f240 10ff 	movw	r0, #511	; 0x1ff
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	ea02 0400 	and.w	r4, r2, r0
 8002612:	ea03 0501 	and.w	r5, r3, r1
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	014b      	lsls	r3, r1, #5
 8002624:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002628:	0142      	lsls	r2, r0, #5
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	1b00      	subs	r0, r0, r4
 8002630:	eb61 0105 	sbc.w	r1, r1, r5
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	018b      	lsls	r3, r1, #6
 800263e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002642:	0182      	lsls	r2, r0, #6
 8002644:	1a12      	subs	r2, r2, r0
 8002646:	eb63 0301 	sbc.w	r3, r3, r1
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	00d9      	lsls	r1, r3, #3
 8002654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002658:	00d0      	lsls	r0, r2, #3
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	1912      	adds	r2, r2, r4
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	f04f 0000 	mov.w	r0, #0
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	0299      	lsls	r1, r3, #10
 800266e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002672:	0290      	lsls	r0, r2, #10
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f7fe f8f6 	bl	8000874 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	3301      	adds	r3, #1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	60bb      	str	r3, [r7, #8]
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026ae:	60bb      	str	r3, [r7, #8]
      break;
 80026b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b2:	68bb      	ldr	r3, [r7, #8]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e041      	b.n	8002762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fc1c 	bl	8000f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 fba8 	bl	8002e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e022      	b.n	80027de <HAL_TIM_PWM_Start_DMA+0x72>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b04      	cmp	r3, #4
 800279c:	d109      	bne.n	80027b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e015      	b.n	80027de <HAL_TIM_PWM_Start_DMA+0x72>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start_DMA+0x60>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e008      	b.n	80027de <HAL_TIM_PWM_Start_DMA+0x72>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e171      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_TIM_PWM_Start_DMA+0x94>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e022      	b.n	8002846 <HAL_TIM_PWM_Start_DMA+0xda>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d109      	bne.n	800281a <HAL_TIM_PWM_Start_DMA+0xae>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e015      	b.n	8002846 <HAL_TIM_PWM_Start_DMA+0xda>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d109      	bne.n	8002834 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e008      	b.n	8002846 <HAL_TIM_PWM_Start_DMA+0xda>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d024      	beq.n	8002894 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start_DMA+0xee>
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e137      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002868:	e016      	b.n	8002898 <HAL_TIM_PWM_Start_DMA+0x12c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	e00e      	b.n	8002898 <HAL_TIM_PWM_Start_DMA+0x12c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d104      	bne.n	800288a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	e006      	b.n	8002898 <HAL_TIM_PWM_Start_DMA+0x12c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002892:	e001      	b.n	8002898 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e118      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	f200 80ae 	bhi.w	80029fc <HAL_TIM_PWM_Start_DMA+0x290>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080029fd 	.word	0x080029fd
 80028b0:	080029fd 	.word	0x080029fd
 80028b4:	080029fd 	.word	0x080029fd
 80028b8:	08002925 	.word	0x08002925
 80028bc:	080029fd 	.word	0x080029fd
 80028c0:	080029fd 	.word	0x080029fd
 80028c4:	080029fd 	.word	0x080029fd
 80028c8:	0800296d 	.word	0x0800296d
 80028cc:	080029fd 	.word	0x080029fd
 80028d0:	080029fd 	.word	0x080029fd
 80028d4:	080029fd 	.word	0x080029fd
 80028d8:	080029b5 	.word	0x080029b5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	4a7c      	ldr	r2, [pc, #496]	; (8002ad4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_TIM_PWM_Start_DMA+0x370>)
 80028f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3334      	adds	r3, #52	; 0x34
 8002900:	461a      	mov	r2, r3
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	f7fe fe44 	bl	8001590 <HAL_DMA_Start_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0db      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002920:	60da      	str	r2, [r3, #12]
      break;
 8002922:	e06e      	b.n	8002a02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800292a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	4a68      	ldr	r2, [pc, #416]	; (8002adc <HAL_TIM_PWM_Start_DMA+0x370>)
 800293a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3338      	adds	r3, #56	; 0x38
 8002948:	461a      	mov	r2, r3
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	f7fe fe20 	bl	8001590 <HAL_DMA_Start_IT>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0b7      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002968:	60da      	str	r2, [r3, #12]
      break;
 800296a:	e04a      	b.n	8002a02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800297a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_TIM_PWM_Start_DMA+0x370>)
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	461a      	mov	r2, r3
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	f7fe fdfc 	bl	8001590 <HAL_DMA_Start_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e093      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b0:	60da      	str	r2, [r3, #12]
      break;
 80029b2:	e026      	b.n	8002a02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a46      	ldr	r2, [pc, #280]	; (8002ad4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a45      	ldr	r2, [pc, #276]	; (8002ad8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a44      	ldr	r2, [pc, #272]	; (8002adc <HAL_TIM_PWM_Start_DMA+0x370>)
 80029ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3340      	adds	r3, #64	; 0x40
 80029d8:	461a      	mov	r2, r3
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	f7fe fdd8 	bl	8001590 <HAL_DMA_Start_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06f      	b.n	8002aca <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029f8:	60da      	str	r2, [r3, #12]
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002a00:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d15f      	bne.n	8002ac8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fc75 	bl	8003300 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIM_PWM_Start_DMA+0x2be>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2f      	ldr	r2, [pc, #188]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a56:	d01d      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_TIM_PWM_Start_DMA+0x380>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_TIM_PWM_Start_DMA+0x328>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d010      	beq.n	8002ac8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	e007      	b.n	8002ac8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08002d4f 	.word	0x08002d4f
 8002ad8:	08002df7 	.word	0x08002df7
 8002adc:	08002cbd 	.word	0x08002cbd
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40010400 	.word	0x40010400
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800
 8002af0:	40000c00 	.word	0x40000c00
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40001800 	.word	0x40001800

08002afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0ae      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f200 809f 	bhi.w	8002c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002c69 	.word	0x08002c69
 8002b38:	08002c69 	.word	0x08002c69
 8002b3c:	08002c69 	.word	0x08002c69
 8002b40:	08002ba5 	.word	0x08002ba5
 8002b44:	08002c69 	.word	0x08002c69
 8002b48:	08002c69 	.word	0x08002c69
 8002b4c:	08002c69 	.word	0x08002c69
 8002b50:	08002be7 	.word	0x08002be7
 8002b54:	08002c69 	.word	0x08002c69
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	08002c69 	.word	0x08002c69
 8002b60:	08002c27 	.word	0x08002c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fa18 	bl	8002fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	619a      	str	r2, [r3, #24]
      break;
 8002ba2:	e064      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fa68 	bl	8003080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
      break;
 8002be4:	e043      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fabd 	bl	800316c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0204 	bic.w	r2, r2, #4
 8002c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      break;
 8002c24:	e023      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fb11 	bl	8003254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d107      	bne.n	8002ce4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce2:	e02a      	b.n	8002d3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d107      	bne.n	8002cfe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	e01d      	b.n	8002d3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d16:	e010      	b.n	8002d3a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d107      	bne.n	8002d32 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2208      	movs	r2, #8
 8002d26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d30:	e003      	b.n	8002d3a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ffb4 	bl	8002ca8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	771a      	strb	r2, [r3, #28]
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10b      	bne.n	8002d7e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d136      	bne.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d7c:	e031      	b.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d10b      	bne.n	8002da0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d125      	bne.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d9e:	e020      	b.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10b      	bne.n	8002dc2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2204      	movs	r2, #4
 8002dae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d114      	bne.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	e00f      	b.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d10a      	bne.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2208      	movs	r2, #8
 8002dd0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff ff4c 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	771a      	strb	r2, [r3, #28]
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d103      	bne.n	8002e16 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	771a      	strb	r2, [r3, #28]
 8002e14:	e019      	b.n	8002e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d103      	bne.n	8002e28 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2202      	movs	r2, #2
 8002e24:	771a      	strb	r2, [r3, #28]
 8002e26:	e010      	b.n	8002e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d103      	bne.n	8002e3a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2204      	movs	r2, #4
 8002e36:	771a      	strb	r2, [r3, #28]
 8002e38:	e007      	b.n	8002e4a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d102      	bne.n	8002e4a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2208      	movs	r2, #8
 8002e48:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff ff22 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	771a      	strb	r2, [r3, #28]
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7e:	d00f      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3d      	ldr	r2, [pc, #244]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00b      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <TIM_Base_SetConfig+0x11c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3b      	ldr	r2, [pc, #236]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d027      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <TIM_Base_SetConfig+0x118>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d023      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <TIM_Base_SetConfig+0x11c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	; (8002f80 <TIM_Base_SetConfig+0x120>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d017      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <TIM_Base_SetConfig+0x128>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <TIM_Base_SetConfig+0x12c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <TIM_Base_SetConfig+0x130>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <TIM_Base_SetConfig+0x134>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <TIM_Base_SetConfig+0x138>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <TIM_Base_SetConfig+0x13c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <TIM_Base_SetConfig+0x114>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_Base_SetConfig+0xf8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <TIM_Base_SetConfig+0x124>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	615a      	str	r2, [r3, #20]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40010400 	.word	0x40010400
 8002f88:	40014000 	.word	0x40014000
 8002f8c:	40014400 	.word	0x40014400
 8002f90:	40014800 	.word	0x40014800
 8002f94:	40001800 	.word	0x40001800
 8002f98:	40001c00 	.word	0x40001c00
 8002f9c:	40002000 	.word	0x40002000

08002fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 0302 	bic.w	r3, r3, #2
 8002fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <TIM_OC1_SetConfig+0xd8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_OC1_SetConfig+0x64>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <TIM_OC1_SetConfig+0xdc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10c      	bne.n	800301e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0308 	bic.w	r3, r3, #8
 800300a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <TIM_OC1_SetConfig+0xd8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_OC1_SetConfig+0x8e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <TIM_OC1_SetConfig+0xdc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d111      	bne.n	8003052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	621a      	str	r2, [r3, #32]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40010000 	.word	0x40010000
 800307c:	40010400 	.word	0x40010400

08003080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0210 	bic.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0320 	bic.w	r3, r3, #32
 80030ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a22      	ldr	r2, [pc, #136]	; (8003164 <TIM_OC2_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x68>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <TIM_OC2_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10d      	bne.n	8003104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <TIM_OC2_SetConfig+0xe4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_OC2_SetConfig+0x94>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a16      	ldr	r2, [pc, #88]	; (8003168 <TIM_OC2_SetConfig+0xe8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d113      	bne.n	800313c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40010000 	.word	0x40010000
 8003168:	40010400 	.word	0x40010400

0800316c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a21      	ldr	r2, [pc, #132]	; (800324c <TIM_OC3_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC3_SetConfig+0x66>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <TIM_OC3_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10d      	bne.n	80031ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a16      	ldr	r2, [pc, #88]	; (800324c <TIM_OC3_SetConfig+0xe0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_OC3_SetConfig+0x92>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a15      	ldr	r2, [pc, #84]	; (8003250 <TIM_OC3_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d113      	bne.n	8003226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40010000 	.word	0x40010000
 8003250:	40010400 	.word	0x40010400

08003254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <TIM_OC4_SetConfig+0xa4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_OC4_SetConfig+0x68>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <TIM_OC4_SetConfig+0xa8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d109      	bne.n	80032d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40010400 	.word	0x40010400

08003300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2201      	movs	r2, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1a      	ldr	r2, [r3, #32]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	431a      	orrs	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e05a      	b.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d01d      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10c      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40000c00 	.word	0x40000c00
 8003438:	40010400 	.word	0x40010400
 800343c:	40014000 	.word	0x40014000
 8003440:	40001800 	.word	0x40001800

08003444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e03d      	b.n	80034dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f000 fe16 	bl	800412c <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08004548 	.word	0x08004548
 8003524:	08004548 	.word	0x08004548
 8003528:	08004548 	.word	0x08004548
 800352c:	0800454c 	.word	0x0800454c

08003530 <memset>:
 8003530:	4402      	add	r2, r0
 8003532:	4603      	mov	r3, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <rint>:
 8003540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003542:	ec51 0b10 	vmov	r0, r1, d0
 8003546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800354a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800354e:	2e13      	cmp	r6, #19
 8003550:	ee10 4a10 	vmov	r4, s0
 8003554:	460b      	mov	r3, r1
 8003556:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800355a:	dc58      	bgt.n	800360e <rint+0xce>
 800355c:	2e00      	cmp	r6, #0
 800355e:	da2b      	bge.n	80035b8 <rint+0x78>
 8003560:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003564:	4302      	orrs	r2, r0
 8003566:	d023      	beq.n	80035b0 <rint+0x70>
 8003568:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800356c:	4302      	orrs	r2, r0
 800356e:	4254      	negs	r4, r2
 8003570:	4314      	orrs	r4, r2
 8003572:	0c4b      	lsrs	r3, r1, #17
 8003574:	0b24      	lsrs	r4, r4, #12
 8003576:	045b      	lsls	r3, r3, #17
 8003578:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800357c:	ea44 0103 	orr.w	r1, r4, r3
 8003580:	4b32      	ldr	r3, [pc, #200]	; (800364c <rint+0x10c>)
 8003582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003586:	e9d3 6700 	ldrd	r6, r7, [r3]
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4630      	mov	r0, r6
 8003590:	4639      	mov	r1, r7
 8003592:	f7fc ff49 	bl	8000428 <__adddf3>
 8003596:	e9cd 0100 	strd	r0, r1, [sp]
 800359a:	463b      	mov	r3, r7
 800359c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035a0:	4632      	mov	r2, r6
 80035a2:	f7fc ff3f 	bl	8000424 <__aeabi_dsub>
 80035a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80035aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80035ae:	4639      	mov	r1, r7
 80035b0:	ec41 0b10 	vmov	d0, r0, r1
 80035b4:	b003      	add	sp, #12
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <rint+0x110>)
 80035ba:	4132      	asrs	r2, r6
 80035bc:	ea01 0702 	and.w	r7, r1, r2
 80035c0:	4307      	orrs	r7, r0
 80035c2:	d0f5      	beq.n	80035b0 <rint+0x70>
 80035c4:	0851      	lsrs	r1, r2, #1
 80035c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80035ca:	4314      	orrs	r4, r2
 80035cc:	d00c      	beq.n	80035e8 <rint+0xa8>
 80035ce:	ea23 0201 	bic.w	r2, r3, r1
 80035d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035d6:	2e13      	cmp	r6, #19
 80035d8:	fa43 f606 	asr.w	r6, r3, r6
 80035dc:	bf0c      	ite	eq
 80035de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80035e2:	2400      	movne	r4, #0
 80035e4:	ea42 0306 	orr.w	r3, r2, r6
 80035e8:	4918      	ldr	r1, [pc, #96]	; (800364c <rint+0x10c>)
 80035ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80035ee:	4622      	mov	r2, r4
 80035f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc ff16 	bl	8000428 <__adddf3>
 80035fc:	e9cd 0100 	strd	r0, r1, [sp]
 8003600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003604:	4622      	mov	r2, r4
 8003606:	462b      	mov	r3, r5
 8003608:	f7fc ff0c 	bl	8000424 <__aeabi_dsub>
 800360c:	e7d0      	b.n	80035b0 <rint+0x70>
 800360e:	2e33      	cmp	r6, #51	; 0x33
 8003610:	dd07      	ble.n	8003622 <rint+0xe2>
 8003612:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003616:	d1cb      	bne.n	80035b0 <rint+0x70>
 8003618:	ee10 2a10 	vmov	r2, s0
 800361c:	f7fc ff04 	bl	8000428 <__adddf3>
 8003620:	e7c6      	b.n	80035b0 <rint+0x70>
 8003622:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003626:	f04f 36ff 	mov.w	r6, #4294967295
 800362a:	40d6      	lsrs	r6, r2
 800362c:	4230      	tst	r0, r6
 800362e:	d0bf      	beq.n	80035b0 <rint+0x70>
 8003630:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8003634:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8003638:	bf1f      	itttt	ne
 800363a:	ea24 0101 	bicne.w	r1, r4, r1
 800363e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8003642:	fa44 f202 	asrne.w	r2, r4, r2
 8003646:	ea41 0402 	orrne.w	r4, r1, r2
 800364a:	e7cd      	b.n	80035e8 <rint+0xa8>
 800364c:	08004160 	.word	0x08004160
 8003650:	000fffff 	.word	0x000fffff

08003654 <sinf>:
 8003654:	ee10 3a10 	vmov	r3, s0
 8003658:	b507      	push	{r0, r1, r2, lr}
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <sinf+0x7c>)
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003660:	4293      	cmp	r3, r2
 8003662:	dc05      	bgt.n	8003670 <sinf+0x1c>
 8003664:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80036d4 <sinf+0x80>
 8003668:	2000      	movs	r0, #0
 800366a:	f000 fc5b 	bl	8003f24 <__kernel_sinf>
 800366e:	e004      	b.n	800367a <sinf+0x26>
 8003670:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003674:	db04      	blt.n	8003680 <sinf+0x2c>
 8003676:	ee30 0a40 	vsub.f32	s0, s0, s0
 800367a:	b003      	add	sp, #12
 800367c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003680:	4668      	mov	r0, sp
 8003682:	f000 f829 	bl	80036d8 <__ieee754_rem_pio2f>
 8003686:	f000 0003 	and.w	r0, r0, #3
 800368a:	2801      	cmp	r0, #1
 800368c:	d008      	beq.n	80036a0 <sinf+0x4c>
 800368e:	2802      	cmp	r0, #2
 8003690:	d00d      	beq.n	80036ae <sinf+0x5a>
 8003692:	b9b0      	cbnz	r0, 80036c2 <sinf+0x6e>
 8003694:	eddd 0a01 	vldr	s1, [sp, #4]
 8003698:	ed9d 0a00 	vldr	s0, [sp]
 800369c:	2001      	movs	r0, #1
 800369e:	e7e4      	b.n	800366a <sinf+0x16>
 80036a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80036a4:	ed9d 0a00 	vldr	s0, [sp]
 80036a8:	f000 f952 	bl	8003950 <__kernel_cosf>
 80036ac:	e7e5      	b.n	800367a <sinf+0x26>
 80036ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80036b2:	ed9d 0a00 	vldr	s0, [sp]
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 fc34 	bl	8003f24 <__kernel_sinf>
 80036bc:	eeb1 0a40 	vneg.f32	s0, s0
 80036c0:	e7db      	b.n	800367a <sinf+0x26>
 80036c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80036c6:	ed9d 0a00 	vldr	s0, [sp]
 80036ca:	f000 f941 	bl	8003950 <__kernel_cosf>
 80036ce:	e7f5      	b.n	80036bc <sinf+0x68>
 80036d0:	3f490fd8 	.word	0x3f490fd8
 80036d4:	00000000 	.word	0x00000000

080036d8 <__ieee754_rem_pio2f>:
 80036d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036da:	ee10 6a10 	vmov	r6, s0
 80036de:	4b8e      	ldr	r3, [pc, #568]	; (8003918 <__ieee754_rem_pio2f+0x240>)
 80036e0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80036e4:	429d      	cmp	r5, r3
 80036e6:	b087      	sub	sp, #28
 80036e8:	eef0 7a40 	vmov.f32	s15, s0
 80036ec:	4604      	mov	r4, r0
 80036ee:	dc05      	bgt.n	80036fc <__ieee754_rem_pio2f+0x24>
 80036f0:	2300      	movs	r3, #0
 80036f2:	ed80 0a00 	vstr	s0, [r0]
 80036f6:	6043      	str	r3, [r0, #4]
 80036f8:	2000      	movs	r0, #0
 80036fa:	e01a      	b.n	8003732 <__ieee754_rem_pio2f+0x5a>
 80036fc:	4b87      	ldr	r3, [pc, #540]	; (800391c <__ieee754_rem_pio2f+0x244>)
 80036fe:	429d      	cmp	r5, r3
 8003700:	dc46      	bgt.n	8003790 <__ieee754_rem_pio2f+0xb8>
 8003702:	2e00      	cmp	r6, #0
 8003704:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8003920 <__ieee754_rem_pio2f+0x248>
 8003708:	4b86      	ldr	r3, [pc, #536]	; (8003924 <__ieee754_rem_pio2f+0x24c>)
 800370a:	f025 050f 	bic.w	r5, r5, #15
 800370e:	dd1f      	ble.n	8003750 <__ieee754_rem_pio2f+0x78>
 8003710:	429d      	cmp	r5, r3
 8003712:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003716:	d00e      	beq.n	8003736 <__ieee754_rem_pio2f+0x5e>
 8003718:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003928 <__ieee754_rem_pio2f+0x250>
 800371c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8003720:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003724:	ed80 0a00 	vstr	s0, [r0]
 8003728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800372c:	2001      	movs	r0, #1
 800372e:	edc4 7a01 	vstr	s15, [r4, #4]
 8003732:	b007      	add	sp, #28
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003736:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800392c <__ieee754_rem_pio2f+0x254>
 800373a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003930 <__ieee754_rem_pio2f+0x258>
 800373e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003742:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003746:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800374a:	edc0 6a00 	vstr	s13, [r0]
 800374e:	e7eb      	b.n	8003728 <__ieee754_rem_pio2f+0x50>
 8003750:	429d      	cmp	r5, r3
 8003752:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003756:	d00e      	beq.n	8003776 <__ieee754_rem_pio2f+0x9e>
 8003758:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003928 <__ieee754_rem_pio2f+0x250>
 800375c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8003760:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003764:	ed80 0a00 	vstr	s0, [r0]
 8003768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	edc4 7a01 	vstr	s15, [r4, #4]
 8003774:	e7dd      	b.n	8003732 <__ieee754_rem_pio2f+0x5a>
 8003776:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800392c <__ieee754_rem_pio2f+0x254>
 800377a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003930 <__ieee754_rem_pio2f+0x258>
 800377e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003782:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003786:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800378a:	edc0 6a00 	vstr	s13, [r0]
 800378e:	e7eb      	b.n	8003768 <__ieee754_rem_pio2f+0x90>
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <__ieee754_rem_pio2f+0x25c>)
 8003792:	429d      	cmp	r5, r3
 8003794:	dc72      	bgt.n	800387c <__ieee754_rem_pio2f+0x1a4>
 8003796:	f000 fc0d 	bl	8003fb4 <fabsf>
 800379a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003938 <__ieee754_rem_pio2f+0x260>
 800379e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80037a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80037a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ae:	ee17 0a90 	vmov	r0, s15
 80037b2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003920 <__ieee754_rem_pio2f+0x248>
 80037b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80037ba:	281f      	cmp	r0, #31
 80037bc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003928 <__ieee754_rem_pio2f+0x250>
 80037c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c4:	eeb1 6a47 	vneg.f32	s12, s14
 80037c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80037cc:	ee16 2a90 	vmov	r2, s13
 80037d0:	dc1c      	bgt.n	800380c <__ieee754_rem_pio2f+0x134>
 80037d2:	495a      	ldr	r1, [pc, #360]	; (800393c <__ieee754_rem_pio2f+0x264>)
 80037d4:	1e47      	subs	r7, r0, #1
 80037d6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80037da:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80037de:	428b      	cmp	r3, r1
 80037e0:	d014      	beq.n	800380c <__ieee754_rem_pio2f+0x134>
 80037e2:	6022      	str	r2, [r4, #0]
 80037e4:	ed94 7a00 	vldr	s14, [r4]
 80037e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80037ec:	2e00      	cmp	r6, #0
 80037ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80037f2:	ed84 0a01 	vstr	s0, [r4, #4]
 80037f6:	da9c      	bge.n	8003732 <__ieee754_rem_pio2f+0x5a>
 80037f8:	eeb1 7a47 	vneg.f32	s14, s14
 80037fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003800:	ed84 7a00 	vstr	s14, [r4]
 8003804:	ed84 0a01 	vstr	s0, [r4, #4]
 8003808:	4240      	negs	r0, r0
 800380a:	e792      	b.n	8003732 <__ieee754_rem_pio2f+0x5a>
 800380c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003810:	15eb      	asrs	r3, r5, #23
 8003812:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003816:	2d08      	cmp	r5, #8
 8003818:	dde3      	ble.n	80037e2 <__ieee754_rem_pio2f+0x10a>
 800381a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800392c <__ieee754_rem_pio2f+0x254>
 800381e:	eef0 6a40 	vmov.f32	s13, s0
 8003822:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003826:	ee30 0a66 	vsub.f32	s0, s0, s13
 800382a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800382e:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003930 <__ieee754_rem_pio2f+0x258>
 8003832:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8003836:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800383a:	eef0 7a40 	vmov.f32	s15, s0
 800383e:	ee15 2a90 	vmov	r2, s11
 8003842:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003846:	1a5b      	subs	r3, r3, r1
 8003848:	2b19      	cmp	r3, #25
 800384a:	dc04      	bgt.n	8003856 <__ieee754_rem_pio2f+0x17e>
 800384c:	edc4 5a00 	vstr	s11, [r4]
 8003850:	eeb0 0a66 	vmov.f32	s0, s13
 8003854:	e7c6      	b.n	80037e4 <__ieee754_rem_pio2f+0x10c>
 8003856:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003940 <__ieee754_rem_pio2f+0x268>
 800385a:	eeb0 0a66 	vmov.f32	s0, s13
 800385e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003862:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003866:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003944 <__ieee754_rem_pio2f+0x26c>
 800386a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800386e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003872:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003876:	ed84 7a00 	vstr	s14, [r4]
 800387a:	e7b3      	b.n	80037e4 <__ieee754_rem_pio2f+0x10c>
 800387c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003880:	db06      	blt.n	8003890 <__ieee754_rem_pio2f+0x1b8>
 8003882:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003886:	edc0 7a01 	vstr	s15, [r0, #4]
 800388a:	edc0 7a00 	vstr	s15, [r0]
 800388e:	e733      	b.n	80036f8 <__ieee754_rem_pio2f+0x20>
 8003890:	15ea      	asrs	r2, r5, #23
 8003892:	3a86      	subs	r2, #134	; 0x86
 8003894:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80038a0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003948 <__ieee754_rem_pio2f+0x270>
 80038a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038ac:	ed8d 7a03 	vstr	s14, [sp, #12]
 80038b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80038b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038c0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80038c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	edcd 7a05 	vstr	s15, [sp, #20]
 80038d4:	d11e      	bne.n	8003914 <__ieee754_rem_pio2f+0x23c>
 80038d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	bf14      	ite	ne
 80038e0:	2302      	movne	r3, #2
 80038e2:	2301      	moveq	r3, #1
 80038e4:	4919      	ldr	r1, [pc, #100]	; (800394c <__ieee754_rem_pio2f+0x274>)
 80038e6:	9101      	str	r1, [sp, #4]
 80038e8:	2102      	movs	r1, #2
 80038ea:	9100      	str	r1, [sp, #0]
 80038ec:	a803      	add	r0, sp, #12
 80038ee:	4621      	mov	r1, r4
 80038f0:	f000 f88e 	bl	8003a10 <__kernel_rem_pio2f>
 80038f4:	2e00      	cmp	r6, #0
 80038f6:	f6bf af1c 	bge.w	8003732 <__ieee754_rem_pio2f+0x5a>
 80038fa:	edd4 7a00 	vldr	s15, [r4]
 80038fe:	eef1 7a67 	vneg.f32	s15, s15
 8003902:	edc4 7a00 	vstr	s15, [r4]
 8003906:	edd4 7a01 	vldr	s15, [r4, #4]
 800390a:	eef1 7a67 	vneg.f32	s15, s15
 800390e:	edc4 7a01 	vstr	s15, [r4, #4]
 8003912:	e779      	b.n	8003808 <__ieee754_rem_pio2f+0x130>
 8003914:	2303      	movs	r3, #3
 8003916:	e7e5      	b.n	80038e4 <__ieee754_rem_pio2f+0x20c>
 8003918:	3f490fd8 	.word	0x3f490fd8
 800391c:	4016cbe3 	.word	0x4016cbe3
 8003920:	3fc90f80 	.word	0x3fc90f80
 8003924:	3fc90fd0 	.word	0x3fc90fd0
 8003928:	37354443 	.word	0x37354443
 800392c:	37354400 	.word	0x37354400
 8003930:	2e85a308 	.word	0x2e85a308
 8003934:	43490f80 	.word	0x43490f80
 8003938:	3f22f984 	.word	0x3f22f984
 800393c:	08004170 	.word	0x08004170
 8003940:	2e85a300 	.word	0x2e85a300
 8003944:	248d3132 	.word	0x248d3132
 8003948:	43800000 	.word	0x43800000
 800394c:	080041f0 	.word	0x080041f0

08003950 <__kernel_cosf>:
 8003950:	ee10 3a10 	vmov	r3, s0
 8003954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003958:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800395c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003960:	da05      	bge.n	800396e <__kernel_cosf+0x1e>
 8003962:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003966:	ee17 2a90 	vmov	r2, s15
 800396a:	2a00      	cmp	r2, #0
 800396c:	d03d      	beq.n	80039ea <__kernel_cosf+0x9a>
 800396e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8003972:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80039f0 <__kernel_cosf+0xa0>
 8003976:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80039f4 <__kernel_cosf+0xa4>
 800397a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80039f8 <__kernel_cosf+0xa8>
 800397e:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <__kernel_cosf+0xac>)
 8003980:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003984:	4293      	cmp	r3, r2
 8003986:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003a00 <__kernel_cosf+0xb0>
 800398a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800398e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003a04 <__kernel_cosf+0xb4>
 8003992:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003996:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003a08 <__kernel_cosf+0xb8>
 800399a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800399e:	eeb0 7a66 	vmov.f32	s14, s13
 80039a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80039a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80039aa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80039ae:	ee67 6a25 	vmul.f32	s13, s14, s11
 80039b2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80039b6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80039ba:	dc04      	bgt.n	80039c6 <__kernel_cosf+0x76>
 80039bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80039c0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80039c4:	4770      	bx	lr
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <__kernel_cosf+0xbc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	bfda      	itte	le
 80039cc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80039d0:	ee06 3a90 	vmovle	s13, r3
 80039d4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80039d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80039dc:	ee36 0a66 	vsub.f32	s0, s12, s13
 80039e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80039e8:	4770      	bx	lr
 80039ea:	eeb0 0a46 	vmov.f32	s0, s12
 80039ee:	4770      	bx	lr
 80039f0:	ad47d74e 	.word	0xad47d74e
 80039f4:	310f74f6 	.word	0x310f74f6
 80039f8:	3d2aaaab 	.word	0x3d2aaaab
 80039fc:	3e999999 	.word	0x3e999999
 8003a00:	b493f27c 	.word	0xb493f27c
 8003a04:	37d00d01 	.word	0x37d00d01
 8003a08:	bab60b61 	.word	0xbab60b61
 8003a0c:	3f480000 	.word	0x3f480000

08003a10 <__kernel_rem_pio2f>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	ed2d 8b04 	vpush	{d8-d9}
 8003a18:	b0d7      	sub	sp, #348	; 0x15c
 8003a1a:	4616      	mov	r6, r2
 8003a1c:	4698      	mov	r8, r3
 8003a1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003a20:	4bbb      	ldr	r3, [pc, #748]	; (8003d10 <__kernel_rem_pio2f+0x300>)
 8003a22:	9001      	str	r0, [sp, #4]
 8003a24:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8003a28:	1d33      	adds	r3, r6, #4
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	f108 39ff 	add.w	r9, r8, #4294967295
 8003a30:	db29      	blt.n	8003a86 <__kernel_rem_pio2f+0x76>
 8003a32:	1ef1      	subs	r1, r6, #3
 8003a34:	bf48      	it	mi
 8003a36:	1d31      	addmi	r1, r6, #4
 8003a38:	10c9      	asrs	r1, r1, #3
 8003a3a:	1c4c      	adds	r4, r1, #1
 8003a3c:	00e3      	lsls	r3, r4, #3
 8003a3e:	9302      	str	r3, [sp, #8]
 8003a40:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003a42:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003a46:	eba1 0009 	sub.w	r0, r1, r9
 8003a4a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8003a4e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8003a52:	eb07 0c09 	add.w	ip, r7, r9
 8003a56:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4563      	cmp	r3, ip
 8003a5e:	dd14      	ble.n	8003a8a <__kernel_rem_pio2f+0x7a>
 8003a60:	ab1a      	add	r3, sp, #104	; 0x68
 8003a62:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003a66:	46cc      	mov	ip, r9
 8003a68:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8003a6c:	f1c8 0b01 	rsb	fp, r8, #1
 8003a70:	eb0b 020c 	add.w	r2, fp, ip
 8003a74:	4297      	cmp	r7, r2
 8003a76:	db27      	blt.n	8003ac8 <__kernel_rem_pio2f+0xb8>
 8003a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003a7c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003a80:	4618      	mov	r0, r3
 8003a82:	2200      	movs	r2, #0
 8003a84:	e016      	b.n	8003ab4 <__kernel_rem_pio2f+0xa4>
 8003a86:	2100      	movs	r1, #0
 8003a88:	e7d7      	b.n	8003a3a <__kernel_rem_pio2f+0x2a>
 8003a8a:	42d8      	cmn	r0, r3
 8003a8c:	bf5d      	ittte	pl
 8003a8e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8003a92:	ee07 2a90 	vmovpl	s15, r2
 8003a96:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003a9a:	eef0 7a47 	vmovmi.f32	s15, s14
 8003a9e:	ecea 7a01 	vstmia	sl!, {s15}
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	e7da      	b.n	8003a5c <__kernel_rem_pio2f+0x4c>
 8003aa6:	ecfe 6a01 	vldmia	lr!, {s13}
 8003aaa:	ed90 7a00 	vldr	s14, [r0]
 8003aae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ab2:	3201      	adds	r2, #1
 8003ab4:	454a      	cmp	r2, r9
 8003ab6:	f1a0 0004 	sub.w	r0, r0, #4
 8003aba:	ddf4      	ble.n	8003aa6 <__kernel_rem_pio2f+0x96>
 8003abc:	ecea 7a01 	vstmia	sl!, {s15}
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	f10c 0c01 	add.w	ip, ip, #1
 8003ac6:	e7d3      	b.n	8003a70 <__kernel_rem_pio2f+0x60>
 8003ac8:	ab06      	add	r3, sp, #24
 8003aca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003ace:	9304      	str	r3, [sp, #16]
 8003ad0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003ad2:	eddf 8a92 	vldr	s17, [pc, #584]	; 8003d1c <__kernel_rem_pio2f+0x30c>
 8003ad6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8003d18 <__kernel_rem_pio2f+0x308>
 8003ada:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	46ba      	mov	sl, r7
 8003ae2:	ab56      	add	r3, sp, #344	; 0x158
 8003ae4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003ae8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8003aec:	ab06      	add	r3, sp, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	4652      	mov	r2, sl
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	dc51      	bgt.n	8003b9a <__kernel_rem_pio2f+0x18a>
 8003af6:	4620      	mov	r0, r4
 8003af8:	9305      	str	r3, [sp, #20]
 8003afa:	f000 faa5 	bl	8004048 <scalbnf>
 8003afe:	eeb0 8a40 	vmov.f32	s16, s0
 8003b02:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003b06:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003b0a:	f000 fa5b 	bl	8003fc4 <floorf>
 8003b0e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003b12:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	9b05      	ldr	r3, [sp, #20]
 8003b1a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003b1e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003b22:	edcd 7a00 	vstr	s15, [sp]
 8003b26:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003b2a:	dd4b      	ble.n	8003bc4 <__kernel_rem_pio2f+0x1b4>
 8003b2c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003b30:	aa06      	add	r2, sp, #24
 8003b32:	f1c4 0e08 	rsb	lr, r4, #8
 8003b36:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003b3a:	ee17 1a90 	vmov	r1, s15
 8003b3e:	fa42 f00e 	asr.w	r0, r2, lr
 8003b42:	4401      	add	r1, r0
 8003b44:	9100      	str	r1, [sp, #0]
 8003b46:	fa00 f00e 	lsl.w	r0, r0, lr
 8003b4a:	a906      	add	r1, sp, #24
 8003b4c:	1a12      	subs	r2, r2, r0
 8003b4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8003b52:	f1c4 0007 	rsb	r0, r4, #7
 8003b56:	fa42 fb00 	asr.w	fp, r2, r0
 8003b5a:	f1bb 0f00 	cmp.w	fp, #0
 8003b5e:	dd43      	ble.n	8003be8 <__kernel_rem_pio2f+0x1d8>
 8003b60:	9a00      	ldr	r2, [sp, #0]
 8003b62:	f04f 0e00 	mov.w	lr, #0
 8003b66:	3201      	adds	r2, #1
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	4670      	mov	r0, lr
 8003b6c:	45f2      	cmp	sl, lr
 8003b6e:	dc6c      	bgt.n	8003c4a <__kernel_rem_pio2f+0x23a>
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	dd04      	ble.n	8003b7e <__kernel_rem_pio2f+0x16e>
 8003b74:	2c01      	cmp	r4, #1
 8003b76:	d079      	beq.n	8003c6c <__kernel_rem_pio2f+0x25c>
 8003b78:	2c02      	cmp	r4, #2
 8003b7a:	f000 8082 	beq.w	8003c82 <__kernel_rem_pio2f+0x272>
 8003b7e:	f1bb 0f02 	cmp.w	fp, #2
 8003b82:	d131      	bne.n	8003be8 <__kernel_rem_pio2f+0x1d8>
 8003b84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b88:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003b8c:	b360      	cbz	r0, 8003be8 <__kernel_rem_pio2f+0x1d8>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fa5a 	bl	8004048 <scalbnf>
 8003b94:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003b98:	e026      	b.n	8003be8 <__kernel_rem_pio2f+0x1d8>
 8003b9a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	a942      	add	r1, sp, #264	; 0x108
 8003ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003baa:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003bae:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003bb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003bb6:	eca0 0a01 	vstmia	r0!, {s0}
 8003bba:	ed9c 0a00 	vldr	s0, [ip]
 8003bbe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003bc2:	e796      	b.n	8003af2 <__kernel_rem_pio2f+0xe2>
 8003bc4:	d107      	bne.n	8003bd6 <__kernel_rem_pio2f+0x1c6>
 8003bc6:	f10a 32ff 	add.w	r2, sl, #4294967295
 8003bca:	a906      	add	r1, sp, #24
 8003bcc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003bd0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8003bd4:	e7c1      	b.n	8003b5a <__kernel_rem_pio2f+0x14a>
 8003bd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003bda:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	da2f      	bge.n	8003c44 <__kernel_rem_pio2f+0x234>
 8003be4:	f04f 0b00 	mov.w	fp, #0
 8003be8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf0:	f040 8098 	bne.w	8003d24 <__kernel_rem_pio2f+0x314>
 8003bf4:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003bf8:	469c      	mov	ip, r3
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	45bc      	cmp	ip, r7
 8003bfe:	da48      	bge.n	8003c92 <__kernel_rem_pio2f+0x282>
 8003c00:	2a00      	cmp	r2, #0
 8003c02:	d05f      	beq.n	8003cc4 <__kernel_rem_pio2f+0x2b4>
 8003c04:	aa06      	add	r2, sp, #24
 8003c06:	3c08      	subs	r4, #8
 8003c08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d07d      	beq.n	8003d0c <__kernel_rem_pio2f+0x2fc>
 8003c10:	4620      	mov	r0, r4
 8003c12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	f000 fa16 	bl	8004048 <scalbnf>
 8003c1c:	9b01      	ldr	r3, [sp, #4]
 8003c1e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003d1c <__kernel_rem_pio2f+0x30c>
 8003c22:	4619      	mov	r1, r3
 8003c24:	2900      	cmp	r1, #0
 8003c26:	f280 80af 	bge.w	8003d88 <__kernel_rem_pio2f+0x378>
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	2400      	movs	r4, #0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	f2c0 80d0 	blt.w	8003dd4 <__kernel_rem_pio2f+0x3c4>
 8003c34:	a942      	add	r1, sp, #264	; 0x108
 8003c36:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8003c3a:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <__kernel_rem_pio2f+0x304>)
 8003c3c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003c40:	2100      	movs	r1, #0
 8003c42:	e0bb      	b.n	8003dbc <__kernel_rem_pio2f+0x3ac>
 8003c44:	f04f 0b02 	mov.w	fp, #2
 8003c48:	e78a      	b.n	8003b60 <__kernel_rem_pio2f+0x150>
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	b948      	cbnz	r0, 8003c62 <__kernel_rem_pio2f+0x252>
 8003c4e:	b11a      	cbz	r2, 8003c58 <__kernel_rem_pio2f+0x248>
 8003c50:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f10e 0e01 	add.w	lr, lr, #1
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4610      	mov	r0, r2
 8003c60:	e784      	b.n	8003b6c <__kernel_rem_pio2f+0x15c>
 8003c62:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	4602      	mov	r2, r0
 8003c6a:	e7f5      	b.n	8003c58 <__kernel_rem_pio2f+0x248>
 8003c6c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003c70:	ab06      	add	r3, sp, #24
 8003c72:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7a:	aa06      	add	r2, sp, #24
 8003c7c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8003c80:	e77d      	b.n	8003b7e <__kernel_rem_pio2f+0x16e>
 8003c82:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003c86:	ab06      	add	r3, sp, #24
 8003c88:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	e7f3      	b.n	8003c7a <__kernel_rem_pio2f+0x26a>
 8003c92:	a906      	add	r1, sp, #24
 8003c94:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8003c98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c9c:	4302      	orrs	r2, r0
 8003c9e:	e7ad      	b.n	8003bfc <__kernel_rem_pio2f+0x1ec>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d0fa      	beq.n	8003ca0 <__kernel_rem_pio2f+0x290>
 8003caa:	a91a      	add	r1, sp, #104	; 0x68
 8003cac:	eb0a 0208 	add.w	r2, sl, r8
 8003cb0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003cb4:	f10a 0301 	add.w	r3, sl, #1
 8003cb8:	eb0a 0100 	add.w	r1, sl, r0
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	da04      	bge.n	8003cca <__kernel_rem_pio2f+0x2ba>
 8003cc0:	468a      	mov	sl, r1
 8003cc2:	e70e      	b.n	8003ae2 <__kernel_rem_pio2f+0xd2>
 8003cc4:	9b04      	ldr	r3, [sp, #16]
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e7eb      	b.n	8003ca2 <__kernel_rem_pio2f+0x292>
 8003cca:	9803      	ldr	r0, [sp, #12]
 8003ccc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003cd0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003cd4:	9000      	str	r0, [sp, #0]
 8003cd6:	ee07 0a90 	vmov	s15, r0
 8003cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cde:	2000      	movs	r0, #0
 8003ce0:	ece2 7a01 	vstmia	r2!, {s15}
 8003ce4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003ce8:	4696      	mov	lr, r2
 8003cea:	4548      	cmp	r0, r9
 8003cec:	dd06      	ble.n	8003cfc <__kernel_rem_pio2f+0x2ec>
 8003cee:	a842      	add	r0, sp, #264	; 0x108
 8003cf0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003cf4:	edc0 7a00 	vstr	s15, [r0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	e7df      	b.n	8003cbc <__kernel_rem_pio2f+0x2ac>
 8003cfc:	ecfc 6a01 	vldmia	ip!, {s13}
 8003d00:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003d04:	3001      	adds	r0, #1
 8003d06:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003d0a:	e7ee      	b.n	8003cea <__kernel_rem_pio2f+0x2da>
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	e779      	b.n	8003c04 <__kernel_rem_pio2f+0x1f4>
 8003d10:	08004534 	.word	0x08004534
 8003d14:	08004508 	.word	0x08004508
 8003d18:	43800000 	.word	0x43800000
 8003d1c:	3b800000 	.word	0x3b800000
 8003d20:	00000000 	.word	0x00000000
 8003d24:	9b02      	ldr	r3, [sp, #8]
 8003d26:	eeb0 0a48 	vmov.f32	s0, s16
 8003d2a:	1b98      	subs	r0, r3, r6
 8003d2c:	f000 f98c 	bl	8004048 <scalbnf>
 8003d30:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003d18 <__kernel_rem_pio2f+0x308>
 8003d34:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3c:	db1b      	blt.n	8003d76 <__kernel_rem_pio2f+0x366>
 8003d3e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003d1c <__kernel_rem_pio2f+0x30c>
 8003d42:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003d46:	aa06      	add	r2, sp, #24
 8003d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d4c:	a906      	add	r1, sp, #24
 8003d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d52:	3408      	adds	r4, #8
 8003d54:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003d60:	ee10 3a10 	vmov	r3, s0
 8003d64:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8003d68:	ee17 2a90 	vmov	r2, s15
 8003d6c:	f10a 0301 	add.w	r3, sl, #1
 8003d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d74:	e74c      	b.n	8003c10 <__kernel_rem_pio2f+0x200>
 8003d76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003d7a:	aa06      	add	r2, sp, #24
 8003d7c:	ee10 3a10 	vmov	r3, s0
 8003d80:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8003d84:	4653      	mov	r3, sl
 8003d86:	e743      	b.n	8003c10 <__kernel_rem_pio2f+0x200>
 8003d88:	aa42      	add	r2, sp, #264	; 0x108
 8003d8a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003d8e:	aa06      	add	r2, sp, #24
 8003d90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003d94:	9201      	str	r2, [sp, #4]
 8003d96:	ee07 2a90 	vmov	s15, r2
 8003d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9e:	3901      	subs	r1, #1
 8003da0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003da4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003da8:	edc0 7a00 	vstr	s15, [r0]
 8003dac:	e73a      	b.n	8003c24 <__kernel_rem_pio2f+0x214>
 8003dae:	ecf2 6a01 	vldmia	r2!, {s13}
 8003db2:	ecb6 7a01 	vldmia	r6!, {s14}
 8003db6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003dba:	3101      	adds	r1, #1
 8003dbc:	42b9      	cmp	r1, r7
 8003dbe:	dc01      	bgt.n	8003dc4 <__kernel_rem_pio2f+0x3b4>
 8003dc0:	428c      	cmp	r4, r1
 8003dc2:	daf4      	bge.n	8003dae <__kernel_rem_pio2f+0x39e>
 8003dc4:	aa56      	add	r2, sp, #344	; 0x158
 8003dc6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8003dca:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8003dce:	3801      	subs	r0, #1
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	e72c      	b.n	8003c2e <__kernel_rem_pio2f+0x21e>
 8003dd4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003dd6:	2a02      	cmp	r2, #2
 8003dd8:	dc0a      	bgt.n	8003df0 <__kernel_rem_pio2f+0x3e0>
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	dc61      	bgt.n	8003ea2 <__kernel_rem_pio2f+0x492>
 8003dde:	d03c      	beq.n	8003e5a <__kernel_rem_pio2f+0x44a>
 8003de0:	9b00      	ldr	r3, [sp, #0]
 8003de2:	f003 0007 	and.w	r0, r3, #7
 8003de6:	b057      	add	sp, #348	; 0x15c
 8003de8:	ecbd 8b04 	vpop	{d8-d9}
 8003dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003df2:	2a03      	cmp	r2, #3
 8003df4:	d1f4      	bne.n	8003de0 <__kernel_rem_pio2f+0x3d0>
 8003df6:	aa2e      	add	r2, sp, #184	; 0xb8
 8003df8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	461c      	mov	r4, r3
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	f1a0 0004 	sub.w	r0, r0, #4
 8003e06:	dc59      	bgt.n	8003ebc <__kernel_rem_pio2f+0x4ac>
 8003e08:	4618      	mov	r0, r3
 8003e0a:	2801      	cmp	r0, #1
 8003e0c:	f1a1 0104 	sub.w	r1, r1, #4
 8003e10:	dc64      	bgt.n	8003edc <__kernel_rem_pio2f+0x4cc>
 8003e12:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	dc70      	bgt.n	8003efc <__kernel_rem_pio2f+0x4ec>
 8003e1a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003e1e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003e22:	f1bb 0f00 	cmp.w	fp, #0
 8003e26:	d172      	bne.n	8003f0e <__kernel_rem_pio2f+0x4fe>
 8003e28:	edc5 6a00 	vstr	s13, [r5]
 8003e2c:	ed85 7a01 	vstr	s14, [r5, #4]
 8003e30:	edc5 7a02 	vstr	s15, [r5, #8]
 8003e34:	e7d4      	b.n	8003de0 <__kernel_rem_pio2f+0x3d0>
 8003e36:	aa2e      	add	r2, sp, #184	; 0xb8
 8003e38:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003e3c:	ed91 7a00 	vldr	s14, [r1]
 8003e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e44:	3b01      	subs	r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	daf5      	bge.n	8003e36 <__kernel_rem_pio2f+0x426>
 8003e4a:	f1bb 0f00 	cmp.w	fp, #0
 8003e4e:	d001      	beq.n	8003e54 <__kernel_rem_pio2f+0x444>
 8003e50:	eef1 7a67 	vneg.f32	s15, s15
 8003e54:	edc5 7a00 	vstr	s15, [r5]
 8003e58:	e7c2      	b.n	8003de0 <__kernel_rem_pio2f+0x3d0>
 8003e5a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003e5e:	e7f2      	b.n	8003e46 <__kernel_rem_pio2f+0x436>
 8003e60:	aa2e      	add	r2, sp, #184	; 0xb8
 8003e62:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8003e66:	edd0 7a00 	vldr	s15, [r0]
 8003e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e6e:	3901      	subs	r1, #1
 8003e70:	2900      	cmp	r1, #0
 8003e72:	daf5      	bge.n	8003e60 <__kernel_rem_pio2f+0x450>
 8003e74:	f1bb 0f00 	cmp.w	fp, #0
 8003e78:	d017      	beq.n	8003eaa <__kernel_rem_pio2f+0x49a>
 8003e7a:	eef1 7a47 	vneg.f32	s15, s14
 8003e7e:	edc5 7a00 	vstr	s15, [r5]
 8003e82:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e8a:	a82f      	add	r0, sp, #188	; 0xbc
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	428b      	cmp	r3, r1
 8003e90:	da0e      	bge.n	8003eb0 <__kernel_rem_pio2f+0x4a0>
 8003e92:	f1bb 0f00 	cmp.w	fp, #0
 8003e96:	d001      	beq.n	8003e9c <__kernel_rem_pio2f+0x48c>
 8003e98:	eef1 7a67 	vneg.f32	s15, s15
 8003e9c:	edc5 7a01 	vstr	s15, [r5, #4]
 8003ea0:	e79e      	b.n	8003de0 <__kernel_rem_pio2f+0x3d0>
 8003ea2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8003d20 <__kernel_rem_pio2f+0x310>
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	e7e2      	b.n	8003e70 <__kernel_rem_pio2f+0x460>
 8003eaa:	eef0 7a47 	vmov.f32	s15, s14
 8003eae:	e7e6      	b.n	8003e7e <__kernel_rem_pio2f+0x46e>
 8003eb0:	ecb0 7a01 	vldmia	r0!, {s14}
 8003eb4:	3101      	adds	r1, #1
 8003eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eba:	e7e8      	b.n	8003e8e <__kernel_rem_pio2f+0x47e>
 8003ebc:	edd0 7a00 	vldr	s15, [r0]
 8003ec0:	edd0 6a01 	vldr	s13, [r0, #4]
 8003ec4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003ec8:	3c01      	subs	r4, #1
 8003eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ece:	ed80 7a00 	vstr	s14, [r0]
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	edc0 7a01 	vstr	s15, [r0, #4]
 8003eda:	e791      	b.n	8003e00 <__kernel_rem_pio2f+0x3f0>
 8003edc:	edd1 7a00 	vldr	s15, [r1]
 8003ee0:	edd1 6a01 	vldr	s13, [r1, #4]
 8003ee4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003ee8:	3801      	subs	r0, #1
 8003eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eee:	ed81 7a00 	vstr	s14, [r1]
 8003ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef6:	edc1 7a01 	vstr	s15, [r1, #4]
 8003efa:	e786      	b.n	8003e0a <__kernel_rem_pio2f+0x3fa>
 8003efc:	aa2e      	add	r2, sp, #184	; 0xb8
 8003efe:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003f02:	ed91 7a00 	vldr	s14, [r1]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f0c:	e783      	b.n	8003e16 <__kernel_rem_pio2f+0x406>
 8003f0e:	eef1 6a66 	vneg.f32	s13, s13
 8003f12:	eeb1 7a47 	vneg.f32	s14, s14
 8003f16:	edc5 6a00 	vstr	s13, [r5]
 8003f1a:	ed85 7a01 	vstr	s14, [r5, #4]
 8003f1e:	eef1 7a67 	vneg.f32	s15, s15
 8003f22:	e785      	b.n	8003e30 <__kernel_rem_pio2f+0x420>

08003f24 <__kernel_sinf>:
 8003f24:	ee10 3a10 	vmov	r3, s0
 8003f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003f30:	da04      	bge.n	8003f3c <__kernel_sinf+0x18>
 8003f32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003f36:	ee17 3a90 	vmov	r3, s15
 8003f3a:	b35b      	cbz	r3, 8003f94 <__kernel_sinf+0x70>
 8003f3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003f40:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003f98 <__kernel_sinf+0x74>
 8003f44:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003f9c <__kernel_sinf+0x78>
 8003f48:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003f4c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003fa0 <__kernel_sinf+0x7c>
 8003f50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003f54:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003fa4 <__kernel_sinf+0x80>
 8003f58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003f5c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003fa8 <__kernel_sinf+0x84>
 8003f60:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003f64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003f68:	b930      	cbnz	r0, 8003f78 <__kernel_sinf+0x54>
 8003f6a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003fac <__kernel_sinf+0x88>
 8003f6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003f72:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003f76:	4770      	bx	lr
 8003f78:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003f7c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003f80:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003f84:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003f88:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003fb0 <__kernel_sinf+0x8c>
 8003f8c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003f90:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	2f2ec9d3 	.word	0x2f2ec9d3
 8003f9c:	b2d72f34 	.word	0xb2d72f34
 8003fa0:	3638ef1b 	.word	0x3638ef1b
 8003fa4:	b9500d01 	.word	0xb9500d01
 8003fa8:	3c088889 	.word	0x3c088889
 8003fac:	be2aaaab 	.word	0xbe2aaaab
 8003fb0:	3e2aaaab 	.word	0x3e2aaaab

08003fb4 <fabsf>:
 8003fb4:	ee10 3a10 	vmov	r3, s0
 8003fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fbc:	ee00 3a10 	vmov	s0, r3
 8003fc0:	4770      	bx	lr
	...

08003fc4 <floorf>:
 8003fc4:	ee10 3a10 	vmov	r3, s0
 8003fc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003fcc:	3a7f      	subs	r2, #127	; 0x7f
 8003fce:	2a16      	cmp	r2, #22
 8003fd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003fd4:	dc2a      	bgt.n	800402c <floorf+0x68>
 8003fd6:	2a00      	cmp	r2, #0
 8003fd8:	da11      	bge.n	8003ffe <floorf+0x3a>
 8003fda:	eddf 7a18 	vldr	s15, [pc, #96]	; 800403c <floorf+0x78>
 8003fde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003fe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	dd05      	ble.n	8003ff8 <floorf+0x34>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da23      	bge.n	8004038 <floorf+0x74>
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <floorf+0x7c>)
 8003ff2:	2900      	cmp	r1, #0
 8003ff4:	bf18      	it	ne
 8003ff6:	4613      	movne	r3, r2
 8003ff8:	ee00 3a10 	vmov	s0, r3
 8003ffc:	4770      	bx	lr
 8003ffe:	4911      	ldr	r1, [pc, #68]	; (8004044 <floorf+0x80>)
 8004000:	4111      	asrs	r1, r2
 8004002:	420b      	tst	r3, r1
 8004004:	d0fa      	beq.n	8003ffc <floorf+0x38>
 8004006:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800403c <floorf+0x78>
 800400a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800400e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004016:	ddef      	ble.n	8003ff8 <floorf+0x34>
 8004018:	2b00      	cmp	r3, #0
 800401a:	bfbe      	ittt	lt
 800401c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004020:	fa40 f202 	asrlt.w	r2, r0, r2
 8004024:	189b      	addlt	r3, r3, r2
 8004026:	ea23 0301 	bic.w	r3, r3, r1
 800402a:	e7e5      	b.n	8003ff8 <floorf+0x34>
 800402c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004030:	d3e4      	bcc.n	8003ffc <floorf+0x38>
 8004032:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004036:	4770      	bx	lr
 8004038:	2300      	movs	r3, #0
 800403a:	e7dd      	b.n	8003ff8 <floorf+0x34>
 800403c:	7149f2ca 	.word	0x7149f2ca
 8004040:	bf800000 	.word	0xbf800000
 8004044:	007fffff 	.word	0x007fffff

08004048 <scalbnf>:
 8004048:	ee10 3a10 	vmov	r3, s0
 800404c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004050:	d025      	beq.n	800409e <scalbnf+0x56>
 8004052:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004056:	d302      	bcc.n	800405e <scalbnf+0x16>
 8004058:	ee30 0a00 	vadd.f32	s0, s0, s0
 800405c:	4770      	bx	lr
 800405e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004062:	d122      	bne.n	80040aa <scalbnf+0x62>
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <scalbnf+0xc8>)
 8004066:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004114 <scalbnf+0xcc>
 800406a:	4298      	cmp	r0, r3
 800406c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004070:	db16      	blt.n	80040a0 <scalbnf+0x58>
 8004072:	ee10 3a10 	vmov	r3, s0
 8004076:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800407a:	3a19      	subs	r2, #25
 800407c:	4402      	add	r2, r0
 800407e:	2afe      	cmp	r2, #254	; 0xfe
 8004080:	dd15      	ble.n	80040ae <scalbnf+0x66>
 8004082:	ee10 3a10 	vmov	r3, s0
 8004086:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004118 <scalbnf+0xd0>
 800408a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800411c <scalbnf+0xd4>
 800408e:	2b00      	cmp	r3, #0
 8004090:	eeb0 7a67 	vmov.f32	s14, s15
 8004094:	bfb8      	it	lt
 8004096:	eef0 7a66 	vmovlt.f32	s15, s13
 800409a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800409e:	4770      	bx	lr
 80040a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004120 <scalbnf+0xd8>
 80040a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80040a8:	4770      	bx	lr
 80040aa:	0dd2      	lsrs	r2, r2, #23
 80040ac:	e7e6      	b.n	800407c <scalbnf+0x34>
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	dd06      	ble.n	80040c0 <scalbnf+0x78>
 80040b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80040b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80040ba:	ee00 3a10 	vmov	s0, r3
 80040be:	4770      	bx	lr
 80040c0:	f112 0f16 	cmn.w	r2, #22
 80040c4:	da1a      	bge.n	80040fc <scalbnf+0xb4>
 80040c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80040ca:	4298      	cmp	r0, r3
 80040cc:	ee10 3a10 	vmov	r3, s0
 80040d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d4:	dd0a      	ble.n	80040ec <scalbnf+0xa4>
 80040d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004118 <scalbnf+0xd0>
 80040da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800411c <scalbnf+0xd4>
 80040de:	eef0 7a40 	vmov.f32	s15, s0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf18      	it	ne
 80040e6:	eeb0 0a47 	vmovne.f32	s0, s14
 80040ea:	e7db      	b.n	80040a4 <scalbnf+0x5c>
 80040ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004120 <scalbnf+0xd8>
 80040f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004124 <scalbnf+0xdc>
 80040f4:	eef0 7a40 	vmov.f32	s15, s0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	e7f3      	b.n	80040e4 <scalbnf+0x9c>
 80040fc:	3219      	adds	r2, #25
 80040fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004102:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004106:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004128 <scalbnf+0xe0>
 800410a:	ee07 3a10 	vmov	s14, r3
 800410e:	e7c4      	b.n	800409a <scalbnf+0x52>
 8004110:	ffff3cb0 	.word	0xffff3cb0
 8004114:	4c000000 	.word	0x4c000000
 8004118:	7149f2ca 	.word	0x7149f2ca
 800411c:	f149f2ca 	.word	0xf149f2ca
 8004120:	0da24260 	.word	0x0da24260
 8004124:	8da24260 	.word	0x8da24260
 8004128:	33000000 	.word	0x33000000

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
