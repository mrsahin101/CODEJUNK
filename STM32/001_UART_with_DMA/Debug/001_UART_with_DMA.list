
001_UART_with_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002738  08002738  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000c4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009216  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e1  00000000  00000000  00029256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000630  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb81  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085a7  00000000  00000000  0004b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c19a0  00000000  00000000  00053638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00114fd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a34  00000000  00000000  0011502c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080026b8 	.word	0x080026b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080026b8 	.word	0x080026b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa5e 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f83e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8f0 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f8ce 	bl	8000680 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8a2 	bl	800062c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*This is Polling Method for DMA. It's pointless exercise but still it's good for introduction to DMA.*/
  /*We are using DMA Because we wanna free the Core from workload. But polling doesn't accomplish that*/
  HAL_DMA_Start(&hdma_usart2_tx,  (uint32_t)msg,  (uint32_t)&huart2.Instance->DR, strlen(msg));
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <main+0x78>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	461c      	mov	r4, r3
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x7c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3304      	adds	r3, #4
 80004f4:	461d      	mov	r5, r3
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <main+0x78>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe64 	bl	80001c8 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	462a      	mov	r2, r5
 8000504:	4621      	mov	r1, r4
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <main+0x80>)
 8000508:	f000 fc76 	bl	8000df8 <HAL_DMA_Start>
  huart2.Instance->CR3 |= USART_CR3_DMAT;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <main+0x7c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <main+0x7c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800051a:	615a      	str	r2, [r3, #20]
  HAL_DMA_PollForTransfer(&hdma_usart2_tx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 800051c:	f04f 32ff 	mov.w	r2, #4294967295
 8000520:	2100      	movs	r1, #0
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x80>)
 8000524:	f000 fd13 	bl	8000f4e <HAL_DMA_PollForTransfer>
  huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <main+0x7c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <main+0x7c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000536:	615a      	str	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x84>)
 8000540:	f001 f9ea 	bl	8001918 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x74>
 8000546:	bf00      	nop
 8000548:	20000000 	.word	0x20000000
 800054c:	2000008c 	.word	0x2000008c
 8000550:	2000002c 	.word	0x2000002c
 8000554:	40020c00 	.word	0x40020c00

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 f89e 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	; 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f9b5 	bl	800194c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 f8bc 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc16 	bl	8001e3c <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 f8a5 	bl	8000764 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_USART2_UART_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x4c>)
 8000664:	f001 fde6 	bl	8002234 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f879 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000008c 	.word	0x2000008c
 800067c:	40004400 	.word	0x40004400

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x3c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x3c>)
 8000690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x3c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2011      	movs	r0, #17
 80006a8:	f000 fac1 	bl	8000c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006ac:	2011      	movs	r0, #17
 80006ae:	f000 fada 	bl	8000c66 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_GPIO_Init+0x9c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0x9c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_GPIO_Init+0x9c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0x9c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0x9c>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0x9c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xa0>)
 8000732:	f001 f8f1 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xa0>)
 8000750:	f000 ff46 	bl	80015e0 <HAL_GPIO_Init>

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020c00 	.word	0x40020c00

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fa32 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a30      	ldr	r2, [pc, #192]	; (80008a0 <HAL_UART_MspInit+0xe0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d159      	bne.n	8000896 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <HAL_UART_MspInit+0xe4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800081a:	230c      	movs	r3, #12
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	481c      	ldr	r0, [pc, #112]	; (80008a8 <HAL_UART_MspInit+0xe8>)
 8000836:	f000 fed3 	bl	80015e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_UART_MspInit+0xec>)
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0xf0>)
 800083e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000846:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0xec>)
 800084a:	2240      	movs	r2, #64	; 0x40
 800084c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_UART_MspInit+0xec>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_UART_MspInit+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <HAL_UART_MspInit+0xec>)
 800087c:	f000 fa0e 	bl	8000c9c <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000886:	f7ff ff6d 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_UART_MspInit+0xec>)
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_UART_MspInit+0xec>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	400260a0 	.word	0x400260a0

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f89a 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <DMA1_Stream6_IRQHandler+0x10>)
 800090e:	f000 fbfd 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000002c 	.word	0x2000002c

0800091c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000946:	490e      	ldr	r1, [pc, #56]	; (8000980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800095c:	4c0b      	ldr	r4, [pc, #44]	; (800098c <LoopFillZerobss+0x26>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800096a:	f7ff ffd7 	bl	800091c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f001 fe77 	bl	8002660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fdad 	bl	80004d0 <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000984:	08002740 	.word	0x08002740
  ldr r2, =_sbss
 8000988:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800098c:	200000d4 	.word	0x200000d4

08000990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <HAL_Init+0x40>)
 800099e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_Init+0x40>)
 80009aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x40>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f92b 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fed2 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f943 	bl	8000c82 <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f000 f90b 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	20000008 	.word	0x20000008

08000a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	200000d0 	.word	0x200000d0

08000a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000d0 	.word	0x200000d0

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff3e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff31 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa2 	bl	8000bd4 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff feda 	bl	8000a60 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e099      	b.n	8000dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cd8:	e00f      	b.n	8000cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cda:	f7ff fec1 	bl	8000a60 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d908      	bls.n	8000cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2220      	movs	r2, #32
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e078      	b.n	8000dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e8      	bne.n	8000cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <HAL_DMA_Init+0x158>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d107      	bne.n	8000d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f023 0307 	bic.w	r3, r3, #7
 8000d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d117      	bne.n	8000dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fba1 	bl	80014e8 <DMA_CheckFifoParam>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e016      	b.n	8000dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 fb58 	bl	800147c <DMA_CalcBaseAndBitshift>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd4:	223f      	movs	r2, #63	; 0x3f
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	f010803f 	.word	0xf010803f

08000df8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_DMA_Start+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e026      	b.n	8000e66 <HAL_DMA_Start+0x6e>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d115      	bne.n	8000e58 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 faed 	bl	8001420 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0201 	orr.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e005      	b.n	8000e64 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e60:	2302      	movs	r3, #2
 8000e62:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fdf0 	bl	8000a60 <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d008      	beq.n	8000ea0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e052      	b.n	8000f46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0216 	bic.w	r2, r2, #22
 8000eae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ebe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <HAL_DMA_Abort+0x62>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0208 	bic.w	r2, r2, #8
 8000ede:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef0:	e013      	b.n	8000f1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ef2:	f7ff fdb5 	bl	8000a60 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d90c      	bls.n	8000f1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e015      	b.n	8000f46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1e4      	bne.n	8000ef2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2c:	223f      	movs	r2, #63	; 0x3f
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b08a      	sub	sp, #40	; 0x28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	460b      	mov	r3, r1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8000f60:	f7ff fd7e 	bl	8000a60 <HAL_GetTick>
 8000f64:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d008      	beq.n	8000f84 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0bf      	b.n	8001104 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0b2      	b.n	8001104 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d106      	bne.n	8000fb2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	2220      	movs	r2, #32
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb0:	e005      	b.n	8000fbe <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8000fca:	e05a      	b.n	8001082 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd2:	d017      	beq.n	8001004 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <HAL_DMA_PollForTransfer+0x9c>
 8000fda:	f7ff fd41 	bl	8000a60 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d20c      	bcs.n	8001004 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2220      	movs	r2, #32
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e07f      	b.n	8001104 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100e:	2208      	movs	r2, #8
 8001010:	409a      	lsls	r2, r3
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00b      	beq.n	8001032 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102a:	2208      	movs	r2, #8
 800102c:	409a      	lsls	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001036:	2201      	movs	r2, #1
 8001038:	409a      	lsls	r2, r3
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	4013      	ands	r3, r2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001046:	f043 0202 	orr.w	r2, r3, #2
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	2201      	movs	r2, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105e:	2204      	movs	r2, #4
 8001060:	409a      	lsls	r2, r3
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106e:	f043 0204 	orr.w	r2, r3, #4
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107a:	2204      	movs	r2, #4
 800107c:	409a      	lsls	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001082:	6a3a      	ldr	r2, [r7, #32]
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d105      	bne.n	8001098 <HAL_DMA_PollForTransfer+0x14a>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d099      	beq.n	8000fcc <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109c:	2b00      	cmp	r3, #0
 800109e:	d018      	beq.n	80010d2 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fede 	bl	8000e6e <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	409a      	lsls	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e018      	b.n	8001104 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10e      	bne.n	80010f6 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010dc:	2230      	movs	r2, #48	; 0x30
 80010de:	409a      	lsls	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80010f4:	e005      	b.n	8001102 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	2210      	movs	r2, #16
 80010fc:	409a      	lsls	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8001102:	7ffb      	ldrb	r3, [r7, #31]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001118:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_DMA_IRQHandler+0x258>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <HAL_DMA_IRQHandler+0x25c>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0a9b      	lsrs	r3, r3, #10
 8001124:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2208      	movs	r2, #8
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0204 	bic.w	r2, r2, #4
 800115e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2208      	movs	r2, #8
 8001166:	409a      	lsls	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d012      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f043 0202 	orr.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2204      	movs	r2, #4
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d012      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2204      	movs	r2, #4
 80011d2:	409a      	lsls	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	2210      	movs	r2, #16
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d043      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03c      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2210      	movs	r2, #16
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d018      	beq.n	800124e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d024      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	4798      	blx	r3
 800123a:	e01f      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
 800124c:	e016      	b.n	800127c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2220      	movs	r2, #32
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 808e 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8086 	beq.w	80013aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2220      	movs	r2, #32
 80012a4:	409a      	lsls	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d136      	bne.n	8001324 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0216 	bic.w	r2, r2, #22
 80012c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <HAL_DMA_IRQHandler+0x1da>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	223f      	movs	r2, #63	; 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001316:	2b00      	cmp	r3, #0
 8001318:	d07d      	beq.n	8001416 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
        }
        return;
 8001322:	e078      	b.n	8001416 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01c      	beq.n	800136c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d108      	bne.n	8001352 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	2b00      	cmp	r3, #0
 8001346:	d030      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
 8001350:	e02b      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d027      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
 8001362:	e022      	b.n	80013aa <HAL_DMA_IRQHandler+0x29e>
 8001364:	20000004 	.word	0x20000004
 8001368:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0210 	bic.w	r2, r2, #16
 8001388:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d032      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d022      	beq.n	8001404 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2205      	movs	r2, #5
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0201 	bic.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d307      	bcc.n	80013f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f2      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x2ca>
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	4798      	blx	r3
 8001414:	e000      	b.n	8001418 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001416:	bf00      	nop
    }
  }
}
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop

08001420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800143c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d108      	bne.n	8001460 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800145e:	e007      	b.n	8001470 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b10      	subs	r3, #16
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <DMA_CalcBaseAndBitshift+0x64>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d909      	bls.n	80014be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
 80014bc:	e007      	b.n	80014ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	aaaaaaab 	.word	0xaaaaaaab
 80014e4:	08002728 	.word	0x08002728

080014e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11f      	bne.n	8001542 <DMA_CheckFifoParam+0x5a>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d856      	bhi.n	80015b6 <DMA_CheckFifoParam+0xce>
 8001508:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <DMA_CheckFifoParam+0x28>)
 800150a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150e:	bf00      	nop
 8001510:	08001521 	.word	0x08001521
 8001514:	08001533 	.word	0x08001533
 8001518:	08001521 	.word	0x08001521
 800151c:	080015b7 	.word	0x080015b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d046      	beq.n	80015ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001530:	e043      	b.n	80015ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800153a:	d140      	bne.n	80015be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001540:	e03d      	b.n	80015be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154a:	d121      	bne.n	8001590 <DMA_CheckFifoParam+0xa8>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d837      	bhi.n	80015c2 <DMA_CheckFifoParam+0xda>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <DMA_CheckFifoParam+0x70>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001569 	.word	0x08001569
 800155c:	0800156f 	.word	0x0800156f
 8001560:	08001569 	.word	0x08001569
 8001564:	08001581 	.word	0x08001581
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      break;
 800156c:	e030      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d025      	beq.n	80015c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800157e:	e022      	b.n	80015c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001588:	d11f      	bne.n	80015ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800158e:	e01c      	b.n	80015ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d903      	bls.n	800159e <DMA_CheckFifoParam+0xb6>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d003      	beq.n	80015a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800159c:	e018      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
      break;
 80015a2:	e015      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00e      	beq.n	80015ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
      break;
 80015b4:	e00b      	b.n	80015ce <DMA_CheckFifoParam+0xe6>
      break;
 80015b6:	bf00      	nop
 80015b8:	e00a      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ba:	bf00      	nop
 80015bc:	e008      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015be:	bf00      	nop
 80015c0:	e006      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015c2:	bf00      	nop
 80015c4:	e004      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015c6:	bf00      	nop
 80015c8:	e002      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ca:	bf00      	nop
 80015cc:	e000      	b.n	80015d0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ce:	bf00      	nop
    }
  } 
  
  return status; 
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e16b      	b.n	80018d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 815a 	bne.w	80018ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d005      	beq.n	8001632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	2b02      	cmp	r3, #2
 8001630:	d130      	bne.n	8001694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d017      	beq.n	80016d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80b4 	beq.w	80018ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <HAL_GPIO_Init+0x30c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <HAL_GPIO_Init+0x30c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_GPIO_Init+0x30c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_GPIO_Init+0x310>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_GPIO_Init+0x314>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d02b      	beq.n	8001806 <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x318>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d025      	beq.n	8001802 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x31c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01f      	beq.n	80017fe <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x320>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d019      	beq.n	80017fa <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x324>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <HAL_GPIO_Init+0x328>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00d      	beq.n	80017f2 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x32c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d007      	beq.n	80017ee <HAL_GPIO_Init+0x20e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_GPIO_Init+0x330>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <HAL_GPIO_Init+0x20a>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e00e      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017ea:	2308      	movs	r3, #8
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x228>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x228>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x228>
 8001806:	2300      	movs	r3, #0
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	4935      	ldr	r1, [pc, #212]	; (80018f0 <HAL_GPIO_Init+0x310>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_GPIO_Init+0x334>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184a:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_GPIO_Init+0x334>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_GPIO_Init+0x334>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_GPIO_Init+0x334>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_GPIO_Init+0x334>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_GPIO_Init+0x334>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_GPIO_Init+0x334>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_GPIO_Init+0x334>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	f67f ae90 	bls.w	80015fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000
 8001908:	40021400 	.word	0x40021400
 800190c:	40021800 	.word	0x40021800
 8001910:	40021c00 	.word	0x40021c00
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e264      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d00c      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e23f      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f82c 	bl	8000a60 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f828 	bl	8000a60 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e204      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f818 	bl	8000a60 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f814 	bl	8000a60 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1f0      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x152>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c4      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ffcd 	bl	8000a60 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7fe ffc9 	bl	8000a60 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a5      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4940      	ldr	r1, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7fe ffac 	bl	8000a60 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7fe ffa8 	bl	8000a60 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e184      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d030      	beq.n	8001b98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d016      	beq.n	8001b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCC_OscConfig+0x2b4>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7fe ff8c 	bl	8000a60 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7fe ff88 	bl	8000a60 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e164      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
 8001b6a:	e015      	b.n	8001b98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x2b4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7fe ff75 	bl	8000a60 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7fe ff71 	bl	8000a60 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e14d      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a0 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_OscConfig+0x2b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d121      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x2b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_RCC_OscConfig+0x2b8>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7fe ff37 	bl	8000a60 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e011      	b.n	8001c1a <HAL_RCC_OscConfig+0x2ce>
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	42470000 	.word	0x42470000
 8001c00:	42470e80 	.word	0x42470e80
 8001c04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7fe ff2a 	bl	8000a60 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e106      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b85      	ldr	r3, [pc, #532]	; (8001e30 <HAL_RCC_OscConfig+0x4e4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2f0>
 8001c2e:	4b81      	ldr	r3, [pc, #516]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x32a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x312>
 8001c44:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x32a>
 8001c5e:	4b75      	ldr	r3, [pc, #468]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a74      	ldr	r2, [pc, #464]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a71      	ldr	r2, [pc, #452]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7fe feef 	bl	8000a60 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe feeb 	bl	8000a60 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0c5      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	4b65      	ldr	r3, [pc, #404]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCC_OscConfig+0x33a>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7fe fed9 	bl	8000a60 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe fed5 	bl	8000a60 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0af      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 809b 	beq.w	8001e26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d05c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d141      	bne.n	8001d88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x4ec>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fea9 	bl	8000a60 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe fea5 	bl	8000a60 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e081      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	019b      	lsls	r3, r3, #6
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	061b      	lsls	r3, r3, #24
 8001d54:	4937      	ldr	r1, [pc, #220]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_RCC_OscConfig+0x4ec>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fe7e 	bl	8000a60 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fe7a 	bl	8000a60 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e056      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x41c>
 8001d86:	e04e      	b.n	8001e26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_OscConfig+0x4ec>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fe67 	bl	8000a60 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fe63 	bl	8000a60 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e03f      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x44a>
 8001db4:	e037      	b.n	8001e26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e032      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d028      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d11a      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d111      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40007000 	.word	0x40007000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470060 	.word	0x42470060

08001e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0cc      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d90c      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b8      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	494d      	ldr	r1, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d044      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e07f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e067      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f023 0203 	bic.w	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4934      	ldr	r1, [pc, #208]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe fd98 	bl	8000a60 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe fd94 	bl	8000a60 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e04f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 020c 	and.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1eb      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d20c      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e032      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fc2:	f000 f821 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	5ccb      	ldrb	r3, [r1, r3]
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fcf8 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023c00 	.word	0x40023c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	08002710 	.word	0x08002710
 8002000:	20000004 	.word	0x20000004
 8002004:	20000008 	.word	0x20000008

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	2300      	movs	r3, #0
 800201a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d00d      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x40>
 800202c:	2b08      	cmp	r3, #8
 800202e:	f200 80bd 	bhi.w	80021ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x34>
 8002036:	2b04      	cmp	r3, #4
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x3a>
 800203a:	e0b7      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800203e:	60bb      	str	r3, [r7, #8]
       break;
 8002040:	e0b7      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002044:	60bb      	str	r3, [r7, #8]
      break;
 8002046:	e0b4      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002048:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002050:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d04d      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205e:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	461a      	mov	r2, r3
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	ea02 0800 	and.w	r8, r2, r0
 8002076:	ea03 0901 	and.w	r9, r3, r1
 800207a:	4640      	mov	r0, r8
 800207c:	4649      	mov	r1, r9
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	014b      	lsls	r3, r1, #5
 8002088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800208c:	0142      	lsls	r2, r0, #5
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	ebb0 0008 	subs.w	r0, r0, r8
 8002096:	eb61 0109 	sbc.w	r1, r1, r9
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	018b      	lsls	r3, r1, #6
 80020a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020a8:	0182      	lsls	r2, r0, #6
 80020aa:	1a12      	subs	r2, r2, r0
 80020ac:	eb63 0301 	sbc.w	r3, r3, r1
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	00d9      	lsls	r1, r3, #3
 80020ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020be:	00d0      	lsls	r0, r2, #3
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	eb12 0208 	adds.w	r2, r2, r8
 80020c8:	eb43 0309 	adc.w	r3, r3, r9
 80020cc:	f04f 0000 	mov.w	r0, #0
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	0259      	lsls	r1, r3, #9
 80020d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80020da:	0250      	lsls	r0, r2, #9
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	f7fe f874 	bl	80001d8 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4613      	mov	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e04a      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	461a      	mov	r2, r3
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	ea02 0400 	and.w	r4, r2, r0
 8002112:	ea03 0501 	and.w	r5, r3, r1
 8002116:	4620      	mov	r0, r4
 8002118:	4629      	mov	r1, r5
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	014b      	lsls	r3, r1, #5
 8002124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002128:	0142      	lsls	r2, r0, #5
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	1b00      	subs	r0, r0, r4
 8002130:	eb61 0105 	sbc.w	r1, r1, r5
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	018b      	lsls	r3, r1, #6
 800213e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002142:	0182      	lsls	r2, r0, #6
 8002144:	1a12      	subs	r2, r2, r0
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	f04f 0000 	mov.w	r0, #0
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	00d9      	lsls	r1, r3, #3
 8002154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002158:	00d0      	lsls	r0, r2, #3
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	1912      	adds	r2, r2, r4
 8002160:	eb45 0303 	adc.w	r3, r5, r3
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	0299      	lsls	r1, r3, #10
 800216e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002172:	0290      	lsls	r0, r2, #10
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f7fe f828 	bl	80001d8 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	60bb      	str	r3, [r7, #8]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ae:	60bb      	str	r3, [r7, #8]
      break;
 80021b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b2:	68bb      	ldr	r3, [r7, #8]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e8:	f7ff fff0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0a9b      	lsrs	r3, r3, #10
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	08002720 	.word	0x08002720

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffdc 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0b5b      	lsrs	r3, r3, #13
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	08002720 	.word	0x08002720

08002234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e03f      	b.n	80022c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fab0 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f829 	bl	80022d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800228c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800229c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	b09f      	sub	sp, #124	; 0x7c
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	ea40 0301 	orr.w	r3, r0, r1
 80022f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	431a      	orrs	r2, r3
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4313      	orrs	r3, r2
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002314:	f021 010c 	bic.w	r1, r1, #12
 8002318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231e:	430b      	orrs	r3, r1
 8002320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	6999      	ldr	r1, [r3, #24]
 8002330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	ea40 0301 	orr.w	r3, r0, r1
 8002338:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4bc5      	ldr	r3, [pc, #788]	; (8002654 <UART_SetConfig+0x384>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d004      	beq.n	800234e <UART_SetConfig+0x7e>
 8002344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4bc3      	ldr	r3, [pc, #780]	; (8002658 <UART_SetConfig+0x388>)
 800234a:	429a      	cmp	r2, r3
 800234c:	d103      	bne.n	8002356 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800234e:	f7ff ff5d 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8002352:	6778      	str	r0, [r7, #116]	; 0x74
 8002354:	e002      	b.n	800235c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002356:	f7ff ff45 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 800235a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	f040 80b6 	bne.w	80024d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236a:	461c      	mov	r4, r3
 800236c:	f04f 0500 	mov.w	r5, #0
 8002370:	4622      	mov	r2, r4
 8002372:	462b      	mov	r3, r5
 8002374:	1891      	adds	r1, r2, r2
 8002376:	6439      	str	r1, [r7, #64]	; 0x40
 8002378:	415b      	adcs	r3, r3
 800237a:	647b      	str	r3, [r7, #68]	; 0x44
 800237c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002380:	1912      	adds	r2, r2, r4
 8002382:	eb45 0303 	adc.w	r3, r5, r3
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	00d9      	lsls	r1, r3, #3
 8002390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002394:	00d0      	lsls	r0, r2, #3
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	1911      	adds	r1, r2, r4
 800239c:	6639      	str	r1, [r7, #96]	; 0x60
 800239e:	416b      	adcs	r3, r5
 80023a0:	667b      	str	r3, [r7, #100]	; 0x64
 80023a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	1891      	adds	r1, r2, r2
 80023ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b0:	415b      	adcs	r3, r3
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023bc:	f7fd ff0c 	bl	80001d8 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4ba5      	ldr	r3, [pc, #660]	; (800265c <UART_SetConfig+0x38c>)
 80023c6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	011e      	lsls	r6, r3, #4
 80023ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d0:	461c      	mov	r4, r3
 80023d2:	f04f 0500 	mov.w	r5, #0
 80023d6:	4622      	mov	r2, r4
 80023d8:	462b      	mov	r3, r5
 80023da:	1891      	adds	r1, r2, r2
 80023dc:	6339      	str	r1, [r7, #48]	; 0x30
 80023de:	415b      	adcs	r3, r3
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
 80023e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023e6:	1912      	adds	r2, r2, r4
 80023e8:	eb45 0303 	adc.w	r3, r5, r3
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	00d9      	lsls	r1, r3, #3
 80023f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023fa:	00d0      	lsls	r0, r2, #3
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	1911      	adds	r1, r2, r4
 8002402:	65b9      	str	r1, [r7, #88]	; 0x58
 8002404:	416b      	adcs	r3, r5
 8002406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	461a      	mov	r2, r3
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	1891      	adds	r1, r2, r2
 8002414:	62b9      	str	r1, [r7, #40]	; 0x28
 8002416:	415b      	adcs	r3, r3
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800241e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002422:	f7fd fed9 	bl	80001d8 <__aeabi_uldivmod>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4b8c      	ldr	r3, [pc, #560]	; (800265c <UART_SetConfig+0x38c>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	2164      	movs	r1, #100	; 0x64
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	3332      	adds	r3, #50	; 0x32
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <UART_SetConfig+0x38c>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800244c:	441e      	add	r6, r3
 800244e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002450:	4618      	mov	r0, r3
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	1894      	adds	r4, r2, r2
 800245c:	623c      	str	r4, [r7, #32]
 800245e:	415b      	adcs	r3, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002466:	1812      	adds	r2, r2, r0
 8002468:	eb41 0303 	adc.w	r3, r1, r3
 800246c:	f04f 0400 	mov.w	r4, #0
 8002470:	f04f 0500 	mov.w	r5, #0
 8002474:	00dd      	lsls	r5, r3, #3
 8002476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800247a:	00d4      	lsls	r4, r2, #3
 800247c:	4622      	mov	r2, r4
 800247e:	462b      	mov	r3, r5
 8002480:	1814      	adds	r4, r2, r0
 8002482:	653c      	str	r4, [r7, #80]	; 0x50
 8002484:	414b      	adcs	r3, r1
 8002486:	657b      	str	r3, [r7, #84]	; 0x54
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	461a      	mov	r2, r3
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	1891      	adds	r1, r2, r2
 8002494:	61b9      	str	r1, [r7, #24]
 8002496:	415b      	adcs	r3, r3
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024a2:	f7fd fe99 	bl	80001d8 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <UART_SetConfig+0x38c>)
 80024ac:	fba3 1302 	umull	r1, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	2164      	movs	r1, #100	; 0x64
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	3332      	adds	r3, #50	; 0x32
 80024be:	4a67      	ldr	r2, [pc, #412]	; (800265c <UART_SetConfig+0x38c>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	f003 0207 	and.w	r2, r3, #7
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4432      	add	r2, r6
 80024d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024d2:	e0b9      	b.n	8002648 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	461c      	mov	r4, r3
 80024d8:	f04f 0500 	mov.w	r5, #0
 80024dc:	4622      	mov	r2, r4
 80024de:	462b      	mov	r3, r5
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	6139      	str	r1, [r7, #16]
 80024e4:	415b      	adcs	r3, r3
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ec:	1912      	adds	r2, r2, r4
 80024ee:	eb45 0303 	adc.w	r3, r5, r3
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	00d9      	lsls	r1, r3, #3
 80024fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002500:	00d0      	lsls	r0, r2, #3
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	eb12 0804 	adds.w	r8, r2, r4
 800250a:	eb43 0905 	adc.w	r9, r3, r5
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002526:	0082      	lsls	r2, r0, #2
 8002528:	4640      	mov	r0, r8
 800252a:	4649      	mov	r1, r9
 800252c:	f7fd fe54 	bl	80001d8 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b49      	ldr	r3, [pc, #292]	; (800265c <UART_SetConfig+0x38c>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	011e      	lsls	r6, r3, #4
 800253e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002540:	4618      	mov	r0, r3
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	1894      	adds	r4, r2, r2
 800254c:	60bc      	str	r4, [r7, #8]
 800254e:	415b      	adcs	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002556:	1812      	adds	r2, r2, r0
 8002558:	eb41 0303 	adc.w	r3, r1, r3
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	f04f 0500 	mov.w	r5, #0
 8002564:	00dd      	lsls	r5, r3, #3
 8002566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800256a:	00d4      	lsls	r4, r2, #3
 800256c:	4622      	mov	r2, r4
 800256e:	462b      	mov	r3, r5
 8002570:	1814      	adds	r4, r2, r0
 8002572:	64bc      	str	r4, [r7, #72]	; 0x48
 8002574:	414b      	adcs	r3, r1
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	008b      	lsls	r3, r1, #2
 800258c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002590:	0082      	lsls	r2, r0, #2
 8002592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002596:	f7fd fe1f 	bl	80001d8 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <UART_SetConfig+0x38c>)
 80025a0:	fba3 1302 	umull	r1, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <UART_SetConfig+0x38c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025be:	441e      	add	r6, r3
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	4618      	mov	r0, r3
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	1894      	adds	r4, r2, r2
 80025ce:	603c      	str	r4, [r7, #0]
 80025d0:	415b      	adcs	r3, r3
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d8:	1812      	adds	r2, r2, r0
 80025da:	eb41 0303 	adc.w	r3, r1, r3
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	f04f 0500 	mov.w	r5, #0
 80025e6:	00dd      	lsls	r5, r3, #3
 80025e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025ec:	00d4      	lsls	r4, r2, #3
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	eb12 0a00 	adds.w	sl, r2, r0
 80025f6:	eb43 0b01 	adc.w	fp, r3, r1
 80025fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002612:	0082      	lsls	r2, r0, #2
 8002614:	4650      	mov	r0, sl
 8002616:	4659      	mov	r1, fp
 8002618:	f7fd fdde 	bl	80001d8 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <UART_SetConfig+0x38c>)
 8002622:	fba3 1302 	umull	r1, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2164      	movs	r1, #100	; 0x64
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <UART_SetConfig+0x38c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4432      	add	r2, r6
 8002646:	609a      	str	r2, [r3, #8]
}
 8002648:	bf00      	nop
 800264a:	377c      	adds	r7, #124	; 0x7c
 800264c:	46bd      	mov	sp, r7
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002652:	bf00      	nop
 8002654:	40011000 	.word	0x40011000
 8002658:	40011400 	.word	0x40011400
 800265c:	51eb851f 	.word	0x51eb851f

08002660 <__libc_init_array>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	4d0d      	ldr	r5, [pc, #52]	; (8002698 <__libc_init_array+0x38>)
 8002664:	4c0d      	ldr	r4, [pc, #52]	; (800269c <__libc_init_array+0x3c>)
 8002666:	1b64      	subs	r4, r4, r5
 8002668:	10a4      	asrs	r4, r4, #2
 800266a:	2600      	movs	r6, #0
 800266c:	42a6      	cmp	r6, r4
 800266e:	d109      	bne.n	8002684 <__libc_init_array+0x24>
 8002670:	4d0b      	ldr	r5, [pc, #44]	; (80026a0 <__libc_init_array+0x40>)
 8002672:	4c0c      	ldr	r4, [pc, #48]	; (80026a4 <__libc_init_array+0x44>)
 8002674:	f000 f820 	bl	80026b8 <_init>
 8002678:	1b64      	subs	r4, r4, r5
 800267a:	10a4      	asrs	r4, r4, #2
 800267c:	2600      	movs	r6, #0
 800267e:	42a6      	cmp	r6, r4
 8002680:	d105      	bne.n	800268e <__libc_init_array+0x2e>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	f855 3b04 	ldr.w	r3, [r5], #4
 8002688:	4798      	blx	r3
 800268a:	3601      	adds	r6, #1
 800268c:	e7ee      	b.n	800266c <__libc_init_array+0xc>
 800268e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002692:	4798      	blx	r3
 8002694:	3601      	adds	r6, #1
 8002696:	e7f2      	b.n	800267e <__libc_init_array+0x1e>
 8002698:	08002738 	.word	0x08002738
 800269c:	08002738 	.word	0x08002738
 80026a0:	08002738 	.word	0x08002738
 80026a4:	0800273c 	.word	0x0800273c

080026a8 <memset>:
 80026a8:	4402      	add	r2, r0
 80026aa:	4603      	mov	r3, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <_init>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr

080026c4 <_fini>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr
