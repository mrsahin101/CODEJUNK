
002_TIMER_INPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004518  08004518  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001e4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7b1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc6  00000000  00000000  0002e859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00030520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00031150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210a4  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df3f  00000000  00000000  00052d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb39f  00000000  00000000  00060cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c05a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003730  00000000  00000000  0012c0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800448c 	.word	0x0800448c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800448c 	.word	0x0800448c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t diffCapture = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc75 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f875 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9fd 	bl	8000988 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f9c5 	bl	800091c <MX_DMA_Init>
  MX_TIM1_Init();
 8000592:	f000 f8d9 	bl	8000748 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000596:	f000 f997 	bl	80008c8 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 800059a:	f000 f925 	bl	80007e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800059e:	482a      	ldr	r0, [pc, #168]	; (8000648 <main+0xd0>)
 80005a0:	f002 f834 	bl	800260c <HAL_TIM_Base_Start>
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t) odrVals, (uint32_t) &GPIOD->ODR, 2);
 80005a4:	4929      	ldr	r1, [pc, #164]	; (800064c <main+0xd4>)
 80005a6:	2302      	movs	r3, #2
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <main+0xd8>)
 80005aa:	482a      	ldr	r0, [pc, #168]	; (8000654 <main+0xdc>)
 80005ac:	f000 feb6 	bl	800131c <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <main+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	4b24      	ldr	r3, [pc, #144]	; (8000648 <main+0xd0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005be:	60da      	str	r2, [r3, #12]

  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, (uint32_t*) captures, 2);
 80005c0:	2302      	movs	r3, #2
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <main+0xe0>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	4825      	ldr	r0, [pc, #148]	; (800065c <main+0xe4>)
 80005c8:	f002 f8e2 	bl	8002790 <HAL_TIM_IC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (captureDone != 0) {
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <main+0xe8>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d033      	beq.n	800063e <main+0xc6>
	        if (captures[1] >= captures[0])
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xe0>)
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xe0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d306      	bcc.n	80005f0 <main+0x78>
	          diffCapture = captures[1] - captures[0];
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <main+0xe0>)
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <main+0xe0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
 80005ee:	e009      	b.n	8000604 <main+0x8c>
	        else
	          diffCapture = (htim5.Instance->ARR - captures[0]) + captures[1];
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <main+0xe4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <main+0xe0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <main+0xe0>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4413      	add	r3, r2
 8000602:	627b      	str	r3, [r7, #36]	; 0x24

	        frequency = 84000000/diffCapture;
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <main+0xec>)
 8000606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	461a      	mov	r2, r3
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <main+0xf0>)
 8000610:	601a      	str	r2, [r3, #0]
	        sprintf(msg, "Input frequency: %d\r\n", frequency);
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <main+0xf0>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4914      	ldr	r1, [pc, #80]	; (800066c <main+0xf4>)
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fb08 	bl	8003c30 <siprintf>
	        HAL_UART_Transmit(&huart6, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fdd4 	bl	80001d0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <main+0xf8>)
 8000634:	f003 f801 	bl	800363a <HAL_UART_Transmit>
	        captureDone = 0;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <main+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	      }
	  HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f000 fc88 	bl	8000f54 <HAL_Delay>
	  if (captureDone != 0) {
 8000644:	e7c2      	b.n	80005cc <main+0x54>
 8000646:	bf00      	nop
 8000648:	2000015c 	.word	0x2000015c
 800064c:	20000000 	.word	0x20000000
 8000650:	40020c14 	.word	0x40020c14
 8000654:	200001a4 	.word	0x200001a4
 8000658:	20000154 	.word	0x20000154
 800065c:	200000ac 	.word	0x200000ac
 8000660:	20000094 	.word	0x20000094
 8000664:	0501bd00 	.word	0x0501bd00
 8000668:	20000098 	.word	0x20000098
 800066c:	080044a4 	.word	0x080044a4
 8000670:	20000204 	.word	0x20000204

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 facc 	bl	8003c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e8:	23a8      	movs	r3, #168	; 0xa8
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fac3 	bl	8001c84 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000704:	f000 f9c6 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2105      	movs	r1, #5
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd24 	bl	8002174 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 f9af 	bl	8000a94 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_TIM1_Init+0x9c>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1679;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000778:	f240 628f 	movw	r2, #1679	; 0x68f
 800077c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM1_Init+0x98>)
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <MX_TIM1_Init+0x98>)
 8000792:	f001 feeb 	bl	800256c <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f97a 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_TIM1_Init+0x98>)
 80007ae:	f002 fa35 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007b8:	f000 f96c 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_TIM1_Init+0x98>)
 80007ca:	f002 fe6d 	bl	80034a8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007d4:	f000 f95e 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000015c 	.word	0x2000015c
 80007e4:	40010000 	.word	0x40010000

080007e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <MX_TIM5_Init+0xdc>)
 8000816:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_TIM5_Init+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_TIM5_Init+0xd8>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000838:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_TIM5_Init+0xd8>)
 800083a:	f001 fe97 	bl	800256c <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f926 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000856:	f002 f9e1 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 f918 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000866:	f001 ff39 	bl	80026dc <HAL_TIM_IC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f910 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_TIM5_Init+0xd8>)
 8000884:	f002 fe10 	bl	80034a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800088e:	f000 f901 	bl	8000a94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000896:	2301      	movs	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_TIM5_Init+0xd8>)
 80008aa:	f002 f91b 	bl	8002ae4 <HAL_TIM_IC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80008b4:	f000 f8ee 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	40000c00 	.word	0x40000c00

080008c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_USART6_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART6_UART_Init+0x4c>)
 8000900:	f002 fe4e 	bl	80035a0 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f8c3 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000204 	.word	0x20000204
 8000918:	40011400 	.word	0x40011400

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_DMA_Init+0x68>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <MX_DMA_Init+0x68>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_DMA_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_DMA_Init+0x68>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_DMA_Init+0x68>)
 8000948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_DMA_Init+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	200d      	movs	r0, #13
 8000960:	f000 fbf7 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000964:	200d      	movs	r0, #13
 8000966:	f000 fc10 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2044      	movs	r0, #68	; 0x44
 8000970:	f000 fbef 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000974:	2044      	movs	r0, #68	; 0x44
 8000976:	f000 fc08 	bl	800118a <HAL_NVIC_EnableIRQ>

}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_GPIO_Init+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_0, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f241 0101 	movw	r1, #4097	; 0x1001
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0xbc>)
 8000a16:	f001 f91b 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_0;
 8000a1a:	f241 0301 	movw	r3, #4097	; 0x1001
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0xbc>)
 8000a34:	f000 ff70 	bl	8001918 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7f1b      	ldrb	r3, [r3, #28]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d112      	bne.n	8000a7e <HAL_TIM_IC_CaptureCallback+0x36>
	  capture_flag++;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000a62:	701a      	strb	r2, [r3, #0]
	  if(capture_flag % 2 == 0)
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <HAL_TIM_IC_CaptureCallback+0x36>
	  {
		  captureDone = 1;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		  capture_flag =0;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	  }

  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	20000094 	.word	0x20000094

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f000 fb2c 	bl	800113c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a54      	ldr	r2, [pc, #336]	; (8000c60 <HAL_TIM_Base_MspInit+0x170>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13f      	bne.n	8000b92 <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b53      	ldr	r3, [pc, #332]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a52      	ldr	r2, [pc, #328]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000b2e:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b30:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <HAL_TIM_Base_MspInit+0x17c>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b36:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000b3a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3c:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b3e:	2240      	movs	r2, #64	; 0x40
 8000b40:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b50:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b56:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b66:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000b68:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000b74:	483c      	ldr	r0, [pc, #240]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b76:	f000 fb23 	bl	80011c0 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8000b80:	f7ff ff88 	bl	8000a94 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b88:	621a      	str	r2, [r3, #32]
 8000b8a:	4a37      	ldr	r2, [pc, #220]	; (8000c68 <HAL_TIM_Base_MspInit+0x178>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b90:	e061      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x166>
  else if(htim_base->Instance==TIM5)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <HAL_TIM_Base_MspInit+0x180>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d15c      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_TIM_Base_MspInit+0x174>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000be4:	2302      	movs	r3, #2
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4821      	ldr	r0, [pc, #132]	; (8000c74 <HAL_TIM_Base_MspInit+0x184>)
 8000bf0:	f000 fe92 	bl	8001918 <HAL_GPIO_Init>
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000bf6:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <HAL_TIM_Base_MspInit+0x18c>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000bfc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c24:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c3c:	f000 fac0 	bl	80011c0 <HAL_DMA_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_TIM_Base_MspInit+0x15a>
      Error_Handler();
 8000c46:	f7ff ff25 	bl	8000a94 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x188>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40010000 	.word	0x40010000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	200001a4 	.word	0x200001a4
 8000c6c:	40026488 	.word	0x40026488
 8000c70:	40000c00 	.word	0x40000c00
 8000c74:	40020000 	.word	0x40020000
 8000c78:	200000f4 	.word	0x200000f4
 8000c7c:	40026040 	.word	0x40026040

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12b      	bne.n	8000cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	23c0      	movs	r3, #192	; 0xc0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cea:	2308      	movs	r3, #8
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0x8c>)
 8000cf6:	f000 fe0f 	bl	8001918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40011400 	.word	0x40011400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020800 	.word	0x40020800

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8da 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA1_Stream2_IRQHandler+0x10>)
 8000d6a:	f000 fb6b 	bl	8001444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000f4 	.word	0x200000f4

08000d78 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA2_Stream5_IRQHandler+0x10>)
 8000d7e:	f000 fb61 	bl	8001444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001a4 	.word	0x200001a4

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f002 ff06 	bl	8003bcc <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200000a0 	.word	0x200000a0
 8000df4:	20000260 	.word	0x20000260

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 fec5 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb93 	bl	8000578 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e60:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8000e64:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e68:	2000025c 	.word	0x2000025c

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f94f 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fdfc 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f967 	bl	80011a6 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f92f 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	2000000c 	.word	0x2000000c

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000010 	.word	0x20000010
 8000f38:	20000248 	.word	0x20000248

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000248 	.word	0x20000248

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000010 	.word	0x20000010

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff feb6 	bl	8000f3c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e099      	b.n	8001310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	e00f      	b.n	800121e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fe:	f7ff fe9d 	bl	8000f3c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b05      	cmp	r3, #5
 800120a:	d908      	bls.n	800121e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e078      	b.n	8001310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e8      	bne.n	80011fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_DMA_Init+0x158>)
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2b04      	cmp	r3, #4
 8001276:	d107      	bne.n	8001288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4313      	orrs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f023 0307 	bic.w	r3, r3, #7
 800129e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d117      	bne.n	80012e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 faab 	bl	8001820 <DMA_CheckFifoParam>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012de:	2301      	movs	r3, #1
 80012e0:	e016      	b.n	8001310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa62 	bl	80017b4 <DMA_CalcBaseAndBitshift>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	f010803f 	.word	0xf010803f

0800131c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_DMA_Start+0x20>
 8001338:	2302      	movs	r3, #2
 800133a:	e026      	b.n	800138a <HAL_DMA_Start+0x6e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d115      	bne.n	800137c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f9f7 	bl	8001758 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e005      	b.n	8001388 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001384:	2302      	movs	r3, #2
 8001386:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001388:	7dfb      	ldrb	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Start_IT+0x26>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e040      	b.n	800143a <HAL_DMA_Start_IT+0xa8>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d12f      	bne.n	800142c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f9b9 	bl	8001758 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	223f      	movs	r2, #63	; 0x3f
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0216 	orr.w	r2, r2, #22
 8001400:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0208 	orr.w	r2, r2, #8
 8001418:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e005      	b.n	8001438 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001434:	2302      	movs	r3, #2
 8001436:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001450:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_DMA_IRQHandler+0x258>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a92      	ldr	r2, [pc, #584]	; (80016a0 <HAL_DMA_IRQHandler+0x25c>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0a9b      	lsrs	r3, r3, #10
 800145c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2208      	movs	r2, #8
 8001470:	409a      	lsls	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d01a      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0204 	bic.w	r2, r2, #4
 8001496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2208      	movs	r2, #8
 800149e:	409a      	lsls	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2201      	movs	r2, #1
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d012      	beq.n	80014e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	2201      	movs	r2, #1
 80014d4:	409a      	lsls	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2204      	movs	r2, #4
 80014ec:	409a      	lsls	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d012      	beq.n	800151c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2204      	movs	r2, #4
 800150a:	409a      	lsls	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f043 0204 	orr.w	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2210      	movs	r2, #16
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d043      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d03c      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2210      	movs	r2, #16
 8001540:	409a      	lsls	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d018      	beq.n	8001586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d108      	bne.n	8001574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d024      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
 8001572:	e01f      	b.n	80015b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01b      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	4798      	blx	r3
 8001584:	e016      	b.n	80015b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d107      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0208 	bic.w	r2, r2, #8
 80015a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	2220      	movs	r2, #32
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 808e 	beq.w	80016e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8086 	beq.w	80016e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2220      	movs	r2, #32
 80015dc:	409a      	lsls	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d136      	bne.n	800165c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0216 	bic.w	r2, r2, #22
 80015fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d103      	bne.n	800161e <HAL_DMA_IRQHandler+0x1da>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0208 	bic.w	r2, r2, #8
 800162c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	223f      	movs	r2, #63	; 0x3f
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164e:	2b00      	cmp	r3, #0
 8001650:	d07d      	beq.n	800174e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	4798      	blx	r3
        }
        return;
 800165a:	e078      	b.n	800174e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01c      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d108      	bne.n	800168a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	2b00      	cmp	r3, #0
 800167e:	d030      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
 8001688:	e02b      	b.n	80016e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d027      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
 800169a:	e022      	b.n	80016e2 <HAL_DMA_IRQHandler+0x29e>
 800169c:	20000008 	.word	0x20000008
 80016a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0210 	bic.w	r2, r2, #16
 80016c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d032      	beq.n	8001750 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d022      	beq.n	800173c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3301      	adds	r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d307      	bcc.n	800172a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f2      	bne.n	800170e <HAL_DMA_IRQHandler+0x2ca>
 8001728:	e000      	b.n	800172c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800172a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e000      	b.n	8001750 <HAL_DMA_IRQHandler+0x30c>
        return;
 800174e:	bf00      	nop
    }
  }
}
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop

08001758 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001774:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d108      	bne.n	8001798 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001796:	e007      	b.n	80017a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	3b10      	subs	r3, #16
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <DMA_CalcBaseAndBitshift+0x64>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <DMA_CalcBaseAndBitshift+0x68>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d909      	bls.n	80017f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	1d1a      	adds	r2, r3, #4
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58
 80017f4:	e007      	b.n	8001806 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	aaaaaaab 	.word	0xaaaaaaab
 800181c:	080044d4 	.word	0x080044d4

08001820 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d11f      	bne.n	800187a <DMA_CheckFifoParam+0x5a>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d856      	bhi.n	80018ee <DMA_CheckFifoParam+0xce>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <DMA_CheckFifoParam+0x28>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	08001859 	.word	0x08001859
 800184c:	0800186b 	.word	0x0800186b
 8001850:	08001859 	.word	0x08001859
 8001854:	080018ef 	.word	0x080018ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d046      	beq.n	80018f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001868:	e043      	b.n	80018f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001872:	d140      	bne.n	80018f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001878:	e03d      	b.n	80018f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001882:	d121      	bne.n	80018c8 <DMA_CheckFifoParam+0xa8>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d837      	bhi.n	80018fa <DMA_CheckFifoParam+0xda>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <DMA_CheckFifoParam+0x70>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018a7 	.word	0x080018a7
 8001898:	080018a1 	.word	0x080018a1
 800189c:	080018b9 	.word	0x080018b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      break;
 80018a4:	e030      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d025      	beq.n	80018fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b6:	e022      	b.n	80018fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018c0:	d11f      	bne.n	8001902 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018c6:	e01c      	b.n	8001902 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d903      	bls.n	80018d6 <DMA_CheckFifoParam+0xb6>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d003      	beq.n	80018dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018d4:	e018      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      break;
 80018da:	e015      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00e      	beq.n	8001906 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
      break;
 80018ec:	e00b      	b.n	8001906 <DMA_CheckFifoParam+0xe6>
      break;
 80018ee:	bf00      	nop
 80018f0:	e00a      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e008      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;
 80018f6:	bf00      	nop
 80018f8:	e006      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
 80018fc:	e004      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;
 80018fe:	bf00      	nop
 8001900:	e002      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;   
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
    }
  } 
  
  return status; 
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e16b      	b.n	8001c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 815a 	bne.w	8001c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80b4 	beq.w	8001c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <HAL_GPIO_Init+0x30c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a5f      	ldr	r2, [pc, #380]	; (8001c24 <HAL_GPIO_Init+0x30c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_GPIO_Init+0x30c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a5b      	ldr	r2, [pc, #364]	; (8001c28 <HAL_GPIO_Init+0x310>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_GPIO_Init+0x314>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02b      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_GPIO_Init+0x318>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d025      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_GPIO_Init+0x31c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01f      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x320>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d019      	beq.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_GPIO_Init+0x324>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0x216>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x328>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00d      	beq.n	8001b2a <HAL_GPIO_Init+0x212>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x32c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0x20e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_GPIO_Init+0x330>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_GPIO_Init+0x20a>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00e      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e00c      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00a      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x228>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b50:	4935      	ldr	r1, [pc, #212]	; (8001c28 <HAL_GPIO_Init+0x310>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_GPIO_Init+0x334>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	f67f ae90 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40021400 	.word	0x40021400
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e264      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca2:	4ba3      	ldr	r3, [pc, #652]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4ba0      	ldr	r3, [pc, #640]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b99      	ldr	r3, [pc, #612]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e23f      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a90      	ldr	r2, [pc, #576]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a87      	ldr	r2, [pc, #540]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a83      	ldr	r2, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a80      	ldr	r2, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f8fe 	bl	8000f3c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f8fa 	bl	8000f3c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e204      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8ea 	bl	8000f3c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f8e6 	bl	8000f3c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f0      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c4      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4952      	ldr	r1, [pc, #328]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HAL_RCC_OscConfig+0x2b0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f89f 	bl	8000f3c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff f89b 	bl	8000f3c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a5      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4940      	ldr	r1, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_OscConfig+0x2b0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f87e 	bl	8000f3c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff f87a 	bl	8000f3c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e184      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d030      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x2b4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f85e 	bl	8000f3c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff f85a 	bl	8000f3c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e164      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e015      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x2b4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f847 	bl	8000f3c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f843 	bl	8000f3c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e14d      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a0 	beq.w	800201e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d121      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_RCC_OscConfig+0x2b8>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f809 	bl	8000f3c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e011      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
 8001f3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7fe fffc 	bl	8000f3c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e106      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b85      	ldr	r3, [pc, #532]	; (8002168 <HAL_RCC_OscConfig+0x4e4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a80      	ldr	r2, [pc, #512]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	e01c      	b.n	8001fae <HAL_RCC_OscConfig+0x32a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
 8001f88:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a77      	ldr	r2, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	e00b      	b.n	8001fae <HAL_RCC_OscConfig+0x32a>
 8001f96:	4b75      	ldr	r3, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a74      	ldr	r2, [pc, #464]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a71      	ldr	r2, [pc, #452]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ffc1 	bl	8000f3c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7fe ffbd 	bl	8000f3c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0c5      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	4b65      	ldr	r3, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ee      	beq.n	8001fbe <HAL_RCC_OscConfig+0x33a>
 8001fe0:	e014      	b.n	800200c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ffab 	bl	8000f3c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe ffa7 	bl	8000f3c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0af      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	4b56      	ldr	r3, [pc, #344]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a55      	ldr	r2, [pc, #340]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 809b 	beq.w	800215e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d05c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d141      	bne.n	80020c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff7b 	bl	8000f3c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ff77 	bl	8000f3c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e081      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe ff50 	bl	8000f3c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ff4c 	bl	8000f3c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e056      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x41c>
 80020be:	e04e      	b.n	800215e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x4ec>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe ff39 	bl	8000f3c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe ff35 	bl	8000f3c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e03f      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x44a>
 80020ec:	e037      	b.n	800215e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e032      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_RCC_OscConfig+0x4e8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d028      	beq.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d121      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d11a      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002130:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d107      	bne.n	800215a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40007000 	.word	0x40007000
 800216c:	40023800 	.word	0x40023800
 8002170:	42470060 	.word	0x42470060

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7fe fe6a 	bl	8000f3c <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fe66 	bl	8000f3c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fdca 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	080044bc 	.word	0x080044bc
 8002338:	20000008 	.word	0x20000008
 800233c:	2000000c 	.word	0x2000000c

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	2300      	movs	r3, #0
 8002352:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80bd 	bhi.w	80024e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e0b7      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002376:	60bb      	str	r3, [r7, #8]
       break;
 8002378:	e0b7      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800237c:	60bb      	str	r3, [r7, #8]
      break;
 800237e:	e0b4      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002388:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04d      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	461a      	mov	r2, r3
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	ea02 0800 	and.w	r8, r2, r0
 80023ae:	ea03 0901 	and.w	r9, r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	014b      	lsls	r3, r1, #5
 80023c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023c4:	0142      	lsls	r2, r0, #5
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	ebb0 0008 	subs.w	r0, r0, r8
 80023ce:	eb61 0109 	sbc.w	r1, r1, r9
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	018b      	lsls	r3, r1, #6
 80023dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023e0:	0182      	lsls	r2, r0, #6
 80023e2:	1a12      	subs	r2, r2, r0
 80023e4:	eb63 0301 	sbc.w	r3, r3, r1
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	00d9      	lsls	r1, r3, #3
 80023f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023f6:	00d0      	lsls	r0, r2, #3
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	eb12 0208 	adds.w	r2, r2, r8
 8002400:	eb43 0309 	adc.w	r3, r3, r9
 8002404:	f04f 0000 	mov.w	r0, #0
 8002408:	f04f 0100 	mov.w	r1, #0
 800240c:	0259      	lsls	r1, r3, #9
 800240e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002412:	0250      	lsls	r0, r2, #9
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f7fd ff2c 	bl	8000280 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e04a      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	461a      	mov	r2, r3
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	ea02 0400 	and.w	r4, r2, r0
 800244a:	ea03 0501 	and.w	r5, r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	014b      	lsls	r3, r1, #5
 800245c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002460:	0142      	lsls	r2, r0, #5
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	1b00      	subs	r0, r0, r4
 8002468:	eb61 0105 	sbc.w	r1, r1, r5
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	018b      	lsls	r3, r1, #6
 8002476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800247a:	0182      	lsls	r2, r0, #6
 800247c:	1a12      	subs	r2, r2, r0
 800247e:	eb63 0301 	sbc.w	r3, r3, r1
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	00d9      	lsls	r1, r3, #3
 800248c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002490:	00d0      	lsls	r0, r2, #3
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	1912      	adds	r2, r2, r4
 8002498:	eb45 0303 	adc.w	r3, r5, r3
 800249c:	f04f 0000 	mov.w	r0, #0
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	0299      	lsls	r1, r3, #10
 80024a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024aa:	0290      	lsls	r0, r2, #10
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f7fd fee0 	bl	8000280 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4613      	mov	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	3301      	adds	r3, #1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	60bb      	str	r3, [r7, #8]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024e6:	60bb      	str	r3, [r7, #8]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	68bb      	ldr	r3, [r7, #8]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a9b      	lsrs	r3, r3, #10
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	080044cc 	.word	0x080044cc

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffdc 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0b5b      	lsrs	r3, r3, #13
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	080044cc 	.word	0x080044cc

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe faac 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fcf2 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e046      	b.n	80026b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_TIM_Base_Start+0xb4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d01d      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_TIM_Base_Start+0xb8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_Start+0xbc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Base_Start+0xc0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_Base_Start+0xc4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_TIM_Base_Start+0xc8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_TIM_Base_Start+0x70>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIM_Base_Start+0xcc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d111      	bne.n	80026a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d010      	beq.n	80026b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	e007      	b.n	80026b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40001800 	.word	0x40001800

080026dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f839 	bl	800277a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 fc3a 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <HAL_TIM_IC_Start_DMA+0x22>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e013      	b.n	80027da <HAL_TIM_IC_Start_DMA+0x4a>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d104      	bne.n	80027c2 <HAL_TIM_IC_Start_DMA+0x32>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e00b      	b.n	80027da <HAL_TIM_IC_Start_DMA+0x4a>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d104      	bne.n	80027d2 <HAL_TIM_IC_Start_DMA+0x42>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	e003      	b.n	80027da <HAL_TIM_IC_Start_DMA+0x4a>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <HAL_TIM_IC_Start_DMA+0x5c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e013      	b.n	8002814 <HAL_TIM_IC_Start_DMA+0x84>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d104      	bne.n	80027fc <HAL_TIM_IC_Start_DMA+0x6c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e00b      	b.n	8002814 <HAL_TIM_IC_Start_DMA+0x84>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d104      	bne.n	800280c <HAL_TIM_IC_Start_DMA+0x7c>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e003      	b.n	8002814 <HAL_TIM_IC_Start_DMA+0x84>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002812:	b2db      	uxtb	r3, r3
 8002814:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002816:	7dbb      	ldrb	r3, [r7, #22]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d002      	beq.n	8002822 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800281c:	7d7b      	ldrb	r3, [r7, #21]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d101      	bne.n	8002826 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	e146      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002826:	7dbb      	ldrb	r3, [r7, #22]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d143      	bne.n	80028b4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800282c:	7d7b      	ldrb	r3, [r7, #21]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d140      	bne.n	80028b4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_TIM_IC_Start_DMA+0xb2>
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e138      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_TIM_IC_Start_DMA+0xc2>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002850:	e013      	b.n	800287a <HAL_TIM_IC_Start_DMA+0xea>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d104      	bne.n	8002862 <HAL_TIM_IC_Start_DMA+0xd2>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	e00b      	b.n	800287a <HAL_TIM_IC_Start_DMA+0xea>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d104      	bne.n	8002872 <HAL_TIM_IC_Start_DMA+0xe2>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	e003      	b.n	800287a <HAL_TIM_IC_Start_DMA+0xea>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <HAL_TIM_IC_Start_DMA+0xfa>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8002888:	e016      	b.n	80028b8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start_DMA+0x10a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8002898:	e00e      	b.n	80028b8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d104      	bne.n	80028aa <HAL_TIM_IC_Start_DMA+0x11a>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80028a8:	e006      	b.n	80028b8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80028b2:	e001      	b.n	80028b8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0fd      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fdcb 	bl	800345c <TIM_CCxChannelCmd>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	f200 80ad 	bhi.w	8002a28 <HAL_TIM_IC_Start_DMA+0x298>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <HAL_TIM_IC_Start_DMA+0x144>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002909 	.word	0x08002909
 80028d8:	08002a29 	.word	0x08002a29
 80028dc:	08002a29 	.word	0x08002a29
 80028e0:	08002a29 	.word	0x08002a29
 80028e4:	08002951 	.word	0x08002951
 80028e8:	08002a29 	.word	0x08002a29
 80028ec:	08002a29 	.word	0x08002a29
 80028f0:	08002a29 	.word	0x08002a29
 80028f4:	08002999 	.word	0x08002999
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	08002a29 	.word	0x08002a29
 8002904:	080029e1 	.word	0x080029e1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	4a6b      	ldr	r2, [pc, #428]	; (8002abc <HAL_TIM_IC_Start_DMA+0x32c>)
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	4a6a      	ldr	r2, [pc, #424]	; (8002ac0 <HAL_TIM_IC_Start_DMA+0x330>)
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_TIM_IC_Start_DMA+0x334>)
 800291e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3334      	adds	r3, #52	; 0x34
 800292a:	4619      	mov	r1, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	f7fe fd2f 	bl	8001392 <HAL_DMA_Start_IT>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0ba      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	60da      	str	r2, [r3, #12]
      break;
 800294e:	e06e      	b.n	8002a2e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	4a59      	ldr	r2, [pc, #356]	; (8002abc <HAL_TIM_IC_Start_DMA+0x32c>)
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_TIM_IC_Start_DMA+0x330>)
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	4a57      	ldr	r2, [pc, #348]	; (8002ac4 <HAL_TIM_IC_Start_DMA+0x334>)
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3338      	adds	r3, #56	; 0x38
 8002972:	4619      	mov	r1, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	f7fe fd0b 	bl	8001392 <HAL_DMA_Start_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e096      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002994:	60da      	str	r2, [r3, #12]
      break;
 8002996:	e04a      	b.n	8002a2e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a47      	ldr	r2, [pc, #284]	; (8002abc <HAL_TIM_IC_Start_DMA+0x32c>)
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <HAL_TIM_IC_Start_DMA+0x330>)
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <HAL_TIM_IC_Start_DMA+0x334>)
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	333c      	adds	r3, #60	; 0x3c
 80029ba:	4619      	mov	r1, r3
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	f7fe fce7 	bl	8001392 <HAL_DMA_Start_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e072      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029dc:	60da      	str	r2, [r3, #12]
      break;
 80029de:	e026      	b.n	8002a2e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <HAL_TIM_IC_Start_DMA+0x32c>)
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_TIM_IC_Start_DMA+0x330>)
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_TIM_IC_Start_DMA+0x334>)
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3340      	adds	r3, #64	; 0x40
 8002a02:	4619      	mov	r1, r3
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	f7fe fcc3 	bl	8001392 <HAL_DMA_Start_IT>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e04e      	b.n	8002ab4 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a24:	60da      	str	r2, [r3, #12]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <HAL_TIM_IC_Start_DMA+0x338>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d01d      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	; (8002acc <HAL_TIM_IC_Start_DMA+0x33c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_TIM_IC_Start_DMA+0x340>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_IC_Start_DMA+0x344>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_TIM_IC_Start_DMA+0x348>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIM_IC_Start_DMA+0x34c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_IC_Start_DMA+0x2ee>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_TIM_IC_Start_DMA+0x350>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d010      	beq.n	8002ab2 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08002e65 	.word	0x08002e65
 8002ac0:	08002f2d 	.word	0x08002f2d
 8002ac4:	08002dd3 	.word	0x08002dd3
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40001800 	.word	0x40001800

08002ae4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e088      	b.n	8002c14 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f000 fad8 	bl	80030d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020c 	bic.w	r2, r2, #12
 8002b32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	619a      	str	r2, [r3, #24]
 8002b46:	e060      	b.n	8002c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d11c      	bne.n	8002b88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f000 fb5c 	bl	800321a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6999      	ldr	r1, [r3, #24]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e040      	b.n	8002c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 fba9 	bl	80032f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 020c 	bic.w	r2, r2, #12
 8002bb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
 8002bc4:	e021      	b.n	8002c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d11c      	bne.n	8002c06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f000 fbc6 	bl	800336c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69d9      	ldr	r1, [r3, #28]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]
 8002c04:	e001      	b.n	8002c0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x186>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x172>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11a>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 fba3 	bl	800341c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 fb8c 	bl	800341c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 fa4a 	bl	80031bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fb59 	bl	80033e6 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 faa6 	bl	8003294 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fb49 	bl	80033e6 <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 fa2a 	bl	80031bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb39 	bl	80033e6 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 fb30 	bl	80033e6 <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d107      	bne.n	8002dfa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df8:	e02a      	b.n	8002e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e12:	e01d      	b.n	8002e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d107      	bne.n	8002e2e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2204      	movs	r2, #4
 8002e22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e2c:	e010      	b.n	8002e50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e46:	e003      	b.n	8002e50 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ffb4 	bl	8002dbe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d10f      	bne.n	8002e9c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d146      	bne.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9a:	e03d      	b.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d10f      	bne.n	8002ec6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d131      	bne.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec4:	e028      	b.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10f      	bne.n	8002ef0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11c      	bne.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eee:	e013      	b.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10e      	bne.n	8002f18 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2208      	movs	r2, #8
 8002efe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7fd fd95 	bl	8000a48 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d103      	bne.n	8002f4c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	771a      	strb	r2, [r3, #28]
 8002f4a:	e019      	b.n	8002f80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d103      	bne.n	8002f5e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	771a      	strb	r2, [r3, #28]
 8002f5c:	e010      	b.n	8002f80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d103      	bne.n	8002f70 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	771a      	strb	r2, [r3, #28]
 8002f6e:	e007      	b.n	8002f80 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d102      	bne.n	8002f80 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff ff12 	bl	8002daa <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <TIM_Base_SetConfig+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <TIM_Base_SetConfig+0x40>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d00f      	beq.n	8002fd4 <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <TIM_Base_SetConfig+0x118>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a3c      	ldr	r2, [pc, #240]	; (80030b0 <TIM_Base_SetConfig+0x11c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d007      	beq.n	8002fd4 <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <TIM_Base_SetConfig+0x120>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <TIM_Base_SetConfig+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <TIM_Base_SetConfig+0x114>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02b      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d027      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <TIM_Base_SetConfig+0x118>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d023      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <TIM_Base_SetConfig+0x11c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01f      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <TIM_Base_SetConfig+0x120>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01b      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <TIM_Base_SetConfig+0x124>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d017      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a28      	ldr	r2, [pc, #160]	; (80030bc <TIM_Base_SetConfig+0x128>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <TIM_Base_SetConfig+0x12c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00f      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <TIM_Base_SetConfig+0x130>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00b      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <TIM_Base_SetConfig+0x134>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a24      	ldr	r2, [pc, #144]	; (80030cc <TIM_Base_SetConfig+0x138>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <TIM_Base_SetConfig+0x13c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <TIM_Base_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0xf8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <TIM_Base_SetConfig+0x124>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d103      	bne.n	8003094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	615a      	str	r2, [r3, #20]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40010000 	.word	0x40010000
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40010400 	.word	0x40010400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	40014400 	.word	0x40014400
 80030c4:	40014800 	.word	0x40014800
 80030c8:	40001800 	.word	0x40001800
 80030cc:	40001c00 	.word	0x40001c00
 80030d0:	40002000 	.word	0x40002000

080030d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <TIM_TI1_SetConfig+0xcc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01b      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d017      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <TIM_TI1_SetConfig+0xd0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <TIM_TI1_SetConfig+0xd4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00f      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a23      	ldr	r2, [pc, #140]	; (80031ac <TIM_TI1_SetConfig+0xd8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <TIM_TI1_SetConfig+0xdc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a21      	ldr	r2, [pc, #132]	; (80031b4 <TIM_TI1_SetConfig+0xe0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_TI1_SetConfig+0x66>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <TIM_TI1_SetConfig+0xe4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <TIM_TI1_SetConfig+0x6a>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <TIM_TI1_SetConfig+0x6c>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e003      	b.n	800315e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	b2db      	uxtb	r3, r3
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f023 030a 	bic.w	r3, r3, #10
 8003178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 030a 	and.w	r3, r3, #10
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40001800 	.word	0x40001800

080031bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 030a 	bic.w	r3, r3, #10
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0210 	bic.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	031b      	lsls	r3, r3, #12
 800325e:	b29b      	uxth	r3, r3
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800326c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 0210 	bic.w	r2, r3, #16
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	031b      	lsls	r3, r3, #12
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0303 	bic.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	b2db      	uxtb	r3, r3
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80033be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	031b      	lsls	r3, r3, #12
 80033c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	f043 0307 	orr.w	r3, r3, #7
 8003408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	431a      	orrs	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	2201      	movs	r2, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a1a      	ldr	r2, [r3, #32]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e05a      	b.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d01d      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10c      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40010400 	.word	0x40010400
 8003598:	40014000 	.word	0x40014000
 800359c:	40001800 	.word	0x40001800

080035a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e03f      	b.n	8003632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fb5a 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f929 	bl	800383c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b08a      	sub	sp, #40	; 0x28
 800363e:	af02      	add	r7, sp, #8
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d17c      	bne.n	8003754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_UART_Transmit+0x2c>
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e075      	b.n	8003756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_UART_Transmit+0x3e>
 8003674:	2302      	movs	r3, #2
 8003676:	e06e      	b.n	8003756 <HAL_UART_Transmit+0x11c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	; 0x21
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368e:	f7fd fc55 	bl	8000f3c <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d108      	bne.n	80036bc <HAL_UART_Transmit+0x82>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e003      	b.n	80036c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036cc:	e02a      	b.n	8003724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f840 	bl	800375e <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e036      	b.n	8003756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	3302      	adds	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	e007      	b.n	8003716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1cf      	bne.n	80036ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2140      	movs	r1, #64	; 0x40
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f810 	bl	800375e <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e006      	b.n	8003756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b090      	sub	sp, #64	; 0x40
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	e050      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d04c      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0x30>
 800377e:	f7fd fbdd 	bl	8000f3c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800378a:	429a      	cmp	r2, r3
 800378c:	d241      	bcs.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ae:	637a      	str	r2, [r7, #52]	; 0x34
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	613b      	str	r3, [r7, #16]
   return(result);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e2:	623a      	str	r2, [r7, #32]
 80037e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	69f9      	ldr	r1, [r7, #28]
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e5      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e00f      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	429a      	cmp	r2, r3
 800382e:	d09f      	beq.n	8003770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3740      	adds	r7, #64	; 0x40
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003840:	b09f      	sub	sp, #124	; 0x7c
 8003842:	af00      	add	r7, sp, #0
 8003844:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	68d9      	ldr	r1, [r3, #12]
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	ea40 0301 	orr.w	r3, r0, r1
 800385c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	431a      	orrs	r2, r3
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	4313      	orrs	r3, r2
 8003874:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003880:	f021 010c 	bic.w	r1, r1, #12
 8003884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800388a:	430b      	orrs	r3, r1
 800388c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	6999      	ldr	r1, [r3, #24]
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	ea40 0301 	orr.w	r3, r0, r1
 80038a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4bc5      	ldr	r3, [pc, #788]	; (8003bc0 <UART_SetConfig+0x384>)
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d004      	beq.n	80038ba <UART_SetConfig+0x7e>
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4bc3      	ldr	r3, [pc, #780]	; (8003bc4 <UART_SetConfig+0x388>)
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d103      	bne.n	80038c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038ba:	f7fe fe43 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 80038be:	6778      	str	r0, [r7, #116]	; 0x74
 80038c0:	e002      	b.n	80038c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038c2:	f7fe fe2b 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80038c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	f040 80b6 	bne.w	8003a40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	461c      	mov	r4, r3
 80038d8:	f04f 0500 	mov.w	r5, #0
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	1891      	adds	r1, r2, r2
 80038e2:	6439      	str	r1, [r7, #64]	; 0x40
 80038e4:	415b      	adcs	r3, r3
 80038e6:	647b      	str	r3, [r7, #68]	; 0x44
 80038e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038ec:	1912      	adds	r2, r2, r4
 80038ee:	eb45 0303 	adc.w	r3, r5, r3
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	00d9      	lsls	r1, r3, #3
 80038fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003900:	00d0      	lsls	r0, r2, #3
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	1911      	adds	r1, r2, r4
 8003908:	6639      	str	r1, [r7, #96]	; 0x60
 800390a:	416b      	adcs	r3, r5
 800390c:	667b      	str	r3, [r7, #100]	; 0x64
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	1891      	adds	r1, r2, r2
 800391a:	63b9      	str	r1, [r7, #56]	; 0x38
 800391c:	415b      	adcs	r3, r3
 800391e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003924:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003928:	f7fc fcaa 	bl	8000280 <__aeabi_uldivmod>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4ba5      	ldr	r3, [pc, #660]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003932:	fba3 2302 	umull	r2, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	011e      	lsls	r6, r3, #4
 800393a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393c:	461c      	mov	r4, r3
 800393e:	f04f 0500 	mov.w	r5, #0
 8003942:	4622      	mov	r2, r4
 8003944:	462b      	mov	r3, r5
 8003946:	1891      	adds	r1, r2, r2
 8003948:	6339      	str	r1, [r7, #48]	; 0x30
 800394a:	415b      	adcs	r3, r3
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
 800394e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003952:	1912      	adds	r2, r2, r4
 8003954:	eb45 0303 	adc.w	r3, r5, r3
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	00d9      	lsls	r1, r3, #3
 8003962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003966:	00d0      	lsls	r0, r2, #3
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	1911      	adds	r1, r2, r4
 800396e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003970:	416b      	adcs	r3, r5
 8003972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	461a      	mov	r2, r3
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	1891      	adds	r1, r2, r2
 8003980:	62b9      	str	r1, [r7, #40]	; 0x28
 8003982:	415b      	adcs	r3, r3
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800398e:	f7fc fc77 	bl	8000280 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	; 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	3332      	adds	r3, #50	; 0x32
 80039aa:	4a87      	ldr	r2, [pc, #540]	; (8003bc8 <UART_SetConfig+0x38c>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039b8:	441e      	add	r6, r3
 80039ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039bc:	4618      	mov	r0, r3
 80039be:	f04f 0100 	mov.w	r1, #0
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	1894      	adds	r4, r2, r2
 80039c8:	623c      	str	r4, [r7, #32]
 80039ca:	415b      	adcs	r3, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d2:	1812      	adds	r2, r2, r0
 80039d4:	eb41 0303 	adc.w	r3, r1, r3
 80039d8:	f04f 0400 	mov.w	r4, #0
 80039dc:	f04f 0500 	mov.w	r5, #0
 80039e0:	00dd      	lsls	r5, r3, #3
 80039e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039e6:	00d4      	lsls	r4, r2, #3
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	1814      	adds	r4, r2, r0
 80039ee:	653c      	str	r4, [r7, #80]	; 0x50
 80039f0:	414b      	adcs	r3, r1
 80039f2:	657b      	str	r3, [r7, #84]	; 0x54
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	1891      	adds	r1, r2, r2
 8003a00:	61b9      	str	r1, [r7, #24]
 8003a02:	415b      	adcs	r3, r3
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a0e:	f7fc fc37 	bl	8000280 <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003a18:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4432      	add	r2, r6
 8003a3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a3e:	e0b9      	b.n	8003bb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a42:	461c      	mov	r4, r3
 8003a44:	f04f 0500 	mov.w	r5, #0
 8003a48:	4622      	mov	r2, r4
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	6139      	str	r1, [r7, #16]
 8003a50:	415b      	adcs	r3, r3
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a58:	1912      	adds	r2, r2, r4
 8003a5a:	eb45 0303 	adc.w	r3, r5, r3
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	00d9      	lsls	r1, r3, #3
 8003a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a6c:	00d0      	lsls	r0, r2, #3
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	eb12 0804 	adds.w	r8, r2, r4
 8003a76:	eb43 0905 	adc.w	r9, r3, r5
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	008b      	lsls	r3, r1, #2
 8003a8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a92:	0082      	lsls	r2, r0, #2
 8003a94:	4640      	mov	r0, r8
 8003a96:	4649      	mov	r1, r9
 8003a98:	f7fc fbf2 	bl	8000280 <__aeabi_uldivmod>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	011e      	lsls	r6, r3, #4
 8003aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aac:	4618      	mov	r0, r3
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	1894      	adds	r4, r2, r2
 8003ab8:	60bc      	str	r4, [r7, #8]
 8003aba:	415b      	adcs	r3, r3
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac2:	1812      	adds	r2, r2, r0
 8003ac4:	eb41 0303 	adc.w	r3, r1, r3
 8003ac8:	f04f 0400 	mov.w	r4, #0
 8003acc:	f04f 0500 	mov.w	r5, #0
 8003ad0:	00dd      	lsls	r5, r3, #3
 8003ad2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ad6:	00d4      	lsls	r4, r2, #3
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	1814      	adds	r4, r2, r0
 8003ade:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ae0:	414b      	adcs	r3, r1
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	008b      	lsls	r3, r1, #2
 8003af8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003afc:	0082      	lsls	r2, r0, #2
 8003afe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b02:	f7fc fbbd 	bl	8000280 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2a:	441e      	add	r6, r3
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	1894      	adds	r4, r2, r2
 8003b3a:	603c      	str	r4, [r7, #0]
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b44:	1812      	adds	r2, r2, r0
 8003b46:	eb41 0303 	adc.w	r3, r1, r3
 8003b4a:	f04f 0400 	mov.w	r4, #0
 8003b4e:	f04f 0500 	mov.w	r5, #0
 8003b52:	00dd      	lsls	r5, r3, #3
 8003b54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b58:	00d4      	lsls	r4, r2, #3
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	eb12 0a00 	adds.w	sl, r2, r0
 8003b62:	eb43 0b01 	adc.w	fp, r3, r1
 8003b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	008b      	lsls	r3, r1, #2
 8003b7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b7e:	0082      	lsls	r2, r0, #2
 8003b80:	4650      	mov	r0, sl
 8003b82:	4659      	mov	r1, fp
 8003b84:	f7fc fb7c 	bl	8000280 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2164      	movs	r1, #100	; 0x64
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	; 0x32
 8003ba0:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <UART_SetConfig+0x38c>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 020f 	and.w	r2, r3, #15
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4432      	add	r2, r6
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	377c      	adds	r7, #124	; 0x7c
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	40011400 	.word	0x40011400
 8003bc8:	51eb851f 	.word	0x51eb851f

08003bcc <__errno>:
 8003bcc:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <__errno+0x8>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000014 	.word	0x20000014

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4d0d      	ldr	r5, [pc, #52]	; (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2600      	movs	r6, #0
 8003be4:	42a6      	cmp	r6, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4d0b      	ldr	r5, [pc, #44]	; (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	; (8003c1c <__libc_init_array+0x44>)
 8003bec:	f000 fc4e 	bl	800448c <_init>
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	42a6      	cmp	r6, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c00:	4798      	blx	r3
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0a:	4798      	blx	r3
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08004518 	.word	0x08004518
 8003c14:	08004518 	.word	0x08004518
 8003c18:	08004518 	.word	0x08004518
 8003c1c:	0800451c 	.word	0x0800451c

08003c20 <memset>:
 8003c20:	4402      	add	r2, r0
 8003c22:	4603      	mov	r3, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <siprintf>:
 8003c30:	b40e      	push	{r1, r2, r3}
 8003c32:	b500      	push	{lr}
 8003c34:	b09c      	sub	sp, #112	; 0x70
 8003c36:	ab1d      	add	r3, sp, #116	; 0x74
 8003c38:	9002      	str	r0, [sp, #8]
 8003c3a:	9006      	str	r0, [sp, #24]
 8003c3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <siprintf+0x38>)
 8003c42:	9107      	str	r1, [sp, #28]
 8003c44:	9104      	str	r1, [sp, #16]
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <siprintf+0x3c>)
 8003c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c4c:	9105      	str	r1, [sp, #20]
 8003c4e:	6800      	ldr	r0, [r0, #0]
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	a902      	add	r1, sp, #8
 8003c54:	f000 f868 	bl	8003d28 <_svfiprintf_r>
 8003c58:	9b02      	ldr	r3, [sp, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	b01c      	add	sp, #112	; 0x70
 8003c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c64:	b003      	add	sp, #12
 8003c66:	4770      	bx	lr
 8003c68:	20000014 	.word	0x20000014
 8003c6c:	ffff0208 	.word	0xffff0208

08003c70 <__ssputs_r>:
 8003c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	688e      	ldr	r6, [r1, #8]
 8003c76:	429e      	cmp	r6, r3
 8003c78:	4682      	mov	sl, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	4690      	mov	r8, r2
 8003c7e:	461f      	mov	r7, r3
 8003c80:	d838      	bhi.n	8003cf4 <__ssputs_r+0x84>
 8003c82:	898a      	ldrh	r2, [r1, #12]
 8003c84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c88:	d032      	beq.n	8003cf0 <__ssputs_r+0x80>
 8003c8a:	6825      	ldr	r5, [r4, #0]
 8003c8c:	6909      	ldr	r1, [r1, #16]
 8003c8e:	eba5 0901 	sub.w	r9, r5, r1
 8003c92:	6965      	ldr	r5, [r4, #20]
 8003c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	444b      	add	r3, r9
 8003ca0:	106d      	asrs	r5, r5, #1
 8003ca2:	429d      	cmp	r5, r3
 8003ca4:	bf38      	it	cc
 8003ca6:	461d      	movcc	r5, r3
 8003ca8:	0553      	lsls	r3, r2, #21
 8003caa:	d531      	bpl.n	8003d10 <__ssputs_r+0xa0>
 8003cac:	4629      	mov	r1, r5
 8003cae:	f000 fb47 	bl	8004340 <_malloc_r>
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	b950      	cbnz	r0, 8003ccc <__ssputs_r+0x5c>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	f8ca 3000 	str.w	r3, [sl]
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ccc:	6921      	ldr	r1, [r4, #16]
 8003cce:	464a      	mov	r2, r9
 8003cd0:	f000 fabe 	bl	8004250 <memcpy>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	6126      	str	r6, [r4, #16]
 8003ce2:	6165      	str	r5, [r4, #20]
 8003ce4:	444e      	add	r6, r9
 8003ce6:	eba5 0509 	sub.w	r5, r5, r9
 8003cea:	6026      	str	r6, [r4, #0]
 8003cec:	60a5      	str	r5, [r4, #8]
 8003cee:	463e      	mov	r6, r7
 8003cf0:	42be      	cmp	r6, r7
 8003cf2:	d900      	bls.n	8003cf6 <__ssputs_r+0x86>
 8003cf4:	463e      	mov	r6, r7
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	f000 fab6 	bl	800426c <memmove>
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	1b9b      	subs	r3, r3, r6
 8003d06:	4432      	add	r2, r6
 8003d08:	60a3      	str	r3, [r4, #8]
 8003d0a:	6022      	str	r2, [r4, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e7db      	b.n	8003cc8 <__ssputs_r+0x58>
 8003d10:	462a      	mov	r2, r5
 8003d12:	f000 fb6f 	bl	80043f4 <_realloc_r>
 8003d16:	4606      	mov	r6, r0
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <__ssputs_r+0x70>
 8003d1c:	6921      	ldr	r1, [r4, #16]
 8003d1e:	4650      	mov	r0, sl
 8003d20:	f000 fabe 	bl	80042a0 <_free_r>
 8003d24:	e7c7      	b.n	8003cb6 <__ssputs_r+0x46>
	...

08003d28 <_svfiprintf_r>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	4698      	mov	r8, r3
 8003d2e:	898b      	ldrh	r3, [r1, #12]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	b09d      	sub	sp, #116	; 0x74
 8003d34:	4607      	mov	r7, r0
 8003d36:	460d      	mov	r5, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	d50e      	bpl.n	8003d5a <_svfiprintf_r+0x32>
 8003d3c:	690b      	ldr	r3, [r1, #16]
 8003d3e:	b963      	cbnz	r3, 8003d5a <_svfiprintf_r+0x32>
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	f000 fafd 	bl	8004340 <_malloc_r>
 8003d46:	6028      	str	r0, [r5, #0]
 8003d48:	6128      	str	r0, [r5, #16]
 8003d4a:	b920      	cbnz	r0, 8003d56 <_svfiprintf_r+0x2e>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e0d1      	b.n	8003efa <_svfiprintf_r+0x1d2>
 8003d56:	2340      	movs	r3, #64	; 0x40
 8003d58:	616b      	str	r3, [r5, #20]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5e:	2320      	movs	r3, #32
 8003d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d68:	2330      	movs	r3, #48	; 0x30
 8003d6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f14 <_svfiprintf_r+0x1ec>
 8003d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d72:	f04f 0901 	mov.w	r9, #1
 8003d76:	4623      	mov	r3, r4
 8003d78:	469a      	mov	sl, r3
 8003d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d7e:	b10a      	cbz	r2, 8003d84 <_svfiprintf_r+0x5c>
 8003d80:	2a25      	cmp	r2, #37	; 0x25
 8003d82:	d1f9      	bne.n	8003d78 <_svfiprintf_r+0x50>
 8003d84:	ebba 0b04 	subs.w	fp, sl, r4
 8003d88:	d00b      	beq.n	8003da2 <_svfiprintf_r+0x7a>
 8003d8a:	465b      	mov	r3, fp
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7ff ff6d 	bl	8003c70 <__ssputs_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	f000 80aa 	beq.w	8003ef0 <_svfiprintf_r+0x1c8>
 8003d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d9e:	445a      	add	r2, fp
 8003da0:	9209      	str	r2, [sp, #36]	; 0x24
 8003da2:	f89a 3000 	ldrb.w	r3, [sl]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80a2 	beq.w	8003ef0 <_svfiprintf_r+0x1c8>
 8003dac:	2300      	movs	r3, #0
 8003dae:	f04f 32ff 	mov.w	r2, #4294967295
 8003db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003db6:	f10a 0a01 	add.w	sl, sl, #1
 8003dba:	9304      	str	r3, [sp, #16]
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc4:	4654      	mov	r4, sl
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dcc:	4851      	ldr	r0, [pc, #324]	; (8003f14 <_svfiprintf_r+0x1ec>)
 8003dce:	f7fc fa07 	bl	80001e0 <memchr>
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	b9d8      	cbnz	r0, 8003e0e <_svfiprintf_r+0xe6>
 8003dd6:	06d0      	lsls	r0, r2, #27
 8003dd8:	bf44      	itt	mi
 8003dda:	2320      	movmi	r3, #32
 8003ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de0:	0711      	lsls	r1, r2, #28
 8003de2:	bf44      	itt	mi
 8003de4:	232b      	movmi	r3, #43	; 0x2b
 8003de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dea:	f89a 3000 	ldrb.w	r3, [sl]
 8003dee:	2b2a      	cmp	r3, #42	; 0x2a
 8003df0:	d015      	beq.n	8003e1e <_svfiprintf_r+0xf6>
 8003df2:	9a07      	ldr	r2, [sp, #28]
 8003df4:	4654      	mov	r4, sl
 8003df6:	2000      	movs	r0, #0
 8003df8:	f04f 0c0a 	mov.w	ip, #10
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e02:	3b30      	subs	r3, #48	; 0x30
 8003e04:	2b09      	cmp	r3, #9
 8003e06:	d94e      	bls.n	8003ea6 <_svfiprintf_r+0x17e>
 8003e08:	b1b0      	cbz	r0, 8003e38 <_svfiprintf_r+0x110>
 8003e0a:	9207      	str	r2, [sp, #28]
 8003e0c:	e014      	b.n	8003e38 <_svfiprintf_r+0x110>
 8003e0e:	eba0 0308 	sub.w	r3, r0, r8
 8003e12:	fa09 f303 	lsl.w	r3, r9, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	46a2      	mov	sl, r4
 8003e1c:	e7d2      	b.n	8003dc4 <_svfiprintf_r+0x9c>
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	1d19      	adds	r1, r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	9103      	str	r1, [sp, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfbb      	ittet	lt
 8003e2a:	425b      	neglt	r3, r3
 8003e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e30:	9307      	strge	r3, [sp, #28]
 8003e32:	9307      	strlt	r3, [sp, #28]
 8003e34:	bfb8      	it	lt
 8003e36:	9204      	strlt	r2, [sp, #16]
 8003e38:	7823      	ldrb	r3, [r4, #0]
 8003e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e3c:	d10c      	bne.n	8003e58 <_svfiprintf_r+0x130>
 8003e3e:	7863      	ldrb	r3, [r4, #1]
 8003e40:	2b2a      	cmp	r3, #42	; 0x2a
 8003e42:	d135      	bne.n	8003eb0 <_svfiprintf_r+0x188>
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bfb8      	it	lt
 8003e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e54:	3402      	adds	r4, #2
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f24 <_svfiprintf_r+0x1fc>
 8003e5c:	7821      	ldrb	r1, [r4, #0]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4650      	mov	r0, sl
 8003e62:	f7fc f9bd 	bl	80001e0 <memchr>
 8003e66:	b140      	cbz	r0, 8003e7a <_svfiprintf_r+0x152>
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	eba0 000a 	sub.w	r0, r0, sl
 8003e6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e72:	9b04      	ldr	r3, [sp, #16]
 8003e74:	4303      	orrs	r3, r0
 8003e76:	3401      	adds	r4, #1
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7e:	4826      	ldr	r0, [pc, #152]	; (8003f18 <_svfiprintf_r+0x1f0>)
 8003e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e84:	2206      	movs	r2, #6
 8003e86:	f7fc f9ab 	bl	80001e0 <memchr>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d038      	beq.n	8003f00 <_svfiprintf_r+0x1d8>
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <_svfiprintf_r+0x1f4>)
 8003e90:	bb1b      	cbnz	r3, 8003eda <_svfiprintf_r+0x1b2>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	3307      	adds	r3, #7
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	9303      	str	r3, [sp, #12]
 8003e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea0:	4433      	add	r3, r6
 8003ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea4:	e767      	b.n	8003d76 <_svfiprintf_r+0x4e>
 8003ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eaa:	460c      	mov	r4, r1
 8003eac:	2001      	movs	r0, #1
 8003eae:	e7a5      	b.n	8003dfc <_svfiprintf_r+0xd4>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	3401      	adds	r4, #1
 8003eb4:	9305      	str	r3, [sp, #20]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f04f 0c0a 	mov.w	ip, #10
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec2:	3a30      	subs	r2, #48	; 0x30
 8003ec4:	2a09      	cmp	r2, #9
 8003ec6:	d903      	bls.n	8003ed0 <_svfiprintf_r+0x1a8>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0c5      	beq.n	8003e58 <_svfiprintf_r+0x130>
 8003ecc:	9105      	str	r1, [sp, #20]
 8003ece:	e7c3      	b.n	8003e58 <_svfiprintf_r+0x130>
 8003ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e7f0      	b.n	8003ebc <_svfiprintf_r+0x194>
 8003eda:	ab03      	add	r3, sp, #12
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	462a      	mov	r2, r5
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <_svfiprintf_r+0x1f8>)
 8003ee2:	a904      	add	r1, sp, #16
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f3af 8000 	nop.w
 8003eea:	1c42      	adds	r2, r0, #1
 8003eec:	4606      	mov	r6, r0
 8003eee:	d1d6      	bne.n	8003e9e <_svfiprintf_r+0x176>
 8003ef0:	89ab      	ldrh	r3, [r5, #12]
 8003ef2:	065b      	lsls	r3, r3, #25
 8003ef4:	f53f af2c 	bmi.w	8003d50 <_svfiprintf_r+0x28>
 8003ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efa:	b01d      	add	sp, #116	; 0x74
 8003efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f00:	ab03      	add	r3, sp, #12
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	462a      	mov	r2, r5
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <_svfiprintf_r+0x1f8>)
 8003f08:	a904      	add	r1, sp, #16
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	f000 f87a 	bl	8004004 <_printf_i>
 8003f10:	e7eb      	b.n	8003eea <_svfiprintf_r+0x1c2>
 8003f12:	bf00      	nop
 8003f14:	080044dc 	.word	0x080044dc
 8003f18:	080044e6 	.word	0x080044e6
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	08003c71 	.word	0x08003c71
 8003f24:	080044e2 	.word	0x080044e2

08003f28 <_printf_common>:
 8003f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	4699      	mov	r9, r3
 8003f30:	688a      	ldr	r2, [r1, #8]
 8003f32:	690b      	ldr	r3, [r1, #16]
 8003f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bfb8      	it	lt
 8003f3c:	4613      	movlt	r3, r2
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f44:	4607      	mov	r7, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	b10a      	cbz	r2, 8003f4e <_printf_common+0x26>
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	6033      	str	r3, [r6, #0]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	0699      	lsls	r1, r3, #26
 8003f52:	bf42      	ittt	mi
 8003f54:	6833      	ldrmi	r3, [r6, #0]
 8003f56:	3302      	addmi	r3, #2
 8003f58:	6033      	strmi	r3, [r6, #0]
 8003f5a:	6825      	ldr	r5, [r4, #0]
 8003f5c:	f015 0506 	ands.w	r5, r5, #6
 8003f60:	d106      	bne.n	8003f70 <_printf_common+0x48>
 8003f62:	f104 0a19 	add.w	sl, r4, #25
 8003f66:	68e3      	ldr	r3, [r4, #12]
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	42ab      	cmp	r3, r5
 8003f6e:	dc26      	bgt.n	8003fbe <_printf_common+0x96>
 8003f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f74:	1e13      	subs	r3, r2, #0
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	bf18      	it	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	0692      	lsls	r2, r2, #26
 8003f7e:	d42b      	bmi.n	8003fd8 <_printf_common+0xb0>
 8003f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f84:	4649      	mov	r1, r9
 8003f86:	4638      	mov	r0, r7
 8003f88:	47c0      	blx	r8
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d01e      	beq.n	8003fcc <_printf_common+0xa4>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	68e5      	ldr	r5, [r4, #12]
 8003f92:	6832      	ldr	r2, [r6, #0]
 8003f94:	f003 0306 	and.w	r3, r3, #6
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	bf08      	it	eq
 8003f9c:	1aad      	subeq	r5, r5, r2
 8003f9e:	68a3      	ldr	r3, [r4, #8]
 8003fa0:	6922      	ldr	r2, [r4, #16]
 8003fa2:	bf0c      	ite	eq
 8003fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fa8:	2500      	movne	r5, #0
 8003faa:	4293      	cmp	r3, r2
 8003fac:	bfc4      	itt	gt
 8003fae:	1a9b      	subgt	r3, r3, r2
 8003fb0:	18ed      	addgt	r5, r5, r3
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	341a      	adds	r4, #26
 8003fb6:	42b5      	cmp	r5, r6
 8003fb8:	d11a      	bne.n	8003ff0 <_printf_common+0xc8>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e008      	b.n	8003fd0 <_printf_common+0xa8>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4652      	mov	r2, sl
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	47c0      	blx	r8
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d103      	bne.n	8003fd4 <_printf_common+0xac>
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	e7c6      	b.n	8003f66 <_printf_common+0x3e>
 8003fd8:	18e1      	adds	r1, r4, r3
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	2030      	movs	r0, #48	; 0x30
 8003fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fe2:	4422      	add	r2, r4
 8003fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fec:	3302      	adds	r3, #2
 8003fee:	e7c7      	b.n	8003f80 <_printf_common+0x58>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d0e6      	beq.n	8003fcc <_printf_common+0xa4>
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7d9      	b.n	8003fb6 <_printf_common+0x8e>
	...

08004004 <_printf_i>:
 8004004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	460c      	mov	r4, r1
 800400a:	4691      	mov	r9, r2
 800400c:	7e27      	ldrb	r7, [r4, #24]
 800400e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004010:	2f78      	cmp	r7, #120	; 0x78
 8004012:	4680      	mov	r8, r0
 8004014:	469a      	mov	sl, r3
 8004016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800401a:	d807      	bhi.n	800402c <_printf_i+0x28>
 800401c:	2f62      	cmp	r7, #98	; 0x62
 800401e:	d80a      	bhi.n	8004036 <_printf_i+0x32>
 8004020:	2f00      	cmp	r7, #0
 8004022:	f000 80d8 	beq.w	80041d6 <_printf_i+0x1d2>
 8004026:	2f58      	cmp	r7, #88	; 0x58
 8004028:	f000 80a3 	beq.w	8004172 <_printf_i+0x16e>
 800402c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004034:	e03a      	b.n	80040ac <_printf_i+0xa8>
 8004036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800403a:	2b15      	cmp	r3, #21
 800403c:	d8f6      	bhi.n	800402c <_printf_i+0x28>
 800403e:	a001      	add	r0, pc, #4	; (adr r0, 8004044 <_printf_i+0x40>)
 8004040:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004044:	0800409d 	.word	0x0800409d
 8004048:	080040b1 	.word	0x080040b1
 800404c:	0800402d 	.word	0x0800402d
 8004050:	0800402d 	.word	0x0800402d
 8004054:	0800402d 	.word	0x0800402d
 8004058:	0800402d 	.word	0x0800402d
 800405c:	080040b1 	.word	0x080040b1
 8004060:	0800402d 	.word	0x0800402d
 8004064:	0800402d 	.word	0x0800402d
 8004068:	0800402d 	.word	0x0800402d
 800406c:	0800402d 	.word	0x0800402d
 8004070:	080041bd 	.word	0x080041bd
 8004074:	080040e1 	.word	0x080040e1
 8004078:	0800419f 	.word	0x0800419f
 800407c:	0800402d 	.word	0x0800402d
 8004080:	0800402d 	.word	0x0800402d
 8004084:	080041df 	.word	0x080041df
 8004088:	0800402d 	.word	0x0800402d
 800408c:	080040e1 	.word	0x080040e1
 8004090:	0800402d 	.word	0x0800402d
 8004094:	0800402d 	.word	0x0800402d
 8004098:	080041a7 	.word	0x080041a7
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	600a      	str	r2, [r1, #0]
 80040a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0a3      	b.n	80041f8 <_printf_i+0x1f4>
 80040b0:	6825      	ldr	r5, [r4, #0]
 80040b2:	6808      	ldr	r0, [r1, #0]
 80040b4:	062e      	lsls	r6, r5, #24
 80040b6:	f100 0304 	add.w	r3, r0, #4
 80040ba:	d50a      	bpl.n	80040d2 <_printf_i+0xce>
 80040bc:	6805      	ldr	r5, [r0, #0]
 80040be:	600b      	str	r3, [r1, #0]
 80040c0:	2d00      	cmp	r5, #0
 80040c2:	da03      	bge.n	80040cc <_printf_i+0xc8>
 80040c4:	232d      	movs	r3, #45	; 0x2d
 80040c6:	426d      	negs	r5, r5
 80040c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040cc:	485e      	ldr	r0, [pc, #376]	; (8004248 <_printf_i+0x244>)
 80040ce:	230a      	movs	r3, #10
 80040d0:	e019      	b.n	8004106 <_printf_i+0x102>
 80040d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040d6:	6805      	ldr	r5, [r0, #0]
 80040d8:	600b      	str	r3, [r1, #0]
 80040da:	bf18      	it	ne
 80040dc:	b22d      	sxthne	r5, r5
 80040de:	e7ef      	b.n	80040c0 <_printf_i+0xbc>
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	6825      	ldr	r5, [r4, #0]
 80040e4:	1d18      	adds	r0, r3, #4
 80040e6:	6008      	str	r0, [r1, #0]
 80040e8:	0628      	lsls	r0, r5, #24
 80040ea:	d501      	bpl.n	80040f0 <_printf_i+0xec>
 80040ec:	681d      	ldr	r5, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <_printf_i+0xf2>
 80040f0:	0669      	lsls	r1, r5, #25
 80040f2:	d5fb      	bpl.n	80040ec <_printf_i+0xe8>
 80040f4:	881d      	ldrh	r5, [r3, #0]
 80040f6:	4854      	ldr	r0, [pc, #336]	; (8004248 <_printf_i+0x244>)
 80040f8:	2f6f      	cmp	r7, #111	; 0x6f
 80040fa:	bf0c      	ite	eq
 80040fc:	2308      	moveq	r3, #8
 80040fe:	230a      	movne	r3, #10
 8004100:	2100      	movs	r1, #0
 8004102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004106:	6866      	ldr	r6, [r4, #4]
 8004108:	60a6      	str	r6, [r4, #8]
 800410a:	2e00      	cmp	r6, #0
 800410c:	bfa2      	ittt	ge
 800410e:	6821      	ldrge	r1, [r4, #0]
 8004110:	f021 0104 	bicge.w	r1, r1, #4
 8004114:	6021      	strge	r1, [r4, #0]
 8004116:	b90d      	cbnz	r5, 800411c <_printf_i+0x118>
 8004118:	2e00      	cmp	r6, #0
 800411a:	d04d      	beq.n	80041b8 <_printf_i+0x1b4>
 800411c:	4616      	mov	r6, r2
 800411e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004122:	fb03 5711 	mls	r7, r3, r1, r5
 8004126:	5dc7      	ldrb	r7, [r0, r7]
 8004128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800412c:	462f      	mov	r7, r5
 800412e:	42bb      	cmp	r3, r7
 8004130:	460d      	mov	r5, r1
 8004132:	d9f4      	bls.n	800411e <_printf_i+0x11a>
 8004134:	2b08      	cmp	r3, #8
 8004136:	d10b      	bne.n	8004150 <_printf_i+0x14c>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	07df      	lsls	r7, r3, #31
 800413c:	d508      	bpl.n	8004150 <_printf_i+0x14c>
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	6861      	ldr	r1, [r4, #4]
 8004142:	4299      	cmp	r1, r3
 8004144:	bfde      	ittt	le
 8004146:	2330      	movle	r3, #48	; 0x30
 8004148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800414c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004150:	1b92      	subs	r2, r2, r6
 8004152:	6122      	str	r2, [r4, #16]
 8004154:	f8cd a000 	str.w	sl, [sp]
 8004158:	464b      	mov	r3, r9
 800415a:	aa03      	add	r2, sp, #12
 800415c:	4621      	mov	r1, r4
 800415e:	4640      	mov	r0, r8
 8004160:	f7ff fee2 	bl	8003f28 <_printf_common>
 8004164:	3001      	adds	r0, #1
 8004166:	d14c      	bne.n	8004202 <_printf_i+0x1fe>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	b004      	add	sp, #16
 800416e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004172:	4835      	ldr	r0, [pc, #212]	; (8004248 <_printf_i+0x244>)
 8004174:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	680e      	ldr	r6, [r1, #0]
 800417c:	061f      	lsls	r7, r3, #24
 800417e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004182:	600e      	str	r6, [r1, #0]
 8004184:	d514      	bpl.n	80041b0 <_printf_i+0x1ac>
 8004186:	07d9      	lsls	r1, r3, #31
 8004188:	bf44      	itt	mi
 800418a:	f043 0320 	orrmi.w	r3, r3, #32
 800418e:	6023      	strmi	r3, [r4, #0]
 8004190:	b91d      	cbnz	r5, 800419a <_printf_i+0x196>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f023 0320 	bic.w	r3, r3, #32
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	2310      	movs	r3, #16
 800419c:	e7b0      	b.n	8004100 <_printf_i+0xfc>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	f043 0320 	orr.w	r3, r3, #32
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	2378      	movs	r3, #120	; 0x78
 80041a8:	4828      	ldr	r0, [pc, #160]	; (800424c <_printf_i+0x248>)
 80041aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ae:	e7e3      	b.n	8004178 <_printf_i+0x174>
 80041b0:	065e      	lsls	r6, r3, #25
 80041b2:	bf48      	it	mi
 80041b4:	b2ad      	uxthmi	r5, r5
 80041b6:	e7e6      	b.n	8004186 <_printf_i+0x182>
 80041b8:	4616      	mov	r6, r2
 80041ba:	e7bb      	b.n	8004134 <_printf_i+0x130>
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	6826      	ldr	r6, [r4, #0]
 80041c0:	6960      	ldr	r0, [r4, #20]
 80041c2:	1d1d      	adds	r5, r3, #4
 80041c4:	600d      	str	r5, [r1, #0]
 80041c6:	0635      	lsls	r5, r6, #24
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0x1cc>
 80041cc:	6018      	str	r0, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <_printf_i+0x1d2>
 80041d0:	0671      	lsls	r1, r6, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0x1c8>
 80041d4:	8018      	strh	r0, [r3, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	4616      	mov	r6, r2
 80041dc:	e7ba      	b.n	8004154 <_printf_i+0x150>
 80041de:	680b      	ldr	r3, [r1, #0]
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	600a      	str	r2, [r1, #0]
 80041e4:	681e      	ldr	r6, [r3, #0]
 80041e6:	6862      	ldr	r2, [r4, #4]
 80041e8:	2100      	movs	r1, #0
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7fb fff8 	bl	80001e0 <memchr>
 80041f0:	b108      	cbz	r0, 80041f6 <_printf_i+0x1f2>
 80041f2:	1b80      	subs	r0, r0, r6
 80041f4:	6060      	str	r0, [r4, #4]
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	6123      	str	r3, [r4, #16]
 80041fa:	2300      	movs	r3, #0
 80041fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004200:	e7a8      	b.n	8004154 <_printf_i+0x150>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d0ab      	beq.n	8004168 <_printf_i+0x164>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	079b      	lsls	r3, r3, #30
 8004214:	d413      	bmi.n	800423e <_printf_i+0x23a>
 8004216:	68e0      	ldr	r0, [r4, #12]
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	4298      	cmp	r0, r3
 800421c:	bfb8      	it	lt
 800421e:	4618      	movlt	r0, r3
 8004220:	e7a4      	b.n	800416c <_printf_i+0x168>
 8004222:	2301      	movs	r3, #1
 8004224:	4632      	mov	r2, r6
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	47d0      	blx	sl
 800422c:	3001      	adds	r0, #1
 800422e:	d09b      	beq.n	8004168 <_printf_i+0x164>
 8004230:	3501      	adds	r5, #1
 8004232:	68e3      	ldr	r3, [r4, #12]
 8004234:	9903      	ldr	r1, [sp, #12]
 8004236:	1a5b      	subs	r3, r3, r1
 8004238:	42ab      	cmp	r3, r5
 800423a:	dcf2      	bgt.n	8004222 <_printf_i+0x21e>
 800423c:	e7eb      	b.n	8004216 <_printf_i+0x212>
 800423e:	2500      	movs	r5, #0
 8004240:	f104 0619 	add.w	r6, r4, #25
 8004244:	e7f5      	b.n	8004232 <_printf_i+0x22e>
 8004246:	bf00      	nop
 8004248:	080044ed 	.word	0x080044ed
 800424c:	080044fe 	.word	0x080044fe

08004250 <memcpy>:
 8004250:	440a      	add	r2, r1
 8004252:	4291      	cmp	r1, r2
 8004254:	f100 33ff 	add.w	r3, r0, #4294967295
 8004258:	d100      	bne.n	800425c <memcpy+0xc>
 800425a:	4770      	bx	lr
 800425c:	b510      	push	{r4, lr}
 800425e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004266:	4291      	cmp	r1, r2
 8004268:	d1f9      	bne.n	800425e <memcpy+0xe>
 800426a:	bd10      	pop	{r4, pc}

0800426c <memmove>:
 800426c:	4288      	cmp	r0, r1
 800426e:	b510      	push	{r4, lr}
 8004270:	eb01 0402 	add.w	r4, r1, r2
 8004274:	d902      	bls.n	800427c <memmove+0x10>
 8004276:	4284      	cmp	r4, r0
 8004278:	4623      	mov	r3, r4
 800427a:	d807      	bhi.n	800428c <memmove+0x20>
 800427c:	1e43      	subs	r3, r0, #1
 800427e:	42a1      	cmp	r1, r4
 8004280:	d008      	beq.n	8004294 <memmove+0x28>
 8004282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800428a:	e7f8      	b.n	800427e <memmove+0x12>
 800428c:	4402      	add	r2, r0
 800428e:	4601      	mov	r1, r0
 8004290:	428a      	cmp	r2, r1
 8004292:	d100      	bne.n	8004296 <memmove+0x2a>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800429a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800429e:	e7f7      	b.n	8004290 <memmove+0x24>

080042a0 <_free_r>:
 80042a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042a2:	2900      	cmp	r1, #0
 80042a4:	d048      	beq.n	8004338 <_free_r+0x98>
 80042a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042aa:	9001      	str	r0, [sp, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f1a1 0404 	sub.w	r4, r1, #4
 80042b2:	bfb8      	it	lt
 80042b4:	18e4      	addlt	r4, r4, r3
 80042b6:	f000 f8d3 	bl	8004460 <__malloc_lock>
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <_free_r+0x9c>)
 80042bc:	9801      	ldr	r0, [sp, #4]
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	4615      	mov	r5, r2
 80042c2:	b933      	cbnz	r3, 80042d2 <_free_r+0x32>
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	6014      	str	r4, [r2, #0]
 80042c8:	b003      	add	sp, #12
 80042ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ce:	f000 b8cd 	b.w	800446c <__malloc_unlock>
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	d90b      	bls.n	80042ee <_free_r+0x4e>
 80042d6:	6821      	ldr	r1, [r4, #0]
 80042d8:	1862      	adds	r2, r4, r1
 80042da:	4293      	cmp	r3, r2
 80042dc:	bf04      	itt	eq
 80042de:	681a      	ldreq	r2, [r3, #0]
 80042e0:	685b      	ldreq	r3, [r3, #4]
 80042e2:	6063      	str	r3, [r4, #4]
 80042e4:	bf04      	itt	eq
 80042e6:	1852      	addeq	r2, r2, r1
 80042e8:	6022      	streq	r2, [r4, #0]
 80042ea:	602c      	str	r4, [r5, #0]
 80042ec:	e7ec      	b.n	80042c8 <_free_r+0x28>
 80042ee:	461a      	mov	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b10b      	cbz	r3, 80042f8 <_free_r+0x58>
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	d9fa      	bls.n	80042ee <_free_r+0x4e>
 80042f8:	6811      	ldr	r1, [r2, #0]
 80042fa:	1855      	adds	r5, r2, r1
 80042fc:	42a5      	cmp	r5, r4
 80042fe:	d10b      	bne.n	8004318 <_free_r+0x78>
 8004300:	6824      	ldr	r4, [r4, #0]
 8004302:	4421      	add	r1, r4
 8004304:	1854      	adds	r4, r2, r1
 8004306:	42a3      	cmp	r3, r4
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	d1dd      	bne.n	80042c8 <_free_r+0x28>
 800430c:	681c      	ldr	r4, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	6053      	str	r3, [r2, #4]
 8004312:	4421      	add	r1, r4
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	e7d7      	b.n	80042c8 <_free_r+0x28>
 8004318:	d902      	bls.n	8004320 <_free_r+0x80>
 800431a:	230c      	movs	r3, #12
 800431c:	6003      	str	r3, [r0, #0]
 800431e:	e7d3      	b.n	80042c8 <_free_r+0x28>
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	1961      	adds	r1, r4, r5
 8004324:	428b      	cmp	r3, r1
 8004326:	bf04      	itt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	6063      	str	r3, [r4, #4]
 800432e:	bf04      	itt	eq
 8004330:	1949      	addeq	r1, r1, r5
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	6054      	str	r4, [r2, #4]
 8004336:	e7c7      	b.n	80042c8 <_free_r+0x28>
 8004338:	b003      	add	sp, #12
 800433a:	bd30      	pop	{r4, r5, pc}
 800433c:	200000a4 	.word	0x200000a4

08004340 <_malloc_r>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	1ccd      	adds	r5, r1, #3
 8004344:	f025 0503 	bic.w	r5, r5, #3
 8004348:	3508      	adds	r5, #8
 800434a:	2d0c      	cmp	r5, #12
 800434c:	bf38      	it	cc
 800434e:	250c      	movcc	r5, #12
 8004350:	2d00      	cmp	r5, #0
 8004352:	4606      	mov	r6, r0
 8004354:	db01      	blt.n	800435a <_malloc_r+0x1a>
 8004356:	42a9      	cmp	r1, r5
 8004358:	d903      	bls.n	8004362 <_malloc_r+0x22>
 800435a:	230c      	movs	r3, #12
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	2000      	movs	r0, #0
 8004360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004362:	f000 f87d 	bl	8004460 <__malloc_lock>
 8004366:	4921      	ldr	r1, [pc, #132]	; (80043ec <_malloc_r+0xac>)
 8004368:	680a      	ldr	r2, [r1, #0]
 800436a:	4614      	mov	r4, r2
 800436c:	b99c      	cbnz	r4, 8004396 <_malloc_r+0x56>
 800436e:	4f20      	ldr	r7, [pc, #128]	; (80043f0 <_malloc_r+0xb0>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b923      	cbnz	r3, 800437e <_malloc_r+0x3e>
 8004374:	4621      	mov	r1, r4
 8004376:	4630      	mov	r0, r6
 8004378:	f000 f862 	bl	8004440 <_sbrk_r>
 800437c:	6038      	str	r0, [r7, #0]
 800437e:	4629      	mov	r1, r5
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f85d 	bl	8004440 <_sbrk_r>
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	d123      	bne.n	80043d2 <_malloc_r+0x92>
 800438a:	230c      	movs	r3, #12
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	4630      	mov	r0, r6
 8004390:	f000 f86c 	bl	800446c <__malloc_unlock>
 8004394:	e7e3      	b.n	800435e <_malloc_r+0x1e>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	1b5b      	subs	r3, r3, r5
 800439a:	d417      	bmi.n	80043cc <_malloc_r+0x8c>
 800439c:	2b0b      	cmp	r3, #11
 800439e:	d903      	bls.n	80043a8 <_malloc_r+0x68>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	441c      	add	r4, r3
 80043a4:	6025      	str	r5, [r4, #0]
 80043a6:	e004      	b.n	80043b2 <_malloc_r+0x72>
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	42a2      	cmp	r2, r4
 80043ac:	bf0c      	ite	eq
 80043ae:	600b      	streq	r3, [r1, #0]
 80043b0:	6053      	strne	r3, [r2, #4]
 80043b2:	4630      	mov	r0, r6
 80043b4:	f000 f85a 	bl	800446c <__malloc_unlock>
 80043b8:	f104 000b 	add.w	r0, r4, #11
 80043bc:	1d23      	adds	r3, r4, #4
 80043be:	f020 0007 	bic.w	r0, r0, #7
 80043c2:	1ac2      	subs	r2, r0, r3
 80043c4:	d0cc      	beq.n	8004360 <_malloc_r+0x20>
 80043c6:	1a1b      	subs	r3, r3, r0
 80043c8:	50a3      	str	r3, [r4, r2]
 80043ca:	e7c9      	b.n	8004360 <_malloc_r+0x20>
 80043cc:	4622      	mov	r2, r4
 80043ce:	6864      	ldr	r4, [r4, #4]
 80043d0:	e7cc      	b.n	800436c <_malloc_r+0x2c>
 80043d2:	1cc4      	adds	r4, r0, #3
 80043d4:	f024 0403 	bic.w	r4, r4, #3
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d0e3      	beq.n	80043a4 <_malloc_r+0x64>
 80043dc:	1a21      	subs	r1, r4, r0
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f82e 	bl	8004440 <_sbrk_r>
 80043e4:	3001      	adds	r0, #1
 80043e6:	d1dd      	bne.n	80043a4 <_malloc_r+0x64>
 80043e8:	e7cf      	b.n	800438a <_malloc_r+0x4a>
 80043ea:	bf00      	nop
 80043ec:	200000a4 	.word	0x200000a4
 80043f0:	200000a8 	.word	0x200000a8

080043f4 <_realloc_r>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	4607      	mov	r7, r0
 80043f8:	4614      	mov	r4, r2
 80043fa:	460e      	mov	r6, r1
 80043fc:	b921      	cbnz	r1, 8004408 <_realloc_r+0x14>
 80043fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004402:	4611      	mov	r1, r2
 8004404:	f7ff bf9c 	b.w	8004340 <_malloc_r>
 8004408:	b922      	cbnz	r2, 8004414 <_realloc_r+0x20>
 800440a:	f7ff ff49 	bl	80042a0 <_free_r>
 800440e:	4625      	mov	r5, r4
 8004410:	4628      	mov	r0, r5
 8004412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004414:	f000 f830 	bl	8004478 <_malloc_usable_size_r>
 8004418:	42a0      	cmp	r0, r4
 800441a:	d20f      	bcs.n	800443c <_realloc_r+0x48>
 800441c:	4621      	mov	r1, r4
 800441e:	4638      	mov	r0, r7
 8004420:	f7ff ff8e 	bl	8004340 <_malloc_r>
 8004424:	4605      	mov	r5, r0
 8004426:	2800      	cmp	r0, #0
 8004428:	d0f2      	beq.n	8004410 <_realloc_r+0x1c>
 800442a:	4631      	mov	r1, r6
 800442c:	4622      	mov	r2, r4
 800442e:	f7ff ff0f 	bl	8004250 <memcpy>
 8004432:	4631      	mov	r1, r6
 8004434:	4638      	mov	r0, r7
 8004436:	f7ff ff33 	bl	80042a0 <_free_r>
 800443a:	e7e9      	b.n	8004410 <_realloc_r+0x1c>
 800443c:	4635      	mov	r5, r6
 800443e:	e7e7      	b.n	8004410 <_realloc_r+0x1c>

08004440 <_sbrk_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4d06      	ldr	r5, [pc, #24]	; (800445c <_sbrk_r+0x1c>)
 8004444:	2300      	movs	r3, #0
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	f7fc fc9e 	bl	8000d8c <_sbrk>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_sbrk_r+0x1a>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_sbrk_r+0x1a>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	2000024c 	.word	0x2000024c

08004460 <__malloc_lock>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__malloc_lock+0x8>)
 8004462:	f000 b811 	b.w	8004488 <__retarget_lock_acquire_recursive>
 8004466:	bf00      	nop
 8004468:	20000254 	.word	0x20000254

0800446c <__malloc_unlock>:
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <__malloc_unlock+0x8>)
 800446e:	f000 b80c 	b.w	800448a <__retarget_lock_release_recursive>
 8004472:	bf00      	nop
 8004474:	20000254 	.word	0x20000254

08004478 <_malloc_usable_size_r>:
 8004478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447c:	1f18      	subs	r0, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	bfbc      	itt	lt
 8004482:	580b      	ldrlt	r3, [r1, r0]
 8004484:	18c0      	addlt	r0, r0, r3
 8004486:	4770      	bx	lr

08004488 <__retarget_lock_acquire_recursive>:
 8004488:	4770      	bx	lr

0800448a <__retarget_lock_release_recursive>:
 800448a:	4770      	bx	lr

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
