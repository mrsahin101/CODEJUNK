
015_ETHERNET_RMII_TCP_IP_CLIENT_CONFIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  0801029c  0801029c  0002029c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f20  08012f20  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012f20  08012f20  00022f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f28  08012f28  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f28  08012f28  00022f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f2c  08012f2c  00022f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012f30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a68  20000078  08012fa8  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ae0  08012fa8  00038ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030da7  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b65  00000000  00000000  00060e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  000669b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00067fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031cda  00000000  00000000  00069548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ce5  00000000  00000000  0009b222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001049bd  00000000  00000000  000c0f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c58c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a4  00000000  00000000  001c5918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010284 	.word	0x08010284

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08010284 	.word	0x08010284

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SCB_EnableICache+0x48>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SCB_EnableICache+0x48>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d8:	f3bf 8f4f 	dsb	sy
}
 80005dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SCB_EnableDCache+0x84>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <SCB_EnableDCache+0x84>)
 800060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0b5b      	lsrs	r3, r3, #13
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000622:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800062c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <SCB_EnableDCache+0x84>)
 8000634:	4313      	orrs	r3, r2
 8000636:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1ef      	bne.n	8000624 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	60fa      	str	r2, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1e5      	bne.n	800061a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064e:	f3bf 8f4f 	dsb	sy
}
 8000652:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <SCB_EnableDCache+0x84>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <SCB_EnableDCache+0x84>)
 800065a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000680:	f000 f926 	bl	80008d0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000684:	f7ff ff90 	bl	80005a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000688:	f7ff ffb4 	bl	80005f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fcc8 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f816 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f8d4 	bl	8000840 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000698:	f003 fb20 	bl	8003cdc <MX_LWIP_Init>
  MX_TIM1_Init();
 800069c:	f000 f87c 	bl	8000798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x3c>)
 80006a2:	f002 feab 	bl	80033fc <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 80006a6:	f000 fae1 	bl	8000c6c <tcp_client_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <main+0x40>)
 80006ac:	f003 ff00 	bl	80044b0 <ethernetif_input>
	  	  sys_check_timeouts();
 80006b0:	f00b fe74 	bl	800c39c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006b4:	e7f9      	b.n	80006aa <main+0x2e>
 80006b6:	bf00      	nop
 80006b8:	20000260 	.word	0x20000260
 80006bc:	2000022c 	.word	0x2000022c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00e fc0c 	bl	800eeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <SystemClock_Config+0xd0>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemClock_Config+0xd4>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800072c:	23d8      	movs	r3, #216	; 0xd8
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f987 	bl	8002a50 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000748:	f000 f8ee 	bl	8000928 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f002 f930 	bl	80029b0 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 f8e7 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fc0d 	bl	8002f98 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000784:	f000 f8d0 	bl	8000928 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_TIM1_Init+0xa4>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007be:	f245 425f 	movw	r2, #21599	; 0x545f
 80007c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80007d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007e6:	f002 fdb1 	bl	800334c <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 f89a 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM1_Init+0xa0>)
 8000802:	f002 ff93 	bl	800372c <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800080c:	f000 f88c 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM1_Init+0xa0>)
 8000822:	f003 f9af 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800082c:	f000 f87c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000260 	.word	0x20000260
 800083c:	40010000 	.word	0x40010000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a20      	ldr	r2, [pc, #128]	; (80008cc <MX_GPIO_Init+0x8c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0x8c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_GPIO_Init+0x8c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_GPIO_Init+0x8c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_GPIO_Init+0x8c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <MX_GPIO_Init+0x8c>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_GPIO_Init+0x8c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

}
 80008be:	bf00      	nop
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008e2:	f000 fd39 	bl	8001358 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80008f2:	230d      	movs	r3, #13
 80008f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008fe:	2303      	movs	r3, #3
 8000900:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000902:	2301      	movs	r3, #1
 8000904:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000906:	2301      	movs	r3, #1
 8000908:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000912:	463b      	mov	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fd57 	bl	80013c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800091a:	2004      	movs	r0, #4
 800091c:	f000 fd34 	bl	8001388 <HAL_MPU_Enable>

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x44>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_TIM_Base_MspInit+0x44>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d113      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_TIM_Base_MspInit+0x48>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <HAL_TIM_Base_MspInit+0x48>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_TIM_Base_MspInit+0x48>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2019      	movs	r0, #25
 80009ac:	f000 fc9d 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009b0:	2019      	movs	r0, #25
 80009b2:	f000 fcb6 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010000 	.word	0x40010000
 80009c4:	40023800 	.word	0x40023800

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 fb4a 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a22:	f002 fd63 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000260 	.word	0x20000260

08000a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	return 1;
 8000a34:	2301      	movs	r3, #1
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_kill>:

int _kill(int pid, int sig)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_kill+0x20>)
 8000a4c:	2216      	movs	r2, #22
 8000a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20008ad0 	.word	0x20008ad0

08000a64 <_exit>:

void _exit (int status)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffe5 	bl	8000a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a76:	e7fe      	b.n	8000a76 <_exit+0x12>

08000a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00a      	b.n	8000aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a8a:	f3af 8000 	nop.w
 8000a8e:	4601      	mov	r1, r0
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	b2ca      	uxtb	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <_read+0x12>
	}

return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e009      	b.n	8000ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf1      	blt.n	8000ac4 <_write+0x12>
	}
	return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_close>:

int _close(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return -1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b12:	605a      	str	r2, [r3, #4]
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_isatty>:

int _isatty(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return 1;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d205      	bcs.n	8000b90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <_sbrk+0x6c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20050000 	.word	0x20050000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	20000094 	.word	0x20000094
 8000bbc:	20008ae0 	.word	0x20008ae0
 8000bc0:	20008ad0 	.word	0x20008ad0

08000bc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b09d      	sub	sp, #116	; 0x74
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending STM_2 %d\n", counter);
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4919      	ldr	r1, [pc, #100]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00e f9d6 	bl	800efac <siprintf>
 8000c00:	66f8      	str	r0, [r7, #108]	; 0x6c

	if (counter !=0)
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d023      	beq.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c10:	6814      	ldr	r4, [r2, #0]
 8000c12:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c16:	4619      	mov	r1, r3
 8000c18:	2036      	movs	r0, #54	; 0x36
 8000c1a:	f004 fcf5 	bl	8005608 <pbuf_alloc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c2a:	b292      	uxth	r2, r2
 8000c2c:	f107 0108 	add.w	r1, r7, #8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fa29 	bl	8006088 <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f928 	bl	8000e96 <tcp_client_send>

		pbuf_free(esTx->p);
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 ffbf 	bl	8005bd0 <pbuf_free>
	}

}
 8000c52:	bf00      	nop
 8000c54:	3774      	adds	r7, #116	; 0x74
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000098 	.word	0x20000098
 8000c60:	0801029c 	.word	0x0801029c
 8000c64:	2000009c 	.word	0x2000009c
 8000c68:	200000a0 	.word	0x200000a0

08000c6c <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000c72:	f006 fdfd 	bl	8007870 <tcp_new>
 8000c76:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168,3, 206);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <tcp_client_init+0x28>)
 8000c7a:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 9000, tcp_client_connected);
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <tcp_client_init+0x2c>)
 8000c80:	f242 3228 	movw	r2, #9000	; 0x2328
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f005 feb9 	bl	80069fc <tcp_connect>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	ce03a8c0 	.word	0xce03a8c0
 8000c98:	08000c9d 	.word	0x08000c9d

08000c9c <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000caa:	200c      	movs	r0, #12
 8000cac:	f003 ffc4 	bl	8004c38 <mem_malloc>
 8000cb0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d023      	beq.n	8000d00 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000cd0:	6939      	ldr	r1, [r7, #16]
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f006 fdd4 	bl	8007880 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000cd8:	490f      	ldr	r1, [pc, #60]	; (8000d18 <tcp_client_connected+0x7c>)
 8000cda:	68b8      	ldr	r0, [r7, #8]
 8000cdc:	f006 fde2 	bl	80078a4 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <tcp_client_connected+0x80>)
 8000ce4:	68b8      	ldr	r0, [r7, #8]
 8000ce6:	f006 fe43 	bl	8007970 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <tcp_client_connected+0x84>)
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f006 fdfb 	bl	80078e8 <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	68b8      	ldr	r0, [r7, #8]
 8000cf6:	f000 f943 	bl	8000f80 <tcp_client_handle>

    ret_err = ERR_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	75fb      	strb	r3, [r7, #23]
 8000cfe:	e005      	b.n	8000d0c <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000d00:	6939      	ldr	r1, [r7, #16]
 8000d02:	68b8      	ldr	r0, [r7, #8]
 8000d04:	f000 f915 	bl	8000f32 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08000d25 	.word	0x08000d25
 8000d1c:	08000e15 	.word	0x08000e15
 8000d20:	08000e5d 	.word	0x08000e5d

08000d24 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <tcp_client_recv+0x20>
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <tcp_client_recv+0xe4>)
 8000d3a:	22e0      	movs	r2, #224	; 0xe0
 8000d3c:	4933      	ldr	r1, [pc, #204]	; (8000e0c <tcp_client_recv+0xe8>)
 8000d3e:	4834      	ldr	r0, [pc, #208]	; (8000e10 <tcp_client_recv+0xec>)
 8000d40:	f00e f8dc 	bl	800eefc <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f000 f8e7 	bl	8000f32 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	75fb      	strb	r3, [r7, #23]
 8000d68:	e047      	b.n	8000dfa <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f004 ff26 	bl	8005bd0 <pbuf_free>
    }
    ret_err = err;
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	75fb      	strb	r3, [r7, #23]
 8000d88:	e037      	b.n	8000dfa <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d112      	bne.n	8000db8 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	891b      	ldrh	r3, [r3, #8]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68b8      	ldr	r0, [r7, #8]
 8000da0:	f005 fd96 	bl	80068d0 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000da4:	6939      	ldr	r1, [r7, #16]
 8000da6:	68b8      	ldr	r0, [r7, #8]
 8000da8:	f000 f8ea 	bl	8000f80 <tcp_client_handle>

    pbuf_free(p);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f004 ff0f 	bl	8005bd0 <pbuf_free>

    ret_err = ERR_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
 8000db6:	e020      	b.n	8000dfa <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d10e      	bne.n	8000dde <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	891b      	ldrh	r3, [r3, #8]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	68b8      	ldr	r0, [r7, #8]
 8000dc8:	f005 fd82 	bl	80068d0 <tcp_recved>
    es->p = NULL;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f004 fefc 	bl	8005bd0 <pbuf_free>
    ret_err = ERR_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	75fb      	strb	r3, [r7, #23]
 8000ddc:	e00d      	b.n	8000dfa <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	891b      	ldrh	r3, [r3, #8]
 8000de2:	4619      	mov	r1, r3
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	f005 fd73 	bl	80068d0 <tcp_recved>
    es->p = NULL;
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f004 feed 	bl	8005bd0 <pbuf_free>
    ret_err = ERR_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	080102b0 	.word	0x080102b0
 8000e0c:	080102cc 	.word	0x080102cc
 8000e10:	080102d8 	.word	0x080102d8

08000e14 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00e      	beq.n	8000e46 <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d107      	bne.n	8000e40 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d103      	bne.n	8000e40 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f000 f879 	bl	8000f32 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e004      	b.n	8000e50 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f005 fcdc 	bl	8006804 <tcp_abort>
    ret_err = ERR_ABRT;
 8000e4c:	23f3      	movs	r3, #243	; 0xf3
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2200      	movs	r2, #0
 8000e72:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d103      	bne.n	8000e8c <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000e84:	6979      	ldr	r1, [r7, #20]
 8000e86:	68b8      	ldr	r0, [r7, #8]
 8000e88:	f000 f853 	bl	8000f32 <tcp_client_connection_close>
  }
  return ERR_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000ea4:	e031      	b.n	8000f0a <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	6859      	ldr	r1, [r3, #4]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	895a      	ldrh	r2, [r3, #10]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f009 fc08 	bl	800a6cc <tcp_write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d118      	bne.n	8000efa <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	895b      	ldrh	r3, [r3, #10]
 8000ecc:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 ff14 	bl	8005d10 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000ee8:	6938      	ldr	r0, [r7, #16]
 8000eea:	f004 fe71 	bl	8005bd0 <pbuf_free>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f7      	beq.n	8000ee8 <tcp_client_send+0x52>
 8000ef8:	e007      	b.n	8000f0a <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8000efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f02:	d102      	bne.n	8000f0a <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10b      	bne.n	8000f2a <tcp_client_send+0x94>
         (es->p != NULL) &&
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	895a      	ldrh	r2, [r3, #10]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d9bd      	bls.n	8000ea6 <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f006 fc9e 	bl	8007880 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f006 fcce 	bl	80078e8 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f006 fca8 	bl	80078a4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f006 fce8 	bl	800792c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f006 fd05 	bl	8007970 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f003 fcfd 	bl	800496c <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f005 fb5c 	bl	8006630 <tcp_close>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8b1b      	ldrh	r3, [r3, #24]
 8000f94:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00c ffac 	bl	800def8 <ip4addr_ntoa>
 8000fa0:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8000fa2:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <tcp_client_handle+0x40>)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <tcp_client_handle+0x44>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]

	counter++;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <tcp_client_handle+0x48>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <tcp_client_handle+0x48>)
 8000fb6:	6013      	str	r3, [r2, #0]

}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	200000a0 	.word	0x200000a0
 8000fc8:	20000098 	.word	0x20000098

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe8:	4c0b      	ldr	r4, [pc, #44]	; (8001018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff6:	f7ff fde5 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f00d ff1d 	bl	800ee38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fb3d 	bl	800067c <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001010:	08012f30 	.word	0x08012f30
  ldr r2, =_sbss
 8001014:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001018:	20008ae0 	.word	0x20008ae0

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x28>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f94f 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fc7a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f967 	bl	800133e <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f92f 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	200002ac 	.word	0x200002ac

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200002ac 	.word	0x200002ac

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff3e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff31 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa2 	bl	8001290 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800135c:	f3bf 8f5f 	dmb	sy
}
 8001360:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_MPU_Disable+0x28>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_MPU_Disable+0x28>)
 8001368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_MPU_Disable+0x2c>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	e000ed90 	.word	0xe000ed90

08001388 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_MPU_Enable+0x38>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MPU_Enable+0x3c>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_MPU_Enable+0x3c>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013a6:	f3bf 8f4f 	dsb	sy
}
 80013aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ac:	f3bf 8f6f 	isb	sy
}
 80013b0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed90 	.word	0xe000ed90
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	785a      	ldrb	r2, [r3, #1]
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_MPU_ConfigRegion+0x84>)
 80013d6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d029      	beq.n	8001434 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_MPU_ConfigRegion+0x84>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7adb      	ldrb	r3, [r3, #11]
 80013f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7a9b      	ldrb	r3, [r3, #10]
 80013fa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001404:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7b9b      	ldrb	r3, [r3, #14]
 800140a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800140c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7bdb      	ldrb	r3, [r3, #15]
 8001412:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001414:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a5b      	ldrb	r3, [r3, #9]
 800141a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800141c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7a1b      	ldrb	r3, [r3, #8]
 8001422:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001424:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800142e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001430:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001432:	e005      	b.n	8001440 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_MPU_ConfigRegion+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_MPU_ConfigRegion+0x84>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed90 	.word	0xe000ed90

08001450 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001460:	4ba9      	ldr	r3, [pc, #676]	; (8001708 <HAL_ETH_Init+0x2b8>)
 8001462:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e181      	b.n	800177a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f002 fd58 	bl	8003f40 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b9e      	ldr	r3, [pc, #632]	; (800170c <HAL_ETH_Init+0x2bc>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	4a9d      	ldr	r2, [pc, #628]	; (800170c <HAL_ETH_Init+0x2bc>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6453      	str	r3, [r2, #68]	; 0x44
 800149c:	4b9b      	ldr	r3, [pc, #620]	; (800170c <HAL_ETH_Init+0x2bc>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <HAL_ETH_Init+0x2c0>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a98      	ldr	r2, [pc, #608]	; (8001710 <HAL_ETH_Init+0x2c0>)
 80014ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <HAL_ETH_Init+0x2c0>)
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4994      	ldr	r1, [pc, #592]	; (8001710 <HAL_ETH_Init+0x2c0>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014da:	f7ff fdfb 	bl	80010d4 <HAL_GetTick>
 80014de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014e0:	e011      	b.n	8001506 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014e2:	f7ff fdf7 	bl	80010d4 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f0:	d909      	bls.n	8001506 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e139      	b.n	800177a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e4      	bne.n	80014e2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f023 031c 	bic.w	r3, r3, #28
 8001526:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001528:	f001 ff04 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 800152c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4a78      	ldr	r2, [pc, #480]	; (8001714 <HAL_ETH_Init+0x2c4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d908      	bls.n	8001548 <HAL_ETH_Init+0xf8>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_ETH_Init+0x2c8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d804      	bhi.n	8001548 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e027      	b.n	8001598 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_ETH_Init+0x2c8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d908      	bls.n	8001562 <HAL_ETH_Init+0x112>
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	4a6d      	ldr	r2, [pc, #436]	; (8001708 <HAL_ETH_Init+0x2b8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d204      	bcs.n	8001562 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f043 030c 	orr.w	r3, r3, #12
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e01a      	b.n	8001598 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4a68      	ldr	r2, [pc, #416]	; (8001708 <HAL_ETH_Init+0x2b8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d303      	bcc.n	8001572 <HAL_ETH_Init+0x122>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4a6b      	ldr	r2, [pc, #428]	; (800171c <HAL_ETH_Init+0x2cc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d911      	bls.n	8001596 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4a69      	ldr	r2, [pc, #420]	; (800171c <HAL_ETH_Init+0x2cc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d908      	bls.n	800158c <HAL_ETH_Init+0x13c>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4a68      	ldr	r2, [pc, #416]	; (8001720 <HAL_ETH_Init+0x2d0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d804      	bhi.n	800158c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e005      	b.n	8001598 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	e000      	b.n	8001598 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001596:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fb98 	bl	8001cdc <HAL_ETH_WritePHYRegister>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fd4d 	bl	8002058 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0d7      	b.n	800177a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80015ca:	20ff      	movs	r0, #255	; 0xff
 80015cc:	f7ff fd8e 	bl	80010ec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a5 	beq.w	8001724 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015da:	f7ff fd7b 	bl	80010d4 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	461a      	mov	r2, r3
 80015e6:	2101      	movs	r1, #1
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb0f 	bl	8001c0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015ee:	f7ff fd71 	bl	80010d4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d90f      	bls.n	8001620 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fd26 	bl	8002058 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0ac      	b.n	800177a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0da      	beq.n	80015e0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800162a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fb53 	bl	8001cdc <HAL_ETH_WritePHYRegister>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fd08 	bl	8002058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001650:	2301      	movs	r3, #1
 8001652:	e092      	b.n	800177a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fd3e 	bl	80010d4 <HAL_GetTick>
 8001658:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	461a      	mov	r2, r3
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fad2 	bl	8001c0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001668:	f7ff fd34 	bl	80010d4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d90f      	bls.n	800169a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800167e:	6939      	ldr	r1, [r7, #16]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fce9 	bl	8002058 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e06f      	b.n	800177a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0da      	beq.n	800165a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	461a      	mov	r2, r3
 80016aa:	2110      	movs	r1, #16
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 faad 	bl	8001c0c <HAL_ETH_ReadPHYRegister>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016bc:	6939      	ldr	r1, [r7, #16]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fcca 	bl	8002058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016cc:	2301      	movs	r3, #1
 80016ce:	e054      	b.n	800177a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	e002      	b.n	80016ea <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e035      	b.n	8001768 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e030      	b.n	8001768 <HAL_ETH_Init+0x318>
 8001706:	bf00      	nop
 8001708:	03938700 	.word	0x03938700
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	01312cff 	.word	0x01312cff
 8001718:	02160ebf 	.word	0x02160ebf
 800171c:	05f5e0ff 	.word	0x05f5e0ff
 8001720:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001734:	4313      	orrs	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 facd 	bl	8001cdc <HAL_ETH_WritePHYRegister>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fc82 	bl	8002058 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e00c      	b.n	800177a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001760:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001764:	f7ff fcc2 	bl	80010ec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001768:	6939      	ldr	r1, [r7, #16]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fc74 	bl	8002058 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop

08001784 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ETH_DMATxDescListInit+0x20>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e052      	b.n	800184a <HAL_ETH_DMATxDescListInit+0xc6>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e030      	b.n	8001822 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	4413      	add	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	d208      	bcs.n	8001816 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	461a      	mov	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	e002      	b.n	800181c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3ca      	bcc.n	80017c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f241 0310 	movw	r3, #4112	; 0x1010
 8001834:	440b      	add	r3, r1
 8001836:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ETH_DMARxDescListInit+0x20>
 8001872:	2302      	movs	r3, #2
 8001874:	e056      	b.n	8001924 <HAL_ETH_DMARxDescListInit+0xce>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e034      	b.n	80018fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d208      	bcs.n	80018f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	015b      	lsls	r3, r3, #5
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	e002      	b.n	80018f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d3c6      	bcc.n	8001892 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	f241 030c 	movw	r3, #4108	; 0x100c
 800190e:	440b      	add	r3, r1
 8001910:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ETH_TransmitFrame+0x24>
 8001950:	2302      	movs	r3, #2
 8001952:	e0cd      	b.n	8001af0 <HAL_ETH_TransmitFrame+0x1c0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800197a:	2301      	movs	r3, #1
 800197c:	e0b8      	b.n	8001af0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	da09      	bge.n	800199c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2212      	movs	r2, #18
 800198c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0a9      	b.n	8001af0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d915      	bls.n	80019d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <HAL_ETH_TransmitFrame+0x1cc>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4b51      	ldr	r3, [pc, #324]	; (8001afc <HAL_ETH_TransmitFrame+0x1cc>)
 80019b6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ba:	0a9b      	lsrs	r3, r3, #10
 80019bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e001      	b.n	80019d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d11c      	bne.n	8001a16 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a06:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a14:	e04b      	b.n	8001aae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	e044      	b.n	8001aa6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a2a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a40:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a4a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d116      	bne.n	8001a84 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a64:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4a25      	ldr	r2, [pc, #148]	; (8001b00 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a6a:	fb02 f203 	mul.w	r2, r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a76:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a82:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a92:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3b6      	bcc.n	8001a1c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00d      	beq.n	8001ade <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001aca:	4413      	add	r3, r2
 8001acc:	2204      	movs	r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ad8:	4413      	add	r3, r2
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	ac02b00b 	.word	0xac02b00b
 8001b00:	fffffa0c 	.word	0xfffffa0c

08001b04 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ETH_GetReceivedFrame+0x1a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e070      	b.n	8001c00 <HAL_ETH_GetReceivedFrame+0xfc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db5a      	blt.n	8001bee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d030      	beq.n	8001ba8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d103      	bne.n	8001b60 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b74:	3b04      	subs	r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e02b      	b.n	8001c00 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bd6:	e00a      	b.n	8001bee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	460b      	mov	r3, r1
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b82      	cmp	r3, #130	; 0x82
 8001c2c:	d101      	bne.n	8001c32 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e050      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2282      	movs	r2, #130	; 0x82
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 031c 	and.w	r3, r3, #28
 8001c48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8a1b      	ldrh	r3, [r3, #16]
 8001c4e:	02db      	lsls	r3, r3, #11
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	019b      	lsls	r3, r3, #6
 8001c5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f023 0302 	bic.w	r3, r3, #2
 8001c6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7e:	f7ff fa29 	bl	80010d4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c84:	e015      	b.n	8001cb2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c86:	f7ff fa25 	bl	80010d4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d309      	bcc.n	8001caa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e014      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e4      	bne.n	8001c86 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b42      	cmp	r3, #66	; 0x42
 8001cfc:	d101      	bne.n	8001d02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e04e      	b.n	8001da0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2242      	movs	r2, #66	; 0x42
 8001d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 031c 	and.w	r3, r3, #28
 8001d18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8a1b      	ldrh	r3, [r3, #16]
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d28:	897b      	ldrh	r3, [r7, #10]
 8001d2a:	019b      	lsls	r3, r3, #6
 8001d2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff f9bc 	bl	80010d4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5e:	e015      	b.n	8001d8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d60:	f7ff f9b8 	bl	80010d4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d309      	bcc.n	8001d84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e00d      	b.n	8001da0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e4      	bne.n	8001d60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ETH_Start+0x16>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e01f      	b.n	8001dfe <HAL_ETH_Start+0x56>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fb44 	bl	800245c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb7b 	bl	80024d0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fc12 	bl	8002604 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fbaf 	bl	8002544 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fbdc 	bl	80025a4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ETH_Stop+0x16>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e01f      	b.n	8001e5c <HAL_ETH_Stop+0x56>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fba1 	bl	8002574 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fbce 	bl	80025d4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fb66 	bl	800250a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fbe0 	bl	8002604 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb26 	bl	8002496 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ETH_ConfigMAC+0x1c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e0e4      	b.n	800204a <HAL_ETH_ConfigMAC+0x1e6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001eb0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001eb6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ebc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ec2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ec8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ece:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ed4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001eda:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ee0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001ee6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001eec:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ef2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff f8ee 	bl	80010ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f20:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f26:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f2c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f32:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f38:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f3e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f4a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f4c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff f8c8 	bl	80010ec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f6c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f76:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f94:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f9a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fa0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001fa6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001fac:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff f891 	bl	80010ec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff f87e 	bl	80010ec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	61da      	str	r2, [r3, #28]
 8001ff8:	e01e      	b.n	8002038 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002008:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f85e 	bl	80010ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	ff20810f 	.word	0xff20810f

08002058 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0b0      	sub	sp, #192	; 0xc0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002074:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800207c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002086:	2300      	movs	r3, #0
 8002088:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800209e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a2:	663b      	str	r3, [r7, #96]	; 0x60
 80020a4:	e001      	b.n	80020aa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020b4:	2300      	movs	r3, #0
 80020b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800212c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002130:	4bab      	ldr	r3, [pc, #684]	; (80023e0 <ETH_MACDMAConfig+0x388>)
 8002132:	4013      	ands	r3, r2
 8002134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002138:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800213a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800213c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800213e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002140:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002144:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800214a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800214c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800214e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002152:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002158:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800215a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800215c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800215e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002160:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002164:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002168:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800216a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800216c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800216e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800218c:	2001      	movs	r0, #1
 800218e:	f7fe ffad 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800219c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800219e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021a0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021a4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021aa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021b0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021b6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021c8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021ca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7fe ff88 	bl	80010ec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021ee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021f8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002208:	f64f 7341 	movw	r3, #65345	; 0xff41
 800220c:	4013      	ands	r3, r2
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002216:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800221c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800221e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002222:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002228:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800222e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002234:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002248:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002254:	2001      	movs	r0, #1
 8002256:	f7fe ff49 	bl	80010ec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002262:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002264:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe ff34 	bl	80010ec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800229c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022a0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022b2:	2304      	movs	r3, #4
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e2:	4413      	add	r3, r2
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <ETH_MACDMAConfig+0x38c>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022f6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022f8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022fa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022fc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022fe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002300:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002302:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002304:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002306:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002308:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800230a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800230c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800230e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002312:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002316:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f241 0318 	movw	r3, #4120	; 0x1018
 800232a:	4413      	add	r3, r2
 800232c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002330:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f241 0318 	movw	r3, #4120	; 0x1018
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe fed2 	bl	80010ec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002350:	4413      	add	r3, r2
 8002352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002356:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800235c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002360:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002364:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002368:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800236a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800236e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002372:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002390:	2001      	movs	r0, #1
 8002392:	f7fe feab 	bl	80010ec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10d      	bne.n	80023c8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80023b4:	4413      	add	r3, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6811      	ldr	r1, [r2, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <ETH_MACDMAConfig+0x390>)
 80023be:	431a      	orrs	r2, r3
 80023c0:	f241 031c 	movw	r3, #4124	; 0x101c
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f80b 	bl	80023ec <ETH_MACAddressConfig>
}
 80023d6:	bf00      	nop
 80023d8:	37c0      	adds	r7, #192	; 0xc0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	ff20810f 	.word	0xff20810f
 80023e4:	f8de3f23 	.word	0xf8de3f23
 80023e8:	00010040 	.word	0x00010040

080023ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3305      	adds	r3, #5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	3204      	adds	r2, #4
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <ETH_MACAddressConfig+0x68>)
 800240e:	4413      	add	r3, r2
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3303      	adds	r3, #3
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	061a      	lsls	r2, r3, #24
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3302      	adds	r3, #2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3301      	adds	r3, #1
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	4313      	orrs	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <ETH_MACAddressConfig+0x6c>)
 800243e:	4413      	add	r3, r2
 8002440:	461a      	mov	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40028040 	.word	0x40028040
 8002458:	40028044 	.word	0x40028044

0800245c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe fe33 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0208 	bic.w	r2, r2, #8
 80024b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7fe fe16 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0204 	orr.w	r2, r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7fe fdf9 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0204 	bic.w	r2, r2, #4
 8002524:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe fddc 	bl	80010ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f241 0318 	movw	r3, #4120	; 0x1018
 8002554:	4413      	add	r3, r2
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6811      	ldr	r1, [r2, #0]
 800255c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002560:	f241 0318 	movw	r3, #4120	; 0x1018
 8002564:	440b      	add	r3, r1
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f241 0318 	movw	r3, #4120	; 0x1018
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002590:	f241 0318 	movw	r3, #4120	; 0x1018
 8002594:	440b      	add	r3, r1
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025c4:	440b      	add	r3, r1
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e4:	4413      	add	r3, r2
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6811      	ldr	r1, [r2, #0]
 80025ec:	f023 0202 	bic.w	r2, r3, #2
 80025f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025f4:	440b      	add	r3, r1
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f241 0318 	movw	r3, #4120	; 0x1018
 8002618:	4413      	add	r3, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002624:	f241 0318 	movw	r3, #4120	; 0x1018
 8002628:	440b      	add	r3, r1
 800262a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f241 0318 	movw	r3, #4120	; 0x1018
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263a:	2001      	movs	r0, #1
 800263c:	f7fe fd56 	bl	80010ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	f241 0318 	movw	r3, #4120	; 0x1018
 800264a:	440b      	add	r3, r1
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e175      	b.n	8002964 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	f040 8164 	bne.w	800295e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d005      	beq.n	80026ae <HAL_GPIO_Init+0x56>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d130      	bne.n	8002710 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d017      	beq.n	800274c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d123      	bne.n	80027a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	69b9      	ldr	r1, [r7, #24]
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80be 	beq.w	800295e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b66      	ldr	r3, [pc, #408]	; (800297c <HAL_GPIO_Init+0x324>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a65      	ldr	r2, [pc, #404]	; (800297c <HAL_GPIO_Init+0x324>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_GPIO_Init+0x324>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <HAL_GPIO_Init+0x328>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_GPIO_Init+0x32c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d037      	beq.n	8002896 <HAL_GPIO_Init+0x23e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_GPIO_Init+0x330>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_GPIO_Init+0x23a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a56      	ldr	r2, [pc, #344]	; (800298c <HAL_GPIO_Init+0x334>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02b      	beq.n	800288e <HAL_GPIO_Init+0x236>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a55      	ldr	r2, [pc, #340]	; (8002990 <HAL_GPIO_Init+0x338>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d025      	beq.n	800288a <HAL_GPIO_Init+0x232>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a54      	ldr	r2, [pc, #336]	; (8002994 <HAL_GPIO_Init+0x33c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x22e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a53      	ldr	r2, [pc, #332]	; (8002998 <HAL_GPIO_Init+0x340>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x22a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_GPIO_Init+0x344>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x226>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a51      	ldr	r2, [pc, #324]	; (80029a0 <HAL_GPIO_Init+0x348>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x222>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a50      	ldr	r2, [pc, #320]	; (80029a4 <HAL_GPIO_Init+0x34c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x21e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4f      	ldr	r2, [pc, #316]	; (80029a8 <HAL_GPIO_Init+0x350>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x21a>
 800286e:	2309      	movs	r3, #9
 8002870:	e012      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002872:	230a      	movs	r3, #10
 8002874:	e010      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002876:	2308      	movs	r3, #8
 8002878:	e00e      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800287a:	2307      	movs	r3, #7
 800287c:	e00c      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800287e:	2306      	movs	r3, #6
 8002880:	e00a      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002882:	2305      	movs	r3, #5
 8002884:	e008      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002886:	2304      	movs	r3, #4
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800288a:	2303      	movs	r3, #3
 800288c:	e004      	b.n	8002898 <HAL_GPIO_Init+0x240>
 800288e:	2302      	movs	r3, #2
 8002890:	e002      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x240>
 8002896:	2300      	movs	r3, #0
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	0092      	lsls	r2, r2, #2
 80028a0:	4093      	lsls	r3, r2
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028a8:	4935      	ldr	r1, [pc, #212]	; (8002980 <HAL_GPIO_Init+0x328>)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_GPIO_Init+0x354>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <HAL_GPIO_Init+0x354>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e0:	4b32      	ldr	r3, [pc, #200]	; (80029ac <HAL_GPIO_Init+0x354>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002904:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_GPIO_Init+0x354>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_GPIO_Init+0x354>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292e:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_GPIO_Init+0x354>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_GPIO_Init+0x354>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_GPIO_Init+0x354>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	f67f ae86 	bls.w	8002678 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40013800 	.word	0x40013800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40021400 	.word	0x40021400
 800299c:	40021800 	.word	0x40021800
 80029a0:	40021c00 	.word	0x40021c00
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40022400 	.word	0x40022400
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029de:	f7fe fb79 	bl	80010d4 <HAL_GetTick>
 80029e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029e4:	e009      	b.n	80029fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029e6:	f7fe fb75 	bl	80010d4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f4:	d901      	bls.n	80029fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e022      	b.n	8002a40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d1ee      	bne.n	80029e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a14:	f7fe fb5e 	bl	80010d4 <HAL_GetTick>
 8002a18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1a:	e009      	b.n	8002a30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a1c:	f7fe fb5a 	bl	80010d4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a2a:	d901      	bls.n	8002a30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e007      	b.n	8002a40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3c:	d1ee      	bne.n	8002a1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e291      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8087 	beq.w	8002b82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a74:	4b96      	ldr	r3, [pc, #600]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d00c      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a80:	4b93      	ldr	r3, [pc, #588]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d112      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62>
 8002a8c:	4b90      	ldr	r3, [pc, #576]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d10b      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9a:	4b8d      	ldr	r3, [pc, #564]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x130>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d168      	bne.n	8002b80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e26b      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x7a>
 8002abc:	4b84      	ldr	r3, [pc, #528]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a83      	ldr	r2, [pc, #524]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	e02e      	b.n	8002b28 <HAL_RCC_OscConfig+0xd8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x9c>
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7b      	ldr	r2, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01d      	b.n	8002b28 <HAL_RCC_OscConfig+0xd8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002af6:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a75      	ldr	r2, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a72      	ldr	r2, [pc, #456]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0xd8>
 8002b10:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6c      	ldr	r3, [pc, #432]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6b      	ldr	r2, [pc, #428]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fad0 	bl	80010d4 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe facc 	bl	80010d4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e21f      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fabc 	bl	80010d4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fab8 	bl	80010d4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e20b      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x110>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d069      	beq.n	8002c62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8e:	4b50      	ldr	r3, [pc, #320]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x190>
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x17a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e1df      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	493d      	ldr	r1, [pc, #244]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	e040      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a38      	ldr	r2, [pc, #224]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa6e 	bl	80010d4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fa6a 	bl	80010d4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1bd      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4929      	ldr	r1, [pc, #164]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
 8002c2e:	e018      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fa4a 	bl	80010d4 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fa46 	bl	80010d4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e199      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d038      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fa27 	bl	80010d4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fa23 	bl	80010d4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e176      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x23a>
 8002ca8:	e01a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fa0d 	bl	80010d4 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fa09 	bl	80010d4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d903      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e15c      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
 8002cd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a4 	beq.w	8002e36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d22:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7e      	ldr	r2, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe f9d1 	bl	80010d4 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe f9cd 	bl	80010d4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e120      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x31a>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	e02d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x33c>
 8002d72:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a66      	ldr	r2, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	e01c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x35e>
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe f981 	bl	80010d4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f97d 	bl	80010d4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0ce      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x386>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f96b 	bl	80010d4 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe f967 	bl	80010d4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0b8      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80a4 	beq.w	8002f88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d06b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d149      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a30      	ldr	r2, [pc, #192]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f938 	bl	80010d4 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f934 	bl	80010d4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e087      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002eb2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f908 	bl	80010d4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe f904 	bl	80010d4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e057      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x478>
 8002ee6:	e04f      	b.n	8002f88 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f8ee 	bl	80010d4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe f8ea 	bl	80010d4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e03d      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x4ac>
 8002f1a:	e035      	b.n	8002f88 <HAL_RCC_OscConfig+0x538>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x544>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d028      	beq.n	8002f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d121      	bne.n	8002f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d11a      	bne.n	8002f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0d0      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d910      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 020f 	bic.w	r2, r3, #15
 8002fc6:	4965      	ldr	r1, [pc, #404]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0b8      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a52      	ldr	r2, [pc, #328]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d040      	beq.n	80030bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d115      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e073      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06b      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4936      	ldr	r1, [pc, #216]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308c:	f7fe f822 	bl	80010d4 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe f81e 	bl	80010d4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e053      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d210      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	4922      	ldr	r1, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e032      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4916      	ldr	r1, [pc, #88]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312a:	f000 f821 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800312e:	4602      	mov	r2, r0
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	490a      	ldr	r1, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x1cc>)
 800313c:	5ccb      	ldrb	r3, [r1, r3]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1d0>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1d4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd ff7e 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00
 8003160:	40023800 	.word	0x40023800
 8003164:	08012ce0 	.word	0x08012ce0
 8003168:	20000000 	.word	0x20000000
 800316c:	20000004 	.word	0x20000004

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	2300      	movs	r3, #0
 8003182:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003188:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d00d      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003194:	2b08      	cmp	r3, #8
 8003196:	f200 80bd 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x1a4>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x34>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x3a>
 80031a2:	e0b7      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031a6:	60bb      	str	r3, [r7, #8]
      break;
 80031a8:	e0b7      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031ac:	60bb      	str	r3, [r7, #8]
      break;
 80031ae:	e0b4      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ba:	4b5b      	ldr	r3, [pc, #364]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04d      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b58      	ldr	r3, [pc, #352]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	461a      	mov	r2, r3
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031d6:	f04f 0100 	mov.w	r1, #0
 80031da:	ea02 0800 	and.w	r8, r2, r0
 80031de:	ea03 0901 	and.w	r9, r3, r1
 80031e2:	4640      	mov	r0, r8
 80031e4:	4649      	mov	r1, r9
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	014b      	lsls	r3, r1, #5
 80031f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f4:	0142      	lsls	r2, r0, #5
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	ebb0 0008 	subs.w	r0, r0, r8
 80031fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	018b      	lsls	r3, r1, #6
 800320c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003210:	0182      	lsls	r2, r0, #6
 8003212:	1a12      	subs	r2, r2, r0
 8003214:	eb63 0301 	sbc.w	r3, r3, r1
 8003218:	f04f 0000 	mov.w	r0, #0
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	00d9      	lsls	r1, r3, #3
 8003222:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003226:	00d0      	lsls	r0, r2, #3
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	eb12 0208 	adds.w	r2, r2, r8
 8003230:	eb43 0309 	adc.w	r3, r3, r9
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	0259      	lsls	r1, r3, #9
 800323e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003242:	0250      	lsls	r0, r2, #9
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f7fd f82c 	bl	80002b0 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e04a      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	ea02 0400 	and.w	r4, r2, r0
 800327a:	ea03 0501 	and.w	r5, r3, r1
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	014b      	lsls	r3, r1, #5
 800328c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003290:	0142      	lsls	r2, r0, #5
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	1b00      	subs	r0, r0, r4
 8003298:	eb61 0105 	sbc.w	r1, r1, r5
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	018b      	lsls	r3, r1, #6
 80032a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032aa:	0182      	lsls	r2, r0, #6
 80032ac:	1a12      	subs	r2, r2, r0
 80032ae:	eb63 0301 	sbc.w	r3, r3, r1
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	00d9      	lsls	r1, r3, #3
 80032bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c0:	00d0      	lsls	r0, r2, #3
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	1912      	adds	r2, r2, r4
 80032c8:	eb45 0303 	adc.w	r3, r5, r3
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	0299      	lsls	r1, r3, #10
 80032d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032da:	0290      	lsls	r0, r2, #10
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	f7fc ffe0 	bl	80002b0 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	60bb      	str	r3, [r7, #8]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003316:	60bb      	str	r3, [r7, #8]
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	68bb      	ldr	r3, [r7, #8]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	00f42400 	.word	0x00f42400
 8003330:	007a1200 	.word	0x007a1200

08003334 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCC_GetHCLKFreq+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e049      	b.n	80033f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fb02 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fac0 	bl	8003910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e054      	b.n	80034be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d01d      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_TIM_Base_Start_IT+0xe0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d115      	bne.n	80034a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_TIM_Base_Start_IT+0xec>)
 8003484:	4013      	ands	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d015      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d011      	beq.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a6:	e008      	b.n	80034ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e000      	b.n	80034bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40001800 	.word	0x40001800
 80034e8:	00010007 	.word	0x00010007

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0202 	mvn.w	r2, #2
 8003518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9d0 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9c2 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f9d3 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9a6 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f998 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9a9 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0208 	mvn.w	r2, #8
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2204      	movs	r2, #4
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f97c 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f96e 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f97f 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b10      	cmp	r3, #16
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f952 	bl	80038d4 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f944 	bl	80038c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f955 	bl	80038e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0201 	mvn.w	r2, #1
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fabc 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb0c 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d10e      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d107      	bne.n	80036ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 faff 	bl	8003cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d10e      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d107      	bne.n	80036f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f903 	bl	80038fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d10e      	bne.n	8003722 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d107      	bne.n	8003722 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 0220 	mvn.w	r2, #32
 800371a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fabf 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x1c>
 8003744:	2302      	movs	r3, #2
 8003746:	e0b4      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x186>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_TIM_ConfigClockSource+0x190>)
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800376e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d03e      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0xd4>
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003786:	f200 8087 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	f000 8086 	beq.w	800389e <HAL_TIM_ConfigClockSource+0x172>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	d87f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b70      	cmp	r3, #112	; 0x70
 800379a:	d01a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0xa6>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d87b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b60      	cmp	r3, #96	; 0x60
 80037a2:	d050      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x11a>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d877      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b50      	cmp	r3, #80	; 0x50
 80037aa:	d03c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xfa>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d873      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d058      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x13a>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d86f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b30      	cmp	r3, #48	; 0x30
 80037ba:	d064      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d86b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d060      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d867      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d05a      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	e062      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f000 f9af 	bl	8003b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
      break;
 80037fe:	e04f      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f000 f998 	bl	8003b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e03c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	461a      	mov	r2, r3
 8003834:	f000 f90c 	bl	8003a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2150      	movs	r1, #80	; 0x50
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f965 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003844:	e02c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	461a      	mov	r2, r3
 8003854:	f000 f92b 	bl	8003aae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2160      	movs	r1, #96	; 0x60
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f955 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003864:	e01c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	f000 f8ec 	bl	8003a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f945 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003884:	e00c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 f93c 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003896:	e003      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e000      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800389e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	fffeff88 	.word	0xfffeff88

080038c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d00f      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00b      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3c      	ldr	r2, [pc, #240]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d007      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2f      	ldr	r2, [pc, #188]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003970:	d027      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <TIM_Base_SetConfig+0x118>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d023      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2b      	ldr	r2, [pc, #172]	; (8003a2c <TIM_Base_SetConfig+0x11c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2a      	ldr	r2, [pc, #168]	; (8003a30 <TIM_Base_SetConfig+0x120>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <TIM_Base_SetConfig+0x128>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <TIM_Base_SetConfig+0x12c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <TIM_Base_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0xf8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	40001800 	.word	0x40001800
 8003a48:	40001c00 	.word	0x40001c00
 8003a4c:	40002000 	.word	0x40002000

08003a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 030a 	bic.w	r3, r3, #10
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0210 	bic.w	r2, r3, #16
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	031b      	lsls	r3, r3, #12
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f043 0307 	orr.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e06d      	b.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d01d      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10c      	bne.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003ce2:	4b8d      	ldr	r3, [pc, #564]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003ce4:	22c0      	movs	r2, #192	; 0xc0
 8003ce6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003ce8:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003cea:	22a8      	movs	r2, #168	; 0xa8
 8003cec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 8003cee:	4b8a      	ldr	r3, [pc, #552]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003cf6:	2273      	movs	r2, #115	; 0x73
 8003cf8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003d00:	4b86      	ldr	r3, [pc, #536]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003d08:	22ff      	movs	r2, #255	; 0xff
 8003d0a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003d0c:	4b83      	ldr	r3, [pc, #524]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003d12:	4b83      	ldr	r3, [pc, #524]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003d14:	22c0      	movs	r2, #192	; 0xc0
 8003d16:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003d1a:	22a8      	movs	r2, #168	; 0xa8
 8003d1c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 4;
 8003d1e:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003d20:	2204      	movs	r2, #4
 8003d22:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003d24:	4b7e      	ldr	r3, [pc, #504]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003d2a:	f000 fccb 	bl	80046c4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003d2e:	4b7a      	ldr	r3, [pc, #488]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	061a      	lsls	r2, r3, #24
 8003d34:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d3e:	789b      	ldrb	r3, [r3, #2]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	4313      	orrs	r3, r2
 8003d44:	4a74      	ldr	r2, [pc, #464]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d46:	78d2      	ldrb	r2, [r2, #3]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	061a      	lsls	r2, r3, #24
 8003d4c:	4b72      	ldr	r3, [pc, #456]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	0619      	lsls	r1, r3, #24
 8003d52:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d54:	785b      	ldrb	r3, [r3, #1]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	4319      	orrs	r1, r3
 8003d5a:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d5c:	789b      	ldrb	r3, [r3, #2]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	430b      	orrs	r3, r1
 8003d62:	496d      	ldr	r1, [pc, #436]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d64:	78c9      	ldrb	r1, [r1, #3]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	0619      	lsls	r1, r3, #24
 8003d76:	4b68      	ldr	r3, [pc, #416]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	4319      	orrs	r1, r3
 8003d7e:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4964      	ldr	r1, [pc, #400]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d88:	78c9      	ldrb	r1, [r1, #3]
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d92:	431a      	orrs	r2, r3
 8003d94:	4b60      	ldr	r3, [pc, #384]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	0619      	lsls	r1, r3, #24
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	4319      	orrs	r1, r3
 8003da2:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003da4:	789b      	ldrb	r3, [r3, #2]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	430b      	orrs	r3, r1
 8003daa:	495b      	ldr	r1, [pc, #364]	; (8003f18 <MX_LWIP_Init+0x23c>)
 8003dac:	78c9      	ldrb	r1, [r1, #3]
 8003dae:	430b      	orrs	r3, r1
 8003db0:	0e1b      	lsrs	r3, r3, #24
 8003db2:	4313      	orrs	r3, r2
 8003db4:	4a5b      	ldr	r2, [pc, #364]	; (8003f24 <MX_LWIP_Init+0x248>)
 8003db6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003db8:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	061a      	lsls	r2, r3, #24
 8003dbe:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dc8:	789b      	ldrb	r3, [r3, #2]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	4a53      	ldr	r2, [pc, #332]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dd0:	78d2      	ldrb	r2, [r2, #3]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	061a      	lsls	r2, r3, #24
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	0619      	lsls	r1, r3, #24
 8003ddc:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	4319      	orrs	r1, r3
 8003de4:	4b4d      	ldr	r3, [pc, #308]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	430b      	orrs	r3, r1
 8003dec:	494b      	ldr	r1, [pc, #300]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dee:	78c9      	ldrb	r1, [r1, #3]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	0619      	lsls	r1, r3, #24
 8003e00:	4b46      	ldr	r3, [pc, #280]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	4319      	orrs	r1, r3
 8003e08:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e0a:	789b      	ldrb	r3, [r3, #2]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4942      	ldr	r1, [pc, #264]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e12:	78c9      	ldrb	r1, [r1, #3]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	0619      	lsls	r1, r3, #24
 8003e24:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	041b      	lsls	r3, r3, #16
 8003e2a:	4319      	orrs	r1, r3
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e2e:	789b      	ldrb	r3, [r3, #2]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	430b      	orrs	r3, r1
 8003e34:	4939      	ldr	r1, [pc, #228]	; (8003f1c <MX_LWIP_Init+0x240>)
 8003e36:	78c9      	ldrb	r1, [r1, #3]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	0e1b      	lsrs	r3, r3, #24
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <MX_LWIP_Init+0x24c>)
 8003e40:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003e42:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	061a      	lsls	r2, r3, #24
 8003e48:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e52:	789b      	ldrb	r3, [r3, #2]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	4313      	orrs	r3, r2
 8003e58:	4a31      	ldr	r2, [pc, #196]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e5a:	78d2      	ldrb	r2, [r2, #3]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	061a      	lsls	r2, r3, #24
 8003e60:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	0619      	lsls	r1, r3, #24
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	4319      	orrs	r1, r3
 8003e6e:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e70:	789b      	ldrb	r3, [r3, #2]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	430b      	orrs	r3, r1
 8003e76:	492a      	ldr	r1, [pc, #168]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e78:	78c9      	ldrb	r1, [r1, #3]
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e82:	431a      	orrs	r2, r3
 8003e84:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	0619      	lsls	r1, r3, #24
 8003e8a:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	4319      	orrs	r1, r3
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e94:	789b      	ldrb	r3, [r3, #2]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	4921      	ldr	r1, [pc, #132]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003e9c:	78c9      	ldrb	r1, [r1, #3]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	0619      	lsls	r1, r3, #24
 8003eae:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	4319      	orrs	r1, r3
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003eb8:	789b      	ldrb	r3, [r3, #2]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	4918      	ldr	r1, [pc, #96]	; (8003f20 <MX_LWIP_Init+0x244>)
 8003ec0:	78c9      	ldrb	r1, [r1, #3]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	0e1b      	lsrs	r3, r3, #24
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <MX_LWIP_Init+0x250>)
 8003eca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_LWIP_Init+0x254>)
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <MX_LWIP_Init+0x258>)
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <MX_LWIP_Init+0x250>)
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <MX_LWIP_Init+0x24c>)
 8003edc:	4911      	ldr	r1, [pc, #68]	; (8003f24 <MX_LWIP_Init+0x248>)
 8003ede:	4816      	ldr	r0, [pc, #88]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003ee0:	f001 f896 	bl	8005010 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ee4:	4814      	ldr	r0, [pc, #80]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003ee6:	f001 fa45 	bl	8005374 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003eec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ef0:	089b      	lsrs	r3, r3, #2
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003efc:	480e      	ldr	r0, [pc, #56]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003efe:	f001 fa49 	bl	8005394 <netif_set_up>
 8003f02:	e002      	b.n	8003f0a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003f04:	480c      	ldr	r0, [pc, #48]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003f06:	f001 fab1 	bl	800546c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003f0a:	490c      	ldr	r1, [pc, #48]	; (8003f3c <MX_LWIP_Init+0x260>)
 8003f0c:	480a      	ldr	r0, [pc, #40]	; (8003f38 <MX_LWIP_Init+0x25c>)
 8003f0e:	f001 fadf 	bl	80054d0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	200002bc 	.word	0x200002bc
 8003f1c:	200002b8 	.word	0x200002b8
 8003f20:	200002b0 	.word	0x200002b0
 8003f24:	200002b4 	.word	0x200002b4
 8003f28:	200002c0 	.word	0x200002c0
 8003f2c:	200002c4 	.word	0x200002c4
 8003f30:	0800ec8d 	.word	0x0800ec8d
 8003f34:	080044f1 	.word	0x080044f1
 8003f38:	2000022c 	.word	0x2000022c
 8003f3c:	0800455d 	.word	0x0800455d

08003f40 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4e      	ldr	r2, [pc, #312]	; (8004098 <HAL_ETH_MspInit+0x158>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	f040 8096 	bne.w	8004090 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f64:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	4a4c      	ldr	r2, [pc, #304]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4a46      	ldr	r2, [pc, #280]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f86:	6313      	str	r3, [r2, #48]	; 0x30
 8003f88:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb8:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4a34      	ldr	r2, [pc, #208]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	4a2e      	ldr	r2, [pc, #184]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe8:	4b2c      	ldr	r3, [pc, #176]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8004000:	4b26      	ldr	r3, [pc, #152]	; (800409c <HAL_ETH_MspInit+0x15c>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800400c:	2332      	movs	r3, #50	; 0x32
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004018:	2303      	movs	r3, #3
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800401c:	230b      	movs	r3, #11
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004024:	4619      	mov	r1, r3
 8004026:	481e      	ldr	r0, [pc, #120]	; (80040a0 <HAL_ETH_MspInit+0x160>)
 8004028:	f7fe fb16 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800402c:	2386      	movs	r3, #134	; 0x86
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800403c:	230b      	movs	r3, #11
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	4817      	ldr	r0, [pc, #92]	; (80040a4 <HAL_ETH_MspInit+0x164>)
 8004048:	f7fe fb06 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800404c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004052:	2302      	movs	r3, #2
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800405a:	2303      	movs	r3, #3
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800405e:	230b      	movs	r3, #11
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004066:	4619      	mov	r1, r3
 8004068:	480f      	ldr	r0, [pc, #60]	; (80040a8 <HAL_ETH_MspInit+0x168>)
 800406a:	f7fe faf5 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800406e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004080:	230b      	movs	r3, #11
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004088:	4619      	mov	r1, r3
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <HAL_ETH_MspInit+0x16c>)
 800408c:	f7fe fae4 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004090:	bf00      	nop
 8004092:	3738      	adds	r7, #56	; 0x38
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40028000 	.word	0x40028000
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40021800 	.word	0x40021800

080040b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80040bc:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <low_level_init+0x144>)
 80040be:	4a4e      	ldr	r2, [pc, #312]	; (80041f8 <low_level_init+0x148>)
 80040c0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80040c2:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <low_level_init+0x144>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80040c8:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <low_level_init+0x144>)
 80040ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80040d0:	4b48      	ldr	r3, [pc, #288]	; (80041f4 <low_level_init+0x144>)
 80040d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80040d8:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <low_level_init+0x144>)
 80040da:	2200      	movs	r2, #0
 80040dc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80040de:	2300      	movs	r3, #0
 80040e0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80040e6:	23e1      	movs	r3, #225	; 0xe1
 80040e8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80040ea:	2300      	movs	r3, #0
 80040ec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80040ee:	2300      	movs	r3, #0
 80040f0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80040f2:	2300      	movs	r3, #0
 80040f4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80040f6:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <low_level_init+0x144>)
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80040fe:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <low_level_init+0x144>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004104:	4b3b      	ldr	r3, [pc, #236]	; (80041f4 <low_level_init+0x144>)
 8004106:	2200      	movs	r2, #0
 8004108:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800410a:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <low_level_init+0x144>)
 800410c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004110:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004112:	4838      	ldr	r0, [pc, #224]	; (80041f4 <low_level_init+0x144>)
 8004114:	f7fd f99c 	bl	8001450 <HAL_ETH_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	b2da      	uxtb	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004134:	2304      	movs	r3, #4
 8004136:	4a31      	ldr	r2, [pc, #196]	; (80041fc <low_level_init+0x14c>)
 8004138:	4931      	ldr	r1, [pc, #196]	; (8004200 <low_level_init+0x150>)
 800413a:	482e      	ldr	r0, [pc, #184]	; (80041f4 <low_level_init+0x144>)
 800413c:	f7fd fb22 	bl	8001784 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004140:	2304      	movs	r3, #4
 8004142:	4a30      	ldr	r2, [pc, #192]	; (8004204 <low_level_init+0x154>)
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <low_level_init+0x158>)
 8004146:	482b      	ldr	r0, [pc, #172]	; (80041f4 <low_level_init+0x144>)
 8004148:	f7fd fb85 	bl	8001856 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2206      	movs	r2, #6
 8004150:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <low_level_init+0x144>)
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004160:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <low_level_init+0x144>)
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	785a      	ldrb	r2, [r3, #1]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <low_level_init+0x144>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	789a      	ldrb	r2, [r3, #2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <low_level_init+0x144>)
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	78da      	ldrb	r2, [r3, #3]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <low_level_init+0x144>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	791a      	ldrb	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <low_level_init+0x144>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	795a      	ldrb	r2, [r3, #5]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80041a2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041aa:	f043 030a 	orr.w	r3, r3, #10
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80041b6:	480f      	ldr	r0, [pc, #60]	; (80041f4 <low_level_init+0x144>)
 80041b8:	f7fd fdf6 	bl	8001da8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	461a      	mov	r2, r3
 80041c2:	211d      	movs	r1, #29
 80041c4:	480b      	ldr	r0, [pc, #44]	; (80041f4 <low_level_init+0x144>)
 80041c6:	f7fd fd21 	bl	8001c0c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f043 030b 	orr.w	r3, r3, #11
 80041d0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	461a      	mov	r2, r3
 80041d6:	211d      	movs	r1, #29
 80041d8:	4806      	ldr	r0, [pc, #24]	; (80041f4 <low_level_init+0x144>)
 80041da:	f7fd fd7f 	bl	8001cdc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80041de:	f107 0310 	add.w	r3, r7, #16
 80041e2:	461a      	mov	r2, r3
 80041e4:	211d      	movs	r1, #29
 80041e6:	4803      	ldr	r0, [pc, #12]	; (80041f4 <low_level_init+0x144>)
 80041e8:	f7fd fd10 	bl	8001c0c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80041ec:	bf00      	nop
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20001b98 	.word	0x20001b98
 80041f8:	40028000 	.word	0x40028000
 80041fc:	20001be0 	.word	0x20001be0
 8004200:	200002c8 	.word	0x200002c8
 8004204:	20000348 	.word	0x20000348
 8004208:	20001b18 	.word	0x20001b18

0800420c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004216:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <low_level_output+0x138>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800422e:	4b45      	ldr	r3, [pc, #276]	; (8004344 <low_level_output+0x138>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	e05a      	b.n	80042f4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	da03      	bge.n	800424e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004246:	23f8      	movs	r3, #248	; 0xf8
 8004248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800424c:	e05c      	b.n	8004308 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	895b      	ldrh	r3, [r3, #10]
 8004252:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004258:	e02f      	b.n	80042ba <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	18d0      	adds	r0, r2, r3
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	18d1      	adds	r1, r2, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	461a      	mov	r2, r3
 8004272:	f00a fe13 	bl	800ee9c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da03      	bge.n	800428c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004284:	23f8      	movs	r3, #248	; 0xf8
 8004286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800428a:	e03d      	b.n	8004308 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800429c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042a8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042b4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d8c8      	bhi.n	800425a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	18d0      	adds	r0, r2, r3
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4619      	mov	r1, r3
 80042da:	f00a fddf 	bl	800ee9c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1a1      	bne.n	800423e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	4811      	ldr	r0, [pc, #68]	; (8004344 <low_level_output+0x138>)
 80042fe:	f7fd fb17 	bl	8001930 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <low_level_output+0x138>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004310:	4413      	add	r3, r2
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <low_level_output+0x138>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f241 0314 	movw	r3, #4116	; 0x1014
 8004324:	4413      	add	r3, r2
 8004326:	2220      	movs	r2, #32
 8004328:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <low_level_output+0x138>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004332:	4413      	add	r3, r2
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20001b98 	.word	0x20001b98

08004348 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800436c:	484f      	ldr	r0, [pc, #316]	; (80044ac <low_level_input+0x164>)
 800436e:	f7fd fbc9 	bl	8001b04 <HAL_ETH_GetReceivedFrame>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <low_level_input+0x34>

    return NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	e092      	b.n	80044a2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800437c:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <low_level_input+0x164>)
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004382:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <low_level_input+0x164>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004388:	89fb      	ldrh	r3, [r7, #14]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004394:	4619      	mov	r1, r3
 8004396:	2000      	movs	r0, #0
 8004398:	f001 f936 	bl	8005608 <pbuf_alloc>
 800439c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d04b      	beq.n	800443c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <low_level_input+0x164>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b2:	e040      	b.n	8004436 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	895b      	ldrh	r3, [r3, #10]
 80043b8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80043be:	e021      	b.n	8004404 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	18d0      	adds	r0, r2, r3
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	18d1      	adds	r1, r2, r3
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	461a      	mov	r2, r3
 80043d8:	f00a fd60 	bl	800ee9c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4413      	add	r3, r2
 80043ee:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043f2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80043fe:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800440e:	4293      	cmp	r3, r2
 8004410:	d8d6      	bhi.n	80043c0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	18d0      	adds	r0, r2, r3
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4619      	mov	r1, r3
 8004424:	f00a fd3a 	bl	800ee9c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1bb      	bne.n	80043b4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <low_level_input+0x164>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00b      	b.n	8004460 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <low_level_input+0x164>)
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3ee      	bcc.n	8004448 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <low_level_input+0x164>)
 800446c:	2200      	movs	r2, #0
 800446e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <low_level_input+0x164>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f241 0314 	movw	r3, #4116	; 0x1014
 8004478:	4413      	add	r3, r2
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <low_level_input+0x164>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f241 0314 	movw	r3, #4116	; 0x1014
 800448c:	4413      	add	r3, r2
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <low_level_input+0x164>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f241 0308 	movw	r3, #4104	; 0x1008
 800449a:	4413      	add	r3, r2
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
  }
  return p;
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3730      	adds	r7, #48	; 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20001b98 	.word	0x20001b98

080044b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff45 	bl	8004348 <low_level_input>
 80044be:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	4798      	blx	r3
 80044d0:	4603      	mov	r3, r0
 80044d2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80044d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f001 fb77 	bl	8005bd0 <pbuf_free>
    p = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e000      	b.n	80044ea <ethernetif_input+0x3a>
  if (p == NULL) return;
 80044e8:	bf00      	nop
  }
}
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <ethernetif_init+0x1c>
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <ethernetif_init+0x48>)
 8004500:	f240 2212 	movw	r2, #530	; 0x212
 8004504:	490d      	ldr	r1, [pc, #52]	; (800453c <ethernetif_init+0x4c>)
 8004506:	480e      	ldr	r0, [pc, #56]	; (8004540 <ethernetif_init+0x50>)
 8004508:	f00a fcf8 	bl	800eefc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2273      	movs	r2, #115	; 0x73
 8004510:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2274      	movs	r2, #116	; 0x74
 8004518:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <ethernetif_init+0x54>)
 8004520:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <ethernetif_init+0x58>)
 8004526:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fdc1 	bl	80040b0 <low_level_init>

  return ERR_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08010300 	.word	0x08010300
 800453c:	0801031c 	.word	0x0801031c
 8004540:	0801032c 	.word	0x0801032c
 8004544:	0800d02d 	.word	0x0800d02d
 8004548:	0800420d 	.word	0x0800420d

0800454c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004550:	f7fc fdc0 	bl	80010d4 <HAL_GetTick>
 8004554:	4603      	mov	r3, r0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d05d      	beq.n	800463a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800457e:	4b34      	ldr	r3, [pc, #208]	; (8004650 <ethernetif_update_config+0xf4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03f      	beq.n	8004606 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800458a:	2100      	movs	r1, #0
 800458c:	4830      	ldr	r0, [pc, #192]	; (8004650 <ethernetif_update_config+0xf4>)
 800458e:	f7fd fba5 	bl	8001cdc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004592:	f7fc fd9f 	bl	80010d4 <HAL_GetTick>
 8004596:	4603      	mov	r3, r0
 8004598:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	461a      	mov	r2, r3
 80045a0:	2101      	movs	r1, #1
 80045a2:	482b      	ldr	r0, [pc, #172]	; (8004650 <ethernetif_update_config+0xf4>)
 80045a4:	f7fd fb32 	bl	8001c0c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80045a8:	f7fc fd94 	bl	80010d4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b6:	d828      	bhi.n	800460a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0eb      	beq.n	800459a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	461a      	mov	r2, r3
 80045c8:	2110      	movs	r1, #16
 80045ca:	4821      	ldr	r0, [pc, #132]	; (8004650 <ethernetif_update_config+0xf4>)
 80045cc:	f7fd fb1e 	bl	8001c0c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <ethernetif_update_config+0xf4>)
 80045dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e002      	b.n	80045ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80045e4:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <ethernetif_update_config+0xf4>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <ethernetif_update_config+0xf4>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	e016      	b.n	800462a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <ethernetif_update_config+0xf4>)
 80045fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	e011      	b.n	800462a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <ethernetif_update_config+0xb0>
          goto error;
 800460a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <ethernetif_update_config+0xf4>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <ethernetif_update_config+0xf4>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800461c:	4313      	orrs	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	480a      	ldr	r0, [pc, #40]	; (8004650 <ethernetif_update_config+0xf4>)
 8004626:	f7fd fb59 	bl	8001cdc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800462a:	2100      	movs	r1, #0
 800462c:	4808      	ldr	r0, [pc, #32]	; (8004650 <ethernetif_update_config+0xf4>)
 800462e:	f7fd fc19 	bl	8001e64 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004632:	4807      	ldr	r0, [pc, #28]	; (8004650 <ethernetif_update_config+0xf4>)
 8004634:	f7fd fbb8 	bl	8001da8 <HAL_ETH_Start>
 8004638:	e002      	b.n	8004640 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <ethernetif_update_config+0xf4>)
 800463c:	f7fd fbe3 	bl	8001e06 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f807 	bl	8004654 <ethernetif_notify_conn_changed>
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20001b98 	.word	0x20001b98

08004654 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	b21a      	sxth	r2, r3
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	b29b      	uxth	r3, r3
 800467e:	b21b      	sxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	b21b      	sxth	r3, r3
 8004684:	b29b      	uxth	r3, r3
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	061a      	lsls	r2, r3, #24
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0e1b      	lsrs	r3, r3, #24
 80046b6:	4313      	orrs	r3, r2
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80046ce:	f000 f8d5 	bl	800487c <mem_init>
  memp_init();
 80046d2:	f000 fbdb 	bl	8004e8c <memp_init>
  pbuf_init();
  netif_init();
 80046d6:	f000 fc93 	bl	8005000 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80046da:	f007 fea1 	bl	800c420 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80046de:	f001 fd97 	bl	8006210 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80046e2:	f007 fe13 	bl	800c30c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <ptr_to_mem+0x20>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	4413      	add	r3, r2
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	200000a4 	.word	0x200000a4

08004714 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <mem_to_ptr+0x20>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	b29b      	uxth	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	200000a4 	.word	0x200000a4

08004738 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004740:	4b45      	ldr	r3, [pc, #276]	; (8004858 <plug_holes+0x120>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d206      	bcs.n	8004758 <plug_holes+0x20>
 800474a:	4b44      	ldr	r3, [pc, #272]	; (800485c <plug_holes+0x124>)
 800474c:	f240 12df 	movw	r2, #479	; 0x1df
 8004750:	4943      	ldr	r1, [pc, #268]	; (8004860 <plug_holes+0x128>)
 8004752:	4844      	ldr	r0, [pc, #272]	; (8004864 <plug_holes+0x12c>)
 8004754:	f00a fbd2 	bl	800eefc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004758:	4b43      	ldr	r3, [pc, #268]	; (8004868 <plug_holes+0x130>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d306      	bcc.n	8004770 <plug_holes+0x38>
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <plug_holes+0x124>)
 8004764:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004768:	4940      	ldr	r1, [pc, #256]	; (800486c <plug_holes+0x134>)
 800476a:	483e      	ldr	r0, [pc, #248]	; (8004864 <plug_holes+0x12c>)
 800476c:	f00a fbc6 	bl	800eefc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <plug_holes+0x4e>
 8004778:	4b38      	ldr	r3, [pc, #224]	; (800485c <plug_holes+0x124>)
 800477a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800477e:	493c      	ldr	r1, [pc, #240]	; (8004870 <plug_holes+0x138>)
 8004780:	4838      	ldr	r0, [pc, #224]	; (8004864 <plug_holes+0x12c>)
 8004782:	f00a fbbb 	bl	800eefc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800478e:	d906      	bls.n	800479e <plug_holes+0x66>
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <plug_holes+0x124>)
 8004792:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004796:	4937      	ldr	r1, [pc, #220]	; (8004874 <plug_holes+0x13c>)
 8004798:	4832      	ldr	r0, [pc, #200]	; (8004864 <plug_holes+0x12c>)
 800479a:	f00a fbaf 	bl	800eefc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ffa4 	bl	80046f0 <ptr_to_mem>
 80047a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d024      	beq.n	80047fc <plug_holes+0xc4>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	791b      	ldrb	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d120      	bne.n	80047fc <plug_holes+0xc4>
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <plug_holes+0x130>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d01b      	beq.n	80047fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <plug_holes+0x140>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d102      	bne.n	80047d4 <plug_holes+0x9c>
      lfree = mem;
 80047ce:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <plug_holes+0x140>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	881a      	ldrh	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80047e4:	d00a      	beq.n	80047fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff ff80 	bl	80046f0 <ptr_to_mem>
 80047f0:	4604      	mov	r4, r0
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ff8e 	bl	8004714 <mem_to_ptr>
 80047f8:	4603      	mov	r3, r0
 80047fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	885b      	ldrh	r3, [r3, #2]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff75 	bl	80046f0 <ptr_to_mem>
 8004806:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d01f      	beq.n	8004850 <plug_holes+0x118>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	791b      	ldrb	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11b      	bne.n	8004850 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <plug_holes+0x140>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d102      	bne.n	8004828 <plug_holes+0xf0>
      lfree = pmem;
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <plug_holes+0x140>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004838:	d00a      	beq.n	8004850 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ff56 	bl	80046f0 <ptr_to_mem>
 8004844:	4604      	mov	r4, r0
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f7ff ff64 	bl	8004714 <mem_to_ptr>
 800484c:	4603      	mov	r3, r0
 800484e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}
 8004858:	200000a4 	.word	0x200000a4
 800485c:	08010354 	.word	0x08010354
 8004860:	08010384 	.word	0x08010384
 8004864:	0801039c 	.word	0x0801039c
 8004868:	200000a8 	.word	0x200000a8
 800486c:	080103c4 	.word	0x080103c4
 8004870:	080103e0 	.word	0x080103e0
 8004874:	080103fc 	.word	0x080103fc
 8004878:	200000ac 	.word	0x200000ac

0800487c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <mem_init+0x68>)
 8004884:	3303      	adds	r3, #3
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	461a      	mov	r2, r3
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <mem_init+0x6c>)
 800488e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <mem_init+0x6c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800489c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80048aa:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80048ae:	f7ff ff1f 	bl	80046f0 <ptr_to_mem>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <mem_init+0x70>)
 80048b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <mem_init+0x70>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <mem_init+0x70>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80048c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <mem_init+0x70>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80048d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <mem_init+0x6c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <mem_init+0x74>)
 80048da:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200033c8 	.word	0x200033c8
 80048e8:	200000a4 	.word	0x200000a4
 80048ec:	200000a8 	.word	0x200000a8
 80048f0:	200000ac 	.word	0x200000ac

080048f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff09 	bl	8004714 <mem_to_ptr>
 8004902:	4603      	mov	r3, r0
 8004904:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fef0 	bl	80046f0 <ptr_to_mem>
 8004910:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	885b      	ldrh	r3, [r3, #2]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff feea 	bl	80046f0 <ptr_to_mem>
 800491c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004926:	d818      	bhi.n	800495a <mem_link_valid+0x66>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	885b      	ldrh	r3, [r3, #2]
 800492c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004930:	d813      	bhi.n	800495a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004936:	8afa      	ldrh	r2, [r7, #22]
 8004938:	429a      	cmp	r2, r3
 800493a:	d004      	beq.n	8004946 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	8afa      	ldrh	r2, [r7, #22]
 8004942:	429a      	cmp	r2, r3
 8004944:	d109      	bne.n	800495a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <mem_link_valid+0x74>)
 8004948:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d006      	beq.n	800495e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	885b      	ldrh	r3, [r3, #2]
 8004954:	8afa      	ldrh	r2, [r7, #22]
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <mem_link_valid+0x6a>
    return 0;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <mem_link_valid+0x6c>
  }
  return 1;
 800495e:	2301      	movs	r3, #1
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200000a8 	.word	0x200000a8

0800496c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d04c      	beq.n	8004a14 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <mem_free+0xb0>)
 8004986:	f240 2273 	movw	r2, #627	; 0x273
 800498a:	4925      	ldr	r1, [pc, #148]	; (8004a20 <mem_free+0xb4>)
 800498c:	4825      	ldr	r0, [pc, #148]	; (8004a24 <mem_free+0xb8>)
 800498e:	f00a fab5 	bl	800eefc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004992:	e040      	b.n	8004a16 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b08      	subs	r3, #8
 8004998:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <mem_free+0xbc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d306      	bcc.n	80049b2 <mem_free+0x46>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f103 020c 	add.w	r2, r3, #12
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <mem_free+0xc0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d907      	bls.n	80049c2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <mem_free+0xb0>)
 80049b4:	f240 227f 	movw	r2, #639	; 0x27f
 80049b8:	491d      	ldr	r1, [pc, #116]	; (8004a30 <mem_free+0xc4>)
 80049ba:	481a      	ldr	r0, [pc, #104]	; (8004a24 <mem_free+0xb8>)
 80049bc:	f00a fa9e 	bl	800eefc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049c0:	e029      	b.n	8004a16 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <mem_free+0xb0>)
 80049cc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80049d0:	4918      	ldr	r1, [pc, #96]	; (8004a34 <mem_free+0xc8>)
 80049d2:	4814      	ldr	r0, [pc, #80]	; (8004a24 <mem_free+0xb8>)
 80049d4:	f00a fa92 	bl	800eefc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049d8:	e01d      	b.n	8004a16 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff8a 	bl	80048f4 <mem_link_valid>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <mem_free+0xb0>)
 80049e8:	f240 2295 	movw	r2, #661	; 0x295
 80049ec:	4912      	ldr	r1, [pc, #72]	; (8004a38 <mem_free+0xcc>)
 80049ee:	480d      	ldr	r0, [pc, #52]	; (8004a24 <mem_free+0xb8>)
 80049f0:	f00a fa84 	bl	800eefc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049f4:	e00f      	b.n	8004a16 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <mem_free+0xd0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d202      	bcs.n	8004a0c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004a06:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <mem_free+0xd0>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff fe93 	bl	8004738 <plug_holes>
 8004a12:	e000      	b.n	8004a16 <mem_free+0xaa>
    return;
 8004a14:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08010354 	.word	0x08010354
 8004a20:	08010428 	.word	0x08010428
 8004a24:	0801039c 	.word	0x0801039c
 8004a28:	200000a4 	.word	0x200000a4
 8004a2c:	200000a8 	.word	0x200000a8
 8004a30:	0801044c 	.word	0x0801044c
 8004a34:	08010468 	.word	0x08010468
 8004a38:	08010490 	.word	0x08010490
 8004a3c:	200000ac 	.word	0x200000ac

08004a40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	3303      	adds	r3, #3
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004a58:	8bfb      	ldrh	r3, [r7, #30]
 8004a5a:	2b0b      	cmp	r3, #11
 8004a5c:	d801      	bhi.n	8004a62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004a5e:	230c      	movs	r3, #12
 8004a60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004a62:	8bfb      	ldrh	r3, [r7, #30]
 8004a64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004a68:	d803      	bhi.n	8004a72 <mem_trim+0x32>
 8004a6a:	8bfa      	ldrh	r2, [r7, #30]
 8004a6c:	887b      	ldrh	r3, [r7, #2]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d201      	bcs.n	8004a76 <mem_trim+0x36>
    return NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e0cc      	b.n	8004c10 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004a76:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <mem_trim+0x1d8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d304      	bcc.n	8004a8a <mem_trim+0x4a>
 8004a80:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <mem_trim+0x1dc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d306      	bcc.n	8004a98 <mem_trim+0x58>
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <mem_trim+0x1e0>)
 8004a8c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004a90:	4964      	ldr	r1, [pc, #400]	; (8004c24 <mem_trim+0x1e4>)
 8004a92:	4865      	ldr	r0, [pc, #404]	; (8004c28 <mem_trim+0x1e8>)
 8004a94:	f00a fa32 	bl	800eefc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a98:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <mem_trim+0x1d8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d304      	bcc.n	8004aac <mem_trim+0x6c>
 8004aa2:	4b5e      	ldr	r3, [pc, #376]	; (8004c1c <mem_trim+0x1dc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d301      	bcc.n	8004ab0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	e0af      	b.n	8004c10 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b08      	subs	r3, #8
 8004ab4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004ab6:	69b8      	ldr	r0, [r7, #24]
 8004ab8:	f7ff fe2c 	bl	8004714 <mem_to_ptr>
 8004abc:	4603      	mov	r3, r0
 8004abe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	8afb      	ldrh	r3, [r7, #22]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b08      	subs	r3, #8
 8004acc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004ace:	8bfa      	ldrh	r2, [r7, #30]
 8004ad0:	8abb      	ldrh	r3, [r7, #20]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d906      	bls.n	8004ae4 <mem_trim+0xa4>
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <mem_trim+0x1e0>)
 8004ad8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004adc:	4953      	ldr	r1, [pc, #332]	; (8004c2c <mem_trim+0x1ec>)
 8004ade:	4852      	ldr	r0, [pc, #328]	; (8004c28 <mem_trim+0x1e8>)
 8004ae0:	f00a fa0c 	bl	800eefc <iprintf>
  if (newsize > size) {
 8004ae4:	8bfa      	ldrh	r2, [r7, #30]
 8004ae6:	8abb      	ldrh	r3, [r7, #20]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d901      	bls.n	8004af0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e08f      	b.n	8004c10 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004af0:	8bfa      	ldrh	r2, [r7, #30]
 8004af2:	8abb      	ldrh	r3, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d101      	bne.n	8004afc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	e089      	b.n	8004c10 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fdf5 	bl	80046f0 <ptr_to_mem>
 8004b06:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	791b      	ldrb	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d13f      	bne.n	8004b90 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b18:	d106      	bne.n	8004b28 <mem_trim+0xe8>
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <mem_trim+0x1e0>)
 8004b1c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004b20:	4943      	ldr	r1, [pc, #268]	; (8004c30 <mem_trim+0x1f0>)
 8004b22:	4841      	ldr	r0, [pc, #260]	; (8004c28 <mem_trim+0x1e8>)
 8004b24:	f00a f9ea 	bl	800eefc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b2e:	8afa      	ldrh	r2, [r7, #22]
 8004b30:	8bfb      	ldrh	r3, [r7, #30]
 8004b32:	4413      	add	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3308      	adds	r3, #8
 8004b38:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <mem_trim+0x1f4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d106      	bne.n	8004b52 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fdd2 	bl	80046f0 <ptr_to_mem>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <mem_trim+0x1f4>)
 8004b50:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004b52:	89fb      	ldrh	r3, [r7, #14]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fdcb 	bl	80046f0 <ptr_to_mem>
 8004b5a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	89ba      	ldrh	r2, [r7, #12]
 8004b66:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	8afa      	ldrh	r2, [r7, #22]
 8004b6c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	89fa      	ldrh	r2, [r7, #14]
 8004b72:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b7c:	d047      	beq.n	8004c0e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fdb4 	bl	80046f0 <ptr_to_mem>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	8053      	strh	r3, [r2, #2]
 8004b8e:	e03e      	b.n	8004c0e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004b90:	8bfb      	ldrh	r3, [r7, #30]
 8004b92:	f103 0214 	add.w	r2, r3, #20
 8004b96:	8abb      	ldrh	r3, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d838      	bhi.n	8004c0e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b9c:	8afa      	ldrh	r2, [r7, #22]
 8004b9e:	8bfb      	ldrh	r3, [r7, #30]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bb0:	d106      	bne.n	8004bc0 <mem_trim+0x180>
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <mem_trim+0x1e0>)
 8004bb4:	f240 3216 	movw	r2, #790	; 0x316
 8004bb8:	491d      	ldr	r1, [pc, #116]	; (8004c30 <mem_trim+0x1f0>)
 8004bba:	481b      	ldr	r0, [pc, #108]	; (8004c28 <mem_trim+0x1e8>)
 8004bbc:	f00a f99e 	bl	800eefc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fd94 	bl	80046f0 <ptr_to_mem>
 8004bc8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <mem_trim+0x1f4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d202      	bcs.n	8004bda <mem_trim+0x19a>
      lfree = mem2;
 8004bd4:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <mem_trim+0x1f4>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	8afa      	ldrh	r2, [r7, #22]
 8004bec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	89fa      	ldrh	r2, [r7, #14]
 8004bf2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bfc:	d007      	beq.n	8004c0e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd74 	bl	80046f0 <ptr_to_mem>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004c0e:	687b      	ldr	r3, [r7, #4]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200000a4 	.word	0x200000a4
 8004c1c:	200000a8 	.word	0x200000a8
 8004c20:	08010354 	.word	0x08010354
 8004c24:	080104c4 	.word	0x080104c4
 8004c28:	0801039c 	.word	0x0801039c
 8004c2c:	080104dc 	.word	0x080104dc
 8004c30:	080104fc 	.word	0x080104fc
 8004c34:	200000ac 	.word	0x200000ac

08004c38 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <mem_malloc+0x14>
    return NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e0d9      	b.n	8004e00 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	3303      	adds	r3, #3
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004c58:	8bbb      	ldrh	r3, [r7, #28]
 8004c5a:	2b0b      	cmp	r3, #11
 8004c5c:	d801      	bhi.n	8004c62 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004c5e:	230c      	movs	r3, #12
 8004c60:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004c62:	8bbb      	ldrh	r3, [r7, #28]
 8004c64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c68:	d803      	bhi.n	8004c72 <mem_malloc+0x3a>
 8004c6a:	8bba      	ldrh	r2, [r7, #28]
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d201      	bcs.n	8004c76 <mem_malloc+0x3e>
    return NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e0c4      	b.n	8004e00 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004c76:	4b64      	ldr	r3, [pc, #400]	; (8004e08 <mem_malloc+0x1d0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fd4a 	bl	8004714 <mem_to_ptr>
 8004c80:	4603      	mov	r3, r0
 8004c82:	83fb      	strh	r3, [r7, #30]
 8004c84:	e0b4      	b.n	8004df0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004c86:	8bfb      	ldrh	r3, [r7, #30]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fd31 	bl	80046f0 <ptr_to_mem>
 8004c8e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	791b      	ldrb	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 80a4 	bne.w	8004de2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f1a3 0208 	sub.w	r2, r3, #8
 8004ca8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004caa:	429a      	cmp	r2, r3
 8004cac:	f0c0 8099 	bcc.w	8004de2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f1a3 0208 	sub.w	r2, r3, #8
 8004cbe:	8bbb      	ldrh	r3, [r7, #28]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d333      	bcc.n	8004d2e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004cc6:	8bfa      	ldrh	r2, [r7, #30]
 8004cc8:	8bbb      	ldrh	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3308      	adds	r3, #8
 8004cd0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004cd2:	8a7b      	ldrh	r3, [r7, #18]
 8004cd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004cd8:	d106      	bne.n	8004ce8 <mem_malloc+0xb0>
 8004cda:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <mem_malloc+0x1d4>)
 8004cdc:	f240 3287 	movw	r2, #903	; 0x387
 8004ce0:	494b      	ldr	r1, [pc, #300]	; (8004e10 <mem_malloc+0x1d8>)
 8004ce2:	484c      	ldr	r0, [pc, #304]	; (8004e14 <mem_malloc+0x1dc>)
 8004ce4:	f00a f90a 	bl	800eefc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004ce8:	8a7b      	ldrh	r3, [r7, #18]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fd00 	bl	80046f0 <ptr_to_mem>
 8004cf0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8bfa      	ldrh	r2, [r7, #30]
 8004d04:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	8a7a      	ldrh	r2, [r7, #18]
 8004d0a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d1a:	d00b      	beq.n	8004d34 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fce5 	bl	80046f0 <ptr_to_mem>
 8004d26:	4602      	mov	r2, r0
 8004d28:	8a7b      	ldrh	r3, [r7, #18]
 8004d2a:	8053      	strh	r3, [r2, #2]
 8004d2c:	e002      	b.n	8004d34 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2201      	movs	r2, #1
 8004d32:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <mem_malloc+0x1d0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d127      	bne.n	8004d8e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <mem_malloc+0x1d0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004d44:	e005      	b.n	8004d52 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fcd0 	bl	80046f0 <ptr_to_mem>
 8004d50:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <mem_malloc+0x12c>
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <mem_malloc+0x1e0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1f0      	bne.n	8004d46 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004d64:	4a28      	ldr	r2, [pc, #160]	; (8004e08 <mem_malloc+0x1d0>)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004d6a:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <mem_malloc+0x1d0>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <mem_malloc+0x1e0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d00b      	beq.n	8004d8e <mem_malloc+0x156>
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <mem_malloc+0x1d0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d006      	beq.n	8004d8e <mem_malloc+0x156>
 8004d80:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <mem_malloc+0x1d4>)
 8004d82:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004d86:	4925      	ldr	r1, [pc, #148]	; (8004e1c <mem_malloc+0x1e4>)
 8004d88:	4822      	ldr	r0, [pc, #136]	; (8004e14 <mem_malloc+0x1dc>)
 8004d8a:	f00a f8b7 	bl	800eefc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d8e:	8bba      	ldrh	r2, [r7, #28]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	3308      	adds	r3, #8
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <mem_malloc+0x1e0>)
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d906      	bls.n	8004dac <mem_malloc+0x174>
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <mem_malloc+0x1d4>)
 8004da0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004da4:	491e      	ldr	r1, [pc, #120]	; (8004e20 <mem_malloc+0x1e8>)
 8004da6:	481b      	ldr	r0, [pc, #108]	; (8004e14 <mem_malloc+0x1dc>)
 8004da8:	f00a f8a8 	bl	800eefc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <mem_malloc+0x18c>
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <mem_malloc+0x1d4>)
 8004db8:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004dbc:	4919      	ldr	r1, [pc, #100]	; (8004e24 <mem_malloc+0x1ec>)
 8004dbe:	4815      	ldr	r0, [pc, #84]	; (8004e14 <mem_malloc+0x1dc>)
 8004dc0:	f00a f89c 	bl	800eefc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <mem_malloc+0x1a4>
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <mem_malloc+0x1d4>)
 8004dd0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004dd4:	4914      	ldr	r1, [pc, #80]	; (8004e28 <mem_malloc+0x1f0>)
 8004dd6:	480f      	ldr	r0, [pc, #60]	; (8004e14 <mem_malloc+0x1dc>)
 8004dd8:	f00a f890 	bl	800eefc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3308      	adds	r3, #8
 8004de0:	e00e      	b.n	8004e00 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004de2:	8bfb      	ldrh	r3, [r7, #30]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fc83 	bl	80046f0 <ptr_to_mem>
 8004dea:	4603      	mov	r3, r0
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004df0:	8bfa      	ldrh	r2, [r7, #30]
 8004df2:	8bbb      	ldrh	r3, [r7, #28]
 8004df4:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f4ff af44 	bcc.w	8004c86 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	200000ac 	.word	0x200000ac
 8004e0c:	08010354 	.word	0x08010354
 8004e10:	080104fc 	.word	0x080104fc
 8004e14:	0801039c 	.word	0x0801039c
 8004e18:	200000a8 	.word	0x200000a8
 8004e1c:	08010510 	.word	0x08010510
 8004e20:	0801052c 	.word	0x0801052c
 8004e24:	0801055c 	.word	0x0801055c
 8004e28:	0801058c 	.word	0x0801058c

08004e2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3303      	adds	r3, #3
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e011      	b.n	8004e72 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	885b      	ldrh	r3, [r3, #2]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	dbe7      	blt.n	8004e4e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e92:	2300      	movs	r3, #0
 8004e94:	80fb      	strh	r3, [r7, #6]
 8004e96:	e009      	b.n	8004eac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <memp_init+0x30>)
 8004e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ffc3 	bl	8004e2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	80fb      	strh	r3, [r7, #6]
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d9f2      	bls.n	8004e98 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	08012d5c 	.word	0x08012d5c

08004ec0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <do_memp_malloc_pool+0x38>
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <do_memp_malloc_pool+0x48>)
 8004eec:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004ef0:	4906      	ldr	r1, [pc, #24]	; (8004f0c <do_memp_malloc_pool+0x4c>)
 8004ef2:	4807      	ldr	r0, [pc, #28]	; (8004f10 <do_memp_malloc_pool+0x50>)
 8004ef4:	f00a f802 	bl	800eefc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	e000      	b.n	8004efe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	080105b0 	.word	0x080105b0
 8004f0c:	080105e0 	.word	0x080105e0
 8004f10:	08010604 	.word	0x08010604

08004f14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d908      	bls.n	8004f36 <memp_malloc+0x22>
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <memp_malloc+0x3c>)
 8004f26:	f240 1257 	movw	r2, #343	; 0x157
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <memp_malloc+0x40>)
 8004f2c:	480a      	ldr	r0, [pc, #40]	; (8004f58 <memp_malloc+0x44>)
 8004f2e:	f009 ffe5 	bl	800eefc <iprintf>
 8004f32:	2300      	movs	r3, #0
 8004f34:	e008      	b.n	8004f48 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <memp_malloc+0x48>)
 8004f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ffbe 	bl	8004ec0 <do_memp_malloc_pool>
 8004f44:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	080105b0 	.word	0x080105b0
 8004f54:	08010640 	.word	0x08010640
 8004f58:	08010604 	.word	0x08010604
 8004f5c:	08012d5c 	.word	0x08012d5c

08004f60 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <do_memp_free_pool+0x22>
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <do_memp_free_pool+0x40>)
 8004f76:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004f7a:	490a      	ldr	r1, [pc, #40]	; (8004fa4 <do_memp_free_pool+0x44>)
 8004f7c:	480a      	ldr	r0, [pc, #40]	; (8004fa8 <do_memp_free_pool+0x48>)
 8004f7e:	f009 ffbd 	bl	800eefc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	080105b0 	.word	0x080105b0
 8004fa4:	08010660 	.word	0x08010660
 8004fa8:	08010604 	.word	0x08010604

08004fac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d907      	bls.n	8004fce <memp_free+0x22>
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <memp_free+0x44>)
 8004fc0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004fc4:	490b      	ldr	r1, [pc, #44]	; (8004ff4 <memp_free+0x48>)
 8004fc6:	480c      	ldr	r0, [pc, #48]	; (8004ff8 <memp_free+0x4c>)
 8004fc8:	f009 ff98 	bl	800eefc <iprintf>
 8004fcc:	e00c      	b.n	8004fe8 <memp_free+0x3c>

  if (mem == NULL) {
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <memp_free+0x50>)
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ffbe 	bl	8004f60 <do_memp_free_pool>
 8004fe4:	e000      	b.n	8004fe8 <memp_free+0x3c>
    return;
 8004fe6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	080105b0 	.word	0x080105b0
 8004ff4:	08010680 	.word	0x08010680
 8004ff8:	08010604 	.word	0x08010604
 8004ffc:	08012d5c 	.word	0x08012d5c

08005000 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d108      	bne.n	8005036 <netif_add+0x26>
 8005024:	4b57      	ldr	r3, [pc, #348]	; (8005184 <netif_add+0x174>)
 8005026:	f240 1227 	movw	r2, #295	; 0x127
 800502a:	4957      	ldr	r1, [pc, #348]	; (8005188 <netif_add+0x178>)
 800502c:	4857      	ldr	r0, [pc, #348]	; (800518c <netif_add+0x17c>)
 800502e:	f009 ff65 	bl	800eefc <iprintf>
 8005032:	2300      	movs	r3, #0
 8005034:	e0a2      	b.n	800517c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d108      	bne.n	800504e <netif_add+0x3e>
 800503c:	4b51      	ldr	r3, [pc, #324]	; (8005184 <netif_add+0x174>)
 800503e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005042:	4953      	ldr	r1, [pc, #332]	; (8005190 <netif_add+0x180>)
 8005044:	4851      	ldr	r0, [pc, #324]	; (800518c <netif_add+0x17c>)
 8005046:	f009 ff59 	bl	800eefc <iprintf>
 800504a:	2300      	movs	r3, #0
 800504c:	e096      	b.n	800517c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005054:	4b4f      	ldr	r3, [pc, #316]	; (8005194 <netif_add+0x184>)
 8005056:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800505e:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <netif_add+0x184>)
 8005060:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005068:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <netif_add+0x184>)
 800506a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a45      	ldr	r2, [pc, #276]	; (8005198 <netif_add+0x188>)
 8005082:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a3a      	ldr	r2, [r7, #32]
 800509c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800509e:	4b3f      	ldr	r3, [pc, #252]	; (800519c <netif_add+0x18c>)
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f913 	bl	80052e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	4798      	blx	r3
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <netif_add+0xba>
    return NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e058      	b.n	800517c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050d0:	2bff      	cmp	r3, #255	; 0xff
 80050d2:	d103      	bne.n	80050dc <netif_add+0xcc>
        netif->num = 0;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80050e0:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <netif_add+0x190>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e02b      	b.n	8005140 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d106      	bne.n	80050fe <netif_add+0xee>
 80050f0:	4b24      	ldr	r3, [pc, #144]	; (8005184 <netif_add+0x174>)
 80050f2:	f240 128b 	movw	r2, #395	; 0x18b
 80050f6:	492b      	ldr	r1, [pc, #172]	; (80051a4 <netif_add+0x194>)
 80050f8:	4824      	ldr	r0, [pc, #144]	; (800518c <netif_add+0x17c>)
 80050fa:	f009 feff 	bl	800eefc <iprintf>
        num_netifs++;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3301      	adds	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2bff      	cmp	r3, #255	; 0xff
 8005108:	dd06      	ble.n	8005118 <netif_add+0x108>
 800510a:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <netif_add+0x174>)
 800510c:	f240 128d 	movw	r2, #397	; 0x18d
 8005110:	4925      	ldr	r1, [pc, #148]	; (80051a8 <netif_add+0x198>)
 8005112:	481e      	ldr	r0, [pc, #120]	; (800518c <netif_add+0x17c>)
 8005114:	f009 fef2 	bl	800eefc <iprintf>
        if (netif2->num == netif->num) {
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005124:	429a      	cmp	r2, r3
 8005126:	d108      	bne.n	800513a <netif_add+0x12a>
          netif->num++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800512e:	3301      	adds	r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005138:	e005      	b.n	8005146 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d0      	bne.n	80050e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1be      	bne.n	80050ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005152:	2bfe      	cmp	r3, #254	; 0xfe
 8005154:	d103      	bne.n	800515e <netif_add+0x14e>
    netif_num = 0;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <netif_add+0x18c>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e006      	b.n	800516c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005164:	3301      	adds	r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <netif_add+0x18c>)
 800516a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <netif_add+0x190>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <netif_add+0x190>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	0801069c 	.word	0x0801069c
 8005188:	08010730 	.word	0x08010730
 800518c:	080106ec 	.word	0x080106ec
 8005190:	0801074c 	.word	0x0801074c
 8005194:	08012dc0 	.word	0x08012dc0
 8005198:	080054f3 	.word	0x080054f3
 800519c:	200000d4 	.word	0x200000d4
 80051a0:	20008aa4 	.word	0x20008aa4
 80051a4:	08010770 	.word	0x08010770
 80051a8:	08010784 	.word	0x08010784

080051ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f002 fd7f 	bl	8007cbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f007 fab7 	bl	800c734 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <netif_do_set_ipaddr+0x20>
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <netif_do_set_ipaddr+0x88>)
 80051e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80051e8:	491c      	ldr	r1, [pc, #112]	; (800525c <netif_do_set_ipaddr+0x8c>)
 80051ea:	481d      	ldr	r0, [pc, #116]	; (8005260 <netif_do_set_ipaddr+0x90>)
 80051ec:	f009 fe86 	bl	800eefc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <netif_do_set_ipaddr+0x34>
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <netif_do_set_ipaddr+0x88>)
 80051f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80051fc:	4917      	ldr	r1, [pc, #92]	; (800525c <netif_do_set_ipaddr+0x8c>)
 80051fe:	4818      	ldr	r0, [pc, #96]	; (8005260 <netif_do_set_ipaddr+0x90>)
 8005200:	f009 fe7c 	bl	800eefc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3304      	adds	r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d01c      	beq.n	800524c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3304      	adds	r3, #4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ffbf 	bl	80051ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <netif_do_set_ipaddr+0x6a>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	e000      	b.n	800523c <netif_do_set_ipaddr+0x6c>
 800523a:	2300      	movs	r3, #0
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005240:	2101      	movs	r1, #1
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f8d2 	bl	80053ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	0801069c 	.word	0x0801069c
 800525c:	080107b4 	.word	0x080107b4
 8005260:	080106ec 	.word	0x080106ec

08005264 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3308      	adds	r3, #8
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00a      	beq.n	8005294 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <netif_do_set_netmask+0x26>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	e000      	b.n	800528c <netif_do_set_netmask+0x28>
 800528a:	2300      	movs	r3, #0
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	330c      	adds	r3, #12
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d00a      	beq.n	80052d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <netif_do_set_gw+0x26>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	e000      	b.n	80052ca <netif_do_set_gw+0x28>
 80052c8:	2300      	movs	r3, #0
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80052fc:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <netif_set_addr+0x90>)
 80052fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <netif_set_addr+0x90>)
 8005308:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <netif_set_addr+0x90>)
 8005312:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <netif_set_addr+0x42>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <netif_set_addr+0x46>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <netif_set_addr+0x48>
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  if (remove) {
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	461a      	mov	r2, r3
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff ff49 	bl	80051d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff8e 	bl	8005264 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ffa8 	bl	80052a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	461a      	mov	r2, r3
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff ff35 	bl	80051d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005366:	bf00      	nop
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	08012dc0 	.word	0x08012dc0

08005374 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <netif_set_default+0x1c>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20008aa8 	.word	0x20008aa8

08005394 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <netif_set_up+0x1e>
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <netif_set_up+0x4c>)
 80053a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <netif_set_up+0x50>)
 80053aa:	480f      	ldr	r0, [pc, #60]	; (80053e8 <netif_set_up+0x54>)
 80053ac:	f009 fda6 	bl	800eefc <iprintf>
 80053b0:	e013      	b.n	80053da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10c      	bne.n	80053da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80053d2:	2103      	movs	r1, #3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f809 	bl	80053ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0801069c 	.word	0x0801069c
 80053e4:	08010824 	.word	0x08010824
 80053e8:	080106ec 	.word	0x080106ec

080053ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <netif_issue_reports+0x20>
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <netif_issue_reports+0x74>)
 8005400:	f240 326d 	movw	r2, #877	; 0x36d
 8005404:	4917      	ldr	r1, [pc, #92]	; (8005464 <netif_issue_reports+0x78>)
 8005406:	4818      	ldr	r0, [pc, #96]	; (8005468 <netif_issue_reports+0x7c>)
 8005408:	f009 fd78 	bl	800eefc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01e      	beq.n	8005458 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005420:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d013      	beq.n	800545a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f008 f8d9 	bl	800d608 <etharp_request>
 8005456:	e000      	b.n	800545a <netif_issue_reports+0x6e>
    return;
 8005458:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	0801069c 	.word	0x0801069c
 8005464:	08010840 	.word	0x08010840
 8005468:	080106ec 	.word	0x080106ec

0800546c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <netif_set_down+0x1e>
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <netif_set_down+0x58>)
 800547c:	f240 329b 	movw	r2, #923	; 0x39b
 8005480:	4911      	ldr	r1, [pc, #68]	; (80054c8 <netif_set_down+0x5c>)
 8005482:	4812      	ldr	r0, [pc, #72]	; (80054cc <netif_set_down+0x60>)
 8005484:	f009 fd3a 	bl	800eefc <iprintf>
 8005488:	e019      	b.n	80054be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d012      	beq.n	80054be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f007 fc63 	bl	800cd84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	0801069c 	.word	0x0801069c
 80054c8:	08010864 	.word	0x08010864
 80054cc:	080106ec 	.word	0x080106ec

080054d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	61da      	str	r2, [r3, #28]
  }
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80054fe:	f06f 030b 	mvn.w	r3, #11
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <netif_get_by_index+0x48>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e00c      	b.n	8005542 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800552e:	3301      	adds	r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	79fa      	ldrb	r2, [r7, #7]
 8005534:	429a      	cmp	r2, r3
 8005536:	d101      	bne.n	800553c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	e006      	b.n	800554a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ef      	bne.n	8005528 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20008aa4 	.word	0x20008aa4

0800555c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005562:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <pbuf_free_ooseq+0x38>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <pbuf_free_ooseq+0x3c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	e00a      	b.n	8005586 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f002 fbdd 	bl	8007d38 <tcp_free_ooseq>
      return;
 800557e:	e005      	b.n	800558c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f1      	bne.n	8005570 <pbuf_free_ooseq+0x14>
    }
  }
}
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20008aac 	.word	0x20008aac
 8005598:	20008ab4 	.word	0x20008ab4

0800559c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <pbuf_pool_is_empty+0x14>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20008aac 	.word	0x20008aac

080055b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	460b      	mov	r3, r1
 80055c4:	80fb      	strh	r3, [r7, #6]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88ba      	ldrh	r2, [r7, #4]
 80055e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80055e2:	8b3b      	ldrh	r3, [r7, #24]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	7f3a      	ldrb	r2, [r7, #28]
 80055ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	73da      	strb	r2, [r3, #15]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af02      	add	r7, sp, #8
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
 8005612:	460b      	mov	r3, r1
 8005614:	80bb      	strh	r3, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005624:	d07f      	beq.n	8005726 <pbuf_alloc+0x11e>
 8005626:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800562a:	f300 80c8 	bgt.w	80057be <pbuf_alloc+0x1b6>
 800562e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005632:	d010      	beq.n	8005656 <pbuf_alloc+0x4e>
 8005634:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005638:	f300 80c1 	bgt.w	80057be <pbuf_alloc+0x1b6>
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <pbuf_alloc+0x3e>
 8005640:	2b41      	cmp	r3, #65	; 0x41
 8005642:	f040 80bc 	bne.w	80057be <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005646:	887a      	ldrh	r2, [r7, #2]
 8005648:	88bb      	ldrh	r3, [r7, #4]
 800564a:	4619      	mov	r1, r3
 800564c:	2000      	movs	r0, #0
 800564e:	f000 f8d1 	bl	80057f4 <pbuf_alloc_reference>
 8005652:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005654:	e0bd      	b.n	80057d2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800565e:	88bb      	ldrh	r3, [r7, #4]
 8005660:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005662:	2008      	movs	r0, #8
 8005664:	f7ff fc56 	bl	8004f14 <memp_malloc>
 8005668:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005670:	f7ff ff94 	bl	800559c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <pbuf_alloc+0x78>
            pbuf_free(p);
 800567a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800567c:	f000 faa8 	bl	8005bd0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	e0a7      	b.n	80057d4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005686:	3303      	adds	r3, #3
 8005688:	b29b      	uxth	r3, r3
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	b29b      	uxth	r3, r3
 8005690:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005694:	b29b      	uxth	r3, r3
 8005696:	8b7a      	ldrh	r2, [r7, #26]
 8005698:	4293      	cmp	r3, r2
 800569a:	bf28      	it	cs
 800569c:	4613      	movcs	r3, r2
 800569e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80056a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056a2:	3310      	adds	r3, #16
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	3303      	adds	r3, #3
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	4618      	mov	r0, r3
 80056b0:	89f9      	ldrh	r1, [r7, #14]
 80056b2:	8b7a      	ldrh	r2, [r7, #26]
 80056b4:	2300      	movs	r3, #0
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	460b      	mov	r3, r1
 80056be:	4601      	mov	r1, r0
 80056c0:	6938      	ldr	r0, [r7, #16]
 80056c2:	f7ff ff77 	bl	80055b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <pbuf_alloc+0xd8>
 80056d2:	4b42      	ldr	r3, [pc, #264]	; (80057dc <pbuf_alloc+0x1d4>)
 80056d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d8:	4941      	ldr	r1, [pc, #260]	; (80057e0 <pbuf_alloc+0x1d8>)
 80056da:	4842      	ldr	r0, [pc, #264]	; (80057e4 <pbuf_alloc+0x1dc>)
 80056dc:	f009 fc0e 	bl	800eefc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80056e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056e2:	3303      	adds	r3, #3
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80056ec:	d106      	bne.n	80056fc <pbuf_alloc+0xf4>
 80056ee:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <pbuf_alloc+0x1d4>)
 80056f0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80056f4:	493c      	ldr	r1, [pc, #240]	; (80057e8 <pbuf_alloc+0x1e0>)
 80056f6:	483b      	ldr	r0, [pc, #236]	; (80057e4 <pbuf_alloc+0x1dc>)
 80056f8:	f009 fc00 	bl	800eefc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e002      	b.n	800570e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005712:	8b7a      	ldrh	r2, [r7, #26]
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800571e:	8b7b      	ldrh	r3, [r7, #26]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d19e      	bne.n	8005662 <pbuf_alloc+0x5a>
      break;
 8005724:	e055      	b.n	80057d2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005728:	3303      	adds	r3, #3
 800572a:	b29b      	uxth	r3, r3
 800572c:	f023 0303 	bic.w	r3, r3, #3
 8005730:	b29a      	uxth	r2, r3
 8005732:	88bb      	ldrh	r3, [r7, #4]
 8005734:	3303      	adds	r3, #3
 8005736:	b29b      	uxth	r3, r3
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	b29b      	uxth	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005742:	8b3b      	ldrh	r3, [r7, #24]
 8005744:	3310      	adds	r3, #16
 8005746:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005748:	8b3a      	ldrh	r2, [r7, #24]
 800574a:	88bb      	ldrh	r3, [r7, #4]
 800574c:	3303      	adds	r3, #3
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	429a      	cmp	r2, r3
 8005754:	d306      	bcc.n	8005764 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005756:	8afa      	ldrh	r2, [r7, #22]
 8005758:	88bb      	ldrh	r3, [r7, #4]
 800575a:	3303      	adds	r3, #3
 800575c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d201      	bcs.n	8005768 <pbuf_alloc+0x160>
        return NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	e035      	b.n	80057d4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005768:	8afb      	ldrh	r3, [r7, #22]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fa64 	bl	8004c38 <mem_malloc>
 8005770:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <pbuf_alloc+0x174>
        return NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	e02b      	b.n	80057d4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800577c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800577e:	3310      	adds	r3, #16
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	4413      	add	r3, r2
 8005784:	3303      	adds	r3, #3
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	4618      	mov	r0, r3
 800578c:	88b9      	ldrh	r1, [r7, #4]
 800578e:	88ba      	ldrh	r2, [r7, #4]
 8005790:	2300      	movs	r3, #0
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	460b      	mov	r3, r1
 800579a:	4601      	mov	r1, r0
 800579c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579e:	f7ff ff09 	bl	80055b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <pbuf_alloc+0x1c8>
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <pbuf_alloc+0x1d4>)
 80057b0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80057b4:	490d      	ldr	r1, [pc, #52]	; (80057ec <pbuf_alloc+0x1e4>)
 80057b6:	480b      	ldr	r0, [pc, #44]	; (80057e4 <pbuf_alloc+0x1dc>)
 80057b8:	f009 fba0 	bl	800eefc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80057bc:	e008      	b.n	80057d0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <pbuf_alloc+0x1d4>)
 80057c0:	f240 1227 	movw	r2, #295	; 0x127
 80057c4:	490a      	ldr	r1, [pc, #40]	; (80057f0 <pbuf_alloc+0x1e8>)
 80057c6:	4807      	ldr	r0, [pc, #28]	; (80057e4 <pbuf_alloc+0x1dc>)
 80057c8:	f009 fb98 	bl	800eefc <iprintf>
      return NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e001      	b.n	80057d4 <pbuf_alloc+0x1cc>
      break;
 80057d0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3728      	adds	r7, #40	; 0x28
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	080108cc 	.word	0x080108cc
 80057e0:	080108fc 	.word	0x080108fc
 80057e4:	0801092c 	.word	0x0801092c
 80057e8:	08010954 	.word	0x08010954
 80057ec:	08010988 	.word	0x08010988
 80057f0:	080109b4 	.word	0x080109b4

080057f4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	807b      	strh	r3, [r7, #2]
 8005800:	4613      	mov	r3, r2
 8005802:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005804:	883b      	ldrh	r3, [r7, #0]
 8005806:	2b41      	cmp	r3, #65	; 0x41
 8005808:	d009      	beq.n	800581e <pbuf_alloc_reference+0x2a>
 800580a:	883b      	ldrh	r3, [r7, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d006      	beq.n	800581e <pbuf_alloc_reference+0x2a>
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <pbuf_alloc_reference+0x5c>)
 8005812:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005816:	490f      	ldr	r1, [pc, #60]	; (8005854 <pbuf_alloc_reference+0x60>)
 8005818:	480f      	ldr	r0, [pc, #60]	; (8005858 <pbuf_alloc_reference+0x64>)
 800581a:	f009 fb6f 	bl	800eefc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800581e:	2007      	movs	r0, #7
 8005820:	f7ff fb78 	bl	8004f14 <memp_malloc>
 8005824:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	e00b      	b.n	8005848 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005830:	8879      	ldrh	r1, [r7, #2]
 8005832:	887a      	ldrh	r2, [r7, #2]
 8005834:	2300      	movs	r3, #0
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	883b      	ldrh	r3, [r7, #0]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	460b      	mov	r3, r1
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff feb7 	bl	80055b4 <pbuf_init_alloced_pbuf>
  return p;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	080108cc 	.word	0x080108cc
 8005854:	080109d0 	.word	0x080109d0
 8005858:	0801092c 	.word	0x0801092c

0800585c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	460b      	mov	r3, r1
 800586a:	81bb      	strh	r3, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005874:	8a7b      	ldrh	r3, [r7, #18]
 8005876:	3303      	adds	r3, #3
 8005878:	f023 0203 	bic.w	r2, r3, #3
 800587c:	89bb      	ldrh	r3, [r7, #12]
 800587e:	441a      	add	r2, r3
 8005880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005882:	429a      	cmp	r2, r3
 8005884:	d901      	bls.n	800588a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	e018      	b.n	80058bc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005890:	8a7b      	ldrh	r3, [r7, #18]
 8005892:	3303      	adds	r3, #3
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	4413      	add	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e001      	b.n	80058a4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	89b9      	ldrh	r1, [r7, #12]
 80058a8:	89ba      	ldrh	r2, [r7, #12]
 80058aa:	2302      	movs	r3, #2
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	460b      	mov	r3, r1
 80058b4:	6979      	ldr	r1, [r7, #20]
 80058b6:	f7ff fe7d 	bl	80055b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80058ba:	687b      	ldr	r3, [r7, #4]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <pbuf_realloc+0x20>
 80058d6:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <pbuf_realloc+0xfc>)
 80058d8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80058dc:	4939      	ldr	r1, [pc, #228]	; (80059c4 <pbuf_realloc+0x100>)
 80058de:	483a      	ldr	r0, [pc, #232]	; (80059c8 <pbuf_realloc+0x104>)
 80058e0:	f009 fb0c 	bl	800eefc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	891b      	ldrh	r3, [r3, #8]
 80058e8:	887a      	ldrh	r2, [r7, #2]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d263      	bcs.n	80059b6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	891a      	ldrh	r2, [r3, #8]
 80058f2:	887b      	ldrh	r3, [r7, #2]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	817b      	strh	r3, [r7, #10]
  q = p;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005900:	e018      	b.n	8005934 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	895b      	ldrh	r3, [r3, #10]
 8005906:	897a      	ldrh	r2, [r7, #10]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	891a      	ldrh	r2, [r3, #8]
 8005910:	893b      	ldrh	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <pbuf_realloc+0x70>
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <pbuf_realloc+0xfc>)
 8005928:	f240 12af 	movw	r2, #431	; 0x1af
 800592c:	4927      	ldr	r1, [pc, #156]	; (80059cc <pbuf_realloc+0x108>)
 800592e:	4826      	ldr	r0, [pc, #152]	; (80059c8 <pbuf_realloc+0x104>)
 8005930:	f009 fae4 	bl	800eefc <iprintf>
  while (rem_len > q->len) {
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	895b      	ldrh	r3, [r3, #10]
 8005938:	897a      	ldrh	r2, [r7, #10]
 800593a:	429a      	cmp	r2, r3
 800593c:	d8e1      	bhi.n	8005902 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	2b00      	cmp	r3, #0
 8005948:	d121      	bne.n	800598e <pbuf_realloc+0xca>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	895b      	ldrh	r3, [r3, #10]
 800594e:	897a      	ldrh	r2, [r7, #10]
 8005950:	429a      	cmp	r2, r3
 8005952:	d01c      	beq.n	800598e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7b5b      	ldrb	r3, [r3, #13]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d116      	bne.n	800598e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	b29a      	uxth	r2, r3
 800596a:	897b      	ldrh	r3, [r7, #10]
 800596c:	4413      	add	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	4619      	mov	r1, r3
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff f864 	bl	8004a40 <mem_trim>
 8005978:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <pbuf_realloc+0xca>
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <pbuf_realloc+0xfc>)
 8005982:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005986:	4912      	ldr	r1, [pc, #72]	; (80059d0 <pbuf_realloc+0x10c>)
 8005988:	480f      	ldr	r0, [pc, #60]	; (80059c8 <pbuf_realloc+0x104>)
 800598a:	f009 fab7 	bl	800eefc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	897a      	ldrh	r2, [r7, #10]
 8005992:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	895a      	ldrh	r2, [r3, #10]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f911 	bl	8005bd0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e000      	b.n	80059b8 <pbuf_realloc+0xf4>
    return;
 80059b6:	bf00      	nop

}
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	080108cc 	.word	0x080108cc
 80059c4:	080109e4 	.word	0x080109e4
 80059c8:	0801092c 	.word	0x0801092c
 80059cc:	080109fc 	.word	0x080109fc
 80059d0:	08010a14 	.word	0x08010a14

080059d4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <pbuf_add_header_impl+0x22>
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <pbuf_add_header_impl+0xc4>)
 80059ea:	f240 12df 	movw	r2, #479	; 0x1df
 80059ee:	492b      	ldr	r1, [pc, #172]	; (8005a9c <pbuf_add_header_impl+0xc8>)
 80059f0:	482b      	ldr	r0, [pc, #172]	; (8005aa0 <pbuf_add_header_impl+0xcc>)
 80059f2:	f009 fa83 	bl	800eefc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <pbuf_add_header_impl+0x30>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a02:	d301      	bcc.n	8005a08 <pbuf_add_header_impl+0x34>
    return 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e043      	b.n	8005a90 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <pbuf_add_header_impl+0x3e>
    return 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e03e      	b.n	8005a90 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	891a      	ldrh	r2, [r3, #8]
 8005a1a:	8a7b      	ldrh	r3, [r7, #18]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8a7a      	ldrh	r2, [r7, #18]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d901      	bls.n	8005a2a <pbuf_add_header_impl+0x56>
    return 1;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e032      	b.n	8005a90 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	7b1b      	ldrb	r3, [r3, #12]
 8005a2e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005a30:	8a3b      	ldrh	r3, [r7, #16]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	425b      	negs	r3, r3
 8005a42:	4413      	add	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3310      	adds	r3, #16
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d20d      	bcs.n	8005a6c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e01d      	b.n	8005a90 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	425b      	negs	r3, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e001      	b.n	8005a6c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e011      	b.n	8005a90 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	895a      	ldrh	r2, [r3, #10]
 8005a76:	8a7b      	ldrh	r3, [r7, #18]
 8005a78:	4413      	add	r3, r2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	891a      	ldrh	r2, [r3, #8]
 8005a84:	8a7b      	ldrh	r3, [r7, #18]
 8005a86:	4413      	add	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	080108cc 	.word	0x080108cc
 8005a9c:	08010a30 	.word	0x08010a30
 8005aa0:	0801092c 	.word	0x0801092c

08005aa4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ff8e 	bl	80059d4 <pbuf_add_header_impl>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <pbuf_remove_header+0x1e>
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <pbuf_remove_header+0x94>)
 8005ad6:	f240 224b 	movw	r2, #587	; 0x24b
 8005ada:	4920      	ldr	r1, [pc, #128]	; (8005b5c <pbuf_remove_header+0x98>)
 8005adc:	4820      	ldr	r0, [pc, #128]	; (8005b60 <pbuf_remove_header+0x9c>)
 8005ade:	f009 fa0d 	bl	800eefc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <pbuf_remove_header+0x2c>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aee:	d301      	bcc.n	8005af4 <pbuf_remove_header+0x30>
    return 1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e02c      	b.n	8005b4e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <pbuf_remove_header+0x3a>
    return 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e027      	b.n	8005b4e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	895b      	ldrh	r3, [r3, #10]
 8005b06:	89fa      	ldrh	r2, [r7, #14]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d908      	bls.n	8005b1e <pbuf_remove_header+0x5a>
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <pbuf_remove_header+0x94>)
 8005b0e:	f240 2255 	movw	r2, #597	; 0x255
 8005b12:	4914      	ldr	r1, [pc, #80]	; (8005b64 <pbuf_remove_header+0xa0>)
 8005b14:	4812      	ldr	r0, [pc, #72]	; (8005b60 <pbuf_remove_header+0x9c>)
 8005b16:	f009 f9f1 	bl	800eefc <iprintf>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e017      	b.n	8005b4e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	895a      	ldrh	r2, [r3, #10]
 8005b34:	89fb      	ldrh	r3, [r7, #14]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	891a      	ldrh	r2, [r3, #8]
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	080108cc 	.word	0x080108cc
 8005b5c:	08010a30 	.word	0x08010a30
 8005b60:	0801092c 	.word	0x0801092c
 8005b64:	08010a3c 	.word	0x08010a3c

08005b68 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
 8005b74:	4613      	mov	r3, r2
 8005b76:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005b78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da08      	bge.n	8005b92 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005b80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b84:	425b      	negs	r3, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ff9b 	bl	8005ac4 <pbuf_remove_header>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	e007      	b.n	8005ba2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005b92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b96:	787a      	ldrb	r2, [r7, #1]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff1a 	bl	80059d4 <pbuf_add_header_impl>
 8005ba0:	4603      	mov	r3, r0
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005bb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ffd2 	bl	8005b68 <pbuf_header_impl>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <pbuf_free+0x22>
 8005be4:	4b38      	ldr	r3, [pc, #224]	; (8005cc8 <pbuf_free+0xf8>)
 8005be6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005bea:	4938      	ldr	r1, [pc, #224]	; (8005ccc <pbuf_free+0xfc>)
 8005bec:	4838      	ldr	r0, [pc, #224]	; (8005cd0 <pbuf_free+0x100>)
 8005bee:	f009 f985 	bl	800eefc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e063      	b.n	8005cbe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005bfa:	e05c      	b.n	8005cb6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7b9b      	ldrb	r3, [r3, #14]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <pbuf_free+0x42>
 8005c04:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <pbuf_free+0xf8>)
 8005c06:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005c0a:	4932      	ldr	r1, [pc, #200]	; (8005cd4 <pbuf_free+0x104>)
 8005c0c:	4830      	ldr	r0, [pc, #192]	; (8005cd0 <pbuf_free+0x100>)
 8005c0e:	f009 f975 	bl	800eefc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7b9b      	ldrb	r3, [r3, #14]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	739a      	strb	r2, [r3, #14]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7b9b      	ldrb	r3, [r3, #14]
 8005c22:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005c24:	7dbb      	ldrb	r3, [r7, #22]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d143      	bne.n	8005cb2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	7b1b      	ldrb	r3, [r3, #12]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7b5b      	ldrb	r3, [r3, #13]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <pbuf_free+0x90>
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <pbuf_free+0xf8>)
 8005c54:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005c58:	491f      	ldr	r1, [pc, #124]	; (8005cd8 <pbuf_free+0x108>)
 8005c5a:	481d      	ldr	r0, [pc, #116]	; (8005cd0 <pbuf_free+0x100>)
 8005c5c:	f009 f94e 	bl	800eefc <iprintf>
        pc->custom_free_function(p);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
 8005c68:	e01d      	b.n	8005ca6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d104      	bne.n	8005c7a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	2008      	movs	r0, #8
 8005c74:	f7ff f99a 	bl	8004fac <memp_free>
 8005c78:	e015      	b.n	8005ca6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d104      	bne.n	8005c8a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	2007      	movs	r0, #7
 8005c84:	f7ff f992 	bl	8004fac <memp_free>
 8005c88:	e00d      	b.n	8005ca6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <pbuf_free+0xc8>
          mem_free(p);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fe fe6b 	bl	800496c <mem_free>
 8005c96:	e006      	b.n	8005ca6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <pbuf_free+0xf8>)
 8005c9a:	f240 320f 	movw	r2, #783	; 0x30f
 8005c9e:	490f      	ldr	r1, [pc, #60]	; (8005cdc <pbuf_free+0x10c>)
 8005ca0:	480b      	ldr	r0, [pc, #44]	; (8005cd0 <pbuf_free+0x100>)
 8005ca2:	f009 f92b 	bl	800eefc <iprintf>
        }
      }
      count++;
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	607b      	str	r3, [r7, #4]
 8005cb0:	e001      	b.n	8005cb6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d19f      	bne.n	8005bfc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	080108cc 	.word	0x080108cc
 8005ccc:	08010a30 	.word	0x08010a30
 8005cd0:	0801092c 	.word	0x0801092c
 8005cd4:	08010a5c 	.word	0x08010a5c
 8005cd8:	08010a74 	.word	0x08010a74
 8005cdc:	08010a98 	.word	0x08010a98

08005ce0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005cec:	e005      	b.n	8005cfa <pbuf_clen+0x1a>
    ++len;
 8005cee:	89fb      	ldrh	r3, [r7, #14]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f6      	bne.n	8005cee <pbuf_clen+0xe>
  }
  return len;
 8005d00:	89fb      	ldrh	r3, [r7, #14]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d010      	beq.n	8005d40 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7b9b      	ldrb	r3, [r3, #14]
 8005d22:	3301      	adds	r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7b9b      	ldrb	r3, [r3, #14]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <pbuf_ref+0x30>
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <pbuf_ref+0x38>)
 8005d34:	f240 3242 	movw	r2, #834	; 0x342
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <pbuf_ref+0x3c>)
 8005d3a:	4805      	ldr	r0, [pc, #20]	; (8005d50 <pbuf_ref+0x40>)
 8005d3c:	f009 f8de 	bl	800eefc <iprintf>
  }
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	080108cc 	.word	0x080108cc
 8005d4c:	08010aac 	.word	0x08010aac
 8005d50:	0801092c 	.word	0x0801092c

08005d54 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <pbuf_cat+0x16>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d107      	bne.n	8005d7a <pbuf_cat+0x26>
 8005d6a:	4b20      	ldr	r3, [pc, #128]	; (8005dec <pbuf_cat+0x98>)
 8005d6c:	f240 3259 	movw	r2, #857	; 0x359
 8005d70:	491f      	ldr	r1, [pc, #124]	; (8005df0 <pbuf_cat+0x9c>)
 8005d72:	4820      	ldr	r0, [pc, #128]	; (8005df4 <pbuf_cat+0xa0>)
 8005d74:	f009 f8c2 	bl	800eefc <iprintf>
 8005d78:	e034      	b.n	8005de4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e00a      	b.n	8005d96 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	891a      	ldrh	r2, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	891b      	ldrh	r3, [r3, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	891a      	ldrh	r2, [r3, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	895b      	ldrh	r3, [r3, #10]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d006      	beq.n	8005db8 <pbuf_cat+0x64>
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <pbuf_cat+0x98>)
 8005dac:	f240 3262 	movw	r2, #866	; 0x362
 8005db0:	4911      	ldr	r1, [pc, #68]	; (8005df8 <pbuf_cat+0xa4>)
 8005db2:	4810      	ldr	r0, [pc, #64]	; (8005df4 <pbuf_cat+0xa0>)
 8005db4:	f009 f8a2 	bl	800eefc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <pbuf_cat+0x7a>
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <pbuf_cat+0x98>)
 8005dc2:	f240 3263 	movw	r2, #867	; 0x363
 8005dc6:	490d      	ldr	r1, [pc, #52]	; (8005dfc <pbuf_cat+0xa8>)
 8005dc8:	480a      	ldr	r0, [pc, #40]	; (8005df4 <pbuf_cat+0xa0>)
 8005dca:	f009 f897 	bl	800eefc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	891a      	ldrh	r2, [r3, #8]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	891b      	ldrh	r3, [r3, #8]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	080108cc 	.word	0x080108cc
 8005df0:	08010ac0 	.word	0x08010ac0
 8005df4:	0801092c 	.word	0x0801092c
 8005df8:	08010af8 	.word	0x08010af8
 8005dfc:	08010b28 	.word	0x08010b28

08005e00 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <pbuf_copy+0x2a>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <pbuf_copy+0x2a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	891a      	ldrh	r2, [r3, #8]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	891b      	ldrh	r3, [r3, #8]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d209      	bcs.n	8005e3e <pbuf_copy+0x3e>
 8005e2a:	4b57      	ldr	r3, [pc, #348]	; (8005f88 <pbuf_copy+0x188>)
 8005e2c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005e30:	4956      	ldr	r1, [pc, #344]	; (8005f8c <pbuf_copy+0x18c>)
 8005e32:	4857      	ldr	r0, [pc, #348]	; (8005f90 <pbuf_copy+0x190>)
 8005e34:	f009 f862 	bl	800eefc <iprintf>
 8005e38:	f06f 030f 	mvn.w	r3, #15
 8005e3c:	e09f      	b.n	8005f7e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	895b      	ldrh	r3, [r3, #10]
 8005e42:	461a      	mov	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	895b      	ldrh	r3, [r3, #10]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1acb      	subs	r3, r1, r3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d306      	bcc.n	8005e64 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	895b      	ldrh	r3, [r3, #10]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e005      	b.n	8005e70 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	895b      	ldrh	r3, [r3, #10]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	18d0      	adds	r0, r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4619      	mov	r1, r3
 8005e84:	f009 f80a 	bl	800ee9c <memcpy>
    offset_to += len;
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	895b      	ldrh	r3, [r3, #10]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d906      	bls.n	8005eb2 <pbuf_copy+0xb2>
 8005ea4:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <pbuf_copy+0x188>)
 8005ea6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005eaa:	493a      	ldr	r1, [pc, #232]	; (8005f94 <pbuf_copy+0x194>)
 8005eac:	4838      	ldr	r0, [pc, #224]	; (8005f90 <pbuf_copy+0x190>)
 8005eae:	f009 f825 	bl	800eefc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d906      	bls.n	8005ecc <pbuf_copy+0xcc>
 8005ebe:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <pbuf_copy+0x188>)
 8005ec0:	f240 32da 	movw	r2, #986	; 0x3da
 8005ec4:	4934      	ldr	r1, [pc, #208]	; (8005f98 <pbuf_copy+0x198>)
 8005ec6:	4832      	ldr	r0, [pc, #200]	; (8005f90 <pbuf_copy+0x190>)
 8005ec8:	f009 f818 	bl	800eefc <iprintf>
    if (offset_from >= p_from->len) {
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	895b      	ldrh	r3, [r3, #10]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d304      	bcc.n	8005ee2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	895b      	ldrh	r3, [r3, #10]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d114      	bne.n	8005f18 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <pbuf_copy+0x118>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <pbuf_copy+0x118>
 8005f04:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <pbuf_copy+0x188>)
 8005f06:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005f0a:	4924      	ldr	r1, [pc, #144]	; (8005f9c <pbuf_copy+0x19c>)
 8005f0c:	4820      	ldr	r0, [pc, #128]	; (8005f90 <pbuf_copy+0x190>)
 8005f0e:	f008 fff5 	bl	800eefc <iprintf>
 8005f12:	f06f 030f 	mvn.w	r3, #15
 8005f16:	e032      	b.n	8005f7e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <pbuf_copy+0x146>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	895a      	ldrh	r2, [r3, #10]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	891b      	ldrh	r3, [r3, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d10d      	bne.n	8005f46 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <pbuf_copy+0x146>
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <pbuf_copy+0x188>)
 8005f34:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005f38:	4919      	ldr	r1, [pc, #100]	; (8005fa0 <pbuf_copy+0x1a0>)
 8005f3a:	4815      	ldr	r0, [pc, #84]	; (8005f90 <pbuf_copy+0x190>)
 8005f3c:	f008 ffde 	bl	800eefc <iprintf>
 8005f40:	f06f 0305 	mvn.w	r3, #5
 8005f44:	e01b      	b.n	8005f7e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <pbuf_copy+0x174>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	895a      	ldrh	r2, [r3, #10]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	891b      	ldrh	r3, [r3, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d10d      	bne.n	8005f74 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <pbuf_copy+0x174>
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <pbuf_copy+0x188>)
 8005f62:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005f66:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <pbuf_copy+0x1a0>)
 8005f68:	4809      	ldr	r0, [pc, #36]	; (8005f90 <pbuf_copy+0x190>)
 8005f6a:	f008 ffc7 	bl	800eefc <iprintf>
 8005f6e:	f06f 0305 	mvn.w	r3, #5
 8005f72:	e004      	b.n	8005f7e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f47f af61 	bne.w	8005e3e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	080108cc 	.word	0x080108cc
 8005f8c:	08010b74 	.word	0x08010b74
 8005f90:	0801092c 	.word	0x0801092c
 8005f94:	08010ba4 	.word	0x08010ba4
 8005f98:	08010bbc 	.word	0x08010bbc
 8005f9c:	08010bd8 	.word	0x08010bd8
 8005fa0:	08010be8 	.word	0x08010be8

08005fa4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	80fb      	strh	r3, [r7, #6]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <pbuf_copy_partial+0x36>
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <pbuf_copy_partial+0xd4>)
 8005fca:	f240 420a 	movw	r2, #1034	; 0x40a
 8005fce:	492b      	ldr	r1, [pc, #172]	; (800607c <pbuf_copy_partial+0xd8>)
 8005fd0:	482b      	ldr	r0, [pc, #172]	; (8006080 <pbuf_copy_partial+0xdc>)
 8005fd2:	f008 ff93 	bl	800eefc <iprintf>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e04a      	b.n	8006070 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <pbuf_copy_partial+0x4e>
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <pbuf_copy_partial+0xd4>)
 8005fe2:	f240 420b 	movw	r2, #1035	; 0x40b
 8005fe6:	4927      	ldr	r1, [pc, #156]	; (8006084 <pbuf_copy_partial+0xe0>)
 8005fe8:	4825      	ldr	r0, [pc, #148]	; (8006080 <pbuf_copy_partial+0xdc>)
 8005fea:	f008 ff87 	bl	800eefc <iprintf>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e03e      	b.n	8006070 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e034      	b.n	8006062 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005ff8:	88bb      	ldrh	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <pbuf_copy_partial+0x70>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	895b      	ldrh	r3, [r3, #10]
 8006002:	88ba      	ldrh	r2, [r7, #4]
 8006004:	429a      	cmp	r2, r3
 8006006:	d305      	bcc.n	8006014 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	895b      	ldrh	r3, [r3, #10]
 800600c:	88ba      	ldrh	r2, [r7, #4]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	80bb      	strh	r3, [r7, #4]
 8006012:	e023      	b.n	800605c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	895a      	ldrh	r2, [r3, #10]
 8006018:	88bb      	ldrh	r3, [r7, #4]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800601e:	8b3a      	ldrh	r2, [r7, #24]
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	429a      	cmp	r2, r3
 8006024:	d901      	bls.n	800602a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800602a:	8b7b      	ldrh	r3, [r7, #26]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	18d0      	adds	r0, r2, r3
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	88bb      	ldrh	r3, [r7, #4]
 8006036:	4413      	add	r3, r2
 8006038:	8b3a      	ldrh	r2, [r7, #24]
 800603a:	4619      	mov	r1, r3
 800603c:	f008 ff2e 	bl	800ee9c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006040:	8afa      	ldrh	r2, [r7, #22]
 8006042:	8b3b      	ldrh	r3, [r7, #24]
 8006044:	4413      	add	r3, r2
 8006046:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006048:	8b7a      	ldrh	r2, [r7, #26]
 800604a:	8b3b      	ldrh	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	8b3b      	ldrh	r3, [r7, #24]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <pbuf_copy_partial+0xca>
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1c4      	bne.n	8005ff8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800606e:	8afb      	ldrh	r3, [r7, #22]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	080108cc 	.word	0x080108cc
 800607c:	08010c14 	.word	0x08010c14
 8006080:	0801092c 	.word	0x0801092c
 8006084:	08010c34 	.word	0x08010c34

08006088 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <pbuf_take+0x30>
 80060a4:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <pbuf_take+0x108>)
 80060a6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80060aa:	493a      	ldr	r1, [pc, #232]	; (8006194 <pbuf_take+0x10c>)
 80060ac:	483a      	ldr	r0, [pc, #232]	; (8006198 <pbuf_take+0x110>)
 80060ae:	f008 ff25 	bl	800eefc <iprintf>
 80060b2:	f06f 030f 	mvn.w	r3, #15
 80060b6:	e067      	b.n	8006188 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <pbuf_take+0x4a>
 80060be:	4b34      	ldr	r3, [pc, #208]	; (8006190 <pbuf_take+0x108>)
 80060c0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80060c4:	4935      	ldr	r1, [pc, #212]	; (800619c <pbuf_take+0x114>)
 80060c6:	4834      	ldr	r0, [pc, #208]	; (8006198 <pbuf_take+0x110>)
 80060c8:	f008 ff18 	bl	800eefc <iprintf>
 80060cc:	f06f 030f 	mvn.w	r3, #15
 80060d0:	e05a      	b.n	8006188 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	891b      	ldrh	r3, [r3, #8]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d909      	bls.n	80060f0 <pbuf_take+0x68>
 80060dc:	4b2c      	ldr	r3, [pc, #176]	; (8006190 <pbuf_take+0x108>)
 80060de:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80060e2:	492f      	ldr	r1, [pc, #188]	; (80061a0 <pbuf_take+0x118>)
 80060e4:	482c      	ldr	r0, [pc, #176]	; (8006198 <pbuf_take+0x110>)
 80060e6:	f008 ff09 	bl	800eefc <iprintf>
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
 80060ee:	e04b      	b.n	8006188 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <pbuf_take+0x7e>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <pbuf_take+0x7e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	891b      	ldrh	r3, [r3, #8]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	429a      	cmp	r2, r3
 8006104:	d902      	bls.n	800610c <pbuf_take+0x84>
    return ERR_ARG;
 8006106:	f06f 030f 	mvn.w	r3, #15
 800610a:	e03d      	b.n	8006188 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e028      	b.n	8006164 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <pbuf_take+0x9e>
 8006118:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <pbuf_take+0x108>)
 800611a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800611e:	4921      	ldr	r1, [pc, #132]	; (80061a4 <pbuf_take+0x11c>)
 8006120:	481d      	ldr	r0, [pc, #116]	; (8006198 <pbuf_take+0x110>)
 8006122:	f008 feeb 	bl	800eefc <iprintf>
    buf_copy_len = total_copy_len;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	895b      	ldrh	r3, [r3, #10]
 800612e:	461a      	mov	r2, r3
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	4293      	cmp	r3, r2
 8006134:	d902      	bls.n	800613c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	895b      	ldrh	r3, [r3, #10]
 800613a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	6858      	ldr	r0, [r3, #4]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	4413      	add	r3, r2
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4619      	mov	r1, r3
 800614a:	f008 fea7 	bl	800ee9c <memcpy>
    total_copy_len -= buf_copy_len;
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	4413      	add	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1d3      	bne.n	8006112 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <pbuf_take+0xf0>
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	429a      	cmp	r2, r3
 8006176:	d006      	beq.n	8006186 <pbuf_take+0xfe>
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <pbuf_take+0x108>)
 800617a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800617e:	490a      	ldr	r1, [pc, #40]	; (80061a8 <pbuf_take+0x120>)
 8006180:	4805      	ldr	r0, [pc, #20]	; (8006198 <pbuf_take+0x110>)
 8006182:	f008 febb 	bl	800eefc <iprintf>
  return ERR_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	080108cc 	.word	0x080108cc
 8006194:	08010ca4 	.word	0x08010ca4
 8006198:	0801092c 	.word	0x0801092c
 800619c:	08010cbc 	.word	0x08010cbc
 80061a0:	08010cd8 	.word	0x08010cd8
 80061a4:	08010cf8 	.word	0x08010cf8
 80061a8:	08010d10 	.word	0x08010d10

080061ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	603a      	str	r2, [r7, #0]
 80061b6:	71fb      	strb	r3, [r7, #7]
 80061b8:	460b      	mov	r3, r1
 80061ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	8919      	ldrh	r1, [r3, #8]
 80061c0:	88ba      	ldrh	r2, [r7, #4]
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fa1f 	bl	8005608 <pbuf_alloc>
 80061ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <pbuf_clone+0x2a>
    return NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e011      	b.n	80061fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fe11 	bl	8005e00 <pbuf_copy>
 80061de:	4603      	mov	r3, r0
 80061e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80061e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <pbuf_clone+0x4c>
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <pbuf_clone+0x58>)
 80061ec:	f240 5224 	movw	r2, #1316	; 0x524
 80061f0:	4905      	ldr	r1, [pc, #20]	; (8006208 <pbuf_clone+0x5c>)
 80061f2:	4806      	ldr	r0, [pc, #24]	; (800620c <pbuf_clone+0x60>)
 80061f4:	f008 fe82 	bl	800eefc <iprintf>
  return q;
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	080108cc 	.word	0x080108cc
 8006208:	08010d40 	.word	0x08010d40
 800620c:	0801092c 	.word	0x0801092c

08006210 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006214:	f008 fe8a 	bl	800ef2c <rand>
 8006218:	4603      	mov	r3, r0
 800621a:	b29b      	uxth	r3, r3
 800621c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006220:	b29b      	uxth	r3, r3
 8006222:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006226:	b29a      	uxth	r2, r3
 8006228:	4b01      	ldr	r3, [pc, #4]	; (8006230 <tcp_init+0x20>)
 800622a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800622c:	bf00      	nop
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2000000a 	.word	0x2000000a

08006234 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	7d1b      	ldrb	r3, [r3, #20]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d105      	bne.n	8006250 <tcp_free+0x1c>
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <tcp_free+0x2c>)
 8006246:	22d4      	movs	r2, #212	; 0xd4
 8006248:	4906      	ldr	r1, [pc, #24]	; (8006264 <tcp_free+0x30>)
 800624a:	4807      	ldr	r0, [pc, #28]	; (8006268 <tcp_free+0x34>)
 800624c:	f008 fe56 	bl	800eefc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	2001      	movs	r0, #1
 8006254:	f7fe feaa 	bl	8004fac <memp_free>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08010dcc 	.word	0x08010dcc
 8006264:	08010dfc 	.word	0x08010dfc
 8006268:	08010e10 	.word	0x08010e10

0800626c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7d1b      	ldrb	r3, [r3, #20]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d105      	bne.n	8006288 <tcp_free_listen+0x1c>
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <tcp_free_listen+0x2c>)
 800627e:	22df      	movs	r2, #223	; 0xdf
 8006280:	4906      	ldr	r1, [pc, #24]	; (800629c <tcp_free_listen+0x30>)
 8006282:	4807      	ldr	r0, [pc, #28]	; (80062a0 <tcp_free_listen+0x34>)
 8006284:	f008 fe3a 	bl	800eefc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	2002      	movs	r0, #2
 800628c:	f7fe fe8e 	bl	8004fac <memp_free>
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08010dcc 	.word	0x08010dcc
 800629c:	08010e38 	.word	0x08010e38
 80062a0:	08010e10 	.word	0x08010e10

080062a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80062a8:	f001 f800 	bl	80072ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <tcp_tmr+0x28>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <tcp_tmr+0x28>)
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <tcp_tmr+0x28>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80062c4:	f000 fcb2 	bl	8006c2c <tcp_slowtmr>
  }
}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200000d5 	.word	0x200000d5

080062d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d105      	bne.n	80062ec <tcp_remove_listener+0x1c>
 80062e0:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <tcp_remove_listener+0x48>)
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	490d      	ldr	r1, [pc, #52]	; (800631c <tcp_remove_listener+0x4c>)
 80062e6:	480e      	ldr	r0, [pc, #56]	; (8006320 <tcp_remove_listener+0x50>)
 80062e8:	f008 fe08 	bl	800eefc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e00a      	b.n	8006308 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d102      	bne.n	8006302 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f1      	bne.n	80062f2 <tcp_remove_listener+0x22>
    }
  }
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	08010dcc 	.word	0x08010dcc
 800631c:	08010e54 	.word	0x08010e54
 8006320:	08010e10 	.word	0x08010e10

08006324 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <tcp_listen_closed+0x1c>
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <tcp_listen_closed+0x60>)
 8006334:	f240 1211 	movw	r2, #273	; 0x111
 8006338:	4913      	ldr	r1, [pc, #76]	; (8006388 <tcp_listen_closed+0x64>)
 800633a:	4814      	ldr	r0, [pc, #80]	; (800638c <tcp_listen_closed+0x68>)
 800633c:	f008 fdde 	bl	800eefc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7d1b      	ldrb	r3, [r3, #20]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d006      	beq.n	8006356 <tcp_listen_closed+0x32>
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <tcp_listen_closed+0x60>)
 800634a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800634e:	4910      	ldr	r1, [pc, #64]	; (8006390 <tcp_listen_closed+0x6c>)
 8006350:	480e      	ldr	r0, [pc, #56]	; (800638c <tcp_listen_closed+0x68>)
 8006352:	f008 fdd3 	bl	800eefc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006356:	2301      	movs	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e00b      	b.n	8006374 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800635c:	4a0d      	ldr	r2, [pc, #52]	; (8006394 <tcp_listen_closed+0x70>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff ffb1 	bl	80062d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d9f0      	bls.n	800635c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	08010dcc 	.word	0x08010dcc
 8006388:	08010e7c 	.word	0x08010e7c
 800638c:	08010e10 	.word	0x08010e10
 8006390:	08010e88 	.word	0x08010e88
 8006394:	08012d98 	.word	0x08012d98

08006398 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af04      	add	r7, sp, #16
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <tcp_close_shutdown+0x20>
 80063aa:	4b63      	ldr	r3, [pc, #396]	; (8006538 <tcp_close_shutdown+0x1a0>)
 80063ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80063b0:	4962      	ldr	r1, [pc, #392]	; (800653c <tcp_close_shutdown+0x1a4>)
 80063b2:	4863      	ldr	r0, [pc, #396]	; (8006540 <tcp_close_shutdown+0x1a8>)
 80063b4:	f008 fda2 	bl	800eefc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d066      	beq.n	800648c <tcp_close_shutdown+0xf4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7d1b      	ldrb	r3, [r3, #20]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d003      	beq.n	80063ce <tcp_close_shutdown+0x36>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7d1b      	ldrb	r3, [r3, #20]
 80063ca:	2b07      	cmp	r3, #7
 80063cc:	d15e      	bne.n	800648c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <tcp_close_shutdown+0x48>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80063de:	d055      	beq.n	800648c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8b5b      	ldrh	r3, [r3, #26]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <tcp_close_shutdown+0x62>
 80063ec:	4b52      	ldr	r3, [pc, #328]	; (8006538 <tcp_close_shutdown+0x1a0>)
 80063ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80063f2:	4954      	ldr	r1, [pc, #336]	; (8006544 <tcp_close_shutdown+0x1ac>)
 80063f4:	4852      	ldr	r0, [pc, #328]	; (8006540 <tcp_close_shutdown+0x1a8>)
 80063f6:	f008 fd81 	bl	800eefc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006402:	687d      	ldr	r5, [r7, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	8ad2      	ldrh	r2, [r2, #22]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	8b09      	ldrh	r1, [r1, #24]
 8006410:	9102      	str	r1, [sp, #8]
 8006412:	9201      	str	r2, [sp, #4]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	462b      	mov	r3, r5
 8006418:	4622      	mov	r2, r4
 800641a:	4601      	mov	r1, r0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f005 fcf3 	bl	800be08 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fad4 	bl	80079d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006428:	4b47      	ldr	r3, [pc, #284]	; (8006548 <tcp_close_shutdown+0x1b0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d105      	bne.n	800643e <tcp_close_shutdown+0xa6>
 8006432:	4b45      	ldr	r3, [pc, #276]	; (8006548 <tcp_close_shutdown+0x1b0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a43      	ldr	r2, [pc, #268]	; (8006548 <tcp_close_shutdown+0x1b0>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e013      	b.n	8006466 <tcp_close_shutdown+0xce>
 800643e:	4b42      	ldr	r3, [pc, #264]	; (8006548 <tcp_close_shutdown+0x1b0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e00c      	b.n	8006460 <tcp_close_shutdown+0xc8>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d104      	bne.n	800645a <tcp_close_shutdown+0xc2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	60da      	str	r2, [r3, #12]
 8006458:	e005      	b.n	8006466 <tcp_close_shutdown+0xce>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ef      	bne.n	8006446 <tcp_close_shutdown+0xae>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	4b37      	ldr	r3, [pc, #220]	; (800654c <tcp_close_shutdown+0x1b4>)
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006472:	4b37      	ldr	r3, [pc, #220]	; (8006550 <tcp_close_shutdown+0x1b8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d102      	bne.n	8006482 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800647c:	f003 ff68 	bl	800a350 <tcp_trigger_input_pcb_close>
 8006480:	e002      	b.n	8006488 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff fed6 	bl	8006234 <tcp_free>
      }
      return ERR_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e050      	b.n	800652e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7d1b      	ldrb	r3, [r3, #20]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d03b      	beq.n	800650c <tcp_close_shutdown+0x174>
 8006494:	2b02      	cmp	r3, #2
 8006496:	dc44      	bgt.n	8006522 <tcp_close_shutdown+0x18a>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <tcp_close_shutdown+0x10a>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d02a      	beq.n	80064f6 <tcp_close_shutdown+0x15e>
 80064a0:	e03f      	b.n	8006522 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8adb      	ldrh	r3, [r3, #22]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d021      	beq.n	80064ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80064aa:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <tcp_close_shutdown+0x1bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d105      	bne.n	80064c0 <tcp_close_shutdown+0x128>
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <tcp_close_shutdown+0x1bc>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	4a26      	ldr	r2, [pc, #152]	; (8006554 <tcp_close_shutdown+0x1bc>)
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e013      	b.n	80064e8 <tcp_close_shutdown+0x150>
 80064c0:	4b24      	ldr	r3, [pc, #144]	; (8006554 <tcp_close_shutdown+0x1bc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	e00c      	b.n	80064e2 <tcp_close_shutdown+0x14a>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d104      	bne.n	80064dc <tcp_close_shutdown+0x144>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	e005      	b.n	80064e8 <tcp_close_shutdown+0x150>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ef      	bne.n	80064c8 <tcp_close_shutdown+0x130>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fea0 	bl	8006234 <tcp_free>
      break;
 80064f4:	e01a      	b.n	800652c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff14 	bl	8006324 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4816      	ldr	r0, [pc, #88]	; (8006558 <tcp_close_shutdown+0x1c0>)
 8006500:	f001 fab6 	bl	8007a70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff feb1 	bl	800626c <tcp_free_listen>
      break;
 800650a:	e00f      	b.n	800652c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	480e      	ldr	r0, [pc, #56]	; (8006548 <tcp_close_shutdown+0x1b0>)
 8006510:	f001 faae 	bl	8007a70 <tcp_pcb_remove>
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <tcp_close_shutdown+0x1b4>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fe8a 	bl	8006234 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006520:	e004      	b.n	800652c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f81a 	bl	800655c <tcp_close_shutdown_fin>
 8006528:	4603      	mov	r3, r0
 800652a:	e000      	b.n	800652e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bdb0      	pop	{r4, r5, r7, pc}
 8006536:	bf00      	nop
 8006538:	08010dcc 	.word	0x08010dcc
 800653c:	08010ea0 	.word	0x08010ea0
 8006540:	08010e10 	.word	0x08010e10
 8006544:	08010ec0 	.word	0x08010ec0
 8006548:	20008ab4 	.word	0x20008ab4
 800654c:	20008ab0 	.word	0x20008ab0
 8006550:	20008ac8 	.word	0x20008ac8
 8006554:	20008ac0 	.word	0x20008ac0
 8006558:	20008abc 	.word	0x20008abc

0800655c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <tcp_close_shutdown_fin+0x1c>
 800656a:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <tcp_close_shutdown_fin+0xc8>)
 800656c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006570:	492d      	ldr	r1, [pc, #180]	; (8006628 <tcp_close_shutdown_fin+0xcc>)
 8006572:	482e      	ldr	r0, [pc, #184]	; (800662c <tcp_close_shutdown_fin+0xd0>)
 8006574:	f008 fcc2 	bl	800eefc <iprintf>

  switch (pcb->state) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7d1b      	ldrb	r3, [r3, #20]
 800657c:	2b07      	cmp	r3, #7
 800657e:	d020      	beq.n	80065c2 <tcp_close_shutdown_fin+0x66>
 8006580:	2b07      	cmp	r3, #7
 8006582:	dc2b      	bgt.n	80065dc <tcp_close_shutdown_fin+0x80>
 8006584:	2b03      	cmp	r3, #3
 8006586:	d002      	beq.n	800658e <tcp_close_shutdown_fin+0x32>
 8006588:	2b04      	cmp	r3, #4
 800658a:	d00d      	beq.n	80065a8 <tcp_close_shutdown_fin+0x4c>
 800658c:	e026      	b.n	80065dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f004 fd48 	bl	800b024 <tcp_send_fin>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11f      	bne.n	80065e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2205      	movs	r2, #5
 80065a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065a6:	e01b      	b.n	80065e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f004 fd3b 	bl	800b024 <tcp_send_fin>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d114      	bne.n	80065e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2205      	movs	r2, #5
 80065be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065c0:	e010      	b.n	80065e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f004 fd2e 	bl	800b024 <tcp_send_fin>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2209      	movs	r2, #9
 80065d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065da:	e005      	b.n	80065e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e01c      	b.n	800661a <tcp_close_shutdown_fin+0xbe>
      break;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <tcp_close_shutdown_fin+0x8e>
      break;
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <tcp_close_shutdown_fin+0x8e>
      break;
 80065e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80065ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f004 fe54 	bl	800b2a0 <tcp_output>
 80065f8:	e00d      	b.n	8006616 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80065fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d108      	bne.n	8006616 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8b5b      	ldrh	r3, [r3, #26]
 8006608:	f043 0308 	orr.w	r3, r3, #8
 800660c:	b29a      	uxth	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	e001      	b.n	800661a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	08010dcc 	.word	0x08010dcc
 8006628:	08010e7c 	.word	0x08010e7c
 800662c:	08010e10 	.word	0x08010e10

08006630 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <tcp_close+0x22>
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <tcp_close+0x4c>)
 8006640:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006644:	490e      	ldr	r1, [pc, #56]	; (8006680 <tcp_close+0x50>)
 8006646:	480f      	ldr	r0, [pc, #60]	; (8006684 <tcp_close+0x54>)
 8006648:	f008 fc58 	bl	800eefc <iprintf>
 800664c:	f06f 030f 	mvn.w	r3, #15
 8006650:	e00f      	b.n	8006672 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7d1b      	ldrb	r3, [r3, #20]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d006      	beq.n	8006668 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8b5b      	ldrh	r3, [r3, #26]
 800665e:	f043 0310 	orr.w	r3, r3, #16
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006668:	2101      	movs	r1, #1
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fe94 	bl	8006398 <tcp_close_shutdown>
 8006670:	4603      	mov	r3, r0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	08010dcc 	.word	0x08010dcc
 8006680:	08010edc 	.word	0x08010edc
 8006684:	08010e10 	.word	0x08010e10

08006688 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08e      	sub	sp, #56	; 0x38
 800668c:	af04      	add	r7, sp, #16
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d107      	bne.n	80066a8 <tcp_abandon+0x20>
 8006698:	4b52      	ldr	r3, [pc, #328]	; (80067e4 <tcp_abandon+0x15c>)
 800669a:	f240 223d 	movw	r2, #573	; 0x23d
 800669e:	4952      	ldr	r1, [pc, #328]	; (80067e8 <tcp_abandon+0x160>)
 80066a0:	4852      	ldr	r0, [pc, #328]	; (80067ec <tcp_abandon+0x164>)
 80066a2:	f008 fc2b 	bl	800eefc <iprintf>
 80066a6:	e099      	b.n	80067dc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	7d1b      	ldrb	r3, [r3, #20]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d106      	bne.n	80066be <tcp_abandon+0x36>
 80066b0:	4b4c      	ldr	r3, [pc, #304]	; (80067e4 <tcp_abandon+0x15c>)
 80066b2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80066b6:	494e      	ldr	r1, [pc, #312]	; (80067f0 <tcp_abandon+0x168>)
 80066b8:	484c      	ldr	r0, [pc, #304]	; (80067ec <tcp_abandon+0x164>)
 80066ba:	f008 fc1f 	bl	800eefc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7d1b      	ldrb	r3, [r3, #20]
 80066c2:	2b0a      	cmp	r3, #10
 80066c4:	d107      	bne.n	80066d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	484a      	ldr	r0, [pc, #296]	; (80067f4 <tcp_abandon+0x16c>)
 80066ca:	f001 f9d1 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fdb0 	bl	8006234 <tcp_free>
 80066d4:	e082      	b.n	80067dc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7d1b      	ldrb	r3, [r3, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d126      	bne.n	800674e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8adb      	ldrh	r3, [r3, #22]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02e      	beq.n	8006766 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006708:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <tcp_abandon+0x170>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d105      	bne.n	800671e <tcp_abandon+0x96>
 8006712:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <tcp_abandon+0x170>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4a37      	ldr	r2, [pc, #220]	; (80067f8 <tcp_abandon+0x170>)
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	e013      	b.n	8006746 <tcp_abandon+0xbe>
 800671e:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <tcp_abandon+0x170>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e00c      	b.n	8006740 <tcp_abandon+0xb8>
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d104      	bne.n	800673a <tcp_abandon+0xb2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	60da      	str	r2, [r3, #12]
 8006738:	e005      	b.n	8006746 <tcp_abandon+0xbe>
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1ef      	bne.n	8006726 <tcp_abandon+0x9e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	60da      	str	r2, [r3, #12]
 800674c:	e00b      	b.n	8006766 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8adb      	ldrh	r3, [r3, #22]
 8006756:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4828      	ldr	r0, [pc, #160]	; (80067fc <tcp_abandon+0x174>)
 800675c:	f001 f988 	bl	8007a70 <tcp_pcb_remove>
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <tcp_abandon+0x178>)
 8006762:	2201      	movs	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fe7a 	bl	800746c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fe71 	bl	800746c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fe68 	bl	800746c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	8b12      	ldrh	r2, [r2, #24]
 80067ac:	9202      	str	r2, [sp, #8]
 80067ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80067b0:	9201      	str	r2, [sp, #4]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	460b      	mov	r3, r1
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f005 fb24 	bl	800be08 <tcp_rst>
    }
    last_state = pcb->state;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7d1b      	ldrb	r3, [r3, #20]
 80067c4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fd34 	bl	8006234 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <tcp_abandon+0x154>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f06f 010c 	mvn.w	r1, #12
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	4798      	blx	r3
  }
}
 80067dc:	3728      	adds	r7, #40	; 0x28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	08010dcc 	.word	0x08010dcc
 80067e8:	08010f10 	.word	0x08010f10
 80067ec:	08010e10 	.word	0x08010e10
 80067f0:	08010f2c 	.word	0x08010f2c
 80067f4:	20008ac4 	.word	0x20008ac4
 80067f8:	20008ac0 	.word	0x20008ac0
 80067fc:	20008ab4 	.word	0x20008ab4
 8006800:	20008ab0 	.word	0x20008ab0

08006804 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800680c:	2101      	movs	r1, #1
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff ff3a 	bl	8006688 <tcp_abandon>
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <tcp_update_rcv_ann_wnd+0x1c>
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800682c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006830:	4924      	ldr	r1, [pc, #144]	; (80068c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006832:	4825      	ldr	r0, [pc, #148]	; (80068c8 <tcp_update_rcv_ann_wnd+0xac>)
 8006834:	f008 fb62 	bl	800eefc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800684c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006850:	bf28      	it	cs
 8006852:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006856:	b292      	uxth	r2, r2
 8006858:	4413      	add	r3, r2
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	db08      	blt.n	8006874 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	e020      	b.n	80068b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd03      	ble.n	800688a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006888:	e014      	b.n	80068b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689c:	d306      	bcc.n	80068ac <tcp_update_rcv_ann_wnd+0x90>
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80068a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80068a4:	4909      	ldr	r1, [pc, #36]	; (80068cc <tcp_update_rcv_ann_wnd+0xb0>)
 80068a6:	4808      	ldr	r0, [pc, #32]	; (80068c8 <tcp_update_rcv_ann_wnd+0xac>)
 80068a8:	f008 fb28 	bl	800eefc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80068b4:	2300      	movs	r3, #0
  }
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	08010dcc 	.word	0x08010dcc
 80068c4:	08011028 	.word	0x08011028
 80068c8:	08010e10 	.word	0x08010e10
 80068cc:	0801104c 	.word	0x0801104c

080068d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d107      	bne.n	80068f2 <tcp_recved+0x22>
 80068e2:	4b1f      	ldr	r3, [pc, #124]	; (8006960 <tcp_recved+0x90>)
 80068e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80068e8:	491e      	ldr	r1, [pc, #120]	; (8006964 <tcp_recved+0x94>)
 80068ea:	481f      	ldr	r0, [pc, #124]	; (8006968 <tcp_recved+0x98>)
 80068ec:	f008 fb06 	bl	800eefc <iprintf>
 80068f0:	e032      	b.n	8006958 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7d1b      	ldrb	r3, [r3, #20]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d106      	bne.n	8006908 <tcp_recved+0x38>
 80068fa:	4b19      	ldr	r3, [pc, #100]	; (8006960 <tcp_recved+0x90>)
 80068fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006900:	491a      	ldr	r1, [pc, #104]	; (800696c <tcp_recved+0x9c>)
 8006902:	4819      	ldr	r0, [pc, #100]	; (8006968 <tcp_recved+0x98>)
 8006904:	f008 fafa 	bl	800eefc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	4413      	add	r3, r2
 8006910:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006912:	89fb      	ldrh	r3, [r7, #14]
 8006914:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006918:	d804      	bhi.n	8006924 <tcp_recved+0x54>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	89fa      	ldrh	r2, [r7, #14]
 8006920:	429a      	cmp	r2, r3
 8006922:	d204      	bcs.n	800692e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800692a:	851a      	strh	r2, [r3, #40]	; 0x28
 800692c:	e002      	b.n	8006934 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	89fa      	ldrh	r2, [r7, #14]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff71 	bl	800681c <tcp_update_rcv_ann_wnd>
 800693a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006942:	d309      	bcc.n	8006958 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8b5b      	ldrh	r3, [r3, #26]
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f004 fca4 	bl	800b2a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	08010dcc 	.word	0x08010dcc
 8006964:	08011068 	.word	0x08011068
 8006968:	08010e10 	.word	0x08010e10
 800696c:	08011080 	.word	0x08011080

08006970 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800697a:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <tcp_new_port+0x84>)
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	3301      	adds	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <tcp_new_port+0x84>)
 8006984:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006986:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <tcp_new_port+0x84>)
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800698e:	4293      	cmp	r3, r2
 8006990:	d103      	bne.n	800699a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <tcp_new_port+0x84>)
 8006994:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006998:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800699a:	2300      	movs	r3, #0
 800699c:	71fb      	strb	r3, [r7, #7]
 800699e:	e01e      	b.n	80069de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <tcp_new_port+0x88>)
 80069a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	e011      	b.n	80069d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	8ada      	ldrh	r2, [r3, #22]
 80069b2:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <tcp_new_port+0x84>)
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d108      	bne.n	80069cc <tcp_new_port+0x5c>
        n++;
 80069ba:	88bb      	ldrh	r3, [r7, #4]
 80069bc:	3301      	adds	r3, #1
 80069be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80069c0:	88bb      	ldrh	r3, [r7, #4]
 80069c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069c6:	d3d8      	bcc.n	800697a <tcp_new_port+0xa>
          return 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e00d      	b.n	80069e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1ea      	bne.n	80069ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	3301      	adds	r3, #1
 80069dc:	71fb      	strb	r3, [r7, #7]
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d9dd      	bls.n	80069a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80069e4:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <tcp_new_port+0x84>)
 80069e6:	881b      	ldrh	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	2000000a 	.word	0x2000000a
 80069f8:	08012d98 	.word	0x08012d98

080069fc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <tcp_connect+0x2e>
 8006a16:	4b7d      	ldr	r3, [pc, #500]	; (8006c0c <tcp_connect+0x210>)
 8006a18:	f240 4235 	movw	r2, #1077	; 0x435
 8006a1c:	497c      	ldr	r1, [pc, #496]	; (8006c10 <tcp_connect+0x214>)
 8006a1e:	487d      	ldr	r0, [pc, #500]	; (8006c14 <tcp_connect+0x218>)
 8006a20:	f008 fa6c 	bl	800eefc <iprintf>
 8006a24:	f06f 030f 	mvn.w	r3, #15
 8006a28:	e0ec      	b.n	8006c04 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <tcp_connect+0x48>
 8006a30:	4b76      	ldr	r3, [pc, #472]	; (8006c0c <tcp_connect+0x210>)
 8006a32:	f240 4236 	movw	r2, #1078	; 0x436
 8006a36:	4978      	ldr	r1, [pc, #480]	; (8006c18 <tcp_connect+0x21c>)
 8006a38:	4876      	ldr	r0, [pc, #472]	; (8006c14 <tcp_connect+0x218>)
 8006a3a:	f008 fa5f 	bl	800eefc <iprintf>
 8006a3e:	f06f 030f 	mvn.w	r3, #15
 8006a42:	e0df      	b.n	8006c04 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	7d1b      	ldrb	r3, [r3, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <tcp_connect+0x64>
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	; (8006c0c <tcp_connect+0x210>)
 8006a4e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8006a52:	4972      	ldr	r1, [pc, #456]	; (8006c1c <tcp_connect+0x220>)
 8006a54:	486f      	ldr	r0, [pc, #444]	; (8006c14 <tcp_connect+0x218>)
 8006a56:	f008 fa51 	bl	800eefc <iprintf>
 8006a5a:	f06f 0309 	mvn.w	r3, #9
 8006a5e:	e0d1      	b.n	8006c04 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <tcp_connect+0x70>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	e000      	b.n	8006a6e <tcp_connect+0x72>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	7a1b      	ldrb	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d006      	beq.n	8006a8e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	7a1b      	ldrb	r3, [r3, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe fd43 	bl	8005510 <netif_get_by_index>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a8c:	e005      	b.n	8006a9a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f006 ff58 	bl	800d948 <ip4_route>
 8006a98:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006aa0:	f06f 0303 	mvn.w	r3, #3
 8006aa4:	e0ae      	b.n	8006c04 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <tcp_connect+0xb8>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d111      	bne.n	8006ad8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <tcp_connect+0xc4>
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	3304      	adds	r3, #4
 8006abe:	e000      	b.n	8006ac2 <tcp_connect+0xc6>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <tcp_connect+0xd4>
      return ERR_RTE;
 8006aca:	f06f 0303 	mvn.w	r3, #3
 8006ace:	e099      	b.n	8006c04 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8adb      	ldrh	r3, [r3, #22]
 8006adc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8adb      	ldrh	r3, [r3, #22]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10c      	bne.n	8006b00 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006ae6:	f7ff ff43 	bl	8006970 <tcp_new_port>
 8006aea:	4603      	mov	r3, r0
 8006aec:	461a      	mov	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8adb      	ldrh	r3, [r3, #22]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <tcp_connect+0x104>
      return ERR_BUF;
 8006afa:	f06f 0301 	mvn.w	r3, #1
 8006afe:	e081      	b.n	8006c04 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f001 f849 	bl	8007b98 <tcp_next_iss>
 8006b06:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	1e5a      	subs	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	1e5a      	subs	r2, r3, #1
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006b54:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b62:	f001 f83f 	bl	8007be4 <tcp_eff_send_mss_netif>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8006b7e:	2102      	movs	r1, #2
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f004 fa9f 	bl	800b0c4 <tcp_enqueue_flags>
 8006b86:	4603      	mov	r3, r0
 8006b88:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8006b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d136      	bne.n	8006c00 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2202      	movs	r2, #2
 8006b96:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006b98:	8b7b      	ldrh	r3, [r7, #26]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d021      	beq.n	8006be2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006b9e:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <tcp_connect+0x224>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d105      	bne.n	8006bb4 <tcp_connect+0x1b8>
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <tcp_connect+0x224>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a1c      	ldr	r2, [pc, #112]	; (8006c20 <tcp_connect+0x224>)
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e013      	b.n	8006bdc <tcp_connect+0x1e0>
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <tcp_connect+0x224>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	623b      	str	r3, [r7, #32]
 8006bba:	e00c      	b.n	8006bd6 <tcp_connect+0x1da>
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d104      	bne.n	8006bd0 <tcp_connect+0x1d4>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	60da      	str	r2, [r3, #12]
 8006bce:	e005      	b.n	8006bdc <tcp_connect+0x1e0>
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ef      	bne.n	8006bbc <tcp_connect+0x1c0>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8006be2:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <tcp_connect+0x228>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <tcp_connect+0x228>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	f005 facc 	bl	800c18c <tcp_timer_needed>
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <tcp_connect+0x22c>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f004 fb50 	bl	800b2a0 <tcp_output>
  }
  return ret;
 8006c00:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3728      	adds	r7, #40	; 0x28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	08010dcc 	.word	0x08010dcc
 8006c10:	080110a8 	.word	0x080110a8
 8006c14:	08010e10 	.word	0x08010e10
 8006c18:	080110c4 	.word	0x080110c4
 8006c1c:	080110e0 	.word	0x080110e0
 8006c20:	20008ac0 	.word	0x20008ac0
 8006c24:	20008ab4 	.word	0x20008ab4
 8006c28:	20008ab0 	.word	0x20008ab0

08006c2c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006c2c:	b5b0      	push	{r4, r5, r7, lr}
 8006c2e:	b090      	sub	sp, #64	; 0x40
 8006c30:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006c38:	4b94      	ldr	r3, [pc, #592]	; (8006e8c <tcp_slowtmr+0x260>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	4a93      	ldr	r2, [pc, #588]	; (8006e8c <tcp_slowtmr+0x260>)
 8006c40:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006c42:	4b93      	ldr	r3, [pc, #588]	; (8006e90 <tcp_slowtmr+0x264>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b91      	ldr	r3, [pc, #580]	; (8006e90 <tcp_slowtmr+0x264>)
 8006c4c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006c52:	4b90      	ldr	r3, [pc, #576]	; (8006e94 <tcp_slowtmr+0x268>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006c58:	e29d      	b.n	8007196 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	7d1b      	ldrb	r3, [r3, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <tcp_slowtmr+0x44>
 8006c62:	4b8d      	ldr	r3, [pc, #564]	; (8006e98 <tcp_slowtmr+0x26c>)
 8006c64:	f240 42be 	movw	r2, #1214	; 0x4be
 8006c68:	498c      	ldr	r1, [pc, #560]	; (8006e9c <tcp_slowtmr+0x270>)
 8006c6a:	488d      	ldr	r0, [pc, #564]	; (8006ea0 <tcp_slowtmr+0x274>)
 8006c6c:	f008 f946 	bl	800eefc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	7d1b      	ldrb	r3, [r3, #20]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d106      	bne.n	8006c86 <tcp_slowtmr+0x5a>
 8006c78:	4b87      	ldr	r3, [pc, #540]	; (8006e98 <tcp_slowtmr+0x26c>)
 8006c7a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006c7e:	4989      	ldr	r1, [pc, #548]	; (8006ea4 <tcp_slowtmr+0x278>)
 8006c80:	4887      	ldr	r0, [pc, #540]	; (8006ea0 <tcp_slowtmr+0x274>)
 8006c82:	f008 f93b 	bl	800eefc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	7d1b      	ldrb	r3, [r3, #20]
 8006c8a:	2b0a      	cmp	r3, #10
 8006c8c:	d106      	bne.n	8006c9c <tcp_slowtmr+0x70>
 8006c8e:	4b82      	ldr	r3, [pc, #520]	; (8006e98 <tcp_slowtmr+0x26c>)
 8006c90:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006c94:	4984      	ldr	r1, [pc, #528]	; (8006ea8 <tcp_slowtmr+0x27c>)
 8006c96:	4882      	ldr	r0, [pc, #520]	; (8006ea0 <tcp_slowtmr+0x274>)
 8006c98:	f008 f930 	bl	800eefc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	7f9a      	ldrb	r2, [r3, #30]
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <tcp_slowtmr+0x264>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d105      	bne.n	8006cb4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006cb2:	e270      	b.n	8007196 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006cb4:	4b76      	ldr	r3, [pc, #472]	; (8006e90 <tcp_slowtmr+0x264>)
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	7d1b      	ldrb	r3, [r3, #20]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d10a      	bne.n	8006ce6 <tcp_slowtmr+0xba>
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cd6:	2b05      	cmp	r3, #5
 8006cd8:	d905      	bls.n	8006ce6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ce4:	e11e      	b.n	8006f24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cec:	2b0b      	cmp	r3, #11
 8006cee:	d905      	bls.n	8006cfc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cfa:	e113      	b.n	8006f24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d075      	beq.n	8006df2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <tcp_slowtmr+0xf0>
 8006d0e:	4b62      	ldr	r3, [pc, #392]	; (8006e98 <tcp_slowtmr+0x26c>)
 8006d10:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006d14:	4965      	ldr	r1, [pc, #404]	; (8006eac <tcp_slowtmr+0x280>)
 8006d16:	4862      	ldr	r0, [pc, #392]	; (8006ea0 <tcp_slowtmr+0x274>)
 8006d18:	f008 f8f0 	bl	800eefc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <tcp_slowtmr+0x106>
 8006d24:	4b5c      	ldr	r3, [pc, #368]	; (8006e98 <tcp_slowtmr+0x26c>)
 8006d26:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006d2a:	4961      	ldr	r1, [pc, #388]	; (8006eb0 <tcp_slowtmr+0x284>)
 8006d2c:	485c      	ldr	r0, [pc, #368]	; (8006ea0 <tcp_slowtmr+0x274>)
 8006d2e:	f008 f8e5 	bl	800eefc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006d38:	2b0b      	cmp	r3, #11
 8006d3a:	d905      	bls.n	8006d48 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d40:	3301      	adds	r3, #1
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d46:	e0ed      	b.n	8006f24 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	4a58      	ldr	r2, [pc, #352]	; (8006eb4 <tcp_slowtmr+0x288>)
 8006d52:	5cd3      	ldrb	r3, [r2, r3]
 8006d54:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d5c:	7c7a      	ldrb	r2, [r7, #17]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d907      	bls.n	8006d72 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d68:	3301      	adds	r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d78:	7c7a      	ldrb	r2, [r7, #17]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f200 80d2 	bhi.w	8006f24 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006d80:	2301      	movs	r3, #1
 8006d82:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d108      	bne.n	8006da0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006d8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d90:	f005 f92e 	bl	800bff0 <tcp_zero_window_probe>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	e011      	b.n	8006dc4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006da6:	4619      	mov	r1, r3
 8006da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006daa:	f003 fff3 	bl	800ad94 <tcp_split_unsent_seg>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d107      	bne.n	8006dc4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db6:	f004 fa73 	bl	800b2a0 <tcp_output>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80ac 	beq.w	8006f24 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dda:	2b06      	cmp	r3, #6
 8006ddc:	f200 80a2 	bhi.w	8006f24 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006de6:	3301      	adds	r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006df0:	e098      	b.n	8006f24 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db0f      	blt.n	8006e1c <tcp_slowtmr+0x1f0>
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d008      	beq.n	8006e1c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3301      	adds	r3, #1
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	b21a      	sxth	r2, r3
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	db7b      	blt.n	8006f24 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e2e:	f004 fd29 	bl	800b884 <tcp_rexmit_rto_prepare>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <tcp_slowtmr+0x21c>
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d171      	bne.n	8006f24 <tcp_slowtmr+0x2f8>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d06d      	beq.n	8006f24 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	7d1b      	ldrb	r3, [r3, #20]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d03a      	beq.n	8006ec6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e56:	2b0c      	cmp	r3, #12
 8006e58:	bf28      	it	cs
 8006e5a:	230c      	movcs	r3, #12
 8006e5c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006e64:	10db      	asrs	r3, r3, #3
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006e70:	4413      	add	r3, r2
 8006e72:	7efa      	ldrb	r2, [r7, #27]
 8006e74:	4910      	ldr	r1, [pc, #64]	; (8006eb8 <tcp_slowtmr+0x28c>)
 8006e76:	5c8a      	ldrb	r2, [r1, r2]
 8006e78:	4093      	lsls	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006e82:	4293      	cmp	r3, r2
 8006e84:	dc1a      	bgt.n	8006ebc <tcp_slowtmr+0x290>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	b21a      	sxth	r2, r3
 8006e8a:	e019      	b.n	8006ec0 <tcp_slowtmr+0x294>
 8006e8c:	20008ab8 	.word	0x20008ab8
 8006e90:	200000d6 	.word	0x200000d6
 8006e94:	20008ab4 	.word	0x20008ab4
 8006e98:	08010dcc 	.word	0x08010dcc
 8006e9c:	08011110 	.word	0x08011110
 8006ea0:	08010e10 	.word	0x08010e10
 8006ea4:	0801113c 	.word	0x0801113c
 8006ea8:	08011168 	.word	0x08011168
 8006eac:	08011198 	.word	0x08011198
 8006eb0:	080111cc 	.word	0x080111cc
 8006eb4:	08012d90 	.word	0x08012d90
 8006eb8:	08012d80 	.word	0x08012d80
 8006ebc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	2200      	movs	r2, #0
 8006eca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bf28      	it	cs
 8006edc:	4613      	movcs	r3, r2
 8006ede:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006ee0:	8a7b      	ldrh	r3, [r7, #18]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d206      	bcs.n	8006f0c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f20:	f004 fd20 	bl	800b964 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d111      	bne.n	8006f50 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	8b5b      	ldrh	r3, [r3, #26]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f38:	4b9c      	ldr	r3, [pc, #624]	; (80071ac <tcp_slowtmr+0x580>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b28      	cmp	r3, #40	; 0x28
 8006f44:	d904      	bls.n	8006f50 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	7a5b      	ldrb	r3, [r3, #9]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d04a      	beq.n	8006ff2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d003      	beq.n	8006f6c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006f68:	2b07      	cmp	r3, #7
 8006f6a:	d142      	bne.n	8006ff2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f6c:	4b8f      	ldr	r3, [pc, #572]	; (80071ac <tcp_slowtmr+0x580>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006f7c:	4b8c      	ldr	r3, [pc, #560]	; (80071b0 <tcp_slowtmr+0x584>)
 8006f7e:	440b      	add	r3, r1
 8006f80:	498c      	ldr	r1, [pc, #560]	; (80071b4 <tcp_slowtmr+0x588>)
 8006f82:	fba1 1303 	umull	r1, r3, r1, r3
 8006f86:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d90a      	bls.n	8006fa2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f90:	3301      	adds	r3, #1
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006f96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fa0:	e027      	b.n	8006ff2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fa2:	4b82      	ldr	r3, [pc, #520]	; (80071ac <tcp_slowtmr+0x580>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006fb8:	4618      	mov	r0, r3
 8006fba:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <tcp_slowtmr+0x58c>)
 8006fbc:	fb03 f300 	mul.w	r3, r3, r0
 8006fc0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006fc2:	497c      	ldr	r1, [pc, #496]	; (80071b4 <tcp_slowtmr+0x588>)
 8006fc4:	fba1 1303 	umull	r1, r3, r1, r3
 8006fc8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d911      	bls.n	8006ff2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8006fce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fd0:	f004 ffce 	bl	800bf70 <tcp_keepalive>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006fda:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006ffa:	4b6c      	ldr	r3, [pc, #432]	; (80071ac <tcp_slowtmr+0x580>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800700a:	4619      	mov	r1, r3
 800700c:	460b      	mov	r3, r1
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	440b      	add	r3, r1
 8007012:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007014:	429a      	cmp	r2, r3
 8007016:	d302      	bcc.n	800701e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800701a:	f000 fe8d 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	7d1b      	ldrb	r3, [r3, #20]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d10b      	bne.n	800703e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007026:	4b61      	ldr	r3, [pc, #388]	; (80071ac <tcp_slowtmr+0x580>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b28      	cmp	r3, #40	; 0x28
 8007032:	d904      	bls.n	800703e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	3301      	adds	r3, #1
 800703a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	7d1b      	ldrb	r3, [r3, #20]
 8007042:	2b09      	cmp	r3, #9
 8007044:	d10b      	bne.n	800705e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007046:	4b59      	ldr	r3, [pc, #356]	; (80071ac <tcp_slowtmr+0x580>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2bf0      	cmp	r3, #240	; 0xf0
 8007052:	d904      	bls.n	800705e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007058:	3301      	adds	r3, #1
 800705a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800705e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007062:	2b00      	cmp	r3, #0
 8007064:	d060      	beq.n	8007128 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800706e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007070:	f000 fcae 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800707a:	4b50      	ldr	r3, [pc, #320]	; (80071bc <tcp_slowtmr+0x590>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	429a      	cmp	r2, r3
 8007082:	d106      	bne.n	8007092 <tcp_slowtmr+0x466>
 8007084:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <tcp_slowtmr+0x594>)
 8007086:	f240 526d 	movw	r2, #1389	; 0x56d
 800708a:	494e      	ldr	r1, [pc, #312]	; (80071c4 <tcp_slowtmr+0x598>)
 800708c:	484e      	ldr	r0, [pc, #312]	; (80071c8 <tcp_slowtmr+0x59c>)
 800708e:	f007 ff35 	bl	800eefc <iprintf>
        prev->next = pcb->next;
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	e00f      	b.n	80070bc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800709c:	4b47      	ldr	r3, [pc, #284]	; (80071bc <tcp_slowtmr+0x590>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d006      	beq.n	80070b4 <tcp_slowtmr+0x488>
 80070a6:	4b46      	ldr	r3, [pc, #280]	; (80071c0 <tcp_slowtmr+0x594>)
 80070a8:	f240 5271 	movw	r2, #1393	; 0x571
 80070ac:	4947      	ldr	r1, [pc, #284]	; (80071cc <tcp_slowtmr+0x5a0>)
 80070ae:	4846      	ldr	r0, [pc, #280]	; (80071c8 <tcp_slowtmr+0x59c>)
 80070b0:	f007 ff24 	bl	800eefc <iprintf>
        tcp_active_pcbs = pcb->next;
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4a40      	ldr	r2, [pc, #256]	; (80071bc <tcp_slowtmr+0x590>)
 80070ba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80070bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80070cc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	3304      	adds	r3, #4
 80070d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d4:	8ad2      	ldrh	r2, [r2, #22]
 80070d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070d8:	8b09      	ldrh	r1, [r1, #24]
 80070da:	9102      	str	r1, [sp, #8]
 80070dc:	9201      	str	r2, [sp, #4]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	462b      	mov	r3, r5
 80070e2:	4622      	mov	r2, r4
 80070e4:	4601      	mov	r1, r0
 80070e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070e8:	f004 fe8e 	bl	800be08 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	7d1b      	ldrb	r3, [r3, #20]
 80070f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007102:	6838      	ldr	r0, [r7, #0]
 8007104:	f7ff f896 	bl	8006234 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007108:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <tcp_slowtmr+0x5a4>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <tcp_slowtmr+0x4f2>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f06f 010c 	mvn.w	r1, #12
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800711e:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <tcp_slowtmr+0x5a4>)
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d037      	beq.n	8007196 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007126:	e592      	b.n	8006c4e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	7f1b      	ldrb	r3, [r3, #28]
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	7f1a      	ldrb	r2, [r3, #28]
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	7f5b      	ldrb	r3, [r3, #29]
 8007146:	429a      	cmp	r2, r3
 8007148:	d325      	bcc.n	8007196 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <tcp_slowtmr+0x5a4>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <tcp_slowtmr+0x54c>
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	6912      	ldr	r2, [r2, #16]
 800716a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	4603      	mov	r3, r0
 8007172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007176:	e002      	b.n	800717e <tcp_slowtmr+0x552>
 8007178:	2300      	movs	r3, #0
 800717a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800717e:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <tcp_slowtmr+0x5a4>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d000      	beq.n	8007188 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007186:	e562      	b.n	8006c4e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007188:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007192:	f004 f885 	bl	800b2a0 <tcp_output>
  while (pcb != NULL) {
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f ad5e 	bne.w	8006c5a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800719e:	2300      	movs	r3, #0
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <tcp_slowtmr+0x5a8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80071a8:	e069      	b.n	800727e <tcp_slowtmr+0x652>
 80071aa:	bf00      	nop
 80071ac:	20008ab8 	.word	0x20008ab8
 80071b0:	000a4cb8 	.word	0x000a4cb8
 80071b4:	10624dd3 	.word	0x10624dd3
 80071b8:	000124f8 	.word	0x000124f8
 80071bc:	20008ab4 	.word	0x20008ab4
 80071c0:	08010dcc 	.word	0x08010dcc
 80071c4:	08011204 	.word	0x08011204
 80071c8:	08010e10 	.word	0x08010e10
 80071cc:	08011230 	.word	0x08011230
 80071d0:	20008ab0 	.word	0x20008ab0
 80071d4:	20008ac4 	.word	0x20008ac4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	7d1b      	ldrb	r3, [r3, #20]
 80071dc:	2b0a      	cmp	r3, #10
 80071de:	d006      	beq.n	80071ee <tcp_slowtmr+0x5c2>
 80071e0:	4b2b      	ldr	r3, [pc, #172]	; (8007290 <tcp_slowtmr+0x664>)
 80071e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80071e6:	492b      	ldr	r1, [pc, #172]	; (8007294 <tcp_slowtmr+0x668>)
 80071e8:	482b      	ldr	r0, [pc, #172]	; (8007298 <tcp_slowtmr+0x66c>)
 80071ea:	f007 fe87 	bl	800eefc <iprintf>
    pcb_remove = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80071f4:	4b29      	ldr	r3, [pc, #164]	; (800729c <tcp_slowtmr+0x670>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2bf0      	cmp	r3, #240	; 0xf0
 8007200:	d904      	bls.n	800720c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007206:	3301      	adds	r3, #1
 8007208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007210:	2b00      	cmp	r3, #0
 8007212:	d02f      	beq.n	8007274 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007216:	f000 fbdb 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d010      	beq.n	8007242 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007220:	4b1f      	ldr	r3, [pc, #124]	; (80072a0 <tcp_slowtmr+0x674>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007226:	429a      	cmp	r2, r3
 8007228:	d106      	bne.n	8007238 <tcp_slowtmr+0x60c>
 800722a:	4b19      	ldr	r3, [pc, #100]	; (8007290 <tcp_slowtmr+0x664>)
 800722c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007230:	491c      	ldr	r1, [pc, #112]	; (80072a4 <tcp_slowtmr+0x678>)
 8007232:	4819      	ldr	r0, [pc, #100]	; (8007298 <tcp_slowtmr+0x66c>)
 8007234:	f007 fe62 	bl	800eefc <iprintf>
        prev->next = pcb->next;
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	60da      	str	r2, [r3, #12]
 8007240:	e00f      	b.n	8007262 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <tcp_slowtmr+0x674>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007248:	429a      	cmp	r2, r3
 800724a:	d006      	beq.n	800725a <tcp_slowtmr+0x62e>
 800724c:	4b10      	ldr	r3, [pc, #64]	; (8007290 <tcp_slowtmr+0x664>)
 800724e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007252:	4915      	ldr	r1, [pc, #84]	; (80072a8 <tcp_slowtmr+0x67c>)
 8007254:	4810      	ldr	r0, [pc, #64]	; (8007298 <tcp_slowtmr+0x66c>)
 8007256:	f007 fe51 	bl	800eefc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4a10      	ldr	r2, [pc, #64]	; (80072a0 <tcp_slowtmr+0x674>)
 8007260:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800726c:	69f8      	ldr	r0, [r7, #28]
 800726e:	f7fe ffe1 	bl	8006234 <tcp_free>
 8007272:	e004      	b.n	800727e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1a9      	bne.n	80071d8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	3730      	adds	r7, #48	; 0x30
 800728a:	46bd      	mov	sp, r7
 800728c:	bdb0      	pop	{r4, r5, r7, pc}
 800728e:	bf00      	nop
 8007290:	08010dcc 	.word	0x08010dcc
 8007294:	0801125c 	.word	0x0801125c
 8007298:	08010e10 	.word	0x08010e10
 800729c:	20008ab8 	.word	0x20008ab8
 80072a0:	20008ac4 	.word	0x20008ac4
 80072a4:	0801128c 	.word	0x0801128c
 80072a8:	080112b4 	.word	0x080112b4

080072ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80072b2:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <tcp_fasttmr+0xbc>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <tcp_fasttmr+0xbc>)
 80072bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <tcp_fasttmr+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80072c4:	e048      	b.n	8007358 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	7f9a      	ldrb	r2, [r3, #30]
 80072ca:	4b27      	ldr	r3, [pc, #156]	; (8007368 <tcp_fasttmr+0xbc>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d03f      	beq.n	8007352 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80072d2:	4b25      	ldr	r3, [pc, #148]	; (8007368 <tcp_fasttmr+0xbc>)
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8b5b      	ldrh	r3, [r3, #26]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d010      	beq.n	8007308 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	8b5b      	ldrh	r3, [r3, #26]
 80072ea:	f043 0302 	orr.w	r3, r3, #2
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f003 ffd3 	bl	800b2a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8b5b      	ldrh	r3, [r3, #26]
 80072fe:	f023 0303 	bic.w	r3, r3, #3
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8b5b      	ldrh	r3, [r3, #26]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8b5b      	ldrh	r3, [r3, #26]
 8007318:	f023 0308 	bic.w	r3, r3, #8
 800731c:	b29a      	uxth	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff f91a 	bl	800655c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <tcp_fasttmr+0xc4>)
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f819 	bl	8007374 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <tcp_fasttmr+0xc4>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d000      	beq.n	800734c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800734a:	e7b8      	b.n	80072be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	e002      	b.n	8007358 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1b3      	bne.n	80072c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200000d6 	.word	0x200000d6
 800736c:	20008ab4 	.word	0x20008ab4
 8007370:	20008ab0 	.word	0x20008ab0

08007374 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <tcp_process_refused_data+0x22>
 8007382:	4b37      	ldr	r3, [pc, #220]	; (8007460 <tcp_process_refused_data+0xec>)
 8007384:	f240 6209 	movw	r2, #1545	; 0x609
 8007388:	4936      	ldr	r1, [pc, #216]	; (8007464 <tcp_process_refused_data+0xf0>)
 800738a:	4837      	ldr	r0, [pc, #220]	; (8007468 <tcp_process_refused_data+0xf4>)
 800738c:	f007 fdb6 	bl	800eefc <iprintf>
 8007390:	f06f 030f 	mvn.w	r3, #15
 8007394:	e060      	b.n	8007458 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739a:	7b5b      	ldrb	r3, [r3, #13]
 800739c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <tcp_process_refused_data+0x58>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6918      	ldr	r0, [r3, #16]
 80073be:	2300      	movs	r3, #0
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	47a0      	blx	r4
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e007      	b.n	80073dc <tcp_process_refused_data+0x68>
 80073cc:	2300      	movs	r3, #0
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	2000      	movs	r0, #0
 80073d4:	f000 f8a4 	bl	8007520 <tcp_recv_null>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80073dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d12a      	bne.n	800743a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d033      	beq.n	8007456 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80073f6:	d005      	beq.n	8007404 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fc:	3301      	adds	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <tcp_process_refused_data+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6918      	ldr	r0, [r3, #16]
 8007418:	2300      	movs	r3, #0
 800741a:	2200      	movs	r2, #0
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	47a0      	blx	r4
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e001      	b.n	800742a <tcp_process_refused_data+0xb6>
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800742a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800742e:	f113 0f0d 	cmn.w	r3, #13
 8007432:	d110      	bne.n	8007456 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007434:	f06f 030c 	mvn.w	r3, #12
 8007438:	e00e      	b.n	8007458 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800743a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800743e:	f113 0f0d 	cmn.w	r3, #13
 8007442:	d102      	bne.n	800744a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007444:	f06f 030c 	mvn.w	r3, #12
 8007448:	e006      	b.n	8007458 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007450:	f06f 0304 	mvn.w	r3, #4
 8007454:	e000      	b.n	8007458 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}
 8007460:	08010dcc 	.word	0x08010dcc
 8007464:	080112dc 	.word	0x080112dc
 8007468:	08010e10 	.word	0x08010e10

0800746c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007474:	e007      	b.n	8007486 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f80a 	bl	8007496 <tcp_seg_free>
    seg = next;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f4      	bne.n	8007476 <tcp_segs_free+0xa>
  }
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00c      	beq.n	80074be <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fb8d 	bl	8005bd0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	2003      	movs	r0, #3
 80074ba:	f7fd fd77 	bl	8004fac <memp_free>
  }
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <tcp_seg_copy+0x1c>
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <tcp_seg_copy+0x4c>)
 80074d8:	f240 6282 	movw	r2, #1666	; 0x682
 80074dc:	490e      	ldr	r1, [pc, #56]	; (8007518 <tcp_seg_copy+0x50>)
 80074de:	480f      	ldr	r0, [pc, #60]	; (800751c <tcp_seg_copy+0x54>)
 80074e0:	f007 fd0c 	bl	800eefc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80074e4:	2003      	movs	r0, #3
 80074e6:	f7fd fd15 	bl	8004f14 <memp_malloc>
 80074ea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <tcp_seg_copy+0x2e>
    return NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e00a      	b.n	800750c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80074f6:	2210      	movs	r2, #16
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f007 fcce 	bl	800ee9c <memcpy>
  pbuf_ref(cseg->p);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fc03 	bl	8005d10 <pbuf_ref>
  return cseg;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	08010dcc 	.word	0x08010dcc
 8007518:	08011320 	.word	0x08011320
 800751c:	08010e10 	.word	0x08010e10

08007520 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <tcp_recv_null+0x28>
 8007534:	4b12      	ldr	r3, [pc, #72]	; (8007580 <tcp_recv_null+0x60>)
 8007536:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800753a:	4912      	ldr	r1, [pc, #72]	; (8007584 <tcp_recv_null+0x64>)
 800753c:	4812      	ldr	r0, [pc, #72]	; (8007588 <tcp_recv_null+0x68>)
 800753e:	f007 fcdd 	bl	800eefc <iprintf>
 8007542:	f06f 030f 	mvn.w	r3, #15
 8007546:	e016      	b.n	8007576 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891b      	ldrh	r3, [r3, #8]
 8007552:	4619      	mov	r1, r3
 8007554:	68b8      	ldr	r0, [r7, #8]
 8007556:	f7ff f9bb 	bl	80068d0 <tcp_recved>
    pbuf_free(p);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fe fb38 	bl	8005bd0 <pbuf_free>
 8007560:	e008      	b.n	8007574 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f7ff f860 	bl	8006630 <tcp_close>
 8007570:	4603      	mov	r3, r0
 8007572:	e000      	b.n	8007576 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	08010dcc 	.word	0x08010dcc
 8007584:	0801133c 	.word	0x0801133c
 8007588:	08010e10 	.word	0x08010e10

0800758c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800759a:	2b00      	cmp	r3, #0
 800759c:	db01      	blt.n	80075a2 <tcp_kill_prio+0x16>
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	e000      	b.n	80075a4 <tcp_kill_prio+0x18>
 80075a2:	237f      	movs	r3, #127	; 0x7f
 80075a4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d034      	beq.n	8007616 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075ba:	4b19      	ldr	r3, [pc, #100]	; (8007620 <tcp_kill_prio+0x94>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e01f      	b.n	8007602 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	7d5b      	ldrb	r3, [r3, #21]
 80075c6:	7afa      	ldrb	r2, [r7, #11]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d80c      	bhi.n	80075e6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80075d0:	7afa      	ldrb	r2, [r7, #11]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d112      	bne.n	80075fc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <tcp_kill_prio+0x98>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d80a      	bhi.n	80075fc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80075e6:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <tcp_kill_prio+0x98>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	7d5b      	ldrb	r3, [r3, #21]
 80075fa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1dc      	bne.n	80075c2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800760e:	6938      	ldr	r0, [r7, #16]
 8007610:	f7ff f8f8 	bl	8006804 <tcp_abort>
 8007614:	e000      	b.n	8007618 <tcp_kill_prio+0x8c>
    return;
 8007616:	bf00      	nop
  }
}
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20008ab4 	.word	0x20008ab4
 8007624:	20008ab8 	.word	0x20008ab8

08007628 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	2b08      	cmp	r3, #8
 8007636:	d009      	beq.n	800764c <tcp_kill_state+0x24>
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b09      	cmp	r3, #9
 800763c:	d006      	beq.n	800764c <tcp_kill_state+0x24>
 800763e:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <tcp_kill_state+0x80>)
 8007640:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007644:	4919      	ldr	r1, [pc, #100]	; (80076ac <tcp_kill_state+0x84>)
 8007646:	481a      	ldr	r0, [pc, #104]	; (80076b0 <tcp_kill_state+0x88>)
 8007648:	f007 fc58 	bl	800eefc <iprintf>

  inactivity = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007654:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <tcp_kill_state+0x8c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e017      	b.n	800768c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	7d1b      	ldrb	r3, [r3, #20]
 8007660:	79fa      	ldrb	r2, [r7, #7]
 8007662:	429a      	cmp	r2, r3
 8007664:	d10f      	bne.n	8007686 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <tcp_kill_state+0x90>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d807      	bhi.n	8007686 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <tcp_kill_state+0x90>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e4      	bne.n	800765c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d003      	beq.n	80076a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007698:	2100      	movs	r1, #0
 800769a:	6938      	ldr	r0, [r7, #16]
 800769c:	f7fe fff4 	bl	8006688 <tcp_abandon>
  }
}
 80076a0:	bf00      	nop
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	08010dcc 	.word	0x08010dcc
 80076ac:	08011358 	.word	0x08011358
 80076b0:	08010e10 	.word	0x08010e10
 80076b4:	20008ab4 	.word	0x20008ab4
 80076b8:	20008ab8 	.word	0x20008ab8

080076bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <tcp_kill_timewait+0x58>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	e012      	b.n	80076f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <tcp_kill_timewait+0x5c>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d807      	bhi.n	80076f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80076e2:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <tcp_kill_timewait+0x5c>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e9      	bne.n	80076d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	f7ff f87d 	bl	8006804 <tcp_abort>
  }
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20008ac4 	.word	0x20008ac4
 8007718:	20008ab8 	.word	0x20008ab8

0800771c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <tcp_handle_closepend+0x48>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007728:	e014      	b.n	8007754 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8b5b      	ldrh	r3, [r3, #26]
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8b5b      	ldrh	r3, [r3, #26]
 8007740:	f023 0308 	bic.w	r3, r3, #8
 8007744:	b29a      	uxth	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe ff06 	bl	800655c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e7      	bne.n	800772a <tcp_handle_closepend+0xe>
  }
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20008ab4 	.word	0x20008ab4

08007768 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007772:	2001      	movs	r0, #1
 8007774:	f7fd fbce 	bl	8004f14 <memp_malloc>
 8007778:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d126      	bne.n	80077ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007780:	f7ff ffcc 	bl	800771c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007784:	f7ff ff9a 	bl	80076bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007788:	2001      	movs	r0, #1
 800778a:	f7fd fbc3 	bl	8004f14 <memp_malloc>
 800778e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11b      	bne.n	80077ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007796:	2009      	movs	r0, #9
 8007798:	f7ff ff46 	bl	8007628 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800779c:	2001      	movs	r0, #1
 800779e:	f7fd fbb9 	bl	8004f14 <memp_malloc>
 80077a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d111      	bne.n	80077ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80077aa:	2008      	movs	r0, #8
 80077ac:	f7ff ff3c 	bl	8007628 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077b0:	2001      	movs	r0, #1
 80077b2:	f7fd fbaf 	bl	8004f14 <memp_malloc>
 80077b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fee3 	bl	800758c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7fd fba4 	bl	8004f14 <memp_malloc>
 80077cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d03f      	beq.n	8007854 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80077d4:	229c      	movs	r2, #156	; 0x9c
 80077d6:	2100      	movs	r1, #0
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f007 fb87 	bl	800eeec <memset>
    pcb->prio = prio;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	79fa      	ldrb	r2, [r7, #7]
 80077e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80077ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80077f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	22ff      	movs	r2, #255	; 0xff
 8007802:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f44f 7206 	mov.w	r2, #536	; 0x218
 800780a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2206      	movs	r2, #6
 8007810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2206      	movs	r2, #6
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007820:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <tcp_alloc+0xf8>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <tcp_alloc+0xfc>)
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4a08      	ldr	r2, [pc, #32]	; (8007868 <tcp_alloc+0x100>)
 8007848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a07      	ldr	r2, [pc, #28]	; (800786c <tcp_alloc+0x104>)
 8007850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007854:	68fb      	ldr	r3, [r7, #12]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20008ab8 	.word	0x20008ab8
 8007864:	200000d6 	.word	0x200000d6
 8007868:	08007521 	.word	0x08007521
 800786c:	006ddd00 	.word	0x006ddd00

08007870 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007874:	2040      	movs	r0, #64	; 0x40
 8007876:	f7ff ff77 	bl	8007768 <tcp_alloc>
 800787a:	4603      	mov	r3, r0
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}

08007880 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	611a      	str	r2, [r3, #16]
  }
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7d1b      	ldrb	r3, [r3, #20]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <tcp_recv+0x26>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <tcp_recv+0x38>)
 80078be:	f240 72df 	movw	r2, #2015	; 0x7df
 80078c2:	4907      	ldr	r1, [pc, #28]	; (80078e0 <tcp_recv+0x3c>)
 80078c4:	4807      	ldr	r0, [pc, #28]	; (80078e4 <tcp_recv+0x40>)
 80078c6:	f007 fb19 	bl	800eefc <iprintf>
    pcb->recv = recv;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	08010dcc 	.word	0x08010dcc
 80078e0:	08011368 	.word	0x08011368
 80078e4:	08010e10 	.word	0x08010e10

080078e8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7d1b      	ldrb	r3, [r3, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d106      	bne.n	800790e <tcp_sent+0x26>
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <tcp_sent+0x38>)
 8007902:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007906:	4907      	ldr	r1, [pc, #28]	; (8007924 <tcp_sent+0x3c>)
 8007908:	4807      	ldr	r0, [pc, #28]	; (8007928 <tcp_sent+0x40>)
 800790a:	f007 faf7 	bl	800eefc <iprintf>
    pcb->sent = sent;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	08010dcc 	.word	0x08010dcc
 8007924:	08011390 	.word	0x08011390
 8007928:	08010e10 	.word	0x08010e10

0800792c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00e      	beq.n	800795a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d106      	bne.n	8007952 <tcp_err+0x26>
 8007944:	4b07      	ldr	r3, [pc, #28]	; (8007964 <tcp_err+0x38>)
 8007946:	f640 020d 	movw	r2, #2061	; 0x80d
 800794a:	4907      	ldr	r1, [pc, #28]	; (8007968 <tcp_err+0x3c>)
 800794c:	4807      	ldr	r0, [pc, #28]	; (800796c <tcp_err+0x40>)
 800794e:	f007 fad5 	bl	800eefc <iprintf>
    pcb->errf = err;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	08010dcc 	.word	0x08010dcc
 8007968:	080113b8 	.word	0x080113b8
 800796c:	08010e10 	.word	0x08010e10

08007970 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d107      	bne.n	8007994 <tcp_poll+0x24>
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <tcp_poll+0x50>)
 8007986:	f640 023d 	movw	r2, #2109	; 0x83d
 800798a:	490e      	ldr	r1, [pc, #56]	; (80079c4 <tcp_poll+0x54>)
 800798c:	480e      	ldr	r0, [pc, #56]	; (80079c8 <tcp_poll+0x58>)
 800798e:	f007 fab5 	bl	800eefc <iprintf>
 8007992:	e011      	b.n	80079b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	7d1b      	ldrb	r3, [r3, #20]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d106      	bne.n	80079aa <tcp_poll+0x3a>
 800799c:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <tcp_poll+0x50>)
 800799e:	f640 023e 	movw	r2, #2110	; 0x83e
 80079a2:	490a      	ldr	r1, [pc, #40]	; (80079cc <tcp_poll+0x5c>)
 80079a4:	4808      	ldr	r0, [pc, #32]	; (80079c8 <tcp_poll+0x58>)
 80079a6:	f007 faa9 	bl	800eefc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	79fa      	ldrb	r2, [r7, #7]
 80079b6:	775a      	strb	r2, [r3, #29]
}
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	08010dcc 	.word	0x08010dcc
 80079c4:	080113e0 	.word	0x080113e0
 80079c8:	08010e10 	.word	0x08010e10
 80079cc:	080113f8 	.word	0x080113f8

080079d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <tcp_pcb_purge+0x1e>
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <tcp_pcb_purge+0x94>)
 80079e0:	f640 0251 	movw	r2, #2129	; 0x851
 80079e4:	4920      	ldr	r1, [pc, #128]	; (8007a68 <tcp_pcb_purge+0x98>)
 80079e6:	4821      	ldr	r0, [pc, #132]	; (8007a6c <tcp_pcb_purge+0x9c>)
 80079e8:	f007 fa88 	bl	800eefc <iprintf>
 80079ec:	e037      	b.n	8007a5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7d1b      	ldrb	r3, [r3, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d033      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d02f      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d02b      	beq.n	8007a5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe f8dc 	bl	8005bd0 <pbuf_free>
      pcb->refused_data = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f986 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a32:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fd17 	bl	800746c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fd12 	bl	800746c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08010dcc 	.word	0x08010dcc
 8007a68:	08011418 	.word	0x08011418
 8007a6c:	08010e10 	.word	0x08010e10

08007a70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <tcp_pcb_remove+0x1e>
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a82:	f640 0283 	movw	r2, #2179	; 0x883
 8007a86:	493e      	ldr	r1, [pc, #248]	; (8007b80 <tcp_pcb_remove+0x110>)
 8007a88:	483e      	ldr	r0, [pc, #248]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a8a:	f007 fa37 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <tcp_pcb_remove+0x32>
 8007a94:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a96:	f640 0284 	movw	r2, #2180	; 0x884
 8007a9a:	493b      	ldr	r1, [pc, #236]	; (8007b88 <tcp_pcb_remove+0x118>)
 8007a9c:	4839      	ldr	r0, [pc, #228]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a9e:	f007 fa2d 	bl	800eefc <iprintf>

  TCP_RMV(pcblist, pcb);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d105      	bne.n	8007ab8 <tcp_pcb_remove+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e013      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e00c      	b.n	8007ada <tcp_pcb_remove+0x6a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d104      	bne.n	8007ad4 <tcp_pcb_remove+0x64>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	e005      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ef      	bne.n	8007ac0 <tcp_pcb_remove+0x50>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	f7ff ff72 	bl	80079d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	7d1b      	ldrb	r3, [r3, #20]
 8007af0:	2b0a      	cmp	r3, #10
 8007af2:	d013      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d00f      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	8b5b      	ldrh	r3, [r3, #26]
 8007b00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	8b5b      	ldrh	r3, [r3, #26]
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b16:	6838      	ldr	r0, [r7, #0]
 8007b18:	f003 fbc2 	bl	800b2a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d020      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <tcp_pcb_remove+0xca>
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b2e:	f640 0293 	movw	r2, #2195	; 0x893
 8007b32:	4916      	ldr	r1, [pc, #88]	; (8007b8c <tcp_pcb_remove+0x11c>)
 8007b34:	4813      	ldr	r0, [pc, #76]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b36:	f007 f9e1 	bl	800eefc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d006      	beq.n	8007b50 <tcp_pcb_remove+0xe0>
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b44:	f640 0294 	movw	r2, #2196	; 0x894
 8007b48:	4911      	ldr	r1, [pc, #68]	; (8007b90 <tcp_pcb_remove+0x120>)
 8007b4a:	480e      	ldr	r0, [pc, #56]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b4c:	f007 f9d6 	bl	800eefc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b5a:	f640 0296 	movw	r2, #2198	; 0x896
 8007b5e:	490d      	ldr	r1, [pc, #52]	; (8007b94 <tcp_pcb_remove+0x124>)
 8007b60:	4808      	ldr	r0, [pc, #32]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b62:	f007 f9cb 	bl	800eefc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08010dcc 	.word	0x08010dcc
 8007b80:	08011434 	.word	0x08011434
 8007b84:	08010e10 	.word	0x08010e10
 8007b88:	08011450 	.word	0x08011450
 8007b8c:	08011470 	.word	0x08011470
 8007b90:	08011488 	.word	0x08011488
 8007b94:	080114a4 	.word	0x080114a4

08007b98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <tcp_next_iss+0x1c>
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <tcp_next_iss+0x38>)
 8007ba8:	f640 02af 	movw	r2, #2223	; 0x8af
 8007bac:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <tcp_next_iss+0x3c>)
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <tcp_next_iss+0x40>)
 8007bb0:	f007 f9a4 	bl	800eefc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <tcp_next_iss+0x44>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <tcp_next_iss+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	4a07      	ldr	r2, [pc, #28]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc0:	6013      	str	r3, [r2, #0]
  return iss;
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	08010dcc 	.word	0x08010dcc
 8007bd4:	080114bc 	.word	0x080114bc
 8007bd8:	08010e10 	.word	0x08010e10
 8007bdc:	2000000c 	.word	0x2000000c
 8007be0:	20008ab8 	.word	0x20008ab8

08007be4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <tcp_eff_send_mss_netif+0x22>
 8007bf8:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <tcp_eff_send_mss_netif+0x68>)
 8007bfa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007bfe:	4914      	ldr	r1, [pc, #80]	; (8007c50 <tcp_eff_send_mss_netif+0x6c>)
 8007c00:	4814      	ldr	r0, [pc, #80]	; (8007c54 <tcp_eff_send_mss_netif+0x70>)
 8007c02:	f007 f97b 	bl	800eefc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	e019      	b.n	8007c44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007c16:	8afb      	ldrh	r3, [r7, #22]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007c1c:	2328      	movs	r3, #40	; 0x28
 8007c1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007c20:	8afa      	ldrh	r2, [r7, #22]
 8007c22:	8abb      	ldrh	r3, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d904      	bls.n	8007c32 <tcp_eff_send_mss_netif+0x4e>
 8007c28:	8afa      	ldrh	r2, [r7, #22]
 8007c2a:	8abb      	ldrh	r3, [r7, #20]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	e000      	b.n	8007c34 <tcp_eff_send_mss_netif+0x50>
 8007c32:	2300      	movs	r3, #0
 8007c34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007c36:	8a7a      	ldrh	r2, [r7, #18]
 8007c38:	89fb      	ldrh	r3, [r7, #14]
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bf28      	it	cs
 8007c3e:	4613      	movcs	r3, r2
 8007c40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007c42:	89fb      	ldrh	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08010dcc 	.word	0x08010dcc
 8007c50:	080114d8 	.word	0x080114d8
 8007c54:	08010e10 	.word	0x08010e10

08007c58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d119      	bne.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007c6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007c72:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007c76:	f007 f941 	bl	800eefc <iprintf>

  while (pcb != NULL) {
 8007c7a:	e011      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d108      	bne.n	8007c9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7fe fdb8 	bl	8006804 <tcp_abort>
      pcb = next;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e002      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1ea      	bne.n	8007c7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08010dcc 	.word	0x08010dcc
 8007cb4:	08011500 	.word	0x08011500
 8007cb8:	08010e10 	.word	0x08010e10

08007cbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02a      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d026      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <tcp_netif_ip_addr_changed+0x70>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ffbc 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007ce0:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <tcp_netif_ip_addr_changed+0x74>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ffb6 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <tcp_netif_ip_addr_changed+0x78>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e00c      	b.n	8007d1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d103      	bne.n	8007d16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1ef      	bne.n	8007d02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20008ab4 	.word	0x20008ab4
 8007d30:	20008ac0 	.word	0x20008ac0
 8007d34:	20008abc 	.word	0x20008abc

08007d38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fb8d 	bl	800746c <tcp_segs_free>
    pcb->ooseq = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b08d      	sub	sp, #52	; 0x34
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <tcp_input+0x1c>
 8007d70:	4b9b      	ldr	r3, [pc, #620]	; (8007fe0 <tcp_input+0x280>)
 8007d72:	2283      	movs	r2, #131	; 0x83
 8007d74:	499b      	ldr	r1, [pc, #620]	; (8007fe4 <tcp_input+0x284>)
 8007d76:	489c      	ldr	r0, [pc, #624]	; (8007fe8 <tcp_input+0x288>)
 8007d78:	f007 f8c0 	bl	800eefc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a9a      	ldr	r2, [pc, #616]	; (8007fec <tcp_input+0x28c>)
 8007d82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	2b13      	cmp	r3, #19
 8007d8a:	f240 83c4 	bls.w	8008516 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007d8e:	4b98      	ldr	r3, [pc, #608]	; (8007ff0 <tcp_input+0x290>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	4a97      	ldr	r2, [pc, #604]	; (8007ff0 <tcp_input+0x290>)
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f006 f86b 	bl	800de74 <ip4_addr_isbroadcast_u32>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 83ba 	bne.w	800851a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007da6:	4b92      	ldr	r3, [pc, #584]	; (8007ff0 <tcp_input+0x290>)
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007dae:	2be0      	cmp	r3, #224	; 0xe0
 8007db0:	f000 83b3 	beq.w	800851a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007db4:	4b8d      	ldr	r3, [pc, #564]	; (8007fec <tcp_input+0x28c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	899b      	ldrh	r3, [r3, #12]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fc53 	bl	8004668 <lwip_htons>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	0b1b      	lsrs	r3, r3, #12
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007dce:	7cbb      	ldrb	r3, [r7, #18]
 8007dd0:	2b13      	cmp	r3, #19
 8007dd2:	f240 83a4 	bls.w	800851e <tcp_input+0x7be>
 8007dd6:	7cbb      	ldrb	r3, [r7, #18]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	891b      	ldrh	r3, [r3, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	f200 839d 	bhi.w	800851e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007de4:	7cbb      	ldrb	r3, [r7, #18]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b14      	subs	r3, #20
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	4b81      	ldr	r3, [pc, #516]	; (8007ff4 <tcp_input+0x294>)
 8007dee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007df0:	4b81      	ldr	r3, [pc, #516]	; (8007ff8 <tcp_input+0x298>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	895a      	ldrh	r2, [r3, #10]
 8007dfa:	7cbb      	ldrb	r3, [r7, #18]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d309      	bcc.n	8007e16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007e02:	4b7c      	ldr	r3, [pc, #496]	; (8007ff4 <tcp_input+0x294>)
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	4b7d      	ldr	r3, [pc, #500]	; (8007ffc <tcp_input+0x29c>)
 8007e08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007e0a:	7cbb      	ldrb	r3, [r7, #18]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fd fe58 	bl	8005ac4 <pbuf_remove_header>
 8007e14:	e04e      	b.n	8007eb4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <tcp_input+0xca>
 8007e1e:	4b70      	ldr	r3, [pc, #448]	; (8007fe0 <tcp_input+0x280>)
 8007e20:	22c2      	movs	r2, #194	; 0xc2
 8007e22:	4977      	ldr	r1, [pc, #476]	; (8008000 <tcp_input+0x2a0>)
 8007e24:	4870      	ldr	r0, [pc, #448]	; (8007fe8 <tcp_input+0x288>)
 8007e26:	f007 f869 	bl	800eefc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007e2a:	2114      	movs	r1, #20
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fd fe49 	bl	8005ac4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	895a      	ldrh	r2, [r3, #10]
 8007e36:	4b71      	ldr	r3, [pc, #452]	; (8007ffc <tcp_input+0x29c>)
 8007e38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007e3a:	4b6e      	ldr	r3, [pc, #440]	; (8007ff4 <tcp_input+0x294>)
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	4b6f      	ldr	r3, [pc, #444]	; (8007ffc <tcp_input+0x29c>)
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007e46:	4b6d      	ldr	r3, [pc, #436]	; (8007ffc <tcp_input+0x29c>)
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fd fe39 	bl	8005ac4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	895b      	ldrh	r3, [r3, #10]
 8007e58:	8a3a      	ldrh	r2, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	f200 8361 	bhi.w	8008522 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4a64      	ldr	r2, [pc, #400]	; (8007ff8 <tcp_input+0x298>)
 8007e68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	8a3a      	ldrh	r2, [r7, #16]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fd fe26 	bl	8005ac4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	891a      	ldrh	r2, [r3, #8]
 8007e7c:	8a3b      	ldrh	r3, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	895b      	ldrh	r3, [r3, #10]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <tcp_input+0x13a>
 8007e8e:	4b54      	ldr	r3, [pc, #336]	; (8007fe0 <tcp_input+0x280>)
 8007e90:	22df      	movs	r2, #223	; 0xdf
 8007e92:	495c      	ldr	r1, [pc, #368]	; (8008004 <tcp_input+0x2a4>)
 8007e94:	4854      	ldr	r0, [pc, #336]	; (8007fe8 <tcp_input+0x288>)
 8007e96:	f007 f831 	bl	800eefc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	891a      	ldrh	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d005      	beq.n	8007eb4 <tcp_input+0x154>
 8007ea8:	4b4d      	ldr	r3, [pc, #308]	; (8007fe0 <tcp_input+0x280>)
 8007eaa:	22e0      	movs	r2, #224	; 0xe0
 8007eac:	4956      	ldr	r1, [pc, #344]	; (8008008 <tcp_input+0x2a8>)
 8007eae:	484e      	ldr	r0, [pc, #312]	; (8007fe8 <tcp_input+0x288>)
 8007eb0:	f007 f824 	bl	800eefc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007eb4:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <tcp_input+0x28c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	4a4b      	ldr	r2, [pc, #300]	; (8007fec <tcp_input+0x28c>)
 8007ebe:	6814      	ldr	r4, [r2, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fc fbd1 	bl	8004668 <lwip_htons>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007eca:	4b48      	ldr	r3, [pc, #288]	; (8007fec <tcp_input+0x28c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4a46      	ldr	r2, [pc, #280]	; (8007fec <tcp_input+0x28c>)
 8007ed4:	6814      	ldr	r4, [r2, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fc fbc6 	bl	8004668 <lwip_htons>
 8007edc:	4603      	mov	r3, r0
 8007ede:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007ee0:	4b42      	ldr	r3, [pc, #264]	; (8007fec <tcp_input+0x28c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <tcp_input+0x28c>)
 8007ee8:	6814      	ldr	r4, [r2, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc fbd1 	bl	8004692 <lwip_htonl>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	4a45      	ldr	r2, [pc, #276]	; (800800c <tcp_input+0x2ac>)
 8007ef8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007efa:	4b3c      	ldr	r3, [pc, #240]	; (8007fec <tcp_input+0x28c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4a3a      	ldr	r2, [pc, #232]	; (8007fec <tcp_input+0x28c>)
 8007f02:	6814      	ldr	r4, [r2, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc fbc4 	bl	8004692 <lwip_htonl>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <tcp_input+0x2b0>)
 8007f12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007f14:	4b35      	ldr	r3, [pc, #212]	; (8007fec <tcp_input+0x28c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	89db      	ldrh	r3, [r3, #14]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4a33      	ldr	r2, [pc, #204]	; (8007fec <tcp_input+0x28c>)
 8007f1e:	6814      	ldr	r4, [r2, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fc fba1 	bl	8004668 <lwip_htons>
 8007f26:	4603      	mov	r3, r0
 8007f28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007f2a:	4b30      	ldr	r3, [pc, #192]	; (8007fec <tcp_input+0x28c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	899b      	ldrh	r3, [r3, #12]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fc fb98 	bl	8004668 <lwip_htons>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	4b34      	ldr	r3, [pc, #208]	; (8008014 <tcp_input+0x2b4>)
 8007f44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	891a      	ldrh	r2, [r3, #8]
 8007f4a:	4b33      	ldr	r3, [pc, #204]	; (8008018 <tcp_input+0x2b8>)
 8007f4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007f4e:	4b31      	ldr	r3, [pc, #196]	; (8008014 <tcp_input+0x2b4>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <tcp_input+0x214>
    tcplen++;
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <tcp_input+0x2b8>)
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	4b2d      	ldr	r3, [pc, #180]	; (8008018 <tcp_input+0x2b8>)
 8007f64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	891a      	ldrh	r2, [r3, #8]
 8007f6a:	4b2b      	ldr	r3, [pc, #172]	; (8008018 <tcp_input+0x2b8>)
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	f200 82d9 	bhi.w	8008526 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f78:	4b28      	ldr	r3, [pc, #160]	; (800801c <tcp_input+0x2bc>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	e09d      	b.n	80080bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	7d1b      	ldrb	r3, [r3, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <tcp_input+0x234>
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <tcp_input+0x280>)
 8007f8a:	22fb      	movs	r2, #251	; 0xfb
 8007f8c:	4924      	ldr	r1, [pc, #144]	; (8008020 <tcp_input+0x2c0>)
 8007f8e:	4816      	ldr	r0, [pc, #88]	; (8007fe8 <tcp_input+0x288>)
 8007f90:	f006 ffb4 	bl	800eefc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	7d1b      	ldrb	r3, [r3, #20]
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d105      	bne.n	8007fa8 <tcp_input+0x248>
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <tcp_input+0x280>)
 8007f9e:	22fc      	movs	r2, #252	; 0xfc
 8007fa0:	4920      	ldr	r1, [pc, #128]	; (8008024 <tcp_input+0x2c4>)
 8007fa2:	4811      	ldr	r0, [pc, #68]	; (8007fe8 <tcp_input+0x288>)
 8007fa4:	f006 ffaa 	bl	800eefc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	7d1b      	ldrb	r3, [r3, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d105      	bne.n	8007fbc <tcp_input+0x25c>
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <tcp_input+0x280>)
 8007fb2:	22fd      	movs	r2, #253	; 0xfd
 8007fb4:	491c      	ldr	r1, [pc, #112]	; (8008028 <tcp_input+0x2c8>)
 8007fb6:	480c      	ldr	r0, [pc, #48]	; (8007fe8 <tcp_input+0x288>)
 8007fb8:	f006 ffa0 	bl	800eefc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	7a1b      	ldrb	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d033      	beq.n	800802c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	7a1a      	ldrb	r2, [r3, #8]
 8007fc8:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <tcp_input+0x290>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d029      	beq.n	800802c <tcp_input+0x2cc>
      prev = pcb;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	61bb      	str	r3, [r7, #24]
      continue;
 8007fdc:	e06b      	b.n	80080b6 <tcp_input+0x356>
 8007fde:	bf00      	nop
 8007fe0:	08011534 	.word	0x08011534
 8007fe4:	08011568 	.word	0x08011568
 8007fe8:	08011580 	.word	0x08011580
 8007fec:	200000e8 	.word	0x200000e8
 8007ff0:	200033b0 	.word	0x200033b0
 8007ff4:	200000ec 	.word	0x200000ec
 8007ff8:	200000f0 	.word	0x200000f0
 8007ffc:	200000ee 	.word	0x200000ee
 8008000:	080115a8 	.word	0x080115a8
 8008004:	080115b8 	.word	0x080115b8
 8008008:	080115c4 	.word	0x080115c4
 800800c:	200000f8 	.word	0x200000f8
 8008010:	200000fc 	.word	0x200000fc
 8008014:	20000104 	.word	0x20000104
 8008018:	20000102 	.word	0x20000102
 800801c:	20008ab4 	.word	0x20008ab4
 8008020:	080115e4 	.word	0x080115e4
 8008024:	0801160c 	.word	0x0801160c
 8008028:	08011638 	.word	0x08011638
    }

    if (pcb->remote_port == tcphdr->src &&
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	8b1a      	ldrh	r2, [r3, #24]
 8008030:	4b94      	ldr	r3, [pc, #592]	; (8008284 <tcp_input+0x524>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	429a      	cmp	r2, r3
 800803a:	d13a      	bne.n	80080b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	8ada      	ldrh	r2, [r3, #22]
 8008040:	4b90      	ldr	r3, [pc, #576]	; (8008284 <tcp_input+0x524>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008048:	429a      	cmp	r2, r3
 800804a:	d132      	bne.n	80080b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	4b8d      	ldr	r3, [pc, #564]	; (8008288 <tcp_input+0x528>)
 8008052:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008054:	429a      	cmp	r2, r3
 8008056:	d12c      	bne.n	80080b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b8a      	ldr	r3, [pc, #552]	; (8008288 <tcp_input+0x528>)
 800805e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008060:	429a      	cmp	r2, r3
 8008062:	d126      	bne.n	80080b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	429a      	cmp	r2, r3
 800806c:	d106      	bne.n	800807c <tcp_input+0x31c>
 800806e:	4b87      	ldr	r3, [pc, #540]	; (800828c <tcp_input+0x52c>)
 8008070:	f240 120d 	movw	r2, #269	; 0x10d
 8008074:	4986      	ldr	r1, [pc, #536]	; (8008290 <tcp_input+0x530>)
 8008076:	4887      	ldr	r0, [pc, #540]	; (8008294 <tcp_input+0x534>)
 8008078:	f006 ff40 	bl	800eefc <iprintf>
      if (prev != NULL) {
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <tcp_input+0x338>
        prev->next = pcb->next;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800808a:	4b83      	ldr	r3, [pc, #524]	; (8008298 <tcp_input+0x538>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008092:	4a81      	ldr	r2, [pc, #516]	; (8008298 <tcp_input+0x538>)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d111      	bne.n	80080c6 <tcp_input+0x366>
 80080a2:	4b7a      	ldr	r3, [pc, #488]	; (800828c <tcp_input+0x52c>)
 80080a4:	f240 1215 	movw	r2, #277	; 0x115
 80080a8:	497c      	ldr	r1, [pc, #496]	; (800829c <tcp_input+0x53c>)
 80080aa:	487a      	ldr	r0, [pc, #488]	; (8008294 <tcp_input+0x534>)
 80080ac:	f006 ff26 	bl	800eefc <iprintf>
      break;
 80080b0:	e009      	b.n	80080c6 <tcp_input+0x366>
    }
    prev = pcb;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f af5e 	bne.w	8007f80 <tcp_input+0x220>
 80080c4:	e000      	b.n	80080c8 <tcp_input+0x368>
      break;
 80080c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 8095 	bne.w	80081fa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80080d0:	4b73      	ldr	r3, [pc, #460]	; (80082a0 <tcp_input+0x540>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	e03f      	b.n	8008158 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	7d1b      	ldrb	r3, [r3, #20]
 80080dc:	2b0a      	cmp	r3, #10
 80080de:	d006      	beq.n	80080ee <tcp_input+0x38e>
 80080e0:	4b6a      	ldr	r3, [pc, #424]	; (800828c <tcp_input+0x52c>)
 80080e2:	f240 121f 	movw	r2, #287	; 0x11f
 80080e6:	496f      	ldr	r1, [pc, #444]	; (80082a4 <tcp_input+0x544>)
 80080e8:	486a      	ldr	r0, [pc, #424]	; (8008294 <tcp_input+0x534>)
 80080ea:	f006 ff07 	bl	800eefc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	7a1b      	ldrb	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	7a1a      	ldrb	r2, [r3, #8]
 80080fa:	4b63      	ldr	r3, [pc, #396]	; (8008288 <tcp_input+0x528>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008102:	3301      	adds	r3, #1
 8008104:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008106:	429a      	cmp	r2, r3
 8008108:	d122      	bne.n	8008150 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	8b1a      	ldrh	r2, [r3, #24]
 800810e:	4b5d      	ldr	r3, [pc, #372]	; (8008284 <tcp_input+0x524>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	429a      	cmp	r2, r3
 8008118:	d11b      	bne.n	8008152 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	8ada      	ldrh	r2, [r3, #22]
 800811e:	4b59      	ldr	r3, [pc, #356]	; (8008284 <tcp_input+0x524>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	885b      	ldrh	r3, [r3, #2]
 8008124:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008126:	429a      	cmp	r2, r3
 8008128:	d113      	bne.n	8008152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	4b56      	ldr	r3, [pc, #344]	; (8008288 <tcp_input+0x528>)
 8008130:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d10d      	bne.n	8008152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b53      	ldr	r3, [pc, #332]	; (8008288 <tcp_input+0x528>)
 800813c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800813e:	429a      	cmp	r2, r3
 8008140:	d107      	bne.n	8008152 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008142:	69f8      	ldr	r0, [r7, #28]
 8008144:	f000 fb54 	bl	80087f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fd fd41 	bl	8005bd0 <pbuf_free>
        return;
 800814e:	e1f0      	b.n	8008532 <tcp_input+0x7d2>
        continue;
 8008150:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1bc      	bne.n	80080d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008162:	4b51      	ldr	r3, [pc, #324]	; (80082a8 <tcp_input+0x548>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e02a      	b.n	80081c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	7a1b      	ldrb	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00c      	beq.n	800818c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	7a1a      	ldrb	r2, [r3, #8]
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <tcp_input+0x528>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800817e:	3301      	adds	r3, #1
 8008180:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008182:	429a      	cmp	r2, r3
 8008184:	d002      	beq.n	800818c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	61bb      	str	r3, [r7, #24]
        continue;
 800818a:	e016      	b.n	80081ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	8ada      	ldrh	r2, [r3, #22]
 8008190:	4b3c      	ldr	r3, [pc, #240]	; (8008284 <tcp_input+0x524>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	885b      	ldrh	r3, [r3, #2]
 8008196:	b29b      	uxth	r3, r3
 8008198:	429a      	cmp	r2, r3
 800819a:	d10c      	bne.n	80081b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	4b39      	ldr	r3, [pc, #228]	; (8008288 <tcp_input+0x528>)
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d00f      	beq.n	80081c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <tcp_input+0x46a>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1d1      	bne.n	800816a <tcp_input+0x40a>
 80081c6:	e000      	b.n	80081ca <tcp_input+0x46a>
            break;
 80081c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d014      	beq.n	80081fa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80081de:	4b32      	ldr	r3, [pc, #200]	; (80082a8 <tcp_input+0x548>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80081e6:	4a30      	ldr	r2, [pc, #192]	; (80082a8 <tcp_input+0x548>)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80081ec:	6978      	ldr	r0, [r7, #20]
 80081ee:	f000 fa01 	bl	80085f4 <tcp_listen_input>
      }
      pbuf_free(p);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fd fcec 	bl	8005bd0 <pbuf_free>
      return;
 80081f8:	e19b      	b.n	8008532 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8160 	beq.w	80084c2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008202:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <tcp_input+0x54c>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	891a      	ldrh	r2, [r3, #8]
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <tcp_input+0x54c>)
 800820e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008210:	4a26      	ldr	r2, [pc, #152]	; (80082ac <tcp_input+0x54c>)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008216:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <tcp_input+0x524>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a24      	ldr	r2, [pc, #144]	; (80082ac <tcp_input+0x54c>)
 800821c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800821e:	4b24      	ldr	r3, [pc, #144]	; (80082b0 <tcp_input+0x550>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008224:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <tcp_input+0x554>)
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800822a:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <tcp_input+0x558>)
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008230:	4b22      	ldr	r3, [pc, #136]	; (80082bc <tcp_input+0x55c>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7b5b      	ldrb	r3, [r3, #13]
 8008240:	f043 0301 	orr.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800824e:	2b00      	cmp	r3, #0
 8008250:	d038      	beq.n	80082c4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008252:	69f8      	ldr	r0, [r7, #28]
 8008254:	f7ff f88e 	bl	8007374 <tcp_process_refused_data>
 8008258:	4603      	mov	r3, r0
 800825a:	f113 0f0d 	cmn.w	r3, #13
 800825e:	d007      	beq.n	8008270 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008264:	2b00      	cmp	r3, #0
 8008266:	d02d      	beq.n	80082c4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008268:	4b15      	ldr	r3, [pc, #84]	; (80082c0 <tcp_input+0x560>)
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d029      	beq.n	80082c4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8104 	bne.w	8008482 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800827a:	69f8      	ldr	r0, [r7, #28]
 800827c:	f003 fe16 	bl	800beac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008280:	e0ff      	b.n	8008482 <tcp_input+0x722>
 8008282:	bf00      	nop
 8008284:	200000e8 	.word	0x200000e8
 8008288:	200033b0 	.word	0x200033b0
 800828c:	08011534 	.word	0x08011534
 8008290:	08011660 	.word	0x08011660
 8008294:	08011580 	.word	0x08011580
 8008298:	20008ab4 	.word	0x20008ab4
 800829c:	0801168c 	.word	0x0801168c
 80082a0:	20008ac4 	.word	0x20008ac4
 80082a4:	080116b8 	.word	0x080116b8
 80082a8:	20008abc 	.word	0x20008abc
 80082ac:	200000d8 	.word	0x200000d8
 80082b0:	20000108 	.word	0x20000108
 80082b4:	20000105 	.word	0x20000105
 80082b8:	20000100 	.word	0x20000100
 80082bc:	20000104 	.word	0x20000104
 80082c0:	20000102 	.word	0x20000102
      }
    }
    tcp_input_pcb = pcb;
 80082c4:	4a9c      	ldr	r2, [pc, #624]	; (8008538 <tcp_input+0x7d8>)
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80082ca:	69f8      	ldr	r0, [r7, #28]
 80082cc:	f000 fb0a 	bl	80088e4 <tcp_process>
 80082d0:	4603      	mov	r3, r0
 80082d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80082d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082d8:	f113 0f0d 	cmn.w	r3, #13
 80082dc:	f000 80d3 	beq.w	8008486 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80082e0:	4b96      	ldr	r3, [pc, #600]	; (800853c <tcp_input+0x7dc>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d015      	beq.n	8008318 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <tcp_input+0x5a8>
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	6912      	ldr	r2, [r2, #16]
 8008300:	f06f 010d 	mvn.w	r1, #13
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	488d      	ldr	r0, [pc, #564]	; (8008540 <tcp_input+0x7e0>)
 800830c:	f7ff fbb0 	bl	8007a70 <tcp_pcb_remove>
        tcp_free(pcb);
 8008310:	69f8      	ldr	r0, [r7, #28]
 8008312:	f7fd ff8f 	bl	8006234 <tcp_free>
 8008316:	e0c1      	b.n	800849c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800831c:	4b89      	ldr	r3, [pc, #548]	; (8008544 <tcp_input+0x7e4>)
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01d      	beq.n	8008360 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008324:	4b87      	ldr	r3, [pc, #540]	; (8008544 <tcp_input+0x7e4>)
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00a      	beq.n	800834a <tcp_input+0x5ea>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	6910      	ldr	r0, [r2, #16]
 800833e:	89fa      	ldrh	r2, [r7, #14]
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	4798      	blx	r3
 8008344:	4603      	mov	r3, r0
 8008346:	74fb      	strb	r3, [r7, #19]
 8008348:	e001      	b.n	800834e <tcp_input+0x5ee>
 800834a:	2300      	movs	r3, #0
 800834c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800834e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008352:	f113 0f0d 	cmn.w	r3, #13
 8008356:	f000 8098 	beq.w	800848a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800835a:	4b7a      	ldr	r3, [pc, #488]	; (8008544 <tcp_input+0x7e4>)
 800835c:	2200      	movs	r2, #0
 800835e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008360:	69f8      	ldr	r0, [r7, #28]
 8008362:	f000 f907 	bl	8008574 <tcp_input_delayed_close>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 8090 	bne.w	800848e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800836e:	4b76      	ldr	r3, [pc, #472]	; (8008548 <tcp_input+0x7e8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d041      	beq.n	80083fa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800837a:	2b00      	cmp	r3, #0
 800837c:	d006      	beq.n	800838c <tcp_input+0x62c>
 800837e:	4b73      	ldr	r3, [pc, #460]	; (800854c <tcp_input+0x7ec>)
 8008380:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008384:	4972      	ldr	r1, [pc, #456]	; (8008550 <tcp_input+0x7f0>)
 8008386:	4873      	ldr	r0, [pc, #460]	; (8008554 <tcp_input+0x7f4>)
 8008388:	f006 fdb8 	bl	800eefc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	8b5b      	ldrh	r3, [r3, #26]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d008      	beq.n	80083aa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008398:	4b6b      	ldr	r3, [pc, #428]	; (8008548 <tcp_input+0x7e8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd fc17 	bl	8005bd0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80083a2:	69f8      	ldr	r0, [r7, #28]
 80083a4:	f7fe fa2e 	bl	8006804 <tcp_abort>
            goto aborted;
 80083a8:	e078      	b.n	800849c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00c      	beq.n	80083ce <tcp_input+0x66e>
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	6918      	ldr	r0, [r3, #16]
 80083be:	4b62      	ldr	r3, [pc, #392]	; (8008548 <tcp_input+0x7e8>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	2300      	movs	r3, #0
 80083c4:	69f9      	ldr	r1, [r7, #28]
 80083c6:	47a0      	blx	r4
 80083c8:	4603      	mov	r3, r0
 80083ca:	74fb      	strb	r3, [r7, #19]
 80083cc:	e008      	b.n	80083e0 <tcp_input+0x680>
 80083ce:	4b5e      	ldr	r3, [pc, #376]	; (8008548 <tcp_input+0x7e8>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	2300      	movs	r3, #0
 80083d4:	69f9      	ldr	r1, [r7, #28]
 80083d6:	2000      	movs	r0, #0
 80083d8:	f7ff f8a2 	bl	8007520 <tcp_recv_null>
 80083dc:	4603      	mov	r3, r0
 80083de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80083e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083e4:	f113 0f0d 	cmn.w	r3, #13
 80083e8:	d053      	beq.n	8008492 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80083ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80083f2:	4b55      	ldr	r3, [pc, #340]	; (8008548 <tcp_input+0x7e8>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80083fa:	4b50      	ldr	r3, [pc, #320]	; (800853c <tcp_input+0x7dc>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d030      	beq.n	8008468 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008412:	7b5a      	ldrb	r2, [r3, #13]
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008418:	f042 0220 	orr.w	r2, r2, #32
 800841c:	b2d2      	uxtb	r2, r2
 800841e:	735a      	strb	r2, [r3, #13]
 8008420:	e022      	b.n	8008468 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008426:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800842a:	d005      	beq.n	8008438 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	3301      	adds	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <tcp_input+0x6fa>
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	6918      	ldr	r0, [r3, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	2200      	movs	r2, #0
 8008450:	69f9      	ldr	r1, [r7, #28]
 8008452:	47a0      	blx	r4
 8008454:	4603      	mov	r3, r0
 8008456:	74fb      	strb	r3, [r7, #19]
 8008458:	e001      	b.n	800845e <tcp_input+0x6fe>
 800845a:	2300      	movs	r3, #0
 800845c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800845e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008462:	f113 0f0d 	cmn.w	r3, #13
 8008466:	d016      	beq.n	8008496 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008468:	4b33      	ldr	r3, [pc, #204]	; (8008538 <tcp_input+0x7d8>)
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800846e:	69f8      	ldr	r0, [r7, #28]
 8008470:	f000 f880 	bl	8008574 <tcp_input_delayed_close>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10f      	bne.n	800849a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800847a:	69f8      	ldr	r0, [r7, #28]
 800847c:	f002 ff10 	bl	800b2a0 <tcp_output>
 8008480:	e00c      	b.n	800849c <tcp_input+0x73c>
        goto aborted;
 8008482:	bf00      	nop
 8008484:	e00a      	b.n	800849c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008486:	bf00      	nop
 8008488:	e008      	b.n	800849c <tcp_input+0x73c>
              goto aborted;
 800848a:	bf00      	nop
 800848c:	e006      	b.n	800849c <tcp_input+0x73c>
          goto aborted;
 800848e:	bf00      	nop
 8008490:	e004      	b.n	800849c <tcp_input+0x73c>
            goto aborted;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <tcp_input+0x73c>
              goto aborted;
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <tcp_input+0x73c>
          goto aborted;
 800849a:	bf00      	nop
    tcp_input_pcb = NULL;
 800849c:	4b26      	ldr	r3, [pc, #152]	; (8008538 <tcp_input+0x7d8>)
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80084a2:	4b29      	ldr	r3, [pc, #164]	; (8008548 <tcp_input+0x7e8>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80084a8:	4b2b      	ldr	r3, [pc, #172]	; (8008558 <tcp_input+0x7f8>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d03f      	beq.n	8008530 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80084b0:	4b29      	ldr	r3, [pc, #164]	; (8008558 <tcp_input+0x7f8>)
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fb8b 	bl	8005bd0 <pbuf_free>
      inseg.p = NULL;
 80084ba:	4b27      	ldr	r3, [pc, #156]	; (8008558 <tcp_input+0x7f8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80084c0:	e036      	b.n	8008530 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <tcp_input+0x7fc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	899b      	ldrh	r3, [r3, #12]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fc f8cc 	bl	8004668 <lwip_htons>
 80084d0:	4603      	mov	r3, r0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d118      	bne.n	800850e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084dc:	4b20      	ldr	r3, [pc, #128]	; (8008560 <tcp_input+0x800>)
 80084de:	6819      	ldr	r1, [r3, #0]
 80084e0:	4b20      	ldr	r3, [pc, #128]	; (8008564 <tcp_input+0x804>)
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <tcp_input+0x808>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <tcp_input+0x7fc>)
 80084ee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084f4:	4a19      	ldr	r2, [pc, #100]	; (800855c <tcp_input+0x7fc>)
 80084f6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084f8:	8812      	ldrh	r2, [r2, #0]
 80084fa:	b292      	uxth	r2, r2
 80084fc:	9202      	str	r2, [sp, #8]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	4b1a      	ldr	r3, [pc, #104]	; (800856c <tcp_input+0x80c>)
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <tcp_input+0x810>)
 8008506:	4602      	mov	r2, r0
 8008508:	2000      	movs	r0, #0
 800850a:	f003 fc7d 	bl	800be08 <tcp_rst>
    pbuf_free(p);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fd fb5e 	bl	8005bd0 <pbuf_free>
  return;
 8008514:	e00c      	b.n	8008530 <tcp_input+0x7d0>
    goto dropped;
 8008516:	bf00      	nop
 8008518:	e006      	b.n	8008528 <tcp_input+0x7c8>
    goto dropped;
 800851a:	bf00      	nop
 800851c:	e004      	b.n	8008528 <tcp_input+0x7c8>
    goto dropped;
 800851e:	bf00      	nop
 8008520:	e002      	b.n	8008528 <tcp_input+0x7c8>
      goto dropped;
 8008522:	bf00      	nop
 8008524:	e000      	b.n	8008528 <tcp_input+0x7c8>
      goto dropped;
 8008526:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fd fb51 	bl	8005bd0 <pbuf_free>
 800852e:	e000      	b.n	8008532 <tcp_input+0x7d2>
  return;
 8008530:	bf00      	nop
}
 8008532:	3724      	adds	r7, #36	; 0x24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd90      	pop	{r4, r7, pc}
 8008538:	20008ac8 	.word	0x20008ac8
 800853c:	20000105 	.word	0x20000105
 8008540:	20008ab4 	.word	0x20008ab4
 8008544:	20000100 	.word	0x20000100
 8008548:	20000108 	.word	0x20000108
 800854c:	08011534 	.word	0x08011534
 8008550:	080116e8 	.word	0x080116e8
 8008554:	08011580 	.word	0x08011580
 8008558:	200000d8 	.word	0x200000d8
 800855c:	200000e8 	.word	0x200000e8
 8008560:	200000fc 	.word	0x200000fc
 8008564:	20000102 	.word	0x20000102
 8008568:	200000f8 	.word	0x200000f8
 800856c:	200033c0 	.word	0x200033c0
 8008570:	200033c4 	.word	0x200033c4

08008574 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <tcp_input_delayed_close+0x1c>
 8008582:	4b17      	ldr	r3, [pc, #92]	; (80085e0 <tcp_input_delayed_close+0x6c>)
 8008584:	f240 225a 	movw	r2, #602	; 0x25a
 8008588:	4916      	ldr	r1, [pc, #88]	; (80085e4 <tcp_input_delayed_close+0x70>)
 800858a:	4817      	ldr	r0, [pc, #92]	; (80085e8 <tcp_input_delayed_close+0x74>)
 800858c:	f006 fcb6 	bl	800eefc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008590:	4b16      	ldr	r3, [pc, #88]	; (80085ec <tcp_input_delayed_close+0x78>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01c      	beq.n	80085d6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8b5b      	ldrh	r3, [r3, #26]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10d      	bne.n	80085c4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d008      	beq.n	80085c4 <tcp_input_delayed_close+0x50>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6912      	ldr	r2, [r2, #16]
 80085bc:	f06f 010e 	mvn.w	r1, #14
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	480a      	ldr	r0, [pc, #40]	; (80085f0 <tcp_input_delayed_close+0x7c>)
 80085c8:	f7ff fa52 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7fd fe31 	bl	8006234 <tcp_free>
    return 1;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	08011534 	.word	0x08011534
 80085e4:	08011704 	.word	0x08011704
 80085e8:	08011580 	.word	0x08011580
 80085ec:	20000105 	.word	0x20000105
 80085f0:	20008ab4 	.word	0x20008ab4

080085f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b08b      	sub	sp, #44	; 0x2c
 80085f8:	af04      	add	r7, sp, #16
 80085fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80085fc:	4b6f      	ldr	r3, [pc, #444]	; (80087bc <tcp_listen_input+0x1c8>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 80d2 	bne.w	80087ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <tcp_listen_input+0x2a>
 8008610:	4b6b      	ldr	r3, [pc, #428]	; (80087c0 <tcp_listen_input+0x1cc>)
 8008612:	f240 2281 	movw	r2, #641	; 0x281
 8008616:	496b      	ldr	r1, [pc, #428]	; (80087c4 <tcp_listen_input+0x1d0>)
 8008618:	486b      	ldr	r0, [pc, #428]	; (80087c8 <tcp_listen_input+0x1d4>)
 800861a:	f006 fc6f 	bl	800eefc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800861e:	4b67      	ldr	r3, [pc, #412]	; (80087bc <tcp_listen_input+0x1c8>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d019      	beq.n	800865e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800862a:	4b68      	ldr	r3, [pc, #416]	; (80087cc <tcp_listen_input+0x1d8>)
 800862c:	6819      	ldr	r1, [r3, #0]
 800862e:	4b68      	ldr	r3, [pc, #416]	; (80087d0 <tcp_listen_input+0x1dc>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	4b67      	ldr	r3, [pc, #412]	; (80087d4 <tcp_listen_input+0x1e0>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800863a:	4b67      	ldr	r3, [pc, #412]	; (80087d8 <tcp_listen_input+0x1e4>)
 800863c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008642:	4a65      	ldr	r2, [pc, #404]	; (80087d8 <tcp_listen_input+0x1e4>)
 8008644:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008646:	8812      	ldrh	r2, [r2, #0]
 8008648:	b292      	uxth	r2, r2
 800864a:	9202      	str	r2, [sp, #8]
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	4b63      	ldr	r3, [pc, #396]	; (80087dc <tcp_listen_input+0x1e8>)
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4b63      	ldr	r3, [pc, #396]	; (80087e0 <tcp_listen_input+0x1ec>)
 8008654:	4602      	mov	r2, r0
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f003 fbd6 	bl	800be08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800865c:	e0a9      	b.n	80087b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800865e:	4b57      	ldr	r3, [pc, #348]	; (80087bc <tcp_listen_input+0x1c8>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 80a3 	beq.w	80087b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7d5b      	ldrb	r3, [r3, #21]
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff f879 	bl	8007768 <tcp_alloc>
 8008676:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d111      	bne.n	80086a2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <tcp_listen_input+0xa8>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6910      	ldr	r0, [r2, #16]
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	2100      	movs	r1, #0
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]
      return;
 800869a:	e08b      	b.n	80087b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800869c:	23f0      	movs	r3, #240	; 0xf0
 800869e:	73bb      	strb	r3, [r7, #14]
      return;
 80086a0:	e088      	b.n	80087b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80086a2:	4b50      	ldr	r3, [pc, #320]	; (80087e4 <tcp_listen_input+0x1f0>)
 80086a4:	695a      	ldr	r2, [r3, #20]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80086aa:	4b4e      	ldr	r3, [pc, #312]	; (80087e4 <tcp_listen_input+0x1f0>)
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8ada      	ldrh	r2, [r3, #22]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80086ba:	4b47      	ldr	r3, [pc, #284]	; (80087d8 <tcp_listen_input+0x1e4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2203      	movs	r2, #3
 80086ca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80086cc:	4b41      	ldr	r3, [pc, #260]	; (80087d4 <tcp_listen_input+0x1e0>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	f7ff fa5a 	bl	8007b98 <tcp_next_iss>
 80086e4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80086fe:	4b35      	ldr	r3, [pc, #212]	; (80087d4 <tcp_listen_input+0x1e0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7a5b      	ldrb	r3, [r3, #9]
 800871a:	f003 030c 	and.w	r3, r3, #12
 800871e:	b2da      	uxtb	r2, r3
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	7a1a      	ldrb	r2, [r3, #8]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800872c:	4b2e      	ldr	r3, [pc, #184]	; (80087e8 <tcp_listen_input+0x1f4>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	60da      	str	r2, [r3, #12]
 8008734:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <tcp_listen_input+0x1f4>)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	f003 fd27 	bl	800c18c <tcp_timer_needed>
 800873e:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <tcp_listen_input+0x1f8>)
 8008740:	2201      	movs	r2, #1
 8008742:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f001 fd8d 	bl	800a264 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800874a:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <tcp_listen_input+0x1e4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	89db      	ldrh	r3, [r3, #14]
 8008750:	b29a      	uxth	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f005 f8eb 	bl	800d948 <ip4_route>
 8008772:	4601      	mov	r1, r0
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	3304      	adds	r3, #4
 8008778:	461a      	mov	r2, r3
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff fa32 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008788:	2112      	movs	r1, #18
 800878a:	6978      	ldr	r0, [r7, #20]
 800878c:	f002 fc9a 	bl	800b0c4 <tcp_enqueue_flags>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800879c:	2100      	movs	r1, #0
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f7fd ff72 	bl	8006688 <tcp_abandon>
      return;
 80087a4:	e006      	b.n	80087b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80087a6:	6978      	ldr	r0, [r7, #20]
 80087a8:	f002 fd7a 	bl	800b2a0 <tcp_output>
  return;
 80087ac:	e001      	b.n	80087b2 <tcp_listen_input+0x1be>
    return;
 80087ae:	bf00      	nop
 80087b0:	e000      	b.n	80087b4 <tcp_listen_input+0x1c0>
  return;
 80087b2:	bf00      	nop
}
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd90      	pop	{r4, r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000104 	.word	0x20000104
 80087c0:	08011534 	.word	0x08011534
 80087c4:	0801172c 	.word	0x0801172c
 80087c8:	08011580 	.word	0x08011580
 80087cc:	200000fc 	.word	0x200000fc
 80087d0:	20000102 	.word	0x20000102
 80087d4:	200000f8 	.word	0x200000f8
 80087d8:	200000e8 	.word	0x200000e8
 80087dc:	200033c0 	.word	0x200033c0
 80087e0:	200033c4 	.word	0x200033c4
 80087e4:	200033b0 	.word	0x200033b0
 80087e8:	20008ab4 	.word	0x20008ab4
 80087ec:	20008ab0 	.word	0x20008ab0

080087f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80087f8:	4b2f      	ldr	r3, [pc, #188]	; (80088b8 <tcp_timewait_input+0xc8>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d153      	bne.n	80088ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <tcp_timewait_input+0x28>
 800880a:	4b2c      	ldr	r3, [pc, #176]	; (80088bc <tcp_timewait_input+0xcc>)
 800880c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008810:	492b      	ldr	r1, [pc, #172]	; (80088c0 <tcp_timewait_input+0xd0>)
 8008812:	482c      	ldr	r0, [pc, #176]	; (80088c4 <tcp_timewait_input+0xd4>)
 8008814:	f006 fb72 	bl	800eefc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008818:	4b27      	ldr	r3, [pc, #156]	; (80088b8 <tcp_timewait_input+0xc8>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d02a      	beq.n	800887a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008824:	4b28      	ldr	r3, [pc, #160]	; (80088c8 <tcp_timewait_input+0xd8>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	db2d      	blt.n	800888e <tcp_timewait_input+0x9e>
 8008832:	4b25      	ldr	r3, [pc, #148]	; (80088c8 <tcp_timewait_input+0xd8>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800883e:	440b      	add	r3, r1
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	dc23      	bgt.n	800888e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008846:	4b21      	ldr	r3, [pc, #132]	; (80088cc <tcp_timewait_input+0xdc>)
 8008848:	6819      	ldr	r1, [r3, #0]
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <tcp_timewait_input+0xe0>)
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <tcp_timewait_input+0xd8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008856:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <tcp_timewait_input+0xe4>)
 8008858:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800885e:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <tcp_timewait_input+0xe4>)
 8008860:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008862:	8812      	ldrh	r2, [r2, #0]
 8008864:	b292      	uxth	r2, r2
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <tcp_timewait_input+0xe8>)
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	4b1b      	ldr	r3, [pc, #108]	; (80088dc <tcp_timewait_input+0xec>)
 8008870:	4602      	mov	r2, r0
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f003 fac8 	bl	800be08 <tcp_rst>
      return;
 8008878:	e01b      	b.n	80088b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800887a:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <tcp_timewait_input+0xc8>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008886:	4b16      	ldr	r3, [pc, #88]	; (80088e0 <tcp_timewait_input+0xf0>)
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <tcp_timewait_input+0xe0>)
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00c      	beq.n	80088b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	8b5b      	ldrh	r3, [r3, #26]
 800889a:	f043 0302 	orr.w	r3, r3, #2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 fcfb 	bl	800b2a0 <tcp_output>
  }
  return;
 80088aa:	e001      	b.n	80088b0 <tcp_timewait_input+0xc0>
    return;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <tcp_timewait_input+0xc2>
  return;
 80088b0:	bf00      	nop
}
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000104 	.word	0x20000104
 80088bc:	08011534 	.word	0x08011534
 80088c0:	0801174c 	.word	0x0801174c
 80088c4:	08011580 	.word	0x08011580
 80088c8:	200000f8 	.word	0x200000f8
 80088cc:	200000fc 	.word	0x200000fc
 80088d0:	20000102 	.word	0x20000102
 80088d4:	200000e8 	.word	0x200000e8
 80088d8:	200033c0 	.word	0x200033c0
 80088dc:	200033c4 	.word	0x200033c4
 80088e0:	20008ab8 	.word	0x20008ab8

080088e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b08d      	sub	sp, #52	; 0x34
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <tcp_process+0x24>
 80088fa:	4ba5      	ldr	r3, [pc, #660]	; (8008b90 <tcp_process+0x2ac>)
 80088fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008900:	49a4      	ldr	r1, [pc, #656]	; (8008b94 <tcp_process+0x2b0>)
 8008902:	48a5      	ldr	r0, [pc, #660]	; (8008b98 <tcp_process+0x2b4>)
 8008904:	f006 fafa 	bl	800eefc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008908:	4ba4      	ldr	r3, [pc, #656]	; (8008b9c <tcp_process+0x2b8>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d04e      	beq.n	80089b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7d1b      	ldrb	r3, [r3, #20]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d108      	bne.n	800892e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008920:	4b9f      	ldr	r3, [pc, #636]	; (8008ba0 <tcp_process+0x2bc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d123      	bne.n	8008970 <tcp_process+0x8c>
        acceptable = 1;
 8008928:	2301      	movs	r3, #1
 800892a:	76fb      	strb	r3, [r7, #27]
 800892c:	e020      	b.n	8008970 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008932:	4b9c      	ldr	r3, [pc, #624]	; (8008ba4 <tcp_process+0x2c0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d102      	bne.n	8008940 <tcp_process+0x5c>
        acceptable = 1;
 800893a:	2301      	movs	r3, #1
 800893c:	76fb      	strb	r3, [r7, #27]
 800893e:	e017      	b.n	8008970 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008940:	4b98      	ldr	r3, [pc, #608]	; (8008ba4 <tcp_process+0x2c0>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	db10      	blt.n	8008970 <tcp_process+0x8c>
 800894e:	4b95      	ldr	r3, [pc, #596]	; (8008ba4 <tcp_process+0x2c0>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800895a:	440b      	add	r3, r1
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	dc06      	bgt.n	8008970 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	8b5b      	ldrh	r3, [r3, #26]
 8008966:	f043 0302 	orr.w	r3, r3, #2
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008970:	7efb      	ldrb	r3, [r7, #27]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d01b      	beq.n	80089ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7d1b      	ldrb	r3, [r3, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <tcp_process+0xa8>
 800897e:	4b84      	ldr	r3, [pc, #528]	; (8008b90 <tcp_process+0x2ac>)
 8008980:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008984:	4988      	ldr	r1, [pc, #544]	; (8008ba8 <tcp_process+0x2c4>)
 8008986:	4884      	ldr	r0, [pc, #528]	; (8008b98 <tcp_process+0x2b4>)
 8008988:	f006 fab8 	bl	800eefc <iprintf>
      recv_flags |= TF_RESET;
 800898c:	4b87      	ldr	r3, [pc, #540]	; (8008bac <tcp_process+0x2c8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f043 0308 	orr.w	r3, r3, #8
 8008994:	b2da      	uxtb	r2, r3
 8008996:	4b85      	ldr	r3, [pc, #532]	; (8008bac <tcp_process+0x2c8>)
 8008998:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8b5b      	ldrh	r3, [r3, #26]
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80089a8:	f06f 030d 	mvn.w	r3, #13
 80089ac:	e37a      	b.n	80090a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e378      	b.n	80090a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80089b2:	4b7a      	ldr	r3, [pc, #488]	; (8008b9c <tcp_process+0x2b8>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d010      	beq.n	80089e0 <tcp_process+0xfc>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7d1b      	ldrb	r3, [r3, #20]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d00c      	beq.n	80089e0 <tcp_process+0xfc>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7d1b      	ldrb	r3, [r3, #20]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d008      	beq.n	80089e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	8b5b      	ldrh	r3, [r3, #26]
 80089d2:	f043 0302 	orr.w	r3, r3, #2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e361      	b.n	80090a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8b5b      	ldrh	r3, [r3, #26]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80089ec:	4b70      	ldr	r3, [pc, #448]	; (8008bb0 <tcp_process+0x2cc>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 fc2d 	bl	800a264 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7d1b      	ldrb	r3, [r3, #20]
 8008a0e:	3b02      	subs	r3, #2
 8008a10:	2b07      	cmp	r3, #7
 8008a12:	f200 8337 	bhi.w	8009084 <tcp_process+0x7a0>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <tcp_process+0x138>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a3d 	.word	0x08008a3d
 8008a20:	08008c6d 	.word	0x08008c6d
 8008a24:	08008de5 	.word	0x08008de5
 8008a28:	08008e0f 	.word	0x08008e0f
 8008a2c:	08008f33 	.word	0x08008f33
 8008a30:	08008de5 	.word	0x08008de5
 8008a34:	08008fbf 	.word	0x08008fbf
 8008a38:	0800904f 	.word	0x0800904f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008a3c:	4b57      	ldr	r3, [pc, #348]	; (8008b9c <tcp_process+0x2b8>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80e4 	beq.w	8008c12 <tcp_process+0x32e>
 8008a4a:	4b54      	ldr	r3, [pc, #336]	; (8008b9c <tcp_process+0x2b8>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 80dd 	beq.w	8008c12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	4b50      	ldr	r3, [pc, #320]	; (8008ba0 <tcp_process+0x2bc>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	f040 80d5 	bne.w	8008c12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008a68:	4b4e      	ldr	r3, [pc, #312]	; (8008ba4 <tcp_process+0x2c0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008a7a:	4b49      	ldr	r3, [pc, #292]	; (8008ba0 <tcp_process+0x2bc>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008a82:	4b4c      	ldr	r3, [pc, #304]	; (8008bb4 <tcp_process+0x2d0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	89db      	ldrh	r3, [r3, #14]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008a9c:	4b41      	ldr	r3, [pc, #260]	; (8008ba4 <tcp_process+0x2c0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f004 ff47 	bl	800d948 <ip4_route>
 8008aba:	4601      	mov	r1, r0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f7ff f88e 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ad4:	009a      	lsls	r2, r3, #2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf38      	it	cc
 8008ae4:	460b      	movcc	r3, r1
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d204      	bcs.n	8008af4 <tcp_process+0x210>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	e00d      	b.n	8008b10 <tcp_process+0x22c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	f241 121c 	movw	r2, #4380	; 0x111c
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d904      	bls.n	8008b0c <tcp_process+0x228>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	e001      	b.n	8008b10 <tcp_process+0x22c>
 8008b0c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <tcp_process+0x24a>
 8008b20:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <tcp_process+0x2ac>)
 8008b22:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008b26:	4924      	ldr	r1, [pc, #144]	; (8008bb8 <tcp_process+0x2d4>)
 8008b28:	481b      	ldr	r0, [pc, #108]	; (8008b98 <tcp_process+0x2b4>)
 8008b2a:	f006 f9e7 	bl	800eefc <iprintf>
        --pcb->snd_queuelen;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d111      	bne.n	8008b6e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <tcp_process+0x280>
 8008b56:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <tcp_process+0x2ac>)
 8008b58:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008b5c:	4917      	ldr	r1, [pc, #92]	; (8008bbc <tcp_process+0x2d8>)
 8008b5e:	480e      	ldr	r0, [pc, #56]	; (8008b98 <tcp_process+0x2b4>)
 8008b60:	f006 f9cc 	bl	800eefc <iprintf>
          pcb->unsent = rseg->next;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b6c:	e003      	b.n	8008b76 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008b76:	69f8      	ldr	r0, [r7, #28]
 8008b78:	f7fe fc8d 	bl	8007496 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d11d      	bne.n	8008bc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b8a:	861a      	strh	r2, [r3, #48]	; 0x30
 8008b8c:	e01f      	b.n	8008bce <tcp_process+0x2ea>
 8008b8e:	bf00      	nop
 8008b90:	08011534 	.word	0x08011534
 8008b94:	0801176c 	.word	0x0801176c
 8008b98:	08011580 	.word	0x08011580
 8008b9c:	20000104 	.word	0x20000104
 8008ba0:	200000fc 	.word	0x200000fc
 8008ba4:	200000f8 	.word	0x200000f8
 8008ba8:	08011788 	.word	0x08011788
 8008bac:	20000105 	.word	0x20000105
 8008bb0:	20008ab8 	.word	0x20008ab8
 8008bb4:	200000e8 	.word	0x200000e8
 8008bb8:	080117a8 	.word	0x080117a8
 8008bbc:	080117c0 	.word	0x080117c0
        } else {
          pcb->rtime = 0;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <tcp_process+0x30a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6910      	ldr	r0, [r2, #16]
 8008be2:	2200      	movs	r2, #0
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4798      	blx	r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	76bb      	strb	r3, [r7, #26]
 8008bec:	e001      	b.n	8008bf2 <tcp_process+0x30e>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008bf2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bf6:	f113 0f0d 	cmn.w	r3, #13
 8008bfa:	d102      	bne.n	8008c02 <tcp_process+0x31e>
          return ERR_ABRT;
 8008bfc:	f06f 030c 	mvn.w	r3, #12
 8008c00:	e250      	b.n	80090a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8b5b      	ldrh	r3, [r3, #26]
 8008c06:	f043 0302 	orr.w	r3, r3, #2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008c10:	e23a      	b.n	8009088 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008c12:	4b9d      	ldr	r3, [pc, #628]	; (8008e88 <tcp_process+0x5a4>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 8234 	beq.w	8009088 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c20:	4b9a      	ldr	r3, [pc, #616]	; (8008e8c <tcp_process+0x5a8>)
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	4b9a      	ldr	r3, [pc, #616]	; (8008e90 <tcp_process+0x5ac>)
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b9a      	ldr	r3, [pc, #616]	; (8008e94 <tcp_process+0x5b0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c30:	4b99      	ldr	r3, [pc, #612]	; (8008e98 <tcp_process+0x5b4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c38:	4a97      	ldr	r2, [pc, #604]	; (8008e98 <tcp_process+0x5b4>)
 8008c3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c3c:	8812      	ldrh	r2, [r2, #0]
 8008c3e:	b292      	uxth	r2, r2
 8008c40:	9202      	str	r2, [sp, #8]
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	4b95      	ldr	r3, [pc, #596]	; (8008e9c <tcp_process+0x5b8>)
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	4b95      	ldr	r3, [pc, #596]	; (8008ea0 <tcp_process+0x5bc>)
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f003 f8db 	bl	800be08 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	f200 8215 	bhi.w	8009088 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f002 fea5 	bl	800b9b4 <tcp_rexmit_rto>
      break;
 8008c6a:	e20d      	b.n	8009088 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008c6c:	4b86      	ldr	r3, [pc, #536]	; (8008e88 <tcp_process+0x5a4>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80a1 	beq.w	8008dbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c7a:	4b84      	ldr	r3, [pc, #528]	; (8008e8c <tcp_process+0x5a8>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	db7e      	blt.n	8008d88 <tcp_process+0x4a4>
 8008c8a:	4b80      	ldr	r3, [pc, #512]	; (8008e8c <tcp_process+0x5a8>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc77      	bgt.n	8008d88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d102      	bne.n	8008cac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008ca6:	23fa      	movs	r3, #250	; 0xfa
 8008ca8:	76bb      	strb	r3, [r7, #26]
 8008caa:	e01d      	b.n	8008ce8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <tcp_process+0x3e0>
 8008cb6:	4b7b      	ldr	r3, [pc, #492]	; (8008ea4 <tcp_process+0x5c0>)
 8008cb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008cbc:	497a      	ldr	r1, [pc, #488]	; (8008ea8 <tcp_process+0x5c4>)
 8008cbe:	487b      	ldr	r0, [pc, #492]	; (8008eac <tcp_process+0x5c8>)
 8008cc0:	f006 f91c 	bl	800eefc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <tcp_process+0x400>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6910      	ldr	r0, [r2, #16]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	76bb      	strb	r3, [r7, #26]
 8008ce2:	e001      	b.n	8008ce8 <tcp_process+0x404>
 8008ce4:	23f0      	movs	r3, #240	; 0xf0
 8008ce6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008ce8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008cf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cf4:	f113 0f0d 	cmn.w	r3, #13
 8008cf8:	d002      	beq.n	8008d00 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fd fd82 	bl	8006804 <tcp_abort>
            }
            return ERR_ABRT;
 8008d00:	f06f 030c 	mvn.w	r3, #12
 8008d04:	e1ce      	b.n	80090a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fae0 	bl	80092cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008d0c:	4b68      	ldr	r3, [pc, #416]	; (8008eb0 <tcp_process+0x5cc>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <tcp_process+0x43c>
            recv_acked--;
 8008d14:	4b66      	ldr	r3, [pc, #408]	; (8008eb0 <tcp_process+0x5cc>)
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	4b64      	ldr	r3, [pc, #400]	; (8008eb0 <tcp_process+0x5cc>)
 8008d1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d24:	009a      	lsls	r2, r3, #2
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008d30:	428b      	cmp	r3, r1
 8008d32:	bf38      	it	cc
 8008d34:	460b      	movcc	r3, r1
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d204      	bcs.n	8008d44 <tcp_process+0x460>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	e00d      	b.n	8008d60 <tcp_process+0x47c>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d904      	bls.n	8008d5c <tcp_process+0x478>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	e001      	b.n	8008d60 <tcp_process+0x47c>
 8008d5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008d66:	4b53      	ldr	r3, [pc, #332]	; (8008eb4 <tcp_process+0x5d0>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d037      	beq.n	8008de2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8b5b      	ldrh	r3, [r3, #26]
 8008d76:	f043 0302 	orr.w	r3, r3, #2
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2207      	movs	r2, #7
 8008d84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008d86:	e02c      	b.n	8008de2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d88:	4b40      	ldr	r3, [pc, #256]	; (8008e8c <tcp_process+0x5a8>)
 8008d8a:	6819      	ldr	r1, [r3, #0]
 8008d8c:	4b40      	ldr	r3, [pc, #256]	; (8008e90 <tcp_process+0x5ac>)
 8008d8e:	881b      	ldrh	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	4b40      	ldr	r3, [pc, #256]	; (8008e94 <tcp_process+0x5b0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d98:	4b3f      	ldr	r3, [pc, #252]	; (8008e98 <tcp_process+0x5b4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008da0:	4a3d      	ldr	r2, [pc, #244]	; (8008e98 <tcp_process+0x5b4>)
 8008da2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008da4:	8812      	ldrh	r2, [r2, #0]
 8008da6:	b292      	uxth	r2, r2
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	4b3b      	ldr	r3, [pc, #236]	; (8008e9c <tcp_process+0x5b8>)
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	4b3b      	ldr	r3, [pc, #236]	; (8008ea0 <tcp_process+0x5bc>)
 8008db2:	4602      	mov	r2, r0
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f003 f827 	bl	800be08 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008dba:	e167      	b.n	800908c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008dbc:	4b32      	ldr	r3, [pc, #200]	; (8008e88 <tcp_process+0x5a4>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8161 	beq.w	800908c <tcp_process+0x7a8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	1e5a      	subs	r2, r3, #1
 8008dd0:	4b30      	ldr	r3, [pc, #192]	; (8008e94 <tcp_process+0x5b0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	f040 8159 	bne.w	800908c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f002 fe0c 	bl	800b9f8 <tcp_rexmit>
      break;
 8008de0:	e154      	b.n	800908c <tcp_process+0x7a8>
 8008de2:	e153      	b.n	800908c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa71 	bl	80092cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008dea:	4b32      	ldr	r3, [pc, #200]	; (8008eb4 <tcp_process+0x5d0>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 814c 	beq.w	8009090 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8b5b      	ldrh	r3, [r3, #26]
 8008dfc:	f043 0302 	orr.w	r3, r3, #2
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2207      	movs	r2, #7
 8008e0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008e0c:	e140      	b.n	8009090 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa5c 	bl	80092cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008e14:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <tcp_process+0x5d0>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d071      	beq.n	8008f04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e20:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <tcp_process+0x5a4>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d060      	beq.n	8008eee <tcp_process+0x60a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e30:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <tcp_process+0x5a8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d15a      	bne.n	8008eee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d156      	bne.n	8008eee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8b5b      	ldrh	r3, [r3, #26]
 8008e44:	f043 0302 	orr.w	r3, r3, #2
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fe fdbe 	bl	80079d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008e54:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <tcp_process+0x5d4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d105      	bne.n	8008e6a <tcp_process+0x586>
 8008e5e:	4b16      	ldr	r3, [pc, #88]	; (8008eb8 <tcp_process+0x5d4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <tcp_process+0x5d4>)
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	e02e      	b.n	8008ec8 <tcp_process+0x5e4>
 8008e6a:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <tcp_process+0x5d4>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	e027      	b.n	8008ec2 <tcp_process+0x5de>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d11f      	bne.n	8008ebc <tcp_process+0x5d8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	e020      	b.n	8008ec8 <tcp_process+0x5e4>
 8008e86:	bf00      	nop
 8008e88:	20000104 	.word	0x20000104
 8008e8c:	200000fc 	.word	0x200000fc
 8008e90:	20000102 	.word	0x20000102
 8008e94:	200000f8 	.word	0x200000f8
 8008e98:	200000e8 	.word	0x200000e8
 8008e9c:	200033c0 	.word	0x200033c0
 8008ea0:	200033c4 	.word	0x200033c4
 8008ea4:	08011534 	.word	0x08011534
 8008ea8:	080117d4 	.word	0x080117d4
 8008eac:	08011580 	.word	0x08011580
 8008eb0:	20000100 	.word	0x20000100
 8008eb4:	20000105 	.word	0x20000105
 8008eb8:	20008ab4 	.word	0x20008ab4
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1d4      	bne.n	8008e72 <tcp_process+0x58e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	4b77      	ldr	r3, [pc, #476]	; (80090ac <tcp_process+0x7c8>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	220a      	movs	r2, #10
 8008ed8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008eda:	4b75      	ldr	r3, [pc, #468]	; (80090b0 <tcp_process+0x7cc>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	4a73      	ldr	r2, [pc, #460]	; (80090b0 <tcp_process+0x7cc>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	f003 f950 	bl	800c18c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008eec:	e0d2      	b.n	8009094 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8b5b      	ldrh	r3, [r3, #26]
 8008ef2:	f043 0302 	orr.w	r3, r3, #2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2208      	movs	r2, #8
 8008f00:	751a      	strb	r2, [r3, #20]
      break;
 8008f02:	e0c7      	b.n	8009094 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f04:	4b6b      	ldr	r3, [pc, #428]	; (80090b4 <tcp_process+0x7d0>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80c1 	beq.w	8009094 <tcp_process+0x7b0>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f16:	4b68      	ldr	r3, [pc, #416]	; (80090b8 <tcp_process+0x7d4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	f040 80ba 	bne.w	8009094 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 80b5 	bne.w	8009094 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2206      	movs	r2, #6
 8008f2e:	751a      	strb	r2, [r3, #20]
      break;
 8008f30:	e0b0      	b.n	8009094 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9ca 	bl	80092cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f38:	4b60      	ldr	r3, [pc, #384]	; (80090bc <tcp_process+0x7d8>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a9 	beq.w	8009098 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	8b5b      	ldrh	r3, [r3, #26]
 8008f4a:	f043 0302 	orr.w	r3, r3, #2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fe fd3b 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008f5a:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <tcp_process+0x7dc>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d105      	bne.n	8008f70 <tcp_process+0x68c>
 8008f64:	4b56      	ldr	r3, [pc, #344]	; (80090c0 <tcp_process+0x7dc>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	4a55      	ldr	r2, [pc, #340]	; (80090c0 <tcp_process+0x7dc>)
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	e013      	b.n	8008f98 <tcp_process+0x6b4>
 8008f70:	4b53      	ldr	r3, [pc, #332]	; (80090c0 <tcp_process+0x7dc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	e00c      	b.n	8008f92 <tcp_process+0x6ae>
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d104      	bne.n	8008f8c <tcp_process+0x6a8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	60da      	str	r2, [r3, #12]
 8008f8a:	e005      	b.n	8008f98 <tcp_process+0x6b4>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ef      	bne.n	8008f78 <tcp_process+0x694>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	60da      	str	r2, [r3, #12]
 8008f9e:	4b43      	ldr	r3, [pc, #268]	; (80090ac <tcp_process+0x7c8>)
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	220a      	movs	r2, #10
 8008fa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008faa:	4b41      	ldr	r3, [pc, #260]	; (80090b0 <tcp_process+0x7cc>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	4a3f      	ldr	r2, [pc, #252]	; (80090b0 <tcp_process+0x7cc>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	f003 f8e8 	bl	800c18c <tcp_timer_needed>
      }
      break;
 8008fbc:	e06c      	b.n	8009098 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f984 	bl	80092cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008fc4:	4b3b      	ldr	r3, [pc, #236]	; (80090b4 <tcp_process+0x7d0>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d065      	beq.n	800909c <tcp_process+0x7b8>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd4:	4b38      	ldr	r3, [pc, #224]	; (80090b8 <tcp_process+0x7d4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d15f      	bne.n	800909c <tcp_process+0x7b8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d15b      	bne.n	800909c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fe fcf3 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008fea:	4b35      	ldr	r3, [pc, #212]	; (80090c0 <tcp_process+0x7dc>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d105      	bne.n	8009000 <tcp_process+0x71c>
 8008ff4:	4b32      	ldr	r3, [pc, #200]	; (80090c0 <tcp_process+0x7dc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4a31      	ldr	r2, [pc, #196]	; (80090c0 <tcp_process+0x7dc>)
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e013      	b.n	8009028 <tcp_process+0x744>
 8009000:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <tcp_process+0x7dc>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e00c      	b.n	8009022 <tcp_process+0x73e>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	d104      	bne.n	800901c <tcp_process+0x738>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60da      	str	r2, [r3, #12]
 800901a:	e005      	b.n	8009028 <tcp_process+0x744>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1ef      	bne.n	8009008 <tcp_process+0x724>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	4b1f      	ldr	r3, [pc, #124]	; (80090ac <tcp_process+0x7c8>)
 8009030:	2201      	movs	r2, #1
 8009032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	220a      	movs	r2, #10
 8009038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <tcp_process+0x7cc>)
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <tcp_process+0x7cc>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f003 f8a0 	bl	800c18c <tcp_timer_needed>
      }
      break;
 800904c:	e026      	b.n	800909c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f93c 	bl	80092cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009054:	4b17      	ldr	r3, [pc, #92]	; (80090b4 <tcp_process+0x7d0>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01f      	beq.n	80090a0 <tcp_process+0x7bc>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009064:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <tcp_process+0x7d4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d119      	bne.n	80090a0 <tcp_process+0x7bc>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d115      	bne.n	80090a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009074:	4b11      	ldr	r3, [pc, #68]	; (80090bc <tcp_process+0x7d8>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f043 0310 	orr.w	r3, r3, #16
 800907c:	b2da      	uxtb	r2, r3
 800907e:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <tcp_process+0x7d8>)
 8009080:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009082:	e00d      	b.n	80090a0 <tcp_process+0x7bc>
    default:
      break;
 8009084:	bf00      	nop
 8009086:	e00c      	b.n	80090a2 <tcp_process+0x7be>
      break;
 8009088:	bf00      	nop
 800908a:	e00a      	b.n	80090a2 <tcp_process+0x7be>
      break;
 800908c:	bf00      	nop
 800908e:	e008      	b.n	80090a2 <tcp_process+0x7be>
      break;
 8009090:	bf00      	nop
 8009092:	e006      	b.n	80090a2 <tcp_process+0x7be>
      break;
 8009094:	bf00      	nop
 8009096:	e004      	b.n	80090a2 <tcp_process+0x7be>
      break;
 8009098:	bf00      	nop
 800909a:	e002      	b.n	80090a2 <tcp_process+0x7be>
      break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <tcp_process+0x7be>
      break;
 80090a0:	bf00      	nop
  }
  return ERR_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3724      	adds	r7, #36	; 0x24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd90      	pop	{r4, r7, pc}
 80090ac:	20008ab0 	.word	0x20008ab0
 80090b0:	20008ac4 	.word	0x20008ac4
 80090b4:	20000104 	.word	0x20000104
 80090b8:	200000fc 	.word	0x200000fc
 80090bc:	20000105 	.word	0x20000105
 80090c0:	20008ab4 	.word	0x20008ab4

080090c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <tcp_oos_insert_segment+0x1e>
 80090d4:	4b3b      	ldr	r3, [pc, #236]	; (80091c4 <tcp_oos_insert_segment+0x100>)
 80090d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80090da:	493b      	ldr	r1, [pc, #236]	; (80091c8 <tcp_oos_insert_segment+0x104>)
 80090dc:	483b      	ldr	r0, [pc, #236]	; (80091cc <tcp_oos_insert_segment+0x108>)
 80090de:	f005 ff0d 	bl	800eefc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	899b      	ldrh	r3, [r3, #12]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fb fabc 	bl	8004668 <lwip_htons>
 80090f0:	4603      	mov	r3, r0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d028      	beq.n	800914e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80090fc:	6838      	ldr	r0, [r7, #0]
 80090fe:	f7fe f9b5 	bl	800746c <tcp_segs_free>
    next = NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	e056      	b.n	80091b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	899b      	ldrh	r3, [r3, #12]
 800910e:	b29b      	uxth	r3, r3
 8009110:	4618      	mov	r0, r3
 8009112:	f7fb faa9 	bl	8004668 <lwip_htons>
 8009116:	4603      	mov	r3, r0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00d      	beq.n	800913e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	899b      	ldrh	r3, [r3, #12]
 8009128:	b29c      	uxth	r4, r3
 800912a:	2001      	movs	r0, #1
 800912c:	f7fb fa9c 	bl	8004668 <lwip_htons>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4322      	orrs	r2, r4
 800913a:	b292      	uxth	r2, r2
 800913c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7fe f9a4 	bl	8007496 <tcp_seg_free>
    while (next &&
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00e      	beq.n	8009172 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	891b      	ldrh	r3, [r3, #8]
 8009158:	461a      	mov	r2, r3
 800915a:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <tcp_oos_insert_segment+0x10c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	441a      	add	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	8909      	ldrh	r1, [r1, #8]
 800916a:	440b      	add	r3, r1
 800916c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800916e:	2b00      	cmp	r3, #0
 8009170:	daca      	bge.n	8009108 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01e      	beq.n	80091b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	891b      	ldrh	r3, [r3, #8]
 800917c:	461a      	mov	r2, r3
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <tcp_oos_insert_segment+0x10c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	441a      	add	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800918c:	2b00      	cmp	r3, #0
 800918e:	dd12      	ble.n	80091b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b29a      	uxth	r2, r3
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <tcp_oos_insert_segment+0x10c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	891b      	ldrh	r3, [r3, #8]
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fc fb87 	bl	80058c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	601a      	str	r2, [r3, #0]
}
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd90      	pop	{r4, r7, pc}
 80091c4:	08011534 	.word	0x08011534
 80091c8:	080117f4 	.word	0x080117f4
 80091cc:	08011580 	.word	0x08011580
 80091d0:	200000f8 	.word	0x200000f8

080091d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80091d4:	b5b0      	push	{r4, r5, r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80091e2:	e03e      	b.n	8009262 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fc fd74 	bl	8005ce0 <pbuf_clen>
 80091f8:	4603      	mov	r3, r0
 80091fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009202:	8a7a      	ldrh	r2, [r7, #18]
 8009204:	429a      	cmp	r2, r3
 8009206:	d906      	bls.n	8009216 <tcp_free_acked_segments+0x42>
 8009208:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <tcp_free_acked_segments+0xe0>)
 800920a:	f240 4257 	movw	r2, #1111	; 0x457
 800920e:	492a      	ldr	r1, [pc, #168]	; (80092b8 <tcp_free_acked_segments+0xe4>)
 8009210:	482a      	ldr	r0, [pc, #168]	; (80092bc <tcp_free_acked_segments+0xe8>)
 8009212:	f005 fe73 	bl	800eefc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800921c:	8a7b      	ldrh	r3, [r7, #18]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	891a      	ldrh	r2, [r3, #8]
 800922c:	4b24      	ldr	r3, [pc, #144]	; (80092c0 <tcp_free_acked_segments+0xec>)
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	4413      	add	r3, r2
 8009232:	b29a      	uxth	r2, r3
 8009234:	4b22      	ldr	r3, [pc, #136]	; (80092c0 <tcp_free_acked_segments+0xec>)
 8009236:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009238:	6978      	ldr	r0, [r7, #20]
 800923a:	f7fe f92c 	bl	8007496 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <tcp_free_acked_segments+0x8e>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <tcp_free_acked_segments+0x8e>
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <tcp_free_acked_segments+0xe0>)
 8009256:	f240 4261 	movw	r2, #1121	; 0x461
 800925a:	491a      	ldr	r1, [pc, #104]	; (80092c4 <tcp_free_acked_segments+0xf0>)
 800925c:	4817      	ldr	r0, [pc, #92]	; (80092bc <tcp_free_acked_segments+0xe8>)
 800925e:	f005 fe4d 	bl	800eefc <iprintf>
  while (seg_list != NULL &&
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d020      	beq.n	80092aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	f7fb fa0f 	bl	8004692 <lwip_htonl>
 8009274:	4604      	mov	r4, r0
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	891b      	ldrh	r3, [r3, #8]
 800927a:	461d      	mov	r5, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	899b      	ldrh	r3, [r3, #12]
 8009282:	b29b      	uxth	r3, r3
 8009284:	4618      	mov	r0, r3
 8009286:	f7fb f9ef 	bl	8004668 <lwip_htons>
 800928a:	4603      	mov	r3, r0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <tcp_free_acked_segments+0xc6>
 8009296:	2301      	movs	r3, #1
 8009298:	e000      	b.n	800929c <tcp_free_acked_segments+0xc8>
 800929a:	2300      	movs	r3, #0
 800929c:	442b      	add	r3, r5
 800929e:	18e2      	adds	r2, r4, r3
 80092a0:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <tcp_free_acked_segments+0xf4>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dd9c      	ble.n	80091e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80092aa:	68bb      	ldr	r3, [r7, #8]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bdb0      	pop	{r4, r5, r7, pc}
 80092b4:	08011534 	.word	0x08011534
 80092b8:	0801181c 	.word	0x0801181c
 80092bc:	08011580 	.word	0x08011580
 80092c0:	20000100 	.word	0x20000100
 80092c4:	08011844 	.word	0x08011844
 80092c8:	200000fc 	.word	0x200000fc

080092cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80092cc:	b5b0      	push	{r4, r5, r7, lr}
 80092ce:	b094      	sub	sp, #80	; 0x50
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d106      	bne.n	80092ec <tcp_receive+0x20>
 80092de:	4ba6      	ldr	r3, [pc, #664]	; (8009578 <tcp_receive+0x2ac>)
 80092e0:	f240 427b 	movw	r2, #1147	; 0x47b
 80092e4:	49a5      	ldr	r1, [pc, #660]	; (800957c <tcp_receive+0x2b0>)
 80092e6:	48a6      	ldr	r0, [pc, #664]	; (8009580 <tcp_receive+0x2b4>)
 80092e8:	f005 fe08 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d806      	bhi.n	8009302 <tcp_receive+0x36>
 80092f4:	4ba0      	ldr	r3, [pc, #640]	; (8009578 <tcp_receive+0x2ac>)
 80092f6:	f240 427c 	movw	r2, #1148	; 0x47c
 80092fa:	49a2      	ldr	r1, [pc, #648]	; (8009584 <tcp_receive+0x2b8>)
 80092fc:	48a0      	ldr	r0, [pc, #640]	; (8009580 <tcp_receive+0x2b4>)
 80092fe:	f005 fdfd 	bl	800eefc <iprintf>

  if (flags & TCP_ACK) {
 8009302:	4ba1      	ldr	r3, [pc, #644]	; (8009588 <tcp_receive+0x2bc>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 0310 	and.w	r3, r3, #16
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8263 	beq.w	80097d6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009316:	461a      	mov	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931c:	4413      	add	r3, r2
 800931e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009324:	4b99      	ldr	r3, [pc, #612]	; (800958c <tcp_receive+0x2c0>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	db1b      	blt.n	8009366 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009332:	4b96      	ldr	r3, [pc, #600]	; (800958c <tcp_receive+0x2c0>)
 8009334:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009336:	429a      	cmp	r2, r3
 8009338:	d106      	bne.n	8009348 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800933e:	4b94      	ldr	r3, [pc, #592]	; (8009590 <tcp_receive+0x2c4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	db0e      	blt.n	8009366 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800934c:	4b90      	ldr	r3, [pc, #576]	; (8009590 <tcp_receive+0x2c4>)
 800934e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009350:	429a      	cmp	r2, r3
 8009352:	d125      	bne.n	80093a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009354:	4b8f      	ldr	r3, [pc, #572]	; (8009594 <tcp_receive+0x2c8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	89db      	ldrh	r3, [r3, #14]
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009362:	429a      	cmp	r2, r3
 8009364:	d91c      	bls.n	80093a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009366:	4b8b      	ldr	r3, [pc, #556]	; (8009594 <tcp_receive+0x2c8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	89db      	ldrh	r3, [r3, #14]
 800936c:	b29a      	uxth	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009380:	429a      	cmp	r2, r3
 8009382:	d205      	bcs.n	8009390 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009390:	4b7e      	ldr	r3, [pc, #504]	; (800958c <tcp_receive+0x2c0>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009398:	4b7d      	ldr	r3, [pc, #500]	; (8009590 <tcp_receive+0x2c4>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80093a0:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <tcp_receive+0x2c4>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc58      	bgt.n	8009460 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80093ae:	4b7a      	ldr	r3, [pc, #488]	; (8009598 <tcp_receive+0x2cc>)
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d14b      	bne.n	800944e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80093c0:	4413      	add	r3, r2
 80093c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d142      	bne.n	800944e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	db3d      	blt.n	800944e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d6:	4b6e      	ldr	r3, [pc, #440]	; (8009590 <tcp_receive+0x2c4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d137      	bne.n	800944e <tcp_receive+0x182>
              found_dupack = 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093e8:	2bff      	cmp	r3, #255	; 0xff
 80093ea:	d007      	beq.n	80093fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093f2:	3301      	adds	r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009402:	2b03      	cmp	r3, #3
 8009404:	d91b      	bls.n	800943e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009410:	4413      	add	r3, r2
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800941a:	429a      	cmp	r2, r3
 800941c:	d30a      	bcc.n	8009434 <tcp_receive+0x168>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009428:	4413      	add	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009432:	e004      	b.n	800943e <tcp_receive+0x172>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800943a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009444:	2b02      	cmp	r3, #2
 8009446:	d902      	bls.n	800944e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f002 fb41 	bl	800bad0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800944e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 8160 	bne.w	8009716 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800945e:	e15a      	b.n	8009716 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009460:	4b4b      	ldr	r3, [pc, #300]	; (8009590 <tcp_receive+0x2c4>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	f2c0 814d 	blt.w	800970c <tcp_receive+0x440>
 8009472:	4b47      	ldr	r3, [pc, #284]	; (8009590 <tcp_receive+0x2c4>)
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	f300 8145 	bgt.w	800970c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8b5b      	ldrh	r3, [r3, #26]
 8009486:	f003 0304 	and.w	r3, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	d010      	beq.n	80094b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	8b5b      	ldrh	r3, [r3, #26]
 8009492:	f023 0304 	bic.w	r3, r3, #4
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094be:	10db      	asrs	r3, r3, #3
 80094c0:	b21b      	sxth	r3, r3
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	b21a      	sxth	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80094d8:	4b2d      	ldr	r3, [pc, #180]	; (8009590 <tcp_receive+0x2c4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <tcp_receive+0x2c4>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	7d1b      	ldrb	r3, [r3, #20]
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	f240 8096 	bls.w	800962e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800950e:	429a      	cmp	r2, r3
 8009510:	d244      	bcs.n	800959c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8b5b      	ldrh	r3, [r3, #26]
 8009516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <tcp_receive+0x256>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <tcp_receive+0x258>
 8009522:	2302      	movs	r3, #2
 8009524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800952c:	b29a      	uxth	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009532:	fb12 f303 	smulbb	r3, r2, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800953a:	4293      	cmp	r3, r2
 800953c:	bf28      	it	cs
 800953e:	4613      	movcs	r3, r2
 8009540:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800954a:	4413      	add	r3, r2
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009554:	429a      	cmp	r2, r3
 8009556:	d309      	bcc.n	800956c <tcp_receive+0x2a0>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800955e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009560:	4413      	add	r3, r2
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800956a:	e060      	b.n	800962e <tcp_receive+0x362>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009576:	e05a      	b.n	800962e <tcp_receive+0x362>
 8009578:	08011534 	.word	0x08011534
 800957c:	08011864 	.word	0x08011864
 8009580:	08011580 	.word	0x08011580
 8009584:	08011880 	.word	0x08011880
 8009588:	20000104 	.word	0x20000104
 800958c:	200000f8 	.word	0x200000f8
 8009590:	200000fc 	.word	0x200000fc
 8009594:	200000e8 	.word	0x200000e8
 8009598:	20000102 	.word	0x20000102
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095a4:	4413      	add	r3, r2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d309      	bcc.n	80095c6 <tcp_receive+0x2fa>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095ba:	4413      	add	r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80095c4:	e004      	b.n	80095d0 <tcp_receive+0x304>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80095dc:	429a      	cmp	r2, r3
 80095de:	d326      	bcc.n	800962e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009600:	4413      	add	r3, r2
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800960a:	429a      	cmp	r2, r3
 800960c:	d30a      	bcc.n	8009624 <tcp_receive+0x358>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009618:	4413      	add	r3, r2
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009622:	e004      	b.n	800962e <tcp_receive+0x362>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800962a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	4a98      	ldr	r2, [pc, #608]	; (8009898 <tcp_receive+0x5cc>)
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fdcb 	bl	80091d4 <tcp_free_acked_segments>
 800963e:	4602      	mov	r2, r0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964c:	4a93      	ldr	r2, [pc, #588]	; (800989c <tcp_receive+0x5d0>)
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fdc0 	bl	80091d4 <tcp_free_acked_segments>
 8009654:	4602      	mov	r2, r0
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009668:	861a      	strh	r2, [r3, #48]	; 0x30
 800966a:	e002      	b.n	8009672 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800968e:	4b84      	ldr	r3, [pc, #528]	; (80098a0 <tcp_receive+0x5d4>)
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	4413      	add	r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	8b5b      	ldrh	r3, [r3, #26]
 80096a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d035      	beq.n	8009714 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d118      	bne.n	80096e2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00c      	beq.n	80096d2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fa ffe4 	bl	8004692 <lwip_htonl>
 80096ca:	4603      	mov	r3, r0
 80096cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dc20      	bgt.n	8009714 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	8b5b      	ldrh	r3, [r3, #26]
 80096d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096e0:	e018      	b.n	8009714 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fa ffcf 	bl	8004692 <lwip_htonl>
 80096f4:	4603      	mov	r3, r0
 80096f6:	1ae3      	subs	r3, r4, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dc0b      	bgt.n	8009714 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8b5b      	ldrh	r3, [r3, #26]
 8009700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800970a:	e003      	b.n	8009714 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f002 fbcd 	bl	800beac <tcp_send_empty_ack>
 8009712:	e000      	b.n	8009716 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009714:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	2b00      	cmp	r3, #0
 800971c:	d05b      	beq.n	80097d6 <tcp_receive+0x50a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009722:	4b60      	ldr	r3, [pc, #384]	; (80098a4 <tcp_receive+0x5d8>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	da54      	bge.n	80097d6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800972c:	4b5e      	ldr	r3, [pc, #376]	; (80098a8 <tcp_receive+0x5dc>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	b29b      	uxth	r3, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	b29b      	uxth	r3, r3
 800973c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009740:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800974a:	10db      	asrs	r3, r3, #3
 800974c:	b21b      	sxth	r3, r3
 800974e:	b29b      	uxth	r3, r3
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	b29b      	uxth	r3, r3
 8009754:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800975e:	b29a      	uxth	r2, r3
 8009760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009764:	4413      	add	r3, r2
 8009766:	b29b      	uxth	r3, r3
 8009768:	b21a      	sxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800976e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009772:	2b00      	cmp	r3, #0
 8009774:	da05      	bge.n	8009782 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800977a:	425b      	negs	r3, r3
 800977c:	b29b      	uxth	r3, r3
 800977e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009782:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800978c:	109b      	asrs	r3, r3, #2
 800978e:	b21b      	sxth	r3, r3
 8009790:	b29b      	uxth	r3, r3
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80097a6:	4413      	add	r3, r2
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	b21a      	sxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80097b6:	10db      	asrs	r3, r3, #3
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	4413      	add	r3, r2
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	b21a      	sxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80097d6:	4b35      	ldr	r3, [pc, #212]	; (80098ac <tcp_receive+0x5e0>)
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 84e1 	beq.w	800a1a2 <tcp_receive+0xed6>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7d1b      	ldrb	r3, [r3, #20]
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	f200 84dc 	bhi.w	800a1a2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ee:	4b30      	ldr	r3, [pc, #192]	; (80098b0 <tcp_receive+0x5e4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f2c0 808e 	blt.w	8009918 <tcp_receive+0x64c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009800:	4b2a      	ldr	r3, [pc, #168]	; (80098ac <tcp_receive+0x5e0>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	4619      	mov	r1, r3
 8009806:	4b2a      	ldr	r3, [pc, #168]	; (80098b0 <tcp_receive+0x5e4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	440b      	add	r3, r1
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	3301      	adds	r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	f300 8081 	bgt.w	8009918 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009816:	4b27      	ldr	r3, [pc, #156]	; (80098b4 <tcp_receive+0x5e8>)
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009820:	4b23      	ldr	r3, [pc, #140]	; (80098b0 <tcp_receive+0x5e4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009828:	4b22      	ldr	r3, [pc, #136]	; (80098b4 <tcp_receive+0x5e8>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <tcp_receive+0x572>
 8009830:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <tcp_receive+0x5ec>)
 8009832:	f240 5294 	movw	r2, #1428	; 0x594
 8009836:	4921      	ldr	r1, [pc, #132]	; (80098bc <tcp_receive+0x5f0>)
 8009838:	4821      	ldr	r0, [pc, #132]	; (80098c0 <tcp_receive+0x5f4>)
 800983a:	f005 fb5f 	bl	800eefc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009844:	4293      	cmp	r3, r2
 8009846:	d906      	bls.n	8009856 <tcp_receive+0x58a>
 8009848:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <tcp_receive+0x5ec>)
 800984a:	f240 5295 	movw	r2, #1429	; 0x595
 800984e:	491d      	ldr	r1, [pc, #116]	; (80098c4 <tcp_receive+0x5f8>)
 8009850:	481b      	ldr	r0, [pc, #108]	; (80098c0 <tcp_receive+0x5f4>)
 8009852:	f005 fb53 	bl	800eefc <iprintf>
      off = (u16_t)off32;
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800985c:	4b15      	ldr	r3, [pc, #84]	; (80098b4 <tcp_receive+0x5e8>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	891b      	ldrh	r3, [r3, #8]
 8009862:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009866:	429a      	cmp	r2, r3
 8009868:	d906      	bls.n	8009878 <tcp_receive+0x5ac>
 800986a:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <tcp_receive+0x5ec>)
 800986c:	f240 5297 	movw	r2, #1431	; 0x597
 8009870:	4915      	ldr	r1, [pc, #84]	; (80098c8 <tcp_receive+0x5fc>)
 8009872:	4813      	ldr	r0, [pc, #76]	; (80098c0 <tcp_receive+0x5f4>)
 8009874:	f005 fb42 	bl	800eefc <iprintf>
      inseg.len -= off;
 8009878:	4b0e      	ldr	r3, [pc, #56]	; (80098b4 <tcp_receive+0x5e8>)
 800987a:	891a      	ldrh	r2, [r3, #8]
 800987c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	b29a      	uxth	r2, r3
 8009884:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <tcp_receive+0x5e8>)
 8009886:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <tcp_receive+0x5e8>)
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	891a      	ldrh	r2, [r3, #8]
 800988e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009896:	e029      	b.n	80098ec <tcp_receive+0x620>
 8009898:	0801189c 	.word	0x0801189c
 800989c:	080118a4 	.word	0x080118a4
 80098a0:	20000100 	.word	0x20000100
 80098a4:	200000fc 	.word	0x200000fc
 80098a8:	20008ab8 	.word	0x20008ab8
 80098ac:	20000102 	.word	0x20000102
 80098b0:	200000f8 	.word	0x200000f8
 80098b4:	200000d8 	.word	0x200000d8
 80098b8:	08011534 	.word	0x08011534
 80098bc:	080118ac 	.word	0x080118ac
 80098c0:	08011580 	.word	0x08011580
 80098c4:	080118bc 	.word	0x080118bc
 80098c8:	080118cc 	.word	0x080118cc
        off -= p->len;
 80098cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ce:	895b      	ldrh	r3, [r3, #10]
 80098d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80098da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80098de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80098e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e2:	2200      	movs	r2, #0
 80098e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80098e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80098ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ee:	895b      	ldrh	r3, [r3, #10]
 80098f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d8e9      	bhi.n	80098cc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80098f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80098fc:	4619      	mov	r1, r3
 80098fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009900:	f7fc f8e0 	bl	8005ac4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	4a91      	ldr	r2, [pc, #580]	; (8009b50 <tcp_receive+0x884>)
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	4b91      	ldr	r3, [pc, #580]	; (8009b54 <tcp_receive+0x888>)
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	4a8f      	ldr	r2, [pc, #572]	; (8009b50 <tcp_receive+0x884>)
 8009912:	6812      	ldr	r2, [r2, #0]
 8009914:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009916:	e00d      	b.n	8009934 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009918:	4b8d      	ldr	r3, [pc, #564]	; (8009b50 <tcp_receive+0x884>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	da06      	bge.n	8009934 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8b5b      	ldrh	r3, [r3, #26]
 800992a:	f043 0302 	orr.w	r3, r3, #2
 800992e:	b29a      	uxth	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009934:	4b86      	ldr	r3, [pc, #536]	; (8009b50 <tcp_receive+0x884>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	f2c0 842a 	blt.w	800a198 <tcp_receive+0xecc>
 8009944:	4b82      	ldr	r3, [pc, #520]	; (8009b50 <tcp_receive+0x884>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009950:	440b      	add	r3, r1
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	3301      	adds	r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	f300 841e 	bgt.w	800a198 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009960:	4b7b      	ldr	r3, [pc, #492]	; (8009b50 <tcp_receive+0x884>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	f040 829a 	bne.w	8009e9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800996a:	4b7a      	ldr	r3, [pc, #488]	; (8009b54 <tcp_receive+0x888>)
 800996c:	891c      	ldrh	r4, [r3, #8]
 800996e:	4b79      	ldr	r3, [pc, #484]	; (8009b54 <tcp_receive+0x888>)
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	899b      	ldrh	r3, [r3, #12]
 8009974:	b29b      	uxth	r3, r3
 8009976:	4618      	mov	r0, r3
 8009978:	f7fa fe76 	bl	8004668 <lwip_htons>
 800997c:	4603      	mov	r3, r0
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <tcp_receive+0x6c0>
 8009988:	2301      	movs	r3, #1
 800998a:	e000      	b.n	800998e <tcp_receive+0x6c2>
 800998c:	2300      	movs	r3, #0
 800998e:	4423      	add	r3, r4
 8009990:	b29a      	uxth	r2, r3
 8009992:	4b71      	ldr	r3, [pc, #452]	; (8009b58 <tcp_receive+0x88c>)
 8009994:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800999a:	4b6f      	ldr	r3, [pc, #444]	; (8009b58 <tcp_receive+0x88c>)
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d275      	bcs.n	8009a8e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80099a2:	4b6c      	ldr	r3, [pc, #432]	; (8009b54 <tcp_receive+0x888>)
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	899b      	ldrh	r3, [r3, #12]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fa fe5c 	bl	8004668 <lwip_htons>
 80099b0:	4603      	mov	r3, r0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01f      	beq.n	80099fc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80099bc:	4b65      	ldr	r3, [pc, #404]	; (8009b54 <tcp_receive+0x888>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	899b      	ldrh	r3, [r3, #12]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	b21b      	sxth	r3, r3
 80099c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099ca:	b21c      	sxth	r4, r3
 80099cc:	4b61      	ldr	r3, [pc, #388]	; (8009b54 <tcp_receive+0x888>)
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	899b      	ldrh	r3, [r3, #12]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fa fe47 	bl	8004668 <lwip_htons>
 80099da:	4603      	mov	r3, r0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fa fe3e 	bl	8004668 <lwip_htons>
 80099ec:	4603      	mov	r3, r0
 80099ee:	b21b      	sxth	r3, r3
 80099f0:	4323      	orrs	r3, r4
 80099f2:	b21a      	sxth	r2, r3
 80099f4:	4b57      	ldr	r3, [pc, #348]	; (8009b54 <tcp_receive+0x888>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	b292      	uxth	r2, r2
 80099fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a00:	4b54      	ldr	r3, [pc, #336]	; (8009b54 <tcp_receive+0x888>)
 8009a02:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009a04:	4b53      	ldr	r3, [pc, #332]	; (8009b54 <tcp_receive+0x888>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	899b      	ldrh	r3, [r3, #12]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fa fe2b 	bl	8004668 <lwip_htons>
 8009a12:	4603      	mov	r3, r0
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <tcp_receive+0x75e>
            inseg.len -= 1;
 8009a1e:	4b4d      	ldr	r3, [pc, #308]	; (8009b54 <tcp_receive+0x888>)
 8009a20:	891b      	ldrh	r3, [r3, #8]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	4b4b      	ldr	r3, [pc, #300]	; (8009b54 <tcp_receive+0x888>)
 8009a28:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009a2a:	4b4a      	ldr	r3, [pc, #296]	; (8009b54 <tcp_receive+0x888>)
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	4a49      	ldr	r2, [pc, #292]	; (8009b54 <tcp_receive+0x888>)
 8009a30:	8912      	ldrh	r2, [r2, #8]
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fb ff45 	bl	80058c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009a3a:	4b46      	ldr	r3, [pc, #280]	; (8009b54 <tcp_receive+0x888>)
 8009a3c:	891c      	ldrh	r4, [r3, #8]
 8009a3e:	4b45      	ldr	r3, [pc, #276]	; (8009b54 <tcp_receive+0x888>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	899b      	ldrh	r3, [r3, #12]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fa fe0e 	bl	8004668 <lwip_htons>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 0303 	and.w	r3, r3, #3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <tcp_receive+0x790>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e000      	b.n	8009a5e <tcp_receive+0x792>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4423      	add	r3, r4
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	4b3d      	ldr	r3, [pc, #244]	; (8009b58 <tcp_receive+0x88c>)
 8009a64:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a66:	4b3c      	ldr	r3, [pc, #240]	; (8009b58 <tcp_receive+0x88c>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4b38      	ldr	r3, [pc, #224]	; (8009b50 <tcp_receive+0x884>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	441a      	add	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a7a:	440b      	add	r3, r1
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d006      	beq.n	8009a8e <tcp_receive+0x7c2>
 8009a80:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <tcp_receive+0x890>)
 8009a82:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009a86:	4936      	ldr	r1, [pc, #216]	; (8009b60 <tcp_receive+0x894>)
 8009a88:	4836      	ldr	r0, [pc, #216]	; (8009b64 <tcp_receive+0x898>)
 8009a8a:	f005 fa37 	bl	800eefc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 80e7 	beq.w	8009c66 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a98:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <tcp_receive+0x888>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	899b      	ldrh	r3, [r3, #12]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fa fde1 	bl	8004668 <lwip_htons>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d010      	beq.n	8009ad4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ab2:	e00a      	b.n	8009aca <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f7fd fce6 	bl	8007496 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f0      	bne.n	8009ab4 <tcp_receive+0x7e8>
 8009ad2:	e0c8      	b.n	8009c66 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009ada:	e052      	b.n	8009b82 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	899b      	ldrh	r3, [r3, #12]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fa fdbf 	bl	8004668 <lwip_htons>
 8009aea:	4603      	mov	r3, r0
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d03d      	beq.n	8009b72 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009af6:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <tcp_receive+0x888>)
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	899b      	ldrh	r3, [r3, #12]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fa fdb2 	bl	8004668 <lwip_htons>
 8009b04:	4603      	mov	r3, r0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d130      	bne.n	8009b72 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b10:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <tcp_receive+0x888>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	899b      	ldrh	r3, [r3, #12]
 8009b16:	b29c      	uxth	r4, r3
 8009b18:	2001      	movs	r0, #1
 8009b1a:	f7fa fda5 	bl	8004668 <lwip_htons>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <tcp_receive+0x888>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	4322      	orrs	r2, r4
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009b2c:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <tcp_receive+0x888>)
 8009b2e:	891c      	ldrh	r4, [r3, #8]
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <tcp_receive+0x888>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	899b      	ldrh	r3, [r3, #12]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fa fd95 	bl	8004668 <lwip_htons>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00e      	beq.n	8009b68 <tcp_receive+0x89c>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e00d      	b.n	8009b6a <tcp_receive+0x89e>
 8009b4e:	bf00      	nop
 8009b50:	200000f8 	.word	0x200000f8
 8009b54:	200000d8 	.word	0x200000d8
 8009b58:	20000102 	.word	0x20000102
 8009b5c:	08011534 	.word	0x08011534
 8009b60:	080118dc 	.word	0x080118dc
 8009b64:	08011580 	.word	0x08011580
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4423      	add	r3, r4
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	4b98      	ldr	r3, [pc, #608]	; (8009dd0 <tcp_receive+0xb04>)
 8009b70:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009b7c:	6938      	ldr	r0, [r7, #16]
 8009b7e:	f7fd fc8a 	bl	8007496 <tcp_seg_free>
            while (next &&
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00e      	beq.n	8009ba6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b88:	4b91      	ldr	r3, [pc, #580]	; (8009dd0 <tcp_receive+0xb04>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4b91      	ldr	r3, [pc, #580]	; (8009dd4 <tcp_receive+0xb08>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	441a      	add	r2, r3
 8009b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b9c:	8909      	ldrh	r1, [r1, #8]
 8009b9e:	440b      	add	r3, r1
 8009ba0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	da9a      	bge.n	8009adc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d059      	beq.n	8009c60 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009bac:	4b88      	ldr	r3, [pc, #544]	; (8009dd0 <tcp_receive+0xb04>)
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4b88      	ldr	r3, [pc, #544]	; (8009dd4 <tcp_receive+0xb08>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	441a      	add	r2, r3
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dd4d      	ble.n	8009c60 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	4b81      	ldr	r3, [pc, #516]	; (8009dd4 <tcp_receive+0xb08>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	4b80      	ldr	r3, [pc, #512]	; (8009dd8 <tcp_receive+0xb0c>)
 8009bd8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009bda:	4b7f      	ldr	r3, [pc, #508]	; (8009dd8 <tcp_receive+0xb0c>)
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	899b      	ldrh	r3, [r3, #12]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fa fd40 	bl	8004668 <lwip_htons>
 8009be8:	4603      	mov	r3, r0
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d005      	beq.n	8009c00 <tcp_receive+0x934>
                inseg.len -= 1;
 8009bf4:	4b78      	ldr	r3, [pc, #480]	; (8009dd8 <tcp_receive+0xb0c>)
 8009bf6:	891b      	ldrh	r3, [r3, #8]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	4b76      	ldr	r3, [pc, #472]	; (8009dd8 <tcp_receive+0xb0c>)
 8009bfe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009c00:	4b75      	ldr	r3, [pc, #468]	; (8009dd8 <tcp_receive+0xb0c>)
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	4a74      	ldr	r2, [pc, #464]	; (8009dd8 <tcp_receive+0xb0c>)
 8009c06:	8912      	ldrh	r2, [r2, #8]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fb fe5a 	bl	80058c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009c10:	4b71      	ldr	r3, [pc, #452]	; (8009dd8 <tcp_receive+0xb0c>)
 8009c12:	891c      	ldrh	r4, [r3, #8]
 8009c14:	4b70      	ldr	r3, [pc, #448]	; (8009dd8 <tcp_receive+0xb0c>)
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	899b      	ldrh	r3, [r3, #12]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fa fd23 	bl	8004668 <lwip_htons>
 8009c22:	4603      	mov	r3, r0
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <tcp_receive+0x966>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <tcp_receive+0x968>
 8009c32:	2300      	movs	r3, #0
 8009c34:	4423      	add	r3, r4
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	4b65      	ldr	r3, [pc, #404]	; (8009dd0 <tcp_receive+0xb04>)
 8009c3a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009c3c:	4b64      	ldr	r3, [pc, #400]	; (8009dd0 <tcp_receive+0xb04>)
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b64      	ldr	r3, [pc, #400]	; (8009dd4 <tcp_receive+0xb08>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	441a      	add	r2, r3
 8009c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d006      	beq.n	8009c60 <tcp_receive+0x994>
 8009c52:	4b62      	ldr	r3, [pc, #392]	; (8009ddc <tcp_receive+0xb10>)
 8009c54:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009c58:	4961      	ldr	r1, [pc, #388]	; (8009de0 <tcp_receive+0xb14>)
 8009c5a:	4862      	ldr	r0, [pc, #392]	; (8009de4 <tcp_receive+0xb18>)
 8009c5c:	f005 f94e 	bl	800eefc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c64:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009c66:	4b5a      	ldr	r3, [pc, #360]	; (8009dd0 <tcp_receive+0xb04>)
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4b59      	ldr	r3, [pc, #356]	; (8009dd4 <tcp_receive+0xb08>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	441a      	add	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c7a:	4b55      	ldr	r3, [pc, #340]	; (8009dd0 <tcp_receive+0xb04>)
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d206      	bcs.n	8009c90 <tcp_receive+0x9c4>
 8009c82:	4b56      	ldr	r3, [pc, #344]	; (8009ddc <tcp_receive+0xb10>)
 8009c84:	f240 6207 	movw	r2, #1543	; 0x607
 8009c88:	4957      	ldr	r1, [pc, #348]	; (8009de8 <tcp_receive+0xb1c>)
 8009c8a:	4856      	ldr	r0, [pc, #344]	; (8009de4 <tcp_receive+0xb18>)
 8009c8c:	f005 f936 	bl	800eefc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c94:	4b4e      	ldr	r3, [pc, #312]	; (8009dd0 <tcp_receive+0xb04>)
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fc fdbb 	bl	800681c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009ca6:	4b4c      	ldr	r3, [pc, #304]	; (8009dd8 <tcp_receive+0xb0c>)
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	891b      	ldrh	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009cb0:	4b49      	ldr	r3, [pc, #292]	; (8009dd8 <tcp_receive+0xb0c>)
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4a4d      	ldr	r2, [pc, #308]	; (8009dec <tcp_receive+0xb20>)
 8009cb6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009cb8:	4b47      	ldr	r3, [pc, #284]	; (8009dd8 <tcp_receive+0xb0c>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009cbe:	4b46      	ldr	r3, [pc, #280]	; (8009dd8 <tcp_receive+0xb0c>)
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	899b      	ldrh	r3, [r3, #12]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa fcce 	bl	8004668 <lwip_htons>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80b8 	beq.w	8009e4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009cda:	4b45      	ldr	r3, [pc, #276]	; (8009df0 <tcp_receive+0xb24>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	f043 0320 	orr.w	r3, r3, #32
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	4b42      	ldr	r3, [pc, #264]	; (8009df0 <tcp_receive+0xb24>)
 8009ce6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009ce8:	e0af      	b.n	8009e4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a36      	ldr	r2, [pc, #216]	; (8009dd4 <tcp_receive+0xb08>)
 8009cfa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	891b      	ldrh	r3, [r3, #8]
 8009d00:	461c      	mov	r4, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	899b      	ldrh	r3, [r3, #12]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fa fcac 	bl	8004668 <lwip_htons>
 8009d10:	4603      	mov	r3, r0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <tcp_receive+0xa54>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <tcp_receive+0xa56>
 8009d20:	2300      	movs	r3, #0
 8009d22:	191a      	adds	r2, r3, r4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	441a      	add	r2, r3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d32:	461c      	mov	r4, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	891b      	ldrh	r3, [r3, #8]
 8009d38:	461d      	mov	r5, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	899b      	ldrh	r3, [r3, #12]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fa fc90 	bl	8004668 <lwip_htons>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <tcp_receive+0xa8c>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <tcp_receive+0xa8e>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	442b      	add	r3, r5
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	d206      	bcs.n	8009d6e <tcp_receive+0xaa2>
 8009d60:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <tcp_receive+0xb10>)
 8009d62:	f240 622b 	movw	r2, #1579	; 0x62b
 8009d66:	4923      	ldr	r1, [pc, #140]	; (8009df4 <tcp_receive+0xb28>)
 8009d68:	481e      	ldr	r0, [pc, #120]	; (8009de4 <tcp_receive+0xb18>)
 8009d6a:	f005 f8c7 	bl	800eefc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	891b      	ldrh	r3, [r3, #8]
 8009d72:	461c      	mov	r4, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	899b      	ldrh	r3, [r3, #12]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fa fc73 	bl	8004668 <lwip_htons>
 8009d82:	4603      	mov	r3, r0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <tcp_receive+0xac6>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <tcp_receive+0xac8>
 8009d92:	2300      	movs	r3, #0
 8009d94:	1919      	adds	r1, r3, r4
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d9a:	b28b      	uxth	r3, r1
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fc fd39 	bl	800681c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	891b      	ldrh	r3, [r3, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d028      	beq.n	8009e06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <tcp_receive+0xb20>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d01d      	beq.n	8009df8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009dbc:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <tcp_receive+0xb20>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	f7fb ffc4 	bl	8005d54 <pbuf_cat>
 8009dcc:	e018      	b.n	8009e00 <tcp_receive+0xb34>
 8009dce:	bf00      	nop
 8009dd0:	20000102 	.word	0x20000102
 8009dd4:	200000f8 	.word	0x200000f8
 8009dd8:	200000d8 	.word	0x200000d8
 8009ddc:	08011534 	.word	0x08011534
 8009de0:	08011914 	.word	0x08011914
 8009de4:	08011580 	.word	0x08011580
 8009de8:	08011950 	.word	0x08011950
 8009dec:	20000108 	.word	0x20000108
 8009df0:	20000105 	.word	0x20000105
 8009df4:	08011970 	.word	0x08011970
            } else {
              recv_data = cseg->p;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	4a70      	ldr	r2, [pc, #448]	; (8009fc0 <tcp_receive+0xcf4>)
 8009dfe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2200      	movs	r2, #0
 8009e04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	899b      	ldrh	r3, [r3, #12]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fa fc2a 	bl	8004668 <lwip_htons>
 8009e14:	4603      	mov	r3, r0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00d      	beq.n	8009e3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009e20:	4b68      	ldr	r3, [pc, #416]	; (8009fc4 <tcp_receive+0xcf8>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f043 0320 	orr.w	r3, r3, #32
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	4b66      	ldr	r3, [pc, #408]	; (8009fc4 <tcp_receive+0xcf8>)
 8009e2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7d1b      	ldrb	r3, [r3, #20]
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d102      	bne.n	8009e3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2207      	movs	r2, #7
 8009e3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009e44:	68b8      	ldr	r0, [r7, #8]
 8009e46:	f7fd fb26 	bl	8007496 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d008      	beq.n	8009e64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	f43f af43 	beq.w	8009cea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8b5b      	ldrh	r3, [r3, #26]
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00e      	beq.n	8009e8e <tcp_receive+0xbc2>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	8b5b      	ldrh	r3, [r3, #26]
 8009e74:	f023 0301 	bic.w	r3, r3, #1
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	835a      	strh	r2, [r3, #26]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	8b5b      	ldrh	r3, [r3, #26]
 8009e82:	f043 0302 	orr.w	r3, r3, #2
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e8c:	e188      	b.n	800a1a0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	8b5b      	ldrh	r3, [r3, #26]
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e9c:	e180      	b.n	800a1a0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009ea6:	4848      	ldr	r0, [pc, #288]	; (8009fc8 <tcp_receive+0xcfc>)
 8009ea8:	f7fd fb0e 	bl	80074c8 <tcp_seg_copy>
 8009eac:	4602      	mov	r2, r0
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	675a      	str	r2, [r3, #116]	; 0x74
 8009eb2:	e16d      	b.n	800a190 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ebe:	e157      	b.n	800a170 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	4b41      	ldr	r3, [pc, #260]	; (8009fcc <tcp_receive+0xd00>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d11d      	bne.n	8009f0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009ece:	4b3e      	ldr	r3, [pc, #248]	; (8009fc8 <tcp_receive+0xcfc>)
 8009ed0:	891a      	ldrh	r2, [r3, #8]
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	891b      	ldrh	r3, [r3, #8]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	f240 814f 	bls.w	800a17a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009edc:	483a      	ldr	r0, [pc, #232]	; (8009fc8 <tcp_receive+0xcfc>)
 8009ede:	f7fd faf3 	bl	80074c8 <tcp_seg_copy>
 8009ee2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f000 8149 	beq.w	800a17e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e002      	b.n	8009f00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009f00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f02:	6978      	ldr	r0, [r7, #20]
 8009f04:	f7ff f8de 	bl	80090c4 <tcp_oos_insert_segment>
                }
                break;
 8009f08:	e139      	b.n	800a17e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d117      	bne.n	8009f40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009f10:	4b2e      	ldr	r3, [pc, #184]	; (8009fcc <tcp_receive+0xd00>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	da57      	bge.n	8009fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009f20:	4829      	ldr	r0, [pc, #164]	; (8009fc8 <tcp_receive+0xcfc>)
 8009f22:	f7fd fad1 	bl	80074c8 <tcp_seg_copy>
 8009f26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 8129 	beq.w	800a182 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f38:	69b8      	ldr	r0, [r7, #24]
 8009f3a:	f7ff f8c3 	bl	80090c4 <tcp_oos_insert_segment>
                  }
                  break;
 8009f3e:	e120      	b.n	800a182 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009f40:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <tcp_receive+0xd00>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	db3e      	blt.n	8009fd0 <tcp_receive+0xd04>
 8009f52:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <tcp_receive+0xd00>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	3301      	adds	r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dc35      	bgt.n	8009fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009f64:	4818      	ldr	r0, [pc, #96]	; (8009fc8 <tcp_receive+0xcfc>)
 8009f66:	f7fd faaf 	bl	80074c8 <tcp_seg_copy>
 8009f6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8109 	beq.w	800a186 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f7c:	8912      	ldrh	r2, [r2, #8]
 8009f7e:	441a      	add	r2, r3
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <tcp_receive+0xd00>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd12      	ble.n	8009fb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009f8a:	4b10      	ldr	r3, [pc, #64]	; (8009fcc <tcp_receive+0xd00>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa6:	891b      	ldrh	r3, [r3, #8]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7fb fc8a 	bl	80058c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fb8:	69f8      	ldr	r0, [r7, #28]
 8009fba:	f7ff f883 	bl	80090c4 <tcp_oos_insert_segment>
                  }
                  break;
 8009fbe:	e0e2      	b.n	800a186 <tcp_receive+0xeba>
 8009fc0:	20000108 	.word	0x20000108
 8009fc4:	20000105 	.word	0x20000105
 8009fc8:	200000d8 	.word	0x200000d8
 8009fcc:	200000f8 	.word	0x200000f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 80c6 	bne.w	800a16a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009fde:	4b80      	ldr	r3, [pc, #512]	; (800a1e0 <tcp_receive+0xf14>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f340 80bd 	ble.w	800a16a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	899b      	ldrh	r3, [r3, #12]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fa fb35 	bl	8004668 <lwip_htons>
 8009ffe:	4603      	mov	r3, r0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	f040 80bf 	bne.w	800a18a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a00c:	4875      	ldr	r0, [pc, #468]	; (800a1e4 <tcp_receive+0xf18>)
 800a00e:	f7fd fa5b 	bl	80074c8 <tcp_seg_copy>
 800a012:	4602      	mov	r2, r0
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80b6 	beq.w	800a18e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a02a:	8912      	ldrh	r2, [r2, #8]
 800a02c:	441a      	add	r2, r3
 800a02e:	4b6c      	ldr	r3, [pc, #432]	; (800a1e0 <tcp_receive+0xf14>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd12      	ble.n	800a05e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a038:	4b69      	ldr	r3, [pc, #420]	; (800a1e0 <tcp_receive+0xf14>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b29b      	uxth	r3, r3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	b29a      	uxth	r2, r3
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	891b      	ldrh	r3, [r3, #8]
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f7fb fc33 	bl	80058c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a05e:	4b62      	ldr	r3, [pc, #392]	; (800a1e8 <tcp_receive+0xf1c>)
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	4b5e      	ldr	r3, [pc, #376]	; (800a1e0 <tcp_receive+0xf14>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	441a      	add	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a072:	440b      	add	r3, r1
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	f340 8089 	ble.w	800a18e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	899b      	ldrh	r3, [r3, #12]
 800a084:	b29b      	uxth	r3, r3
 800a086:	4618      	mov	r0, r3
 800a088:	f7fa faee 	bl	8004668 <lwip_htons>
 800a08c:	4603      	mov	r3, r0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d022      	beq.n	800a0de <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	899b      	ldrh	r3, [r3, #12]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a0a8:	b21c      	sxth	r4, r3
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	899b      	ldrh	r3, [r3, #12]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fa fad7 	bl	8004668 <lwip_htons>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fa face 	bl	8004668 <lwip_htons>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	b21b      	sxth	r3, r3
 800a0d0:	4323      	orrs	r3, r4
 800a0d2:	b21a      	sxth	r2, r3
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	4413      	add	r3, r2
 800a0ea:	b299      	uxth	r1, r3
 800a0ec:	4b3c      	ldr	r3, [pc, #240]	; (800a1e0 <tcp_receive+0xf14>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	1a8a      	subs	r2, r1, r2
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	891b      	ldrh	r3, [r3, #8]
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fb fbda 	bl	80058c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	891c      	ldrh	r4, [r3, #8]
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4618      	mov	r0, r3
 800a122:	f7fa faa1 	bl	8004668 <lwip_htons>
 800a126:	4603      	mov	r3, r0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <tcp_receive+0xe6a>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <tcp_receive+0xe6c>
 800a136:	2300      	movs	r3, #0
 800a138:	4423      	add	r3, r4
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	4b2a      	ldr	r3, [pc, #168]	; (800a1e8 <tcp_receive+0xf1c>)
 800a13e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a140:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <tcp_receive+0xf1c>)
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	4b26      	ldr	r3, [pc, #152]	; (800a1e0 <tcp_receive+0xf14>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	441a      	add	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	6879      	ldr	r1, [r7, #4]
 800a152:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a154:	440b      	add	r3, r1
 800a156:	429a      	cmp	r2, r3
 800a158:	d019      	beq.n	800a18e <tcp_receive+0xec2>
 800a15a:	4b24      	ldr	r3, [pc, #144]	; (800a1ec <tcp_receive+0xf20>)
 800a15c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a160:	4923      	ldr	r1, [pc, #140]	; (800a1f0 <tcp_receive+0xf24>)
 800a162:	4824      	ldr	r0, [pc, #144]	; (800a1f4 <tcp_receive+0xf28>)
 800a164:	f004 feca 	bl	800eefc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a168:	e011      	b.n	800a18e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	2b00      	cmp	r3, #0
 800a174:	f47f aea4 	bne.w	8009ec0 <tcp_receive+0xbf4>
 800a178:	e00a      	b.n	800a190 <tcp_receive+0xec4>
                break;
 800a17a:	bf00      	nop
 800a17c:	e008      	b.n	800a190 <tcp_receive+0xec4>
                break;
 800a17e:	bf00      	nop
 800a180:	e006      	b.n	800a190 <tcp_receive+0xec4>
                  break;
 800a182:	bf00      	nop
 800a184:	e004      	b.n	800a190 <tcp_receive+0xec4>
                  break;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <tcp_receive+0xec4>
                  break;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <tcp_receive+0xec4>
                break;
 800a18e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fe8b 	bl	800beac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a196:	e003      	b.n	800a1a0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 fe87 	bl	800beac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a19e:	e01a      	b.n	800a1d6 <tcp_receive+0xf0a>
 800a1a0:	e019      	b.n	800a1d6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a1a2:	4b0f      	ldr	r3, [pc, #60]	; (800a1e0 <tcp_receive+0xf14>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	db0a      	blt.n	800a1c6 <tcp_receive+0xefa>
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <tcp_receive+0xf14>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1bc:	440b      	add	r3, r1
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd07      	ble.n	800a1d6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8b5b      	ldrh	r3, [r3, #26]
 800a1ca:	f043 0302 	orr.w	r3, r3, #2
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a1d4:	e7ff      	b.n	800a1d6 <tcp_receive+0xf0a>
 800a1d6:	bf00      	nop
 800a1d8:	3750      	adds	r7, #80	; 0x50
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200000f8 	.word	0x200000f8
 800a1e4:	200000d8 	.word	0x200000d8
 800a1e8:	20000102 	.word	0x20000102
 800a1ec:	08011534 	.word	0x08011534
 800a1f0:	080118dc 	.word	0x080118dc
 800a1f4:	08011580 	.word	0x08011580

0800a1f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a1fe:	4b15      	ldr	r3, [pc, #84]	; (800a254 <tcp_get_next_optbyte+0x5c>)
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	b291      	uxth	r1, r2
 800a206:	4a13      	ldr	r2, [pc, #76]	; (800a254 <tcp_get_next_optbyte+0x5c>)
 800a208:	8011      	strh	r1, [r2, #0]
 800a20a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a20c:	4b12      	ldr	r3, [pc, #72]	; (800a258 <tcp_get_next_optbyte+0x60>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <tcp_get_next_optbyte+0x26>
 800a214:	4b11      	ldr	r3, [pc, #68]	; (800a25c <tcp_get_next_optbyte+0x64>)
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	88fa      	ldrh	r2, [r7, #6]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d208      	bcs.n	800a230 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a21e:	4b10      	ldr	r3, [pc, #64]	; (800a260 <tcp_get_next_optbyte+0x68>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3314      	adds	r3, #20
 800a224:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	4413      	add	r3, r2
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	e00b      	b.n	800a248 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	b2da      	uxtb	r2, r3
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <tcp_get_next_optbyte+0x64>)
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <tcp_get_next_optbyte+0x60>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	797b      	ldrb	r3, [r7, #5]
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	200000f4 	.word	0x200000f4
 800a258:	200000f0 	.word	0x200000f0
 800a25c:	200000ee 	.word	0x200000ee
 800a260:	200000e8 	.word	0x200000e8

0800a264 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <tcp_parseopt+0x1c>
 800a272:	4b32      	ldr	r3, [pc, #200]	; (800a33c <tcp_parseopt+0xd8>)
 800a274:	f240 727d 	movw	r2, #1917	; 0x77d
 800a278:	4931      	ldr	r1, [pc, #196]	; (800a340 <tcp_parseopt+0xdc>)
 800a27a:	4832      	ldr	r0, [pc, #200]	; (800a344 <tcp_parseopt+0xe0>)
 800a27c:	f004 fe3e 	bl	800eefc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a280:	4b31      	ldr	r3, [pc, #196]	; (800a348 <tcp_parseopt+0xe4>)
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d055      	beq.n	800a334 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a288:	4b30      	ldr	r3, [pc, #192]	; (800a34c <tcp_parseopt+0xe8>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	e045      	b.n	800a31c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a290:	f7ff ffb2 	bl	800a1f8 <tcp_get_next_optbyte>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d006      	beq.n	800a2ac <tcp_parseopt+0x48>
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	dc2b      	bgt.n	800a2fa <tcp_parseopt+0x96>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d041      	beq.n	800a32a <tcp_parseopt+0xc6>
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d127      	bne.n	800a2fa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a2aa:	e037      	b.n	800a31c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a2ac:	f7ff ffa4 	bl	800a1f8 <tcp_get_next_optbyte>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	d13b      	bne.n	800a32e <tcp_parseopt+0xca>
 800a2b6:	4b25      	ldr	r3, [pc, #148]	; (800a34c <tcp_parseopt+0xe8>)
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	4a22      	ldr	r2, [pc, #136]	; (800a348 <tcp_parseopt+0xe4>)
 800a2be:	8812      	ldrh	r2, [r2, #0]
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	da34      	bge.n	800a32e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2c4:	f7ff ff98 	bl	800a1f8 <tcp_get_next_optbyte>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a2d0:	f7ff ff92 	bl	800a1f8 <tcp_get_next_optbyte>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	89bb      	ldrh	r3, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a2de:	89bb      	ldrh	r3, [r7, #12]
 800a2e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a2e4:	d804      	bhi.n	800a2f0 <tcp_parseopt+0x8c>
 800a2e6:	89bb      	ldrh	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <tcp_parseopt+0x8c>
 800a2ec:	89ba      	ldrh	r2, [r7, #12]
 800a2ee:	e001      	b.n	800a2f4 <tcp_parseopt+0x90>
 800a2f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a2f8:	e010      	b.n	800a31c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a2fa:	f7ff ff7d 	bl	800a1f8 <tcp_get_next_optbyte>
 800a2fe:	4603      	mov	r3, r0
 800a300:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d914      	bls.n	800a332 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <tcp_parseopt+0xe8>)
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	4413      	add	r3, r2
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b02      	subs	r3, #2
 800a316:	b29a      	uxth	r2, r3
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <tcp_parseopt+0xe8>)
 800a31a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a31c:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <tcp_parseopt+0xe8>)
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	4b09      	ldr	r3, [pc, #36]	; (800a348 <tcp_parseopt+0xe4>)
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d3b3      	bcc.n	800a290 <tcp_parseopt+0x2c>
 800a328:	e004      	b.n	800a334 <tcp_parseopt+0xd0>
          return;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <tcp_parseopt+0xd0>
            return;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <tcp_parseopt+0xd0>
            return;
 800a332:	bf00      	nop
      }
    }
  }
}
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	08011534 	.word	0x08011534
 800a340:	08011998 	.word	0x08011998
 800a344:	08011580 	.word	0x08011580
 800a348:	200000ec 	.word	0x200000ec
 800a34c:	200000f4 	.word	0x200000f4

0800a350 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <tcp_trigger_input_pcb_close+0x1c>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f043 0310 	orr.w	r3, r3, #16
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	4b03      	ldr	r3, [pc, #12]	; (800a36c <tcp_trigger_input_pcb_close+0x1c>)
 800a360:	701a      	strb	r2, [r3, #0]
}
 800a362:	bf00      	nop
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20000105 	.word	0x20000105

0800a370 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <tcp_route+0x28>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	7a1b      	ldrb	r3, [r3, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d006      	beq.n	800a398 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	7a1b      	ldrb	r3, [r3, #8]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fb f8be 	bl	8005510 <netif_get_by_index>
 800a394:	4603      	mov	r3, r0
 800a396:	e003      	b.n	800a3a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f003 fad5 	bl	800d948 <ip4_route>
 800a39e:	4603      	mov	r3, r0
  }
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d105      	bne.n	800a3ca <tcp_create_segment+0x22>
 800a3be:	4b44      	ldr	r3, [pc, #272]	; (800a4d0 <tcp_create_segment+0x128>)
 800a3c0:	22a3      	movs	r2, #163	; 0xa3
 800a3c2:	4944      	ldr	r1, [pc, #272]	; (800a4d4 <tcp_create_segment+0x12c>)
 800a3c4:	4844      	ldr	r0, [pc, #272]	; (800a4d8 <tcp_create_segment+0x130>)
 800a3c6:	f004 fd99 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <tcp_create_segment+0x34>
 800a3d0:	4b3f      	ldr	r3, [pc, #252]	; (800a4d0 <tcp_create_segment+0x128>)
 800a3d2:	22a4      	movs	r2, #164	; 0xa4
 800a3d4:	4941      	ldr	r1, [pc, #260]	; (800a4dc <tcp_create_segment+0x134>)
 800a3d6:	4840      	ldr	r0, [pc, #256]	; (800a4d8 <tcp_create_segment+0x130>)
 800a3d8:	f004 fd90 	bl	800eefc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a3ea:	2003      	movs	r0, #3
 800a3ec:	f7fa fd92 	bl	8004f14 <memp_malloc>
 800a3f0:	6138      	str	r0, [r7, #16]
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f7fb fbe9 	bl	8005bd0 <pbuf_free>
    return NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e061      	b.n	800a4c6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a408:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	891a      	ldrh	r2, [r3, #8]
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	429a      	cmp	r2, r3
 800a420:	d205      	bcs.n	800a42e <tcp_create_segment+0x86>
 800a422:	4b2b      	ldr	r3, [pc, #172]	; (800a4d0 <tcp_create_segment+0x128>)
 800a424:	22b0      	movs	r2, #176	; 0xb0
 800a426:	492e      	ldr	r1, [pc, #184]	; (800a4e0 <tcp_create_segment+0x138>)
 800a428:	482b      	ldr	r0, [pc, #172]	; (800a4d8 <tcp_create_segment+0x130>)
 800a42a:	f004 fd67 	bl	800eefc <iprintf>
  seg->len = p->tot_len - optlen;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	891a      	ldrh	r2, [r3, #8]
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	b29b      	uxth	r3, r3
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	b29a      	uxth	r2, r3
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a43e:	2114      	movs	r1, #20
 800a440:	68b8      	ldr	r0, [r7, #8]
 800a442:	f7fb fb2f 	bl	8005aa4 <pbuf_add_header>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a44c:	6938      	ldr	r0, [r7, #16]
 800a44e:	f7fd f822 	bl	8007496 <tcp_seg_free>
    return NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	e037      	b.n	800a4c6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8ada      	ldrh	r2, [r3, #22]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	68dc      	ldr	r4, [r3, #12]
 800a468:	4610      	mov	r0, r2
 800a46a:	f7fa f8fd 	bl	8004668 <lwip_htons>
 800a46e:	4603      	mov	r3, r0
 800a470:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	8b1a      	ldrh	r2, [r3, #24]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	68dc      	ldr	r4, [r3, #12]
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fa f8f4 	bl	8004668 <lwip_htons>
 800a480:	4603      	mov	r3, r0
 800a482:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	68dc      	ldr	r4, [r3, #12]
 800a488:	6838      	ldr	r0, [r7, #0]
 800a48a:	f7fa f902 	bl	8004692 <lwip_htonl>
 800a48e:	4603      	mov	r3, r0
 800a490:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	089b      	lsrs	r3, r3, #2
 800a496:	b2db      	uxtb	r3, r3
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3305      	adds	r3, #5
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	031b      	lsls	r3, r3, #12
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	68dc      	ldr	r4, [r3, #12]
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	f7fa f8da 	bl	8004668 <lwip_htons>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	749a      	strb	r2, [r3, #18]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a4c4:	693b      	ldr	r3, [r7, #16]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	371c      	adds	r7, #28
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd90      	pop	{r4, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	080119b4 	.word	0x080119b4
 800a4d4:	080119e8 	.word	0x080119e8
 800a4d8:	08011a08 	.word	0x08011a08
 800a4dc:	08011a30 	.word	0x08011a30
 800a4e0:	08011a54 	.word	0x08011a54

0800a4e4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	607b      	str	r3, [r7, #4]
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	81bb      	strh	r3, [r7, #12]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a4f8:	89bb      	ldrh	r3, [r7, #12]
 800a4fa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d105      	bne.n	800a50e <tcp_pbuf_prealloc+0x2a>
 800a502:	4b30      	ldr	r3, [pc, #192]	; (800a5c4 <tcp_pbuf_prealloc+0xe0>)
 800a504:	22e8      	movs	r2, #232	; 0xe8
 800a506:	4930      	ldr	r1, [pc, #192]	; (800a5c8 <tcp_pbuf_prealloc+0xe4>)
 800a508:	4830      	ldr	r0, [pc, #192]	; (800a5cc <tcp_pbuf_prealloc+0xe8>)
 800a50a:	f004 fcf7 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d105      	bne.n	800a520 <tcp_pbuf_prealloc+0x3c>
 800a514:	4b2b      	ldr	r3, [pc, #172]	; (800a5c4 <tcp_pbuf_prealloc+0xe0>)
 800a516:	22e9      	movs	r2, #233	; 0xe9
 800a518:	492d      	ldr	r1, [pc, #180]	; (800a5d0 <tcp_pbuf_prealloc+0xec>)
 800a51a:	482c      	ldr	r0, [pc, #176]	; (800a5cc <tcp_pbuf_prealloc+0xe8>)
 800a51c:	f004 fcee 	bl	800eefc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a520:	89ba      	ldrh	r2, [r7, #12]
 800a522:	897b      	ldrh	r3, [r7, #10]
 800a524:	429a      	cmp	r2, r3
 800a526:	d221      	bcs.n	800a56c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a528:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d111      	bne.n	800a558 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	8b5b      	ldrh	r3, [r3, #26]
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d115      	bne.n	800a56c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a540:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a558:	89bb      	ldrh	r3, [r7, #12]
 800a55a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800a55e:	f023 0203 	bic.w	r2, r3, #3
 800a562:	897b      	ldrh	r3, [r7, #10]
 800a564:	4293      	cmp	r3, r2
 800a566:	bf28      	it	cs
 800a568:	4613      	movcs	r3, r2
 800a56a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a56c:	8af9      	ldrh	r1, [r7, #22]
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a574:	4618      	mov	r0, r3
 800a576:	f7fb f847 	bl	8005608 <pbuf_alloc>
 800a57a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	e019      	b.n	800a5ba <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d006      	beq.n	800a59c <tcp_pbuf_prealloc+0xb8>
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <tcp_pbuf_prealloc+0xe0>)
 800a590:	f240 120b 	movw	r2, #267	; 0x10b
 800a594:	490f      	ldr	r1, [pc, #60]	; (800a5d4 <tcp_pbuf_prealloc+0xf0>)
 800a596:	480d      	ldr	r0, [pc, #52]	; (800a5cc <tcp_pbuf_prealloc+0xe8>)
 800a598:	f004 fcb0 	bl	800eefc <iprintf>
  *oversize = p->len - length;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	895a      	ldrh	r2, [r3, #10]
 800a5a0:	89bb      	ldrh	r3, [r7, #12]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	89ba      	ldrh	r2, [r7, #12]
 800a5ae:	811a      	strh	r2, [r3, #8]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	891a      	ldrh	r2, [r3, #8]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	815a      	strh	r2, [r3, #10]
  return p;
 800a5b8:	693b      	ldr	r3, [r7, #16]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	080119b4 	.word	0x080119b4
 800a5c8:	08011a6c 	.word	0x08011a6c
 800a5cc:	08011a08 	.word	0x08011a08
 800a5d0:	08011a90 	.word	0x08011a90
 800a5d4:	08011ab0 	.word	0x08011ab0

0800a5d8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <tcp_write_checks+0x20>
 800a5ea:	4b33      	ldr	r3, [pc, #204]	; (800a6b8 <tcp_write_checks+0xe0>)
 800a5ec:	f240 1233 	movw	r2, #307	; 0x133
 800a5f0:	4932      	ldr	r1, [pc, #200]	; (800a6bc <tcp_write_checks+0xe4>)
 800a5f2:	4833      	ldr	r0, [pc, #204]	; (800a6c0 <tcp_write_checks+0xe8>)
 800a5f4:	f004 fc82 	bl	800eefc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7d1b      	ldrb	r3, [r3, #20]
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d00e      	beq.n	800a61e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a604:	2b07      	cmp	r3, #7
 800a606:	d00a      	beq.n	800a61e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d006      	beq.n	800a61e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a614:	2b03      	cmp	r3, #3
 800a616:	d002      	beq.n	800a61e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a618:	f06f 030a 	mvn.w	r3, #10
 800a61c:	e048      	b.n	800a6b0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a61e:	887b      	ldrh	r3, [r7, #2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <tcp_write_checks+0x50>
    return ERR_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	e043      	b.n	800a6b0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a62e:	887a      	ldrh	r2, [r7, #2]
 800a630:	429a      	cmp	r2, r3
 800a632:	d909      	bls.n	800a648 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	8b5b      	ldrh	r3, [r3, #26]
 800a638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	e033      	b.n	800a6b0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a64e:	2b08      	cmp	r3, #8
 800a650:	d909      	bls.n	800a666 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	8b5b      	ldrh	r3, [r3, #26]
 800a656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	e024      	b.n	800a6b0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00f      	beq.n	800a690 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a674:	2b00      	cmp	r3, #0
 800a676:	d11a      	bne.n	800a6ae <tcp_write_checks+0xd6>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d116      	bne.n	800a6ae <tcp_write_checks+0xd6>
 800a680:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <tcp_write_checks+0xe0>)
 800a682:	f240 1255 	movw	r2, #341	; 0x155
 800a686:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <tcp_write_checks+0xec>)
 800a688:	480d      	ldr	r0, [pc, #52]	; (800a6c0 <tcp_write_checks+0xe8>)
 800a68a:	f004 fc37 	bl	800eefc <iprintf>
 800a68e:	e00e      	b.n	800a6ae <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <tcp_write_checks+0xc8>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d006      	beq.n	800a6ae <tcp_write_checks+0xd6>
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <tcp_write_checks+0xe0>)
 800a6a2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a6a6:	4908      	ldr	r1, [pc, #32]	; (800a6c8 <tcp_write_checks+0xf0>)
 800a6a8:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <tcp_write_checks+0xe8>)
 800a6aa:	f004 fc27 	bl	800eefc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	080119b4 	.word	0x080119b4
 800a6bc:	08011ac4 	.word	0x08011ac4
 800a6c0:	08011a08 	.word	0x08011a08
 800a6c4:	08011ae4 	.word	0x08011ae4
 800a6c8:	08011b20 	.word	0x08011b20

0800a6cc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b09b      	sub	sp, #108	; 0x6c
 800a6d0:	af04      	add	r7, sp, #16
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	461a      	mov	r2, r3
 800a6da:	460b      	mov	r3, r1
 800a6dc:	80fb      	strh	r3, [r7, #6]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d109      	bne.n	800a728 <tcp_write+0x5c>
 800a714:	4ba4      	ldr	r3, [pc, #656]	; (800a9a8 <tcp_write+0x2dc>)
 800a716:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a71a:	49a4      	ldr	r1, [pc, #656]	; (800a9ac <tcp_write+0x2e0>)
 800a71c:	48a4      	ldr	r0, [pc, #656]	; (800a9b0 <tcp_write+0x2e4>)
 800a71e:	f004 fbed 	bl	800eefc <iprintf>
 800a722:	f06f 030f 	mvn.w	r3, #15
 800a726:	e32a      	b.n	800ad7e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	b29a      	uxth	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a736:	4293      	cmp	r3, r2
 800a738:	bf28      	it	cs
 800a73a:	4613      	movcs	r3, r2
 800a73c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a73e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <tcp_write+0x7e>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a748:	e000      	b.n	800a74c <tcp_write+0x80>
 800a74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a74c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <tcp_write+0x9c>
 800a754:	4b94      	ldr	r3, [pc, #592]	; (800a9a8 <tcp_write+0x2dc>)
 800a756:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a75a:	4996      	ldr	r1, [pc, #600]	; (800a9b4 <tcp_write+0x2e8>)
 800a75c:	4894      	ldr	r0, [pc, #592]	; (800a9b0 <tcp_write+0x2e4>)
 800a75e:	f004 fbcd 	bl	800eefc <iprintf>
 800a762:	f06f 030f 	mvn.w	r3, #15
 800a766:	e30a      	b.n	800ad7e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a768:	88fb      	ldrh	r3, [r7, #6]
 800a76a:	4619      	mov	r1, r3
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff ff33 	bl	800a5d8 <tcp_write_checks>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a778:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <tcp_write+0xba>
    return err;
 800a780:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a784:	e2fb      	b.n	800ad7e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a78c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 80f6 	beq.w	800a98c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7a4:	653b      	str	r3, [r7, #80]	; 0x50
 800a7a6:	e002      	b.n	800a7ae <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f8      	bne.n	800a7a8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7b8:	7a9b      	ldrb	r3, [r3, #10]
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a7c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c8:	891b      	ldrh	r3, [r3, #8]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	8c3b      	ldrh	r3, [r7, #32]
 800a7ce:	440b      	add	r3, r1
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	da06      	bge.n	800a7e2 <tcp_write+0x116>
 800a7d4:	4b74      	ldr	r3, [pc, #464]	; (800a9a8 <tcp_write+0x2dc>)
 800a7d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a7da:	4977      	ldr	r1, [pc, #476]	; (800a9b8 <tcp_write+0x2ec>)
 800a7dc:	4874      	ldr	r0, [pc, #464]	; (800a9b0 <tcp_write+0x2e4>)
 800a7de:	f004 fb8d 	bl	800eefc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e4:	891a      	ldrh	r2, [r3, #8]
 800a7e6:	8c3b      	ldrh	r3, [r7, #32]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7f8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a7fa:	8a7b      	ldrh	r3, [r7, #18]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d026      	beq.n	800a84e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a800:	8a7b      	ldrh	r3, [r7, #18]
 800a802:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a804:	429a      	cmp	r2, r3
 800a806:	d206      	bcs.n	800a816 <tcp_write+0x14a>
 800a808:	4b67      	ldr	r3, [pc, #412]	; (800a9a8 <tcp_write+0x2dc>)
 800a80a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a80e:	496b      	ldr	r1, [pc, #428]	; (800a9bc <tcp_write+0x2f0>)
 800a810:	4867      	ldr	r0, [pc, #412]	; (800a9b0 <tcp_write+0x2e4>)
 800a812:	f004 fb73 	bl	800eefc <iprintf>
      seg = last_unsent;
 800a816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a818:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a81a:	8a7b      	ldrh	r3, [r7, #18]
 800a81c:	88fa      	ldrh	r2, [r7, #6]
 800a81e:	4293      	cmp	r3, r2
 800a820:	bf28      	it	cs
 800a822:	4613      	movcs	r3, r2
 800a824:	b29b      	uxth	r3, r3
 800a826:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a828:	4293      	cmp	r3, r2
 800a82a:	bf28      	it	cs
 800a82c:	4613      	movcs	r3, r2
 800a82e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a830:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a836:	4413      	add	r3, r2
 800a838:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a83c:	8a7a      	ldrh	r2, [r7, #18]
 800a83e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	b29b      	uxth	r3, r3
 800a844:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a846:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a84e:	8a7b      	ldrh	r3, [r7, #18]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <tcp_write+0x1a0>
 800a854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a858:	88fb      	ldrh	r3, [r7, #6]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d006      	beq.n	800a86c <tcp_write+0x1a0>
 800a85e:	4b52      	ldr	r3, [pc, #328]	; (800a9a8 <tcp_write+0x2dc>)
 800a860:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a864:	4956      	ldr	r1, [pc, #344]	; (800a9c0 <tcp_write+0x2f4>)
 800a866:	4852      	ldr	r0, [pc, #328]	; (800a9b0 <tcp_write+0x2e4>)
 800a868:	f004 fb48 	bl	800eefc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a86c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a870:	88fb      	ldrh	r3, [r7, #6]
 800a872:	429a      	cmp	r2, r3
 800a874:	f080 8167 	bcs.w	800ab46 <tcp_write+0x47a>
 800a878:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8163 	beq.w	800ab46 <tcp_write+0x47a>
 800a880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a882:	891b      	ldrh	r3, [r3, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 815e 	beq.w	800ab46 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a88a:	88fa      	ldrh	r2, [r7, #6]
 800a88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a890:	1ad2      	subs	r2, r2, r3
 800a892:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a894:	4293      	cmp	r3, r2
 800a896:	bfa8      	it	ge
 800a898:	4613      	movge	r3, r2
 800a89a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a89e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a8a0:	797b      	ldrb	r3, [r7, #5]
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d027      	beq.n	800a8fa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a8aa:	f107 0012 	add.w	r0, r7, #18
 800a8ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a8b0:	8bf9      	ldrh	r1, [r7, #30]
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	797b      	ldrb	r3, [r7, #5]
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f7ff fe0f 	bl	800a4e4 <tcp_pbuf_prealloc>
 800a8c6:	6578      	str	r0, [r7, #84]	; 0x54
 800a8c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 8225 	beq.w	800ad1a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a8d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8d2:	6858      	ldr	r0, [r3, #4]
 800a8d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	4413      	add	r3, r2
 800a8dc:	8bfa      	ldrh	r2, [r7, #30]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	f004 fadc 	bl	800ee9c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a8e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a8e6:	f7fb f9fb 	bl	8005ce0 <pbuf_clen>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a8f8:	e041      	b.n	800a97e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a900:	e002      	b.n	800a908 <tcp_write+0x23c>
 800a902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	637b      	str	r3, [r7, #52]	; 0x34
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1f8      	bne.n	800a902 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a912:	7b1b      	ldrb	r3, [r3, #12]
 800a914:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d115      	bne.n	800a948 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a922:	8952      	ldrh	r2, [r2, #10]
 800a924:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d10d      	bne.n	800a948 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a92c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <tcp_write+0x276>
 800a934:	4b1c      	ldr	r3, [pc, #112]	; (800a9a8 <tcp_write+0x2dc>)
 800a936:	f240 2231 	movw	r2, #561	; 0x231
 800a93a:	4922      	ldr	r1, [pc, #136]	; (800a9c4 <tcp_write+0x2f8>)
 800a93c:	481c      	ldr	r0, [pc, #112]	; (800a9b0 <tcp_write+0x2e4>)
 800a93e:	f004 fadd 	bl	800eefc <iprintf>
          extendlen = seglen;
 800a942:	8bfb      	ldrh	r3, [r7, #30]
 800a944:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a946:	e01a      	b.n	800a97e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a948:	8bfb      	ldrh	r3, [r7, #30]
 800a94a:	2201      	movs	r2, #1
 800a94c:	4619      	mov	r1, r3
 800a94e:	2000      	movs	r0, #0
 800a950:	f7fa fe5a 	bl	8005608 <pbuf_alloc>
 800a954:	6578      	str	r0, [r7, #84]	; 0x54
 800a956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 81e0 	beq.w	800ad1e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a95e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	441a      	add	r2, r3
 800a966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a968:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a96a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a96c:	f7fb f9b8 	bl	8005ce0 <pbuf_clen>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a978:	4413      	add	r3, r2
 800a97a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a97e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a982:	8bfb      	ldrh	r3, [r7, #30]
 800a984:	4413      	add	r3, r2
 800a986:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a98a:	e0dc      	b.n	800ab46 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 80d7 	beq.w	800ab46 <tcp_write+0x47a>
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <tcp_write+0x2dc>)
 800a99a:	f240 224a 	movw	r2, #586	; 0x24a
 800a99e:	490a      	ldr	r1, [pc, #40]	; (800a9c8 <tcp_write+0x2fc>)
 800a9a0:	4803      	ldr	r0, [pc, #12]	; (800a9b0 <tcp_write+0x2e4>)
 800a9a2:	f004 faab 	bl	800eefc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a9a6:	e0ce      	b.n	800ab46 <tcp_write+0x47a>
 800a9a8:	080119b4 	.word	0x080119b4
 800a9ac:	08011b54 	.word	0x08011b54
 800a9b0:	08011a08 	.word	0x08011a08
 800a9b4:	08011b6c 	.word	0x08011b6c
 800a9b8:	08011ba0 	.word	0x08011ba0
 800a9bc:	08011bb8 	.word	0x08011bb8
 800a9c0:	08011bd8 	.word	0x08011bd8
 800a9c4:	08011bf8 	.word	0x08011bf8
 800a9c8:	08011c24 	.word	0x08011c24
    struct pbuf *p;
    u16_t left = len - pos;
 800a9cc:	88fa      	ldrh	r2, [r7, #6]
 800a9ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a9d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a9e2:	8b7a      	ldrh	r2, [r7, #26]
 800a9e4:	8bbb      	ldrh	r3, [r7, #28]
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bf28      	it	cs
 800a9ea:	4613      	movcs	r3, r2
 800a9ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a9ee:	797b      	ldrb	r3, [r7, #5]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d036      	beq.n	800aa66 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a9f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	8b3b      	ldrh	r3, [r7, #24]
 800aa00:	4413      	add	r3, r2
 800aa02:	b299      	uxth	r1, r3
 800aa04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bf0c      	ite	eq
 800aa0a:	2301      	moveq	r3, #1
 800aa0c:	2300      	movne	r3, #0
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f107 0012 	add.w	r0, r7, #18
 800aa14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa16:	9302      	str	r3, [sp, #8]
 800aa18:	797b      	ldrb	r3, [r7, #5]
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	4603      	mov	r3, r0
 800aa22:	2036      	movs	r0, #54	; 0x36
 800aa24:	f7ff fd5e 	bl	800a4e4 <tcp_pbuf_prealloc>
 800aa28:	6338      	str	r0, [r7, #48]	; 0x30
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 8178 	beq.w	800ad22 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	895b      	ldrh	r3, [r3, #10]
 800aa36:	8b3a      	ldrh	r2, [r7, #24]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d906      	bls.n	800aa4a <tcp_write+0x37e>
 800aa3c:	4b8c      	ldr	r3, [pc, #560]	; (800ac70 <tcp_write+0x5a4>)
 800aa3e:	f240 2266 	movw	r2, #614	; 0x266
 800aa42:	498c      	ldr	r1, [pc, #560]	; (800ac74 <tcp_write+0x5a8>)
 800aa44:	488c      	ldr	r0, [pc, #560]	; (800ac78 <tcp_write+0x5ac>)
 800aa46:	f004 fa59 	bl	800eefc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa52:	18d0      	adds	r0, r2, r3
 800aa54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	8b3a      	ldrh	r2, [r7, #24]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f004 fa1c 	bl	800ee9c <memcpy>
 800aa64:	e02f      	b.n	800aac6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800aa66:	8a7b      	ldrh	r3, [r7, #18]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <tcp_write+0x3ae>
 800aa6c:	4b80      	ldr	r3, [pc, #512]	; (800ac70 <tcp_write+0x5a4>)
 800aa6e:	f240 2271 	movw	r2, #625	; 0x271
 800aa72:	4982      	ldr	r1, [pc, #520]	; (800ac7c <tcp_write+0x5b0>)
 800aa74:	4880      	ldr	r0, [pc, #512]	; (800ac78 <tcp_write+0x5ac>)
 800aa76:	f004 fa41 	bl	800eefc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800aa7a:	8b3b      	ldrh	r3, [r7, #24]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	4619      	mov	r1, r3
 800aa80:	2036      	movs	r0, #54	; 0x36
 800aa82:	f7fa fdc1 	bl	8005608 <pbuf_alloc>
 800aa86:	6178      	str	r0, [r7, #20]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 814b 	beq.w	800ad26 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800aa90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	441a      	add	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aa9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	2036      	movs	r0, #54	; 0x36
 800aaaa:	f7fa fdad 	bl	8005608 <pbuf_alloc>
 800aaae:	6338      	str	r0, [r7, #48]	; 0x30
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d103      	bne.n	800aabe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800aab6:	6978      	ldr	r0, [r7, #20]
 800aab8:	f7fb f88a 	bl	8005bd0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800aabc:	e136      	b.n	800ad2c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aac2:	f7fb f947 	bl	8005d54 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800aac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aac8:	f7fb f90a 	bl	8005ce0 <pbuf_clen>
 800aacc:	4603      	mov	r3, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aad4:	4413      	add	r3, r2
 800aad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800aada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d903      	bls.n	800aaea <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800aae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aae4:	f7fb f874 	bl	8005bd0 <pbuf_free>
      goto memerr;
 800aae8:	e120      	b.n	800ad2c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aaee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aaf2:	441a      	add	r2, r3
 800aaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	4613      	mov	r3, r2
 800aafc:	2200      	movs	r2, #0
 800aafe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fc51 	bl	800a3a8 <tcp_create_segment>
 800ab06:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ab08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 810d 	beq.w	800ad2a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ab10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <tcp_write+0x450>
      queue = seg;
 800ab16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab18:	647b      	str	r3, [r7, #68]	; 0x44
 800ab1a:	e00c      	b.n	800ab36 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ab1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <tcp_write+0x464>
 800ab22:	4b53      	ldr	r3, [pc, #332]	; (800ac70 <tcp_write+0x5a4>)
 800ab24:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ab28:	4955      	ldr	r1, [pc, #340]	; (800ac80 <tcp_write+0x5b4>)
 800ab2a:	4853      	ldr	r0, [pc, #332]	; (800ac78 <tcp_write+0x5ac>)
 800ab2c:	f004 f9e6 	bl	800eefc <iprintf>
      prev_seg->next = seg;
 800ab30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab34:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ab36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab38:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ab3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ab3e:	8b3b      	ldrh	r3, [r7, #24]
 800ab40:	4413      	add	r3, r2
 800ab42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ab46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ab4a:	88fb      	ldrh	r3, [r7, #6]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	f4ff af3d 	bcc.w	800a9cc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ab52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d02c      	beq.n	800abb2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ab58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab5e:	e01e      	b.n	800ab9e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	891a      	ldrh	r2, [r3, #8]
 800ab64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab66:	4413      	add	r3, r2
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d110      	bne.n	800ab98 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7c:	8952      	ldrh	r2, [r2, #10]
 800ab7e:	4413      	add	r3, r2
 800ab80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f004 f989 	bl	800ee9c <memcpy>
        p->len += oversize_used;
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	895a      	ldrh	r2, [r3, #10]
 800ab8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ab90:	4413      	add	r3, r2
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1dd      	bne.n	800ab60 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800aba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba6:	891a      	ldrh	r2, [r3, #8]
 800aba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800abaa:	4413      	add	r3, r2
 800abac:	b29a      	uxth	r2, r3
 800abae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800abb2:	8a7a      	ldrh	r2, [r7, #18]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800abba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d018      	beq.n	800abf2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800abc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <tcp_write+0x508>
 800abc6:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <tcp_write+0x5a4>)
 800abc8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800abcc:	492d      	ldr	r1, [pc, #180]	; (800ac84 <tcp_write+0x5b8>)
 800abce:	482a      	ldr	r0, [pc, #168]	; (800ac78 <tcp_write+0x5ac>)
 800abd0:	f004 f994 	bl	800eefc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800abd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fb f8ba 	bl	8005d54 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800abe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abe2:	891a      	ldrh	r2, [r3, #8]
 800abe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abe6:	891b      	ldrh	r3, [r3, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	b29a      	uxth	r2, r3
 800abec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abee:	811a      	strh	r2, [r3, #8]
 800abf0:	e037      	b.n	800ac62 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800abf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d034      	beq.n	800ac62 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800abf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <tcp_write+0x53a>
 800abfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <tcp_write+0x548>
 800ac06:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <tcp_write+0x5a4>)
 800ac08:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ac0c:	491e      	ldr	r1, [pc, #120]	; (800ac88 <tcp_write+0x5bc>)
 800ac0e:	481a      	ldr	r0, [pc, #104]	; (800ac78 <tcp_write+0x5ac>)
 800ac10:	f004 f974 	bl	800eefc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ac14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac1a:	e009      	b.n	800ac30 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	891a      	ldrh	r2, [r3, #8]
 800ac20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac22:	4413      	add	r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1f1      	bne.n	800ac1c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	891a      	ldrh	r2, [r3, #8]
 800ac3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac3e:	4413      	add	r3, r2
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	895a      	ldrh	r2, [r3, #10]
 800ac4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac4c:	4413      	add	r3, r2
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ac54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac56:	891a      	ldrh	r2, [r3, #8]
 800ac58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac5a:	4413      	add	r3, r2
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac60:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ac62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d111      	bne.n	800ac8c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac6c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac6e:	e010      	b.n	800ac92 <tcp_write+0x5c6>
 800ac70:	080119b4 	.word	0x080119b4
 800ac74:	08011c54 	.word	0x08011c54
 800ac78:	08011a08 	.word	0x08011a08
 800ac7c:	08011c94 	.word	0x08011c94
 800ac80:	08011ca4 	.word	0x08011ca4
 800ac84:	08011cb8 	.word	0x08011cb8
 800ac88:	08011cf0 	.word	0x08011cf0
  } else {
    last_unsent->next = queue;
 800ac8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac90:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac96:	88fb      	ldrh	r3, [r7, #6]
 800ac98:	441a      	add	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800aca4:	88fb      	ldrh	r3, [r7, #6]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800acb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <tcp_write+0x616>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <tcp_write+0x616>
 800acd4:	4b2c      	ldr	r3, [pc, #176]	; (800ad88 <tcp_write+0x6bc>)
 800acd6:	f240 3212 	movw	r2, #786	; 0x312
 800acda:	492c      	ldr	r1, [pc, #176]	; (800ad8c <tcp_write+0x6c0>)
 800acdc:	482c      	ldr	r0, [pc, #176]	; (800ad90 <tcp_write+0x6c4>)
 800acde:	f004 f90d 	bl	800eefc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ace2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d016      	beq.n	800ad16 <tcp_write+0x64a>
 800ace8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d012      	beq.n	800ad16 <tcp_write+0x64a>
 800acf0:	797b      	ldrb	r3, [r7, #5]
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10d      	bne.n	800ad16 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800acfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	899b      	ldrh	r3, [r3, #12]
 800ad00:	b29c      	uxth	r4, r3
 800ad02:	2008      	movs	r0, #8
 800ad04:	f7f9 fcb0 	bl	8004668 <lwip_htons>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4322      	orrs	r2, r4
 800ad12:	b292      	uxth	r2, r2
 800ad14:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e031      	b.n	800ad7e <tcp_write+0x6b2>
          goto memerr;
 800ad1a:	bf00      	nop
 800ad1c:	e006      	b.n	800ad2c <tcp_write+0x660>
            goto memerr;
 800ad1e:	bf00      	nop
 800ad20:	e004      	b.n	800ad2c <tcp_write+0x660>
        goto memerr;
 800ad22:	bf00      	nop
 800ad24:	e002      	b.n	800ad2c <tcp_write+0x660>
        goto memerr;
 800ad26:	bf00      	nop
 800ad28:	e000      	b.n	800ad2c <tcp_write+0x660>
      goto memerr;
 800ad2a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	8b5b      	ldrh	r3, [r3, #26]
 800ad30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ad3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ad40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ad42:	f7fa ff45 	bl	8005bd0 <pbuf_free>
  }
  if (queue != NULL) {
 800ad46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ad4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad4e:	f7fc fb8d 	bl	800746c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00e      	beq.n	800ad7a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <tcp_write+0x6ae>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <tcp_write+0x6ae>
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <tcp_write+0x6bc>)
 800ad6e:	f240 3227 	movw	r2, #807	; 0x327
 800ad72:	4906      	ldr	r1, [pc, #24]	; (800ad8c <tcp_write+0x6c0>)
 800ad74:	4806      	ldr	r0, [pc, #24]	; (800ad90 <tcp_write+0x6c4>)
 800ad76:	f004 f8c1 	bl	800eefc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ad7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	375c      	adds	r7, #92	; 0x5c
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd90      	pop	{r4, r7, pc}
 800ad86:	bf00      	nop
 800ad88:	080119b4 	.word	0x080119b4
 800ad8c:	08011d28 	.word	0x08011d28
 800ad90:	08011a08 	.word	0x08011a08

0800ad94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b08b      	sub	sp, #44	; 0x2c
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <tcp_split_unsent_seg+0x2c>
 800adb2:	4b95      	ldr	r3, [pc, #596]	; (800b008 <tcp_split_unsent_seg+0x274>)
 800adb4:	f240 324b 	movw	r2, #843	; 0x34b
 800adb8:	4994      	ldr	r1, [pc, #592]	; (800b00c <tcp_split_unsent_seg+0x278>)
 800adba:	4895      	ldr	r0, [pc, #596]	; (800b010 <tcp_split_unsent_seg+0x27c>)
 800adbc:	f004 f89e 	bl	800eefc <iprintf>

  useg = pcb->unsent;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e116      	b.n	800b000 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800add2:	887b      	ldrh	r3, [r7, #2]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d109      	bne.n	800adec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800add8:	4b8b      	ldr	r3, [pc, #556]	; (800b008 <tcp_split_unsent_seg+0x274>)
 800adda:	f240 3253 	movw	r2, #851	; 0x353
 800adde:	498d      	ldr	r1, [pc, #564]	; (800b014 <tcp_split_unsent_seg+0x280>)
 800ade0:	488b      	ldr	r0, [pc, #556]	; (800b010 <tcp_split_unsent_seg+0x27c>)
 800ade2:	f004 f88b 	bl	800eefc <iprintf>
    return ERR_VAL;
 800ade6:	f06f 0305 	mvn.w	r3, #5
 800adea:	e109      	b.n	800b000 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	891b      	ldrh	r3, [r3, #8]
 800adf0:	887a      	ldrh	r2, [r7, #2]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d301      	bcc.n	800adfa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	e102      	b.n	800b000 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adfe:	887a      	ldrh	r2, [r7, #2]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d906      	bls.n	800ae12 <tcp_split_unsent_seg+0x7e>
 800ae04:	4b80      	ldr	r3, [pc, #512]	; (800b008 <tcp_split_unsent_seg+0x274>)
 800ae06:	f240 325b 	movw	r2, #859	; 0x35b
 800ae0a:	4983      	ldr	r1, [pc, #524]	; (800b018 <tcp_split_unsent_seg+0x284>)
 800ae0c:	4880      	ldr	r0, [pc, #512]	; (800b010 <tcp_split_unsent_seg+0x27c>)
 800ae0e:	f004 f875 	bl	800eefc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	891b      	ldrh	r3, [r3, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <tcp_split_unsent_seg+0x94>
 800ae1a:	4b7b      	ldr	r3, [pc, #492]	; (800b008 <tcp_split_unsent_seg+0x274>)
 800ae1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ae20:	497e      	ldr	r1, [pc, #504]	; (800b01c <tcp_split_unsent_seg+0x288>)
 800ae22:	487b      	ldr	r0, [pc, #492]	; (800b010 <tcp_split_unsent_seg+0x27c>)
 800ae24:	f004 f86a 	bl	800eefc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	7a9b      	ldrb	r3, [r3, #10]
 800ae2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	891a      	ldrh	r2, [r3, #8]
 800ae3e:	887b      	ldrh	r3, [r7, #2]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	89bb      	ldrh	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae52:	4619      	mov	r1, r3
 800ae54:	2036      	movs	r0, #54	; 0x36
 800ae56:	f7fa fbd7 	bl	8005608 <pbuf_alloc>
 800ae5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80b7 	beq.w	800afd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	891a      	ldrh	r2, [r3, #8]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	891b      	ldrh	r3, [r3, #8]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	887b      	ldrh	r3, [r7, #2]
 800ae74:	4413      	add	r3, r2
 800ae76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	6858      	ldr	r0, [r3, #4]
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	18d1      	adds	r1, r2, r3
 800ae84:	897b      	ldrh	r3, [r7, #10]
 800ae86:	89ba      	ldrh	r2, [r7, #12]
 800ae88:	f7fb f88c 	bl	8005fa4 <pbuf_copy_partial>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	89bb      	ldrh	r3, [r7, #12]
 800ae92:	4293      	cmp	r3, r2
 800ae94:	f040 809f 	bne.w	800afd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	899b      	ldrh	r3, [r3, #12]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f9 fbe1 	bl	8004668 <lwip_htons>
 800aea6:	4603      	mov	r3, r0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800aeb4:	7efb      	ldrb	r3, [r7, #27]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d007      	beq.n	800aece <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800aebe:	7efb      	ldrb	r3, [r7, #27]
 800aec0:	f023 0308 	bic.w	r3, r3, #8
 800aec4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800aec6:	7ebb      	ldrb	r3, [r7, #26]
 800aec8:	f043 0308 	orr.w	r3, r3, #8
 800aecc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800aece:	7efb      	ldrb	r3, [r7, #27]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800aed8:	7efb      	ldrb	r3, [r7, #27]
 800aeda:	f023 0301 	bic.w	r3, r3, #1
 800aede:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aee0:	7ebb      	ldrb	r3, [r7, #26]
 800aee2:	f043 0301 	orr.w	r3, r3, #1
 800aee6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f9 fbcf 	bl	8004692 <lwip_htonl>
 800aef4:	4602      	mov	r2, r0
 800aef6:	887b      	ldrh	r3, [r7, #2]
 800aef8:	18d1      	adds	r1, r2, r3
 800aefa:	7eba      	ldrb	r2, [r7, #26]
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	460b      	mov	r3, r1
 800af02:	6939      	ldr	r1, [r7, #16]
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff fa4f 	bl	800a3a8 <tcp_create_segment>
 800af0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d063      	beq.n	800afda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	f7fa fee2 	bl	8005ce0 <pbuf_clen>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6858      	ldr	r0, [r3, #4]
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	891a      	ldrh	r2, [r3, #8]
 800af3a:	89bb      	ldrh	r3, [r7, #12]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	b29b      	uxth	r3, r3
 800af40:	4619      	mov	r1, r3
 800af42:	f7fa fcbf 	bl	80058c4 <pbuf_realloc>
  useg->len -= remainder;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	891a      	ldrh	r2, [r3, #8]
 800af4a:	89bb      	ldrh	r3, [r7, #12]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	b29a      	uxth	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	899b      	ldrh	r3, [r3, #12]
 800af5a:	b29c      	uxth	r4, r3
 800af5c:	7efb      	ldrb	r3, [r7, #27]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	4618      	mov	r0, r3
 800af62:	f7f9 fb81 	bl	8004668 <lwip_htons>
 800af66:	4603      	mov	r3, r0
 800af68:	461a      	mov	r2, r3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	4322      	orrs	r2, r4
 800af70:	b292      	uxth	r2, r2
 800af72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fa feb1 	bl	8005ce0 <pbuf_clen>
 800af7e:	4603      	mov	r3, r0
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af88:	4413      	add	r3, r2
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7fa fea2 	bl	8005ce0 <pbuf_clen>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afa6:	4413      	add	r3, r2
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	e016      	b.n	800b000 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800afda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <tcp_split_unsent_seg+0x25c>
 800afe2:	4b09      	ldr	r3, [pc, #36]	; (800b008 <tcp_split_unsent_seg+0x274>)
 800afe4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800afe8:	490d      	ldr	r1, [pc, #52]	; (800b020 <tcp_split_unsent_seg+0x28c>)
 800afea:	4809      	ldr	r0, [pc, #36]	; (800b010 <tcp_split_unsent_seg+0x27c>)
 800afec:	f003 ff86 	bl	800eefc <iprintf>
  if (p != NULL) {
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800aff6:	6938      	ldr	r0, [r7, #16]
 800aff8:	f7fa fdea 	bl	8005bd0 <pbuf_free>
  }

  return ERR_MEM;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b000:	4618      	mov	r0, r3
 800b002:	3724      	adds	r7, #36	; 0x24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd90      	pop	{r4, r7, pc}
 800b008:	080119b4 	.word	0x080119b4
 800b00c:	08011d48 	.word	0x08011d48
 800b010:	08011a08 	.word	0x08011a08
 800b014:	08011d6c 	.word	0x08011d6c
 800b018:	08011d90 	.word	0x08011d90
 800b01c:	08011da0 	.word	0x08011da0
 800b020:	08011db0 	.word	0x08011db0

0800b024 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b024:	b590      	push	{r4, r7, lr}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <tcp_send_fin+0x1c>
 800b032:	4b21      	ldr	r3, [pc, #132]	; (800b0b8 <tcp_send_fin+0x94>)
 800b034:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b038:	4920      	ldr	r1, [pc, #128]	; (800b0bc <tcp_send_fin+0x98>)
 800b03a:	4821      	ldr	r0, [pc, #132]	; (800b0c0 <tcp_send_fin+0x9c>)
 800b03c:	f003 ff5e 	bl	800eefc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d02e      	beq.n	800b0a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	e002      	b.n	800b056 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1f8      	bne.n	800b050 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	899b      	ldrh	r3, [r3, #12]
 800b064:	b29b      	uxth	r3, r3
 800b066:	4618      	mov	r0, r3
 800b068:	f7f9 fafe 	bl	8004668 <lwip_htons>
 800b06c:	4603      	mov	r3, r0
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 0307 	and.w	r3, r3, #7
 800b074:	2b00      	cmp	r3, #0
 800b076:	d116      	bne.n	800b0a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	899b      	ldrh	r3, [r3, #12]
 800b07e:	b29c      	uxth	r4, r3
 800b080:	2001      	movs	r0, #1
 800b082:	f7f9 faf1 	bl	8004668 <lwip_htons>
 800b086:	4603      	mov	r3, r0
 800b088:	461a      	mov	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	4322      	orrs	r2, r4
 800b090:	b292      	uxth	r2, r2
 800b092:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	8b5b      	ldrh	r3, [r3, #26]
 800b098:	f043 0320 	orr.w	r3, r3, #32
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e004      	b.n	800b0b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f80b 	bl	800b0c4 <tcp_enqueue_flags>
 800b0ae:	4603      	mov	r3, r0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd90      	pop	{r4, r7, pc}
 800b0b8:	080119b4 	.word	0x080119b4
 800b0bc:	08011dbc 	.word	0x08011dbc
 800b0c0:	08011a08 	.word	0x08011a08

0800b0c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	; 0x28
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b0d8:	78fb      	ldrb	r3, [r7, #3]
 800b0da:	f003 0303 	and.w	r3, r3, #3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <tcp_enqueue_flags+0x2c>
 800b0e2:	4b67      	ldr	r3, [pc, #412]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b0e4:	f240 4211 	movw	r2, #1041	; 0x411
 800b0e8:	4966      	ldr	r1, [pc, #408]	; (800b284 <tcp_enqueue_flags+0x1c0>)
 800b0ea:	4867      	ldr	r0, [pc, #412]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b0ec:	f003 ff06 	bl	800eefc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <tcp_enqueue_flags+0x40>
 800b0f6:	4b62      	ldr	r3, [pc, #392]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b0f8:	f240 4213 	movw	r2, #1043	; 0x413
 800b0fc:	4963      	ldr	r1, [pc, #396]	; (800b28c <tcp_enqueue_flags+0x1c8>)
 800b0fe:	4862      	ldr	r0, [pc, #392]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b100:	f003 fefc 	bl	800eefc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b10e:	2301      	movs	r3, #1
 800b110:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b112:	7ffb      	ldrb	r3, [r7, #31]
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	b2db      	uxtb	r3, r3
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	b29b      	uxth	r3, r3
 800b122:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b126:	4619      	mov	r1, r3
 800b128:	2036      	movs	r0, #54	; 0x36
 800b12a:	f7fa fa6d 	bl	8005608 <pbuf_alloc>
 800b12e:	6138      	str	r0, [r7, #16]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8b5b      	ldrh	r3, [r3, #26]
 800b13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13e:	b29a      	uxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b144:	f04f 33ff 	mov.w	r3, #4294967295
 800b148:	e095      	b.n	800b276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	895a      	ldrh	r2, [r3, #10]
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	b29b      	uxth	r3, r3
 800b152:	429a      	cmp	r2, r3
 800b154:	d206      	bcs.n	800b164 <tcp_enqueue_flags+0xa0>
 800b156:	4b4a      	ldr	r3, [pc, #296]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b158:	f240 4239 	movw	r2, #1081	; 0x439
 800b15c:	494c      	ldr	r1, [pc, #304]	; (800b290 <tcp_enqueue_flags+0x1cc>)
 800b15e:	484a      	ldr	r0, [pc, #296]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b160:	f003 fecc 	bl	800eefc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b168:	78fa      	ldrb	r2, [r7, #3]
 800b16a:	7ffb      	ldrb	r3, [r7, #31]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	460b      	mov	r3, r1
 800b170:	6939      	ldr	r1, [r7, #16]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff f918 	bl	800a3a8 <tcp_create_segment>
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d109      	bne.n	800b194 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8b5b      	ldrh	r3, [r3, #26]
 800b184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b18e:	f04f 33ff 	mov.w	r3, #4294967295
 800b192:	e070      	b.n	800b276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0303 	and.w	r3, r3, #3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d006      	beq.n	800b1ae <tcp_enqueue_flags+0xea>
 800b1a0:	4b37      	ldr	r3, [pc, #220]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b1a2:	f240 4242 	movw	r2, #1090	; 0x442
 800b1a6:	493b      	ldr	r1, [pc, #236]	; (800b294 <tcp_enqueue_flags+0x1d0>)
 800b1a8:	4837      	ldr	r0, [pc, #220]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b1aa:	f003 fea7 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	891b      	ldrh	r3, [r3, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d006      	beq.n	800b1c4 <tcp_enqueue_flags+0x100>
 800b1b6:	4b32      	ldr	r3, [pc, #200]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b1b8:	f240 4243 	movw	r2, #1091	; 0x443
 800b1bc:	4936      	ldr	r1, [pc, #216]	; (800b298 <tcp_enqueue_flags+0x1d4>)
 800b1be:	4832      	ldr	r0, [pc, #200]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b1c0:	f003 fe9c 	bl	800eefc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d103      	bne.n	800b1d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b1d2:	e00d      	b.n	800b1f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d8:	61bb      	str	r3, [r7, #24]
 800b1da:	e002      	b.n	800b1e2 <tcp_enqueue_flags+0x11e>
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	61bb      	str	r3, [r7, #24]
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1f8      	bne.n	800b1dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d104      	bne.n	800b20c <tcp_enqueue_flags+0x148>
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b216:	78fb      	ldrb	r3, [r7, #3]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8b5b      	ldrh	r3, [r3, #26]
 800b224:	f043 0320 	orr.w	r3, r3, #32
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	4618      	mov	r0, r3
 800b234:	f7fa fd54 	bl	8005ce0 <pbuf_clen>
 800b238:	4603      	mov	r3, r0
 800b23a:	461a      	mov	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b242:	4413      	add	r3, r2
 800b244:	b29a      	uxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00e      	beq.n	800b274 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <tcp_enqueue_flags+0x1b0>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <tcp_enqueue_flags+0x1b0>
 800b266:	4b06      	ldr	r3, [pc, #24]	; (800b280 <tcp_enqueue_flags+0x1bc>)
 800b268:	f240 4265 	movw	r2, #1125	; 0x465
 800b26c:	490b      	ldr	r1, [pc, #44]	; (800b29c <tcp_enqueue_flags+0x1d8>)
 800b26e:	4806      	ldr	r0, [pc, #24]	; (800b288 <tcp_enqueue_flags+0x1c4>)
 800b270:	f003 fe44 	bl	800eefc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3720      	adds	r7, #32
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	080119b4 	.word	0x080119b4
 800b284:	08011dd8 	.word	0x08011dd8
 800b288:	08011a08 	.word	0x08011a08
 800b28c:	08011e30 	.word	0x08011e30
 800b290:	08011e50 	.word	0x08011e50
 800b294:	08011e8c 	.word	0x08011e8c
 800b298:	08011ea4 	.word	0x08011ea4
 800b29c:	08011ed0 	.word	0x08011ed0

0800b2a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b2a0:	b5b0      	push	{r4, r5, r7, lr}
 800b2a2:	b08a      	sub	sp, #40	; 0x28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <tcp_output+0x1c>
 800b2ae:	4b9e      	ldr	r3, [pc, #632]	; (800b528 <tcp_output+0x288>)
 800b2b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b2b4:	499d      	ldr	r1, [pc, #628]	; (800b52c <tcp_output+0x28c>)
 800b2b6:	489e      	ldr	r0, [pc, #632]	; (800b530 <tcp_output+0x290>)
 800b2b8:	f003 fe20 	bl	800eefc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	7d1b      	ldrb	r3, [r3, #20]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d106      	bne.n	800b2d2 <tcp_output+0x32>
 800b2c4:	4b98      	ldr	r3, [pc, #608]	; (800b528 <tcp_output+0x288>)
 800b2c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b2ca:	499a      	ldr	r1, [pc, #616]	; (800b534 <tcp_output+0x294>)
 800b2cc:	4898      	ldr	r0, [pc, #608]	; (800b530 <tcp_output+0x290>)
 800b2ce:	f003 fe15 	bl	800eefc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b2d2:	4b99      	ldr	r3, [pc, #612]	; (800b538 <tcp_output+0x298>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d101      	bne.n	800b2e0 <tcp_output+0x40>
    return ERR_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e1ce      	b.n	800b67e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8b5b      	ldrh	r3, [r3, #26]
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 81aa 	beq.w	800b664 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fdcb 	bl	800beac <tcp_send_empty_ack>
 800b316:	4603      	mov	r3, r0
 800b318:	e1b1      	b.n	800b67e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3304      	adds	r3, #4
 800b320:	461a      	mov	r2, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff f824 	bl	800a370 <tcp_route>
 800b328:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <tcp_output+0x96>
    return ERR_RTE;
 800b330:	f06f 0303 	mvn.w	r3, #3
 800b334:	e1a3      	b.n	800b67e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <tcp_output+0xa4>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d111      	bne.n	800b368 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <tcp_output+0xb0>
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	3304      	adds	r3, #4
 800b34e:	e000      	b.n	800b352 <tcp_output+0xb2>
 800b350:	2300      	movs	r3, #0
 800b352:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <tcp_output+0xc0>
      return ERR_RTE;
 800b35a:	f06f 0303 	mvn.w	r3, #3
 800b35e:	e18e      	b.n	800b67e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f9 f98f 	bl	8004692 <lwip_htonl>
 800b374:	4602      	mov	r2, r0
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b37e:	8912      	ldrh	r2, [r2, #8]
 800b380:	4413      	add	r3, r2
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	429a      	cmp	r2, r3
 800b386:	d227      	bcs.n	800b3d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b38e:	461a      	mov	r2, r3
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	4293      	cmp	r3, r2
 800b394:	d114      	bne.n	800b3c0 <tcp_output+0x120>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d110      	bne.n	800b3c0 <tcp_output+0x120>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10b      	bne.n	800b3c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8b5b      	ldrh	r3, [r3, #26]
 800b3c4:	f003 0302 	and.w	r3, r3, #2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 814d 	beq.w	800b668 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fd6c 	bl	800beac <tcp_send_empty_ack>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	e152      	b.n	800b67e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 811c 	beq.w	800b626 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b3ee:	e002      	b.n	800b3f6 <tcp_output+0x156>
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	623b      	str	r3, [r7, #32]
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1f8      	bne.n	800b3f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b3fe:	e112      	b.n	800b626 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	899b      	ldrh	r3, [r3, #12]
 800b406:	b29b      	uxth	r3, r3
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f9 f92d 	bl	8004668 <lwip_htons>
 800b40e:	4603      	mov	r3, r0
 800b410:	b2db      	uxtb	r3, r3
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d006      	beq.n	800b428 <tcp_output+0x188>
 800b41a:	4b43      	ldr	r3, [pc, #268]	; (800b528 <tcp_output+0x288>)
 800b41c:	f240 5236 	movw	r2, #1334	; 0x536
 800b420:	4946      	ldr	r1, [pc, #280]	; (800b53c <tcp_output+0x29c>)
 800b422:	4843      	ldr	r0, [pc, #268]	; (800b530 <tcp_output+0x290>)
 800b424:	f003 fd6a 	bl	800eefc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01f      	beq.n	800b470 <tcp_output+0x1d0>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8b5b      	ldrh	r3, [r3, #26]
 800b434:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d119      	bne.n	800b470 <tcp_output+0x1d0>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00b      	beq.n	800b45c <tcp_output+0x1bc>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d110      	bne.n	800b470 <tcp_output+0x1d0>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b452:	891a      	ldrh	r2, [r3, #8]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b458:	429a      	cmp	r2, r3
 800b45a:	d209      	bcs.n	800b470 <tcp_output+0x1d0>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <tcp_output+0x1d0>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d901      	bls.n	800b474 <tcp_output+0x1d4>
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <tcp_output+0x1d6>
 800b474:	2300      	movs	r3, #0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	8b5b      	ldrh	r3, [r3, #26]
 800b47e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 80e4 	beq.w	800b650 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7d1b      	ldrb	r3, [r3, #20]
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d00d      	beq.n	800b4ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	899b      	ldrh	r3, [r3, #12]
 800b496:	b29c      	uxth	r4, r3
 800b498:	2010      	movs	r0, #16
 800b49a:	f7f9 f8e5 	bl	8004668 <lwip_htons>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	4322      	orrs	r2, r4
 800b4a8:	b292      	uxth	r2, r2
 800b4aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4b2:	f000 f909 	bl	800b6c8 <tcp_output_segment>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8b5b      	ldrh	r3, [r3, #26]
 800b4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	835a      	strh	r2, [r3, #26]
      return err;
 800b4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d4:	e0d3      	b.n	800b67e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	7d1b      	ldrb	r3, [r3, #20]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d006      	beq.n	800b4f4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8b5b      	ldrh	r3, [r3, #26]
 800b4ea:	f023 0303 	bic.w	r3, r3, #3
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f9 f8c9 	bl	8004692 <lwip_htonl>
 800b500:	4604      	mov	r4, r0
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	461d      	mov	r5, r3
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	899b      	ldrh	r3, [r3, #12]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	4618      	mov	r0, r3
 800b512:	f7f9 f8a9 	bl	8004668 <lwip_htons>
 800b516:	4603      	mov	r3, r0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00e      	beq.n	800b540 <tcp_output+0x2a0>
 800b522:	2301      	movs	r3, #1
 800b524:	e00d      	b.n	800b542 <tcp_output+0x2a2>
 800b526:	bf00      	nop
 800b528:	080119b4 	.word	0x080119b4
 800b52c:	08011ef8 	.word	0x08011ef8
 800b530:	08011a08 	.word	0x08011a08
 800b534:	08011f10 	.word	0x08011f10
 800b538:	20008ac8 	.word	0x20008ac8
 800b53c:	08011f38 	.word	0x08011f38
 800b540:	2300      	movs	r3, #0
 800b542:	442b      	add	r3, r5
 800b544:	4423      	add	r3, r4
 800b546:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	da02      	bge.n	800b55a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	891b      	ldrh	r3, [r3, #8]
 800b55e:	461c      	mov	r4, r3
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	899b      	ldrh	r3, [r3, #12]
 800b566:	b29b      	uxth	r3, r3
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f9 f87d 	bl	8004668 <lwip_htons>
 800b56e:	4603      	mov	r3, r0
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <tcp_output+0x2de>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <tcp_output+0x2e0>
 800b57e:	2300      	movs	r3, #0
 800b580:	4423      	add	r3, r4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d049      	beq.n	800b61a <tcp_output+0x37a>
      seg->next = NULL;
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <tcp_output+0x300>
        pcb->unacked = seg;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b598:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	623b      	str	r3, [r7, #32]
 800b59e:	e03f      	b.n	800b620 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7f9 f873 	bl	8004692 <lwip_htonl>
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7f9 f86c 	bl	8004692 <lwip_htonl>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	1ae3      	subs	r3, r4, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da24      	bge.n	800b60c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3370      	adds	r3, #112	; 0x70
 800b5c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b5c8:	e002      	b.n	800b5d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d011      	beq.n	800b5fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f9 f856 	bl	8004692 <lwip_htonl>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f9 f84f 	bl	8004692 <lwip_htonl>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dbe6      	blt.n	800b5ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	e009      	b.n	800b620 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b60c:	6a3b      	ldr	r3, [r7, #32]
 800b60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b610:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b612:	6a3b      	ldr	r3, [r7, #32]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	623b      	str	r3, [r7, #32]
 800b618:	e002      	b.n	800b620 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b61c:	f7fb ff3b 	bl	8007496 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b624:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d012      	beq.n	800b652 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	4618      	mov	r0, r3
 800b634:	f7f9 f82d 	bl	8004692 <lwip_htonl>
 800b638:	4602      	mov	r2, r0
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b642:	8912      	ldrh	r2, [r2, #8]
 800b644:	4413      	add	r3, r2
  while (seg != NULL &&
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	429a      	cmp	r2, r3
 800b64a:	f4bf aed9 	bcs.w	800b400 <tcp_output+0x160>
 800b64e:	e000      	b.n	800b652 <tcp_output+0x3b2>
      break;
 800b650:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d108      	bne.n	800b66c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b662:	e004      	b.n	800b66e <tcp_output+0x3ce>
    goto output_done;
 800b664:	bf00      	nop
 800b666:	e002      	b.n	800b66e <tcp_output+0x3ce>
    goto output_done;
 800b668:	bf00      	nop
 800b66a:	e000      	b.n	800b66e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b66c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8b5b      	ldrh	r3, [r3, #26]
 800b672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3728      	adds	r7, #40	; 0x28
 800b682:	46bd      	mov	sp, r7
 800b684:	bdb0      	pop	{r4, r5, r7, pc}
 800b686:	bf00      	nop

0800b688 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d106      	bne.n	800b6a4 <tcp_output_segment_busy+0x1c>
 800b696:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <tcp_output_segment_busy+0x34>)
 800b698:	f240 529a 	movw	r2, #1434	; 0x59a
 800b69c:	4908      	ldr	r1, [pc, #32]	; (800b6c0 <tcp_output_segment_busy+0x38>)
 800b69e:	4809      	ldr	r0, [pc, #36]	; (800b6c4 <tcp_output_segment_busy+0x3c>)
 800b6a0:	f003 fc2c 	bl	800eefc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	7b9b      	ldrb	r3, [r3, #14]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d001      	beq.n	800b6b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e000      	b.n	800b6b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	080119b4 	.word	0x080119b4
 800b6c0:	08011f50 	.word	0x08011f50
 800b6c4:	08011a08 	.word	0x08011a08

0800b6c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b08c      	sub	sp, #48	; 0x30
 800b6cc:	af04      	add	r7, sp, #16
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <tcp_output_segment+0x20>
 800b6da:	4b63      	ldr	r3, [pc, #396]	; (800b868 <tcp_output_segment+0x1a0>)
 800b6dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b6e0:	4962      	ldr	r1, [pc, #392]	; (800b86c <tcp_output_segment+0x1a4>)
 800b6e2:	4863      	ldr	r0, [pc, #396]	; (800b870 <tcp_output_segment+0x1a8>)
 800b6e4:	f003 fc0a 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d106      	bne.n	800b6fc <tcp_output_segment+0x34>
 800b6ee:	4b5e      	ldr	r3, [pc, #376]	; (800b868 <tcp_output_segment+0x1a0>)
 800b6f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b6f4:	495f      	ldr	r1, [pc, #380]	; (800b874 <tcp_output_segment+0x1ac>)
 800b6f6:	485e      	ldr	r0, [pc, #376]	; (800b870 <tcp_output_segment+0x1a8>)
 800b6f8:	f003 fc00 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d106      	bne.n	800b710 <tcp_output_segment+0x48>
 800b702:	4b59      	ldr	r3, [pc, #356]	; (800b868 <tcp_output_segment+0x1a0>)
 800b704:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b708:	495b      	ldr	r1, [pc, #364]	; (800b878 <tcp_output_segment+0x1b0>)
 800b70a:	4859      	ldr	r0, [pc, #356]	; (800b870 <tcp_output_segment+0x1a8>)
 800b70c:	f003 fbf6 	bl	800eefc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff ffb9 	bl	800b688 <tcp_output_segment_busy>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	e09f      	b.n	800b860 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68dc      	ldr	r4, [r3, #12]
 800b728:	4610      	mov	r0, r2
 800b72a:	f7f8 ffb2 	bl	8004692 <lwip_htonl>
 800b72e:	4603      	mov	r3, r0
 800b730:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68dc      	ldr	r4, [r3, #12]
 800b73a:	4610      	mov	r0, r2
 800b73c:	f7f8 ff94 	bl	8004668 <lwip_htons>
 800b740:	4603      	mov	r3, r0
 800b742:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b74c:	441a      	add	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	3314      	adds	r3, #20
 800b758:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	7a9b      	ldrb	r3, [r3, #10]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d015      	beq.n	800b792 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	3304      	adds	r3, #4
 800b76a:	461a      	mov	r2, r3
 800b76c:	6879      	ldr	r1, [r7, #4]
 800b76e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b772:	f7fc fa37 	bl	8007be4 <tcp_eff_send_mss_netif>
 800b776:	4603      	mov	r3, r0
 800b778:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b77a:	8b7b      	ldrh	r3, [r7, #26]
 800b77c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b780:	4618      	mov	r0, r3
 800b782:	f7f8 ff86 	bl	8004692 <lwip_htonl>
 800b786:	4602      	mov	r2, r0
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	3304      	adds	r3, #4
 800b790:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	da02      	bge.n	800b7a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10c      	bne.n	800b7c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b7aa:	4b34      	ldr	r3, [pc, #208]	; (800b87c <tcp_output_segment+0x1b4>)
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f8 ff6a 	bl	8004692 <lwip_htonl>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	8959      	ldrh	r1, [r3, #10]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	8b3a      	ldrh	r2, [r7, #24]
 800b7de:	1a8a      	subs	r2, r1, r2
 800b7e0:	b292      	uxth	r2, r2
 800b7e2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	8919      	ldrh	r1, [r3, #8]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	8b3a      	ldrh	r2, [r7, #24]
 800b7f0:	1a8a      	subs	r2, r1, r2
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	68d2      	ldr	r2, [r2, #12]
 800b7fe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	741a      	strb	r2, [r3, #16]
 800b808:	2200      	movs	r2, #0
 800b80a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f103 0214 	add.w	r2, r3, #20
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	7a9b      	ldrb	r3, [r3, #10]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	4413      	add	r3, r2
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	429a      	cmp	r2, r3
 800b824:	d006      	beq.n	800b834 <tcp_output_segment+0x16c>
 800b826:	4b10      	ldr	r3, [pc, #64]	; (800b868 <tcp_output_segment+0x1a0>)
 800b828:	f240 621c 	movw	r2, #1564	; 0x61c
 800b82c:	4914      	ldr	r1, [pc, #80]	; (800b880 <tcp_output_segment+0x1b8>)
 800b82e:	4810      	ldr	r0, [pc, #64]	; (800b870 <tcp_output_segment+0x1a8>)
 800b830:	f003 fb64 	bl	800eefc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6858      	ldr	r0, [r3, #4]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	1d1c      	adds	r4, r3, #4
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	7add      	ldrb	r5, [r3, #11]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	7a9b      	ldrb	r3, [r3, #10]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	9202      	str	r2, [sp, #8]
 800b84a:	2206      	movs	r2, #6
 800b84c:	9201      	str	r2, [sp, #4]
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	462b      	mov	r3, r5
 800b852:	4622      	mov	r2, r4
 800b854:	f002 fa36 	bl	800dcc4 <ip4_output_if>
 800b858:	4603      	mov	r3, r0
 800b85a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b85c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bdb0      	pop	{r4, r5, r7, pc}
 800b868:	080119b4 	.word	0x080119b4
 800b86c:	08011f78 	.word	0x08011f78
 800b870:	08011a08 	.word	0x08011a08
 800b874:	08011f98 	.word	0x08011f98
 800b878:	08011fb8 	.word	0x08011fb8
 800b87c:	20008ab8 	.word	0x20008ab8
 800b880:	08011fdc 	.word	0x08011fdc

0800b884 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b884:	b5b0      	push	{r4, r5, r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <tcp_rexmit_rto_prepare+0x1c>
 800b892:	4b31      	ldr	r3, [pc, #196]	; (800b958 <tcp_rexmit_rto_prepare+0xd4>)
 800b894:	f240 6263 	movw	r2, #1635	; 0x663
 800b898:	4930      	ldr	r1, [pc, #192]	; (800b95c <tcp_rexmit_rto_prepare+0xd8>)
 800b89a:	4831      	ldr	r0, [pc, #196]	; (800b960 <tcp_rexmit_rto_prepare+0xdc>)
 800b89c:	f003 fb2e 	bl	800eefc <iprintf>

  if (pcb->unacked == NULL) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b8a8:	f06f 0305 	mvn.w	r3, #5
 800b8ac:	e050      	b.n	800b950 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	e00b      	b.n	800b8ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7ff fee6 	bl	800b688 <tcp_output_segment_busy>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b8c2:	f06f 0305 	mvn.w	r3, #5
 800b8c6:	e043      	b.n	800b950 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1ef      	bne.n	800b8b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fed6 	bl	800b688 <tcp_output_segment_busy>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b8e2:	f06f 0305 	mvn.w	r3, #5
 800b8e6:	e033      	b.n	800b950 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8b5b      	ldrh	r3, [r3, #26]
 800b902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	f7f8 febd 	bl	8004692 <lwip_htonl>
 800b918:	4604      	mov	r4, r0
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	891b      	ldrh	r3, [r3, #8]
 800b91e:	461d      	mov	r5, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	899b      	ldrh	r3, [r3, #12]
 800b926:	b29b      	uxth	r3, r3
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f8 fe9d 	bl	8004668 <lwip_htons>
 800b92e:	4603      	mov	r3, r0
 800b930:	b2db      	uxtb	r3, r3
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <tcp_rexmit_rto_prepare+0xba>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <tcp_rexmit_rto_prepare+0xbc>
 800b93e:	2300      	movs	r3, #0
 800b940:	442b      	add	r3, r5
 800b942:	18e2      	adds	r2, r4, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bdb0      	pop	{r4, r5, r7, pc}
 800b958:	080119b4 	.word	0x080119b4
 800b95c:	08011ff0 	.word	0x08011ff0
 800b960:	08011a08 	.word	0x08011a08

0800b964 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d106      	bne.n	800b980 <tcp_rexmit_rto_commit+0x1c>
 800b972:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <tcp_rexmit_rto_commit+0x44>)
 800b974:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b978:	490c      	ldr	r1, [pc, #48]	; (800b9ac <tcp_rexmit_rto_commit+0x48>)
 800b97a:	480d      	ldr	r0, [pc, #52]	; (800b9b0 <tcp_rexmit_rto_commit+0x4c>)
 800b97c:	f003 fabe 	bl	800eefc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b986:	2bff      	cmp	r3, #255	; 0xff
 800b988:	d007      	beq.n	800b99a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b990:	3301      	adds	r3, #1
 800b992:	b2da      	uxtb	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fc80 	bl	800b2a0 <tcp_output>
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	080119b4 	.word	0x080119b4
 800b9ac:	08012014 	.word	0x08012014
 800b9b0:	08011a08 	.word	0x08011a08

0800b9b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d106      	bne.n	800b9d0 <tcp_rexmit_rto+0x1c>
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <tcp_rexmit_rto+0x38>)
 800b9c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b9c8:	4909      	ldr	r1, [pc, #36]	; (800b9f0 <tcp_rexmit_rto+0x3c>)
 800b9ca:	480a      	ldr	r0, [pc, #40]	; (800b9f4 <tcp_rexmit_rto+0x40>)
 800b9cc:	f003 fa96 	bl	800eefc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ff57 	bl	800b884 <tcp_rexmit_rto_prepare>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d102      	bne.n	800b9e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff ffc1 	bl	800b964 <tcp_rexmit_rto_commit>
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	080119b4 	.word	0x080119b4
 800b9f0:	08012038 	.word	0x08012038
 800b9f4:	08011a08 	.word	0x08011a08

0800b9f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <tcp_rexmit+0x1c>
 800ba06:	4b2f      	ldr	r3, [pc, #188]	; (800bac4 <tcp_rexmit+0xcc>)
 800ba08:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ba0c:	492e      	ldr	r1, [pc, #184]	; (800bac8 <tcp_rexmit+0xd0>)
 800ba0e:	482f      	ldr	r0, [pc, #188]	; (800bacc <tcp_rexmit+0xd4>)
 800ba10:	f003 fa74 	bl	800eefc <iprintf>

  if (pcb->unacked == NULL) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d102      	bne.n	800ba22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ba1c:	f06f 0305 	mvn.w	r3, #5
 800ba20:	e04c      	b.n	800babc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ba28:	68b8      	ldr	r0, [r7, #8]
 800ba2a:	f7ff fe2d 	bl	800b688 <tcp_output_segment_busy>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ba34:	f06f 0305 	mvn.w	r3, #5
 800ba38:	e040      	b.n	800babc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	336c      	adds	r3, #108	; 0x6c
 800ba46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ba48:	e002      	b.n	800ba50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d011      	beq.n	800ba7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7f8 fe16 	bl	8004692 <lwip_htonl>
 800ba66:	4604      	mov	r4, r0
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f8 fe0f 	bl	8004692 <lwip_htonl>
 800ba74:	4603      	mov	r3, r0
 800ba76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dbe6      	blt.n	800ba4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d103      	bne.n	800ba9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baa0:	2bff      	cmp	r3, #255	; 0xff
 800baa2:	d007      	beq.n	800bab4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baaa:	3301      	adds	r3, #1
 800baac:	b2da      	uxtb	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd90      	pop	{r4, r7, pc}
 800bac4:	080119b4 	.word	0x080119b4
 800bac8:	08012054 	.word	0x08012054
 800bacc:	08011a08 	.word	0x08011a08

0800bad0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d106      	bne.n	800baec <tcp_rexmit_fast+0x1c>
 800bade:	4b2a      	ldr	r3, [pc, #168]	; (800bb88 <tcp_rexmit_fast+0xb8>)
 800bae0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bae4:	4929      	ldr	r1, [pc, #164]	; (800bb8c <tcp_rexmit_fast+0xbc>)
 800bae6:	482a      	ldr	r0, [pc, #168]	; (800bb90 <tcp_rexmit_fast+0xc0>)
 800bae8:	f003 fa08 	bl	800eefc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d045      	beq.n	800bb80 <tcp_rexmit_fast+0xb0>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8b5b      	ldrh	r3, [r3, #26]
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d13f      	bne.n	800bb80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff ff79 	bl	800b9f8 <tcp_rexmit>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d139      	bne.n	800bb80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	bf28      	it	cs
 800bb1c:	4613      	movcs	r3, r2
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da00      	bge.n	800bb26 <tcp_rexmit_fast+0x56>
 800bb24:	3301      	adds	r3, #1
 800bb26:	105b      	asrs	r3, r3, #1
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d206      	bcs.n	800bb50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	0049      	lsls	r1, r1, #1
 800bb5e:	440b      	add	r3, r1
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	4413      	add	r3, r2
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	8b5b      	ldrh	r3, [r3, #26]
 800bb70:	f043 0304 	orr.w	r3, r3, #4
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	080119b4 	.word	0x080119b4
 800bb8c:	0801206c 	.word	0x0801206c
 800bb90:	08011a08 	.word	0x08011a08

0800bb94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	607b      	str	r3, [r7, #4]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	817b      	strh	r3, [r7, #10]
 800bba2:	4613      	mov	r3, r2
 800bba4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bba6:	897a      	ldrh	r2, [r7, #10]
 800bba8:	893b      	ldrh	r3, [r7, #8]
 800bbaa:	4413      	add	r3, r2
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	3314      	adds	r3, #20
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	2022      	movs	r0, #34	; 0x22
 800bbba:	f7f9 fd25 	bl	8005608 <pbuf_alloc>
 800bbbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d04d      	beq.n	800bc62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bbc6:	897b      	ldrh	r3, [r7, #10]
 800bbc8:	3313      	adds	r3, #19
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	8952      	ldrh	r2, [r2, #10]
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	db06      	blt.n	800bbe0 <tcp_output_alloc_header_common+0x4c>
 800bbd2:	4b26      	ldr	r3, [pc, #152]	; (800bc6c <tcp_output_alloc_header_common+0xd8>)
 800bbd4:	f240 7223 	movw	r2, #1827	; 0x723
 800bbd8:	4925      	ldr	r1, [pc, #148]	; (800bc70 <tcp_output_alloc_header_common+0xdc>)
 800bbda:	4826      	ldr	r0, [pc, #152]	; (800bc74 <tcp_output_alloc_header_common+0xe0>)
 800bbdc:	f003 f98e 	bl	800eefc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bbe6:	8c3b      	ldrh	r3, [r7, #32]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7f8 fd3d 	bl	8004668 <lwip_htons>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bbf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f8 fd35 	bl	8004668 <lwip_htons>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f7f8 fd40 	bl	8004692 <lwip_htonl>
 800bc12:	4602      	mov	r2, r0
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bc18:	897b      	ldrh	r3, [r7, #10]
 800bc1a:	089b      	lsrs	r3, r3, #2
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	3305      	adds	r3, #5
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	031b      	lsls	r3, r3, #12
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7f8 fd19 	bl	8004668 <lwip_htons>
 800bc36:	4603      	mov	r3, r0
 800bc38:	461a      	mov	r2, r3
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bc3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7f8 fd11 	bl	8004668 <lwip_htons>
 800bc46:	4603      	mov	r3, r0
 800bc48:	461a      	mov	r2, r3
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2200      	movs	r2, #0
 800bc52:	741a      	strb	r2, [r3, #16]
 800bc54:	2200      	movs	r2, #0
 800bc56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	749a      	strb	r2, [r3, #18]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bc62:	697b      	ldr	r3, [r7, #20]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	080119b4 	.word	0x080119b4
 800bc70:	0801208c 	.word	0x0801208c
 800bc74:	08011a08 	.word	0x08011a08

0800bc78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b08a      	sub	sp, #40	; 0x28
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	607b      	str	r3, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	817b      	strh	r3, [r7, #10]
 800bc86:	4613      	mov	r3, r2
 800bc88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d106      	bne.n	800bc9e <tcp_output_alloc_header+0x26>
 800bc90:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <tcp_output_alloc_header+0x70>)
 800bc92:	f240 7242 	movw	r2, #1858	; 0x742
 800bc96:	4915      	ldr	r1, [pc, #84]	; (800bcec <tcp_output_alloc_header+0x74>)
 800bc98:	4815      	ldr	r0, [pc, #84]	; (800bcf0 <tcp_output_alloc_header+0x78>)
 800bc9a:	f003 f92f 	bl	800eefc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8adb      	ldrh	r3, [r3, #22]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	8b12      	ldrh	r2, [r2, #24]
 800bcaa:	68f9      	ldr	r1, [r7, #12]
 800bcac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bcae:	893d      	ldrh	r5, [r7, #8]
 800bcb0:	897c      	ldrh	r4, [r7, #10]
 800bcb2:	9103      	str	r1, [sp, #12]
 800bcb4:	2110      	movs	r1, #16
 800bcb6:	9102      	str	r1, [sp, #8]
 800bcb8:	9201      	str	r2, [sp, #4]
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f7ff ff67 	bl	800bb94 <tcp_output_alloc_header_common>
 800bcc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d006      	beq.n	800bcdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bcd6:	441a      	add	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bcdc:	697b      	ldr	r3, [r7, #20]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bdb0      	pop	{r4, r5, r7, pc}
 800bce6:	bf00      	nop
 800bce8:	080119b4 	.word	0x080119b4
 800bcec:	080120bc 	.word	0x080120bc
 800bcf0:	08011a08 	.word	0x08011a08

0800bcf4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	4611      	mov	r1, r2
 800bd00:	461a      	mov	r2, r3
 800bd02:	460b      	mov	r3, r1
 800bd04:	71fb      	strb	r3, [r7, #7]
 800bd06:	4613      	mov	r3, r2
 800bd08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d106      	bne.n	800bd22 <tcp_output_fill_options+0x2e>
 800bd14:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <tcp_output_fill_options+0x70>)
 800bd16:	f240 7256 	movw	r2, #1878	; 0x756
 800bd1a:	4913      	ldr	r1, [pc, #76]	; (800bd68 <tcp_output_fill_options+0x74>)
 800bd1c:	4813      	ldr	r0, [pc, #76]	; (800bd6c <tcp_output_fill_options+0x78>)
 800bd1e:	f003 f8ed 	bl	800eefc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	3314      	adds	r3, #20
 800bd2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	f103 0214 	add.w	r2, r3, #20
 800bd34:	8bfb      	ldrh	r3, [r7, #30]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4619      	mov	r1, r3
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	f003 0304 	and.w	r3, r3, #4
 800bd42:	440b      	add	r3, r1
 800bd44:	4413      	add	r3, r2
 800bd46:	697a      	ldr	r2, [r7, #20]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d006      	beq.n	800bd5a <tcp_output_fill_options+0x66>
 800bd4c:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <tcp_output_fill_options+0x70>)
 800bd4e:	f240 7275 	movw	r2, #1909	; 0x775
 800bd52:	4907      	ldr	r1, [pc, #28]	; (800bd70 <tcp_output_fill_options+0x7c>)
 800bd54:	4805      	ldr	r0, [pc, #20]	; (800bd6c <tcp_output_fill_options+0x78>)
 800bd56:	f003 f8d1 	bl	800eefc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bd5a:	bf00      	nop
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	080119b4 	.word	0x080119b4
 800bd68:	080120e4 	.word	0x080120e4
 800bd6c:	08011a08 	.word	0x08011a08
 800bd70:	08011fdc 	.word	0x08011fdc

0800bd74 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af04      	add	r7, sp, #16
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d106      	bne.n	800bd96 <tcp_output_control_segment+0x22>
 800bd88:	4b1c      	ldr	r3, [pc, #112]	; (800bdfc <tcp_output_control_segment+0x88>)
 800bd8a:	f240 7287 	movw	r2, #1927	; 0x787
 800bd8e:	491c      	ldr	r1, [pc, #112]	; (800be00 <tcp_output_control_segment+0x8c>)
 800bd90:	481c      	ldr	r0, [pc, #112]	; (800be04 <tcp_output_control_segment+0x90>)
 800bd92:	f003 f8b3 	bl	800eefc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7fe fae8 	bl	800a370 <tcp_route>
 800bda0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bda8:	23fc      	movs	r3, #252	; 0xfc
 800bdaa:	75fb      	strb	r3, [r7, #23]
 800bdac:	e01c      	b.n	800bde8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d006      	beq.n	800bdc2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	7adb      	ldrb	r3, [r3, #11]
 800bdb8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	7a9b      	ldrb	r3, [r3, #10]
 800bdbe:	757b      	strb	r3, [r7, #21]
 800bdc0:	e003      	b.n	800bdca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bdc2:	23ff      	movs	r3, #255	; 0xff
 800bdc4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bdca:	7dba      	ldrb	r2, [r7, #22]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	9302      	str	r3, [sp, #8]
 800bdd0:	2306      	movs	r3, #6
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	7d7b      	ldrb	r3, [r7, #21]
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	68b8      	ldr	r0, [r7, #8]
 800bde0:	f001 ff70 	bl	800dcc4 <ip4_output_if>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bde8:	68b8      	ldr	r0, [r7, #8]
 800bdea:	f7f9 fef1 	bl	8005bd0 <pbuf_free>
  return err;
 800bdee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	080119b4 	.word	0x080119b4
 800be00:	0801210c 	.word	0x0801210c
 800be04:	08011a08 	.word	0x08011a08

0800be08 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b08b      	sub	sp, #44	; 0x2c
 800be0c:	af04      	add	r7, sp, #16
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d106      	bne.n	800be2a <tcp_rst+0x22>
 800be1c:	4b1f      	ldr	r3, [pc, #124]	; (800be9c <tcp_rst+0x94>)
 800be1e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800be22:	491f      	ldr	r1, [pc, #124]	; (800bea0 <tcp_rst+0x98>)
 800be24:	481f      	ldr	r0, [pc, #124]	; (800bea4 <tcp_rst+0x9c>)
 800be26:	f003 f869 	bl	800eefc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d106      	bne.n	800be3e <tcp_rst+0x36>
 800be30:	4b1a      	ldr	r3, [pc, #104]	; (800be9c <tcp_rst+0x94>)
 800be32:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800be36:	491c      	ldr	r1, [pc, #112]	; (800bea8 <tcp_rst+0xa0>)
 800be38:	481a      	ldr	r0, [pc, #104]	; (800bea4 <tcp_rst+0x9c>)
 800be3a:	f003 f85f 	bl	800eefc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800be42:	f246 0308 	movw	r3, #24584	; 0x6008
 800be46:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	b29c      	uxth	r4, r3
 800be4c:	68b8      	ldr	r0, [r7, #8]
 800be4e:	f7f8 fc20 	bl	8004692 <lwip_htonl>
 800be52:	4602      	mov	r2, r0
 800be54:	8abb      	ldrh	r3, [r7, #20]
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	2314      	movs	r3, #20
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	4613      	mov	r3, r2
 800be66:	2200      	movs	r2, #0
 800be68:	4621      	mov	r1, r4
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7ff fe92 	bl	800bb94 <tcp_output_alloc_header_common>
 800be70:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00c      	beq.n	800be92 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	2200      	movs	r2, #0
 800be7c:	6939      	ldr	r1, [r7, #16]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff ff38 	bl	800bcf4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	6939      	ldr	r1, [r7, #16]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7ff ff72 	bl	800bd74 <tcp_output_control_segment>
 800be90:	e000      	b.n	800be94 <tcp_rst+0x8c>
    return;
 800be92:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800be94:	371c      	adds	r7, #28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd90      	pop	{r4, r7, pc}
 800be9a:	bf00      	nop
 800be9c:	080119b4 	.word	0x080119b4
 800bea0:	08012138 	.word	0x08012138
 800bea4:	08011a08 	.word	0x08011a08
 800bea8:	08012154 	.word	0x08012154

0800beac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <tcp_send_empty_ack+0x24>
 800bec2:	4b28      	ldr	r3, [pc, #160]	; (800bf64 <tcp_send_empty_ack+0xb8>)
 800bec4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bec8:	4927      	ldr	r1, [pc, #156]	; (800bf68 <tcp_send_empty_ack+0xbc>)
 800beca:	4828      	ldr	r0, [pc, #160]	; (800bf6c <tcp_send_empty_ack+0xc0>)
 800becc:	f003 f816 	bl	800eefc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bedc:	7d7b      	ldrb	r3, [r7, #21]
 800bede:	b29c      	uxth	r4, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f8 fbd4 	bl	8004692 <lwip_htonl>
 800beea:	4603      	mov	r3, r0
 800beec:	2200      	movs	r2, #0
 800beee:	4621      	mov	r1, r4
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fec1 	bl	800bc78 <tcp_output_alloc_header>
 800bef6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8b5b      	ldrh	r3, [r3, #26]
 800bf02:	f043 0303 	orr.w	r3, r3, #3
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bf0c:	f06f 0301 	mvn.w	r3, #1
 800bf10:	e023      	b.n	800bf5a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bf12:	7dbb      	ldrb	r3, [r7, #22]
 800bf14:	7dfa      	ldrb	r2, [r7, #23]
 800bf16:	6939      	ldr	r1, [r7, #16]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff feeb 	bl	800bcf4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3304      	adds	r3, #4
 800bf24:	6939      	ldr	r1, [r7, #16]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff ff24 	bl	800bd74 <tcp_output_control_segment>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bf30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	8b5b      	ldrh	r3, [r3, #26]
 800bf3c:	f043 0303 	orr.w	r3, r3, #3
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	835a      	strh	r2, [r3, #26]
 800bf46:	e006      	b.n	800bf56 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	8b5b      	ldrh	r3, [r3, #26]
 800bf4c:	f023 0303 	bic.w	r3, r3, #3
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd90      	pop	{r4, r7, pc}
 800bf62:	bf00      	nop
 800bf64:	080119b4 	.word	0x080119b4
 800bf68:	08012170 	.word	0x08012170
 800bf6c:	08011a08 	.word	0x08011a08

0800bf70 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bf78:	2300      	movs	r3, #0
 800bf7a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <tcp_keepalive+0x20>
 800bf82:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <tcp_keepalive+0x74>)
 800bf84:	f640 0224 	movw	r2, #2084	; 0x824
 800bf88:	4917      	ldr	r1, [pc, #92]	; (800bfe8 <tcp_keepalive+0x78>)
 800bf8a:	4818      	ldr	r0, [pc, #96]	; (800bfec <tcp_keepalive+0x7c>)
 800bf8c:	f002 ffb6 	bl	800eefc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	b29c      	uxth	r4, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f8 fb79 	bl	8004692 <lwip_htonl>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fe66 	bl	800bc78 <tcp_output_alloc_header>
 800bfac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb8:	e010      	b.n	800bfdc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	6939      	ldr	r1, [r7, #16]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff fe97 	bl	800bcf4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	6939      	ldr	r1, [r7, #16]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fed0 	bl	800bd74 <tcp_output_control_segment>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd90      	pop	{r4, r7, pc}
 800bfe4:	080119b4 	.word	0x080119b4
 800bfe8:	08012190 	.word	0x08012190
 800bfec:	08011a08 	.word	0x08011a08

0800bff0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bff0:	b590      	push	{r4, r7, lr}
 800bff2:	b08b      	sub	sp, #44	; 0x2c
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bff8:	2300      	movs	r3, #0
 800bffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d106      	bne.n	800c012 <tcp_zero_window_probe+0x22>
 800c004:	4b4c      	ldr	r3, [pc, #304]	; (800c138 <tcp_zero_window_probe+0x148>)
 800c006:	f640 024f 	movw	r2, #2127	; 0x84f
 800c00a:	494c      	ldr	r1, [pc, #304]	; (800c13c <tcp_zero_window_probe+0x14c>)
 800c00c:	484c      	ldr	r0, [pc, #304]	; (800c140 <tcp_zero_window_probe+0x150>)
 800c00e:	f002 ff75 	bl	800eefc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c016:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e086      	b.n	800c130 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c028:	2bff      	cmp	r3, #255	; 0xff
 800c02a:	d007      	beq.n	800c03c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c032:	3301      	adds	r3, #1
 800c034:	b2da      	uxtb	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	899b      	ldrh	r3, [r3, #12]
 800c042:	b29b      	uxth	r3, r3
 800c044:	4618      	mov	r0, r3
 800c046:	f7f8 fb0f 	bl	8004668 <lwip_htons>
 800c04a:	4603      	mov	r3, r0
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d005      	beq.n	800c062 <tcp_zero_window_probe+0x72>
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	891b      	ldrh	r3, [r3, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <tcp_zero_window_probe+0x72>
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <tcp_zero_window_probe+0x74>
 800c062:	2300      	movs	r3, #0
 800c064:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c066:	7ffb      	ldrb	r3, [r7, #31]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf0c      	ite	eq
 800c06c:	2301      	moveq	r3, #1
 800c06e:	2300      	movne	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c078:	b299      	uxth	r1, r3
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	8bba      	ldrh	r2, [r7, #28]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7ff fdf8 	bl	800bc78 <tcp_output_alloc_header>
 800c088:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d102      	bne.n	800c096 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c090:	f04f 33ff 	mov.w	r3, #4294967295
 800c094:	e04c      	b.n	800c130 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c09c:	7ffb      	ldrb	r3, [r7, #31]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d011      	beq.n	800c0c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	899b      	ldrh	r3, [r3, #12]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	b21b      	sxth	r3, r3
 800c0aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c0ae:	b21c      	sxth	r4, r3
 800c0b0:	2011      	movs	r0, #17
 800c0b2:	f7f8 fad9 	bl	8004668 <lwip_htons>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	b21b      	sxth	r3, r3
 800c0ba:	4323      	orrs	r3, r4
 800c0bc:	b21b      	sxth	r3, r3
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	819a      	strh	r2, [r3, #12]
 800c0c4:	e010      	b.n	800c0e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	3314      	adds	r3, #20
 800c0cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	6858      	ldr	r0, [r3, #4]
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	891a      	ldrh	r2, [r3, #8]
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	891b      	ldrh	r3, [r3, #8]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	6939      	ldr	r1, [r7, #16]
 800c0e4:	f7f9 ff5e 	bl	8005fa4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f8 facf 	bl	8004692 <lwip_htonl>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	da02      	bge.n	800c10c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c110:	2200      	movs	r2, #0
 800c112:	69b9      	ldr	r1, [r7, #24]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fded 	bl	800bcf4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3304      	adds	r3, #4
 800c120:	69b9      	ldr	r1, [r7, #24]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff fe26 	bl	800bd74 <tcp_output_control_segment>
 800c128:	4603      	mov	r3, r0
 800c12a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c12c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c130:	4618      	mov	r0, r3
 800c132:	372c      	adds	r7, #44	; 0x2c
 800c134:	46bd      	mov	sp, r7
 800c136:	bd90      	pop	{r4, r7, pc}
 800c138:	080119b4 	.word	0x080119b4
 800c13c:	080121ac 	.word	0x080121ac
 800c140:	08011a08 	.word	0x08011a08

0800c144 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c14c:	f7fa f8aa 	bl	80062a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <tcpip_tcp_timer+0x38>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d103      	bne.n	800c160 <tcpip_tcp_timer+0x1c>
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <tcpip_tcp_timer+0x3c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c160:	2200      	movs	r2, #0
 800c162:	4908      	ldr	r1, [pc, #32]	; (800c184 <tcpip_tcp_timer+0x40>)
 800c164:	20fa      	movs	r0, #250	; 0xfa
 800c166:	f000 f8f3 	bl	800c350 <sys_timeout>
 800c16a:	e003      	b.n	800c174 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c16c:	4b06      	ldr	r3, [pc, #24]	; (800c188 <tcpip_tcp_timer+0x44>)
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
  }
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	20008ab4 	.word	0x20008ab4
 800c180:	20008ac4 	.word	0x20008ac4
 800c184:	0800c145 	.word	0x0800c145
 800c188:	20000114 	.word	0x20000114

0800c18c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <tcp_timer_needed+0x30>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10f      	bne.n	800c1b8 <tcp_timer_needed+0x2c>
 800c198:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <tcp_timer_needed+0x34>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <tcp_timer_needed+0x1c>
 800c1a0:	4b08      	ldr	r3, [pc, #32]	; (800c1c4 <tcp_timer_needed+0x38>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <tcp_timer_needed+0x30>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4905      	ldr	r1, [pc, #20]	; (800c1c8 <tcp_timer_needed+0x3c>)
 800c1b2:	20fa      	movs	r0, #250	; 0xfa
 800c1b4:	f000 f8cc 	bl	800c350 <sys_timeout>
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20000114 	.word	0x20000114
 800c1c0:	20008ab4 	.word	0x20008ab4
 800c1c4:	20008ac4 	.word	0x20008ac4
 800c1c8:	0800c145 	.word	0x0800c145

0800c1cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c1d8:	2006      	movs	r0, #6
 800c1da:	f7f8 fe9b 	bl	8004f14 <memp_malloc>
 800c1de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d109      	bne.n	800c1fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d151      	bne.n	800c290 <sys_timeout_abs+0xc4>
 800c1ec:	4b2a      	ldr	r3, [pc, #168]	; (800c298 <sys_timeout_abs+0xcc>)
 800c1ee:	22be      	movs	r2, #190	; 0xbe
 800c1f0:	492a      	ldr	r1, [pc, #168]	; (800c29c <sys_timeout_abs+0xd0>)
 800c1f2:	482b      	ldr	r0, [pc, #172]	; (800c2a0 <sys_timeout_abs+0xd4>)
 800c1f4:	f002 fe82 	bl	800eefc <iprintf>
    return;
 800c1f8:	e04a      	b.n	800c290 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c212:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d103      	bne.n	800c222 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c21a:	4a22      	ldr	r2, [pc, #136]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6013      	str	r3, [r2, #0]
    return;
 800c220:	e037      	b.n	800c292 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	4b1f      	ldr	r3, [pc, #124]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	0fdb      	lsrs	r3, r3, #31
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d007      	beq.n	800c24a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c23a:	4b1a      	ldr	r3, [pc, #104]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c242:	4a18      	ldr	r2, [pc, #96]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	e023      	b.n	800c292 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c24a:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <sys_timeout_abs+0xd8>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	e01a      	b.n	800c288 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00b      	beq.n	800c272 <sys_timeout_abs+0xa6>
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	0fdb      	lsrs	r3, r3, #31
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	601a      	str	r2, [r3, #0]
        break;
 800c280:	e007      	b.n	800c292 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1e1      	bne.n	800c252 <sys_timeout_abs+0x86>
 800c28e:	e000      	b.n	800c292 <sys_timeout_abs+0xc6>
    return;
 800c290:	bf00      	nop
      }
    }
  }
}
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	080121d0 	.word	0x080121d0
 800c29c:	08012204 	.word	0x08012204
 800c2a0:	08012244 	.word	0x08012244
 800c2a4:	2000010c 	.word	0x2000010c

0800c2a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4798      	blx	r3

  now = sys_now();
 800c2ba:	f7f8 f947 	bl	800454c <sys_now>
 800c2be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b0f      	ldr	r3, [pc, #60]	; (800c304 <lwip_cyclic_timer+0x5c>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	0fdb      	lsrs	r3, r3, #31
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d009      	beq.n	800c2f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4907      	ldr	r1, [pc, #28]	; (800c308 <lwip_cyclic_timer+0x60>)
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7ff ff6e 	bl	800c1cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c2f0:	e004      	b.n	800c2fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	4904      	ldr	r1, [pc, #16]	; (800c308 <lwip_cyclic_timer+0x60>)
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f7ff ff68 	bl	800c1cc <sys_timeout_abs>
}
 800c2fc:	bf00      	nop
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000110 	.word	0x20000110
 800c308:	0800c2a9 	.word	0x0800c2a9

0800c30c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c312:	2301      	movs	r3, #1
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	e00e      	b.n	800c336 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c318:	4a0b      	ldr	r2, [pc, #44]	; (800c348 <sys_timeouts_init+0x3c>)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	4a08      	ldr	r2, [pc, #32]	; (800c348 <sys_timeouts_init+0x3c>)
 800c326:	4413      	add	r3, r2
 800c328:	461a      	mov	r2, r3
 800c32a:	4908      	ldr	r1, [pc, #32]	; (800c34c <sys_timeouts_init+0x40>)
 800c32c:	f000 f810 	bl	800c350 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3301      	adds	r3, #1
 800c334:	607b      	str	r3, [r7, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d9ed      	bls.n	800c318 <sys_timeouts_init+0xc>
  }
}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	08012da8 	.word	0x08012da8
 800c34c:	0800c2a9 	.word	0x0800c2a9

0800c350 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c362:	d306      	bcc.n	800c372 <sys_timeout+0x22>
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <sys_timeout+0x40>)
 800c366:	f240 1229 	movw	r2, #297	; 0x129
 800c36a:	490a      	ldr	r1, [pc, #40]	; (800c394 <sys_timeout+0x44>)
 800c36c:	480a      	ldr	r0, [pc, #40]	; (800c398 <sys_timeout+0x48>)
 800c36e:	f002 fdc5 	bl	800eefc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c372:	f7f8 f8eb 	bl	800454c <sys_now>
 800c376:	4602      	mov	r2, r0
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	6978      	ldr	r0, [r7, #20]
 800c384:	f7ff ff22 	bl	800c1cc <sys_timeout_abs>
#endif
}
 800c388:	bf00      	nop
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	080121d0 	.word	0x080121d0
 800c394:	0801226c 	.word	0x0801226c
 800c398:	08012244 	.word	0x08012244

0800c39c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c3a2:	f7f8 f8d3 	bl	800454c <sys_now>
 800c3a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c3a8:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <sys_check_timeouts+0x78>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <sys_check_timeouts+0x1a>
 800c3b2:	f7f9 f8d3 	bl	800555c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c3b6:	4b18      	ldr	r3, [pc, #96]	; (800c418 <sys_check_timeouts+0x7c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d022      	beq.n	800c408 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	0fdb      	lsrs	r3, r3, #31
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d11a      	bne.n	800c40c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a0f      	ldr	r2, [pc, #60]	; (800c418 <sys_check_timeouts+0x7c>)
 800c3dc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	4a0b      	ldr	r2, [pc, #44]	; (800c41c <sys_check_timeouts+0x80>)
 800c3f0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c3f2:	68b9      	ldr	r1, [r7, #8]
 800c3f4:	2006      	movs	r0, #6
 800c3f6:	f7f8 fdd9 	bl	8004fac <memp_free>
    if (handler != NULL) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0d3      	beq.n	800c3a8 <sys_check_timeouts+0xc>
      handler(arg);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6838      	ldr	r0, [r7, #0]
 800c404:	4798      	blx	r3
  do {
 800c406:	e7cf      	b.n	800c3a8 <sys_check_timeouts+0xc>
      return;
 800c408:	bf00      	nop
 800c40a:	e000      	b.n	800c40e <sys_check_timeouts+0x72>
      return;
 800c40c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20008aac 	.word	0x20008aac
 800c418:	2000010c 	.word	0x2000010c
 800c41c:	20000110 	.word	0x20000110

0800c420 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c424:	f002 fd82 	bl	800ef2c <rand>
 800c428:	4603      	mov	r3, r0
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c430:	b29b      	uxth	r3, r3
 800c432:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c436:	b29a      	uxth	r2, r3
 800c438:	4b01      	ldr	r3, [pc, #4]	; (800c440 <udp_init+0x20>)
 800c43a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c43c:	bf00      	nop
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	20000010 	.word	0x20000010

0800c444 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	4613      	mov	r3, r2
 800c450:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d105      	bne.n	800c464 <udp_input_local_match+0x20>
 800c458:	4b27      	ldr	r3, [pc, #156]	; (800c4f8 <udp_input_local_match+0xb4>)
 800c45a:	2287      	movs	r2, #135	; 0x87
 800c45c:	4927      	ldr	r1, [pc, #156]	; (800c4fc <udp_input_local_match+0xb8>)
 800c45e:	4828      	ldr	r0, [pc, #160]	; (800c500 <udp_input_local_match+0xbc>)
 800c460:	f002 fd4c 	bl	800eefc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <udp_input_local_match+0x32>
 800c46a:	4b23      	ldr	r3, [pc, #140]	; (800c4f8 <udp_input_local_match+0xb4>)
 800c46c:	2288      	movs	r2, #136	; 0x88
 800c46e:	4925      	ldr	r1, [pc, #148]	; (800c504 <udp_input_local_match+0xc0>)
 800c470:	4823      	ldr	r0, [pc, #140]	; (800c500 <udp_input_local_match+0xbc>)
 800c472:	f002 fd43 	bl	800eefc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	7a1b      	ldrb	r3, [r3, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	7a1a      	ldrb	r2, [r3, #8]
 800c482:	4b21      	ldr	r3, [pc, #132]	; (800c508 <udp_input_local_match+0xc4>)
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c48a:	3301      	adds	r3, #1
 800c48c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c48e:	429a      	cmp	r2, r3
 800c490:	d001      	beq.n	800c496 <udp_input_local_match+0x52>
    return 0;
 800c492:	2300      	movs	r3, #0
 800c494:	e02b      	b.n	800c4ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d018      	beq.n	800c4ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d013      	beq.n	800c4ca <udp_input_local_match+0x86>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00f      	beq.n	800c4ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c4aa:	4b17      	ldr	r3, [pc, #92]	; (800c508 <udp_input_local_match+0xc4>)
 800c4ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b2:	d00a      	beq.n	800c4ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b13      	ldr	r3, [pc, #76]	; (800c508 <udp_input_local_match+0xc4>)
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	405a      	eors	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d110      	bne.n	800c4ec <udp_input_local_match+0xa8>
          return 1;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e00f      	b.n	800c4ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d009      	beq.n	800c4e8 <udp_input_local_match+0xa4>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d005      	beq.n	800c4e8 <udp_input_local_match+0xa4>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	4b09      	ldr	r3, [pc, #36]	; (800c508 <udp_input_local_match+0xc4>)
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d101      	bne.n	800c4ec <udp_input_local_match+0xa8>
        return 1;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e000      	b.n	800c4ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	080122b8 	.word	0x080122b8
 800c4fc:	080122e8 	.word	0x080122e8
 800c500:	0801230c 	.word	0x0801230c
 800c504:	08012334 	.word	0x08012334
 800c508:	200033b0 	.word	0x200033b0

0800c50c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b08d      	sub	sp, #52	; 0x34
 800c510:	af02      	add	r7, sp, #8
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d105      	bne.n	800c52c <udp_input+0x20>
 800c520:	4b7c      	ldr	r3, [pc, #496]	; (800c714 <udp_input+0x208>)
 800c522:	22cf      	movs	r2, #207	; 0xcf
 800c524:	497c      	ldr	r1, [pc, #496]	; (800c718 <udp_input+0x20c>)
 800c526:	487d      	ldr	r0, [pc, #500]	; (800c71c <udp_input+0x210>)
 800c528:	f002 fce8 	bl	800eefc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <udp_input+0x32>
 800c532:	4b78      	ldr	r3, [pc, #480]	; (800c714 <udp_input+0x208>)
 800c534:	22d0      	movs	r2, #208	; 0xd0
 800c536:	497a      	ldr	r1, [pc, #488]	; (800c720 <udp_input+0x214>)
 800c538:	4878      	ldr	r0, [pc, #480]	; (800c71c <udp_input+0x210>)
 800c53a:	f002 fcdf 	bl	800eefc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	895b      	ldrh	r3, [r3, #10]
 800c542:	2b07      	cmp	r3, #7
 800c544:	d803      	bhi.n	800c54e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7f9 fb42 	bl	8005bd0 <pbuf_free>
    goto end;
 800c54c:	e0de      	b.n	800c70c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c554:	4b73      	ldr	r3, [pc, #460]	; (800c724 <udp_input+0x218>)
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	4a72      	ldr	r2, [pc, #456]	; (800c724 <udp_input+0x218>)
 800c55a:	6812      	ldr	r2, [r2, #0]
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fc88 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800c564:	4603      	mov	r3, r0
 800c566:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	4618      	mov	r0, r3
 800c570:	f7f8 f87a 	bl	8004668 <lwip_htons>
 800c574:	4603      	mov	r3, r0
 800c576:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	885b      	ldrh	r3, [r3, #2]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	4618      	mov	r0, r3
 800c580:	f7f8 f872 	bl	8004668 <lwip_htons>
 800c584:	4603      	mov	r3, r0
 800c586:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c588:	2300      	movs	r3, #0
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c594:	4b64      	ldr	r3, [pc, #400]	; (800c728 <udp_input+0x21c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	627b      	str	r3, [r7, #36]	; 0x24
 800c59a:	e054      	b.n	800c646 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	8a5b      	ldrh	r3, [r3, #18]
 800c5a0:	89fa      	ldrh	r2, [r7, #14]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d14a      	bne.n	800c63c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c5a6:	7cfb      	ldrb	r3, [r7, #19]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5ae:	f7ff ff49 	bl	800c444 <udp_input_local_match>
 800c5b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d041      	beq.n	800c63c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	7c1b      	ldrb	r3, [r3, #16]
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d11d      	bne.n	800c600 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	61fb      	str	r3, [r7, #28]
 800c5ce:	e017      	b.n	800c600 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c5d0:	7cfb      	ldrb	r3, [r7, #19]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d014      	beq.n	800c600 <udp_input+0xf4>
 800c5d6:	4b53      	ldr	r3, [pc, #332]	; (800c724 <udp_input+0x218>)
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	d10f      	bne.n	800c600 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d008      	beq.n	800c600 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d101      	bne.n	800c600 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	8a9b      	ldrh	r3, [r3, #20]
 800c604:	8a3a      	ldrh	r2, [r7, #16]
 800c606:	429a      	cmp	r2, r3
 800c608:	d118      	bne.n	800c63c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d005      	beq.n	800c61e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	4b43      	ldr	r3, [pc, #268]	; (800c724 <udp_input+0x218>)
 800c618:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d10e      	bne.n	800c63c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d014      	beq.n	800c64e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	68da      	ldr	r2, [r3, #12]
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c62c:	4b3e      	ldr	r3, [pc, #248]	; (800c728 <udp_input+0x21c>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c634:	4a3c      	ldr	r2, [pc, #240]	; (800c728 <udp_input+0x21c>)
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c63a:	e008      	b.n	800c64e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1a7      	bne.n	800c59c <udp_input+0x90>
 800c64c:	e000      	b.n	800c650 <udp_input+0x144>
        break;
 800c64e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <udp_input+0x15a>
    for_us = 1;
 800c660:	2301      	movs	r3, #1
 800c662:	76fb      	strb	r3, [r7, #27]
 800c664:	e00a      	b.n	800c67c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	3304      	adds	r3, #4
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	4b2d      	ldr	r3, [pc, #180]	; (800c724 <udp_input+0x218>)
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	429a      	cmp	r2, r3
 800c672:	bf0c      	ite	eq
 800c674:	2301      	moveq	r3, #1
 800c676:	2300      	movne	r3, #0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c67c:	7efb      	ldrb	r3, [r7, #27]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d041      	beq.n	800c706 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c682:	2108      	movs	r1, #8
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7f9 fa1d 	bl	8005ac4 <pbuf_remove_header>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00a      	beq.n	800c6a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c690:	4b20      	ldr	r3, [pc, #128]	; (800c714 <udp_input+0x208>)
 800c692:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c696:	4925      	ldr	r1, [pc, #148]	; (800c72c <udp_input+0x220>)
 800c698:	4820      	ldr	r0, [pc, #128]	; (800c71c <udp_input+0x210>)
 800c69a:	f002 fc2f 	bl	800eefc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7f9 fa96 	bl	8005bd0 <pbuf_free>
      goto end;
 800c6a4:	e032      	b.n	800c70c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d012      	beq.n	800c6d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00a      	beq.n	800c6ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	699c      	ldr	r4, [r3, #24]
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	69d8      	ldr	r0, [r3, #28]
 800c6bc:	8a3b      	ldrh	r3, [r7, #16]
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	4b1b      	ldr	r3, [pc, #108]	; (800c730 <udp_input+0x224>)
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c6c8:	e021      	b.n	800c70e <udp_input+0x202>
        pbuf_free(p);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7f9 fa80 	bl	8005bd0 <pbuf_free>
        goto end;
 800c6d0:	e01c      	b.n	800c70c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c6d2:	7cfb      	ldrb	r3, [r7, #19]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d112      	bne.n	800c6fe <udp_input+0x1f2>
 800c6d8:	4b12      	ldr	r3, [pc, #72]	; (800c724 <udp_input+0x218>)
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6e0:	2be0      	cmp	r3, #224	; 0xe0
 800c6e2:	d00c      	beq.n	800c6fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c6e4:	4b0f      	ldr	r3, [pc, #60]	; (800c724 <udp_input+0x218>)
 800c6e6:	899b      	ldrh	r3, [r3, #12]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	b21b      	sxth	r3, r3
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7f9 fa5a 	bl	8005baa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c6f6:	2103      	movs	r1, #3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f89b 	bl	800d834 <icmp_dest_unreach>
      pbuf_free(p);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7f9 fa66 	bl	8005bd0 <pbuf_free>
  return;
 800c704:	e003      	b.n	800c70e <udp_input+0x202>
    pbuf_free(p);
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7f9 fa62 	bl	8005bd0 <pbuf_free>
  return;
 800c70c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c70e:	372c      	adds	r7, #44	; 0x2c
 800c710:	46bd      	mov	sp, r7
 800c712:	bd90      	pop	{r4, r7, pc}
 800c714:	080122b8 	.word	0x080122b8
 800c718:	0801235c 	.word	0x0801235c
 800c71c:	0801230c 	.word	0x0801230c
 800c720:	08012374 	.word	0x08012374
 800c724:	200033b0 	.word	0x200033b0
 800c728:	20008acc 	.word	0x20008acc
 800c72c:	08012390 	.word	0x08012390
 800c730:	200033c0 	.word	0x200033c0

0800c734 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d01e      	beq.n	800c782 <udp_netif_ip_addr_changed+0x4e>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01a      	beq.n	800c782 <udp_netif_ip_addr_changed+0x4e>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d017      	beq.n	800c782 <udp_netif_ip_addr_changed+0x4e>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d013      	beq.n	800c782 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c75a:	4b0d      	ldr	r3, [pc, #52]	; (800c790 <udp_netif_ip_addr_changed+0x5c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e00c      	b.n	800c77c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d103      	bne.n	800c776 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1ef      	bne.n	800c762 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c782:	bf00      	nop
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20008acc 	.word	0x20008acc

0800c794 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c79c:	4915      	ldr	r1, [pc, #84]	; (800c7f4 <etharp_free_entry+0x60>)
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	4413      	add	r3, r2
 800c7a6:	00db      	lsls	r3, r3, #3
 800c7a8:	440b      	add	r3, r1
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d013      	beq.n	800c7d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c7b0:	4910      	ldr	r1, [pc, #64]	; (800c7f4 <etharp_free_entry+0x60>)
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	440b      	add	r3, r1
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7f9 fa05 	bl	8005bd0 <pbuf_free>
    arp_table[i].q = NULL;
 800c7c6:	490b      	ldr	r1, [pc, #44]	; (800c7f4 <etharp_free_entry+0x60>)
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	440b      	add	r3, r1
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c7d8:	4906      	ldr	r1, [pc, #24]	; (800c7f4 <etharp_free_entry+0x60>)
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	4413      	add	r3, r2
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	440b      	add	r3, r1
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c7ec:	bf00      	nop
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20000118 	.word	0x20000118

0800c7f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7fe:	2300      	movs	r3, #0
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	e096      	b.n	800c932 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c804:	494f      	ldr	r1, [pc, #316]	; (800c944 <etharp_tmr+0x14c>)
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	4613      	mov	r3, r2
 800c80a:	005b      	lsls	r3, r3, #1
 800c80c:	4413      	add	r3, r2
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	440b      	add	r3, r1
 800c812:	3314      	adds	r3, #20
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 8086 	beq.w	800c92c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c820:	4948      	ldr	r1, [pc, #288]	; (800c944 <etharp_tmr+0x14c>)
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	4613      	mov	r3, r2
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	4413      	add	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	440b      	add	r3, r1
 800c82e:	3312      	adds	r3, #18
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	3301      	adds	r3, #1
 800c834:	b298      	uxth	r0, r3
 800c836:	4943      	ldr	r1, [pc, #268]	; (800c944 <etharp_tmr+0x14c>)
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	4613      	mov	r3, r2
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	4413      	add	r3, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	440b      	add	r3, r1
 800c844:	3312      	adds	r3, #18
 800c846:	4602      	mov	r2, r0
 800c848:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c84a:	493e      	ldr	r1, [pc, #248]	; (800c944 <etharp_tmr+0x14c>)
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	3312      	adds	r3, #18
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c860:	d215      	bcs.n	800c88e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c862:	4938      	ldr	r1, [pc, #224]	; (800c944 <etharp_tmr+0x14c>)
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	440b      	add	r3, r1
 800c870:	3314      	adds	r3, #20
 800c872:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c874:	2b01      	cmp	r3, #1
 800c876:	d10e      	bne.n	800c896 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c878:	4932      	ldr	r1, [pc, #200]	; (800c944 <etharp_tmr+0x14c>)
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4613      	mov	r3, r2
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	4413      	add	r3, r2
 800c882:	00db      	lsls	r3, r3, #3
 800c884:	440b      	add	r3, r1
 800c886:	3312      	adds	r3, #18
 800c888:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c88a:	2b04      	cmp	r3, #4
 800c88c:	d903      	bls.n	800c896 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff ff80 	bl	800c794 <etharp_free_entry>
 800c894:	e04a      	b.n	800c92c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c896:	492b      	ldr	r1, [pc, #172]	; (800c944 <etharp_tmr+0x14c>)
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	4613      	mov	r3, r2
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4413      	add	r3, r2
 800c8a0:	00db      	lsls	r3, r3, #3
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3314      	adds	r3, #20
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d10a      	bne.n	800c8c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c8ac:	4925      	ldr	r1, [pc, #148]	; (800c944 <etharp_tmr+0x14c>)
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3314      	adds	r3, #20
 800c8bc:	2204      	movs	r2, #4
 800c8be:	701a      	strb	r2, [r3, #0]
 800c8c0:	e034      	b.n	800c92c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c8c2:	4920      	ldr	r1, [pc, #128]	; (800c944 <etharp_tmr+0x14c>)
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d10a      	bne.n	800c8ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c8d8:	491a      	ldr	r1, [pc, #104]	; (800c944 <etharp_tmr+0x14c>)
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	440b      	add	r3, r1
 800c8e6:	3314      	adds	r3, #20
 800c8e8:	2202      	movs	r2, #2
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	e01e      	b.n	800c92c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8ee:	4915      	ldr	r1, [pc, #84]	; (800c944 <etharp_tmr+0x14c>)
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	4413      	add	r3, r2
 800c8f8:	00db      	lsls	r3, r3, #3
 800c8fa:	440b      	add	r3, r1
 800c8fc:	3314      	adds	r3, #20
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d113      	bne.n	800c92c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c904:	490f      	ldr	r1, [pc, #60]	; (800c944 <etharp_tmr+0x14c>)
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	4613      	mov	r3, r2
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	4413      	add	r3, r2
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	440b      	add	r3, r1
 800c912:	3308      	adds	r3, #8
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	4613      	mov	r3, r2
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	4413      	add	r3, r2
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	4a08      	ldr	r2, [pc, #32]	; (800c944 <etharp_tmr+0x14c>)
 800c922:	4413      	add	r3, r2
 800c924:	3304      	adds	r3, #4
 800c926:	4619      	mov	r1, r3
 800c928:	f000 fe6e 	bl	800d608 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3301      	adds	r3, #1
 800c930:	607b      	str	r3, [r7, #4]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f77f af65 	ble.w	800c804 <etharp_tmr+0xc>
      }
    }
  }
}
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20000118 	.word	0x20000118

0800c948 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	460b      	mov	r3, r1
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c956:	230a      	movs	r3, #10
 800c958:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c95a:	230a      	movs	r3, #10
 800c95c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c95e:	230a      	movs	r3, #10
 800c960:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c966:	230a      	movs	r3, #10
 800c968:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	83bb      	strh	r3, [r7, #28]
 800c96e:	2300      	movs	r3, #0
 800c970:	837b      	strh	r3, [r7, #26]
 800c972:	2300      	movs	r3, #0
 800c974:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c976:	2300      	movs	r3, #0
 800c978:	843b      	strh	r3, [r7, #32]
 800c97a:	e0ae      	b.n	800cada <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c97c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c980:	49a6      	ldr	r1, [pc, #664]	; (800cc1c <etharp_find_entry+0x2d4>)
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	00db      	lsls	r3, r3, #3
 800c98a:	440b      	add	r3, r1
 800c98c:	3314      	adds	r3, #20
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c996:	2b0a      	cmp	r3, #10
 800c998:	d105      	bne.n	800c9a6 <etharp_find_entry+0x5e>
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c9a0:	8c3b      	ldrh	r3, [r7, #32]
 800c9a2:	847b      	strh	r3, [r7, #34]	; 0x22
 800c9a4:	e095      	b.n	800cad2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8092 	beq.w	800cad2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d009      	beq.n	800c9c8 <etharp_find_entry+0x80>
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d806      	bhi.n	800c9c8 <etharp_find_entry+0x80>
 800c9ba:	4b99      	ldr	r3, [pc, #612]	; (800cc20 <etharp_find_entry+0x2d8>)
 800c9bc:	f240 1223 	movw	r2, #291	; 0x123
 800c9c0:	4998      	ldr	r1, [pc, #608]	; (800cc24 <etharp_find_entry+0x2dc>)
 800c9c2:	4899      	ldr	r0, [pc, #612]	; (800cc28 <etharp_find_entry+0x2e0>)
 800c9c4:	f002 fa9a 	bl	800eefc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d020      	beq.n	800ca10 <etharp_find_entry+0xc8>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6819      	ldr	r1, [r3, #0]
 800c9d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9d6:	4891      	ldr	r0, [pc, #580]	; (800cc1c <etharp_find_entry+0x2d4>)
 800c9d8:	4613      	mov	r3, r2
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	4413      	add	r3, r2
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4403      	add	r3, r0
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	d112      	bne.n	800ca10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00c      	beq.n	800ca0a <etharp_find_entry+0xc2>
 800c9f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9f4:	4989      	ldr	r1, [pc, #548]	; (800cc1c <etharp_find_entry+0x2d4>)
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	4413      	add	r3, r2
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	440b      	add	r3, r1
 800ca00:	3308      	adds	r3, #8
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d102      	bne.n	800ca10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ca0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca0e:	e100      	b.n	800cc12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d140      	bne.n	800ca98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ca16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca1a:	4980      	ldr	r1, [pc, #512]	; (800cc1c <etharp_find_entry+0x2d4>)
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	440b      	add	r3, r1
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d01a      	beq.n	800ca62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ca2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca30:	497a      	ldr	r1, [pc, #488]	; (800cc1c <etharp_find_entry+0x2d4>)
 800ca32:	4613      	mov	r3, r2
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	4413      	add	r3, r2
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	440b      	add	r3, r1
 800ca3c:	3312      	adds	r3, #18
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	8bba      	ldrh	r2, [r7, #28]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d845      	bhi.n	800cad2 <etharp_find_entry+0x18a>
            old_queue = i;
 800ca46:	8c3b      	ldrh	r3, [r7, #32]
 800ca48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ca4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca4e:	4973      	ldr	r1, [pc, #460]	; (800cc1c <etharp_find_entry+0x2d4>)
 800ca50:	4613      	mov	r3, r2
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	4413      	add	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	440b      	add	r3, r1
 800ca5a:	3312      	adds	r3, #18
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	83bb      	strh	r3, [r7, #28]
 800ca60:	e037      	b.n	800cad2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ca62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca66:	496d      	ldr	r1, [pc, #436]	; (800cc1c <etharp_find_entry+0x2d4>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	440b      	add	r3, r1
 800ca72:	3312      	adds	r3, #18
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	8b7a      	ldrh	r2, [r7, #26]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d82a      	bhi.n	800cad2 <etharp_find_entry+0x18a>
            old_pending = i;
 800ca7c:	8c3b      	ldrh	r3, [r7, #32]
 800ca7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ca80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca84:	4965      	ldr	r1, [pc, #404]	; (800cc1c <etharp_find_entry+0x2d4>)
 800ca86:	4613      	mov	r3, r2
 800ca88:	005b      	lsls	r3, r3, #1
 800ca8a:	4413      	add	r3, r2
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	440b      	add	r3, r1
 800ca90:	3312      	adds	r3, #18
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	837b      	strh	r3, [r7, #26]
 800ca96:	e01c      	b.n	800cad2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d919      	bls.n	800cad2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ca9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800caa2:	495e      	ldr	r1, [pc, #376]	; (800cc1c <etharp_find_entry+0x2d4>)
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	440b      	add	r3, r1
 800caae:	3312      	adds	r3, #18
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	8b3a      	ldrh	r2, [r7, #24]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d80c      	bhi.n	800cad2 <etharp_find_entry+0x18a>
            old_stable = i;
 800cab8:	8c3b      	ldrh	r3, [r7, #32]
 800caba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cabc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cac0:	4956      	ldr	r1, [pc, #344]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	3312      	adds	r3, #18
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cad2:	8c3b      	ldrh	r3, [r7, #32]
 800cad4:	3301      	adds	r3, #1
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	843b      	strh	r3, [r7, #32]
 800cada:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cade:	2b09      	cmp	r3, #9
 800cae0:	f77f af4c 	ble.w	800c97c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cae4:	7afb      	ldrb	r3, [r7, #11]
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b00      	cmp	r3, #0
 800caec:	d108      	bne.n	800cb00 <etharp_find_entry+0x1b8>
 800caee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800caf2:	2b0a      	cmp	r3, #10
 800caf4:	d107      	bne.n	800cb06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800caf6:	7afb      	ldrb	r3, [r7, #11]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d102      	bne.n	800cb06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cb00:	f04f 33ff 	mov.w	r3, #4294967295
 800cb04:	e085      	b.n	800cc12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cb06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cb0a:	2b09      	cmp	r3, #9
 800cb0c:	dc02      	bgt.n	800cb14 <etharp_find_entry+0x1cc>
    i = empty;
 800cb0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb10:	843b      	strh	r3, [r7, #32]
 800cb12:	e039      	b.n	800cb88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cb14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	dc14      	bgt.n	800cb46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cb1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cb20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb24:	493d      	ldr	r1, [pc, #244]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cb26:	4613      	mov	r3, r2
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	4413      	add	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	440b      	add	r3, r1
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d018      	beq.n	800cb68 <etharp_find_entry+0x220>
 800cb36:	4b3a      	ldr	r3, [pc, #232]	; (800cc20 <etharp_find_entry+0x2d8>)
 800cb38:	f240 126d 	movw	r2, #365	; 0x16d
 800cb3c:	493b      	ldr	r1, [pc, #236]	; (800cc2c <etharp_find_entry+0x2e4>)
 800cb3e:	483a      	ldr	r0, [pc, #232]	; (800cc28 <etharp_find_entry+0x2e0>)
 800cb40:	f002 f9dc 	bl	800eefc <iprintf>
 800cb44:	e010      	b.n	800cb68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cb46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cb4a:	2b09      	cmp	r3, #9
 800cb4c:	dc02      	bgt.n	800cb54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cb4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb50:	843b      	strh	r3, [r7, #32]
 800cb52:	e009      	b.n	800cb68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cb54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	dc02      	bgt.n	800cb62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cb5c:	8bfb      	ldrh	r3, [r7, #30]
 800cb5e:	843b      	strh	r3, [r7, #32]
 800cb60:	e002      	b.n	800cb68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cb62:	f04f 33ff 	mov.w	r3, #4294967295
 800cb66:	e054      	b.n	800cc12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb6c:	2b09      	cmp	r3, #9
 800cb6e:	dd06      	ble.n	800cb7e <etharp_find_entry+0x236>
 800cb70:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <etharp_find_entry+0x2d8>)
 800cb72:	f240 127f 	movw	r2, #383	; 0x17f
 800cb76:	492e      	ldr	r1, [pc, #184]	; (800cc30 <etharp_find_entry+0x2e8>)
 800cb78:	482b      	ldr	r0, [pc, #172]	; (800cc28 <etharp_find_entry+0x2e0>)
 800cb7a:	f002 f9bf 	bl	800eefc <iprintf>
    etharp_free_entry(i);
 800cb7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7ff fe06 	bl	800c794 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb8c:	2b09      	cmp	r3, #9
 800cb8e:	dd06      	ble.n	800cb9e <etharp_find_entry+0x256>
 800cb90:	4b23      	ldr	r3, [pc, #140]	; (800cc20 <etharp_find_entry+0x2d8>)
 800cb92:	f240 1283 	movw	r2, #387	; 0x183
 800cb96:	4926      	ldr	r1, [pc, #152]	; (800cc30 <etharp_find_entry+0x2e8>)
 800cb98:	4823      	ldr	r0, [pc, #140]	; (800cc28 <etharp_find_entry+0x2e0>)
 800cb9a:	f002 f9af 	bl	800eefc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cb9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cba2:	491e      	ldr	r1, [pc, #120]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cba4:	4613      	mov	r3, r2
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	4413      	add	r3, r2
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	440b      	add	r3, r1
 800cbae:	3314      	adds	r3, #20
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d006      	beq.n	800cbc4 <etharp_find_entry+0x27c>
 800cbb6:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <etharp_find_entry+0x2d8>)
 800cbb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cbbc:	491d      	ldr	r1, [pc, #116]	; (800cc34 <etharp_find_entry+0x2ec>)
 800cbbe:	481a      	ldr	r0, [pc, #104]	; (800cc28 <etharp_find_entry+0x2e0>)
 800cbc0:	f002 f99c 	bl	800eefc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00b      	beq.n	800cbe2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cbca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6819      	ldr	r1, [r3, #0]
 800cbd2:	4812      	ldr	r0, [pc, #72]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	4413      	add	r3, r2
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	4403      	add	r3, r0
 800cbde:	3304      	adds	r3, #4
 800cbe0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cbe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbe6:	490d      	ldr	r1, [pc, #52]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cbe8:	4613      	mov	r3, r2
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	4413      	add	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3312      	adds	r3, #18
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cbf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbfc:	4907      	ldr	r1, [pc, #28]	; (800cc1c <etharp_find_entry+0x2d4>)
 800cbfe:	4613      	mov	r3, r2
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	4413      	add	r3, r2
 800cc04:	00db      	lsls	r3, r3, #3
 800cc06:	440b      	add	r3, r1
 800cc08:	3308      	adds	r3, #8
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cc0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	; 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20000118 	.word	0x20000118
 800cc20:	0801261c 	.word	0x0801261c
 800cc24:	08012654 	.word	0x08012654
 800cc28:	08012694 	.word	0x08012694
 800cc2c:	080126bc 	.word	0x080126bc
 800cc30:	080126d4 	.word	0x080126d4
 800cc34:	080126e8 	.word	0x080126e8

0800cc38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc4c:	2b06      	cmp	r3, #6
 800cc4e:	d006      	beq.n	800cc5e <etharp_update_arp_entry+0x26>
 800cc50:	4b48      	ldr	r3, [pc, #288]	; (800cd74 <etharp_update_arp_entry+0x13c>)
 800cc52:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cc56:	4948      	ldr	r1, [pc, #288]	; (800cd78 <etharp_update_arp_entry+0x140>)
 800cc58:	4848      	ldr	r0, [pc, #288]	; (800cd7c <etharp_update_arp_entry+0x144>)
 800cc5a:	f002 f94f 	bl	800eefc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d012      	beq.n	800cc8a <etharp_update_arp_entry+0x52>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00e      	beq.n	800cc8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 f8fe 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800cc78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d105      	bne.n	800cc8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc86:	2be0      	cmp	r3, #224	; 0xe0
 800cc88:	d102      	bne.n	800cc90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc8a:	f06f 030f 	mvn.w	r3, #15
 800cc8e:	e06c      	b.n	800cd6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	4619      	mov	r1, r3
 800cc96:	68b8      	ldr	r0, [r7, #8]
 800cc98:	f7ff fe56 	bl	800c948 <etharp_find_entry>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cca0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	da02      	bge.n	800ccae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cca8:	8afb      	ldrh	r3, [r7, #22]
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	e05d      	b.n	800cd6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ccae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccb2:	4933      	ldr	r1, [pc, #204]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	4413      	add	r3, r2
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	440b      	add	r3, r1
 800ccbe:	3314      	adds	r3, #20
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ccc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccc8:	492d      	ldr	r1, [pc, #180]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ccda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	3308      	adds	r3, #8
 800cce8:	4a25      	ldr	r2, [pc, #148]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800ccea:	4413      	add	r3, r2
 800ccec:	3304      	adds	r3, #4
 800ccee:	2206      	movs	r2, #6
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f002 f8d2 	bl	800ee9c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ccf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccfc:	4920      	ldr	r1, [pc, #128]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800ccfe:	4613      	mov	r3, r2
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	4413      	add	r3, r2
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	440b      	add	r3, r1
 800cd08:	3312      	adds	r3, #18
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cd0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd12:	491b      	ldr	r1, [pc, #108]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800cd14:	4613      	mov	r3, r2
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	4413      	add	r3, r2
 800cd1a:	00db      	lsls	r3, r3, #3
 800cd1c:	440b      	add	r3, r1
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d021      	beq.n	800cd68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cd24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd28:	4915      	ldr	r1, [pc, #84]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	4413      	add	r3, r2
 800cd30:	00db      	lsls	r3, r3, #3
 800cd32:	440b      	add	r3, r1
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cd38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cd3c:	4910      	ldr	r1, [pc, #64]	; (800cd80 <etharp_update_arp_entry+0x148>)
 800cd3e:	4613      	mov	r3, r2
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4413      	add	r3, r2
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	440b      	add	r3, r1
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6939      	ldr	r1, [r7, #16]
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f002 f823 	bl	800eda8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cd62:	6938      	ldr	r0, [r7, #16]
 800cd64:	f7f8 ff34 	bl	8005bd0 <pbuf_free>
  }
  return ERR_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	0801261c 	.word	0x0801261c
 800cd78:	08012714 	.word	0x08012714
 800cd7c:	08012694 	.word	0x08012694
 800cd80:	20000118 	.word	0x20000118

0800cd84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e01e      	b.n	800cdd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cd92:	4913      	ldr	r1, [pc, #76]	; (800cde0 <etharp_cleanup_netif+0x5c>)
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	3314      	adds	r3, #20
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00e      	beq.n	800cdca <etharp_cleanup_netif+0x46>
 800cdac:	490c      	ldr	r1, [pc, #48]	; (800cde0 <etharp_cleanup_netif+0x5c>)
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	4413      	add	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	440b      	add	r3, r1
 800cdba:	3308      	adds	r3, #8
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d102      	bne.n	800cdca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff fce5 	bl	800c794 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	dddd      	ble.n	800cd92 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	bf00      	nop
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20000118 	.word	0x20000118

0800cde4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cde4:	b5b0      	push	{r4, r5, r7, lr}
 800cde6:	b08a      	sub	sp, #40	; 0x28
 800cde8:	af04      	add	r7, sp, #16
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d107      	bne.n	800ce04 <etharp_input+0x20>
 800cdf4:	4b3d      	ldr	r3, [pc, #244]	; (800ceec <etharp_input+0x108>)
 800cdf6:	f240 228a 	movw	r2, #650	; 0x28a
 800cdfa:	493d      	ldr	r1, [pc, #244]	; (800cef0 <etharp_input+0x10c>)
 800cdfc:	483d      	ldr	r0, [pc, #244]	; (800cef4 <etharp_input+0x110>)
 800cdfe:	f002 f87d 	bl	800eefc <iprintf>
 800ce02:	e06f      	b.n	800cee4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce14:	d10c      	bne.n	800ce30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ce1a:	2b06      	cmp	r3, #6
 800ce1c:	d108      	bne.n	800ce30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ce22:	2b04      	cmp	r3, #4
 800ce24:	d104      	bne.n	800ce30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d003      	beq.n	800ce38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7f8 fecd 	bl	8005bd0 <pbuf_free>
    return;
 800ce36:	e055      	b.n	800cee4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	330e      	adds	r3, #14
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	3318      	adds	r3, #24
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d102      	bne.n	800ce58 <etharp_input+0x74>
    for_us = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	75fb      	strb	r3, [r7, #23]
 800ce56:	e009      	b.n	800ce6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	bf0c      	ite	eq
 800ce64:	2301      	moveq	r3, #1
 800ce66:	2300      	movne	r3, #0
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f103 0208 	add.w	r2, r3, #8
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <etharp_input+0x98>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e000      	b.n	800ce7e <etharp_input+0x9a>
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	f107 010c 	add.w	r1, r7, #12
 800ce82:	6838      	ldr	r0, [r7, #0]
 800ce84:	f7ff fed8 	bl	800cc38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	88db      	ldrh	r3, [r3, #6]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d003      	beq.n	800ce9c <etharp_input+0xb8>
 800ce94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce98:	d01e      	beq.n	800ced8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ce9a:	e020      	b.n	800cede <etharp_input+0xfa>
      if (for_us) {
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d01c      	beq.n	800cedc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cebc:	2102      	movs	r1, #2
 800cebe:	9103      	str	r1, [sp, #12]
 800cec0:	f107 010c 	add.w	r1, r7, #12
 800cec4:	9102      	str	r1, [sp, #8]
 800cec6:	9201      	str	r2, [sp, #4]
 800cec8:	9300      	str	r3, [sp, #0]
 800ceca:	462b      	mov	r3, r5
 800cecc:	4622      	mov	r2, r4
 800cece:	4601      	mov	r1, r0
 800ced0:	6838      	ldr	r0, [r7, #0]
 800ced2:	f000 faeb 	bl	800d4ac <etharp_raw>
      break;
 800ced6:	e001      	b.n	800cedc <etharp_input+0xf8>
      break;
 800ced8:	bf00      	nop
 800ceda:	e000      	b.n	800cede <etharp_input+0xfa>
      break;
 800cedc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7f8 fe76 	bl	8005bd0 <pbuf_free>
}
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bdb0      	pop	{r4, r5, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	0801261c 	.word	0x0801261c
 800cef0:	0801276c 	.word	0x0801276c
 800cef4:	08012694 	.word	0x08012694

0800cef8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	4613      	mov	r3, r2
 800cf04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cf06:	79fa      	ldrb	r2, [r7, #7]
 800cf08:	4944      	ldr	r1, [pc, #272]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	4413      	add	r3, r2
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	440b      	add	r3, r1
 800cf14:	3314      	adds	r3, #20
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d806      	bhi.n	800cf2a <etharp_output_to_arp_index+0x32>
 800cf1c:	4b40      	ldr	r3, [pc, #256]	; (800d020 <etharp_output_to_arp_index+0x128>)
 800cf1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cf22:	4940      	ldr	r1, [pc, #256]	; (800d024 <etharp_output_to_arp_index+0x12c>)
 800cf24:	4840      	ldr	r0, [pc, #256]	; (800d028 <etharp_output_to_arp_index+0x130>)
 800cf26:	f001 ffe9 	bl	800eefc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cf2a:	79fa      	ldrb	r2, [r7, #7]
 800cf2c:	493b      	ldr	r1, [pc, #236]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	440b      	add	r3, r1
 800cf38:	3314      	adds	r3, #20
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d153      	bne.n	800cfe8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cf40:	79fa      	ldrb	r2, [r7, #7]
 800cf42:	4936      	ldr	r1, [pc, #216]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf44:	4613      	mov	r3, r2
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	4413      	add	r3, r2
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	440b      	add	r3, r1
 800cf4e:	3312      	adds	r3, #18
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cf56:	d919      	bls.n	800cf8c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cf58:	79fa      	ldrb	r2, [r7, #7]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	4413      	add	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	4a2e      	ldr	r2, [pc, #184]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf64:	4413      	add	r3, r2
 800cf66:	3304      	adds	r3, #4
 800cf68:	4619      	mov	r1, r3
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 fb4c 	bl	800d608 <etharp_request>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d138      	bne.n	800cfe8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf76:	79fa      	ldrb	r2, [r7, #7]
 800cf78:	4928      	ldr	r1, [pc, #160]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	4413      	add	r3, r2
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	440b      	add	r3, r1
 800cf84:	3314      	adds	r3, #20
 800cf86:	2203      	movs	r2, #3
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	e02d      	b.n	800cfe8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cf8c:	79fa      	ldrb	r2, [r7, #7]
 800cf8e:	4923      	ldr	r1, [pc, #140]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	440b      	add	r3, r1
 800cf9a:	3312      	adds	r3, #18
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cfa2:	d321      	bcc.n	800cfe8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cfa4:	79fa      	ldrb	r2, [r7, #7]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	4413      	add	r3, r2
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	4a1b      	ldr	r2, [pc, #108]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cfb0:	4413      	add	r3, r2
 800cfb2:	1d19      	adds	r1, r3, #4
 800cfb4:	79fa      	ldrb	r2, [r7, #7]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	4a16      	ldr	r2, [pc, #88]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cfc2:	4413      	add	r3, r2
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 fafb 	bl	800d5c4 <etharp_request_dst>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d109      	bne.n	800cfe8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cfd4:	79fa      	ldrb	r2, [r7, #7]
 800cfd6:	4911      	ldr	r1, [pc, #68]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cfd8:	4613      	mov	r3, r2
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	440b      	add	r3, r1
 800cfe2:	3314      	adds	r3, #20
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cfee:	79fa      	ldrb	r2, [r7, #7]
 800cff0:	4613      	mov	r3, r2
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	4413      	add	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	3308      	adds	r3, #8
 800cffa:	4a08      	ldr	r2, [pc, #32]	; (800d01c <etharp_output_to_arp_index+0x124>)
 800cffc:	4413      	add	r3, r2
 800cffe:	3304      	adds	r3, #4
 800d000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d004:	9200      	str	r2, [sp, #0]
 800d006:	460a      	mov	r2, r1
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f001 fecc 	bl	800eda8 <ethernet_output>
 800d010:	4603      	mov	r3, r0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20000118 	.word	0x20000118
 800d020:	0801261c 	.word	0x0801261c
 800d024:	0801278c 	.word	0x0801278c
 800d028:	08012694 	.word	0x08012694

0800d02c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08a      	sub	sp, #40	; 0x28
 800d030:	af02      	add	r7, sp, #8
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <etharp_output+0x24>
 800d042:	4b73      	ldr	r3, [pc, #460]	; (800d210 <etharp_output+0x1e4>)
 800d044:	f240 321e 	movw	r2, #798	; 0x31e
 800d048:	4972      	ldr	r1, [pc, #456]	; (800d214 <etharp_output+0x1e8>)
 800d04a:	4873      	ldr	r0, [pc, #460]	; (800d218 <etharp_output+0x1ec>)
 800d04c:	f001 ff56 	bl	800eefc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <etharp_output+0x38>
 800d056:	4b6e      	ldr	r3, [pc, #440]	; (800d210 <etharp_output+0x1e4>)
 800d058:	f240 321f 	movw	r2, #799	; 0x31f
 800d05c:	496f      	ldr	r1, [pc, #444]	; (800d21c <etharp_output+0x1f0>)
 800d05e:	486e      	ldr	r0, [pc, #440]	; (800d218 <etharp_output+0x1ec>)
 800d060:	f001 ff4c 	bl	800eefc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <etharp_output+0x4c>
 800d06a:	4b69      	ldr	r3, [pc, #420]	; (800d210 <etharp_output+0x1e4>)
 800d06c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d070:	496b      	ldr	r1, [pc, #428]	; (800d220 <etharp_output+0x1f4>)
 800d072:	4869      	ldr	r0, [pc, #420]	; (800d218 <etharp_output+0x1ec>)
 800d074:	f001 ff42 	bl	800eefc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68f9      	ldr	r1, [r7, #12]
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fef8 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d08a:	4b66      	ldr	r3, [pc, #408]	; (800d224 <etharp_output+0x1f8>)
 800d08c:	61fb      	str	r3, [r7, #28]
 800d08e:	e0af      	b.n	800d1f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d098:	2be0      	cmp	r3, #224	; 0xe0
 800d09a:	d118      	bne.n	800d0ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d09c:	2301      	movs	r3, #1
 800d09e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d0a4:	235e      	movs	r3, #94	; 0x5e
 800d0a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3302      	adds	r3, #2
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	3303      	adds	r3, #3
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d0c6:	f107 0310 	add.w	r3, r7, #16
 800d0ca:	61fb      	str	r3, [r7, #28]
 800d0cc:	e090      	b.n	800d1f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	405a      	eors	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3308      	adds	r3, #8
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d012      	beq.n	800d10c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d0ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d00b      	beq.n	800d10c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	330c      	adds	r3, #12
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	330c      	adds	r3, #12
 800d102:	61bb      	str	r3, [r7, #24]
 800d104:	e002      	b.n	800d10c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d106:	f06f 0303 	mvn.w	r3, #3
 800d10a:	e07d      	b.n	800d208 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d10c:	4b46      	ldr	r3, [pc, #280]	; (800d228 <etharp_output+0x1fc>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	4619      	mov	r1, r3
 800d112:	4a46      	ldr	r2, [pc, #280]	; (800d22c <etharp_output+0x200>)
 800d114:	460b      	mov	r3, r1
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	440b      	add	r3, r1
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	4413      	add	r3, r2
 800d11e:	3314      	adds	r3, #20
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d925      	bls.n	800d172 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d126:	4b40      	ldr	r3, [pc, #256]	; (800d228 <etharp_output+0x1fc>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	4619      	mov	r1, r3
 800d12c:	4a3f      	ldr	r2, [pc, #252]	; (800d22c <etharp_output+0x200>)
 800d12e:	460b      	mov	r3, r1
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	440b      	add	r3, r1
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	4413      	add	r3, r2
 800d138:	3308      	adds	r3, #8
 800d13a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d117      	bne.n	800d172 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	4b38      	ldr	r3, [pc, #224]	; (800d228 <etharp_output+0x1fc>)
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	4618      	mov	r0, r3
 800d14c:	4937      	ldr	r1, [pc, #220]	; (800d22c <etharp_output+0x200>)
 800d14e:	4603      	mov	r3, r0
 800d150:	005b      	lsls	r3, r3, #1
 800d152:	4403      	add	r3, r0
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	440b      	add	r3, r1
 800d158:	3304      	adds	r3, #4
 800d15a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d108      	bne.n	800d172 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d160:	4b31      	ldr	r3, [pc, #196]	; (800d228 <etharp_output+0x1fc>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	461a      	mov	r2, r3
 800d166:	68b9      	ldr	r1, [r7, #8]
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fec5 	bl	800cef8 <etharp_output_to_arp_index>
 800d16e:	4603      	mov	r3, r0
 800d170:	e04a      	b.n	800d208 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d172:	2300      	movs	r3, #0
 800d174:	75fb      	strb	r3, [r7, #23]
 800d176:	e031      	b.n	800d1dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d178:	7dfa      	ldrb	r2, [r7, #23]
 800d17a:	492c      	ldr	r1, [pc, #176]	; (800d22c <etharp_output+0x200>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	4413      	add	r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	440b      	add	r3, r1
 800d186:	3314      	adds	r3, #20
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d923      	bls.n	800d1d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d18e:	7dfa      	ldrb	r2, [r7, #23]
 800d190:	4926      	ldr	r1, [pc, #152]	; (800d22c <etharp_output+0x200>)
 800d192:	4613      	mov	r3, r2
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	4413      	add	r3, r2
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	440b      	add	r3, r1
 800d19c:	3308      	adds	r3, #8
 800d19e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d117      	bne.n	800d1d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	6819      	ldr	r1, [r3, #0]
 800d1aa:	7dfa      	ldrb	r2, [r7, #23]
 800d1ac:	481f      	ldr	r0, [pc, #124]	; (800d22c <etharp_output+0x200>)
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	4413      	add	r3, r2
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	4403      	add	r3, r0
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d1bc:	4299      	cmp	r1, r3
 800d1be:	d10a      	bne.n	800d1d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d1c0:	4a19      	ldr	r2, [pc, #100]	; (800d228 <etharp_output+0x1fc>)
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	68b9      	ldr	r1, [r7, #8]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7ff fe93 	bl	800cef8 <etharp_output_to_arp_index>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	e018      	b.n	800d208 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	75fb      	strb	r3, [r7, #23]
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	2b09      	cmp	r3, #9
 800d1e0:	d9ca      	bls.n	800d178 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	69b9      	ldr	r1, [r7, #24]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 f822 	bl	800d230 <etharp_query>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	e00b      	b.n	800d208 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d1f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f001 fdd1 	bl	800eda8 <ethernet_output>
 800d206:	4603      	mov	r3, r0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3720      	adds	r7, #32
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	0801261c 	.word	0x0801261c
 800d214:	0801276c 	.word	0x0801276c
 800d218:	08012694 	.word	0x08012694
 800d21c:	080127bc 	.word	0x080127bc
 800d220:	0801275c 	.word	0x0801275c
 800d224:	08012dc4 	.word	0x08012dc4
 800d228:	20000208 	.word	0x20000208
 800d22c:	20000118 	.word	0x20000118

0800d230 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08c      	sub	sp, #48	; 0x30
 800d234:	af02      	add	r7, sp, #8
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3326      	adds	r3, #38	; 0x26
 800d240:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d242:	23ff      	movs	r3, #255	; 0xff
 800d244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fe0e 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10c      	bne.n	800d278 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d266:	2be0      	cmp	r3, #224	; 0xe0
 800d268:	d006      	beq.n	800d278 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d003      	beq.n	800d278 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d102      	bne.n	800d27e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d278:	f06f 030f 	mvn.w	r3, #15
 800d27c:	e101      	b.n	800d482 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	2101      	movs	r1, #1
 800d282:	68b8      	ldr	r0, [r7, #8]
 800d284:	f7ff fb60 	bl	800c948 <etharp_find_entry>
 800d288:	4603      	mov	r3, r0
 800d28a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d28c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d290:	2b00      	cmp	r3, #0
 800d292:	da02      	bge.n	800d29a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d294:	8a7b      	ldrh	r3, [r7, #18]
 800d296:	b25b      	sxtb	r3, r3
 800d298:	e0f3      	b.n	800d482 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d29a:	8a7b      	ldrh	r3, [r7, #18]
 800d29c:	2b7e      	cmp	r3, #126	; 0x7e
 800d29e:	d906      	bls.n	800d2ae <etharp_query+0x7e>
 800d2a0:	4b7a      	ldr	r3, [pc, #488]	; (800d48c <etharp_query+0x25c>)
 800d2a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d2a6:	497a      	ldr	r1, [pc, #488]	; (800d490 <etharp_query+0x260>)
 800d2a8:	487a      	ldr	r0, [pc, #488]	; (800d494 <etharp_query+0x264>)
 800d2aa:	f001 fe27 	bl	800eefc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d2ae:	8a7b      	ldrh	r3, [r7, #18]
 800d2b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d2b2:	7c7a      	ldrb	r2, [r7, #17]
 800d2b4:	4978      	ldr	r1, [pc, #480]	; (800d498 <etharp_query+0x268>)
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	4413      	add	r3, r2
 800d2bc:	00db      	lsls	r3, r3, #3
 800d2be:	440b      	add	r3, r1
 800d2c0:	3314      	adds	r3, #20
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d115      	bne.n	800d2f4 <etharp_query+0xc4>
    is_new_entry = 1;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d2cc:	7c7a      	ldrb	r2, [r7, #17]
 800d2ce:	4972      	ldr	r1, [pc, #456]	; (800d498 <etharp_query+0x268>)
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	440b      	add	r3, r1
 800d2da:	3314      	adds	r3, #20
 800d2dc:	2201      	movs	r2, #1
 800d2de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d2e0:	7c7a      	ldrb	r2, [r7, #17]
 800d2e2:	496d      	ldr	r1, [pc, #436]	; (800d498 <etharp_query+0x268>)
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	005b      	lsls	r3, r3, #1
 800d2e8:	4413      	add	r3, r2
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	440b      	add	r3, r1
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d2f4:	7c7a      	ldrb	r2, [r7, #17]
 800d2f6:	4968      	ldr	r1, [pc, #416]	; (800d498 <etharp_query+0x268>)
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	4413      	add	r3, r2
 800d2fe:	00db      	lsls	r3, r3, #3
 800d300:	440b      	add	r3, r1
 800d302:	3314      	adds	r3, #20
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d011      	beq.n	800d32e <etharp_query+0xfe>
 800d30a:	7c7a      	ldrb	r2, [r7, #17]
 800d30c:	4962      	ldr	r1, [pc, #392]	; (800d498 <etharp_query+0x268>)
 800d30e:	4613      	mov	r3, r2
 800d310:	005b      	lsls	r3, r3, #1
 800d312:	4413      	add	r3, r2
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	440b      	add	r3, r1
 800d318:	3314      	adds	r3, #20
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d806      	bhi.n	800d32e <etharp_query+0xfe>
 800d320:	4b5a      	ldr	r3, [pc, #360]	; (800d48c <etharp_query+0x25c>)
 800d322:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d326:	495d      	ldr	r1, [pc, #372]	; (800d49c <etharp_query+0x26c>)
 800d328:	485a      	ldr	r0, [pc, #360]	; (800d494 <etharp_query+0x264>)
 800d32a:	f001 fde7 	bl	800eefc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d102      	bne.n	800d33a <etharp_query+0x10a>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10c      	bne.n	800d354 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d33a:	68b9      	ldr	r1, [r7, #8]
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f963 	bl	800d608 <etharp_request>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <etharp_query+0x124>
      return result;
 800d34e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d352:	e096      	b.n	800d482 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <etharp_query+0x138>
 800d35a:	4b4c      	ldr	r3, [pc, #304]	; (800d48c <etharp_query+0x25c>)
 800d35c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d360:	494f      	ldr	r1, [pc, #316]	; (800d4a0 <etharp_query+0x270>)
 800d362:	484c      	ldr	r0, [pc, #304]	; (800d494 <etharp_query+0x264>)
 800d364:	f001 fdca 	bl	800eefc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d368:	7c7a      	ldrb	r2, [r7, #17]
 800d36a:	494b      	ldr	r1, [pc, #300]	; (800d498 <etharp_query+0x268>)
 800d36c:	4613      	mov	r3, r2
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	4413      	add	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	440b      	add	r3, r1
 800d376:	3314      	adds	r3, #20
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d917      	bls.n	800d3ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d37e:	4a49      	ldr	r2, [pc, #292]	; (800d4a4 <etharp_query+0x274>)
 800d380:	7c7b      	ldrb	r3, [r7, #17]
 800d382:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d384:	7c7a      	ldrb	r2, [r7, #17]
 800d386:	4613      	mov	r3, r2
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	4413      	add	r3, r2
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	3308      	adds	r3, #8
 800d390:	4a41      	ldr	r2, [pc, #260]	; (800d498 <etharp_query+0x268>)
 800d392:	4413      	add	r3, r2
 800d394:	3304      	adds	r3, #4
 800d396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d39a:	9200      	str	r2, [sp, #0]
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	6879      	ldr	r1, [r7, #4]
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f001 fd01 	bl	800eda8 <ethernet_output>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3ac:	e067      	b.n	800d47e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d3ae:	7c7a      	ldrb	r2, [r7, #17]
 800d3b0:	4939      	ldr	r1, [pc, #228]	; (800d498 <etharp_query+0x268>)
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	4413      	add	r3, r2
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3314      	adds	r3, #20
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d15c      	bne.n	800d47e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d3cc:	e01c      	b.n	800d408 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	895a      	ldrh	r2, [r3, #10]
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	891b      	ldrh	r3, [r3, #8]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d10a      	bne.n	800d3f0 <etharp_query+0x1c0>
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d006      	beq.n	800d3f0 <etharp_query+0x1c0>
 800d3e2:	4b2a      	ldr	r3, [pc, #168]	; (800d48c <etharp_query+0x25c>)
 800d3e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d3e8:	492f      	ldr	r1, [pc, #188]	; (800d4a8 <etharp_query+0x278>)
 800d3ea:	482a      	ldr	r0, [pc, #168]	; (800d494 <etharp_query+0x264>)
 800d3ec:	f001 fd86 	bl	800eefc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	7b1b      	ldrb	r3, [r3, #12]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <etharp_query+0x1d2>
        copy_needed = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	61bb      	str	r3, [r7, #24]
        break;
 800d400:	e005      	b.n	800d40e <etharp_query+0x1de>
      }
      p = p->next;
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1df      	bne.n	800d3ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d007      	beq.n	800d424 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d41a:	200e      	movs	r0, #14
 800d41c:	f7f8 fec6 	bl	80061ac <pbuf_clone>
 800d420:	61f8      	str	r0, [r7, #28]
 800d422:	e004      	b.n	800d42e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d428:	69f8      	ldr	r0, [r7, #28]
 800d42a:	f7f8 fc71 	bl	8005d10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d021      	beq.n	800d478 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d434:	7c7a      	ldrb	r2, [r7, #17]
 800d436:	4918      	ldr	r1, [pc, #96]	; (800d498 <etharp_query+0x268>)
 800d438:	4613      	mov	r3, r2
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	4413      	add	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	440b      	add	r3, r1
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00a      	beq.n	800d45e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d448:	7c7a      	ldrb	r2, [r7, #17]
 800d44a:	4913      	ldr	r1, [pc, #76]	; (800d498 <etharp_query+0x268>)
 800d44c:	4613      	mov	r3, r2
 800d44e:	005b      	lsls	r3, r3, #1
 800d450:	4413      	add	r3, r2
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	440b      	add	r3, r1
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f8 fbb9 	bl	8005bd0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d45e:	7c7a      	ldrb	r2, [r7, #17]
 800d460:	490d      	ldr	r1, [pc, #52]	; (800d498 <etharp_query+0x268>)
 800d462:	4613      	mov	r3, r2
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4413      	add	r3, r2
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	440b      	add	r3, r1
 800d46c:	69fa      	ldr	r2, [r7, #28]
 800d46e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d476:	e002      	b.n	800d47e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d478:	23ff      	movs	r3, #255	; 0xff
 800d47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d482:	4618      	mov	r0, r3
 800d484:	3728      	adds	r7, #40	; 0x28
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	0801261c 	.word	0x0801261c
 800d490:	080127c8 	.word	0x080127c8
 800d494:	08012694 	.word	0x08012694
 800d498:	20000118 	.word	0x20000118
 800d49c:	080127d8 	.word	0x080127d8
 800d4a0:	080127bc 	.word	0x080127bc
 800d4a4:	20000208 	.word	0x20000208
 800d4a8:	08012800 	.word	0x08012800

0800d4ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	; 0x28
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <etharp_raw+0x26>
 800d4c4:	4b3a      	ldr	r3, [pc, #232]	; (800d5b0 <etharp_raw+0x104>)
 800d4c6:	f240 4257 	movw	r2, #1111	; 0x457
 800d4ca:	493a      	ldr	r1, [pc, #232]	; (800d5b4 <etharp_raw+0x108>)
 800d4cc:	483a      	ldr	r0, [pc, #232]	; (800d5b8 <etharp_raw+0x10c>)
 800d4ce:	f001 fd15 	bl	800eefc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d4d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d4d6:	211c      	movs	r1, #28
 800d4d8:	200e      	movs	r0, #14
 800d4da:	f7f8 f895 	bl	8005608 <pbuf_alloc>
 800d4de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d102      	bne.n	800d4ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ea:	e05d      	b.n	800d5a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	2b1b      	cmp	r3, #27
 800d4f2:	d806      	bhi.n	800d502 <etharp_raw+0x56>
 800d4f4:	4b2e      	ldr	r3, [pc, #184]	; (800d5b0 <etharp_raw+0x104>)
 800d4f6:	f240 4262 	movw	r2, #1122	; 0x462
 800d4fa:	4930      	ldr	r1, [pc, #192]	; (800d5bc <etharp_raw+0x110>)
 800d4fc:	482e      	ldr	r0, [pc, #184]	; (800d5b8 <etharp_raw+0x10c>)
 800d4fe:	f001 fcfd 	bl	800eefc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d508:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f7 f8ac 	bl	8004668 <lwip_htons>
 800d510:	4603      	mov	r3, r0
 800d512:	461a      	mov	r2, r3
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d51e:	2b06      	cmp	r3, #6
 800d520:	d006      	beq.n	800d530 <etharp_raw+0x84>
 800d522:	4b23      	ldr	r3, [pc, #140]	; (800d5b0 <etharp_raw+0x104>)
 800d524:	f240 4269 	movw	r2, #1129	; 0x469
 800d528:	4925      	ldr	r1, [pc, #148]	; (800d5c0 <etharp_raw+0x114>)
 800d52a:	4823      	ldr	r0, [pc, #140]	; (800d5b8 <etharp_raw+0x10c>)
 800d52c:	f001 fce6 	bl	800eefc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	3308      	adds	r3, #8
 800d534:	2206      	movs	r2, #6
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f001 fcaf 	bl	800ee9c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	3312      	adds	r3, #18
 800d542:	2206      	movs	r2, #6
 800d544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d546:	4618      	mov	r0, r3
 800d548:	f001 fca8 	bl	800ee9c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	330e      	adds	r3, #14
 800d550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d552:	6812      	ldr	r2, [r2, #0]
 800d554:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	3318      	adds	r3, #24
 800d55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d55c:	6812      	ldr	r2, [r2, #0]
 800d55e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
 800d566:	2200      	movs	r2, #0
 800d568:	f042 0201 	orr.w	r2, r2, #1
 800d56c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2200      	movs	r2, #0
 800d572:	f042 0208 	orr.w	r2, r2, #8
 800d576:	709a      	strb	r2, [r3, #2]
 800d578:	2200      	movs	r2, #0
 800d57a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	2206      	movs	r2, #6
 800d580:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2204      	movs	r2, #4
 800d586:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d588:	f640 0306 	movw	r3, #2054	; 0x806
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	69b9      	ldr	r1, [r7, #24]
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f001 fc07 	bl	800eda8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d59a:	69b8      	ldr	r0, [r7, #24]
 800d59c:	f7f8 fb18 	bl	8005bd0 <pbuf_free>
  p = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d5a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3720      	adds	r7, #32
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	0801261c 	.word	0x0801261c
 800d5b4:	0801276c 	.word	0x0801276c
 800d5b8:	08012694 	.word	0x08012694
 800d5bc:	0801281c 	.word	0x0801281c
 800d5c0:	08012850 	.word	0x08012850

0800d5c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af04      	add	r7, sp, #16
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	9203      	str	r2, [sp, #12]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	9202      	str	r2, [sp, #8]
 800d5e8:	4a06      	ldr	r2, [pc, #24]	; (800d604 <etharp_request_dst+0x40>)
 800d5ea:	9201      	str	r2, [sp, #4]
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff ff5a 	bl	800d4ac <etharp_raw>
 800d5f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	08012dcc 	.word	0x08012dcc

0800d608 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d612:	4a05      	ldr	r2, [pc, #20]	; (800d628 <etharp_request+0x20>)
 800d614:	6839      	ldr	r1, [r7, #0]
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ffd4 	bl	800d5c4 <etharp_request_dst>
 800d61c:	4603      	mov	r3, r0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	08012dc4 	.word	0x08012dc4

0800d62c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08e      	sub	sp, #56	; 0x38
 800d630:	af04      	add	r7, sp, #16
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d636:	4b79      	ldr	r3, [pc, #484]	; (800d81c <icmp_input+0x1f0>)
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	f003 030f 	and.w	r3, r3, #15
 800d644:	b2db      	uxtb	r3, r3
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d64e:	2b13      	cmp	r3, #19
 800d650:	f240 80cd 	bls.w	800d7ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	895b      	ldrh	r3, [r3, #10]
 800d658:	2b03      	cmp	r3, #3
 800d65a:	f240 80ca 	bls.w	800d7f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d668:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 80b7 	beq.w	800d7e0 <icmp_input+0x1b4>
 800d672:	2b08      	cmp	r3, #8
 800d674:	f040 80b7 	bne.w	800d7e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d678:	4b69      	ldr	r3, [pc, #420]	; (800d820 <icmp_input+0x1f4>)
 800d67a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d67c:	4b67      	ldr	r3, [pc, #412]	; (800d81c <icmp_input+0x1f0>)
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d684:	2be0      	cmp	r3, #224	; 0xe0
 800d686:	f000 80bb 	beq.w	800d800 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d68a:	4b64      	ldr	r3, [pc, #400]	; (800d81c <icmp_input+0x1f0>)
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	4a63      	ldr	r2, [pc, #396]	; (800d81c <icmp_input+0x1f0>)
 800d690:	6812      	ldr	r2, [r2, #0]
 800d692:	4611      	mov	r1, r2
 800d694:	4618      	mov	r0, r3
 800d696:	f000 fbed 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f040 80b1 	bne.w	800d804 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	891b      	ldrh	r3, [r3, #8]
 800d6a6:	2b07      	cmp	r3, #7
 800d6a8:	f240 80a5 	bls.w	800d7f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d6ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ae:	330e      	adds	r3, #14
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f8 f9f6 	bl	8005aa4 <pbuf_add_header>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d04b      	beq.n	800d756 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	891a      	ldrh	r2, [r3, #8]
 800d6c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6c4:	4413      	add	r3, r2
 800d6c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	8b7a      	ldrh	r2, [r7, #26]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	f0c0 809a 	bcc.w	800d808 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d6d4:	8b7b      	ldrh	r3, [r7, #26]
 800d6d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6da:	4619      	mov	r1, r3
 800d6dc:	200e      	movs	r0, #14
 800d6de:	f7f7 ff93 	bl	8005608 <pbuf_alloc>
 800d6e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 8090 	beq.w	800d80c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	895b      	ldrh	r3, [r3, #10]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d203      	bcs.n	800d702 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d6fa:	6978      	ldr	r0, [r7, #20]
 800d6fc:	f7f8 fa68 	bl	8005bd0 <pbuf_free>
          goto icmperr;
 800d700:	e085      	b.n	800d80e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d70a:	4618      	mov	r0, r3
 800d70c:	f001 fbc6 	bl	800ee9c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d712:	4619      	mov	r1, r3
 800d714:	6978      	ldr	r0, [r7, #20]
 800d716:	f7f8 f9d5 	bl	8005ac4 <pbuf_remove_header>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d720:	4b40      	ldr	r3, [pc, #256]	; (800d824 <icmp_input+0x1f8>)
 800d722:	22b6      	movs	r2, #182	; 0xb6
 800d724:	4940      	ldr	r1, [pc, #256]	; (800d828 <icmp_input+0x1fc>)
 800d726:	4841      	ldr	r0, [pc, #260]	; (800d82c <icmp_input+0x200>)
 800d728:	f001 fbe8 	bl	800eefc <iprintf>
          pbuf_free(r);
 800d72c:	6978      	ldr	r0, [r7, #20]
 800d72e:	f7f8 fa4f 	bl	8005bd0 <pbuf_free>
          goto icmperr;
 800d732:	e06c      	b.n	800d80e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	6978      	ldr	r0, [r7, #20]
 800d738:	f7f8 fb62 	bl	8005e00 <pbuf_copy>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d742:	6978      	ldr	r0, [r7, #20]
 800d744:	f7f8 fa44 	bl	8005bd0 <pbuf_free>
          goto icmperr;
 800d748:	e061      	b.n	800d80e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7f8 fa40 	bl	8005bd0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	607b      	str	r3, [r7, #4]
 800d754:	e00f      	b.n	800d776 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d758:	330e      	adds	r3, #14
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7f8 f9b1 	bl	8005ac4 <pbuf_remove_header>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d006      	beq.n	800d776 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d768:	4b2e      	ldr	r3, [pc, #184]	; (800d824 <icmp_input+0x1f8>)
 800d76a:	22c7      	movs	r2, #199	; 0xc7
 800d76c:	4930      	ldr	r1, [pc, #192]	; (800d830 <icmp_input+0x204>)
 800d76e:	482f      	ldr	r0, [pc, #188]	; (800d82c <icmp_input+0x200>)
 800d770:	f001 fbc4 	bl	800eefc <iprintf>
          goto icmperr;
 800d774:	e04b      	b.n	800d80e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d77c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7f8 f98f 	bl	8005aa4 <pbuf_add_header>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d12b      	bne.n	800d7e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d79a:	4b20      	ldr	r3, [pc, #128]	; (800d81c <icmp_input+0x1f0>)
 800d79c:	691a      	ldr	r2, [r3, #16]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	709a      	strb	r2, [r3, #2]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	22ff      	movs	r2, #255	; 0xff
 800d7b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	729a      	strb	r2, [r3, #10]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	9302      	str	r3, [sp, #8]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	23ff      	movs	r3, #255	; 0xff
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	69f9      	ldr	r1, [r7, #28]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fa75 	bl	800dcc4 <ip4_output_if>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d7de:	e001      	b.n	800d7e4 <icmp_input+0x1b8>
      break;
 800d7e0:	bf00      	nop
 800d7e2:	e000      	b.n	800d7e6 <icmp_input+0x1ba>
      break;
 800d7e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7f8 f9f2 	bl	8005bd0 <pbuf_free>
  return;
 800d7ec:	e013      	b.n	800d816 <icmp_input+0x1ea>
    goto lenerr;
 800d7ee:	bf00      	nop
 800d7f0:	e002      	b.n	800d7f8 <icmp_input+0x1cc>
    goto lenerr;
 800d7f2:	bf00      	nop
 800d7f4:	e000      	b.n	800d7f8 <icmp_input+0x1cc>
        goto lenerr;
 800d7f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7f8 f9e9 	bl	8005bd0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7fe:	e00a      	b.n	800d816 <icmp_input+0x1ea>
        goto icmperr;
 800d800:	bf00      	nop
 800d802:	e004      	b.n	800d80e <icmp_input+0x1e2>
        goto icmperr;
 800d804:	bf00      	nop
 800d806:	e002      	b.n	800d80e <icmp_input+0x1e2>
          goto icmperr;
 800d808:	bf00      	nop
 800d80a:	e000      	b.n	800d80e <icmp_input+0x1e2>
          goto icmperr;
 800d80c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7f8 f9de 	bl	8005bd0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d814:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d816:	3728      	adds	r7, #40	; 0x28
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	200033b0 	.word	0x200033b0
 800d820:	200033c4 	.word	0x200033c4
 800d824:	08012894 	.word	0x08012894
 800d828:	080128cc 	.word	0x080128cc
 800d82c:	08012904 	.word	0x08012904
 800d830:	0801292c 	.word	0x0801292c

0800d834 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	461a      	mov	r2, r3
 800d844:	2103      	movs	r1, #3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f814 	bl	800d874 <icmp_send_response>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d860:	78fb      	ldrb	r3, [r7, #3]
 800d862:	461a      	mov	r2, r3
 800d864:	210b      	movs	r1, #11
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f804 	bl	800d874 <icmp_send_response>
}
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08c      	sub	sp, #48	; 0x30
 800d878:	af04      	add	r7, sp, #16
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	460b      	mov	r3, r1
 800d87e:	70fb      	strb	r3, [r7, #3]
 800d880:	4613      	mov	r3, r2
 800d882:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d884:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d888:	2124      	movs	r1, #36	; 0x24
 800d88a:	2022      	movs	r0, #34	; 0x22
 800d88c:	f7f7 febc 	bl	8005608 <pbuf_alloc>
 800d890:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d04c      	beq.n	800d932 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	895b      	ldrh	r3, [r3, #10]
 800d89c:	2b23      	cmp	r3, #35	; 0x23
 800d89e:	d806      	bhi.n	800d8ae <icmp_send_response+0x3a>
 800d8a0:	4b26      	ldr	r3, [pc, #152]	; (800d93c <icmp_send_response+0xc8>)
 800d8a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d8a6:	4926      	ldr	r1, [pc, #152]	; (800d940 <icmp_send_response+0xcc>)
 800d8a8:	4826      	ldr	r0, [pc, #152]	; (800d944 <icmp_send_response+0xd0>)
 800d8aa:	f001 fb27 	bl	800eefc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	78fa      	ldrb	r2, [r7, #3]
 800d8be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	78ba      	ldrb	r2, [r7, #2]
 800d8c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	711a      	strb	r2, [r3, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	719a      	strb	r2, [r3, #6]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	f103 0008 	add.w	r0, r3, #8
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	221c      	movs	r2, #28
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f001 fad7 	bl	800ee9c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d8f4:	f107 030c 	add.w	r3, r7, #12
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f825 	bl	800d948 <ip4_route>
 800d8fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d011      	beq.n	800d92a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2200      	movs	r2, #0
 800d90a:	709a      	strb	r2, [r3, #2]
 800d90c:	2200      	movs	r2, #0
 800d90e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d910:	f107 020c 	add.w	r2, r7, #12
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	9302      	str	r3, [sp, #8]
 800d918:	2301      	movs	r3, #1
 800d91a:	9301      	str	r3, [sp, #4]
 800d91c:	2300      	movs	r3, #0
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	23ff      	movs	r3, #255	; 0xff
 800d922:	2100      	movs	r1, #0
 800d924:	69f8      	ldr	r0, [r7, #28]
 800d926:	f000 f9cd 	bl	800dcc4 <ip4_output_if>
  }
  pbuf_free(q);
 800d92a:	69f8      	ldr	r0, [r7, #28]
 800d92c:	f7f8 f950 	bl	8005bd0 <pbuf_free>
 800d930:	e000      	b.n	800d934 <icmp_send_response+0xc0>
    return;
 800d932:	bf00      	nop
}
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	08012894 	.word	0x08012894
 800d940:	08012960 	.word	0x08012960
 800d944:	08012904 	.word	0x08012904

0800d948 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d950:	4b33      	ldr	r3, [pc, #204]	; (800da20 <ip4_route+0xd8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	e036      	b.n	800d9c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	b2db      	uxtb	r3, r3
 800d964:	2b00      	cmp	r3, #0
 800d966:	d02b      	beq.n	800d9c0 <ip4_route+0x78>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d96e:	089b      	lsrs	r3, r3, #2
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d022      	beq.n	800d9c0 <ip4_route+0x78>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	3304      	adds	r3, #4
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01d      	beq.n	800d9c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	3304      	adds	r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	405a      	eors	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	3308      	adds	r3, #8
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4013      	ands	r3, r2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	e038      	b.n	800da12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d108      	bne.n	800d9c0 <ip4_route+0x78>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d101      	bne.n	800d9c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	e028      	b.n	800da12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1c5      	bne.n	800d958 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d9cc:	4b15      	ldr	r3, [pc, #84]	; (800da24 <ip4_route+0xdc>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01a      	beq.n	800da0a <ip4_route+0xc2>
 800d9d4:	4b13      	ldr	r3, [pc, #76]	; (800da24 <ip4_route+0xdc>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9dc:	f003 0301 	and.w	r3, r3, #1
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d012      	beq.n	800da0a <ip4_route+0xc2>
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <ip4_route+0xdc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00a      	beq.n	800da0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d9f4:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <ip4_route+0xdc>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d004      	beq.n	800da0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b7f      	cmp	r3, #127	; 0x7f
 800da08:	d101      	bne.n	800da0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e001      	b.n	800da12 <ip4_route+0xca>
  }

  return netif_default;
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <ip4_route+0xdc>)
 800da10:	681b      	ldr	r3, [r3, #0]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	20008aa4 	.word	0x20008aa4
 800da24:	20008aa8 	.word	0x20008aa8

0800da28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d016      	beq.n	800da6e <ip4_input_accept+0x46>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3304      	adds	r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d011      	beq.n	800da6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da4a:	4b0b      	ldr	r3, [pc, #44]	; (800da78 <ip4_input_accept+0x50>)
 800da4c:	695a      	ldr	r2, [r3, #20]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3304      	adds	r3, #4
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	429a      	cmp	r2, r3
 800da56:	d008      	beq.n	800da6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800da58:	4b07      	ldr	r3, [pc, #28]	; (800da78 <ip4_input_accept+0x50>)
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	6879      	ldr	r1, [r7, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 fa08 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800da64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	200033b0 	.word	0x200033b0

0800da7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	091b      	lsrs	r3, r3, #4
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b04      	cmp	r3, #4
 800da96:	d004      	beq.n	800daa2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7f8 f899 	bl	8005bd0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e107      	b.n	800dcb2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	f003 030f 	and.w	r3, r3, #15
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	885b      	ldrh	r3, [r3, #2]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f6 fdd5 	bl	8004668 <lwip_htons>
 800dabe:	4603      	mov	r3, r0
 800dac0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	891b      	ldrh	r3, [r3, #8]
 800dac6:	89ba      	ldrh	r2, [r7, #12]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d204      	bcs.n	800dad6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dacc:	89bb      	ldrh	r3, [r7, #12]
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7f7 fef7 	bl	80058c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	895b      	ldrh	r3, [r3, #10]
 800dada:	89fa      	ldrh	r2, [r7, #14]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d807      	bhi.n	800daf0 <ip4_input+0x74>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	891b      	ldrh	r3, [r3, #8]
 800dae4:	89ba      	ldrh	r2, [r7, #12]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d802      	bhi.n	800daf0 <ip4_input+0x74>
 800daea:	89fb      	ldrh	r3, [r7, #14]
 800daec:	2b13      	cmp	r3, #19
 800daee:	d804      	bhi.n	800dafa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7f8 f86d 	bl	8005bd0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e0db      	b.n	800dcb2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	4a6f      	ldr	r2, [pc, #444]	; (800dcbc <ip4_input+0x240>)
 800db00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	4a6d      	ldr	r2, [pc, #436]	; (800dcbc <ip4_input+0x240>)
 800db08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db0a:	4b6c      	ldr	r3, [pc, #432]	; (800dcbc <ip4_input+0x240>)
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db12:	2be0      	cmp	r3, #224	; 0xe0
 800db14:	d112      	bne.n	800db3c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d007      	beq.n	800db36 <ip4_input+0xba>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	3304      	adds	r3, #4
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <ip4_input+0xba>
      netif = inp;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	e02a      	b.n	800db8c <ip4_input+0x110>
    } else {
      netif = NULL;
 800db36:	2300      	movs	r3, #0
 800db38:	613b      	str	r3, [r7, #16]
 800db3a:	e027      	b.n	800db8c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800db3c:	6838      	ldr	r0, [r7, #0]
 800db3e:	f7ff ff73 	bl	800da28 <ip4_input_accept>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <ip4_input+0xd2>
      netif = inp;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	e01e      	b.n	800db8c <ip4_input+0x110>
    } else {
      netif = NULL;
 800db4e:	2300      	movs	r3, #0
 800db50:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800db52:	4b5a      	ldr	r3, [pc, #360]	; (800dcbc <ip4_input+0x240>)
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b7f      	cmp	r3, #127	; 0x7f
 800db5a:	d017      	beq.n	800db8c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800db5c:	4b58      	ldr	r3, [pc, #352]	; (800dcc0 <ip4_input+0x244>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	e00e      	b.n	800db82 <ip4_input+0x106>
          if (netif == inp) {
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d006      	beq.n	800db7a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800db6c:	6938      	ldr	r0, [r7, #16]
 800db6e:	f7ff ff5b 	bl	800da28 <ip4_input_accept>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <ip4_input+0x10e>
 800db78:	e000      	b.n	800db7c <ip4_input+0x100>
            continue;
 800db7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1ed      	bne.n	800db64 <ip4_input+0xe8>
 800db88:	e000      	b.n	800db8c <ip4_input+0x110>
            break;
 800db8a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db8c:	4b4b      	ldr	r3, [pc, #300]	; (800dcbc <ip4_input+0x240>)
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	4618      	mov	r0, r3
 800db94:	f000 f96e 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d105      	bne.n	800dbaa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800db9e:	4b47      	ldr	r3, [pc, #284]	; (800dcbc <ip4_input+0x240>)
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dba6:	2be0      	cmp	r3, #224	; 0xe0
 800dba8:	d104      	bne.n	800dbb4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7f8 f810 	bl	8005bd0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	e07e      	b.n	800dcb2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d104      	bne.n	800dbc4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7f8 f808 	bl	8005bd0 <pbuf_free>
    return ERR_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e076      	b.n	800dcb2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	88db      	ldrh	r3, [r3, #6]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00b      	beq.n	800dbee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fd24 	bl	800e624 <ip4_reass>
 800dbdc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d101      	bne.n	800dbe8 <ip4_input+0x16c>
      return ERR_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e064      	b.n	800dcb2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dbee:	4a33      	ldr	r2, [pc, #204]	; (800dcbc <ip4_input+0x240>)
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dbf4:	4a31      	ldr	r2, [pc, #196]	; (800dcbc <ip4_input+0x240>)
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dbfa:	4a30      	ldr	r2, [pc, #192]	; (800dcbc <ip4_input+0x240>)
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f003 030f 	and.w	r3, r3, #15
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <ip4_input+0x240>)
 800dc12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dc14:	89fb      	ldrh	r3, [r7, #14]
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7f7 ff53 	bl	8005ac4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	7a5b      	ldrb	r3, [r3, #9]
 800dc22:	2b11      	cmp	r3, #17
 800dc24:	d006      	beq.n	800dc34 <ip4_input+0x1b8>
 800dc26:	2b11      	cmp	r3, #17
 800dc28:	dc13      	bgt.n	800dc52 <ip4_input+0x1d6>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d00c      	beq.n	800dc48 <ip4_input+0x1cc>
 800dc2e:	2b06      	cmp	r3, #6
 800dc30:	d005      	beq.n	800dc3e <ip4_input+0x1c2>
 800dc32:	e00e      	b.n	800dc52 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7fe fc68 	bl	800c50c <udp_input>
        break;
 800dc3c:	e026      	b.n	800dc8c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7fa f88d 	bl	8007d60 <tcp_input>
        break;
 800dc46:	e021      	b.n	800dc8c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fcee 	bl	800d62c <icmp_input>
        break;
 800dc50:	e01c      	b.n	800dc8c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc52:	4b1a      	ldr	r3, [pc, #104]	; (800dcbc <ip4_input+0x240>)
 800dc54:	695b      	ldr	r3, [r3, #20]
 800dc56:	6939      	ldr	r1, [r7, #16]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 f90b 	bl	800de74 <ip4_addr_isbroadcast_u32>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10f      	bne.n	800dc84 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc64:	4b15      	ldr	r3, [pc, #84]	; (800dcbc <ip4_input+0x240>)
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc6c:	2be0      	cmp	r3, #224	; 0xe0
 800dc6e:	d009      	beq.n	800dc84 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dc70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7f7 ff97 	bl	8005baa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dc7c:	2102      	movs	r1, #2
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff fdd8 	bl	800d834 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7f7 ffa3 	bl	8005bd0 <pbuf_free>
        break;
 800dc8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <ip4_input+0x240>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dc92:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <ip4_input+0x240>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dc98:	4b08      	ldr	r3, [pc, #32]	; (800dcbc <ip4_input+0x240>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dc9e:	4b07      	ldr	r3, [pc, #28]	; (800dcbc <ip4_input+0x240>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <ip4_input+0x240>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dcaa:	4b04      	ldr	r3, [pc, #16]	; (800dcbc <ip4_input+0x240>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	200033b0 	.word	0x200033b0
 800dcc0:	20008aa4 	.word	0x20008aa4

0800dcc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	; 0x28
 800dcc8:	af04      	add	r7, sp, #16
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d009      	beq.n	800dcf0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <ip4_output_if+0x26>
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d102      	bne.n	800dcf0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	3304      	adds	r3, #4
 800dcee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dcf0:	78fa      	ldrb	r2, [r7, #3]
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcfa:	9301      	str	r3, [sp, #4]
 800dcfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	4613      	mov	r3, r2
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	6979      	ldr	r1, [r7, #20]
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f000 f805 	bl	800dd18 <ip4_output_if_src>
 800dd0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
 800dd24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	7b9b      	ldrb	r3, [r3, #14]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d006      	beq.n	800dd3c <ip4_output_if_src+0x24>
 800dd2e:	4b4b      	ldr	r3, [pc, #300]	; (800de5c <ip4_output_if_src+0x144>)
 800dd30:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dd34:	494a      	ldr	r1, [pc, #296]	; (800de60 <ip4_output_if_src+0x148>)
 800dd36:	484b      	ldr	r0, [pc, #300]	; (800de64 <ip4_output_if_src+0x14c>)
 800dd38:	f001 f8e0 	bl	800eefc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d060      	beq.n	800de04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dd42:	2314      	movs	r3, #20
 800dd44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dd46:	2114      	movs	r1, #20
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7f7 feab 	bl	8005aa4 <pbuf_add_header>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd54:	f06f 0301 	mvn.w	r3, #1
 800dd58:	e07c      	b.n	800de54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	895b      	ldrh	r3, [r3, #10]
 800dd64:	2b13      	cmp	r3, #19
 800dd66:	d806      	bhi.n	800dd76 <ip4_output_if_src+0x5e>
 800dd68:	4b3c      	ldr	r3, [pc, #240]	; (800de5c <ip4_output_if_src+0x144>)
 800dd6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dd6e:	493e      	ldr	r1, [pc, #248]	; (800de68 <ip4_output_if_src+0x150>)
 800dd70:	483c      	ldr	r0, [pc, #240]	; (800de64 <ip4_output_if_src+0x14c>)
 800dd72:	f001 f8c3 	bl	800eefc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	78fa      	ldrb	r2, [r7, #3]
 800dd7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dd8c:	8b7b      	ldrh	r3, [r7, #26]
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dda4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	891b      	ldrh	r3, [r3, #8]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7f6 fc5c 	bl	8004668 <lwip_htons>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	719a      	strb	r2, [r3, #6]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ddc2:	4b2a      	ldr	r3, [pc, #168]	; (800de6c <ip4_output_if_src+0x154>)
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f6 fc4e 	bl	8004668 <lwip_htons>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	461a      	mov	r2, r3
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ddd4:	4b25      	ldr	r3, [pc, #148]	; (800de6c <ip4_output_if_src+0x154>)
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	4b23      	ldr	r3, [pc, #140]	; (800de6c <ip4_output_if_src+0x154>)
 800ddde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d104      	bne.n	800ddf0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dde6:	4b22      	ldr	r3, [pc, #136]	; (800de70 <ip4_output_if_src+0x158>)
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	60da      	str	r2, [r3, #12]
 800ddee:	e003      	b.n	800ddf8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	729a      	strb	r2, [r3, #10]
 800ddfe:	2200      	movs	r2, #0
 800de00:	72da      	strb	r2, [r3, #11]
 800de02:	e00f      	b.n	800de24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	2b13      	cmp	r3, #19
 800de0a:	d802      	bhi.n	800de12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800de0c:	f06f 0301 	mvn.w	r3, #1
 800de10:	e020      	b.n	800de54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800de1e:	f107 0314 	add.w	r3, r7, #20
 800de22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00c      	beq.n	800de46 <ip4_output_if_src+0x12e>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	891a      	ldrh	r2, [r3, #8]
 800de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de34:	429a      	cmp	r2, r3
 800de36:	d906      	bls.n	800de46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 fddf 	bl	800ea00 <ip4_frag>
 800de42:	4603      	mov	r3, r0
 800de44:	e006      	b.n	800de54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	68f9      	ldr	r1, [r7, #12]
 800de4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de50:	4798      	blx	r3
 800de52:	4603      	mov	r3, r0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3720      	adds	r7, #32
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0801298c 	.word	0x0801298c
 800de60:	080129c0 	.word	0x080129c0
 800de64:	080129cc 	.word	0x080129cc
 800de68:	080129f4 	.word	0x080129f4
 800de6c:	2000020a 	.word	0x2000020a
 800de70:	08012dc0 	.word	0x08012dc0

0800de74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de88:	d002      	beq.n	800de90 <ip4_addr_isbroadcast_u32+0x1c>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800de90:	2301      	movs	r3, #1
 800de92:	e02a      	b.n	800deea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de9a:	f003 0302 	and.w	r3, r3, #2
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	e021      	b.n	800deea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	3304      	adds	r3, #4
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d101      	bne.n	800deb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	e019      	b.n	800deea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	3304      	adds	r3, #4
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	405a      	eors	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	3308      	adds	r3, #8
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4013      	ands	r3, r2
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10d      	bne.n	800dee8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	3308      	adds	r3, #8
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	43da      	mvns	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	3308      	adds	r3, #8
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d101      	bne.n	800dee8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dee4:	2301      	movs	r3, #1
 800dee6:	e000      	b.n	800deea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dee8:	2300      	movs	r3, #0
  }
}
 800deea:	4618      	mov	r0, r3
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800df00:	2210      	movs	r2, #16
 800df02:	4904      	ldr	r1, [pc, #16]	; (800df14 <ip4addr_ntoa+0x1c>)
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f807 	bl	800df18 <ip4addr_ntoa_r>
 800df0a:	4603      	mov	r3, r0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	2000020c 	.word	0x2000020c

0800df18 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800df18:	b480      	push	{r7}
 800df1a:	b08d      	sub	sp, #52	; 0x34
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800df32:	f107 0318 	add.w	r3, r7, #24
 800df36:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800df38:	2300      	movs	r3, #0
 800df3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df3e:	e059      	b.n	800dff4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800df40:	2300      	movs	r3, #0
 800df42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	781a      	ldrb	r2, [r3, #0]
 800df4a:	4b33      	ldr	r3, [pc, #204]	; (800e018 <ip4addr_ntoa_r+0x100>)
 800df4c:	fba3 1302 	umull	r1, r3, r3, r2
 800df50:	08d9      	lsrs	r1, r3, #3
 800df52:	460b      	mov	r3, r1
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	440b      	add	r3, r1
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	4a2d      	ldr	r2, [pc, #180]	; (800e018 <ip4addr_ntoa_r+0x100>)
 800df64:	fba2 2303 	umull	r2, r3, r2, r3
 800df68:	08db      	lsrs	r3, r3, #3
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800df70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800df7a:	4619      	mov	r1, r3
 800df7c:	7ffb      	ldrb	r3, [r7, #31]
 800df7e:	3330      	adds	r3, #48	; 0x30
 800df80:	b2da      	uxtb	r2, r3
 800df82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df86:	440b      	add	r3, r1
 800df88:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1d8      	bne.n	800df46 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800df94:	e012      	b.n	800dfbc <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800df96:	6a3b      	ldr	r3, [r7, #32]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	623a      	str	r2, [r7, #32]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	dc01      	bgt.n	800dfa6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e031      	b.n	800e00a <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800dfa6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfac:	1c59      	adds	r1, r3, #1
 800dfae:	62f9      	str	r1, [r7, #44]	; 0x2c
 800dfb0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800dfb4:	440a      	add	r2, r1
 800dfb6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800dfba:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800dfbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfc0:	1e5a      	subs	r2, r3, #1
 800dfc2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1e5      	bne.n	800df96 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	1c5a      	adds	r2, r3, #1
 800dfce:	623a      	str	r2, [r7, #32]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	dc01      	bgt.n	800dfda <ip4addr_ntoa_r+0xc2>
      return NULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e017      	b.n	800e00a <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfe0:	222e      	movs	r2, #46	; 0x2e
 800dfe2:	701a      	strb	r2, [r3, #0]
    ap++;
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800dfea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfee:	3301      	adds	r3, #1
 800dff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d9a1      	bls.n	800df40 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	3b01      	subs	r3, #1
 800e000:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	2200      	movs	r2, #0
 800e006:	701a      	strb	r2, [r3, #0]
  return buf;
 800e008:	68bb      	ldr	r3, [r7, #8]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3734      	adds	r7, #52	; 0x34
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	cccccccd 	.word	0xcccccccd

0800e01c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e022:	2300      	movs	r3, #0
 800e024:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e026:	4b12      	ldr	r3, [pc, #72]	; (800e070 <ip_reass_tmr+0x54>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e02c:	e018      	b.n	800e060 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	7fdb      	ldrb	r3, [r3, #31]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00b      	beq.n	800e04e <ip_reass_tmr+0x32>
      r->timer--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	7fdb      	ldrb	r3, [r3, #31]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	e008      	b.n	800e060 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f80a 	bl	800e074 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1e3      	bne.n	800e02e <ip_reass_tmr+0x12>
    }
  }
}
 800e066:	bf00      	nop
 800e068:	bf00      	nop
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	2000021c 	.word	0x2000021c

0800e074 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d105      	bne.n	800e096 <ip_reass_free_complete_datagram+0x22>
 800e08a:	4b45      	ldr	r3, [pc, #276]	; (800e1a0 <ip_reass_free_complete_datagram+0x12c>)
 800e08c:	22ab      	movs	r2, #171	; 0xab
 800e08e:	4945      	ldr	r1, [pc, #276]	; (800e1a4 <ip_reass_free_complete_datagram+0x130>)
 800e090:	4845      	ldr	r0, [pc, #276]	; (800e1a8 <ip_reass_free_complete_datagram+0x134>)
 800e092:	f000 ff33 	bl	800eefc <iprintf>
  if (prev != NULL) {
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00a      	beq.n	800e0b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d005      	beq.n	800e0b2 <ip_reass_free_complete_datagram+0x3e>
 800e0a6:	4b3e      	ldr	r3, [pc, #248]	; (800e1a0 <ip_reass_free_complete_datagram+0x12c>)
 800e0a8:	22ad      	movs	r2, #173	; 0xad
 800e0aa:	4940      	ldr	r1, [pc, #256]	; (800e1ac <ip_reass_free_complete_datagram+0x138>)
 800e0ac:	483e      	ldr	r0, [pc, #248]	; (800e1a8 <ip_reass_free_complete_datagram+0x134>)
 800e0ae:	f000 ff25 	bl	800eefc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	889b      	ldrh	r3, [r3, #4]
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d12a      	bne.n	800e11a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	6858      	ldr	r0, [r3, #4]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	2214      	movs	r2, #20
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f000 fedd 	bl	800ee9c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e0e2:	2101      	movs	r1, #1
 800e0e4:	69b8      	ldr	r0, [r7, #24]
 800e0e6:	f7ff fbb5 	bl	800d854 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e0ea:	69b8      	ldr	r0, [r7, #24]
 800e0ec:	f7f7 fdf8 	bl	8005ce0 <pbuf_clen>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e0f4:	8bfa      	ldrh	r2, [r7, #30]
 800e0f6:	8a7b      	ldrh	r3, [r7, #18]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0fe:	db05      	blt.n	800e10c <ip_reass_free_complete_datagram+0x98>
 800e100:	4b27      	ldr	r3, [pc, #156]	; (800e1a0 <ip_reass_free_complete_datagram+0x12c>)
 800e102:	22bc      	movs	r2, #188	; 0xbc
 800e104:	492a      	ldr	r1, [pc, #168]	; (800e1b0 <ip_reass_free_complete_datagram+0x13c>)
 800e106:	4828      	ldr	r0, [pc, #160]	; (800e1a8 <ip_reass_free_complete_datagram+0x134>)
 800e108:	f000 fef8 	bl	800eefc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e10c:	8bfa      	ldrh	r2, [r7, #30]
 800e10e:	8a7b      	ldrh	r3, [r7, #18]
 800e110:	4413      	add	r3, r2
 800e112:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e114:	69b8      	ldr	r0, [r7, #24]
 800e116:	f7f7 fd5b 	bl	8005bd0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e120:	e01f      	b.n	800e162 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7f7 fdd4 	bl	8005ce0 <pbuf_clen>
 800e138:	4603      	mov	r3, r0
 800e13a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e13c:	8bfa      	ldrh	r2, [r7, #30]
 800e13e:	8a7b      	ldrh	r3, [r7, #18]
 800e140:	4413      	add	r3, r2
 800e142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e146:	db05      	blt.n	800e154 <ip_reass_free_complete_datagram+0xe0>
 800e148:	4b15      	ldr	r3, [pc, #84]	; (800e1a0 <ip_reass_free_complete_datagram+0x12c>)
 800e14a:	22cc      	movs	r2, #204	; 0xcc
 800e14c:	4918      	ldr	r1, [pc, #96]	; (800e1b0 <ip_reass_free_complete_datagram+0x13c>)
 800e14e:	4816      	ldr	r0, [pc, #88]	; (800e1a8 <ip_reass_free_complete_datagram+0x134>)
 800e150:	f000 fed4 	bl	800eefc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e154:	8bfa      	ldrh	r2, [r7, #30]
 800e156:	8a7b      	ldrh	r3, [r7, #18]
 800e158:	4413      	add	r3, r2
 800e15a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7f7 fd37 	bl	8005bd0 <pbuf_free>
  while (p != NULL) {
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1dc      	bne.n	800e122 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f8c2 	bl	800e2f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e170:	4b10      	ldr	r3, [pc, #64]	; (800e1b4 <ip_reass_free_complete_datagram+0x140>)
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	8bfa      	ldrh	r2, [r7, #30]
 800e176:	429a      	cmp	r2, r3
 800e178:	d905      	bls.n	800e186 <ip_reass_free_complete_datagram+0x112>
 800e17a:	4b09      	ldr	r3, [pc, #36]	; (800e1a0 <ip_reass_free_complete_datagram+0x12c>)
 800e17c:	22d2      	movs	r2, #210	; 0xd2
 800e17e:	490e      	ldr	r1, [pc, #56]	; (800e1b8 <ip_reass_free_complete_datagram+0x144>)
 800e180:	4809      	ldr	r0, [pc, #36]	; (800e1a8 <ip_reass_free_complete_datagram+0x134>)
 800e182:	f000 febb 	bl	800eefc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e186:	4b0b      	ldr	r3, [pc, #44]	; (800e1b4 <ip_reass_free_complete_datagram+0x140>)
 800e188:	881a      	ldrh	r2, [r3, #0]
 800e18a:	8bfb      	ldrh	r3, [r7, #30]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	b29a      	uxth	r2, r3
 800e190:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <ip_reass_free_complete_datagram+0x140>)
 800e192:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e194:	8bfb      	ldrh	r3, [r7, #30]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	08012a24 	.word	0x08012a24
 800e1a4:	08012a60 	.word	0x08012a60
 800e1a8:	08012a6c 	.word	0x08012a6c
 800e1ac:	08012a94 	.word	0x08012a94
 800e1b0:	08012aa8 	.word	0x08012aa8
 800e1b4:	20000220 	.word	0x20000220
 800e1b8:	08012ac8 	.word	0x08012ac8

0800e1bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e1da:	4b28      	ldr	r3, [pc, #160]	; (800e27c <ip_reass_remove_oldest_datagram+0xc0>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e1e0:	e030      	b.n	800e244 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	695a      	ldr	r2, [r3, #20]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d10c      	bne.n	800e208 <ip_reass_remove_oldest_datagram+0x4c>
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	699a      	ldr	r2, [r3, #24]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d106      	bne.n	800e208 <ip_reass_remove_oldest_datagram+0x4c>
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	899a      	ldrh	r2, [r3, #12]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	889b      	ldrh	r3, [r3, #4]
 800e202:	b29b      	uxth	r3, r3
 800e204:	429a      	cmp	r2, r3
 800e206:	d014      	beq.n	800e232 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d104      	bne.n	800e21e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	61bb      	str	r3, [r7, #24]
 800e21c:	e009      	b.n	800e232 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	7fda      	ldrb	r2, [r3, #31]
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	7fdb      	ldrb	r3, [r3, #31]
 800e226:	429a      	cmp	r2, r3
 800e228:	d803      	bhi.n	800e232 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1cb      	bne.n	800e1e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d008      	beq.n	800e262 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e250:	69b9      	ldr	r1, [r7, #24]
 800e252:	6a38      	ldr	r0, [r7, #32]
 800e254:	f7ff ff0e 	bl	800e074 <ip_reass_free_complete_datagram>
 800e258:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4413      	add	r3, r2
 800e260:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	429a      	cmp	r2, r3
 800e268:	da02      	bge.n	800e270 <ip_reass_remove_oldest_datagram+0xb4>
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	dcac      	bgt.n	800e1ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e270:	697b      	ldr	r3, [r7, #20]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3728      	adds	r7, #40	; 0x28
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	2000021c 	.word	0x2000021c

0800e280 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e28a:	2004      	movs	r0, #4
 800e28c:	f7f6 fe42 	bl	8004f14 <memp_malloc>
 800e290:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d110      	bne.n	800e2ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff ff8e 	bl	800e1bc <ip_reass_remove_oldest_datagram>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	dc03      	bgt.n	800e2b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2a8:	2004      	movs	r0, #4
 800e2aa:	f7f6 fe33 	bl	8004f14 <memp_malloc>
 800e2ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e016      	b.n	800e2e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e2ba:	2220      	movs	r2, #32
 800e2bc:	2100      	movs	r1, #0
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 fe14 	bl	800eeec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	220f      	movs	r2, #15
 800e2c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e2ca:	4b09      	ldr	r3, [pc, #36]	; (800e2f0 <ip_reass_enqueue_new_datagram+0x70>)
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e2d2:	4a07      	ldr	r2, [pc, #28]	; (800e2f0 <ip_reass_enqueue_new_datagram+0x70>)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	2214      	movs	r2, #20
 800e2de:	6879      	ldr	r1, [r7, #4]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 fddb 	bl	800ee9c <memcpy>
  return ipr;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	2000021c 	.word	0x2000021c

0800e2f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e2fe:	4b10      	ldr	r3, [pc, #64]	; (800e340 <ip_reass_dequeue_datagram+0x4c>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	429a      	cmp	r2, r3
 800e306:	d104      	bne.n	800e312 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a0c      	ldr	r2, [pc, #48]	; (800e340 <ip_reass_dequeue_datagram+0x4c>)
 800e30e:	6013      	str	r3, [r2, #0]
 800e310:	e00d      	b.n	800e32e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <ip_reass_dequeue_datagram+0x32>
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <ip_reass_dequeue_datagram+0x50>)
 800e31a:	f240 1245 	movw	r2, #325	; 0x145
 800e31e:	490a      	ldr	r1, [pc, #40]	; (800e348 <ip_reass_dequeue_datagram+0x54>)
 800e320:	480a      	ldr	r0, [pc, #40]	; (800e34c <ip_reass_dequeue_datagram+0x58>)
 800e322:	f000 fdeb 	bl	800eefc <iprintf>
    prev->next = ipr->next;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	2004      	movs	r0, #4
 800e332:	f7f6 fe3b 	bl	8004fac <memp_free>
}
 800e336:	bf00      	nop
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2000021c 	.word	0x2000021c
 800e344:	08012a24 	.word	0x08012a24
 800e348:	08012aec 	.word	0x08012aec
 800e34c:	08012a6c 	.word	0x08012a6c

0800e350 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08c      	sub	sp, #48	; 0x30
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e35c:	2300      	movs	r3, #0
 800e35e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e360:	2301      	movs	r3, #1
 800e362:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	885b      	ldrh	r3, [r3, #2]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	4618      	mov	r0, r3
 800e372:	f7f6 f979 	bl	8004668 <lwip_htons>
 800e376:	4603      	mov	r3, r0
 800e378:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	f003 030f 	and.w	r3, r3, #15
 800e382:	b2db      	uxtb	r3, r3
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e388:	7e7b      	ldrb	r3, [r7, #25]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	8b7a      	ldrh	r2, [r7, #26]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e392:	f04f 33ff 	mov.w	r3, #4294967295
 800e396:	e135      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e398:	7e7b      	ldrb	r3, [r7, #25]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	8b7a      	ldrh	r2, [r7, #26]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	88db      	ldrh	r3, [r3, #6]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f6 f95d 	bl	8004668 <lwip_htons>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	701a      	strb	r2, [r3, #0]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	705a      	strb	r2, [r3, #1]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	709a      	strb	r2, [r3, #2]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	8afa      	ldrh	r2, [r7, #22]
 800e3d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e3d8:	8afa      	ldrh	r2, [r7, #22]
 800e3da:	8b7b      	ldrh	r3, [r7, #26]
 800e3dc:	4413      	add	r3, r2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	88db      	ldrh	r3, [r3, #6]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	8afa      	ldrh	r2, [r7, #22]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d902      	bls.n	800e3f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f4:	e106      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3fc:	e068      	b.n	800e4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	889b      	ldrh	r3, [r3, #4]
 800e408:	b29a      	uxth	r2, r3
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	889b      	ldrh	r3, [r3, #4]
 800e40e:	b29b      	uxth	r3, r3
 800e410:	429a      	cmp	r2, r3
 800e412:	d235      	bcs.n	800e480 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e418:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d020      	beq.n	800e462 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	889b      	ldrh	r3, [r3, #4]
 800e424:	b29a      	uxth	r2, r3
 800e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e428:	88db      	ldrh	r3, [r3, #6]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d307      	bcc.n	800e440 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	88db      	ldrh	r3, [r3, #6]
 800e434:	b29a      	uxth	r2, r3
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	889b      	ldrh	r3, [r3, #4]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d902      	bls.n	800e446 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e440:	f04f 33ff 	mov.w	r3, #4294967295
 800e444:	e0de      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44e:	88db      	ldrh	r3, [r3, #6]
 800e450:	b29a      	uxth	r2, r3
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	889b      	ldrh	r3, [r3, #4]
 800e456:	b29b      	uxth	r3, r3
 800e458:	429a      	cmp	r2, r3
 800e45a:	d03d      	beq.n	800e4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e460:	e03a      	b.n	800e4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	88db      	ldrh	r3, [r3, #6]
 800e466:	b29a      	uxth	r2, r3
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	889b      	ldrh	r3, [r3, #4]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	429a      	cmp	r2, r3
 800e470:	d902      	bls.n	800e478 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e472:	f04f 33ff 	mov.w	r3, #4294967295
 800e476:	e0c5      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	605a      	str	r2, [r3, #4]
      break;
 800e47e:	e02b      	b.n	800e4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	889b      	ldrh	r3, [r3, #4]
 800e484:	b29a      	uxth	r2, r3
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d102      	bne.n	800e496 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e490:	f04f 33ff 	mov.w	r3, #4294967295
 800e494:	e0b6      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	889b      	ldrh	r3, [r3, #4]
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	88db      	ldrh	r3, [r3, #6]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d202      	bcs.n	800e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	e0ab      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d009      	beq.n	800e4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	88db      	ldrh	r3, [r3, #6]
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	889b      	ldrh	r3, [r3, #4]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d001      	beq.n	800e4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d193      	bne.n	800e3fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e4d6:	e000      	b.n	800e4da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e4d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d12d      	bne.n	800e53c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d01c      	beq.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e8:	88db      	ldrh	r3, [r3, #6]
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	889b      	ldrh	r3, [r3, #4]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d906      	bls.n	800e504 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e4f6:	4b45      	ldr	r3, [pc, #276]	; (800e60c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e4f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e4fc:	4944      	ldr	r1, [pc, #272]	; (800e610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e4fe:	4845      	ldr	r0, [pc, #276]	; (800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e500:	f000 fcfc 	bl	800eefc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50c:	88db      	ldrh	r3, [r3, #6]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e512:	889b      	ldrh	r3, [r3, #4]
 800e514:	b29b      	uxth	r3, r3
 800e516:	429a      	cmp	r2, r3
 800e518:	d010      	beq.n	800e53c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	623b      	str	r3, [r7, #32]
 800e51e:	e00d      	b.n	800e53c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d006      	beq.n	800e536 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e528:	4b38      	ldr	r3, [pc, #224]	; (800e60c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e52a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e52e:	493a      	ldr	r1, [pc, #232]	; (800e618 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e530:	4838      	ldr	r0, [pc, #224]	; (800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e532:	f000 fce3 	bl	800eefc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d105      	bne.n	800e54e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7f9b      	ldrb	r3, [r3, #30]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d059      	beq.n	800e602 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d04f      	beq.n	800e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	889b      	ldrh	r3, [r3, #4]
 800e564:	b29b      	uxth	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	623b      	str	r3, [r7, #32]
 800e56e:	e041      	b.n	800e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e57a:	e012      	b.n	800e5a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e584:	88db      	ldrh	r3, [r3, #6]
 800e586:	b29a      	uxth	r2, r3
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	889b      	ldrh	r3, [r3, #4]
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	429a      	cmp	r2, r3
 800e590:	d002      	beq.n	800e598 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e592:	2300      	movs	r3, #0
 800e594:	623b      	str	r3, [r7, #32]
            break;
 800e596:	e007      	b.n	800e5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1e9      	bne.n	800e57c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d022      	beq.n	800e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e5b6:	4b15      	ldr	r3, [pc, #84]	; (800e60c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5b8:	f240 12df 	movw	r2, #479	; 0x1df
 800e5bc:	4917      	ldr	r1, [pc, #92]	; (800e61c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e5be:	4815      	ldr	r0, [pc, #84]	; (800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5c0:	f000 fc9c 	bl	800eefc <iprintf>
          LWIP_ASSERT("sanity check",
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d106      	bne.n	800e5de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e5d0:	4b0e      	ldr	r3, [pc, #56]	; (800e60c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e5d6:	4911      	ldr	r1, [pc, #68]	; (800e61c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e5d8:	480e      	ldr	r0, [pc, #56]	; (800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5da:	f000 fc8f 	bl	800eefc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e5e6:	4b09      	ldr	r3, [pc, #36]	; (800e60c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e5ec:	490c      	ldr	r1, [pc, #48]	; (800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e5ee:	4809      	ldr	r0, [pc, #36]	; (800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5f0:	f000 fc84 	bl	800eefc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	bf14      	ite	ne
 800e5fa:	2301      	movne	r3, #1
 800e5fc:	2300      	moveq	r3, #0
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	e000      	b.n	800e604 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3730      	adds	r7, #48	; 0x30
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	08012a24 	.word	0x08012a24
 800e610:	08012b08 	.word	0x08012b08
 800e614:	08012a6c 	.word	0x08012a6c
 800e618:	08012b28 	.word	0x08012b28
 800e61c:	08012b60 	.word	0x08012b60
 800e620:	08012b70 	.word	0x08012b70

0800e624 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08e      	sub	sp, #56	; 0x38
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	f003 030f 	and.w	r3, r3, #15
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b14      	cmp	r3, #20
 800e642:	f040 8167 	bne.w	800e914 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e648:	88db      	ldrh	r3, [r3, #6]
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f6 f80b 	bl	8004668 <lwip_htons>
 800e652:	4603      	mov	r3, r0
 800e654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e658:	b29b      	uxth	r3, r3
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	885b      	ldrh	r3, [r3, #2]
 800e662:	b29b      	uxth	r3, r3
 800e664:	4618      	mov	r0, r3
 800e666:	f7f5 ffff 	bl	8004668 <lwip_htons>
 800e66a:	4603      	mov	r3, r0
 800e66c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	f003 030f 	and.w	r3, r3, #15
 800e676:	b2db      	uxtb	r3, r3
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e67e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e682:	b29b      	uxth	r3, r3
 800e684:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e686:	429a      	cmp	r2, r3
 800e688:	f0c0 8146 	bcc.w	800e918 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e68c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e690:	b29b      	uxth	r3, r3
 800e692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7f7 fb21 	bl	8005ce0 <pbuf_clen>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e6a2:	4b9f      	ldr	r3, [pc, #636]	; (800e920 <ip4_reass+0x2fc>)
 800e6a4:	881b      	ldrh	r3, [r3, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	8c3b      	ldrh	r3, [r7, #32]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	2b0a      	cmp	r3, #10
 800e6ae:	dd10      	ble.n	800e6d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e6b0:	8c3b      	ldrh	r3, [r7, #32]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6b6:	f7ff fd81 	bl	800e1bc <ip_reass_remove_oldest_datagram>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 812d 	beq.w	800e91c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e6c2:	4b97      	ldr	r3, [pc, #604]	; (800e920 <ip4_reass+0x2fc>)
 800e6c4:	881b      	ldrh	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	8c3b      	ldrh	r3, [r7, #32]
 800e6ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e6cc:	2b0a      	cmp	r3, #10
 800e6ce:	f300 8125 	bgt.w	800e91c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e6d2:	4b94      	ldr	r3, [pc, #592]	; (800e924 <ip4_reass+0x300>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e6d8:	e015      	b.n	800e706 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	695a      	ldr	r2, [r3, #20]
 800e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d10c      	bne.n	800e700 <ip4_reass+0xdc>
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	699a      	ldr	r2, [r3, #24]
 800e6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d106      	bne.n	800e700 <ip4_reass+0xdc>
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	899a      	ldrh	r2, [r3, #12]
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	889b      	ldrh	r3, [r3, #4]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d006      	beq.n	800e70e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	633b      	str	r3, [r7, #48]	; 0x30
 800e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1e6      	bne.n	800e6da <ip4_reass+0xb6>
 800e70c:	e000      	b.n	800e710 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e70e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	2b00      	cmp	r3, #0
 800e714:	d109      	bne.n	800e72a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e716:	8c3b      	ldrh	r3, [r7, #32]
 800e718:	4619      	mov	r1, r3
 800e71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e71c:	f7ff fdb0 	bl	800e280 <ip_reass_enqueue_new_datagram>
 800e720:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e724:	2b00      	cmp	r3, #0
 800e726:	d11c      	bne.n	800e762 <ip4_reass+0x13e>
      goto nullreturn;
 800e728:	e109      	b.n	800e93e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	88db      	ldrh	r3, [r3, #6]
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4618      	mov	r0, r3
 800e732:	f7f5 ff99 	bl	8004668 <lwip_htons>
 800e736:	4603      	mov	r3, r0
 800e738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d110      	bne.n	800e762 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	89db      	ldrh	r3, [r3, #14]
 800e744:	4618      	mov	r0, r3
 800e746:	f7f5 ff8f 	bl	8004668 <lwip_htons>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e750:	2b00      	cmp	r3, #0
 800e752:	d006      	beq.n	800e762 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e756:	3308      	adds	r3, #8
 800e758:	2214      	movs	r2, #20
 800e75a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e75c:	4618      	mov	r0, r3
 800e75e:	f000 fb9d 	bl	800ee9c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	88db      	ldrh	r3, [r3, #6]
 800e766:	b29b      	uxth	r3, r3
 800e768:	f003 0320 	and.w	r3, r3, #32
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bf0c      	ite	eq
 800e770:	2301      	moveq	r3, #1
 800e772:	2300      	movne	r3, #0
 800e774:	b2db      	uxtb	r3, r3
 800e776:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00e      	beq.n	800e79c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e77e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e782:	4413      	add	r3, r2
 800e784:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e786:	8b7a      	ldrh	r2, [r7, #26]
 800e788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e78a:	429a      	cmp	r2, r3
 800e78c:	f0c0 80a0 	bcc.w	800e8d0 <ip4_reass+0x2ac>
 800e790:	8b7b      	ldrh	r3, [r7, #26]
 800e792:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e796:	4293      	cmp	r3, r2
 800e798:	f200 809a 	bhi.w	800e8d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	6879      	ldr	r1, [r7, #4]
 800e7a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7a2:	f7ff fdd5 	bl	800e350 <ip_reass_chain_frag_into_datagram_and_validate>
 800e7a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	f000 8091 	beq.w	800e8d4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e7b2:	4b5b      	ldr	r3, [pc, #364]	; (800e920 <ip4_reass+0x2fc>)
 800e7b4:	881a      	ldrh	r2, [r3, #0]
 800e7b6:	8c3b      	ldrh	r3, [r7, #32]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	4b58      	ldr	r3, [pc, #352]	; (800e920 <ip4_reass+0x2fc>)
 800e7be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00d      	beq.n	800e7e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e7c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ca:	4413      	add	r3, r2
 800e7cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d0:	8a7a      	ldrh	r2, [r7, #18]
 800e7d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	7f9b      	ldrb	r3, [r3, #30]
 800e7d8:	f043 0301 	orr.w	r3, r3, #1
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d171      	bne.n	800e8cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ea:	8b9b      	ldrh	r3, [r3, #28]
 800e7ec:	3314      	adds	r3, #20
 800e7ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	3308      	adds	r3, #8
 800e806:	2214      	movs	r2, #20
 800e808:	4619      	mov	r1, r3
 800e80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e80c:	f000 fb46 	bl	800ee9c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e810:	8a3b      	ldrh	r3, [r7, #16]
 800e812:	4618      	mov	r0, r3
 800e814:	f7f5 ff28 	bl	8004668 <lwip_htons>
 800e818:	4603      	mov	r3, r0
 800e81a:	461a      	mov	r2, r3
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	2200      	movs	r2, #0
 800e824:	719a      	strb	r2, [r3, #6]
 800e826:	2200      	movs	r2, #0
 800e828:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	2200      	movs	r2, #0
 800e82e:	729a      	strb	r2, [r3, #10]
 800e830:	2200      	movs	r2, #0
 800e832:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e83a:	e00d      	b.n	800e858 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e842:	2114      	movs	r1, #20
 800e844:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e846:	f7f7 f93d 	bl	8005ac4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e84a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7f7 fa81 	bl	8005d54 <pbuf_cat>
      r = iprh->next_pbuf;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1ee      	bne.n	800e83c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e85e:	4b31      	ldr	r3, [pc, #196]	; (800e924 <ip4_reass+0x300>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e864:	429a      	cmp	r2, r3
 800e866:	d102      	bne.n	800e86e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e868:	2300      	movs	r3, #0
 800e86a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e86c:	e010      	b.n	800e890 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e86e:	4b2d      	ldr	r3, [pc, #180]	; (800e924 <ip4_reass+0x300>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e874:	e007      	b.n	800e886 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d006      	beq.n	800e88e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1f4      	bne.n	800e876 <ip4_reass+0x252>
 800e88c:	e000      	b.n	800e890 <ip4_reass+0x26c>
          break;
 800e88e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e894:	f7ff fd2e 	bl	800e2f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7f7 fa21 	bl	8005ce0 <pbuf_clen>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e8a2:	4b1f      	ldr	r3, [pc, #124]	; (800e920 <ip4_reass+0x2fc>)
 800e8a4:	881b      	ldrh	r3, [r3, #0]
 800e8a6:	8c3a      	ldrh	r2, [r7, #32]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d906      	bls.n	800e8ba <ip4_reass+0x296>
 800e8ac:	4b1e      	ldr	r3, [pc, #120]	; (800e928 <ip4_reass+0x304>)
 800e8ae:	f240 229b 	movw	r2, #667	; 0x29b
 800e8b2:	491e      	ldr	r1, [pc, #120]	; (800e92c <ip4_reass+0x308>)
 800e8b4:	481e      	ldr	r0, [pc, #120]	; (800e930 <ip4_reass+0x30c>)
 800e8b6:	f000 fb21 	bl	800eefc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e8ba:	4b19      	ldr	r3, [pc, #100]	; (800e920 <ip4_reass+0x2fc>)
 800e8bc:	881a      	ldrh	r2, [r3, #0]
 800e8be:	8c3b      	ldrh	r3, [r7, #32]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	4b16      	ldr	r3, [pc, #88]	; (800e920 <ip4_reass+0x2fc>)
 800e8c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	e03c      	b.n	800e946 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e03a      	b.n	800e946 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e8d0:	bf00      	nop
 800e8d2:	e000      	b.n	800e8d6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e8d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d106      	bne.n	800e8ea <ip4_reass+0x2c6>
 800e8dc:	4b12      	ldr	r3, [pc, #72]	; (800e928 <ip4_reass+0x304>)
 800e8de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e8e2:	4914      	ldr	r1, [pc, #80]	; (800e934 <ip4_reass+0x310>)
 800e8e4:	4812      	ldr	r0, [pc, #72]	; (800e930 <ip4_reass+0x30c>)
 800e8e6:	f000 fb09 	bl	800eefc <iprintf>
  if (ipr->p == NULL) {
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d124      	bne.n	800e93c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e8f2:	4b0c      	ldr	r3, [pc, #48]	; (800e924 <ip4_reass+0x300>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d006      	beq.n	800e90a <ip4_reass+0x2e6>
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <ip4_reass+0x304>)
 800e8fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e902:	490d      	ldr	r1, [pc, #52]	; (800e938 <ip4_reass+0x314>)
 800e904:	480a      	ldr	r0, [pc, #40]	; (800e930 <ip4_reass+0x30c>)
 800e906:	f000 faf9 	bl	800eefc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e90a:	2100      	movs	r1, #0
 800e90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e90e:	f7ff fcf1 	bl	800e2f4 <ip_reass_dequeue_datagram>
 800e912:	e014      	b.n	800e93e <ip4_reass+0x31a>
    goto nullreturn;
 800e914:	bf00      	nop
 800e916:	e012      	b.n	800e93e <ip4_reass+0x31a>
    goto nullreturn;
 800e918:	bf00      	nop
 800e91a:	e010      	b.n	800e93e <ip4_reass+0x31a>
      goto nullreturn;
 800e91c:	bf00      	nop
 800e91e:	e00e      	b.n	800e93e <ip4_reass+0x31a>
 800e920:	20000220 	.word	0x20000220
 800e924:	2000021c 	.word	0x2000021c
 800e928:	08012a24 	.word	0x08012a24
 800e92c:	08012b94 	.word	0x08012b94
 800e930:	08012a6c 	.word	0x08012a6c
 800e934:	08012bb0 	.word	0x08012bb0
 800e938:	08012bbc 	.word	0x08012bbc
  }

nullreturn:
 800e93c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7f7 f946 	bl	8005bd0 <pbuf_free>
  return NULL;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3738      	adds	r7, #56	; 0x38
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop

0800e950 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e954:	2005      	movs	r0, #5
 800e956:	f7f6 fadd 	bl	8004f14 <memp_malloc>
 800e95a:	4603      	mov	r3, r0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d106      	bne.n	800e97c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e96e:	4b07      	ldr	r3, [pc, #28]	; (800e98c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e970:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e974:	4906      	ldr	r1, [pc, #24]	; (800e990 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e976:	4807      	ldr	r0, [pc, #28]	; (800e994 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e978:	f000 fac0 	bl	800eefc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e97c:	6879      	ldr	r1, [r7, #4]
 800e97e:	2005      	movs	r0, #5
 800e980:	f7f6 fb14 	bl	8004fac <memp_free>
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	08012a24 	.word	0x08012a24
 800e990:	08012bdc 	.word	0x08012bdc
 800e994:	08012a6c 	.word	0x08012a6c

0800e998 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d106      	bne.n	800e9b8 <ipfrag_free_pbuf_custom+0x20>
 800e9aa:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <ipfrag_free_pbuf_custom+0x58>)
 800e9ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e9b0:	4910      	ldr	r1, [pc, #64]	; (800e9f4 <ipfrag_free_pbuf_custom+0x5c>)
 800e9b2:	4811      	ldr	r0, [pc, #68]	; (800e9f8 <ipfrag_free_pbuf_custom+0x60>)
 800e9b4:	f000 faa2 	bl	800eefc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d006      	beq.n	800e9ce <ipfrag_free_pbuf_custom+0x36>
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <ipfrag_free_pbuf_custom+0x58>)
 800e9c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e9c6:	490d      	ldr	r1, [pc, #52]	; (800e9fc <ipfrag_free_pbuf_custom+0x64>)
 800e9c8:	480b      	ldr	r0, [pc, #44]	; (800e9f8 <ipfrag_free_pbuf_custom+0x60>)
 800e9ca:	f000 fa97 	bl	800eefc <iprintf>
  if (pcr->original != NULL) {
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d004      	beq.n	800e9e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7f7 f8f8 	bl	8005bd0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7ff ffbd 	bl	800e960 <ip_frag_free_pbuf_custom_ref>
}
 800e9e6:	bf00      	nop
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08012a24 	.word	0x08012a24
 800e9f4:	08012be8 	.word	0x08012be8
 800e9f8:	08012a6c 	.word	0x08012a6c
 800e9fc:	08012bf4 	.word	0x08012bf4

0800ea00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b094      	sub	sp, #80	; 0x50
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea16:	3b14      	subs	r3, #20
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	da00      	bge.n	800ea1e <ip4_frag+0x1e>
 800ea1c:	3307      	adds	r3, #7
 800ea1e:	10db      	asrs	r3, r3, #3
 800ea20:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ea22:	2314      	movs	r3, #20
 800ea24:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ea2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ea30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b14      	cmp	r3, #20
 800ea40:	d002      	beq.n	800ea48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ea42:	f06f 0305 	mvn.w	r3, #5
 800ea46:	e110      	b.n	800ec6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	895b      	ldrh	r3, [r3, #10]
 800ea4c:	2b13      	cmp	r3, #19
 800ea4e:	d809      	bhi.n	800ea64 <ip4_frag+0x64>
 800ea50:	4b88      	ldr	r3, [pc, #544]	; (800ec74 <ip4_frag+0x274>)
 800ea52:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ea56:	4988      	ldr	r1, [pc, #544]	; (800ec78 <ip4_frag+0x278>)
 800ea58:	4888      	ldr	r0, [pc, #544]	; (800ec7c <ip4_frag+0x27c>)
 800ea5a:	f000 fa4f 	bl	800eefc <iprintf>
 800ea5e:	f06f 0305 	mvn.w	r3, #5
 800ea62:	e102      	b.n	800ec6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	88db      	ldrh	r3, [r3, #6]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7f5 fdfc 	bl	8004668 <lwip_htons>
 800ea70:	4603      	mov	r3, r0
 800ea72:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ea74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ea7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea84:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	891b      	ldrh	r3, [r3, #8]
 800ea8a:	3b14      	subs	r3, #20
 800ea8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ea90:	e0e1      	b.n	800ec56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ea92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	bf28      	it	cs
 800eaa0:	4613      	movcs	r3, r2
 800eaa2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eaa4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eaa8:	2114      	movs	r1, #20
 800eaaa:	200e      	movs	r0, #14
 800eaac:	f7f6 fdac 	bl	8005608 <pbuf_alloc>
 800eab0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 80d5 	beq.w	800ec64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	895b      	ldrh	r3, [r3, #10]
 800eabe:	2b13      	cmp	r3, #19
 800eac0:	d806      	bhi.n	800ead0 <ip4_frag+0xd0>
 800eac2:	4b6c      	ldr	r3, [pc, #432]	; (800ec74 <ip4_frag+0x274>)
 800eac4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800eac8:	496d      	ldr	r1, [pc, #436]	; (800ec80 <ip4_frag+0x280>)
 800eaca:	486c      	ldr	r0, [pc, #432]	; (800ec7c <ip4_frag+0x27c>)
 800eacc:	f000 fa16 	bl	800eefc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	2214      	movs	r2, #20
 800ead6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 f9df 	bl	800ee9c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eae6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eaea:	e064      	b.n	800ebb6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	895a      	ldrh	r2, [r3, #10]
 800eaf0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	895b      	ldrh	r3, [r3, #10]
 800eafa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d906      	bls.n	800eb0e <ip4_frag+0x10e>
 800eb00:	4b5c      	ldr	r3, [pc, #368]	; (800ec74 <ip4_frag+0x274>)
 800eb02:	f240 322d 	movw	r2, #813	; 0x32d
 800eb06:	495f      	ldr	r1, [pc, #380]	; (800ec84 <ip4_frag+0x284>)
 800eb08:	485c      	ldr	r0, [pc, #368]	; (800ec7c <ip4_frag+0x27c>)
 800eb0a:	f000 f9f7 	bl	800eefc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eb0e:	8bfa      	ldrh	r2, [r7, #30]
 800eb10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eb14:	4293      	cmp	r3, r2
 800eb16:	bf28      	it	cs
 800eb18:	4613      	movcs	r3, r2
 800eb1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800eb1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d105      	bne.n	800eb32 <ip4_frag+0x132>
        poff = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	60fb      	str	r3, [r7, #12]
        continue;
 800eb30:	e041      	b.n	800ebb6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800eb32:	f7ff ff0d 	bl	800e950 <ip_frag_alloc_pbuf_custom_ref>
 800eb36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d103      	bne.n	800eb46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800eb3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb40:	f7f7 f846 	bl	8005bd0 <pbuf_free>
        goto memerr;
 800eb44:	e08f      	b.n	800ec66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb4e:	4413      	add	r3, r2
 800eb50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800eb54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800eb58:	9201      	str	r2, [sp, #4]
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2241      	movs	r2, #65	; 0x41
 800eb60:	2000      	movs	r0, #0
 800eb62:	f7f6 fe7b 	bl	800585c <pbuf_alloced_custom>
 800eb66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d106      	bne.n	800eb7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eb6e:	69b8      	ldr	r0, [r7, #24]
 800eb70:	f7ff fef6 	bl	800e960 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eb74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb76:	f7f7 f82b 	bl	8005bd0 <pbuf_free>
        goto memerr;
 800eb7a:	e074      	b.n	800ec66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f7f7 f8c7 	bl	8005d10 <pbuf_ref>
      pcr->original = p;
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	4a3f      	ldr	r2, [pc, #252]	; (800ec88 <ip4_frag+0x288>)
 800eb8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800eb8e:	6979      	ldr	r1, [r7, #20]
 800eb90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb92:	f7f7 f8df 	bl	8005d54 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800eb96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800eb9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800eba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <ip4_frag+0x1b6>
        poff = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ebb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d196      	bne.n	800eaec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ebbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ebc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ebc4:	4413      	add	r3, r2
 800ebc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ebcc:	f1a3 0213 	sub.w	r2, r3, #19
 800ebd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	bfcc      	ite	gt
 800ebd8:	2301      	movgt	r3, #1
 800ebda:	2300      	movle	r3, #0
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ebe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ebe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebe8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ebea:	6a3b      	ldr	r3, [r7, #32]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <ip4_frag+0x1f6>
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d003      	beq.n	800ebfe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ebf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ebfc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ebfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f5 fd31 	bl	8004668 <lwip_htons>
 800ec06:	4603      	mov	r3, r0
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ec0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec10:	3314      	adds	r3, #20
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f5 fd27 	bl	8004668 <lwip_htons>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec24:	2200      	movs	r2, #0
 800ec26:	729a      	strb	r2, [r3, #10]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec34:	68b8      	ldr	r0, [r7, #8]
 800ec36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ec38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec3a:	f7f6 ffc9 	bl	8005bd0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ec3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ec42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ec4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ec4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec50:	4413      	add	r3, r2
 800ec52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ec56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f47f af19 	bne.w	800ea92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	e002      	b.n	800ec6a <ip4_frag+0x26a>
      goto memerr;
 800ec64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ec66:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3748      	adds	r7, #72	; 0x48
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	08012a24 	.word	0x08012a24
 800ec78:	08012c00 	.word	0x08012c00
 800ec7c:	08012a6c 	.word	0x08012a6c
 800ec80:	08012c1c 	.word	0x08012c1c
 800ec84:	08012c3c 	.word	0x08012c3c
 800ec88:	0800e999 	.word	0x0800e999

0800ec8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ec96:	230e      	movs	r3, #14
 800ec98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	895b      	ldrh	r3, [r3, #10]
 800ec9e:	2b0e      	cmp	r3, #14
 800eca0:	d96e      	bls.n	800ed80 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	7bdb      	ldrb	r3, [r3, #15]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	7b1a      	ldrb	r2, [r3, #12]
 800ecc2:	7b5b      	ldrb	r3, [r3, #13]
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d023      	beq.n	800ed1e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d10f      	bne.n	800ecfe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	785b      	ldrb	r3, [r3, #1]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d11b      	bne.n	800ed1e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ecea:	2b5e      	cmp	r3, #94	; 0x5e
 800ecec:	d117      	bne.n	800ed1e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	7b5b      	ldrb	r3, [r3, #13]
 800ecf2:	f043 0310 	orr.w	r3, r3, #16
 800ecf6:	b2da      	uxtb	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	735a      	strb	r2, [r3, #13]
 800ecfc:	e00f      	b.n	800ed1e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2206      	movs	r2, #6
 800ed02:	4928      	ldr	r1, [pc, #160]	; (800eda4 <ethernet_input+0x118>)
 800ed04:	4618      	mov	r0, r3
 800ed06:	f000 f8bb 	bl	800ee80 <memcmp>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d106      	bne.n	800ed1e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	7b5b      	ldrb	r3, [r3, #13]
 800ed14:	f043 0308 	orr.w	r3, r3, #8
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ed1e:	89fb      	ldrh	r3, [r7, #14]
 800ed20:	2b08      	cmp	r3, #8
 800ed22:	d003      	beq.n	800ed2c <ethernet_input+0xa0>
 800ed24:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ed28:	d014      	beq.n	800ed54 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ed2a:	e032      	b.n	800ed92 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed32:	f003 0308 	and.w	r3, r3, #8
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d024      	beq.n	800ed84 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed3a:	8afb      	ldrh	r3, [r7, #22]
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7f6 fec0 	bl	8005ac4 <pbuf_remove_header>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d11e      	bne.n	800ed88 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ed4a:	6839      	ldr	r1, [r7, #0]
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7fe fe95 	bl	800da7c <ip4_input>
      break;
 800ed52:	e013      	b.n	800ed7c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed5a:	f003 0308 	and.w	r3, r3, #8
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d014      	beq.n	800ed8c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed62:	8afb      	ldrh	r3, [r7, #22]
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7f6 feac 	bl	8005ac4 <pbuf_remove_header>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10e      	bne.n	800ed90 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7fe f835 	bl	800cde4 <etharp_input>
      break;
 800ed7a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e00c      	b.n	800ed9a <ethernet_input+0x10e>
    goto free_and_return;
 800ed80:	bf00      	nop
 800ed82:	e006      	b.n	800ed92 <ethernet_input+0x106>
        goto free_and_return;
 800ed84:	bf00      	nop
 800ed86:	e004      	b.n	800ed92 <ethernet_input+0x106>
        goto free_and_return;
 800ed88:	bf00      	nop
 800ed8a:	e002      	b.n	800ed92 <ethernet_input+0x106>
        goto free_and_return;
 800ed8c:	bf00      	nop
 800ed8e:	e000      	b.n	800ed92 <ethernet_input+0x106>
        goto free_and_return;
 800ed90:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7f6 ff1c 	bl	8005bd0 <pbuf_free>
  return ERR_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	08012dc4 	.word	0x08012dc4

0800eda8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800edb6:	8c3b      	ldrh	r3, [r7, #32]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7f5 fc55 	bl	8004668 <lwip_htons>
 800edbe:	4603      	mov	r3, r0
 800edc0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800edc2:	210e      	movs	r1, #14
 800edc4:	68b8      	ldr	r0, [r7, #8]
 800edc6:	f7f6 fe6d 	bl	8005aa4 <pbuf_add_header>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d125      	bne.n	800ee1c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	8afa      	ldrh	r2, [r7, #22]
 800edda:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2206      	movs	r2, #6
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f000 f85a 	bl	800ee9c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	3306      	adds	r3, #6
 800edec:	2206      	movs	r2, #6
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f000 f853 	bl	800ee9c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edfc:	2b06      	cmp	r3, #6
 800edfe:	d006      	beq.n	800ee0e <ethernet_output+0x66>
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <ethernet_output+0x84>)
 800ee02:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ee06:	490a      	ldr	r1, [pc, #40]	; (800ee30 <ethernet_output+0x88>)
 800ee08:	480a      	ldr	r0, [pc, #40]	; (800ee34 <ethernet_output+0x8c>)
 800ee0a:	f000 f877 	bl	800eefc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	68b9      	ldr	r1, [r7, #8]
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	4798      	blx	r3
 800ee18:	4603      	mov	r3, r0
 800ee1a:	e002      	b.n	800ee22 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ee1c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ee1e:	f06f 0301 	mvn.w	r3, #1
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	08012c4c 	.word	0x08012c4c
 800ee30:	08012c84 	.word	0x08012c84
 800ee34:	08012cb8 	.word	0x08012cb8

0800ee38 <__libc_init_array>:
 800ee38:	b570      	push	{r4, r5, r6, lr}
 800ee3a:	4d0d      	ldr	r5, [pc, #52]	; (800ee70 <__libc_init_array+0x38>)
 800ee3c:	4c0d      	ldr	r4, [pc, #52]	; (800ee74 <__libc_init_array+0x3c>)
 800ee3e:	1b64      	subs	r4, r4, r5
 800ee40:	10a4      	asrs	r4, r4, #2
 800ee42:	2600      	movs	r6, #0
 800ee44:	42a6      	cmp	r6, r4
 800ee46:	d109      	bne.n	800ee5c <__libc_init_array+0x24>
 800ee48:	4d0b      	ldr	r5, [pc, #44]	; (800ee78 <__libc_init_array+0x40>)
 800ee4a:	4c0c      	ldr	r4, [pc, #48]	; (800ee7c <__libc_init_array+0x44>)
 800ee4c:	f001 fa1a 	bl	8010284 <_init>
 800ee50:	1b64      	subs	r4, r4, r5
 800ee52:	10a4      	asrs	r4, r4, #2
 800ee54:	2600      	movs	r6, #0
 800ee56:	42a6      	cmp	r6, r4
 800ee58:	d105      	bne.n	800ee66 <__libc_init_array+0x2e>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee60:	4798      	blx	r3
 800ee62:	3601      	adds	r6, #1
 800ee64:	e7ee      	b.n	800ee44 <__libc_init_array+0xc>
 800ee66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee6a:	4798      	blx	r3
 800ee6c:	3601      	adds	r6, #1
 800ee6e:	e7f2      	b.n	800ee56 <__libc_init_array+0x1e>
 800ee70:	08012f28 	.word	0x08012f28
 800ee74:	08012f28 	.word	0x08012f28
 800ee78:	08012f28 	.word	0x08012f28
 800ee7c:	08012f2c 	.word	0x08012f2c

0800ee80 <memcmp>:
 800ee80:	b530      	push	{r4, r5, lr}
 800ee82:	3901      	subs	r1, #1
 800ee84:	2400      	movs	r4, #0
 800ee86:	42a2      	cmp	r2, r4
 800ee88:	d101      	bne.n	800ee8e <memcmp+0xe>
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	e005      	b.n	800ee9a <memcmp+0x1a>
 800ee8e:	5d03      	ldrb	r3, [r0, r4]
 800ee90:	3401      	adds	r4, #1
 800ee92:	5d0d      	ldrb	r5, [r1, r4]
 800ee94:	42ab      	cmp	r3, r5
 800ee96:	d0f6      	beq.n	800ee86 <memcmp+0x6>
 800ee98:	1b58      	subs	r0, r3, r5
 800ee9a:	bd30      	pop	{r4, r5, pc}

0800ee9c <memcpy>:
 800ee9c:	440a      	add	r2, r1
 800ee9e:	4291      	cmp	r1, r2
 800eea0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eea4:	d100      	bne.n	800eea8 <memcpy+0xc>
 800eea6:	4770      	bx	lr
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeb2:	4291      	cmp	r1, r2
 800eeb4:	d1f9      	bne.n	800eeaa <memcpy+0xe>
 800eeb6:	bd10      	pop	{r4, pc}

0800eeb8 <memmove>:
 800eeb8:	4288      	cmp	r0, r1
 800eeba:	b510      	push	{r4, lr}
 800eebc:	eb01 0402 	add.w	r4, r1, r2
 800eec0:	d902      	bls.n	800eec8 <memmove+0x10>
 800eec2:	4284      	cmp	r4, r0
 800eec4:	4623      	mov	r3, r4
 800eec6:	d807      	bhi.n	800eed8 <memmove+0x20>
 800eec8:	1e43      	subs	r3, r0, #1
 800eeca:	42a1      	cmp	r1, r4
 800eecc:	d008      	beq.n	800eee0 <memmove+0x28>
 800eece:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eed6:	e7f8      	b.n	800eeca <memmove+0x12>
 800eed8:	4402      	add	r2, r0
 800eeda:	4601      	mov	r1, r0
 800eedc:	428a      	cmp	r2, r1
 800eede:	d100      	bne.n	800eee2 <memmove+0x2a>
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeea:	e7f7      	b.n	800eedc <memmove+0x24>

0800eeec <memset>:
 800eeec:	4402      	add	r2, r0
 800eeee:	4603      	mov	r3, r0
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d100      	bne.n	800eef6 <memset+0xa>
 800eef4:	4770      	bx	lr
 800eef6:	f803 1b01 	strb.w	r1, [r3], #1
 800eefa:	e7f9      	b.n	800eef0 <memset+0x4>

0800eefc <iprintf>:
 800eefc:	b40f      	push	{r0, r1, r2, r3}
 800eefe:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <iprintf+0x2c>)
 800ef00:	b513      	push	{r0, r1, r4, lr}
 800ef02:	681c      	ldr	r4, [r3, #0]
 800ef04:	b124      	cbz	r4, 800ef10 <iprintf+0x14>
 800ef06:	69a3      	ldr	r3, [r4, #24]
 800ef08:	b913      	cbnz	r3, 800ef10 <iprintf+0x14>
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 f8e4 	bl	800f0d8 <__sinit>
 800ef10:	ab05      	add	r3, sp, #20
 800ef12:	9a04      	ldr	r2, [sp, #16]
 800ef14:	68a1      	ldr	r1, [r4, #8]
 800ef16:	9301      	str	r3, [sp, #4]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 fbc7 	bl	800f6ac <_vfiprintf_r>
 800ef1e:	b002      	add	sp, #8
 800ef20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef24:	b004      	add	sp, #16
 800ef26:	4770      	bx	lr
 800ef28:	20000014 	.word	0x20000014

0800ef2c <rand>:
 800ef2c:	4b17      	ldr	r3, [pc, #92]	; (800ef8c <rand+0x60>)
 800ef2e:	b510      	push	{r4, lr}
 800ef30:	681c      	ldr	r4, [r3, #0]
 800ef32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef34:	b9b3      	cbnz	r3, 800ef64 <rand+0x38>
 800ef36:	2018      	movs	r0, #24
 800ef38:	f000 f980 	bl	800f23c <malloc>
 800ef3c:	63a0      	str	r0, [r4, #56]	; 0x38
 800ef3e:	b928      	cbnz	r0, 800ef4c <rand+0x20>
 800ef40:	4602      	mov	r2, r0
 800ef42:	4b13      	ldr	r3, [pc, #76]	; (800ef90 <rand+0x64>)
 800ef44:	4813      	ldr	r0, [pc, #76]	; (800ef94 <rand+0x68>)
 800ef46:	214e      	movs	r1, #78	; 0x4e
 800ef48:	f000 f850 	bl	800efec <__assert_func>
 800ef4c:	4a12      	ldr	r2, [pc, #72]	; (800ef98 <rand+0x6c>)
 800ef4e:	4b13      	ldr	r3, [pc, #76]	; (800ef9c <rand+0x70>)
 800ef50:	e9c0 2300 	strd	r2, r3, [r0]
 800ef54:	4b12      	ldr	r3, [pc, #72]	; (800efa0 <rand+0x74>)
 800ef56:	6083      	str	r3, [r0, #8]
 800ef58:	230b      	movs	r3, #11
 800ef5a:	8183      	strh	r3, [r0, #12]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef66:	480f      	ldr	r0, [pc, #60]	; (800efa4 <rand+0x78>)
 800ef68:	690a      	ldr	r2, [r1, #16]
 800ef6a:	694b      	ldr	r3, [r1, #20]
 800ef6c:	4c0e      	ldr	r4, [pc, #56]	; (800efa8 <rand+0x7c>)
 800ef6e:	4350      	muls	r0, r2
 800ef70:	fb04 0003 	mla	r0, r4, r3, r0
 800ef74:	fba2 3404 	umull	r3, r4, r2, r4
 800ef78:	1c5a      	adds	r2, r3, #1
 800ef7a:	4404      	add	r4, r0
 800ef7c:	f144 0000 	adc.w	r0, r4, #0
 800ef80:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ef84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef88:	bd10      	pop	{r4, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20000014 	.word	0x20000014
 800ef90:	08012dd8 	.word	0x08012dd8
 800ef94:	08012def 	.word	0x08012def
 800ef98:	abcd330e 	.word	0xabcd330e
 800ef9c:	e66d1234 	.word	0xe66d1234
 800efa0:	0005deec 	.word	0x0005deec
 800efa4:	5851f42d 	.word	0x5851f42d
 800efa8:	4c957f2d 	.word	0x4c957f2d

0800efac <siprintf>:
 800efac:	b40e      	push	{r1, r2, r3}
 800efae:	b500      	push	{lr}
 800efb0:	b09c      	sub	sp, #112	; 0x70
 800efb2:	ab1d      	add	r3, sp, #116	; 0x74
 800efb4:	9002      	str	r0, [sp, #8]
 800efb6:	9006      	str	r0, [sp, #24]
 800efb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efbc:	4809      	ldr	r0, [pc, #36]	; (800efe4 <siprintf+0x38>)
 800efbe:	9107      	str	r1, [sp, #28]
 800efc0:	9104      	str	r1, [sp, #16]
 800efc2:	4909      	ldr	r1, [pc, #36]	; (800efe8 <siprintf+0x3c>)
 800efc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc8:	9105      	str	r1, [sp, #20]
 800efca:	6800      	ldr	r0, [r0, #0]
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	a902      	add	r1, sp, #8
 800efd0:	f000 fa42 	bl	800f458 <_svfiprintf_r>
 800efd4:	9b02      	ldr	r3, [sp, #8]
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	b01c      	add	sp, #112	; 0x70
 800efdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800efe0:	b003      	add	sp, #12
 800efe2:	4770      	bx	lr
 800efe4:	20000014 	.word	0x20000014
 800efe8:	ffff0208 	.word	0xffff0208

0800efec <__assert_func>:
 800efec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efee:	4614      	mov	r4, r2
 800eff0:	461a      	mov	r2, r3
 800eff2:	4b09      	ldr	r3, [pc, #36]	; (800f018 <__assert_func+0x2c>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4605      	mov	r5, r0
 800eff8:	68d8      	ldr	r0, [r3, #12]
 800effa:	b14c      	cbz	r4, 800f010 <__assert_func+0x24>
 800effc:	4b07      	ldr	r3, [pc, #28]	; (800f01c <__assert_func+0x30>)
 800effe:	9100      	str	r1, [sp, #0]
 800f000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f004:	4906      	ldr	r1, [pc, #24]	; (800f020 <__assert_func+0x34>)
 800f006:	462b      	mov	r3, r5
 800f008:	f000 f8e4 	bl	800f1d4 <fiprintf>
 800f00c:	f000 ff38 	bl	800fe80 <abort>
 800f010:	4b04      	ldr	r3, [pc, #16]	; (800f024 <__assert_func+0x38>)
 800f012:	461c      	mov	r4, r3
 800f014:	e7f3      	b.n	800effe <__assert_func+0x12>
 800f016:	bf00      	nop
 800f018:	20000014 	.word	0x20000014
 800f01c:	08012e4e 	.word	0x08012e4e
 800f020:	08012e5b 	.word	0x08012e5b
 800f024:	08012e89 	.word	0x08012e89

0800f028 <std>:
 800f028:	2300      	movs	r3, #0
 800f02a:	b510      	push	{r4, lr}
 800f02c:	4604      	mov	r4, r0
 800f02e:	e9c0 3300 	strd	r3, r3, [r0]
 800f032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f036:	6083      	str	r3, [r0, #8]
 800f038:	8181      	strh	r1, [r0, #12]
 800f03a:	6643      	str	r3, [r0, #100]	; 0x64
 800f03c:	81c2      	strh	r2, [r0, #14]
 800f03e:	6183      	str	r3, [r0, #24]
 800f040:	4619      	mov	r1, r3
 800f042:	2208      	movs	r2, #8
 800f044:	305c      	adds	r0, #92	; 0x5c
 800f046:	f7ff ff51 	bl	800eeec <memset>
 800f04a:	4b05      	ldr	r3, [pc, #20]	; (800f060 <std+0x38>)
 800f04c:	6263      	str	r3, [r4, #36]	; 0x24
 800f04e:	4b05      	ldr	r3, [pc, #20]	; (800f064 <std+0x3c>)
 800f050:	62a3      	str	r3, [r4, #40]	; 0x28
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <std+0x40>)
 800f054:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f056:	4b05      	ldr	r3, [pc, #20]	; (800f06c <std+0x44>)
 800f058:	6224      	str	r4, [r4, #32]
 800f05a:	6323      	str	r3, [r4, #48]	; 0x30
 800f05c:	bd10      	pop	{r4, pc}
 800f05e:	bf00      	nop
 800f060:	0800fc55 	.word	0x0800fc55
 800f064:	0800fc77 	.word	0x0800fc77
 800f068:	0800fcaf 	.word	0x0800fcaf
 800f06c:	0800fcd3 	.word	0x0800fcd3

0800f070 <_cleanup_r>:
 800f070:	4901      	ldr	r1, [pc, #4]	; (800f078 <_cleanup_r+0x8>)
 800f072:	f000 b8c1 	b.w	800f1f8 <_fwalk_reent>
 800f076:	bf00      	nop
 800f078:	0800ffbd 	.word	0x0800ffbd

0800f07c <__sfmoreglue>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	1e4a      	subs	r2, r1, #1
 800f080:	2568      	movs	r5, #104	; 0x68
 800f082:	4355      	muls	r5, r2
 800f084:	460e      	mov	r6, r1
 800f086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f08a:	f000 f92f 	bl	800f2ec <_malloc_r>
 800f08e:	4604      	mov	r4, r0
 800f090:	b140      	cbz	r0, 800f0a4 <__sfmoreglue+0x28>
 800f092:	2100      	movs	r1, #0
 800f094:	e9c0 1600 	strd	r1, r6, [r0]
 800f098:	300c      	adds	r0, #12
 800f09a:	60a0      	str	r0, [r4, #8]
 800f09c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0a0:	f7ff ff24 	bl	800eeec <memset>
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}

0800f0a8 <__sfp_lock_acquire>:
 800f0a8:	4801      	ldr	r0, [pc, #4]	; (800f0b0 <__sfp_lock_acquire+0x8>)
 800f0aa:	f000 b8c5 	b.w	800f238 <__retarget_lock_acquire_recursive>
 800f0ae:	bf00      	nop
 800f0b0:	20008adc 	.word	0x20008adc

0800f0b4 <__sfp_lock_release>:
 800f0b4:	4801      	ldr	r0, [pc, #4]	; (800f0bc <__sfp_lock_release+0x8>)
 800f0b6:	f000 b8c0 	b.w	800f23a <__retarget_lock_release_recursive>
 800f0ba:	bf00      	nop
 800f0bc:	20008adc 	.word	0x20008adc

0800f0c0 <__sinit_lock_acquire>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	; (800f0c8 <__sinit_lock_acquire+0x8>)
 800f0c2:	f000 b8b9 	b.w	800f238 <__retarget_lock_acquire_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	20008ad7 	.word	0x20008ad7

0800f0cc <__sinit_lock_release>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	; (800f0d4 <__sinit_lock_release+0x8>)
 800f0ce:	f000 b8b4 	b.w	800f23a <__retarget_lock_release_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20008ad7 	.word	0x20008ad7

0800f0d8 <__sinit>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	f7ff fff0 	bl	800f0c0 <__sinit_lock_acquire>
 800f0e0:	69a3      	ldr	r3, [r4, #24]
 800f0e2:	b11b      	cbz	r3, 800f0ec <__sinit+0x14>
 800f0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e8:	f7ff bff0 	b.w	800f0cc <__sinit_lock_release>
 800f0ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0f0:	6523      	str	r3, [r4, #80]	; 0x50
 800f0f2:	4b13      	ldr	r3, [pc, #76]	; (800f140 <__sinit+0x68>)
 800f0f4:	4a13      	ldr	r2, [pc, #76]	; (800f144 <__sinit+0x6c>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0fa:	42a3      	cmp	r3, r4
 800f0fc:	bf04      	itt	eq
 800f0fe:	2301      	moveq	r3, #1
 800f100:	61a3      	streq	r3, [r4, #24]
 800f102:	4620      	mov	r0, r4
 800f104:	f000 f820 	bl	800f148 <__sfp>
 800f108:	6060      	str	r0, [r4, #4]
 800f10a:	4620      	mov	r0, r4
 800f10c:	f000 f81c 	bl	800f148 <__sfp>
 800f110:	60a0      	str	r0, [r4, #8]
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f818 	bl	800f148 <__sfp>
 800f118:	2200      	movs	r2, #0
 800f11a:	60e0      	str	r0, [r4, #12]
 800f11c:	2104      	movs	r1, #4
 800f11e:	6860      	ldr	r0, [r4, #4]
 800f120:	f7ff ff82 	bl	800f028 <std>
 800f124:	68a0      	ldr	r0, [r4, #8]
 800f126:	2201      	movs	r2, #1
 800f128:	2109      	movs	r1, #9
 800f12a:	f7ff ff7d 	bl	800f028 <std>
 800f12e:	68e0      	ldr	r0, [r4, #12]
 800f130:	2202      	movs	r2, #2
 800f132:	2112      	movs	r1, #18
 800f134:	f7ff ff78 	bl	800f028 <std>
 800f138:	2301      	movs	r3, #1
 800f13a:	61a3      	str	r3, [r4, #24]
 800f13c:	e7d2      	b.n	800f0e4 <__sinit+0xc>
 800f13e:	bf00      	nop
 800f140:	08012dd4 	.word	0x08012dd4
 800f144:	0800f071 	.word	0x0800f071

0800f148 <__sfp>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	4607      	mov	r7, r0
 800f14c:	f7ff ffac 	bl	800f0a8 <__sfp_lock_acquire>
 800f150:	4b1e      	ldr	r3, [pc, #120]	; (800f1cc <__sfp+0x84>)
 800f152:	681e      	ldr	r6, [r3, #0]
 800f154:	69b3      	ldr	r3, [r6, #24]
 800f156:	b913      	cbnz	r3, 800f15e <__sfp+0x16>
 800f158:	4630      	mov	r0, r6
 800f15a:	f7ff ffbd 	bl	800f0d8 <__sinit>
 800f15e:	3648      	adds	r6, #72	; 0x48
 800f160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f164:	3b01      	subs	r3, #1
 800f166:	d503      	bpl.n	800f170 <__sfp+0x28>
 800f168:	6833      	ldr	r3, [r6, #0]
 800f16a:	b30b      	cbz	r3, 800f1b0 <__sfp+0x68>
 800f16c:	6836      	ldr	r6, [r6, #0]
 800f16e:	e7f7      	b.n	800f160 <__sfp+0x18>
 800f170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f174:	b9d5      	cbnz	r5, 800f1ac <__sfp+0x64>
 800f176:	4b16      	ldr	r3, [pc, #88]	; (800f1d0 <__sfp+0x88>)
 800f178:	60e3      	str	r3, [r4, #12]
 800f17a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f17e:	6665      	str	r5, [r4, #100]	; 0x64
 800f180:	f000 f859 	bl	800f236 <__retarget_lock_init_recursive>
 800f184:	f7ff ff96 	bl	800f0b4 <__sfp_lock_release>
 800f188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f18c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f190:	6025      	str	r5, [r4, #0]
 800f192:	61a5      	str	r5, [r4, #24]
 800f194:	2208      	movs	r2, #8
 800f196:	4629      	mov	r1, r5
 800f198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f19c:	f7ff fea6 	bl	800eeec <memset>
 800f1a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ac:	3468      	adds	r4, #104	; 0x68
 800f1ae:	e7d9      	b.n	800f164 <__sfp+0x1c>
 800f1b0:	2104      	movs	r1, #4
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	f7ff ff62 	bl	800f07c <__sfmoreglue>
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	6030      	str	r0, [r6, #0]
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d1d5      	bne.n	800f16c <__sfp+0x24>
 800f1c0:	f7ff ff78 	bl	800f0b4 <__sfp_lock_release>
 800f1c4:	230c      	movs	r3, #12
 800f1c6:	603b      	str	r3, [r7, #0]
 800f1c8:	e7ee      	b.n	800f1a8 <__sfp+0x60>
 800f1ca:	bf00      	nop
 800f1cc:	08012dd4 	.word	0x08012dd4
 800f1d0:	ffff0001 	.word	0xffff0001

0800f1d4 <fiprintf>:
 800f1d4:	b40e      	push	{r1, r2, r3}
 800f1d6:	b503      	push	{r0, r1, lr}
 800f1d8:	4601      	mov	r1, r0
 800f1da:	ab03      	add	r3, sp, #12
 800f1dc:	4805      	ldr	r0, [pc, #20]	; (800f1f4 <fiprintf+0x20>)
 800f1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1e2:	6800      	ldr	r0, [r0, #0]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	f000 fa61 	bl	800f6ac <_vfiprintf_r>
 800f1ea:	b002      	add	sp, #8
 800f1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1f0:	b003      	add	sp, #12
 800f1f2:	4770      	bx	lr
 800f1f4:	20000014 	.word	0x20000014

0800f1f8 <_fwalk_reent>:
 800f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	4688      	mov	r8, r1
 800f200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f204:	2700      	movs	r7, #0
 800f206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f20a:	f1b9 0901 	subs.w	r9, r9, #1
 800f20e:	d505      	bpl.n	800f21c <_fwalk_reent+0x24>
 800f210:	6824      	ldr	r4, [r4, #0]
 800f212:	2c00      	cmp	r4, #0
 800f214:	d1f7      	bne.n	800f206 <_fwalk_reent+0xe>
 800f216:	4638      	mov	r0, r7
 800f218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f21c:	89ab      	ldrh	r3, [r5, #12]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d907      	bls.n	800f232 <_fwalk_reent+0x3a>
 800f222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f226:	3301      	adds	r3, #1
 800f228:	d003      	beq.n	800f232 <_fwalk_reent+0x3a>
 800f22a:	4629      	mov	r1, r5
 800f22c:	4630      	mov	r0, r6
 800f22e:	47c0      	blx	r8
 800f230:	4307      	orrs	r7, r0
 800f232:	3568      	adds	r5, #104	; 0x68
 800f234:	e7e9      	b.n	800f20a <_fwalk_reent+0x12>

0800f236 <__retarget_lock_init_recursive>:
 800f236:	4770      	bx	lr

0800f238 <__retarget_lock_acquire_recursive>:
 800f238:	4770      	bx	lr

0800f23a <__retarget_lock_release_recursive>:
 800f23a:	4770      	bx	lr

0800f23c <malloc>:
 800f23c:	4b02      	ldr	r3, [pc, #8]	; (800f248 <malloc+0xc>)
 800f23e:	4601      	mov	r1, r0
 800f240:	6818      	ldr	r0, [r3, #0]
 800f242:	f000 b853 	b.w	800f2ec <_malloc_r>
 800f246:	bf00      	nop
 800f248:	20000014 	.word	0x20000014

0800f24c <_free_r>:
 800f24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f24e:	2900      	cmp	r1, #0
 800f250:	d048      	beq.n	800f2e4 <_free_r+0x98>
 800f252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f256:	9001      	str	r0, [sp, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f1a1 0404 	sub.w	r4, r1, #4
 800f25e:	bfb8      	it	lt
 800f260:	18e4      	addlt	r4, r4, r3
 800f262:	f000 ff5d 	bl	8010120 <__malloc_lock>
 800f266:	4a20      	ldr	r2, [pc, #128]	; (800f2e8 <_free_r+0x9c>)
 800f268:	9801      	ldr	r0, [sp, #4]
 800f26a:	6813      	ldr	r3, [r2, #0]
 800f26c:	4615      	mov	r5, r2
 800f26e:	b933      	cbnz	r3, 800f27e <_free_r+0x32>
 800f270:	6063      	str	r3, [r4, #4]
 800f272:	6014      	str	r4, [r2, #0]
 800f274:	b003      	add	sp, #12
 800f276:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f27a:	f000 bf57 	b.w	801012c <__malloc_unlock>
 800f27e:	42a3      	cmp	r3, r4
 800f280:	d90b      	bls.n	800f29a <_free_r+0x4e>
 800f282:	6821      	ldr	r1, [r4, #0]
 800f284:	1862      	adds	r2, r4, r1
 800f286:	4293      	cmp	r3, r2
 800f288:	bf04      	itt	eq
 800f28a:	681a      	ldreq	r2, [r3, #0]
 800f28c:	685b      	ldreq	r3, [r3, #4]
 800f28e:	6063      	str	r3, [r4, #4]
 800f290:	bf04      	itt	eq
 800f292:	1852      	addeq	r2, r2, r1
 800f294:	6022      	streq	r2, [r4, #0]
 800f296:	602c      	str	r4, [r5, #0]
 800f298:	e7ec      	b.n	800f274 <_free_r+0x28>
 800f29a:	461a      	mov	r2, r3
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	b10b      	cbz	r3, 800f2a4 <_free_r+0x58>
 800f2a0:	42a3      	cmp	r3, r4
 800f2a2:	d9fa      	bls.n	800f29a <_free_r+0x4e>
 800f2a4:	6811      	ldr	r1, [r2, #0]
 800f2a6:	1855      	adds	r5, r2, r1
 800f2a8:	42a5      	cmp	r5, r4
 800f2aa:	d10b      	bne.n	800f2c4 <_free_r+0x78>
 800f2ac:	6824      	ldr	r4, [r4, #0]
 800f2ae:	4421      	add	r1, r4
 800f2b0:	1854      	adds	r4, r2, r1
 800f2b2:	42a3      	cmp	r3, r4
 800f2b4:	6011      	str	r1, [r2, #0]
 800f2b6:	d1dd      	bne.n	800f274 <_free_r+0x28>
 800f2b8:	681c      	ldr	r4, [r3, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	6053      	str	r3, [r2, #4]
 800f2be:	4421      	add	r1, r4
 800f2c0:	6011      	str	r1, [r2, #0]
 800f2c2:	e7d7      	b.n	800f274 <_free_r+0x28>
 800f2c4:	d902      	bls.n	800f2cc <_free_r+0x80>
 800f2c6:	230c      	movs	r3, #12
 800f2c8:	6003      	str	r3, [r0, #0]
 800f2ca:	e7d3      	b.n	800f274 <_free_r+0x28>
 800f2cc:	6825      	ldr	r5, [r4, #0]
 800f2ce:	1961      	adds	r1, r4, r5
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	bf04      	itt	eq
 800f2d4:	6819      	ldreq	r1, [r3, #0]
 800f2d6:	685b      	ldreq	r3, [r3, #4]
 800f2d8:	6063      	str	r3, [r4, #4]
 800f2da:	bf04      	itt	eq
 800f2dc:	1949      	addeq	r1, r1, r5
 800f2de:	6021      	streq	r1, [r4, #0]
 800f2e0:	6054      	str	r4, [r2, #4]
 800f2e2:	e7c7      	b.n	800f274 <_free_r+0x28>
 800f2e4:	b003      	add	sp, #12
 800f2e6:	bd30      	pop	{r4, r5, pc}
 800f2e8:	20000224 	.word	0x20000224

0800f2ec <_malloc_r>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	1ccd      	adds	r5, r1, #3
 800f2f0:	f025 0503 	bic.w	r5, r5, #3
 800f2f4:	3508      	adds	r5, #8
 800f2f6:	2d0c      	cmp	r5, #12
 800f2f8:	bf38      	it	cc
 800f2fa:	250c      	movcc	r5, #12
 800f2fc:	2d00      	cmp	r5, #0
 800f2fe:	4606      	mov	r6, r0
 800f300:	db01      	blt.n	800f306 <_malloc_r+0x1a>
 800f302:	42a9      	cmp	r1, r5
 800f304:	d903      	bls.n	800f30e <_malloc_r+0x22>
 800f306:	230c      	movs	r3, #12
 800f308:	6033      	str	r3, [r6, #0]
 800f30a:	2000      	movs	r0, #0
 800f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30e:	f000 ff07 	bl	8010120 <__malloc_lock>
 800f312:	4921      	ldr	r1, [pc, #132]	; (800f398 <_malloc_r+0xac>)
 800f314:	680a      	ldr	r2, [r1, #0]
 800f316:	4614      	mov	r4, r2
 800f318:	b99c      	cbnz	r4, 800f342 <_malloc_r+0x56>
 800f31a:	4f20      	ldr	r7, [pc, #128]	; (800f39c <_malloc_r+0xb0>)
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	b923      	cbnz	r3, 800f32a <_malloc_r+0x3e>
 800f320:	4621      	mov	r1, r4
 800f322:	4630      	mov	r0, r6
 800f324:	f000 fc86 	bl	800fc34 <_sbrk_r>
 800f328:	6038      	str	r0, [r7, #0]
 800f32a:	4629      	mov	r1, r5
 800f32c:	4630      	mov	r0, r6
 800f32e:	f000 fc81 	bl	800fc34 <_sbrk_r>
 800f332:	1c43      	adds	r3, r0, #1
 800f334:	d123      	bne.n	800f37e <_malloc_r+0x92>
 800f336:	230c      	movs	r3, #12
 800f338:	6033      	str	r3, [r6, #0]
 800f33a:	4630      	mov	r0, r6
 800f33c:	f000 fef6 	bl	801012c <__malloc_unlock>
 800f340:	e7e3      	b.n	800f30a <_malloc_r+0x1e>
 800f342:	6823      	ldr	r3, [r4, #0]
 800f344:	1b5b      	subs	r3, r3, r5
 800f346:	d417      	bmi.n	800f378 <_malloc_r+0x8c>
 800f348:	2b0b      	cmp	r3, #11
 800f34a:	d903      	bls.n	800f354 <_malloc_r+0x68>
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	441c      	add	r4, r3
 800f350:	6025      	str	r5, [r4, #0]
 800f352:	e004      	b.n	800f35e <_malloc_r+0x72>
 800f354:	6863      	ldr	r3, [r4, #4]
 800f356:	42a2      	cmp	r2, r4
 800f358:	bf0c      	ite	eq
 800f35a:	600b      	streq	r3, [r1, #0]
 800f35c:	6053      	strne	r3, [r2, #4]
 800f35e:	4630      	mov	r0, r6
 800f360:	f000 fee4 	bl	801012c <__malloc_unlock>
 800f364:	f104 000b 	add.w	r0, r4, #11
 800f368:	1d23      	adds	r3, r4, #4
 800f36a:	f020 0007 	bic.w	r0, r0, #7
 800f36e:	1ac2      	subs	r2, r0, r3
 800f370:	d0cc      	beq.n	800f30c <_malloc_r+0x20>
 800f372:	1a1b      	subs	r3, r3, r0
 800f374:	50a3      	str	r3, [r4, r2]
 800f376:	e7c9      	b.n	800f30c <_malloc_r+0x20>
 800f378:	4622      	mov	r2, r4
 800f37a:	6864      	ldr	r4, [r4, #4]
 800f37c:	e7cc      	b.n	800f318 <_malloc_r+0x2c>
 800f37e:	1cc4      	adds	r4, r0, #3
 800f380:	f024 0403 	bic.w	r4, r4, #3
 800f384:	42a0      	cmp	r0, r4
 800f386:	d0e3      	beq.n	800f350 <_malloc_r+0x64>
 800f388:	1a21      	subs	r1, r4, r0
 800f38a:	4630      	mov	r0, r6
 800f38c:	f000 fc52 	bl	800fc34 <_sbrk_r>
 800f390:	3001      	adds	r0, #1
 800f392:	d1dd      	bne.n	800f350 <_malloc_r+0x64>
 800f394:	e7cf      	b.n	800f336 <_malloc_r+0x4a>
 800f396:	bf00      	nop
 800f398:	20000224 	.word	0x20000224
 800f39c:	20000228 	.word	0x20000228

0800f3a0 <__ssputs_r>:
 800f3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a4:	688e      	ldr	r6, [r1, #8]
 800f3a6:	429e      	cmp	r6, r3
 800f3a8:	4682      	mov	sl, r0
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	4690      	mov	r8, r2
 800f3ae:	461f      	mov	r7, r3
 800f3b0:	d838      	bhi.n	800f424 <__ssputs_r+0x84>
 800f3b2:	898a      	ldrh	r2, [r1, #12]
 800f3b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3b8:	d032      	beq.n	800f420 <__ssputs_r+0x80>
 800f3ba:	6825      	ldr	r5, [r4, #0]
 800f3bc:	6909      	ldr	r1, [r1, #16]
 800f3be:	eba5 0901 	sub.w	r9, r5, r1
 800f3c2:	6965      	ldr	r5, [r4, #20]
 800f3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	444b      	add	r3, r9
 800f3d0:	106d      	asrs	r5, r5, #1
 800f3d2:	429d      	cmp	r5, r3
 800f3d4:	bf38      	it	cc
 800f3d6:	461d      	movcc	r5, r3
 800f3d8:	0553      	lsls	r3, r2, #21
 800f3da:	d531      	bpl.n	800f440 <__ssputs_r+0xa0>
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7ff ff85 	bl	800f2ec <_malloc_r>
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	b950      	cbnz	r0, 800f3fc <__ssputs_r+0x5c>
 800f3e6:	230c      	movs	r3, #12
 800f3e8:	f8ca 3000 	str.w	r3, [sl]
 800f3ec:	89a3      	ldrh	r3, [r4, #12]
 800f3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f2:	81a3      	strh	r3, [r4, #12]
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fc:	6921      	ldr	r1, [r4, #16]
 800f3fe:	464a      	mov	r2, r9
 800f400:	f7ff fd4c 	bl	800ee9c <memcpy>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	6126      	str	r6, [r4, #16]
 800f412:	6165      	str	r5, [r4, #20]
 800f414:	444e      	add	r6, r9
 800f416:	eba5 0509 	sub.w	r5, r5, r9
 800f41a:	6026      	str	r6, [r4, #0]
 800f41c:	60a5      	str	r5, [r4, #8]
 800f41e:	463e      	mov	r6, r7
 800f420:	42be      	cmp	r6, r7
 800f422:	d900      	bls.n	800f426 <__ssputs_r+0x86>
 800f424:	463e      	mov	r6, r7
 800f426:	4632      	mov	r2, r6
 800f428:	6820      	ldr	r0, [r4, #0]
 800f42a:	4641      	mov	r1, r8
 800f42c:	f7ff fd44 	bl	800eeb8 <memmove>
 800f430:	68a3      	ldr	r3, [r4, #8]
 800f432:	6822      	ldr	r2, [r4, #0]
 800f434:	1b9b      	subs	r3, r3, r6
 800f436:	4432      	add	r2, r6
 800f438:	60a3      	str	r3, [r4, #8]
 800f43a:	6022      	str	r2, [r4, #0]
 800f43c:	2000      	movs	r0, #0
 800f43e:	e7db      	b.n	800f3f8 <__ssputs_r+0x58>
 800f440:	462a      	mov	r2, r5
 800f442:	f000 fe79 	bl	8010138 <_realloc_r>
 800f446:	4606      	mov	r6, r0
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1e1      	bne.n	800f410 <__ssputs_r+0x70>
 800f44c:	6921      	ldr	r1, [r4, #16]
 800f44e:	4650      	mov	r0, sl
 800f450:	f7ff fefc 	bl	800f24c <_free_r>
 800f454:	e7c7      	b.n	800f3e6 <__ssputs_r+0x46>
	...

0800f458 <_svfiprintf_r>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	4698      	mov	r8, r3
 800f45e:	898b      	ldrh	r3, [r1, #12]
 800f460:	061b      	lsls	r3, r3, #24
 800f462:	b09d      	sub	sp, #116	; 0x74
 800f464:	4607      	mov	r7, r0
 800f466:	460d      	mov	r5, r1
 800f468:	4614      	mov	r4, r2
 800f46a:	d50e      	bpl.n	800f48a <_svfiprintf_r+0x32>
 800f46c:	690b      	ldr	r3, [r1, #16]
 800f46e:	b963      	cbnz	r3, 800f48a <_svfiprintf_r+0x32>
 800f470:	2140      	movs	r1, #64	; 0x40
 800f472:	f7ff ff3b 	bl	800f2ec <_malloc_r>
 800f476:	6028      	str	r0, [r5, #0]
 800f478:	6128      	str	r0, [r5, #16]
 800f47a:	b920      	cbnz	r0, 800f486 <_svfiprintf_r+0x2e>
 800f47c:	230c      	movs	r3, #12
 800f47e:	603b      	str	r3, [r7, #0]
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	e0d1      	b.n	800f62a <_svfiprintf_r+0x1d2>
 800f486:	2340      	movs	r3, #64	; 0x40
 800f488:	616b      	str	r3, [r5, #20]
 800f48a:	2300      	movs	r3, #0
 800f48c:	9309      	str	r3, [sp, #36]	; 0x24
 800f48e:	2320      	movs	r3, #32
 800f490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f494:	f8cd 800c 	str.w	r8, [sp, #12]
 800f498:	2330      	movs	r3, #48	; 0x30
 800f49a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f644 <_svfiprintf_r+0x1ec>
 800f49e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4a2:	f04f 0901 	mov.w	r9, #1
 800f4a6:	4623      	mov	r3, r4
 800f4a8:	469a      	mov	sl, r3
 800f4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ae:	b10a      	cbz	r2, 800f4b4 <_svfiprintf_r+0x5c>
 800f4b0:	2a25      	cmp	r2, #37	; 0x25
 800f4b2:	d1f9      	bne.n	800f4a8 <_svfiprintf_r+0x50>
 800f4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800f4b8:	d00b      	beq.n	800f4d2 <_svfiprintf_r+0x7a>
 800f4ba:	465b      	mov	r3, fp
 800f4bc:	4622      	mov	r2, r4
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	f7ff ff6d 	bl	800f3a0 <__ssputs_r>
 800f4c6:	3001      	adds	r0, #1
 800f4c8:	f000 80aa 	beq.w	800f620 <_svfiprintf_r+0x1c8>
 800f4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ce:	445a      	add	r2, fp
 800f4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800f4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 80a2 	beq.w	800f620 <_svfiprintf_r+0x1c8>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4e6:	f10a 0a01 	add.w	sl, sl, #1
 800f4ea:	9304      	str	r3, [sp, #16]
 800f4ec:	9307      	str	r3, [sp, #28]
 800f4ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4f2:	931a      	str	r3, [sp, #104]	; 0x68
 800f4f4:	4654      	mov	r4, sl
 800f4f6:	2205      	movs	r2, #5
 800f4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4fc:	4851      	ldr	r0, [pc, #324]	; (800f644 <_svfiprintf_r+0x1ec>)
 800f4fe:	f7f0 fe87 	bl	8000210 <memchr>
 800f502:	9a04      	ldr	r2, [sp, #16]
 800f504:	b9d8      	cbnz	r0, 800f53e <_svfiprintf_r+0xe6>
 800f506:	06d0      	lsls	r0, r2, #27
 800f508:	bf44      	itt	mi
 800f50a:	2320      	movmi	r3, #32
 800f50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f510:	0711      	lsls	r1, r2, #28
 800f512:	bf44      	itt	mi
 800f514:	232b      	movmi	r3, #43	; 0x2b
 800f516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f51a:	f89a 3000 	ldrb.w	r3, [sl]
 800f51e:	2b2a      	cmp	r3, #42	; 0x2a
 800f520:	d015      	beq.n	800f54e <_svfiprintf_r+0xf6>
 800f522:	9a07      	ldr	r2, [sp, #28]
 800f524:	4654      	mov	r4, sl
 800f526:	2000      	movs	r0, #0
 800f528:	f04f 0c0a 	mov.w	ip, #10
 800f52c:	4621      	mov	r1, r4
 800f52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f532:	3b30      	subs	r3, #48	; 0x30
 800f534:	2b09      	cmp	r3, #9
 800f536:	d94e      	bls.n	800f5d6 <_svfiprintf_r+0x17e>
 800f538:	b1b0      	cbz	r0, 800f568 <_svfiprintf_r+0x110>
 800f53a:	9207      	str	r2, [sp, #28]
 800f53c:	e014      	b.n	800f568 <_svfiprintf_r+0x110>
 800f53e:	eba0 0308 	sub.w	r3, r0, r8
 800f542:	fa09 f303 	lsl.w	r3, r9, r3
 800f546:	4313      	orrs	r3, r2
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	46a2      	mov	sl, r4
 800f54c:	e7d2      	b.n	800f4f4 <_svfiprintf_r+0x9c>
 800f54e:	9b03      	ldr	r3, [sp, #12]
 800f550:	1d19      	adds	r1, r3, #4
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	9103      	str	r1, [sp, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	bfbb      	ittet	lt
 800f55a:	425b      	neglt	r3, r3
 800f55c:	f042 0202 	orrlt.w	r2, r2, #2
 800f560:	9307      	strge	r3, [sp, #28]
 800f562:	9307      	strlt	r3, [sp, #28]
 800f564:	bfb8      	it	lt
 800f566:	9204      	strlt	r2, [sp, #16]
 800f568:	7823      	ldrb	r3, [r4, #0]
 800f56a:	2b2e      	cmp	r3, #46	; 0x2e
 800f56c:	d10c      	bne.n	800f588 <_svfiprintf_r+0x130>
 800f56e:	7863      	ldrb	r3, [r4, #1]
 800f570:	2b2a      	cmp	r3, #42	; 0x2a
 800f572:	d135      	bne.n	800f5e0 <_svfiprintf_r+0x188>
 800f574:	9b03      	ldr	r3, [sp, #12]
 800f576:	1d1a      	adds	r2, r3, #4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	9203      	str	r2, [sp, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	bfb8      	it	lt
 800f580:	f04f 33ff 	movlt.w	r3, #4294967295
 800f584:	3402      	adds	r4, #2
 800f586:	9305      	str	r3, [sp, #20]
 800f588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f654 <_svfiprintf_r+0x1fc>
 800f58c:	7821      	ldrb	r1, [r4, #0]
 800f58e:	2203      	movs	r2, #3
 800f590:	4650      	mov	r0, sl
 800f592:	f7f0 fe3d 	bl	8000210 <memchr>
 800f596:	b140      	cbz	r0, 800f5aa <_svfiprintf_r+0x152>
 800f598:	2340      	movs	r3, #64	; 0x40
 800f59a:	eba0 000a 	sub.w	r0, r0, sl
 800f59e:	fa03 f000 	lsl.w	r0, r3, r0
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	4303      	orrs	r3, r0
 800f5a6:	3401      	adds	r4, #1
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ae:	4826      	ldr	r0, [pc, #152]	; (800f648 <_svfiprintf_r+0x1f0>)
 800f5b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5b4:	2206      	movs	r2, #6
 800f5b6:	f7f0 fe2b 	bl	8000210 <memchr>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d038      	beq.n	800f630 <_svfiprintf_r+0x1d8>
 800f5be:	4b23      	ldr	r3, [pc, #140]	; (800f64c <_svfiprintf_r+0x1f4>)
 800f5c0:	bb1b      	cbnz	r3, 800f60a <_svfiprintf_r+0x1b2>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	3307      	adds	r3, #7
 800f5c6:	f023 0307 	bic.w	r3, r3, #7
 800f5ca:	3308      	adds	r3, #8
 800f5cc:	9303      	str	r3, [sp, #12]
 800f5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d0:	4433      	add	r3, r6
 800f5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d4:	e767      	b.n	800f4a6 <_svfiprintf_r+0x4e>
 800f5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5da:	460c      	mov	r4, r1
 800f5dc:	2001      	movs	r0, #1
 800f5de:	e7a5      	b.n	800f52c <_svfiprintf_r+0xd4>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	3401      	adds	r4, #1
 800f5e4:	9305      	str	r3, [sp, #20]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f04f 0c0a 	mov.w	ip, #10
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f2:	3a30      	subs	r2, #48	; 0x30
 800f5f4:	2a09      	cmp	r2, #9
 800f5f6:	d903      	bls.n	800f600 <_svfiprintf_r+0x1a8>
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0c5      	beq.n	800f588 <_svfiprintf_r+0x130>
 800f5fc:	9105      	str	r1, [sp, #20]
 800f5fe:	e7c3      	b.n	800f588 <_svfiprintf_r+0x130>
 800f600:	fb0c 2101 	mla	r1, ip, r1, r2
 800f604:	4604      	mov	r4, r0
 800f606:	2301      	movs	r3, #1
 800f608:	e7f0      	b.n	800f5ec <_svfiprintf_r+0x194>
 800f60a:	ab03      	add	r3, sp, #12
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	462a      	mov	r2, r5
 800f610:	4b0f      	ldr	r3, [pc, #60]	; (800f650 <_svfiprintf_r+0x1f8>)
 800f612:	a904      	add	r1, sp, #16
 800f614:	4638      	mov	r0, r7
 800f616:	f3af 8000 	nop.w
 800f61a:	1c42      	adds	r2, r0, #1
 800f61c:	4606      	mov	r6, r0
 800f61e:	d1d6      	bne.n	800f5ce <_svfiprintf_r+0x176>
 800f620:	89ab      	ldrh	r3, [r5, #12]
 800f622:	065b      	lsls	r3, r3, #25
 800f624:	f53f af2c 	bmi.w	800f480 <_svfiprintf_r+0x28>
 800f628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f62a:	b01d      	add	sp, #116	; 0x74
 800f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f630:	ab03      	add	r3, sp, #12
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	462a      	mov	r2, r5
 800f636:	4b06      	ldr	r3, [pc, #24]	; (800f650 <_svfiprintf_r+0x1f8>)
 800f638:	a904      	add	r1, sp, #16
 800f63a:	4638      	mov	r0, r7
 800f63c:	f000 f9d4 	bl	800f9e8 <_printf_i>
 800f640:	e7eb      	b.n	800f61a <_svfiprintf_r+0x1c2>
 800f642:	bf00      	nop
 800f644:	08012eec 	.word	0x08012eec
 800f648:	08012ef6 	.word	0x08012ef6
 800f64c:	00000000 	.word	0x00000000
 800f650:	0800f3a1 	.word	0x0800f3a1
 800f654:	08012ef2 	.word	0x08012ef2

0800f658 <__sfputc_r>:
 800f658:	6893      	ldr	r3, [r2, #8]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	b410      	push	{r4}
 800f660:	6093      	str	r3, [r2, #8]
 800f662:	da08      	bge.n	800f676 <__sfputc_r+0x1e>
 800f664:	6994      	ldr	r4, [r2, #24]
 800f666:	42a3      	cmp	r3, r4
 800f668:	db01      	blt.n	800f66e <__sfputc_r+0x16>
 800f66a:	290a      	cmp	r1, #10
 800f66c:	d103      	bne.n	800f676 <__sfputc_r+0x1e>
 800f66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f672:	f000 bb33 	b.w	800fcdc <__swbuf_r>
 800f676:	6813      	ldr	r3, [r2, #0]
 800f678:	1c58      	adds	r0, r3, #1
 800f67a:	6010      	str	r0, [r2, #0]
 800f67c:	7019      	strb	r1, [r3, #0]
 800f67e:	4608      	mov	r0, r1
 800f680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <__sfputs_r>:
 800f686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f688:	4606      	mov	r6, r0
 800f68a:	460f      	mov	r7, r1
 800f68c:	4614      	mov	r4, r2
 800f68e:	18d5      	adds	r5, r2, r3
 800f690:	42ac      	cmp	r4, r5
 800f692:	d101      	bne.n	800f698 <__sfputs_r+0x12>
 800f694:	2000      	movs	r0, #0
 800f696:	e007      	b.n	800f6a8 <__sfputs_r+0x22>
 800f698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69c:	463a      	mov	r2, r7
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7ff ffda 	bl	800f658 <__sfputc_r>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d1f3      	bne.n	800f690 <__sfputs_r+0xa>
 800f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6ac <_vfiprintf_r>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	b09d      	sub	sp, #116	; 0x74
 800f6b4:	4614      	mov	r4, r2
 800f6b6:	4698      	mov	r8, r3
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	b118      	cbz	r0, 800f6c4 <_vfiprintf_r+0x18>
 800f6bc:	6983      	ldr	r3, [r0, #24]
 800f6be:	b90b      	cbnz	r3, 800f6c4 <_vfiprintf_r+0x18>
 800f6c0:	f7ff fd0a 	bl	800f0d8 <__sinit>
 800f6c4:	4b89      	ldr	r3, [pc, #548]	; (800f8ec <_vfiprintf_r+0x240>)
 800f6c6:	429d      	cmp	r5, r3
 800f6c8:	d11b      	bne.n	800f702 <_vfiprintf_r+0x56>
 800f6ca:	6875      	ldr	r5, [r6, #4]
 800f6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6ce:	07d9      	lsls	r1, r3, #31
 800f6d0:	d405      	bmi.n	800f6de <_vfiprintf_r+0x32>
 800f6d2:	89ab      	ldrh	r3, [r5, #12]
 800f6d4:	059a      	lsls	r2, r3, #22
 800f6d6:	d402      	bmi.n	800f6de <_vfiprintf_r+0x32>
 800f6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6da:	f7ff fdad 	bl	800f238 <__retarget_lock_acquire_recursive>
 800f6de:	89ab      	ldrh	r3, [r5, #12]
 800f6e0:	071b      	lsls	r3, r3, #28
 800f6e2:	d501      	bpl.n	800f6e8 <_vfiprintf_r+0x3c>
 800f6e4:	692b      	ldr	r3, [r5, #16]
 800f6e6:	b9eb      	cbnz	r3, 800f724 <_vfiprintf_r+0x78>
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f000 fb5a 	bl	800fda4 <__swsetup_r>
 800f6f0:	b1c0      	cbz	r0, 800f724 <_vfiprintf_r+0x78>
 800f6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6f4:	07dc      	lsls	r4, r3, #31
 800f6f6:	d50e      	bpl.n	800f716 <_vfiprintf_r+0x6a>
 800f6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fc:	b01d      	add	sp, #116	; 0x74
 800f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f702:	4b7b      	ldr	r3, [pc, #492]	; (800f8f0 <_vfiprintf_r+0x244>)
 800f704:	429d      	cmp	r5, r3
 800f706:	d101      	bne.n	800f70c <_vfiprintf_r+0x60>
 800f708:	68b5      	ldr	r5, [r6, #8]
 800f70a:	e7df      	b.n	800f6cc <_vfiprintf_r+0x20>
 800f70c:	4b79      	ldr	r3, [pc, #484]	; (800f8f4 <_vfiprintf_r+0x248>)
 800f70e:	429d      	cmp	r5, r3
 800f710:	bf08      	it	eq
 800f712:	68f5      	ldreq	r5, [r6, #12]
 800f714:	e7da      	b.n	800f6cc <_vfiprintf_r+0x20>
 800f716:	89ab      	ldrh	r3, [r5, #12]
 800f718:	0598      	lsls	r0, r3, #22
 800f71a:	d4ed      	bmi.n	800f6f8 <_vfiprintf_r+0x4c>
 800f71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f71e:	f7ff fd8c 	bl	800f23a <__retarget_lock_release_recursive>
 800f722:	e7e9      	b.n	800f6f8 <_vfiprintf_r+0x4c>
 800f724:	2300      	movs	r3, #0
 800f726:	9309      	str	r3, [sp, #36]	; 0x24
 800f728:	2320      	movs	r3, #32
 800f72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f732:	2330      	movs	r3, #48	; 0x30
 800f734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f8f8 <_vfiprintf_r+0x24c>
 800f738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f73c:	f04f 0901 	mov.w	r9, #1
 800f740:	4623      	mov	r3, r4
 800f742:	469a      	mov	sl, r3
 800f744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f748:	b10a      	cbz	r2, 800f74e <_vfiprintf_r+0xa2>
 800f74a:	2a25      	cmp	r2, #37	; 0x25
 800f74c:	d1f9      	bne.n	800f742 <_vfiprintf_r+0x96>
 800f74e:	ebba 0b04 	subs.w	fp, sl, r4
 800f752:	d00b      	beq.n	800f76c <_vfiprintf_r+0xc0>
 800f754:	465b      	mov	r3, fp
 800f756:	4622      	mov	r2, r4
 800f758:	4629      	mov	r1, r5
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7ff ff93 	bl	800f686 <__sfputs_r>
 800f760:	3001      	adds	r0, #1
 800f762:	f000 80aa 	beq.w	800f8ba <_vfiprintf_r+0x20e>
 800f766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f768:	445a      	add	r2, fp
 800f76a:	9209      	str	r2, [sp, #36]	; 0x24
 800f76c:	f89a 3000 	ldrb.w	r3, [sl]
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 80a2 	beq.w	800f8ba <_vfiprintf_r+0x20e>
 800f776:	2300      	movs	r3, #0
 800f778:	f04f 32ff 	mov.w	r2, #4294967295
 800f77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f780:	f10a 0a01 	add.w	sl, sl, #1
 800f784:	9304      	str	r3, [sp, #16]
 800f786:	9307      	str	r3, [sp, #28]
 800f788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f78c:	931a      	str	r3, [sp, #104]	; 0x68
 800f78e:	4654      	mov	r4, sl
 800f790:	2205      	movs	r2, #5
 800f792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f796:	4858      	ldr	r0, [pc, #352]	; (800f8f8 <_vfiprintf_r+0x24c>)
 800f798:	f7f0 fd3a 	bl	8000210 <memchr>
 800f79c:	9a04      	ldr	r2, [sp, #16]
 800f79e:	b9d8      	cbnz	r0, 800f7d8 <_vfiprintf_r+0x12c>
 800f7a0:	06d1      	lsls	r1, r2, #27
 800f7a2:	bf44      	itt	mi
 800f7a4:	2320      	movmi	r3, #32
 800f7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7aa:	0713      	lsls	r3, r2, #28
 800f7ac:	bf44      	itt	mi
 800f7ae:	232b      	movmi	r3, #43	; 0x2b
 800f7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ba:	d015      	beq.n	800f7e8 <_vfiprintf_r+0x13c>
 800f7bc:	9a07      	ldr	r2, [sp, #28]
 800f7be:	4654      	mov	r4, sl
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	f04f 0c0a 	mov.w	ip, #10
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7cc:	3b30      	subs	r3, #48	; 0x30
 800f7ce:	2b09      	cmp	r3, #9
 800f7d0:	d94e      	bls.n	800f870 <_vfiprintf_r+0x1c4>
 800f7d2:	b1b0      	cbz	r0, 800f802 <_vfiprintf_r+0x156>
 800f7d4:	9207      	str	r2, [sp, #28]
 800f7d6:	e014      	b.n	800f802 <_vfiprintf_r+0x156>
 800f7d8:	eba0 0308 	sub.w	r3, r0, r8
 800f7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	9304      	str	r3, [sp, #16]
 800f7e4:	46a2      	mov	sl, r4
 800f7e6:	e7d2      	b.n	800f78e <_vfiprintf_r+0xe2>
 800f7e8:	9b03      	ldr	r3, [sp, #12]
 800f7ea:	1d19      	adds	r1, r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	9103      	str	r1, [sp, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bfbb      	ittet	lt
 800f7f4:	425b      	neglt	r3, r3
 800f7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7fa:	9307      	strge	r3, [sp, #28]
 800f7fc:	9307      	strlt	r3, [sp, #28]
 800f7fe:	bfb8      	it	lt
 800f800:	9204      	strlt	r2, [sp, #16]
 800f802:	7823      	ldrb	r3, [r4, #0]
 800f804:	2b2e      	cmp	r3, #46	; 0x2e
 800f806:	d10c      	bne.n	800f822 <_vfiprintf_r+0x176>
 800f808:	7863      	ldrb	r3, [r4, #1]
 800f80a:	2b2a      	cmp	r3, #42	; 0x2a
 800f80c:	d135      	bne.n	800f87a <_vfiprintf_r+0x1ce>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	1d1a      	adds	r2, r3, #4
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	9203      	str	r2, [sp, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	bfb8      	it	lt
 800f81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f81e:	3402      	adds	r4, #2
 800f820:	9305      	str	r3, [sp, #20]
 800f822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f908 <_vfiprintf_r+0x25c>
 800f826:	7821      	ldrb	r1, [r4, #0]
 800f828:	2203      	movs	r2, #3
 800f82a:	4650      	mov	r0, sl
 800f82c:	f7f0 fcf0 	bl	8000210 <memchr>
 800f830:	b140      	cbz	r0, 800f844 <_vfiprintf_r+0x198>
 800f832:	2340      	movs	r3, #64	; 0x40
 800f834:	eba0 000a 	sub.w	r0, r0, sl
 800f838:	fa03 f000 	lsl.w	r0, r3, r0
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	4303      	orrs	r3, r0
 800f840:	3401      	adds	r4, #1
 800f842:	9304      	str	r3, [sp, #16]
 800f844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f848:	482c      	ldr	r0, [pc, #176]	; (800f8fc <_vfiprintf_r+0x250>)
 800f84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f84e:	2206      	movs	r2, #6
 800f850:	f7f0 fcde 	bl	8000210 <memchr>
 800f854:	2800      	cmp	r0, #0
 800f856:	d03f      	beq.n	800f8d8 <_vfiprintf_r+0x22c>
 800f858:	4b29      	ldr	r3, [pc, #164]	; (800f900 <_vfiprintf_r+0x254>)
 800f85a:	bb1b      	cbnz	r3, 800f8a4 <_vfiprintf_r+0x1f8>
 800f85c:	9b03      	ldr	r3, [sp, #12]
 800f85e:	3307      	adds	r3, #7
 800f860:	f023 0307 	bic.w	r3, r3, #7
 800f864:	3308      	adds	r3, #8
 800f866:	9303      	str	r3, [sp, #12]
 800f868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f86a:	443b      	add	r3, r7
 800f86c:	9309      	str	r3, [sp, #36]	; 0x24
 800f86e:	e767      	b.n	800f740 <_vfiprintf_r+0x94>
 800f870:	fb0c 3202 	mla	r2, ip, r2, r3
 800f874:	460c      	mov	r4, r1
 800f876:	2001      	movs	r0, #1
 800f878:	e7a5      	b.n	800f7c6 <_vfiprintf_r+0x11a>
 800f87a:	2300      	movs	r3, #0
 800f87c:	3401      	adds	r4, #1
 800f87e:	9305      	str	r3, [sp, #20]
 800f880:	4619      	mov	r1, r3
 800f882:	f04f 0c0a 	mov.w	ip, #10
 800f886:	4620      	mov	r0, r4
 800f888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f88c:	3a30      	subs	r2, #48	; 0x30
 800f88e:	2a09      	cmp	r2, #9
 800f890:	d903      	bls.n	800f89a <_vfiprintf_r+0x1ee>
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0c5      	beq.n	800f822 <_vfiprintf_r+0x176>
 800f896:	9105      	str	r1, [sp, #20]
 800f898:	e7c3      	b.n	800f822 <_vfiprintf_r+0x176>
 800f89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f89e:	4604      	mov	r4, r0
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e7f0      	b.n	800f886 <_vfiprintf_r+0x1da>
 800f8a4:	ab03      	add	r3, sp, #12
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	462a      	mov	r2, r5
 800f8aa:	4b16      	ldr	r3, [pc, #88]	; (800f904 <_vfiprintf_r+0x258>)
 800f8ac:	a904      	add	r1, sp, #16
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f3af 8000 	nop.w
 800f8b4:	4607      	mov	r7, r0
 800f8b6:	1c78      	adds	r0, r7, #1
 800f8b8:	d1d6      	bne.n	800f868 <_vfiprintf_r+0x1bc>
 800f8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8bc:	07d9      	lsls	r1, r3, #31
 800f8be:	d405      	bmi.n	800f8cc <_vfiprintf_r+0x220>
 800f8c0:	89ab      	ldrh	r3, [r5, #12]
 800f8c2:	059a      	lsls	r2, r3, #22
 800f8c4:	d402      	bmi.n	800f8cc <_vfiprintf_r+0x220>
 800f8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8c8:	f7ff fcb7 	bl	800f23a <__retarget_lock_release_recursive>
 800f8cc:	89ab      	ldrh	r3, [r5, #12]
 800f8ce:	065b      	lsls	r3, r3, #25
 800f8d0:	f53f af12 	bmi.w	800f6f8 <_vfiprintf_r+0x4c>
 800f8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8d6:	e711      	b.n	800f6fc <_vfiprintf_r+0x50>
 800f8d8:	ab03      	add	r3, sp, #12
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	462a      	mov	r2, r5
 800f8de:	4b09      	ldr	r3, [pc, #36]	; (800f904 <_vfiprintf_r+0x258>)
 800f8e0:	a904      	add	r1, sp, #16
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f000 f880 	bl	800f9e8 <_printf_i>
 800f8e8:	e7e4      	b.n	800f8b4 <_vfiprintf_r+0x208>
 800f8ea:	bf00      	nop
 800f8ec:	08012eac 	.word	0x08012eac
 800f8f0:	08012ecc 	.word	0x08012ecc
 800f8f4:	08012e8c 	.word	0x08012e8c
 800f8f8:	08012eec 	.word	0x08012eec
 800f8fc:	08012ef6 	.word	0x08012ef6
 800f900:	00000000 	.word	0x00000000
 800f904:	0800f687 	.word	0x0800f687
 800f908:	08012ef2 	.word	0x08012ef2

0800f90c <_printf_common>:
 800f90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	4616      	mov	r6, r2
 800f912:	4699      	mov	r9, r3
 800f914:	688a      	ldr	r2, [r1, #8]
 800f916:	690b      	ldr	r3, [r1, #16]
 800f918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f91c:	4293      	cmp	r3, r2
 800f91e:	bfb8      	it	lt
 800f920:	4613      	movlt	r3, r2
 800f922:	6033      	str	r3, [r6, #0]
 800f924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f928:	4607      	mov	r7, r0
 800f92a:	460c      	mov	r4, r1
 800f92c:	b10a      	cbz	r2, 800f932 <_printf_common+0x26>
 800f92e:	3301      	adds	r3, #1
 800f930:	6033      	str	r3, [r6, #0]
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	0699      	lsls	r1, r3, #26
 800f936:	bf42      	ittt	mi
 800f938:	6833      	ldrmi	r3, [r6, #0]
 800f93a:	3302      	addmi	r3, #2
 800f93c:	6033      	strmi	r3, [r6, #0]
 800f93e:	6825      	ldr	r5, [r4, #0]
 800f940:	f015 0506 	ands.w	r5, r5, #6
 800f944:	d106      	bne.n	800f954 <_printf_common+0x48>
 800f946:	f104 0a19 	add.w	sl, r4, #25
 800f94a:	68e3      	ldr	r3, [r4, #12]
 800f94c:	6832      	ldr	r2, [r6, #0]
 800f94e:	1a9b      	subs	r3, r3, r2
 800f950:	42ab      	cmp	r3, r5
 800f952:	dc26      	bgt.n	800f9a2 <_printf_common+0x96>
 800f954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f958:	1e13      	subs	r3, r2, #0
 800f95a:	6822      	ldr	r2, [r4, #0]
 800f95c:	bf18      	it	ne
 800f95e:	2301      	movne	r3, #1
 800f960:	0692      	lsls	r2, r2, #26
 800f962:	d42b      	bmi.n	800f9bc <_printf_common+0xb0>
 800f964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f968:	4649      	mov	r1, r9
 800f96a:	4638      	mov	r0, r7
 800f96c:	47c0      	blx	r8
 800f96e:	3001      	adds	r0, #1
 800f970:	d01e      	beq.n	800f9b0 <_printf_common+0xa4>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	68e5      	ldr	r5, [r4, #12]
 800f976:	6832      	ldr	r2, [r6, #0]
 800f978:	f003 0306 	and.w	r3, r3, #6
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	bf08      	it	eq
 800f980:	1aad      	subeq	r5, r5, r2
 800f982:	68a3      	ldr	r3, [r4, #8]
 800f984:	6922      	ldr	r2, [r4, #16]
 800f986:	bf0c      	ite	eq
 800f988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f98c:	2500      	movne	r5, #0
 800f98e:	4293      	cmp	r3, r2
 800f990:	bfc4      	itt	gt
 800f992:	1a9b      	subgt	r3, r3, r2
 800f994:	18ed      	addgt	r5, r5, r3
 800f996:	2600      	movs	r6, #0
 800f998:	341a      	adds	r4, #26
 800f99a:	42b5      	cmp	r5, r6
 800f99c:	d11a      	bne.n	800f9d4 <_printf_common+0xc8>
 800f99e:	2000      	movs	r0, #0
 800f9a0:	e008      	b.n	800f9b4 <_printf_common+0xa8>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4652      	mov	r2, sl
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4638      	mov	r0, r7
 800f9aa:	47c0      	blx	r8
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d103      	bne.n	800f9b8 <_printf_common+0xac>
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	e7c6      	b.n	800f94a <_printf_common+0x3e>
 800f9bc:	18e1      	adds	r1, r4, r3
 800f9be:	1c5a      	adds	r2, r3, #1
 800f9c0:	2030      	movs	r0, #48	; 0x30
 800f9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9c6:	4422      	add	r2, r4
 800f9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9d0:	3302      	adds	r3, #2
 800f9d2:	e7c7      	b.n	800f964 <_printf_common+0x58>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4649      	mov	r1, r9
 800f9da:	4638      	mov	r0, r7
 800f9dc:	47c0      	blx	r8
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d0e6      	beq.n	800f9b0 <_printf_common+0xa4>
 800f9e2:	3601      	adds	r6, #1
 800f9e4:	e7d9      	b.n	800f99a <_printf_common+0x8e>
	...

0800f9e8 <_printf_i>:
 800f9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ec:	460c      	mov	r4, r1
 800f9ee:	4691      	mov	r9, r2
 800f9f0:	7e27      	ldrb	r7, [r4, #24]
 800f9f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f9f4:	2f78      	cmp	r7, #120	; 0x78
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	469a      	mov	sl, r3
 800f9fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9fe:	d807      	bhi.n	800fa10 <_printf_i+0x28>
 800fa00:	2f62      	cmp	r7, #98	; 0x62
 800fa02:	d80a      	bhi.n	800fa1a <_printf_i+0x32>
 800fa04:	2f00      	cmp	r7, #0
 800fa06:	f000 80d8 	beq.w	800fbba <_printf_i+0x1d2>
 800fa0a:	2f58      	cmp	r7, #88	; 0x58
 800fa0c:	f000 80a3 	beq.w	800fb56 <_printf_i+0x16e>
 800fa10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fa14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa18:	e03a      	b.n	800fa90 <_printf_i+0xa8>
 800fa1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa1e:	2b15      	cmp	r3, #21
 800fa20:	d8f6      	bhi.n	800fa10 <_printf_i+0x28>
 800fa22:	a001      	add	r0, pc, #4	; (adr r0, 800fa28 <_printf_i+0x40>)
 800fa24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fa28:	0800fa81 	.word	0x0800fa81
 800fa2c:	0800fa95 	.word	0x0800fa95
 800fa30:	0800fa11 	.word	0x0800fa11
 800fa34:	0800fa11 	.word	0x0800fa11
 800fa38:	0800fa11 	.word	0x0800fa11
 800fa3c:	0800fa11 	.word	0x0800fa11
 800fa40:	0800fa95 	.word	0x0800fa95
 800fa44:	0800fa11 	.word	0x0800fa11
 800fa48:	0800fa11 	.word	0x0800fa11
 800fa4c:	0800fa11 	.word	0x0800fa11
 800fa50:	0800fa11 	.word	0x0800fa11
 800fa54:	0800fba1 	.word	0x0800fba1
 800fa58:	0800fac5 	.word	0x0800fac5
 800fa5c:	0800fb83 	.word	0x0800fb83
 800fa60:	0800fa11 	.word	0x0800fa11
 800fa64:	0800fa11 	.word	0x0800fa11
 800fa68:	0800fbc3 	.word	0x0800fbc3
 800fa6c:	0800fa11 	.word	0x0800fa11
 800fa70:	0800fac5 	.word	0x0800fac5
 800fa74:	0800fa11 	.word	0x0800fa11
 800fa78:	0800fa11 	.word	0x0800fa11
 800fa7c:	0800fb8b 	.word	0x0800fb8b
 800fa80:	680b      	ldr	r3, [r1, #0]
 800fa82:	1d1a      	adds	r2, r3, #4
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	600a      	str	r2, [r1, #0]
 800fa88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fa8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa90:	2301      	movs	r3, #1
 800fa92:	e0a3      	b.n	800fbdc <_printf_i+0x1f4>
 800fa94:	6825      	ldr	r5, [r4, #0]
 800fa96:	6808      	ldr	r0, [r1, #0]
 800fa98:	062e      	lsls	r6, r5, #24
 800fa9a:	f100 0304 	add.w	r3, r0, #4
 800fa9e:	d50a      	bpl.n	800fab6 <_printf_i+0xce>
 800faa0:	6805      	ldr	r5, [r0, #0]
 800faa2:	600b      	str	r3, [r1, #0]
 800faa4:	2d00      	cmp	r5, #0
 800faa6:	da03      	bge.n	800fab0 <_printf_i+0xc8>
 800faa8:	232d      	movs	r3, #45	; 0x2d
 800faaa:	426d      	negs	r5, r5
 800faac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fab0:	485e      	ldr	r0, [pc, #376]	; (800fc2c <_printf_i+0x244>)
 800fab2:	230a      	movs	r3, #10
 800fab4:	e019      	b.n	800faea <_printf_i+0x102>
 800fab6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800faba:	6805      	ldr	r5, [r0, #0]
 800fabc:	600b      	str	r3, [r1, #0]
 800fabe:	bf18      	it	ne
 800fac0:	b22d      	sxthne	r5, r5
 800fac2:	e7ef      	b.n	800faa4 <_printf_i+0xbc>
 800fac4:	680b      	ldr	r3, [r1, #0]
 800fac6:	6825      	ldr	r5, [r4, #0]
 800fac8:	1d18      	adds	r0, r3, #4
 800faca:	6008      	str	r0, [r1, #0]
 800facc:	0628      	lsls	r0, r5, #24
 800face:	d501      	bpl.n	800fad4 <_printf_i+0xec>
 800fad0:	681d      	ldr	r5, [r3, #0]
 800fad2:	e002      	b.n	800fada <_printf_i+0xf2>
 800fad4:	0669      	lsls	r1, r5, #25
 800fad6:	d5fb      	bpl.n	800fad0 <_printf_i+0xe8>
 800fad8:	881d      	ldrh	r5, [r3, #0]
 800fada:	4854      	ldr	r0, [pc, #336]	; (800fc2c <_printf_i+0x244>)
 800fadc:	2f6f      	cmp	r7, #111	; 0x6f
 800fade:	bf0c      	ite	eq
 800fae0:	2308      	moveq	r3, #8
 800fae2:	230a      	movne	r3, #10
 800fae4:	2100      	movs	r1, #0
 800fae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faea:	6866      	ldr	r6, [r4, #4]
 800faec:	60a6      	str	r6, [r4, #8]
 800faee:	2e00      	cmp	r6, #0
 800faf0:	bfa2      	ittt	ge
 800faf2:	6821      	ldrge	r1, [r4, #0]
 800faf4:	f021 0104 	bicge.w	r1, r1, #4
 800faf8:	6021      	strge	r1, [r4, #0]
 800fafa:	b90d      	cbnz	r5, 800fb00 <_printf_i+0x118>
 800fafc:	2e00      	cmp	r6, #0
 800fafe:	d04d      	beq.n	800fb9c <_printf_i+0x1b4>
 800fb00:	4616      	mov	r6, r2
 800fb02:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb06:	fb03 5711 	mls	r7, r3, r1, r5
 800fb0a:	5dc7      	ldrb	r7, [r0, r7]
 800fb0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fb10:	462f      	mov	r7, r5
 800fb12:	42bb      	cmp	r3, r7
 800fb14:	460d      	mov	r5, r1
 800fb16:	d9f4      	bls.n	800fb02 <_printf_i+0x11a>
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d10b      	bne.n	800fb34 <_printf_i+0x14c>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	07df      	lsls	r7, r3, #31
 800fb20:	d508      	bpl.n	800fb34 <_printf_i+0x14c>
 800fb22:	6923      	ldr	r3, [r4, #16]
 800fb24:	6861      	ldr	r1, [r4, #4]
 800fb26:	4299      	cmp	r1, r3
 800fb28:	bfde      	ittt	le
 800fb2a:	2330      	movle	r3, #48	; 0x30
 800fb2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fb30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fb34:	1b92      	subs	r2, r2, r6
 800fb36:	6122      	str	r2, [r4, #16]
 800fb38:	f8cd a000 	str.w	sl, [sp]
 800fb3c:	464b      	mov	r3, r9
 800fb3e:	aa03      	add	r2, sp, #12
 800fb40:	4621      	mov	r1, r4
 800fb42:	4640      	mov	r0, r8
 800fb44:	f7ff fee2 	bl	800f90c <_printf_common>
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d14c      	bne.n	800fbe6 <_printf_i+0x1fe>
 800fb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb50:	b004      	add	sp, #16
 800fb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb56:	4835      	ldr	r0, [pc, #212]	; (800fc2c <_printf_i+0x244>)
 800fb58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	680e      	ldr	r6, [r1, #0]
 800fb60:	061f      	lsls	r7, r3, #24
 800fb62:	f856 5b04 	ldr.w	r5, [r6], #4
 800fb66:	600e      	str	r6, [r1, #0]
 800fb68:	d514      	bpl.n	800fb94 <_printf_i+0x1ac>
 800fb6a:	07d9      	lsls	r1, r3, #31
 800fb6c:	bf44      	itt	mi
 800fb6e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb72:	6023      	strmi	r3, [r4, #0]
 800fb74:	b91d      	cbnz	r5, 800fb7e <_printf_i+0x196>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	f023 0320 	bic.w	r3, r3, #32
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	2310      	movs	r3, #16
 800fb80:	e7b0      	b.n	800fae4 <_printf_i+0xfc>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	f043 0320 	orr.w	r3, r3, #32
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	2378      	movs	r3, #120	; 0x78
 800fb8c:	4828      	ldr	r0, [pc, #160]	; (800fc30 <_printf_i+0x248>)
 800fb8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb92:	e7e3      	b.n	800fb5c <_printf_i+0x174>
 800fb94:	065e      	lsls	r6, r3, #25
 800fb96:	bf48      	it	mi
 800fb98:	b2ad      	uxthmi	r5, r5
 800fb9a:	e7e6      	b.n	800fb6a <_printf_i+0x182>
 800fb9c:	4616      	mov	r6, r2
 800fb9e:	e7bb      	b.n	800fb18 <_printf_i+0x130>
 800fba0:	680b      	ldr	r3, [r1, #0]
 800fba2:	6826      	ldr	r6, [r4, #0]
 800fba4:	6960      	ldr	r0, [r4, #20]
 800fba6:	1d1d      	adds	r5, r3, #4
 800fba8:	600d      	str	r5, [r1, #0]
 800fbaa:	0635      	lsls	r5, r6, #24
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	d501      	bpl.n	800fbb4 <_printf_i+0x1cc>
 800fbb0:	6018      	str	r0, [r3, #0]
 800fbb2:	e002      	b.n	800fbba <_printf_i+0x1d2>
 800fbb4:	0671      	lsls	r1, r6, #25
 800fbb6:	d5fb      	bpl.n	800fbb0 <_printf_i+0x1c8>
 800fbb8:	8018      	strh	r0, [r3, #0]
 800fbba:	2300      	movs	r3, #0
 800fbbc:	6123      	str	r3, [r4, #16]
 800fbbe:	4616      	mov	r6, r2
 800fbc0:	e7ba      	b.n	800fb38 <_printf_i+0x150>
 800fbc2:	680b      	ldr	r3, [r1, #0]
 800fbc4:	1d1a      	adds	r2, r3, #4
 800fbc6:	600a      	str	r2, [r1, #0]
 800fbc8:	681e      	ldr	r6, [r3, #0]
 800fbca:	6862      	ldr	r2, [r4, #4]
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f7f0 fb1e 	bl	8000210 <memchr>
 800fbd4:	b108      	cbz	r0, 800fbda <_printf_i+0x1f2>
 800fbd6:	1b80      	subs	r0, r0, r6
 800fbd8:	6060      	str	r0, [r4, #4]
 800fbda:	6863      	ldr	r3, [r4, #4]
 800fbdc:	6123      	str	r3, [r4, #16]
 800fbde:	2300      	movs	r3, #0
 800fbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe4:	e7a8      	b.n	800fb38 <_printf_i+0x150>
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	4632      	mov	r2, r6
 800fbea:	4649      	mov	r1, r9
 800fbec:	4640      	mov	r0, r8
 800fbee:	47d0      	blx	sl
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d0ab      	beq.n	800fb4c <_printf_i+0x164>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	079b      	lsls	r3, r3, #30
 800fbf8:	d413      	bmi.n	800fc22 <_printf_i+0x23a>
 800fbfa:	68e0      	ldr	r0, [r4, #12]
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	4298      	cmp	r0, r3
 800fc00:	bfb8      	it	lt
 800fc02:	4618      	movlt	r0, r3
 800fc04:	e7a4      	b.n	800fb50 <_printf_i+0x168>
 800fc06:	2301      	movs	r3, #1
 800fc08:	4632      	mov	r2, r6
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	47d0      	blx	sl
 800fc10:	3001      	adds	r0, #1
 800fc12:	d09b      	beq.n	800fb4c <_printf_i+0x164>
 800fc14:	3501      	adds	r5, #1
 800fc16:	68e3      	ldr	r3, [r4, #12]
 800fc18:	9903      	ldr	r1, [sp, #12]
 800fc1a:	1a5b      	subs	r3, r3, r1
 800fc1c:	42ab      	cmp	r3, r5
 800fc1e:	dcf2      	bgt.n	800fc06 <_printf_i+0x21e>
 800fc20:	e7eb      	b.n	800fbfa <_printf_i+0x212>
 800fc22:	2500      	movs	r5, #0
 800fc24:	f104 0619 	add.w	r6, r4, #25
 800fc28:	e7f5      	b.n	800fc16 <_printf_i+0x22e>
 800fc2a:	bf00      	nop
 800fc2c:	08012efd 	.word	0x08012efd
 800fc30:	08012f0e 	.word	0x08012f0e

0800fc34 <_sbrk_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d06      	ldr	r5, [pc, #24]	; (800fc50 <_sbrk_r+0x1c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	4608      	mov	r0, r1
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	f7f0 ff88 	bl	8000b54 <_sbrk>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_sbrk_r+0x1a>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_sbrk_r+0x1a>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	20008ad0 	.word	0x20008ad0

0800fc54 <__sread>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5c:	f000 fa92 	bl	8010184 <_read_r>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	bfab      	itete	ge
 800fc64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc66:	89a3      	ldrhlt	r3, [r4, #12]
 800fc68:	181b      	addge	r3, r3, r0
 800fc6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc6e:	bfac      	ite	ge
 800fc70:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc72:	81a3      	strhlt	r3, [r4, #12]
 800fc74:	bd10      	pop	{r4, pc}

0800fc76 <__swrite>:
 800fc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7a:	461f      	mov	r7, r3
 800fc7c:	898b      	ldrh	r3, [r1, #12]
 800fc7e:	05db      	lsls	r3, r3, #23
 800fc80:	4605      	mov	r5, r0
 800fc82:	460c      	mov	r4, r1
 800fc84:	4616      	mov	r6, r2
 800fc86:	d505      	bpl.n	800fc94 <__swrite+0x1e>
 800fc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f000 f9d0 	bl	8010034 <_lseek_r>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	4632      	mov	r2, r6
 800fca2:	463b      	mov	r3, r7
 800fca4:	4628      	mov	r0, r5
 800fca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcaa:	f000 b869 	b.w	800fd80 <_write_r>

0800fcae <__sseek>:
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb6:	f000 f9bd 	bl	8010034 <_lseek_r>
 800fcba:	1c43      	adds	r3, r0, #1
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	bf15      	itete	ne
 800fcc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcca:	81a3      	strheq	r3, [r4, #12]
 800fccc:	bf18      	it	ne
 800fcce:	81a3      	strhne	r3, [r4, #12]
 800fcd0:	bd10      	pop	{r4, pc}

0800fcd2 <__sclose>:
 800fcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd6:	f000 b8db 	b.w	800fe90 <_close_r>
	...

0800fcdc <__swbuf_r>:
 800fcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcde:	460e      	mov	r6, r1
 800fce0:	4614      	mov	r4, r2
 800fce2:	4605      	mov	r5, r0
 800fce4:	b118      	cbz	r0, 800fcee <__swbuf_r+0x12>
 800fce6:	6983      	ldr	r3, [r0, #24]
 800fce8:	b90b      	cbnz	r3, 800fcee <__swbuf_r+0x12>
 800fcea:	f7ff f9f5 	bl	800f0d8 <__sinit>
 800fcee:	4b21      	ldr	r3, [pc, #132]	; (800fd74 <__swbuf_r+0x98>)
 800fcf0:	429c      	cmp	r4, r3
 800fcf2:	d12b      	bne.n	800fd4c <__swbuf_r+0x70>
 800fcf4:	686c      	ldr	r4, [r5, #4]
 800fcf6:	69a3      	ldr	r3, [r4, #24]
 800fcf8:	60a3      	str	r3, [r4, #8]
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	071a      	lsls	r2, r3, #28
 800fcfe:	d52f      	bpl.n	800fd60 <__swbuf_r+0x84>
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	b36b      	cbz	r3, 800fd60 <__swbuf_r+0x84>
 800fd04:	6923      	ldr	r3, [r4, #16]
 800fd06:	6820      	ldr	r0, [r4, #0]
 800fd08:	1ac0      	subs	r0, r0, r3
 800fd0a:	6963      	ldr	r3, [r4, #20]
 800fd0c:	b2f6      	uxtb	r6, r6
 800fd0e:	4283      	cmp	r3, r0
 800fd10:	4637      	mov	r7, r6
 800fd12:	dc04      	bgt.n	800fd1e <__swbuf_r+0x42>
 800fd14:	4621      	mov	r1, r4
 800fd16:	4628      	mov	r0, r5
 800fd18:	f000 f950 	bl	800ffbc <_fflush_r>
 800fd1c:	bb30      	cbnz	r0, 800fd6c <__swbuf_r+0x90>
 800fd1e:	68a3      	ldr	r3, [r4, #8]
 800fd20:	3b01      	subs	r3, #1
 800fd22:	60a3      	str	r3, [r4, #8]
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	6022      	str	r2, [r4, #0]
 800fd2a:	701e      	strb	r6, [r3, #0]
 800fd2c:	6963      	ldr	r3, [r4, #20]
 800fd2e:	3001      	adds	r0, #1
 800fd30:	4283      	cmp	r3, r0
 800fd32:	d004      	beq.n	800fd3e <__swbuf_r+0x62>
 800fd34:	89a3      	ldrh	r3, [r4, #12]
 800fd36:	07db      	lsls	r3, r3, #31
 800fd38:	d506      	bpl.n	800fd48 <__swbuf_r+0x6c>
 800fd3a:	2e0a      	cmp	r6, #10
 800fd3c:	d104      	bne.n	800fd48 <__swbuf_r+0x6c>
 800fd3e:	4621      	mov	r1, r4
 800fd40:	4628      	mov	r0, r5
 800fd42:	f000 f93b 	bl	800ffbc <_fflush_r>
 800fd46:	b988      	cbnz	r0, 800fd6c <__swbuf_r+0x90>
 800fd48:	4638      	mov	r0, r7
 800fd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd4c:	4b0a      	ldr	r3, [pc, #40]	; (800fd78 <__swbuf_r+0x9c>)
 800fd4e:	429c      	cmp	r4, r3
 800fd50:	d101      	bne.n	800fd56 <__swbuf_r+0x7a>
 800fd52:	68ac      	ldr	r4, [r5, #8]
 800fd54:	e7cf      	b.n	800fcf6 <__swbuf_r+0x1a>
 800fd56:	4b09      	ldr	r3, [pc, #36]	; (800fd7c <__swbuf_r+0xa0>)
 800fd58:	429c      	cmp	r4, r3
 800fd5a:	bf08      	it	eq
 800fd5c:	68ec      	ldreq	r4, [r5, #12]
 800fd5e:	e7ca      	b.n	800fcf6 <__swbuf_r+0x1a>
 800fd60:	4621      	mov	r1, r4
 800fd62:	4628      	mov	r0, r5
 800fd64:	f000 f81e 	bl	800fda4 <__swsetup_r>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d0cb      	beq.n	800fd04 <__swbuf_r+0x28>
 800fd6c:	f04f 37ff 	mov.w	r7, #4294967295
 800fd70:	e7ea      	b.n	800fd48 <__swbuf_r+0x6c>
 800fd72:	bf00      	nop
 800fd74:	08012eac 	.word	0x08012eac
 800fd78:	08012ecc 	.word	0x08012ecc
 800fd7c:	08012e8c 	.word	0x08012e8c

0800fd80 <_write_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d07      	ldr	r5, [pc, #28]	; (800fda0 <_write_r+0x20>)
 800fd84:	4604      	mov	r4, r0
 800fd86:	4608      	mov	r0, r1
 800fd88:	4611      	mov	r1, r2
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	602a      	str	r2, [r5, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f7f0 fe8f 	bl	8000ab2 <_write>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_write_r+0x1e>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_write_r+0x1e>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	20008ad0 	.word	0x20008ad0

0800fda4 <__swsetup_r>:
 800fda4:	4b32      	ldr	r3, [pc, #200]	; (800fe70 <__swsetup_r+0xcc>)
 800fda6:	b570      	push	{r4, r5, r6, lr}
 800fda8:	681d      	ldr	r5, [r3, #0]
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460c      	mov	r4, r1
 800fdae:	b125      	cbz	r5, 800fdba <__swsetup_r+0x16>
 800fdb0:	69ab      	ldr	r3, [r5, #24]
 800fdb2:	b913      	cbnz	r3, 800fdba <__swsetup_r+0x16>
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7ff f98f 	bl	800f0d8 <__sinit>
 800fdba:	4b2e      	ldr	r3, [pc, #184]	; (800fe74 <__swsetup_r+0xd0>)
 800fdbc:	429c      	cmp	r4, r3
 800fdbe:	d10f      	bne.n	800fde0 <__swsetup_r+0x3c>
 800fdc0:	686c      	ldr	r4, [r5, #4]
 800fdc2:	89a3      	ldrh	r3, [r4, #12]
 800fdc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdc8:	0719      	lsls	r1, r3, #28
 800fdca:	d42c      	bmi.n	800fe26 <__swsetup_r+0x82>
 800fdcc:	06dd      	lsls	r5, r3, #27
 800fdce:	d411      	bmi.n	800fdf4 <__swsetup_r+0x50>
 800fdd0:	2309      	movs	r3, #9
 800fdd2:	6033      	str	r3, [r6, #0]
 800fdd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fdd8:	81a3      	strh	r3, [r4, #12]
 800fdda:	f04f 30ff 	mov.w	r0, #4294967295
 800fdde:	e03e      	b.n	800fe5e <__swsetup_r+0xba>
 800fde0:	4b25      	ldr	r3, [pc, #148]	; (800fe78 <__swsetup_r+0xd4>)
 800fde2:	429c      	cmp	r4, r3
 800fde4:	d101      	bne.n	800fdea <__swsetup_r+0x46>
 800fde6:	68ac      	ldr	r4, [r5, #8]
 800fde8:	e7eb      	b.n	800fdc2 <__swsetup_r+0x1e>
 800fdea:	4b24      	ldr	r3, [pc, #144]	; (800fe7c <__swsetup_r+0xd8>)
 800fdec:	429c      	cmp	r4, r3
 800fdee:	bf08      	it	eq
 800fdf0:	68ec      	ldreq	r4, [r5, #12]
 800fdf2:	e7e6      	b.n	800fdc2 <__swsetup_r+0x1e>
 800fdf4:	0758      	lsls	r0, r3, #29
 800fdf6:	d512      	bpl.n	800fe1e <__swsetup_r+0x7a>
 800fdf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdfa:	b141      	cbz	r1, 800fe0e <__swsetup_r+0x6a>
 800fdfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe00:	4299      	cmp	r1, r3
 800fe02:	d002      	beq.n	800fe0a <__swsetup_r+0x66>
 800fe04:	4630      	mov	r0, r6
 800fe06:	f7ff fa21 	bl	800f24c <_free_r>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	6363      	str	r3, [r4, #52]	; 0x34
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe14:	81a3      	strh	r3, [r4, #12]
 800fe16:	2300      	movs	r3, #0
 800fe18:	6063      	str	r3, [r4, #4]
 800fe1a:	6923      	ldr	r3, [r4, #16]
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	89a3      	ldrh	r3, [r4, #12]
 800fe20:	f043 0308 	orr.w	r3, r3, #8
 800fe24:	81a3      	strh	r3, [r4, #12]
 800fe26:	6923      	ldr	r3, [r4, #16]
 800fe28:	b94b      	cbnz	r3, 800fe3e <__swsetup_r+0x9a>
 800fe2a:	89a3      	ldrh	r3, [r4, #12]
 800fe2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe34:	d003      	beq.n	800fe3e <__swsetup_r+0x9a>
 800fe36:	4621      	mov	r1, r4
 800fe38:	4630      	mov	r0, r6
 800fe3a:	f000 f931 	bl	80100a0 <__smakebuf_r>
 800fe3e:	89a0      	ldrh	r0, [r4, #12]
 800fe40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe44:	f010 0301 	ands.w	r3, r0, #1
 800fe48:	d00a      	beq.n	800fe60 <__swsetup_r+0xbc>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60a3      	str	r3, [r4, #8]
 800fe4e:	6963      	ldr	r3, [r4, #20]
 800fe50:	425b      	negs	r3, r3
 800fe52:	61a3      	str	r3, [r4, #24]
 800fe54:	6923      	ldr	r3, [r4, #16]
 800fe56:	b943      	cbnz	r3, 800fe6a <__swsetup_r+0xc6>
 800fe58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe5c:	d1ba      	bne.n	800fdd4 <__swsetup_r+0x30>
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	0781      	lsls	r1, r0, #30
 800fe62:	bf58      	it	pl
 800fe64:	6963      	ldrpl	r3, [r4, #20]
 800fe66:	60a3      	str	r3, [r4, #8]
 800fe68:	e7f4      	b.n	800fe54 <__swsetup_r+0xb0>
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	e7f7      	b.n	800fe5e <__swsetup_r+0xba>
 800fe6e:	bf00      	nop
 800fe70:	20000014 	.word	0x20000014
 800fe74:	08012eac 	.word	0x08012eac
 800fe78:	08012ecc 	.word	0x08012ecc
 800fe7c:	08012e8c 	.word	0x08012e8c

0800fe80 <abort>:
 800fe80:	b508      	push	{r3, lr}
 800fe82:	2006      	movs	r0, #6
 800fe84:	f000 f9b8 	bl	80101f8 <raise>
 800fe88:	2001      	movs	r0, #1
 800fe8a:	f7f0 fdeb 	bl	8000a64 <_exit>
	...

0800fe90 <_close_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	4d06      	ldr	r5, [pc, #24]	; (800feac <_close_r+0x1c>)
 800fe94:	2300      	movs	r3, #0
 800fe96:	4604      	mov	r4, r0
 800fe98:	4608      	mov	r0, r1
 800fe9a:	602b      	str	r3, [r5, #0]
 800fe9c:	f7f0 fe25 	bl	8000aea <_close>
 800fea0:	1c43      	adds	r3, r0, #1
 800fea2:	d102      	bne.n	800feaa <_close_r+0x1a>
 800fea4:	682b      	ldr	r3, [r5, #0]
 800fea6:	b103      	cbz	r3, 800feaa <_close_r+0x1a>
 800fea8:	6023      	str	r3, [r4, #0]
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
 800feac:	20008ad0 	.word	0x20008ad0

0800feb0 <__sflush_r>:
 800feb0:	898a      	ldrh	r2, [r1, #12]
 800feb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb6:	4605      	mov	r5, r0
 800feb8:	0710      	lsls	r0, r2, #28
 800feba:	460c      	mov	r4, r1
 800febc:	d458      	bmi.n	800ff70 <__sflush_r+0xc0>
 800febe:	684b      	ldr	r3, [r1, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dc05      	bgt.n	800fed0 <__sflush_r+0x20>
 800fec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	dc02      	bgt.n	800fed0 <__sflush_r+0x20>
 800feca:	2000      	movs	r0, #0
 800fecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fed2:	2e00      	cmp	r6, #0
 800fed4:	d0f9      	beq.n	800feca <__sflush_r+0x1a>
 800fed6:	2300      	movs	r3, #0
 800fed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fedc:	682f      	ldr	r7, [r5, #0]
 800fede:	602b      	str	r3, [r5, #0]
 800fee0:	d032      	beq.n	800ff48 <__sflush_r+0x98>
 800fee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fee4:	89a3      	ldrh	r3, [r4, #12]
 800fee6:	075a      	lsls	r2, r3, #29
 800fee8:	d505      	bpl.n	800fef6 <__sflush_r+0x46>
 800feea:	6863      	ldr	r3, [r4, #4]
 800feec:	1ac0      	subs	r0, r0, r3
 800feee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fef0:	b10b      	cbz	r3, 800fef6 <__sflush_r+0x46>
 800fef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fef4:	1ac0      	subs	r0, r0, r3
 800fef6:	2300      	movs	r3, #0
 800fef8:	4602      	mov	r2, r0
 800fefa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fefc:	6a21      	ldr	r1, [r4, #32]
 800fefe:	4628      	mov	r0, r5
 800ff00:	47b0      	blx	r6
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	d106      	bne.n	800ff16 <__sflush_r+0x66>
 800ff08:	6829      	ldr	r1, [r5, #0]
 800ff0a:	291d      	cmp	r1, #29
 800ff0c:	d82c      	bhi.n	800ff68 <__sflush_r+0xb8>
 800ff0e:	4a2a      	ldr	r2, [pc, #168]	; (800ffb8 <__sflush_r+0x108>)
 800ff10:	40ca      	lsrs	r2, r1
 800ff12:	07d6      	lsls	r6, r2, #31
 800ff14:	d528      	bpl.n	800ff68 <__sflush_r+0xb8>
 800ff16:	2200      	movs	r2, #0
 800ff18:	6062      	str	r2, [r4, #4]
 800ff1a:	04d9      	lsls	r1, r3, #19
 800ff1c:	6922      	ldr	r2, [r4, #16]
 800ff1e:	6022      	str	r2, [r4, #0]
 800ff20:	d504      	bpl.n	800ff2c <__sflush_r+0x7c>
 800ff22:	1c42      	adds	r2, r0, #1
 800ff24:	d101      	bne.n	800ff2a <__sflush_r+0x7a>
 800ff26:	682b      	ldr	r3, [r5, #0]
 800ff28:	b903      	cbnz	r3, 800ff2c <__sflush_r+0x7c>
 800ff2a:	6560      	str	r0, [r4, #84]	; 0x54
 800ff2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff2e:	602f      	str	r7, [r5, #0]
 800ff30:	2900      	cmp	r1, #0
 800ff32:	d0ca      	beq.n	800feca <__sflush_r+0x1a>
 800ff34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff38:	4299      	cmp	r1, r3
 800ff3a:	d002      	beq.n	800ff42 <__sflush_r+0x92>
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f7ff f985 	bl	800f24c <_free_r>
 800ff42:	2000      	movs	r0, #0
 800ff44:	6360      	str	r0, [r4, #52]	; 0x34
 800ff46:	e7c1      	b.n	800fecc <__sflush_r+0x1c>
 800ff48:	6a21      	ldr	r1, [r4, #32]
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	47b0      	blx	r6
 800ff50:	1c41      	adds	r1, r0, #1
 800ff52:	d1c7      	bne.n	800fee4 <__sflush_r+0x34>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d0c4      	beq.n	800fee4 <__sflush_r+0x34>
 800ff5a:	2b1d      	cmp	r3, #29
 800ff5c:	d001      	beq.n	800ff62 <__sflush_r+0xb2>
 800ff5e:	2b16      	cmp	r3, #22
 800ff60:	d101      	bne.n	800ff66 <__sflush_r+0xb6>
 800ff62:	602f      	str	r7, [r5, #0]
 800ff64:	e7b1      	b.n	800feca <__sflush_r+0x1a>
 800ff66:	89a3      	ldrh	r3, [r4, #12]
 800ff68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff6c:	81a3      	strh	r3, [r4, #12]
 800ff6e:	e7ad      	b.n	800fecc <__sflush_r+0x1c>
 800ff70:	690f      	ldr	r7, [r1, #16]
 800ff72:	2f00      	cmp	r7, #0
 800ff74:	d0a9      	beq.n	800feca <__sflush_r+0x1a>
 800ff76:	0793      	lsls	r3, r2, #30
 800ff78:	680e      	ldr	r6, [r1, #0]
 800ff7a:	bf08      	it	eq
 800ff7c:	694b      	ldreq	r3, [r1, #20]
 800ff7e:	600f      	str	r7, [r1, #0]
 800ff80:	bf18      	it	ne
 800ff82:	2300      	movne	r3, #0
 800ff84:	eba6 0807 	sub.w	r8, r6, r7
 800ff88:	608b      	str	r3, [r1, #8]
 800ff8a:	f1b8 0f00 	cmp.w	r8, #0
 800ff8e:	dd9c      	ble.n	800feca <__sflush_r+0x1a>
 800ff90:	6a21      	ldr	r1, [r4, #32]
 800ff92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff94:	4643      	mov	r3, r8
 800ff96:	463a      	mov	r2, r7
 800ff98:	4628      	mov	r0, r5
 800ff9a:	47b0      	blx	r6
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	dc06      	bgt.n	800ffae <__sflush_r+0xfe>
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa6:	81a3      	strh	r3, [r4, #12]
 800ffa8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffac:	e78e      	b.n	800fecc <__sflush_r+0x1c>
 800ffae:	4407      	add	r7, r0
 800ffb0:	eba8 0800 	sub.w	r8, r8, r0
 800ffb4:	e7e9      	b.n	800ff8a <__sflush_r+0xda>
 800ffb6:	bf00      	nop
 800ffb8:	20400001 	.word	0x20400001

0800ffbc <_fflush_r>:
 800ffbc:	b538      	push	{r3, r4, r5, lr}
 800ffbe:	690b      	ldr	r3, [r1, #16]
 800ffc0:	4605      	mov	r5, r0
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	b913      	cbnz	r3, 800ffcc <_fflush_r+0x10>
 800ffc6:	2500      	movs	r5, #0
 800ffc8:	4628      	mov	r0, r5
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	b118      	cbz	r0, 800ffd6 <_fflush_r+0x1a>
 800ffce:	6983      	ldr	r3, [r0, #24]
 800ffd0:	b90b      	cbnz	r3, 800ffd6 <_fflush_r+0x1a>
 800ffd2:	f7ff f881 	bl	800f0d8 <__sinit>
 800ffd6:	4b14      	ldr	r3, [pc, #80]	; (8010028 <_fflush_r+0x6c>)
 800ffd8:	429c      	cmp	r4, r3
 800ffda:	d11b      	bne.n	8010014 <_fflush_r+0x58>
 800ffdc:	686c      	ldr	r4, [r5, #4]
 800ffde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0ef      	beq.n	800ffc6 <_fflush_r+0xa>
 800ffe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffe8:	07d0      	lsls	r0, r2, #31
 800ffea:	d404      	bmi.n	800fff6 <_fflush_r+0x3a>
 800ffec:	0599      	lsls	r1, r3, #22
 800ffee:	d402      	bmi.n	800fff6 <_fflush_r+0x3a>
 800fff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fff2:	f7ff f921 	bl	800f238 <__retarget_lock_acquire_recursive>
 800fff6:	4628      	mov	r0, r5
 800fff8:	4621      	mov	r1, r4
 800fffa:	f7ff ff59 	bl	800feb0 <__sflush_r>
 800fffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010000:	07da      	lsls	r2, r3, #31
 8010002:	4605      	mov	r5, r0
 8010004:	d4e0      	bmi.n	800ffc8 <_fflush_r+0xc>
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	059b      	lsls	r3, r3, #22
 801000a:	d4dd      	bmi.n	800ffc8 <_fflush_r+0xc>
 801000c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801000e:	f7ff f914 	bl	800f23a <__retarget_lock_release_recursive>
 8010012:	e7d9      	b.n	800ffc8 <_fflush_r+0xc>
 8010014:	4b05      	ldr	r3, [pc, #20]	; (801002c <_fflush_r+0x70>)
 8010016:	429c      	cmp	r4, r3
 8010018:	d101      	bne.n	801001e <_fflush_r+0x62>
 801001a:	68ac      	ldr	r4, [r5, #8]
 801001c:	e7df      	b.n	800ffde <_fflush_r+0x22>
 801001e:	4b04      	ldr	r3, [pc, #16]	; (8010030 <_fflush_r+0x74>)
 8010020:	429c      	cmp	r4, r3
 8010022:	bf08      	it	eq
 8010024:	68ec      	ldreq	r4, [r5, #12]
 8010026:	e7da      	b.n	800ffde <_fflush_r+0x22>
 8010028:	08012eac 	.word	0x08012eac
 801002c:	08012ecc 	.word	0x08012ecc
 8010030:	08012e8c 	.word	0x08012e8c

08010034 <_lseek_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d07      	ldr	r5, [pc, #28]	; (8010054 <_lseek_r+0x20>)
 8010038:	4604      	mov	r4, r0
 801003a:	4608      	mov	r0, r1
 801003c:	4611      	mov	r1, r2
 801003e:	2200      	movs	r2, #0
 8010040:	602a      	str	r2, [r5, #0]
 8010042:	461a      	mov	r2, r3
 8010044:	f7f0 fd78 	bl	8000b38 <_lseek>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_lseek_r+0x1e>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_lseek_r+0x1e>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	20008ad0 	.word	0x20008ad0

08010058 <__swhatbuf_r>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	460e      	mov	r6, r1
 801005c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010060:	2900      	cmp	r1, #0
 8010062:	b096      	sub	sp, #88	; 0x58
 8010064:	4614      	mov	r4, r2
 8010066:	461d      	mov	r5, r3
 8010068:	da07      	bge.n	801007a <__swhatbuf_r+0x22>
 801006a:	2300      	movs	r3, #0
 801006c:	602b      	str	r3, [r5, #0]
 801006e:	89b3      	ldrh	r3, [r6, #12]
 8010070:	061a      	lsls	r2, r3, #24
 8010072:	d410      	bmi.n	8010096 <__swhatbuf_r+0x3e>
 8010074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010078:	e00e      	b.n	8010098 <__swhatbuf_r+0x40>
 801007a:	466a      	mov	r2, sp
 801007c:	f000 f8d8 	bl	8010230 <_fstat_r>
 8010080:	2800      	cmp	r0, #0
 8010082:	dbf2      	blt.n	801006a <__swhatbuf_r+0x12>
 8010084:	9a01      	ldr	r2, [sp, #4]
 8010086:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801008a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801008e:	425a      	negs	r2, r3
 8010090:	415a      	adcs	r2, r3
 8010092:	602a      	str	r2, [r5, #0]
 8010094:	e7ee      	b.n	8010074 <__swhatbuf_r+0x1c>
 8010096:	2340      	movs	r3, #64	; 0x40
 8010098:	2000      	movs	r0, #0
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	b016      	add	sp, #88	; 0x58
 801009e:	bd70      	pop	{r4, r5, r6, pc}

080100a0 <__smakebuf_r>:
 80100a0:	898b      	ldrh	r3, [r1, #12]
 80100a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100a4:	079d      	lsls	r5, r3, #30
 80100a6:	4606      	mov	r6, r0
 80100a8:	460c      	mov	r4, r1
 80100aa:	d507      	bpl.n	80100bc <__smakebuf_r+0x1c>
 80100ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	6123      	str	r3, [r4, #16]
 80100b4:	2301      	movs	r3, #1
 80100b6:	6163      	str	r3, [r4, #20]
 80100b8:	b002      	add	sp, #8
 80100ba:	bd70      	pop	{r4, r5, r6, pc}
 80100bc:	ab01      	add	r3, sp, #4
 80100be:	466a      	mov	r2, sp
 80100c0:	f7ff ffca 	bl	8010058 <__swhatbuf_r>
 80100c4:	9900      	ldr	r1, [sp, #0]
 80100c6:	4605      	mov	r5, r0
 80100c8:	4630      	mov	r0, r6
 80100ca:	f7ff f90f 	bl	800f2ec <_malloc_r>
 80100ce:	b948      	cbnz	r0, 80100e4 <__smakebuf_r+0x44>
 80100d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100d4:	059a      	lsls	r2, r3, #22
 80100d6:	d4ef      	bmi.n	80100b8 <__smakebuf_r+0x18>
 80100d8:	f023 0303 	bic.w	r3, r3, #3
 80100dc:	f043 0302 	orr.w	r3, r3, #2
 80100e0:	81a3      	strh	r3, [r4, #12]
 80100e2:	e7e3      	b.n	80100ac <__smakebuf_r+0xc>
 80100e4:	4b0d      	ldr	r3, [pc, #52]	; (801011c <__smakebuf_r+0x7c>)
 80100e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80100e8:	89a3      	ldrh	r3, [r4, #12]
 80100ea:	6020      	str	r0, [r4, #0]
 80100ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100f0:	81a3      	strh	r3, [r4, #12]
 80100f2:	9b00      	ldr	r3, [sp, #0]
 80100f4:	6163      	str	r3, [r4, #20]
 80100f6:	9b01      	ldr	r3, [sp, #4]
 80100f8:	6120      	str	r0, [r4, #16]
 80100fa:	b15b      	cbz	r3, 8010114 <__smakebuf_r+0x74>
 80100fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010100:	4630      	mov	r0, r6
 8010102:	f000 f8a7 	bl	8010254 <_isatty_r>
 8010106:	b128      	cbz	r0, 8010114 <__smakebuf_r+0x74>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	f023 0303 	bic.w	r3, r3, #3
 801010e:	f043 0301 	orr.w	r3, r3, #1
 8010112:	81a3      	strh	r3, [r4, #12]
 8010114:	89a0      	ldrh	r0, [r4, #12]
 8010116:	4305      	orrs	r5, r0
 8010118:	81a5      	strh	r5, [r4, #12]
 801011a:	e7cd      	b.n	80100b8 <__smakebuf_r+0x18>
 801011c:	0800f071 	.word	0x0800f071

08010120 <__malloc_lock>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__malloc_lock+0x8>)
 8010122:	f7ff b889 	b.w	800f238 <__retarget_lock_acquire_recursive>
 8010126:	bf00      	nop
 8010128:	20008ad8 	.word	0x20008ad8

0801012c <__malloc_unlock>:
 801012c:	4801      	ldr	r0, [pc, #4]	; (8010134 <__malloc_unlock+0x8>)
 801012e:	f7ff b884 	b.w	800f23a <__retarget_lock_release_recursive>
 8010132:	bf00      	nop
 8010134:	20008ad8 	.word	0x20008ad8

08010138 <_realloc_r>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	4607      	mov	r7, r0
 801013c:	4614      	mov	r4, r2
 801013e:	460e      	mov	r6, r1
 8010140:	b921      	cbnz	r1, 801014c <_realloc_r+0x14>
 8010142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010146:	4611      	mov	r1, r2
 8010148:	f7ff b8d0 	b.w	800f2ec <_malloc_r>
 801014c:	b922      	cbnz	r2, 8010158 <_realloc_r+0x20>
 801014e:	f7ff f87d 	bl	800f24c <_free_r>
 8010152:	4625      	mov	r5, r4
 8010154:	4628      	mov	r0, r5
 8010156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010158:	f000 f88c 	bl	8010274 <_malloc_usable_size_r>
 801015c:	42a0      	cmp	r0, r4
 801015e:	d20f      	bcs.n	8010180 <_realloc_r+0x48>
 8010160:	4621      	mov	r1, r4
 8010162:	4638      	mov	r0, r7
 8010164:	f7ff f8c2 	bl	800f2ec <_malloc_r>
 8010168:	4605      	mov	r5, r0
 801016a:	2800      	cmp	r0, #0
 801016c:	d0f2      	beq.n	8010154 <_realloc_r+0x1c>
 801016e:	4631      	mov	r1, r6
 8010170:	4622      	mov	r2, r4
 8010172:	f7fe fe93 	bl	800ee9c <memcpy>
 8010176:	4631      	mov	r1, r6
 8010178:	4638      	mov	r0, r7
 801017a:	f7ff f867 	bl	800f24c <_free_r>
 801017e:	e7e9      	b.n	8010154 <_realloc_r+0x1c>
 8010180:	4635      	mov	r5, r6
 8010182:	e7e7      	b.n	8010154 <_realloc_r+0x1c>

08010184 <_read_r>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4d07      	ldr	r5, [pc, #28]	; (80101a4 <_read_r+0x20>)
 8010188:	4604      	mov	r4, r0
 801018a:	4608      	mov	r0, r1
 801018c:	4611      	mov	r1, r2
 801018e:	2200      	movs	r2, #0
 8010190:	602a      	str	r2, [r5, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	f7f0 fc70 	bl	8000a78 <_read>
 8010198:	1c43      	adds	r3, r0, #1
 801019a:	d102      	bne.n	80101a2 <_read_r+0x1e>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	b103      	cbz	r3, 80101a2 <_read_r+0x1e>
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	bd38      	pop	{r3, r4, r5, pc}
 80101a4:	20008ad0 	.word	0x20008ad0

080101a8 <_raise_r>:
 80101a8:	291f      	cmp	r1, #31
 80101aa:	b538      	push	{r3, r4, r5, lr}
 80101ac:	4604      	mov	r4, r0
 80101ae:	460d      	mov	r5, r1
 80101b0:	d904      	bls.n	80101bc <_raise_r+0x14>
 80101b2:	2316      	movs	r3, #22
 80101b4:	6003      	str	r3, [r0, #0]
 80101b6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ba:	bd38      	pop	{r3, r4, r5, pc}
 80101bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101be:	b112      	cbz	r2, 80101c6 <_raise_r+0x1e>
 80101c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101c4:	b94b      	cbnz	r3, 80101da <_raise_r+0x32>
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 f830 	bl	801022c <_getpid_r>
 80101cc:	462a      	mov	r2, r5
 80101ce:	4601      	mov	r1, r0
 80101d0:	4620      	mov	r0, r4
 80101d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101d6:	f000 b817 	b.w	8010208 <_kill_r>
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d00a      	beq.n	80101f4 <_raise_r+0x4c>
 80101de:	1c59      	adds	r1, r3, #1
 80101e0:	d103      	bne.n	80101ea <_raise_r+0x42>
 80101e2:	2316      	movs	r3, #22
 80101e4:	6003      	str	r3, [r0, #0]
 80101e6:	2001      	movs	r0, #1
 80101e8:	e7e7      	b.n	80101ba <_raise_r+0x12>
 80101ea:	2400      	movs	r4, #0
 80101ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101f0:	4628      	mov	r0, r5
 80101f2:	4798      	blx	r3
 80101f4:	2000      	movs	r0, #0
 80101f6:	e7e0      	b.n	80101ba <_raise_r+0x12>

080101f8 <raise>:
 80101f8:	4b02      	ldr	r3, [pc, #8]	; (8010204 <raise+0xc>)
 80101fa:	4601      	mov	r1, r0
 80101fc:	6818      	ldr	r0, [r3, #0]
 80101fe:	f7ff bfd3 	b.w	80101a8 <_raise_r>
 8010202:	bf00      	nop
 8010204:	20000014 	.word	0x20000014

08010208 <_kill_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d07      	ldr	r5, [pc, #28]	; (8010228 <_kill_r+0x20>)
 801020c:	2300      	movs	r3, #0
 801020e:	4604      	mov	r4, r0
 8010210:	4608      	mov	r0, r1
 8010212:	4611      	mov	r1, r2
 8010214:	602b      	str	r3, [r5, #0]
 8010216:	f7f0 fc13 	bl	8000a40 <_kill>
 801021a:	1c43      	adds	r3, r0, #1
 801021c:	d102      	bne.n	8010224 <_kill_r+0x1c>
 801021e:	682b      	ldr	r3, [r5, #0]
 8010220:	b103      	cbz	r3, 8010224 <_kill_r+0x1c>
 8010222:	6023      	str	r3, [r4, #0]
 8010224:	bd38      	pop	{r3, r4, r5, pc}
 8010226:	bf00      	nop
 8010228:	20008ad0 	.word	0x20008ad0

0801022c <_getpid_r>:
 801022c:	f7f0 bc00 	b.w	8000a30 <_getpid>

08010230 <_fstat_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d07      	ldr	r5, [pc, #28]	; (8010250 <_fstat_r+0x20>)
 8010234:	2300      	movs	r3, #0
 8010236:	4604      	mov	r4, r0
 8010238:	4608      	mov	r0, r1
 801023a:	4611      	mov	r1, r2
 801023c:	602b      	str	r3, [r5, #0]
 801023e:	f7f0 fc60 	bl	8000b02 <_fstat>
 8010242:	1c43      	adds	r3, r0, #1
 8010244:	d102      	bne.n	801024c <_fstat_r+0x1c>
 8010246:	682b      	ldr	r3, [r5, #0]
 8010248:	b103      	cbz	r3, 801024c <_fstat_r+0x1c>
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	bf00      	nop
 8010250:	20008ad0 	.word	0x20008ad0

08010254 <_isatty_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4d06      	ldr	r5, [pc, #24]	; (8010270 <_isatty_r+0x1c>)
 8010258:	2300      	movs	r3, #0
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	f7f0 fc5f 	bl	8000b22 <_isatty>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_isatty_r+0x1a>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_isatty_r+0x1a>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20008ad0 	.word	0x20008ad0

08010274 <_malloc_usable_size_r>:
 8010274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010278:	1f18      	subs	r0, r3, #4
 801027a:	2b00      	cmp	r3, #0
 801027c:	bfbc      	itt	lt
 801027e:	580b      	ldrlt	r3, [r1, r0]
 8010280:	18c0      	addlt	r0, r0, r3
 8010282:	4770      	bx	lr

08010284 <_init>:
 8010284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010286:	bf00      	nop
 8010288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028a:	bc08      	pop	{r3}
 801028c:	469e      	mov	lr, r3
 801028e:	4770      	bx	lr

08010290 <_fini>:
 8010290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010292:	bf00      	nop
 8010294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010296:	bc08      	pop	{r3}
 8010298:	469e      	mov	lr, r3
 801029a:	4770      	bx	lr
