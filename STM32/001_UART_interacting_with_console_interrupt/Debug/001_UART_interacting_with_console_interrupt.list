
001_UART_interacting_with_console_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a2c  08003a2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a34  08003a34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000084  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1b6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017fd  00000000  00000000  0002a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0002ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0002c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203bc  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c4c  00000000  00000000  0004cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3026  00000000  00000000  000557a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001187ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f88  00000000  00000000  00118824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800379c 	.word	0x0800379c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800379c 	.word	0x0800379c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
void performCriticalTasks(void);
void printWelcomeMessage(void);
uint8_t processUserInput(int8_t opt);
int8_t readUserInput(void);

int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  uint8_t opt = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]

  /* Reset of all peripherals, Initializes the Flash interface and the SysTick. */
  HAL_Init();
 8000582:	f000 fb31 	bl	8000be8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f913 	bl	80007b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9a7 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f97b 	bl	8000888 <MX_USART2_UART_Init>

  /* Enable USART2 interrupt */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2026      	movs	r0, #38	; 0x26
 8000598:	f000 fc97 	bl	8000eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800059c:	2026      	movs	r0, #38	; 0x26
 800059e:	f000 fcb0 	bl	8000f02 <HAL_NVIC_EnableIRQ>

printMessage:

  printWelcomeMessage();
 80005a2:	f000 f8c3 	bl	800072c <printWelcomeMessage>

  while (1)  {
    opt = readUserInput();
 80005a6:	f000 f811 	bl	80005cc <readUserInput>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    if(opt > 0) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d008      	beq.n	80005c6 <main+0x4e>
      processUserInput(opt);
 80005b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f82b 	bl	8000614 <processUserInput>
      if(opt == 3)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d100      	bne.n	80005c6 <main+0x4e>
        goto printMessage;
 80005c4:	e7ed      	b.n	80005a2 <main+0x2a>
    }
    performCriticalTasks();
 80005c6:	f000 f8a9 	bl	800071c <performCriticalTasks>
    opt = readUserInput();
 80005ca:	e7ec      	b.n	80005a6 <main+0x2e>

080005cc <readUserInput>:
  }
}

int8_t readUserInput(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  int8_t retVal = -1;
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	71fb      	strb	r3, [r7, #7]

  if(UartReady == SET) {
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <readUserInput+0x3c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d10c      	bne.n	80005fa <readUserInput+0x2e>
    UartReady = RESET;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <readUserInput+0x3c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	4908      	ldr	r1, [pc, #32]	; (800060c <readUserInput+0x40>)
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <readUserInput+0x44>)
 80005ec:	f001 fcdd 	bl	8001faa <HAL_UART_Receive_IT>
    retVal = atoi(readBuf);
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <readUserInput+0x40>)
 80005f2:	f002 fbe1 	bl	8002db8 <atoi>
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  }
  return retVal;
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	200000e0 	.word	0x200000e0
 8000610:	2000009c 	.word	0x2000009c

08000614 <processUserInput>:


uint8_t processUserInput(int8_t opt) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  char msg[30];

  if(!(opt >=1 && opt <= 3))
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	dd03      	ble.n	800062e <processUserInput+0x1a>
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b03      	cmp	r3, #3
 800062c:	dd01      	ble.n	8000632 <processUserInput+0x1e>
    return 0;
 800062e:	2300      	movs	r3, #0
 8000630:	e04f      	b.n	80006d2 <processUserInput+0xbe>

  sprintf(msg, "%d", opt);
 8000632:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4928      	ldr	r1, [pc, #160]	; (80006dc <processUserInput+0xc8>)
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fbf1 	bl	8002e24 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fdc2 	bl	80001d0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f107 0108 	add.w	r1, r7, #8
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <processUserInput+0xcc>)
 800065a:	f001 fbcf 	bl	8001dfc <HAL_UART_Transmit>

  switch(opt) {
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d02b      	beq.n	80006be <processUserInput+0xaa>
 8000666:	2b03      	cmp	r3, #3
 8000668:	dc2b      	bgt.n	80006c2 <processUserInput+0xae>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d002      	beq.n	8000674 <processUserInput+0x60>
 800066e:	2b02      	cmp	r3, #2
 8000670:	d006      	beq.n	8000680 <processUserInput+0x6c>
 8000672:	e026      	b.n	80006c2 <processUserInput+0xae>
  case 1:
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <processUserInput+0xd0>)
 800067a:	f000 febc 	bl	80013f6 <HAL_GPIO_TogglePin>
    break;
 800067e:	e020      	b.n	80006c2 <processUserInput+0xae>
  case 2:
    sprintf(msg, "\r\nUSER BUTTON status: %s",
        HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET ? "RELEASED" : "PRESSED");
 8000680:	2101      	movs	r1, #1
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <processUserInput+0xd4>)
 8000684:	f000 fe86 	bl	8001394 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
    sprintf(msg, "\r\nUSER BUTTON status: %s",
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <processUserInput+0x7e>
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <processUserInput+0xd8>)
 8000690:	e000      	b.n	8000694 <processUserInput+0x80>
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <processUserInput+0xdc>)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4916      	ldr	r1, [pc, #88]	; (80006f4 <processUserInput+0xe0>)
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fbc2 	bl	8002e24 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <processUserInput+0xcc>)
 80006b8:	f001 fba0 	bl	8001dfc <HAL_UART_Transmit>
    break;
 80006bc:	e001      	b.n	80006c2 <processUserInput+0xae>
  case 3:
    return 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	e007      	b.n	80006d2 <processUserInput+0xbe>
  };

  HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2204      	movs	r2, #4
 80006c8:	490b      	ldr	r1, [pc, #44]	; (80006f8 <processUserInput+0xe4>)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <processUserInput+0xcc>)
 80006cc:	f001 fb96 	bl	8001dfc <HAL_UART_Transmit>
  return 1;
 80006d0:	2301      	movs	r3, #1
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08003898 	.word	0x08003898
 80006e0:	2000009c 	.word	0x2000009c
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020000 	.word	0x40020000
 80006ec:	0800389c 	.word	0x0800389c
 80006f0:	080038a8 	.word	0x080038a8
 80006f4:	080038b0 	.word	0x080038b0
 80006f8:	08003890 	.word	0x08003890

080006fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <HAL_UART_RxCpltCallback+0x1c>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000000 	.word	0x20000000

0800071c <performCriticalTasks>:

void performCriticalTasks(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	; 0x64
 8000722:	f000 fad3 	bl	8000ccc <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <printWelcomeMessage>:

void printWelcomeMessage(void) {
 800072c:	b5b0      	push	{r4, r5, r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  char *strings[] = {"\033[0;0H", "\033[2J", WELCOME_MSG, MAIN_MENU, PROMPT};
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <printWelcomeMessage+0x7c>)
 8000734:	463c      	mov	r4, r7
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	682b      	ldr	r3, [r5, #0]
 800073e:	6023      	str	r3, [r4, #0]

  for (uint8_t i = 0; i < 5; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	75fb      	strb	r3, [r7, #23]
 8000744:	e027      	b.n	8000796 <printWelcomeMessage+0x6a>
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)strings[i], strlen(strings[i]));
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	f107 0218 	add.w	r2, r7, #24
 800074e:	4413      	add	r3, r2
 8000750:	f853 4c18 	ldr.w	r4, [r3, #-24]
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	f107 0218 	add.w	r2, r7, #24
 800075c:	4413      	add	r3, r2
 800075e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd34 	bl	80001d0 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29b      	uxth	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	4621      	mov	r1, r4
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <printWelcomeMessage+0x80>)
 8000772:	f001 fbd5 	bl	8001f20 <HAL_UART_Transmit_IT>
    while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX_RX);
 8000776:	bf00      	nop
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <printWelcomeMessage+0x80>)
 800077a:	f001 fef5 	bl	8002568 <HAL_UART_GetState>
 800077e:	4603      	mov	r3, r0
 8000780:	2b21      	cmp	r3, #33	; 0x21
 8000782:	d0f9      	beq.n	8000778 <printWelcomeMessage+0x4c>
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <printWelcomeMessage+0x80>)
 8000786:	f001 feef 	bl	8002568 <HAL_UART_GetState>
 800078a:	4603      	mov	r3, r0
 800078c:	2b23      	cmp	r3, #35	; 0x23
 800078e:	d0f3      	beq.n	8000778 <printWelcomeMessage+0x4c>
  for (uint8_t i = 0; i < 5; i++) {
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	3301      	adds	r3, #1
 8000794:	75fb      	strb	r3, [r7, #23]
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	2b04      	cmp	r3, #4
 800079a:	d9d4      	bls.n	8000746 <printWelcomeMessage+0x1a>
  }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bdb0      	pop	{r4, r5, r7, pc}
 80007a6:	bf00      	nop
 80007a8:	080038cc 	.word	0x080038cc
 80007ac:	2000009c 	.word	0x2000009c

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fb28 	bl	8002e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a28      	ldr	r2, [pc, #160]	; (8000880 <SystemClock_Config+0xd0>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b26      	ldr	r3, [pc, #152]	; (8000880 <SystemClock_Config+0xd0>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <SystemClock_Config+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a22      	ldr	r2, [pc, #136]	; (8000884 <SystemClock_Config+0xd4>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <SystemClock_Config+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082c:	2307      	movs	r3, #7
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fdf9 	bl	800142c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 f8ac 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f85a 	bl	800191c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 f895 	bl	800099c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000872:	f001 f939 	bl	8001ae8 <HAL_RCC_EnableCSS>
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART2_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f001 fa4f 	bl	8001d62 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f867 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000009c 	.word	0x2000009c
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_GPIO_Init+0xb4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a25      	ldr	r2, [pc, #148]	; (8000990 <MX_GPIO_Init+0xb4>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_GPIO_Init+0xb4>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_GPIO_Init+0xb4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_GPIO_Init+0xb8>)
 800094e:	f000 fd39 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_GPIO_Init+0xbc>)
 8000966:	f000 fb79 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0xb8>)
 8000984:	f000 fb6a 	bl	800105c <HAL_GPIO_Init>

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020c00 	.word	0x40020c00
 8000998:	40020000 	.word	0x40020000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f000 fa64 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_UART_MspInit+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d133      	bne.n	8000a82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_UART_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_UART_MspInit+0x9c>)
 8000a6e:	f000 faf5 	bl	800105c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2026      	movs	r0, #38	; 0x26
 8000a78:	f000 fa27 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7c:	2026      	movs	r0, #38	; 0x26
 8000a7e:	f000 fa40 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a9c:	f001 f946 	bl	8001d2c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x8>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 f8d0 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART2_IRQHandler+0x10>)
 8000af6:	f001 fa89 	bl	800200c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000009c 	.word	0x2000009c

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f002 f944 	bl	8002dc0 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20020000 	.word	0x20020000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000090 	.word	0x20000090
 8000b6c:	200000f8 	.word	0x200000f8

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f002 f903 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fcd7 	bl	8000578 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd8:	08003a3c 	.word	0x08003a3c
  ldr r2, =_sbss
 8000bdc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be0:	200000f8 	.word	0x200000f8

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f94f 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fec4 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f967 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f92f 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000004 	.word	0x20000004
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	200000e4 	.word	0x200000e4

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000e4 	.word	0x200000e4

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000000c 	.word	0x2000000c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff feb6 	bl	8000cb4 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d008      	beq.n	8000f68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e052      	b.n	800100e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0216 	bic.w	r2, r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_DMA_Abort+0x62>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0208 	bic.w	r2, r2, #8
 8000fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb8:	e013      	b.n	8000fe2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fba:	f7ff fe7b 	bl	8000cb4 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d90c      	bls.n	8000fe2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e015      	b.n	800100e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e4      	bne.n	8000fba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	223f      	movs	r2, #63	; 0x3f
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d004      	beq.n	8001034 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e00c      	b.n	800104e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e16b      	b.n	8001350 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 815a 	bne.w	800134a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80b4 	beq.w	800134a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b60      	ldr	r3, [pc, #384]	; (8001368 <HAL_GPIO_Init+0x30c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a5f      	ldr	r2, [pc, #380]	; (8001368 <HAL_GPIO_Init+0x30c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_GPIO_Init+0x30c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a5b      	ldr	r2, [pc, #364]	; (800136c <HAL_GPIO_Init+0x310>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x314>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x226>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x318>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x222>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_GPIO_Init+0x31c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x21e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x21a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x324>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x216>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x328>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x212>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x32c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x330>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x20a>
 8001262:	2307      	movs	r3, #7
 8001264:	e00e      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001266:	2308      	movs	r3, #8
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800126a:	2306      	movs	r3, #6
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x310>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f0:	4a27      	ldr	r2, [pc, #156]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x334>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_GPIO_Init+0x334>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_GPIO_Init+0x334>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae90 	bls.w	8001078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001408:	887a      	ldrh	r2, [r7, #2]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	041a      	lsls	r2, r3, #16
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43d9      	mvns	r1, r3
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	400b      	ands	r3, r1
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e264      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144a:	4ba3      	ldr	r3, [pc, #652]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00c      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4ba0      	ldr	r3, [pc, #640]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b9d      	ldr	r3, [pc, #628]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b99      	ldr	r3, [pc, #612]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e23f      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b91      	ldr	r3, [pc, #580]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8a      	ldr	r2, [pc, #552]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a87      	ldr	r2, [pc, #540]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b84      	ldr	r3, [pc, #528]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a83      	ldr	r2, [pc, #524]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fbe6 	bl	8000cb4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fbe2 	bl	8000cb4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e204      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fbd2 	bl	8000cb4 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fbce 	bl	8000cb4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1f0      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	4b6c      	ldr	r3, [pc, #432]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001542:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1c4      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4952      	ldr	r1, [pc, #328]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e03a      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x2b0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb87 	bl	8000cb4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb83 	bl	8000cb4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a5      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4940      	ldr	r1, [pc, #256]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_OscConfig+0x2b0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb66 	bl	8000cb4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fb62 	bl	8000cb4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e184      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d030      	beq.n	8001678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_OscConfig+0x2b4>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb46 	bl	8000cb4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fb42 	bl	8000cb4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e164      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
 800164a:	e015      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_OscConfig+0x2b4>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb2f 	bl	8000cb4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fb2b 	bl	8000cb4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e14d      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a0 	beq.w	80017c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x2b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d121      	bne.n	8001706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_RCC_OscConfig+0x2b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_RCC_OscConfig+0x2b8>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff faf1 	bl	8000cb4 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e011      	b.n	80016fa <HAL_RCC_OscConfig+0x2ce>
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470000 	.word	0x42470000
 80016e0:	42470e80 	.word	0x42470e80
 80016e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff fae4 	bl	8000cb4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e106      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <HAL_RCC_OscConfig+0x4e4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x2f0>
 800170e:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a80      	ldr	r2, [pc, #512]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	e01c      	b.n	8001756 <HAL_RCC_OscConfig+0x32a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x312>
 8001724:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b78      	ldr	r3, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a77      	ldr	r2, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x32a>
 800173e:	4b75      	ldr	r3, [pc, #468]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	4a74      	ldr	r2, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6713      	str	r3, [r2, #112]	; 0x70
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff faa9 	bl	8000cb4 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff faa5 	bl	8000cb4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0c5      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCC_OscConfig+0x33a>
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fa93 	bl	8000cb4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fa8f 	bl	8000cb4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0af      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4b56      	ldr	r3, [pc, #344]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 809b 	beq.w	8001906 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d05c      	beq.n	8001896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d141      	bne.n	8001868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x4ec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fa63 	bl	8000cb4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fa5f 	bl	8000cb4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e081      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001804:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	019b      	lsls	r3, r3, #6
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	3b01      	subs	r3, #1
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	061b      	lsls	r3, r3, #24
 8001834:	4937      	ldr	r1, [pc, #220]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x4ec>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fa38 	bl	8000cb4 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa34 	bl	8000cb4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e056      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x41c>
 8001866:	e04e      	b.n	8001906 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x4ec>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fa21 	bl	8000cb4 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff fa1d 	bl	8000cb4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e03f      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x44a>
 8001894:	e037      	b.n	8001906 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e032      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d028      	beq.n	8001902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d121      	bne.n	8001902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d11a      	bne.n	8001902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018da:	4293      	cmp	r3, r2
 80018dc:	d111      	bne.n	8001902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	3b01      	subs	r3, #1
 80018ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40007000 	.word	0x40007000
 8001914:	40023800 	.word	0x40023800
 8001918:	42470060 	.word	0x42470060

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cc      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d044      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b3f      	ldr	r3, [pc, #252]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e067      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff f952 	bl	8000cb4 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f94e 	bl	8000cb4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d20c      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f82d 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8b2 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	080038e0 	.word	0x080038e0
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_EnableCSS+0x14>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	4247004c 	.word	0x4247004c

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80bd 	bhi.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e0b7      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b36:	60bb      	str	r3, [r7, #8]
       break;
 8001b38:	e0b7      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b3c:	60bb      	str	r3, [r7, #8]
      break;
 8001b3e:	e0b4      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d04d      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	ea02 0800 	and.w	r8, r2, r0
 8001b6e:	ea03 0901 	and.w	r9, r3, r1
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	014b      	lsls	r3, r1, #5
 8001b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b84:	0142      	lsls	r2, r0, #5
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b8e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	018b      	lsls	r3, r1, #6
 8001b9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba0:	0182      	lsls	r2, r0, #6
 8001ba2:	1a12      	subs	r2, r2, r0
 8001ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f04f 0100 	mov.w	r1, #0
 8001bb0:	00d9      	lsls	r1, r3, #3
 8001bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb6:	00d0      	lsls	r0, r2, #3
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	eb12 0208 	adds.w	r2, r2, r8
 8001bc0:	eb43 0309 	adc.w	r3, r3, r9
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0259      	lsls	r1, r3, #9
 8001bce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bd2:	0250      	lsls	r0, r2, #9
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f7fe fb4c 	bl	8000280 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e04a      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	ea02 0400 	and.w	r4, r2, r0
 8001c0a:	ea03 0501 	and.w	r5, r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	014b      	lsls	r3, r1, #5
 8001c1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c20:	0142      	lsls	r2, r0, #5
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	1b00      	subs	r0, r0, r4
 8001c28:	eb61 0105 	sbc.w	r1, r1, r5
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	018b      	lsls	r3, r1, #6
 8001c36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c3a:	0182      	lsls	r2, r0, #6
 8001c3c:	1a12      	subs	r2, r2, r0
 8001c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	00d9      	lsls	r1, r3, #3
 8001c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c50:	00d0      	lsls	r0, r2, #3
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	1912      	adds	r2, r2, r4
 8001c58:	eb45 0303 	adc.w	r3, r5, r3
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0299      	lsls	r1, r3, #10
 8001c66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c6a:	0290      	lsls	r0, r2, #10
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	f7fe fb00 	bl	8000280 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
      break;
 8001ca2:	e002      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ca6:	60bb      	str	r3, [r7, #8]
      break;
 8001ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001caa:	68bb      	ldr	r3, [r7, #8]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	080038f0 	.word	0x080038f0

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffdc 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0b5b      	lsrs	r3, r3, #13
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4903      	ldr	r1, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	080038f0 	.word	0x080038f0

08001d2c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_NMI_IRQHandler+0x20>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d104      	bne.n	8001d46 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001d3c:	f000 f80a 	bl	8001d54 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	701a      	strb	r2, [r3, #0]
  }
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	4002380e 	.word	0x4002380e

08001d54 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e03f      	b.n	8001df4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d106      	bne.n	8001d8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fe35 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2224      	movs	r2, #36	; 0x24
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fe3e 	bl	8002a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d17c      	bne.n	8001f16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_UART_Transmit+0x2c>
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e075      	b.n	8001f18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Transmit+0x3e>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e06e      	b.n	8001f18 <HAL_UART_Transmit+0x11c>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2221      	movs	r2, #33	; 0x21
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e50:	f7fe ff30 	bl	8000cb4 <HAL_GetTick>
 8001e54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d108      	bne.n	8001e7e <HAL_UART_Transmit+0x82>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e003      	b.n	8001e86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e8e:	e02a      	b.n	8001ee6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb82 	bl	80025a4 <UART_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e036      	b.n	8001f18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ebe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e007      	b.n	8001ed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1cf      	bne.n	8001e90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb52 	bl	80025a4 <UART_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e006      	b.n	8001f18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d130      	bne.n	8001f9c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_UART_Transmit_IT+0x26>
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e029      	b.n	8001f9e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_UART_Transmit_IT+0x38>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e022      	b.n	8001f9e <HAL_UART_Transmit_IT+0x7e>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	88fa      	ldrh	r2, [r7, #6]
 8001f6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2221      	movs	r2, #33	; 0x21
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d11d      	bne.n	8002000 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_UART_Receive_IT+0x26>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e016      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Receive_IT+0x38>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e00f      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fb42 	bl	8002680 <UART_Start_Receive_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e000      	b.n	8002002 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0ba      	sub	sp, #232	; 0xe8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800203e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800204a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_UART_IRQHandler+0x66>
 800205e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fc21 	bl	80028b2 <UART_Receive_IT>
      return;
 8002070:	e256      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80de 	beq.w	8002238 <HAL_UART_IRQHandler+0x22c>
 800207c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80d1 	beq.w	8002238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0xae>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_UART_IRQHandler+0xd2>
 80020c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_UART_IRQHandler+0xf6>
 80020ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <HAL_UART_IRQHandler+0x126>
 800210e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800211a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0208 	orr.w	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 81ed 	beq.w	8002516 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800213c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x14e>
 8002148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fbac 	bl	80028b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_UART_IRQHandler+0x17a>
 800217e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04f      	beq.n	8002226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fab4 	bl	80026f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d141      	bne.n	800221e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3314      	adds	r3, #20
 80021a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a8:	e853 3f00 	ldrex	r3, [r3]
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3314      	adds	r3, #20
 80021c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1d9      	bne.n	800219a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d013      	beq.n	8002216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	4a7d      	ldr	r2, [pc, #500]	; (80023e8 <HAL_UART_IRQHandler+0x3dc>)
 80021f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe ff0b 	bl	8001016 <HAL_DMA_Abort_IT>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002210:	4610      	mov	r0, r2
 8002212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002214:	e00e      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f990 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221c:	e00a      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f98c 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002224:	e006      	b.n	8002234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f988 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002232:	e170      	b.n	8002516 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002234:	bf00      	nop
    return;
 8002236:	e16e      	b.n	8002516 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 814a 	bne.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8143 	beq.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 813c 	beq.w	80024d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	f040 80b4 	bne.w	80023ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8140 	beq.w	800251a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800229e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022a2:	429a      	cmp	r2, r3
 80022a4:	f080 8139 	bcs.w	800251a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	f000 8088 	beq.w	80023ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1d9      	bne.n	80022be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800231a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3314      	adds	r3, #20
 800232a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800232e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002332:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002336:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800233a:	e841 2300 	strex	r3, r2, [r1]
 800233e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e1      	bne.n	800230a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3314      	adds	r3, #20
 8002366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800236a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800236c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002372:	e841 2300 	strex	r3, r2, [r1]
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e3      	bne.n	8002346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	e853 3f00 	ldrex	r3, [r3]
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800239c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239e:	f023 0310 	bic.w	r3, r3, #16
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80023b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e3      	bne.n	800238c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fdb4 	bl	8000f36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8b6 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e4:	e099      	b.n	800251a <HAL_UART_IRQHandler+0x50e>
 80023e6:	bf00      	nop
 80023e8:	080027bb 	.word	0x080027bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808b 	beq.w	800251e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8086 	beq.w	800251e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002436:	647a      	str	r2, [r7, #68]	; 0x44
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800243c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e3      	bne.n	8002412 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	623b      	str	r3, [r7, #32]
   return(result);
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800246e:	633a      	str	r2, [r7, #48]	; 0x30
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60fb      	str	r3, [r7, #12]
   return(result);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	617b      	str	r3, [r7, #20]
   return(result);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e3      	bne.n	8002490 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f83e 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024d4:	e023      	b.n	800251e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_UART_IRQHandler+0x4ea>
 80024e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f977 	bl	80027e2 <UART_Transmit_IT>
    return;
 80024f4:	e014      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <HAL_UART_IRQHandler+0x514>
 8002502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9b7 	bl	8002882 <UART_EndTransmit_IT>
    return;
 8002514:	e004      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
    return;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
      return;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <HAL_UART_IRQHandler+0x514>
      return;
 800251e:	bf00      	nop
  }
}
 8002520:	37e8      	adds	r7, #232	; 0xe8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop

08002528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002588:	b2db      	uxtb	r3, r3
 800258a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4313      	orrs	r3, r2
 8002596:	b2db      	uxtb	r3, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b090      	sub	sp, #64	; 0x40
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b4:	e050      	b.n	8002658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d04c      	beq.n	8002658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025c4:	f7fe fb76 	bl	8000cb4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d241      	bcs.n	8002658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	e853 3f00 	ldrex	r3, [r3]
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f4:	637a      	str	r2, [r7, #52]	; 0x34
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e5      	bne.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	e853 3f00 	ldrex	r3, [r3]
 8002616:	613b      	str	r3, [r7, #16]
   return(result);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002628:	623a      	str	r2, [r7, #32]
 800262a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262c:	69f9      	ldr	r1, [r7, #28]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	e841 2300 	strex	r3, r2, [r1]
 8002634:	61bb      	str	r3, [r7, #24]
   return(result);
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e5      	bne.n	8002608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e00f      	b.n	8002678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	429a      	cmp	r2, r3
 8002674:	d09f      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3740      	adds	r7, #64	; 0x40
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2222      	movs	r2, #34	; 0x22
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b095      	sub	sp, #84	; 0x54
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271c:	643a      	str	r2, [r7, #64]	; 0x40
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e5      	bne.n	80026fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002758:	e841 2300 	strex	r3, r2, [r1]
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	60bb      	str	r3, [r7, #8]
   return(result);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f023 0310 	bic.w	r3, r3, #16
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800278c:	61ba      	str	r2, [r7, #24]
 800278e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	613b      	str	r3, [r7, #16]
   return(result);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027ae:	bf00      	nop
 80027b0:	3754      	adds	r7, #84	; 0x54
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff feb1 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b21      	cmp	r3, #33	; 0x21
 80027f4:	d13e      	bne.n	8002874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	d114      	bne.n	800282a <UART_Transmit_IT+0x48>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d110      	bne.n	800282a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]
 8002828:	e008      	b.n	800283c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6211      	str	r1, [r2, #32]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe40 	bl	8002528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b08c      	sub	sp, #48	; 0x30
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b22      	cmp	r3, #34	; 0x22
 80028c4:	f040 80ab 	bne.w	8002a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d0:	d117      	bne.n	8002902 <UART_Receive_IT+0x50>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d113      	bne.n	8002902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002900:	e026      	b.n	8002950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d007      	beq.n	8002926 <UART_Receive_IT+0x74>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <UART_Receive_IT+0x82>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e008      	b.n	8002946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002940:	b2da      	uxtb	r2, r3
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4619      	mov	r1, r3
 800295e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002960:	2b00      	cmp	r3, #0
 8002962:	d15a      	bne.n	8002a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d135      	bne.n	8002a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	330c      	adds	r3, #12
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f023 0310 	bic.w	r3, r3, #16
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	623a      	str	r2, [r7, #32]
 80029cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d10a      	bne.n	8002a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fda1 	bl	8002550 <HAL_UARTEx_RxEventCallback>
 8002a0e:	e002      	b.n	8002a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fe73 	bl	80006fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e002      	b.n	8002a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3730      	adds	r7, #48	; 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	b09f      	sub	sp, #124	; 0x7c
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	68d9      	ldr	r1, [r3, #12]
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	ea40 0301 	orr.w	r3, r0, r1
 8002a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a6c:	f021 010c 	bic.w	r1, r1, #12
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a76:	430b      	orrs	r3, r1
 8002a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	6999      	ldr	r1, [r3, #24]
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	ea40 0301 	orr.w	r3, r0, r1
 8002a90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4bc5      	ldr	r3, [pc, #788]	; (8002dac <UART_SetConfig+0x384>)
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d004      	beq.n	8002aa6 <UART_SetConfig+0x7e>
 8002a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4bc3      	ldr	r3, [pc, #780]	; (8002db0 <UART_SetConfig+0x388>)
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d103      	bne.n	8002aae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa6:	f7ff f92d 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002aaa:	6778      	str	r0, [r7, #116]	; 0x74
 8002aac:	e002      	b.n	8002ab4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7ff f915 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002ab2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002abc:	f040 80b6 	bne.w	8002c2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	f04f 0500 	mov.w	r5, #0
 8002ac8:	4622      	mov	r2, r4
 8002aca:	462b      	mov	r3, r5
 8002acc:	1891      	adds	r1, r2, r2
 8002ace:	6439      	str	r1, [r7, #64]	; 0x40
 8002ad0:	415b      	adcs	r3, r3
 8002ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad8:	1912      	adds	r2, r2, r4
 8002ada:	eb45 0303 	adc.w	r3, r5, r3
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	00d9      	lsls	r1, r3, #3
 8002ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aec:	00d0      	lsls	r0, r2, #3
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	1911      	adds	r1, r2, r4
 8002af4:	6639      	str	r1, [r7, #96]	; 0x60
 8002af6:	416b      	adcs	r3, r5
 8002af8:	667b      	str	r3, [r7, #100]	; 0x64
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b14:	f7fd fbb4 	bl	8000280 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4ba5      	ldr	r3, [pc, #660]	; (8002db4 <UART_SetConfig+0x38c>)
 8002b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	011e      	lsls	r6, r3, #4
 8002b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b28:	461c      	mov	r4, r3
 8002b2a:	f04f 0500 	mov.w	r5, #0
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	6339      	str	r1, [r7, #48]	; 0x30
 8002b36:	415b      	adcs	r3, r3
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b3e:	1912      	adds	r2, r2, r4
 8002b40:	eb45 0303 	adc.w	r3, r5, r3
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	00d9      	lsls	r1, r3, #3
 8002b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b52:	00d0      	lsls	r0, r2, #3
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1911      	adds	r1, r2, r4
 8002b5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b5c:	416b      	adcs	r3, r5
 8002b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002b7a:	f7fd fb81 	bl	8000280 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <UART_SetConfig+0x38c>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a87      	ldr	r2, [pc, #540]	; (8002db4 <UART_SetConfig+0x38c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ba4:	441e      	add	r6, r3
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	1894      	adds	r4, r2, r2
 8002bb4:	623c      	str	r4, [r7, #32]
 8002bb6:	415b      	adcs	r3, r3
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bbe:	1812      	adds	r2, r2, r0
 8002bc0:	eb41 0303 	adc.w	r3, r1, r3
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	f04f 0500 	mov.w	r5, #0
 8002bcc:	00dd      	lsls	r5, r3, #3
 8002bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bd2:	00d4      	lsls	r4, r2, #3
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	1814      	adds	r4, r2, r0
 8002bda:	653c      	str	r4, [r7, #80]	; 0x50
 8002bdc:	414b      	adcs	r3, r1
 8002bde:	657b      	str	r3, [r7, #84]	; 0x54
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	1891      	adds	r1, r2, r2
 8002bec:	61b9      	str	r1, [r7, #24]
 8002bee:	415b      	adcs	r3, r3
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002bfa:	f7fd fb41 	bl	8000280 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4b6c      	ldr	r3, [pc, #432]	; (8002db4 <UART_SetConfig+0x38c>)
 8002c04:	fba3 1302 	umull	r1, r3, r3, r2
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	2164      	movs	r1, #100	; 0x64
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	3332      	adds	r3, #50	; 0x32
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <UART_SetConfig+0x38c>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	f003 0207 	and.w	r2, r3, #7
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4432      	add	r2, r6
 8002c28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c2a:	e0b9      	b.n	8002da0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2e:	461c      	mov	r4, r3
 8002c30:	f04f 0500 	mov.w	r5, #0
 8002c34:	4622      	mov	r2, r4
 8002c36:	462b      	mov	r3, r5
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	6139      	str	r1, [r7, #16]
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c44:	1912      	adds	r2, r2, r4
 8002c46:	eb45 0303 	adc.w	r3, r5, r3
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	00d9      	lsls	r1, r3, #3
 8002c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c58:	00d0      	lsls	r0, r2, #3
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	eb12 0804 	adds.w	r8, r2, r4
 8002c62:	eb43 0905 	adc.w	r9, r3, r5
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	008b      	lsls	r3, r1, #2
 8002c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c7e:	0082      	lsls	r2, r0, #2
 8002c80:	4640      	mov	r0, r8
 8002c82:	4649      	mov	r1, r9
 8002c84:	f7fd fafc 	bl	8000280 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <UART_SetConfig+0x38c>)
 8002c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	011e      	lsls	r6, r3, #4
 8002c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	1894      	adds	r4, r2, r2
 8002ca4:	60bc      	str	r4, [r7, #8]
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cae:	1812      	adds	r2, r2, r0
 8002cb0:	eb41 0303 	adc.w	r3, r1, r3
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	f04f 0500 	mov.w	r5, #0
 8002cbc:	00dd      	lsls	r5, r3, #3
 8002cbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cc2:	00d4      	lsls	r4, r2, #3
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	1814      	adds	r4, r2, r0
 8002cca:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	008b      	lsls	r3, r1, #2
 8002ce4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ce8:	0082      	lsls	r2, r0, #2
 8002cea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002cee:	f7fd fac7 	bl	8000280 <__aeabi_uldivmod>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <UART_SetConfig+0x38c>)
 8002cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	2164      	movs	r1, #100	; 0x64
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	3332      	adds	r3, #50	; 0x32
 8002d0a:	4a2a      	ldr	r2, [pc, #168]	; (8002db4 <UART_SetConfig+0x38c>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d16:	441e      	add	r6, r3
 8002d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	1894      	adds	r4, r2, r2
 8002d26:	603c      	str	r4, [r7, #0]
 8002d28:	415b      	adcs	r3, r3
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d30:	1812      	adds	r2, r2, r0
 8002d32:	eb41 0303 	adc.w	r3, r1, r3
 8002d36:	f04f 0400 	mov.w	r4, #0
 8002d3a:	f04f 0500 	mov.w	r5, #0
 8002d3e:	00dd      	lsls	r5, r3, #3
 8002d40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d44:	00d4      	lsls	r4, r2, #3
 8002d46:	4622      	mov	r2, r4
 8002d48:	462b      	mov	r3, r5
 8002d4a:	eb12 0a00 	adds.w	sl, r2, r0
 8002d4e:	eb43 0b01 	adc.w	fp, r3, r1
 8002d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	008b      	lsls	r3, r1, #2
 8002d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d6a:	0082      	lsls	r2, r0, #2
 8002d6c:	4650      	mov	r0, sl
 8002d6e:	4659      	mov	r1, fp
 8002d70:	f7fd fa86 	bl	8000280 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <UART_SetConfig+0x38c>)
 8002d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2164      	movs	r1, #100	; 0x64
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	3332      	adds	r3, #50	; 0x32
 8002d8c:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <UART_SetConfig+0x38c>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4432      	add	r2, r6
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	377c      	adds	r7, #124	; 0x7c
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002daa:	bf00      	nop
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	51eb851f 	.word	0x51eb851f

08002db8 <atoi>:
 8002db8:	220a      	movs	r2, #10
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f000 b8d6 	b.w	8002f6c <strtol>

08002dc0 <__errno>:
 8002dc0:	4b01      	ldr	r3, [pc, #4]	; (8002dc8 <__errno+0x8>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000010 	.word	0x20000010

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	4d0d      	ldr	r5, [pc, #52]	; (8002e04 <__libc_init_array+0x38>)
 8002dd0:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <__libc_init_array+0x3c>)
 8002dd2:	1b64      	subs	r4, r4, r5
 8002dd4:	10a4      	asrs	r4, r4, #2
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	4d0b      	ldr	r5, [pc, #44]	; (8002e0c <__libc_init_array+0x40>)
 8002dde:	4c0c      	ldr	r4, [pc, #48]	; (8002e10 <__libc_init_array+0x44>)
 8002de0:	f000 fcdc 	bl	800379c <_init>
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	2600      	movs	r6, #0
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08003a34 	.word	0x08003a34
 8002e08:	08003a34 	.word	0x08003a34
 8002e0c:	08003a34 	.word	0x08003a34
 8002e10:	08003a38 	.word	0x08003a38

08002e14 <memset>:
 8002e14:	4402      	add	r2, r0
 8002e16:	4603      	mov	r3, r0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <memset+0xa>
 8002e1c:	4770      	bx	lr
 8002e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e22:	e7f9      	b.n	8002e18 <memset+0x4>

08002e24 <siprintf>:
 8002e24:	b40e      	push	{r1, r2, r3}
 8002e26:	b500      	push	{lr}
 8002e28:	b09c      	sub	sp, #112	; 0x70
 8002e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e2c:	9002      	str	r0, [sp, #8]
 8002e2e:	9006      	str	r0, [sp, #24]
 8002e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e34:	4809      	ldr	r0, [pc, #36]	; (8002e5c <siprintf+0x38>)
 8002e36:	9107      	str	r1, [sp, #28]
 8002e38:	9104      	str	r1, [sp, #16]
 8002e3a:	4909      	ldr	r1, [pc, #36]	; (8002e60 <siprintf+0x3c>)
 8002e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e40:	9105      	str	r1, [sp, #20]
 8002e42:	6800      	ldr	r0, [r0, #0]
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	a902      	add	r1, sp, #8
 8002e48:	f000 f8f6 	bl	8003038 <_svfiprintf_r>
 8002e4c:	9b02      	ldr	r3, [sp, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	b01c      	add	sp, #112	; 0x70
 8002e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e58:	b003      	add	sp, #12
 8002e5a:	4770      	bx	lr
 8002e5c:	20000010 	.word	0x20000010
 8002e60:	ffff0208 	.word	0xffff0208

08002e64 <_strtol_l.isra.0>:
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6a:	d001      	beq.n	8002e70 <_strtol_l.isra.0+0xc>
 8002e6c:	2b24      	cmp	r3, #36	; 0x24
 8002e6e:	d906      	bls.n	8002e7e <_strtol_l.isra.0+0x1a>
 8002e70:	f7ff ffa6 	bl	8002dc0 <__errno>
 8002e74:	2316      	movs	r3, #22
 8002e76:	6003      	str	r3, [r0, #0]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7e:	4f3a      	ldr	r7, [pc, #232]	; (8002f68 <_strtol_l.isra.0+0x104>)
 8002e80:	468e      	mov	lr, r1
 8002e82:	4676      	mov	r6, lr
 8002e84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002e88:	5de5      	ldrb	r5, [r4, r7]
 8002e8a:	f015 0508 	ands.w	r5, r5, #8
 8002e8e:	d1f8      	bne.n	8002e82 <_strtol_l.isra.0+0x1e>
 8002e90:	2c2d      	cmp	r4, #45	; 0x2d
 8002e92:	d134      	bne.n	8002efe <_strtol_l.isra.0+0x9a>
 8002e94:	f89e 4000 	ldrb.w	r4, [lr]
 8002e98:	f04f 0801 	mov.w	r8, #1
 8002e9c:	f106 0e02 	add.w	lr, r6, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05c      	beq.n	8002f5e <_strtol_l.isra.0+0xfa>
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d10c      	bne.n	8002ec2 <_strtol_l.isra.0+0x5e>
 8002ea8:	2c30      	cmp	r4, #48	; 0x30
 8002eaa:	d10a      	bne.n	8002ec2 <_strtol_l.isra.0+0x5e>
 8002eac:	f89e 4000 	ldrb.w	r4, [lr]
 8002eb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002eb4:	2c58      	cmp	r4, #88	; 0x58
 8002eb6:	d14d      	bne.n	8002f54 <_strtol_l.isra.0+0xf0>
 8002eb8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	f10e 0e02 	add.w	lr, lr, #2
 8002ec2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002ec6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002eca:	2600      	movs	r6, #0
 8002ecc:	fbbc f9f3 	udiv	r9, ip, r3
 8002ed0:	4635      	mov	r5, r6
 8002ed2:	fb03 ca19 	mls	sl, r3, r9, ip
 8002ed6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002eda:	2f09      	cmp	r7, #9
 8002edc:	d818      	bhi.n	8002f10 <_strtol_l.isra.0+0xac>
 8002ede:	463c      	mov	r4, r7
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	dd24      	ble.n	8002f2e <_strtol_l.isra.0+0xca>
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	db1f      	blt.n	8002f28 <_strtol_l.isra.0+0xc4>
 8002ee8:	45a9      	cmp	r9, r5
 8002eea:	d31d      	bcc.n	8002f28 <_strtol_l.isra.0+0xc4>
 8002eec:	d101      	bne.n	8002ef2 <_strtol_l.isra.0+0x8e>
 8002eee:	45a2      	cmp	sl, r4
 8002ef0:	db1a      	blt.n	8002f28 <_strtol_l.isra.0+0xc4>
 8002ef2:	fb05 4503 	mla	r5, r5, r3, r4
 8002ef6:	2601      	movs	r6, #1
 8002ef8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002efc:	e7eb      	b.n	8002ed6 <_strtol_l.isra.0+0x72>
 8002efe:	2c2b      	cmp	r4, #43	; 0x2b
 8002f00:	bf08      	it	eq
 8002f02:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002f06:	46a8      	mov	r8, r5
 8002f08:	bf08      	it	eq
 8002f0a:	f106 0e02 	addeq.w	lr, r6, #2
 8002f0e:	e7c7      	b.n	8002ea0 <_strtol_l.isra.0+0x3c>
 8002f10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002f14:	2f19      	cmp	r7, #25
 8002f16:	d801      	bhi.n	8002f1c <_strtol_l.isra.0+0xb8>
 8002f18:	3c37      	subs	r4, #55	; 0x37
 8002f1a:	e7e1      	b.n	8002ee0 <_strtol_l.isra.0+0x7c>
 8002f1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002f20:	2f19      	cmp	r7, #25
 8002f22:	d804      	bhi.n	8002f2e <_strtol_l.isra.0+0xca>
 8002f24:	3c57      	subs	r4, #87	; 0x57
 8002f26:	e7db      	b.n	8002ee0 <_strtol_l.isra.0+0x7c>
 8002f28:	f04f 36ff 	mov.w	r6, #4294967295
 8002f2c:	e7e4      	b.n	8002ef8 <_strtol_l.isra.0+0x94>
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	da05      	bge.n	8002f3e <_strtol_l.isra.0+0xda>
 8002f32:	2322      	movs	r3, #34	; 0x22
 8002f34:	6003      	str	r3, [r0, #0]
 8002f36:	4665      	mov	r5, ip
 8002f38:	b942      	cbnz	r2, 8002f4c <_strtol_l.isra.0+0xe8>
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	e79d      	b.n	8002e7a <_strtol_l.isra.0+0x16>
 8002f3e:	f1b8 0f00 	cmp.w	r8, #0
 8002f42:	d000      	beq.n	8002f46 <_strtol_l.isra.0+0xe2>
 8002f44:	426d      	negs	r5, r5
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	d0f7      	beq.n	8002f3a <_strtol_l.isra.0+0xd6>
 8002f4a:	b10e      	cbz	r6, 8002f50 <_strtol_l.isra.0+0xec>
 8002f4c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002f50:	6011      	str	r1, [r2, #0]
 8002f52:	e7f2      	b.n	8002f3a <_strtol_l.isra.0+0xd6>
 8002f54:	2430      	movs	r4, #48	; 0x30
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1b3      	bne.n	8002ec2 <_strtol_l.isra.0+0x5e>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	e7b1      	b.n	8002ec2 <_strtol_l.isra.0+0x5e>
 8002f5e:	2c30      	cmp	r4, #48	; 0x30
 8002f60:	d0a4      	beq.n	8002eac <_strtol_l.isra.0+0x48>
 8002f62:	230a      	movs	r3, #10
 8002f64:	e7ad      	b.n	8002ec2 <_strtol_l.isra.0+0x5e>
 8002f66:	bf00      	nop
 8002f68:	080038f9 	.word	0x080038f9

08002f6c <strtol>:
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	460a      	mov	r2, r1
 8002f70:	4601      	mov	r1, r0
 8002f72:	4802      	ldr	r0, [pc, #8]	; (8002f7c <strtol+0x10>)
 8002f74:	6800      	ldr	r0, [r0, #0]
 8002f76:	f7ff bf75 	b.w	8002e64 <_strtol_l.isra.0>
 8002f7a:	bf00      	nop
 8002f7c:	20000010 	.word	0x20000010

08002f80 <__ssputs_r>:
 8002f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f84:	688e      	ldr	r6, [r1, #8]
 8002f86:	429e      	cmp	r6, r3
 8002f88:	4682      	mov	sl, r0
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	4690      	mov	r8, r2
 8002f8e:	461f      	mov	r7, r3
 8002f90:	d838      	bhi.n	8003004 <__ssputs_r+0x84>
 8002f92:	898a      	ldrh	r2, [r1, #12]
 8002f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f98:	d032      	beq.n	8003000 <__ssputs_r+0x80>
 8002f9a:	6825      	ldr	r5, [r4, #0]
 8002f9c:	6909      	ldr	r1, [r1, #16]
 8002f9e:	eba5 0901 	sub.w	r9, r5, r1
 8002fa2:	6965      	ldr	r5, [r4, #20]
 8002fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fac:	3301      	adds	r3, #1
 8002fae:	444b      	add	r3, r9
 8002fb0:	106d      	asrs	r5, r5, #1
 8002fb2:	429d      	cmp	r5, r3
 8002fb4:	bf38      	it	cc
 8002fb6:	461d      	movcc	r5, r3
 8002fb8:	0553      	lsls	r3, r2, #21
 8002fba:	d531      	bpl.n	8003020 <__ssputs_r+0xa0>
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	f000 fb47 	bl	8003650 <_malloc_r>
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	b950      	cbnz	r0, 8002fdc <__ssputs_r+0x5c>
 8002fc6:	230c      	movs	r3, #12
 8002fc8:	f8ca 3000 	str.w	r3, [sl]
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd2:	81a3      	strh	r3, [r4, #12]
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fdc:	6921      	ldr	r1, [r4, #16]
 8002fde:	464a      	mov	r2, r9
 8002fe0:	f000 fabe 	bl	8003560 <memcpy>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	6126      	str	r6, [r4, #16]
 8002ff2:	6165      	str	r5, [r4, #20]
 8002ff4:	444e      	add	r6, r9
 8002ff6:	eba5 0509 	sub.w	r5, r5, r9
 8002ffa:	6026      	str	r6, [r4, #0]
 8002ffc:	60a5      	str	r5, [r4, #8]
 8002ffe:	463e      	mov	r6, r7
 8003000:	42be      	cmp	r6, r7
 8003002:	d900      	bls.n	8003006 <__ssputs_r+0x86>
 8003004:	463e      	mov	r6, r7
 8003006:	4632      	mov	r2, r6
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	4641      	mov	r1, r8
 800300c:	f000 fab6 	bl	800357c <memmove>
 8003010:	68a3      	ldr	r3, [r4, #8]
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	1b9b      	subs	r3, r3, r6
 8003016:	4432      	add	r2, r6
 8003018:	60a3      	str	r3, [r4, #8]
 800301a:	6022      	str	r2, [r4, #0]
 800301c:	2000      	movs	r0, #0
 800301e:	e7db      	b.n	8002fd8 <__ssputs_r+0x58>
 8003020:	462a      	mov	r2, r5
 8003022:	f000 fb6f 	bl	8003704 <_realloc_r>
 8003026:	4606      	mov	r6, r0
 8003028:	2800      	cmp	r0, #0
 800302a:	d1e1      	bne.n	8002ff0 <__ssputs_r+0x70>
 800302c:	6921      	ldr	r1, [r4, #16]
 800302e:	4650      	mov	r0, sl
 8003030:	f000 fabe 	bl	80035b0 <_free_r>
 8003034:	e7c7      	b.n	8002fc6 <__ssputs_r+0x46>
	...

08003038 <_svfiprintf_r>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	4698      	mov	r8, r3
 800303e:	898b      	ldrh	r3, [r1, #12]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	b09d      	sub	sp, #116	; 0x74
 8003044:	4607      	mov	r7, r0
 8003046:	460d      	mov	r5, r1
 8003048:	4614      	mov	r4, r2
 800304a:	d50e      	bpl.n	800306a <_svfiprintf_r+0x32>
 800304c:	690b      	ldr	r3, [r1, #16]
 800304e:	b963      	cbnz	r3, 800306a <_svfiprintf_r+0x32>
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	f000 fafd 	bl	8003650 <_malloc_r>
 8003056:	6028      	str	r0, [r5, #0]
 8003058:	6128      	str	r0, [r5, #16]
 800305a:	b920      	cbnz	r0, 8003066 <_svfiprintf_r+0x2e>
 800305c:	230c      	movs	r3, #12
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	e0d1      	b.n	800320a <_svfiprintf_r+0x1d2>
 8003066:	2340      	movs	r3, #64	; 0x40
 8003068:	616b      	str	r3, [r5, #20]
 800306a:	2300      	movs	r3, #0
 800306c:	9309      	str	r3, [sp, #36]	; 0x24
 800306e:	2320      	movs	r3, #32
 8003070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003074:	f8cd 800c 	str.w	r8, [sp, #12]
 8003078:	2330      	movs	r3, #48	; 0x30
 800307a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003224 <_svfiprintf_r+0x1ec>
 800307e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003082:	f04f 0901 	mov.w	r9, #1
 8003086:	4623      	mov	r3, r4
 8003088:	469a      	mov	sl, r3
 800308a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800308e:	b10a      	cbz	r2, 8003094 <_svfiprintf_r+0x5c>
 8003090:	2a25      	cmp	r2, #37	; 0x25
 8003092:	d1f9      	bne.n	8003088 <_svfiprintf_r+0x50>
 8003094:	ebba 0b04 	subs.w	fp, sl, r4
 8003098:	d00b      	beq.n	80030b2 <_svfiprintf_r+0x7a>
 800309a:	465b      	mov	r3, fp
 800309c:	4622      	mov	r2, r4
 800309e:	4629      	mov	r1, r5
 80030a0:	4638      	mov	r0, r7
 80030a2:	f7ff ff6d 	bl	8002f80 <__ssputs_r>
 80030a6:	3001      	adds	r0, #1
 80030a8:	f000 80aa 	beq.w	8003200 <_svfiprintf_r+0x1c8>
 80030ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030ae:	445a      	add	r2, fp
 80030b0:	9209      	str	r2, [sp, #36]	; 0x24
 80030b2:	f89a 3000 	ldrb.w	r3, [sl]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a2 	beq.w	8003200 <_svfiprintf_r+0x1c8>
 80030bc:	2300      	movs	r3, #0
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030c6:	f10a 0a01 	add.w	sl, sl, #1
 80030ca:	9304      	str	r3, [sp, #16]
 80030cc:	9307      	str	r3, [sp, #28]
 80030ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030d2:	931a      	str	r3, [sp, #104]	; 0x68
 80030d4:	4654      	mov	r4, sl
 80030d6:	2205      	movs	r2, #5
 80030d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030dc:	4851      	ldr	r0, [pc, #324]	; (8003224 <_svfiprintf_r+0x1ec>)
 80030de:	f7fd f87f 	bl	80001e0 <memchr>
 80030e2:	9a04      	ldr	r2, [sp, #16]
 80030e4:	b9d8      	cbnz	r0, 800311e <_svfiprintf_r+0xe6>
 80030e6:	06d0      	lsls	r0, r2, #27
 80030e8:	bf44      	itt	mi
 80030ea:	2320      	movmi	r3, #32
 80030ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f0:	0711      	lsls	r1, r2, #28
 80030f2:	bf44      	itt	mi
 80030f4:	232b      	movmi	r3, #43	; 0x2b
 80030f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030fa:	f89a 3000 	ldrb.w	r3, [sl]
 80030fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003100:	d015      	beq.n	800312e <_svfiprintf_r+0xf6>
 8003102:	9a07      	ldr	r2, [sp, #28]
 8003104:	4654      	mov	r4, sl
 8003106:	2000      	movs	r0, #0
 8003108:	f04f 0c0a 	mov.w	ip, #10
 800310c:	4621      	mov	r1, r4
 800310e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003112:	3b30      	subs	r3, #48	; 0x30
 8003114:	2b09      	cmp	r3, #9
 8003116:	d94e      	bls.n	80031b6 <_svfiprintf_r+0x17e>
 8003118:	b1b0      	cbz	r0, 8003148 <_svfiprintf_r+0x110>
 800311a:	9207      	str	r2, [sp, #28]
 800311c:	e014      	b.n	8003148 <_svfiprintf_r+0x110>
 800311e:	eba0 0308 	sub.w	r3, r0, r8
 8003122:	fa09 f303 	lsl.w	r3, r9, r3
 8003126:	4313      	orrs	r3, r2
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	46a2      	mov	sl, r4
 800312c:	e7d2      	b.n	80030d4 <_svfiprintf_r+0x9c>
 800312e:	9b03      	ldr	r3, [sp, #12]
 8003130:	1d19      	adds	r1, r3, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	9103      	str	r1, [sp, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	bfbb      	ittet	lt
 800313a:	425b      	neglt	r3, r3
 800313c:	f042 0202 	orrlt.w	r2, r2, #2
 8003140:	9307      	strge	r3, [sp, #28]
 8003142:	9307      	strlt	r3, [sp, #28]
 8003144:	bfb8      	it	lt
 8003146:	9204      	strlt	r2, [sp, #16]
 8003148:	7823      	ldrb	r3, [r4, #0]
 800314a:	2b2e      	cmp	r3, #46	; 0x2e
 800314c:	d10c      	bne.n	8003168 <_svfiprintf_r+0x130>
 800314e:	7863      	ldrb	r3, [r4, #1]
 8003150:	2b2a      	cmp	r3, #42	; 0x2a
 8003152:	d135      	bne.n	80031c0 <_svfiprintf_r+0x188>
 8003154:	9b03      	ldr	r3, [sp, #12]
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	bfb8      	it	lt
 8003160:	f04f 33ff 	movlt.w	r3, #4294967295
 8003164:	3402      	adds	r4, #2
 8003166:	9305      	str	r3, [sp, #20]
 8003168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003234 <_svfiprintf_r+0x1fc>
 800316c:	7821      	ldrb	r1, [r4, #0]
 800316e:	2203      	movs	r2, #3
 8003170:	4650      	mov	r0, sl
 8003172:	f7fd f835 	bl	80001e0 <memchr>
 8003176:	b140      	cbz	r0, 800318a <_svfiprintf_r+0x152>
 8003178:	2340      	movs	r3, #64	; 0x40
 800317a:	eba0 000a 	sub.w	r0, r0, sl
 800317e:	fa03 f000 	lsl.w	r0, r3, r0
 8003182:	9b04      	ldr	r3, [sp, #16]
 8003184:	4303      	orrs	r3, r0
 8003186:	3401      	adds	r4, #1
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800318e:	4826      	ldr	r0, [pc, #152]	; (8003228 <_svfiprintf_r+0x1f0>)
 8003190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003194:	2206      	movs	r2, #6
 8003196:	f7fd f823 	bl	80001e0 <memchr>
 800319a:	2800      	cmp	r0, #0
 800319c:	d038      	beq.n	8003210 <_svfiprintf_r+0x1d8>
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <_svfiprintf_r+0x1f4>)
 80031a0:	bb1b      	cbnz	r3, 80031ea <_svfiprintf_r+0x1b2>
 80031a2:	9b03      	ldr	r3, [sp, #12]
 80031a4:	3307      	adds	r3, #7
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	3308      	adds	r3, #8
 80031ac:	9303      	str	r3, [sp, #12]
 80031ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b0:	4433      	add	r3, r6
 80031b2:	9309      	str	r3, [sp, #36]	; 0x24
 80031b4:	e767      	b.n	8003086 <_svfiprintf_r+0x4e>
 80031b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80031ba:	460c      	mov	r4, r1
 80031bc:	2001      	movs	r0, #1
 80031be:	e7a5      	b.n	800310c <_svfiprintf_r+0xd4>
 80031c0:	2300      	movs	r3, #0
 80031c2:	3401      	adds	r4, #1
 80031c4:	9305      	str	r3, [sp, #20]
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0c0a 	mov.w	ip, #10
 80031cc:	4620      	mov	r0, r4
 80031ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031d2:	3a30      	subs	r2, #48	; 0x30
 80031d4:	2a09      	cmp	r2, #9
 80031d6:	d903      	bls.n	80031e0 <_svfiprintf_r+0x1a8>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0c5      	beq.n	8003168 <_svfiprintf_r+0x130>
 80031dc:	9105      	str	r1, [sp, #20]
 80031de:	e7c3      	b.n	8003168 <_svfiprintf_r+0x130>
 80031e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80031e4:	4604      	mov	r4, r0
 80031e6:	2301      	movs	r3, #1
 80031e8:	e7f0      	b.n	80031cc <_svfiprintf_r+0x194>
 80031ea:	ab03      	add	r3, sp, #12
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	462a      	mov	r2, r5
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <_svfiprintf_r+0x1f8>)
 80031f2:	a904      	add	r1, sp, #16
 80031f4:	4638      	mov	r0, r7
 80031f6:	f3af 8000 	nop.w
 80031fa:	1c42      	adds	r2, r0, #1
 80031fc:	4606      	mov	r6, r0
 80031fe:	d1d6      	bne.n	80031ae <_svfiprintf_r+0x176>
 8003200:	89ab      	ldrh	r3, [r5, #12]
 8003202:	065b      	lsls	r3, r3, #25
 8003204:	f53f af2c 	bmi.w	8003060 <_svfiprintf_r+0x28>
 8003208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800320a:	b01d      	add	sp, #116	; 0x74
 800320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003210:	ab03      	add	r3, sp, #12
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	462a      	mov	r2, r5
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <_svfiprintf_r+0x1f8>)
 8003218:	a904      	add	r1, sp, #16
 800321a:	4638      	mov	r0, r7
 800321c:	f000 f87a 	bl	8003314 <_printf_i>
 8003220:	e7eb      	b.n	80031fa <_svfiprintf_r+0x1c2>
 8003222:	bf00      	nop
 8003224:	080039f9 	.word	0x080039f9
 8003228:	08003a03 	.word	0x08003a03
 800322c:	00000000 	.word	0x00000000
 8003230:	08002f81 	.word	0x08002f81
 8003234:	080039ff 	.word	0x080039ff

08003238 <_printf_common>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	4616      	mov	r6, r2
 800323e:	4699      	mov	r9, r3
 8003240:	688a      	ldr	r2, [r1, #8]
 8003242:	690b      	ldr	r3, [r1, #16]
 8003244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003248:	4293      	cmp	r3, r2
 800324a:	bfb8      	it	lt
 800324c:	4613      	movlt	r3, r2
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003254:	4607      	mov	r7, r0
 8003256:	460c      	mov	r4, r1
 8003258:	b10a      	cbz	r2, 800325e <_printf_common+0x26>
 800325a:	3301      	adds	r3, #1
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0699      	lsls	r1, r3, #26
 8003262:	bf42      	ittt	mi
 8003264:	6833      	ldrmi	r3, [r6, #0]
 8003266:	3302      	addmi	r3, #2
 8003268:	6033      	strmi	r3, [r6, #0]
 800326a:	6825      	ldr	r5, [r4, #0]
 800326c:	f015 0506 	ands.w	r5, r5, #6
 8003270:	d106      	bne.n	8003280 <_printf_common+0x48>
 8003272:	f104 0a19 	add.w	sl, r4, #25
 8003276:	68e3      	ldr	r3, [r4, #12]
 8003278:	6832      	ldr	r2, [r6, #0]
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	42ab      	cmp	r3, r5
 800327e:	dc26      	bgt.n	80032ce <_printf_common+0x96>
 8003280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	bf18      	it	ne
 800328a:	2301      	movne	r3, #1
 800328c:	0692      	lsls	r2, r2, #26
 800328e:	d42b      	bmi.n	80032e8 <_printf_common+0xb0>
 8003290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003294:	4649      	mov	r1, r9
 8003296:	4638      	mov	r0, r7
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d01e      	beq.n	80032dc <_printf_common+0xa4>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	68e5      	ldr	r5, [r4, #12]
 80032a2:	6832      	ldr	r2, [r6, #0]
 80032a4:	f003 0306 	and.w	r3, r3, #6
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	bf08      	it	eq
 80032ac:	1aad      	subeq	r5, r5, r2
 80032ae:	68a3      	ldr	r3, [r4, #8]
 80032b0:	6922      	ldr	r2, [r4, #16]
 80032b2:	bf0c      	ite	eq
 80032b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b8:	2500      	movne	r5, #0
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bfc4      	itt	gt
 80032be:	1a9b      	subgt	r3, r3, r2
 80032c0:	18ed      	addgt	r5, r5, r3
 80032c2:	2600      	movs	r6, #0
 80032c4:	341a      	adds	r4, #26
 80032c6:	42b5      	cmp	r5, r6
 80032c8:	d11a      	bne.n	8003300 <_printf_common+0xc8>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e008      	b.n	80032e0 <_printf_common+0xa8>
 80032ce:	2301      	movs	r3, #1
 80032d0:	4652      	mov	r2, sl
 80032d2:	4649      	mov	r1, r9
 80032d4:	4638      	mov	r0, r7
 80032d6:	47c0      	blx	r8
 80032d8:	3001      	adds	r0, #1
 80032da:	d103      	bne.n	80032e4 <_printf_common+0xac>
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e4:	3501      	adds	r5, #1
 80032e6:	e7c6      	b.n	8003276 <_printf_common+0x3e>
 80032e8:	18e1      	adds	r1, r4, r3
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	2030      	movs	r0, #48	; 0x30
 80032ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032f2:	4422      	add	r2, r4
 80032f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032fc:	3302      	adds	r3, #2
 80032fe:	e7c7      	b.n	8003290 <_printf_common+0x58>
 8003300:	2301      	movs	r3, #1
 8003302:	4622      	mov	r2, r4
 8003304:	4649      	mov	r1, r9
 8003306:	4638      	mov	r0, r7
 8003308:	47c0      	blx	r8
 800330a:	3001      	adds	r0, #1
 800330c:	d0e6      	beq.n	80032dc <_printf_common+0xa4>
 800330e:	3601      	adds	r6, #1
 8003310:	e7d9      	b.n	80032c6 <_printf_common+0x8e>
	...

08003314 <_printf_i>:
 8003314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	4691      	mov	r9, r2
 800331c:	7e27      	ldrb	r7, [r4, #24]
 800331e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003320:	2f78      	cmp	r7, #120	; 0x78
 8003322:	4680      	mov	r8, r0
 8003324:	469a      	mov	sl, r3
 8003326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332a:	d807      	bhi.n	800333c <_printf_i+0x28>
 800332c:	2f62      	cmp	r7, #98	; 0x62
 800332e:	d80a      	bhi.n	8003346 <_printf_i+0x32>
 8003330:	2f00      	cmp	r7, #0
 8003332:	f000 80d8 	beq.w	80034e6 <_printf_i+0x1d2>
 8003336:	2f58      	cmp	r7, #88	; 0x58
 8003338:	f000 80a3 	beq.w	8003482 <_printf_i+0x16e>
 800333c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003344:	e03a      	b.n	80033bc <_printf_i+0xa8>
 8003346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800334a:	2b15      	cmp	r3, #21
 800334c:	d8f6      	bhi.n	800333c <_printf_i+0x28>
 800334e:	a001      	add	r0, pc, #4	; (adr r0, 8003354 <_printf_i+0x40>)
 8003350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003354:	080033ad 	.word	0x080033ad
 8003358:	080033c1 	.word	0x080033c1
 800335c:	0800333d 	.word	0x0800333d
 8003360:	0800333d 	.word	0x0800333d
 8003364:	0800333d 	.word	0x0800333d
 8003368:	0800333d 	.word	0x0800333d
 800336c:	080033c1 	.word	0x080033c1
 8003370:	0800333d 	.word	0x0800333d
 8003374:	0800333d 	.word	0x0800333d
 8003378:	0800333d 	.word	0x0800333d
 800337c:	0800333d 	.word	0x0800333d
 8003380:	080034cd 	.word	0x080034cd
 8003384:	080033f1 	.word	0x080033f1
 8003388:	080034af 	.word	0x080034af
 800338c:	0800333d 	.word	0x0800333d
 8003390:	0800333d 	.word	0x0800333d
 8003394:	080034ef 	.word	0x080034ef
 8003398:	0800333d 	.word	0x0800333d
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	0800333d 	.word	0x0800333d
 80033a4:	0800333d 	.word	0x0800333d
 80033a8:	080034b7 	.word	0x080034b7
 80033ac:	680b      	ldr	r3, [r1, #0]
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	600a      	str	r2, [r1, #0]
 80033b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a3      	b.n	8003508 <_printf_i+0x1f4>
 80033c0:	6825      	ldr	r5, [r4, #0]
 80033c2:	6808      	ldr	r0, [r1, #0]
 80033c4:	062e      	lsls	r6, r5, #24
 80033c6:	f100 0304 	add.w	r3, r0, #4
 80033ca:	d50a      	bpl.n	80033e2 <_printf_i+0xce>
 80033cc:	6805      	ldr	r5, [r0, #0]
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	da03      	bge.n	80033dc <_printf_i+0xc8>
 80033d4:	232d      	movs	r3, #45	; 0x2d
 80033d6:	426d      	negs	r5, r5
 80033d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033dc:	485e      	ldr	r0, [pc, #376]	; (8003558 <_printf_i+0x244>)
 80033de:	230a      	movs	r3, #10
 80033e0:	e019      	b.n	8003416 <_printf_i+0x102>
 80033e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033e6:	6805      	ldr	r5, [r0, #0]
 80033e8:	600b      	str	r3, [r1, #0]
 80033ea:	bf18      	it	ne
 80033ec:	b22d      	sxthne	r5, r5
 80033ee:	e7ef      	b.n	80033d0 <_printf_i+0xbc>
 80033f0:	680b      	ldr	r3, [r1, #0]
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	1d18      	adds	r0, r3, #4
 80033f6:	6008      	str	r0, [r1, #0]
 80033f8:	0628      	lsls	r0, r5, #24
 80033fa:	d501      	bpl.n	8003400 <_printf_i+0xec>
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	e002      	b.n	8003406 <_printf_i+0xf2>
 8003400:	0669      	lsls	r1, r5, #25
 8003402:	d5fb      	bpl.n	80033fc <_printf_i+0xe8>
 8003404:	881d      	ldrh	r5, [r3, #0]
 8003406:	4854      	ldr	r0, [pc, #336]	; (8003558 <_printf_i+0x244>)
 8003408:	2f6f      	cmp	r7, #111	; 0x6f
 800340a:	bf0c      	ite	eq
 800340c:	2308      	moveq	r3, #8
 800340e:	230a      	movne	r3, #10
 8003410:	2100      	movs	r1, #0
 8003412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003416:	6866      	ldr	r6, [r4, #4]
 8003418:	60a6      	str	r6, [r4, #8]
 800341a:	2e00      	cmp	r6, #0
 800341c:	bfa2      	ittt	ge
 800341e:	6821      	ldrge	r1, [r4, #0]
 8003420:	f021 0104 	bicge.w	r1, r1, #4
 8003424:	6021      	strge	r1, [r4, #0]
 8003426:	b90d      	cbnz	r5, 800342c <_printf_i+0x118>
 8003428:	2e00      	cmp	r6, #0
 800342a:	d04d      	beq.n	80034c8 <_printf_i+0x1b4>
 800342c:	4616      	mov	r6, r2
 800342e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003432:	fb03 5711 	mls	r7, r3, r1, r5
 8003436:	5dc7      	ldrb	r7, [r0, r7]
 8003438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800343c:	462f      	mov	r7, r5
 800343e:	42bb      	cmp	r3, r7
 8003440:	460d      	mov	r5, r1
 8003442:	d9f4      	bls.n	800342e <_printf_i+0x11a>
 8003444:	2b08      	cmp	r3, #8
 8003446:	d10b      	bne.n	8003460 <_printf_i+0x14c>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	07df      	lsls	r7, r3, #31
 800344c:	d508      	bpl.n	8003460 <_printf_i+0x14c>
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	6861      	ldr	r1, [r4, #4]
 8003452:	4299      	cmp	r1, r3
 8003454:	bfde      	ittt	le
 8003456:	2330      	movle	r3, #48	; 0x30
 8003458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800345c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003460:	1b92      	subs	r2, r2, r6
 8003462:	6122      	str	r2, [r4, #16]
 8003464:	f8cd a000 	str.w	sl, [sp]
 8003468:	464b      	mov	r3, r9
 800346a:	aa03      	add	r2, sp, #12
 800346c:	4621      	mov	r1, r4
 800346e:	4640      	mov	r0, r8
 8003470:	f7ff fee2 	bl	8003238 <_printf_common>
 8003474:	3001      	adds	r0, #1
 8003476:	d14c      	bne.n	8003512 <_printf_i+0x1fe>
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	b004      	add	sp, #16
 800347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003482:	4835      	ldr	r0, [pc, #212]	; (8003558 <_printf_i+0x244>)
 8003484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	680e      	ldr	r6, [r1, #0]
 800348c:	061f      	lsls	r7, r3, #24
 800348e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003492:	600e      	str	r6, [r1, #0]
 8003494:	d514      	bpl.n	80034c0 <_printf_i+0x1ac>
 8003496:	07d9      	lsls	r1, r3, #31
 8003498:	bf44      	itt	mi
 800349a:	f043 0320 	orrmi.w	r3, r3, #32
 800349e:	6023      	strmi	r3, [r4, #0]
 80034a0:	b91d      	cbnz	r5, 80034aa <_printf_i+0x196>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f023 0320 	bic.w	r3, r3, #32
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	2310      	movs	r3, #16
 80034ac:	e7b0      	b.n	8003410 <_printf_i+0xfc>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	2378      	movs	r3, #120	; 0x78
 80034b8:	4828      	ldr	r0, [pc, #160]	; (800355c <_printf_i+0x248>)
 80034ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034be:	e7e3      	b.n	8003488 <_printf_i+0x174>
 80034c0:	065e      	lsls	r6, r3, #25
 80034c2:	bf48      	it	mi
 80034c4:	b2ad      	uxthmi	r5, r5
 80034c6:	e7e6      	b.n	8003496 <_printf_i+0x182>
 80034c8:	4616      	mov	r6, r2
 80034ca:	e7bb      	b.n	8003444 <_printf_i+0x130>
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	6826      	ldr	r6, [r4, #0]
 80034d0:	6960      	ldr	r0, [r4, #20]
 80034d2:	1d1d      	adds	r5, r3, #4
 80034d4:	600d      	str	r5, [r1, #0]
 80034d6:	0635      	lsls	r5, r6, #24
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	d501      	bpl.n	80034e0 <_printf_i+0x1cc>
 80034dc:	6018      	str	r0, [r3, #0]
 80034de:	e002      	b.n	80034e6 <_printf_i+0x1d2>
 80034e0:	0671      	lsls	r1, r6, #25
 80034e2:	d5fb      	bpl.n	80034dc <_printf_i+0x1c8>
 80034e4:	8018      	strh	r0, [r3, #0]
 80034e6:	2300      	movs	r3, #0
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	4616      	mov	r6, r2
 80034ec:	e7ba      	b.n	8003464 <_printf_i+0x150>
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	600a      	str	r2, [r1, #0]
 80034f4:	681e      	ldr	r6, [r3, #0]
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7fc fe70 	bl	80001e0 <memchr>
 8003500:	b108      	cbz	r0, 8003506 <_printf_i+0x1f2>
 8003502:	1b80      	subs	r0, r0, r6
 8003504:	6060      	str	r0, [r4, #4]
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	2300      	movs	r3, #0
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003510:	e7a8      	b.n	8003464 <_printf_i+0x150>
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	4632      	mov	r2, r6
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	47d0      	blx	sl
 800351c:	3001      	adds	r0, #1
 800351e:	d0ab      	beq.n	8003478 <_printf_i+0x164>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	d413      	bmi.n	800354e <_printf_i+0x23a>
 8003526:	68e0      	ldr	r0, [r4, #12]
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	4298      	cmp	r0, r3
 800352c:	bfb8      	it	lt
 800352e:	4618      	movlt	r0, r3
 8003530:	e7a4      	b.n	800347c <_printf_i+0x168>
 8003532:	2301      	movs	r3, #1
 8003534:	4632      	mov	r2, r6
 8003536:	4649      	mov	r1, r9
 8003538:	4640      	mov	r0, r8
 800353a:	47d0      	blx	sl
 800353c:	3001      	adds	r0, #1
 800353e:	d09b      	beq.n	8003478 <_printf_i+0x164>
 8003540:	3501      	adds	r5, #1
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	9903      	ldr	r1, [sp, #12]
 8003546:	1a5b      	subs	r3, r3, r1
 8003548:	42ab      	cmp	r3, r5
 800354a:	dcf2      	bgt.n	8003532 <_printf_i+0x21e>
 800354c:	e7eb      	b.n	8003526 <_printf_i+0x212>
 800354e:	2500      	movs	r5, #0
 8003550:	f104 0619 	add.w	r6, r4, #25
 8003554:	e7f5      	b.n	8003542 <_printf_i+0x22e>
 8003556:	bf00      	nop
 8003558:	08003a0a 	.word	0x08003a0a
 800355c:	08003a1b 	.word	0x08003a1b

08003560 <memcpy>:
 8003560:	440a      	add	r2, r1
 8003562:	4291      	cmp	r1, r2
 8003564:	f100 33ff 	add.w	r3, r0, #4294967295
 8003568:	d100      	bne.n	800356c <memcpy+0xc>
 800356a:	4770      	bx	lr
 800356c:	b510      	push	{r4, lr}
 800356e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003576:	4291      	cmp	r1, r2
 8003578:	d1f9      	bne.n	800356e <memcpy+0xe>
 800357a:	bd10      	pop	{r4, pc}

0800357c <memmove>:
 800357c:	4288      	cmp	r0, r1
 800357e:	b510      	push	{r4, lr}
 8003580:	eb01 0402 	add.w	r4, r1, r2
 8003584:	d902      	bls.n	800358c <memmove+0x10>
 8003586:	4284      	cmp	r4, r0
 8003588:	4623      	mov	r3, r4
 800358a:	d807      	bhi.n	800359c <memmove+0x20>
 800358c:	1e43      	subs	r3, r0, #1
 800358e:	42a1      	cmp	r1, r4
 8003590:	d008      	beq.n	80035a4 <memmove+0x28>
 8003592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800359a:	e7f8      	b.n	800358e <memmove+0x12>
 800359c:	4402      	add	r2, r0
 800359e:	4601      	mov	r1, r0
 80035a0:	428a      	cmp	r2, r1
 80035a2:	d100      	bne.n	80035a6 <memmove+0x2a>
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ae:	e7f7      	b.n	80035a0 <memmove+0x24>

080035b0 <_free_r>:
 80035b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035b2:	2900      	cmp	r1, #0
 80035b4:	d048      	beq.n	8003648 <_free_r+0x98>
 80035b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ba:	9001      	str	r0, [sp, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f1a1 0404 	sub.w	r4, r1, #4
 80035c2:	bfb8      	it	lt
 80035c4:	18e4      	addlt	r4, r4, r3
 80035c6:	f000 f8d3 	bl	8003770 <__malloc_lock>
 80035ca:	4a20      	ldr	r2, [pc, #128]	; (800364c <_free_r+0x9c>)
 80035cc:	9801      	ldr	r0, [sp, #4]
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	4615      	mov	r5, r2
 80035d2:	b933      	cbnz	r3, 80035e2 <_free_r+0x32>
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	6014      	str	r4, [r2, #0]
 80035d8:	b003      	add	sp, #12
 80035da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035de:	f000 b8cd 	b.w	800377c <__malloc_unlock>
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	d90b      	bls.n	80035fe <_free_r+0x4e>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	1862      	adds	r2, r4, r1
 80035ea:	4293      	cmp	r3, r2
 80035ec:	bf04      	itt	eq
 80035ee:	681a      	ldreq	r2, [r3, #0]
 80035f0:	685b      	ldreq	r3, [r3, #4]
 80035f2:	6063      	str	r3, [r4, #4]
 80035f4:	bf04      	itt	eq
 80035f6:	1852      	addeq	r2, r2, r1
 80035f8:	6022      	streq	r2, [r4, #0]
 80035fa:	602c      	str	r4, [r5, #0]
 80035fc:	e7ec      	b.n	80035d8 <_free_r+0x28>
 80035fe:	461a      	mov	r2, r3
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b10b      	cbz	r3, 8003608 <_free_r+0x58>
 8003604:	42a3      	cmp	r3, r4
 8003606:	d9fa      	bls.n	80035fe <_free_r+0x4e>
 8003608:	6811      	ldr	r1, [r2, #0]
 800360a:	1855      	adds	r5, r2, r1
 800360c:	42a5      	cmp	r5, r4
 800360e:	d10b      	bne.n	8003628 <_free_r+0x78>
 8003610:	6824      	ldr	r4, [r4, #0]
 8003612:	4421      	add	r1, r4
 8003614:	1854      	adds	r4, r2, r1
 8003616:	42a3      	cmp	r3, r4
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	d1dd      	bne.n	80035d8 <_free_r+0x28>
 800361c:	681c      	ldr	r4, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	6053      	str	r3, [r2, #4]
 8003622:	4421      	add	r1, r4
 8003624:	6011      	str	r1, [r2, #0]
 8003626:	e7d7      	b.n	80035d8 <_free_r+0x28>
 8003628:	d902      	bls.n	8003630 <_free_r+0x80>
 800362a:	230c      	movs	r3, #12
 800362c:	6003      	str	r3, [r0, #0]
 800362e:	e7d3      	b.n	80035d8 <_free_r+0x28>
 8003630:	6825      	ldr	r5, [r4, #0]
 8003632:	1961      	adds	r1, r4, r5
 8003634:	428b      	cmp	r3, r1
 8003636:	bf04      	itt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	6063      	str	r3, [r4, #4]
 800363e:	bf04      	itt	eq
 8003640:	1949      	addeq	r1, r1, r5
 8003642:	6021      	streq	r1, [r4, #0]
 8003644:	6054      	str	r4, [r2, #4]
 8003646:	e7c7      	b.n	80035d8 <_free_r+0x28>
 8003648:	b003      	add	sp, #12
 800364a:	bd30      	pop	{r4, r5, pc}
 800364c:	20000094 	.word	0x20000094

08003650 <_malloc_r>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	1ccd      	adds	r5, r1, #3
 8003654:	f025 0503 	bic.w	r5, r5, #3
 8003658:	3508      	adds	r5, #8
 800365a:	2d0c      	cmp	r5, #12
 800365c:	bf38      	it	cc
 800365e:	250c      	movcc	r5, #12
 8003660:	2d00      	cmp	r5, #0
 8003662:	4606      	mov	r6, r0
 8003664:	db01      	blt.n	800366a <_malloc_r+0x1a>
 8003666:	42a9      	cmp	r1, r5
 8003668:	d903      	bls.n	8003672 <_malloc_r+0x22>
 800366a:	230c      	movs	r3, #12
 800366c:	6033      	str	r3, [r6, #0]
 800366e:	2000      	movs	r0, #0
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003672:	f000 f87d 	bl	8003770 <__malloc_lock>
 8003676:	4921      	ldr	r1, [pc, #132]	; (80036fc <_malloc_r+0xac>)
 8003678:	680a      	ldr	r2, [r1, #0]
 800367a:	4614      	mov	r4, r2
 800367c:	b99c      	cbnz	r4, 80036a6 <_malloc_r+0x56>
 800367e:	4f20      	ldr	r7, [pc, #128]	; (8003700 <_malloc_r+0xb0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b923      	cbnz	r3, 800368e <_malloc_r+0x3e>
 8003684:	4621      	mov	r1, r4
 8003686:	4630      	mov	r0, r6
 8003688:	f000 f862 	bl	8003750 <_sbrk_r>
 800368c:	6038      	str	r0, [r7, #0]
 800368e:	4629      	mov	r1, r5
 8003690:	4630      	mov	r0, r6
 8003692:	f000 f85d 	bl	8003750 <_sbrk_r>
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	d123      	bne.n	80036e2 <_malloc_r+0x92>
 800369a:	230c      	movs	r3, #12
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	4630      	mov	r0, r6
 80036a0:	f000 f86c 	bl	800377c <__malloc_unlock>
 80036a4:	e7e3      	b.n	800366e <_malloc_r+0x1e>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	1b5b      	subs	r3, r3, r5
 80036aa:	d417      	bmi.n	80036dc <_malloc_r+0x8c>
 80036ac:	2b0b      	cmp	r3, #11
 80036ae:	d903      	bls.n	80036b8 <_malloc_r+0x68>
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	441c      	add	r4, r3
 80036b4:	6025      	str	r5, [r4, #0]
 80036b6:	e004      	b.n	80036c2 <_malloc_r+0x72>
 80036b8:	6863      	ldr	r3, [r4, #4]
 80036ba:	42a2      	cmp	r2, r4
 80036bc:	bf0c      	ite	eq
 80036be:	600b      	streq	r3, [r1, #0]
 80036c0:	6053      	strne	r3, [r2, #4]
 80036c2:	4630      	mov	r0, r6
 80036c4:	f000 f85a 	bl	800377c <__malloc_unlock>
 80036c8:	f104 000b 	add.w	r0, r4, #11
 80036cc:	1d23      	adds	r3, r4, #4
 80036ce:	f020 0007 	bic.w	r0, r0, #7
 80036d2:	1ac2      	subs	r2, r0, r3
 80036d4:	d0cc      	beq.n	8003670 <_malloc_r+0x20>
 80036d6:	1a1b      	subs	r3, r3, r0
 80036d8:	50a3      	str	r3, [r4, r2]
 80036da:	e7c9      	b.n	8003670 <_malloc_r+0x20>
 80036dc:	4622      	mov	r2, r4
 80036de:	6864      	ldr	r4, [r4, #4]
 80036e0:	e7cc      	b.n	800367c <_malloc_r+0x2c>
 80036e2:	1cc4      	adds	r4, r0, #3
 80036e4:	f024 0403 	bic.w	r4, r4, #3
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d0e3      	beq.n	80036b4 <_malloc_r+0x64>
 80036ec:	1a21      	subs	r1, r4, r0
 80036ee:	4630      	mov	r0, r6
 80036f0:	f000 f82e 	bl	8003750 <_sbrk_r>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d1dd      	bne.n	80036b4 <_malloc_r+0x64>
 80036f8:	e7cf      	b.n	800369a <_malloc_r+0x4a>
 80036fa:	bf00      	nop
 80036fc:	20000094 	.word	0x20000094
 8003700:	20000098 	.word	0x20000098

08003704 <_realloc_r>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	4607      	mov	r7, r0
 8003708:	4614      	mov	r4, r2
 800370a:	460e      	mov	r6, r1
 800370c:	b921      	cbnz	r1, 8003718 <_realloc_r+0x14>
 800370e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003712:	4611      	mov	r1, r2
 8003714:	f7ff bf9c 	b.w	8003650 <_malloc_r>
 8003718:	b922      	cbnz	r2, 8003724 <_realloc_r+0x20>
 800371a:	f7ff ff49 	bl	80035b0 <_free_r>
 800371e:	4625      	mov	r5, r4
 8003720:	4628      	mov	r0, r5
 8003722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003724:	f000 f830 	bl	8003788 <_malloc_usable_size_r>
 8003728:	42a0      	cmp	r0, r4
 800372a:	d20f      	bcs.n	800374c <_realloc_r+0x48>
 800372c:	4621      	mov	r1, r4
 800372e:	4638      	mov	r0, r7
 8003730:	f7ff ff8e 	bl	8003650 <_malloc_r>
 8003734:	4605      	mov	r5, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d0f2      	beq.n	8003720 <_realloc_r+0x1c>
 800373a:	4631      	mov	r1, r6
 800373c:	4622      	mov	r2, r4
 800373e:	f7ff ff0f 	bl	8003560 <memcpy>
 8003742:	4631      	mov	r1, r6
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff33 	bl	80035b0 <_free_r>
 800374a:	e7e9      	b.n	8003720 <_realloc_r+0x1c>
 800374c:	4635      	mov	r5, r6
 800374e:	e7e7      	b.n	8003720 <_realloc_r+0x1c>

08003750 <_sbrk_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d06      	ldr	r5, [pc, #24]	; (800376c <_sbrk_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fd f9d2 	bl	8000b04 <_sbrk>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_sbrk_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_sbrk_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	200000e8 	.word	0x200000e8

08003770 <__malloc_lock>:
 8003770:	4801      	ldr	r0, [pc, #4]	; (8003778 <__malloc_lock+0x8>)
 8003772:	f000 b811 	b.w	8003798 <__retarget_lock_acquire_recursive>
 8003776:	bf00      	nop
 8003778:	200000f0 	.word	0x200000f0

0800377c <__malloc_unlock>:
 800377c:	4801      	ldr	r0, [pc, #4]	; (8003784 <__malloc_unlock+0x8>)
 800377e:	f000 b80c 	b.w	800379a <__retarget_lock_release_recursive>
 8003782:	bf00      	nop
 8003784:	200000f0 	.word	0x200000f0

08003788 <_malloc_usable_size_r>:
 8003788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800378c:	1f18      	subs	r0, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	bfbc      	itt	lt
 8003792:	580b      	ldrlt	r3, [r1, r0]
 8003794:	18c0      	addlt	r0, r0, r3
 8003796:	4770      	bx	lr

08003798 <__retarget_lock_acquire_recursive>:
 8003798:	4770      	bx	lr

0800379a <__retarget_lock_release_recursive>:
 800379a:	4770      	bx	lr

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr
