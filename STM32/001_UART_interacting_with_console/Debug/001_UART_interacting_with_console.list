
001_UART_interacting_with_console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008db1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ff  00000000  00000000  00028e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  0002a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  0002a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020173  00000000  00000000  0002af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007c94  00000000  00000000  0004b0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2bc6  00000000  00000000  00052d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115925  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ccc  00000000  00000000  00115978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c2c 	.word	0x08002c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002c2c 	.word	0x08002c2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	uint8_t opt = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	71fb      	strb	r3, [r7, #7]

	/* Reset of all peripherals, Initializes the Flash interface and the SysTick. */
	HAL_Init();
 8000582:	f000 facf 	bl	8000b24 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000586:	f000 f8c3 	bl	8000710 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058a:	f000 f957 	bl	800083c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800058e:	f000 f92b 	bl	80007e8 <MX_USART2_UART_Init>

	/*Prompt Message*/
	printMessage:
	printWelcomeMessage();
 8000592:	f000 f80d 	bl	80005b0 <printWelcomeMessage>

	while (1)
	{
		opt = readUserInput();
 8000596:	f000 f835 	bl	8000604 <readUserInput>
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
		processUserInput(opt);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f84f 	bl	8000644 <processUserInput>
		if(opt == 3)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d1f4      	bne.n	8000596 <main+0x1e>
			goto printMessage;
 80005ac:	e7f1      	b.n	8000592 <main+0x1a>
	...

080005b0 <printWelcomeMessage>:
	}
}

void printWelcomeMessage(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/*Trasmitting message to console. those 033 are for going back top etc..*/
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	2206      	movs	r2, #6
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <printWelcomeMessage+0x40>)
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <printWelcomeMessage+0x44>)
 80005be:	f001 fad9 	bl	8001b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2204      	movs	r2, #4
 80005c8:	490b      	ldr	r1, [pc, #44]	; (80005f8 <printWelcomeMessage+0x48>)
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <printWelcomeMessage+0x44>)
 80005cc:	f001 fad2 	bl	8001b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2241      	movs	r2, #65	; 0x41
 80005d6:	4909      	ldr	r1, [pc, #36]	; (80005fc <printWelcomeMessage+0x4c>)
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <printWelcomeMessage+0x44>)
 80005da:	f001 facb 	bl	8001b74 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2285      	movs	r2, #133	; 0x85
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <printWelcomeMessage+0x50>)
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <printWelcomeMessage+0x44>)
 80005e8:	f001 fac4 	bl	8001b74 <HAL_UART_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08002c44 	.word	0x08002c44
 80005f4:	20000098 	.word	0x20000098
 80005f8:	08002c4c 	.word	0x08002c4c
 80005fc:	08002c54 	.word	0x08002c54
 8000600:	08002c98 	.word	0x08002c98

08000604 <readUserInput>:

uint8_t readUserInput(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	char readBuf[1];
	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2204      	movs	r2, #4
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <readUserInput+0x38>)
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <readUserInput+0x3c>)
 8000614:	f001 faae 	bl	8001b74 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	2201      	movs	r2, #1
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <readUserInput+0x3c>)
 8000622:	f001 fb39 	bl	8001c98 <HAL_UART_Receive>
	return atoi(readBuf);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fe0d 	bl	8002248 <atoi>
 800062e:	4603      	mov	r3, r0
 8000630:	b2db      	uxtb	r3, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	08002d20 	.word	0x08002d20
 8000640:	20000098 	.word	0x20000098

08000644 <processUserInput>:

uint8_t processUserInput(uint8_t opt)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <processUserInput+0x16>
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d901      	bls.n	800065e <processUserInput+0x1a>
	return 0;
 800065a:	2300      	movs	r3, #0
 800065c:	e046      	b.n	80006ec <processUserInput+0xa8>

	sprintf(msg, "%d", opt);
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4923      	ldr	r1, [pc, #140]	; (80006f4 <processUserInput+0xb0>)
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fe24 	bl	80022b4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fdad 	bl	80001d0 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	481d      	ldr	r0, [pc, #116]	; (80006f8 <processUserInput+0xb4>)
 8000684:	f001 fa76 	bl	8001b74 <HAL_UART_Transmit>

	switch(opt)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d02b      	beq.n	80006e6 <processUserInput+0xa2>
 800068e:	2b03      	cmp	r3, #3
 8000690:	dc2b      	bgt.n	80006ea <processUserInput+0xa6>
 8000692:	2b01      	cmp	r3, #1
 8000694:	d002      	beq.n	800069c <processUserInput+0x58>
 8000696:	2b02      	cmp	r3, #2
 8000698:	d006      	beq.n	80006a8 <processUserInput+0x64>
 800069a:	e026      	b.n	80006ea <processUserInput+0xa6>
	{
		case 1:
			/*If User press 1 We toggle Green Led*/
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4816      	ldr	r0, [pc, #88]	; (80006fc <processUserInput+0xb8>)
 80006a2:	f000 fd64 	bl	800116e <HAL_GPIO_TogglePin>
			break;
 80006a6:	e020      	b.n	80006ea <processUserInput+0xa6>

		case 2:
			/*If USER Press 1 We Read button status and print the status to console*/
			sprintf(msg, "\r\nUSER BUTTON status: %s",
			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET ? "RELEASED" : "PRESSED");
 80006a8:	2101      	movs	r1, #1
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <processUserInput+0xbc>)
 80006ac:	f000 fd2e 	bl	800110c <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
			sprintf(msg, "\r\nUSER BUTTON status: %s",
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <processUserInput+0x76>
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <processUserInput+0xc0>)
 80006b8:	e000      	b.n	80006bc <processUserInput+0x78>
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <processUserInput+0xc4>)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	4912      	ldr	r1, [pc, #72]	; (800070c <processUserInput+0xc8>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fdf6 	bl	80022b4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fd7f 	bl	80001d0 <strlen>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	f107 0108 	add.w	r1, r7, #8
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <processUserInput+0xb4>)
 80006e0:	f001 fa48 	bl	8001b74 <HAL_UART_Transmit>
			break;
 80006e4:	e001      	b.n	80006ea <processUserInput+0xa6>
		case 3:
			return 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	e000      	b.n	80006ec <processUserInput+0xa8>
	};

	return 1;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08002d28 	.word	0x08002d28
 80006f8:	20000098 	.word	0x20000098
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40020000 	.word	0x40020000
 8000704:	08002d2c 	.word	0x08002d2c
 8000708:	08002d38 	.word	0x08002d38
 800070c:	08002d40 	.word	0x08002d40

08000710 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fdc0 	bl	80022a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <SystemClock_Config+0xd0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <SystemClock_Config+0xd4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000784:	23a8      	movs	r3, #168	; 0xa8
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078c:	2307      	movs	r3, #7
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd05 	bl	80011a4 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a0:	f000 f8ac 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2105      	movs	r1, #5
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 ff66 	bl	8001694 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ce:	f000 f895 	bl	80008fc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007d2:	f001 f845 	bl	8001860 <HAL_RCC_EnableCSS>
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f001 f95b 	bl	8001ada <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f867 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000098 	.word	0x20000098
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <MX_GPIO_Init+0xb4>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <MX_GPIO_Init+0xb4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_GPIO_Init+0xb4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0xb8>)
 80008ae:	f000 fc45 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b2:	2301      	movs	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <MX_GPIO_Init+0xbc>)
 80008c6:	f000 fa85 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0xb8>)
 80008e4:	f000 fa76 	bl	8000dd4 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40020000 	.word	0x40020000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000946:	2007      	movs	r0, #7
 8000948:	f000 fa10 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a19      	ldr	r2, [pc, #100]	; (80009dc <HAL_UART_MspInit+0x84>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12b      	bne.n	80009d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x88>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_UART_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0x88>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b2:	230c      	movs	r3, #12
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c2:	2307      	movs	r3, #7
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_UART_MspInit+0x8c>)
 80009ce:	f000 fa01 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009ec:	f001 f85a 	bl	8001aa4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x8>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f8c6 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <_sbrk+0x5c>)
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <_sbrk+0x60>)
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_sbrk+0x64>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <_sbrk+0x68>)
 8000a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d207      	bcs.n	8000a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a70:	f001 fbee 	bl	8002250 <__errno>
 8000a74:	4603      	mov	r3, r0
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20020000 	.word	0x20020000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	2000008c 	.word	0x2000008c
 8000aa8:	200000f0 	.word	0x200000f0

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	; (8000b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afa:	f7ff ffd7 	bl	8000aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fbad 	bl	800225c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd39 	bl	8000578 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b14:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000b18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b1c:	200000f0 	.word	0x200000f0

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f90d 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fed6 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f917 	bl	8000dba <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f8ed 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200000dc 	.word	0x200000dc

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000dc 	.word	0x200000dc

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff47 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5c 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb0 	bl	8000d28 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e16b      	b.n	80010c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 815a 	bne.w	80010c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80b4 	beq.w	80010c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b60      	ldr	r3, [pc, #384]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a5f      	ldr	r2, [pc, #380]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a5b      	ldr	r2, [pc, #364]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x314>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x318>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x222>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x21e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x320>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <HAL_GPIO_Init+0x328>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_GPIO_Init+0x32c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_GPIO_Init+0x330>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00e      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fde:	2308      	movs	r3, #8
 8000fe0:	e00c      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	e00a      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e008      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e004      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e002      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x228>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	f002 0203 	and.w	r2, r2, #3
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	4093      	lsls	r3, r2
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_GPIO_Init+0x310>)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <HAL_GPIO_Init+0x334>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103e:	4a32      	ldr	r2, [pc, #200]	; (8001108 <HAL_GPIO_Init+0x334>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_GPIO_Init+0x334>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_GPIO_Init+0x334>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_GPIO_Init+0x334>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001092:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <HAL_GPIO_Init+0x334>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x334>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_GPIO_Init+0x334>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	f67f ae90 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40021c00 	.word	0x40021c00
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001180:	887a      	ldrh	r2, [r7, #2]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43d9      	mvns	r1, r3
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	400b      	ands	r3, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e264      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d075      	beq.n	80012ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d00c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d112      	bne.n	8001200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4b9d      	ldr	r3, [pc, #628]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011e6:	d10b      	bne.n	8001200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4b99      	ldr	r3, [pc, #612]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05b      	beq.n	80012ac <HAL_RCC_OscConfig+0x108>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d157      	bne.n	80012ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e23f      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d106      	bne.n	8001218 <HAL_RCC_OscConfig+0x74>
 800120a:	4b91      	ldr	r3, [pc, #580]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a90      	ldr	r2, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a8a      	ldr	r2, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a87      	ldr	r2, [pc, #540]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a83      	ldr	r2, [pc, #524]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a80      	ldr	r2, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fcc8 	bl	8000bf0 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fcc4 	bl	8000bf0 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e204      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b76      	ldr	r3, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xc0>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fcb4 	bl	8000bf0 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fcb0 	bl	8000bf0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1f0      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0xe8>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x152>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e1c4      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4952      	ldr	r1, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x2b0>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fc69 	bl	8000bf0 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fc65 	bl	8000bf0 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1a5      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4940      	ldr	r1, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_RCC_OscConfig+0x2b0>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fc48 	bl	8000bf0 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fc44 	bl	8000bf0 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e184      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d030      	beq.n	80013f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d016      	beq.n	80013c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x2b4>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fc28 	bl	8000bf0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc24 	bl	8000bf0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e164      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x200>
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x2b4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc11 	bl	8000bf0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc0d 	bl	8000bf0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e14d      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a0 	beq.w	800153e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10f      	bne.n	800142e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d121      	bne.n	800147e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_RCC_OscConfig+0x2b8>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fbd3 	bl	8000bf0 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	e011      	b.n	8001472 <HAL_RCC_OscConfig+0x2ce>
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	42470000 	.word	0x42470000
 8001458:	42470e80 	.word	0x42470e80
 800145c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001460:	f7ff fbc6 	bl	8000bf0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e106      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b85      	ldr	r3, [pc, #532]	; (8001688 <HAL_RCC_OscConfig+0x4e4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x2f0>
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a80      	ldr	r2, [pc, #512]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x32a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 800149c:	4b7b      	ldr	r3, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a7a      	ldr	r2, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	4b78      	ldr	r3, [pc, #480]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a77      	ldr	r2, [pc, #476]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x32a>
 80014b6:	4b75      	ldr	r3, [pc, #468]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a74      	ldr	r2, [pc, #464]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb8b 	bl	8000bf0 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb87 	bl	8000bf0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0c5      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b65      	ldr	r3, [pc, #404]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x33a>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb75 	bl	8000bf0 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb71 	bl	8000bf0 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0af      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b5a      	ldr	r3, [pc, #360]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 809b 	beq.w	800167e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d05c      	beq.n	800160e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d141      	bne.n	80015e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x4ec>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb45 	bl	8000bf0 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fb41 	bl	8000bf0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e081      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69da      	ldr	r2, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	019b      	lsls	r3, r3, #6
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	3b01      	subs	r3, #1
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	4937      	ldr	r1, [pc, #220]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_RCC_OscConfig+0x4ec>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb1a 	bl	8000bf0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb16 	bl	8000bf0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e056      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x41c>
 80015de:	e04e      	b.n	800167e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x4ec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb03 	bl	8000bf0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff faff 	bl	8000bf0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e03f      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x44a>
 800160c:	e037      	b.n	800167e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e032      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_RCC_OscConfig+0x4e8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d028      	beq.n	800167a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d121      	bne.n	800167a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d11a      	bne.n	800167a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800164a:	4013      	ands	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001650:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001652:	4293      	cmp	r3, r2
 8001654:	d111      	bne.n	800167a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	3b01      	subs	r3, #1
 8001664:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d107      	bne.n	800167a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40007000 	.word	0x40007000
 800168c:	40023800 	.word	0x40023800
 8001690:	42470060 	.word	0x42470060

08001694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0cc      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d90c      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b8      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800170a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	494d      	ldr	r1, [pc, #308]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d044      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d119      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d003      	beq.n	8001752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174e:	2b03      	cmp	r3, #3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e067      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f023 0203 	bic.w	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4934      	ldr	r1, [pc, #208]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001784:	f7ff fa34 	bl	8000bf0 <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7ff fa30 	bl	8000bf0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e04f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 020c 	and.w	r2, r3, #12
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1eb      	bne.n	800178c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d20c      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e032      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4916      	ldr	r1, [pc, #88]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f82d 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1c8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f994 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00
 8001850:	40023800 	.word	0x40023800
 8001854:	08002d5c 	.word	0x08002d5c
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_RCC_EnableCSS+0x14>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	4247004c 	.word	0x4247004c

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001890:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d00d      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 800189c:	2b08      	cmp	r3, #8
 800189e:	f200 80bd 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x1a4>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x34>
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018aa:	e0b7      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ae:	60bb      	str	r3, [r7, #8]
       break;
 80018b0:	e0b7      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018b4:	60bb      	str	r3, [r7, #8]
      break;
 80018b6:	e0b4      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c2:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d04d      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	461a      	mov	r2, r3
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	ea02 0800 	and.w	r8, r2, r0
 80018e6:	ea03 0901 	and.w	r9, r3, r1
 80018ea:	4640      	mov	r0, r8
 80018ec:	4649      	mov	r1, r9
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	014b      	lsls	r3, r1, #5
 80018f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018fc:	0142      	lsls	r2, r0, #5
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	ebb0 0008 	subs.w	r0, r0, r8
 8001906:	eb61 0109 	sbc.w	r1, r1, r9
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	018b      	lsls	r3, r1, #6
 8001914:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001918:	0182      	lsls	r2, r0, #6
 800191a:	1a12      	subs	r2, r2, r0
 800191c:	eb63 0301 	sbc.w	r3, r3, r1
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	00d9      	lsls	r1, r3, #3
 800192a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800192e:	00d0      	lsls	r0, r2, #3
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	eb12 0208 	adds.w	r2, r2, r8
 8001938:	eb43 0309 	adc.w	r3, r3, r9
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0259      	lsls	r1, r3, #9
 8001946:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800194a:	0250      	lsls	r0, r2, #9
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	f7fe fc90 	bl	8000280 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e04a      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	461a      	mov	r2, r3
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	ea02 0400 	and.w	r4, r2, r0
 8001982:	ea03 0501 	and.w	r5, r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	014b      	lsls	r3, r1, #5
 8001994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001998:	0142      	lsls	r2, r0, #5
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	1b00      	subs	r0, r0, r4
 80019a0:	eb61 0105 	sbc.w	r1, r1, r5
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	018b      	lsls	r3, r1, #6
 80019ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019b2:	0182      	lsls	r2, r0, #6
 80019b4:	1a12      	subs	r2, r2, r0
 80019b6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	00d9      	lsls	r1, r3, #3
 80019c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019c8:	00d0      	lsls	r0, r2, #3
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	1912      	adds	r2, r2, r4
 80019d0:	eb45 0303 	adc.w	r3, r5, r3
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	0299      	lsls	r1, r3, #10
 80019de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019e2:	0290      	lsls	r0, r2, #10
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	f7fe fc44 	bl	8000280 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	60bb      	str	r3, [r7, #8]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a1e:	60bb      	str	r3, [r7, #8]
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	68bb      	ldr	r3, [r7, #8]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	007a1200 	.word	0x007a1200

08001a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08002d6c 	.word	0x08002d6c

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffdc 	bl	8001a3c <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0b5b      	lsrs	r3, r3, #13
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08002d6c 	.word	0x08002d6c

08001aa4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d104      	bne.n	8001abe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001ab4:	f000 f80a 	bl	8001acc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	701a      	strb	r2, [r3, #0]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	4002380e 	.word	0x4002380e

08001acc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e03f      	b.n	8001b6c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe ff29 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2224      	movs	r2, #36	; 0x24
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f9ca 	bl	8001eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d17c      	bne.n	8001c8e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_UART_Transmit+0x2c>
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e075      	b.n	8001c90 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Transmit+0x3e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e06e      	b.n	8001c90 <HAL_UART_Transmit+0x11c>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2221      	movs	r2, #33	; 0x21
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f812 	bl	8000bf0 <HAL_GetTick>
 8001bcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	88fa      	ldrh	r2, [r7, #6]
 8001bd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d108      	bne.n	8001bf6 <HAL_UART_Transmit+0x82>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	e003      	b.n	8001bfe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c06:	e02a      	b.n	8001c5e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f8e2 	bl	8001ddc <UART_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e036      	b.n	8001c90 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10b      	bne.n	8001c40 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c36:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	e007      	b.n	8001c50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1cf      	bne.n	8001c08 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f8b2 	bl	8001ddc <UART_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e006      	b.n	8001c90 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	f040 808c 	bne.w	8001dd2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_UART_Receive+0x2e>
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e084      	b.n	8001dd4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Receive+0x40>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e07d      	b.n	8001dd4 <HAL_UART_Receive+0x13c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2222      	movs	r2, #34	; 0x22
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cf4:	f7fe ff7c 	bl	8000bf0 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	88fa      	ldrh	r2, [r7, #6]
 8001cfe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0e:	d108      	bne.n	8001d22 <HAL_UART_Receive+0x8a>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e003      	b.n	8001d2a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d32:	e043      	b.n	8001dbc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f84c 	bl	8001ddc <UART_WaitOnFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e042      	b.n	8001dd4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10c      	bne.n	8001d6e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	3302      	adds	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	e01f      	b.n	8001dae <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d007      	beq.n	8001d88 <HAL_UART_Receive+0xf0>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <HAL_UART_Receive+0xfe>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e008      	b.n	8001da8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1b6      	bne.n	8001d34 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b090      	sub	sp, #64	; 0x40
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dec:	e050      	b.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d04c      	beq.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8001dfc:	f7fe fef8 	bl	8000bf0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d241      	bcs.n	8001e90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	330c      	adds	r3, #12
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	e853 3f00 	ldrex	r3, [r3]
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e2c:	637a      	str	r2, [r7, #52]	; 0x34
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e34:	e841 2300 	strex	r3, r2, [r1]
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e5      	bne.n	8001e0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3314      	adds	r3, #20
 8001e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	e853 3f00 	ldrex	r3, [r3]
 8001e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e60:	623a      	str	r2, [r7, #32]
 8001e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e64:	69f9      	ldr	r1, [r7, #28]
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	e841 2300 	strex	r3, r2, [r1]
 8001e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e5      	bne.n	8001e40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e00f      	b.n	8001eb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d09f      	beq.n	8001dee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3740      	adds	r7, #64	; 0x40
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	b09f      	sub	sp, #124	; 0x7c
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	68d9      	ldr	r1, [r3, #12]
 8001ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	ea40 0301 	orr.w	r3, r0, r1
 8001ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001efc:	f021 010c 	bic.w	r1, r1, #12
 8001f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f06:	430b      	orrs	r3, r1
 8001f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f16:	6999      	ldr	r1, [r3, #24]
 8001f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	ea40 0301 	orr.w	r3, r0, r1
 8001f20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4bc5      	ldr	r3, [pc, #788]	; (800223c <UART_SetConfig+0x384>)
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d004      	beq.n	8001f36 <UART_SetConfig+0x7e>
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4bc3      	ldr	r3, [pc, #780]	; (8002240 <UART_SetConfig+0x388>)
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d103      	bne.n	8001f3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f36:	f7ff fda1 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8001f3a:	6778      	str	r0, [r7, #116]	; 0x74
 8001f3c:	e002      	b.n	8001f44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f3e:	f7ff fd89 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8001f42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4c:	f040 80b6 	bne.w	80020bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f52:	461c      	mov	r4, r3
 8001f54:	f04f 0500 	mov.w	r5, #0
 8001f58:	4622      	mov	r2, r4
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	1891      	adds	r1, r2, r2
 8001f5e:	6439      	str	r1, [r7, #64]	; 0x40
 8001f60:	415b      	adcs	r3, r3
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
 8001f64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f68:	1912      	adds	r2, r2, r4
 8001f6a:	eb45 0303 	adc.w	r3, r5, r3
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	00d9      	lsls	r1, r3, #3
 8001f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f7c:	00d0      	lsls	r0, r2, #3
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	1911      	adds	r1, r2, r4
 8001f84:	6639      	str	r1, [r7, #96]	; 0x60
 8001f86:	416b      	adcs	r3, r5
 8001f88:	667b      	str	r3, [r7, #100]	; 0x64
 8001f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	1891      	adds	r1, r2, r2
 8001f96:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f98:	415b      	adcs	r3, r3
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fa0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fa4:	f7fe f96c 	bl	8000280 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4ba5      	ldr	r3, [pc, #660]	; (8002244 <UART_SetConfig+0x38c>)
 8001fae:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	011e      	lsls	r6, r3, #4
 8001fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb8:	461c      	mov	r4, r3
 8001fba:	f04f 0500 	mov.w	r5, #0
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	1891      	adds	r1, r2, r2
 8001fc4:	6339      	str	r1, [r7, #48]	; 0x30
 8001fc6:	415b      	adcs	r3, r3
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fce:	1912      	adds	r2, r2, r4
 8001fd0:	eb45 0303 	adc.w	r3, r5, r3
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f04f 0100 	mov.w	r1, #0
 8001fdc:	00d9      	lsls	r1, r3, #3
 8001fde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fe2:	00d0      	lsls	r0, r2, #3
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	1911      	adds	r1, r2, r4
 8001fea:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fec:	416b      	adcs	r3, r5
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	1891      	adds	r1, r2, r2
 8001ffc:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ffe:	415b      	adcs	r3, r3
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002006:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800200a:	f7fe f939 	bl	8000280 <__aeabi_uldivmod>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4b8c      	ldr	r3, [pc, #560]	; (8002244 <UART_SetConfig+0x38c>)
 8002014:	fba3 1302 	umull	r1, r3, r3, r2
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	2164      	movs	r1, #100	; 0x64
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	3332      	adds	r3, #50	; 0x32
 8002026:	4a87      	ldr	r2, [pc, #540]	; (8002244 <UART_SetConfig+0x38c>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002034:	441e      	add	r6, r3
 8002036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002038:	4618      	mov	r0, r3
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	1894      	adds	r4, r2, r2
 8002044:	623c      	str	r4, [r7, #32]
 8002046:	415b      	adcs	r3, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800204e:	1812      	adds	r2, r2, r0
 8002050:	eb41 0303 	adc.w	r3, r1, r3
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	f04f 0500 	mov.w	r5, #0
 800205c:	00dd      	lsls	r5, r3, #3
 800205e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002062:	00d4      	lsls	r4, r2, #3
 8002064:	4622      	mov	r2, r4
 8002066:	462b      	mov	r3, r5
 8002068:	1814      	adds	r4, r2, r0
 800206a:	653c      	str	r4, [r7, #80]	; 0x50
 800206c:	414b      	adcs	r3, r1
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	461a      	mov	r2, r3
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	1891      	adds	r1, r2, r2
 800207c:	61b9      	str	r1, [r7, #24]
 800207e:	415b      	adcs	r3, r3
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002086:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800208a:	f7fe f8f9 	bl	8000280 <__aeabi_uldivmod>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <UART_SetConfig+0x38c>)
 8002094:	fba3 1302 	umull	r1, r3, r3, r2
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	2164      	movs	r1, #100	; 0x64
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	3332      	adds	r3, #50	; 0x32
 80020a6:	4a67      	ldr	r2, [pc, #412]	; (8002244 <UART_SetConfig+0x38c>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	f003 0207 	and.w	r2, r3, #7
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4432      	add	r2, r6
 80020b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020ba:	e0b9      	b.n	8002230 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020be:	461c      	mov	r4, r3
 80020c0:	f04f 0500 	mov.w	r5, #0
 80020c4:	4622      	mov	r2, r4
 80020c6:	462b      	mov	r3, r5
 80020c8:	1891      	adds	r1, r2, r2
 80020ca:	6139      	str	r1, [r7, #16]
 80020cc:	415b      	adcs	r3, r3
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020d4:	1912      	adds	r2, r2, r4
 80020d6:	eb45 0303 	adc.w	r3, r5, r3
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	00d9      	lsls	r1, r3, #3
 80020e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020e8:	00d0      	lsls	r0, r2, #3
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	eb12 0804 	adds.w	r8, r2, r4
 80020f2:	eb43 0905 	adc.w	r9, r3, r5
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	008b      	lsls	r3, r1, #2
 800210a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800210e:	0082      	lsls	r2, r0, #2
 8002110:	4640      	mov	r0, r8
 8002112:	4649      	mov	r1, r9
 8002114:	f7fe f8b4 	bl	8000280 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <UART_SetConfig+0x38c>)
 800211e:	fba3 2302 	umull	r2, r3, r3, r2
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	011e      	lsls	r6, r3, #4
 8002126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002128:	4618      	mov	r0, r3
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	1894      	adds	r4, r2, r2
 8002134:	60bc      	str	r4, [r7, #8]
 8002136:	415b      	adcs	r3, r3
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213e:	1812      	adds	r2, r2, r0
 8002140:	eb41 0303 	adc.w	r3, r1, r3
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	f04f 0500 	mov.w	r5, #0
 800214c:	00dd      	lsls	r5, r3, #3
 800214e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002152:	00d4      	lsls	r4, r2, #3
 8002154:	4622      	mov	r2, r4
 8002156:	462b      	mov	r3, r5
 8002158:	1814      	adds	r4, r2, r0
 800215a:	64bc      	str	r4, [r7, #72]	; 0x48
 800215c:	414b      	adcs	r3, r1
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4618      	mov	r0, r3
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	008b      	lsls	r3, r1, #2
 8002174:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002178:	0082      	lsls	r2, r0, #2
 800217a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800217e:	f7fe f87f 	bl	8000280 <__aeabi_uldivmod>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <UART_SetConfig+0x38c>)
 8002188:	fba3 1302 	umull	r1, r3, r3, r2
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	2164      	movs	r1, #100	; 0x64
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	3332      	adds	r3, #50	; 0x32
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <UART_SetConfig+0x38c>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a6:	441e      	add	r6, r3
 80021a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021aa:	4618      	mov	r0, r3
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	1894      	adds	r4, r2, r2
 80021b6:	603c      	str	r4, [r7, #0]
 80021b8:	415b      	adcs	r3, r3
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021c0:	1812      	adds	r2, r2, r0
 80021c2:	eb41 0303 	adc.w	r3, r1, r3
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	f04f 0500 	mov.w	r5, #0
 80021ce:	00dd      	lsls	r5, r3, #3
 80021d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021d4:	00d4      	lsls	r4, r2, #3
 80021d6:	4622      	mov	r2, r4
 80021d8:	462b      	mov	r3, r5
 80021da:	eb12 0a00 	adds.w	sl, r2, r0
 80021de:	eb43 0b01 	adc.w	fp, r3, r1
 80021e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	008b      	lsls	r3, r1, #2
 80021f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021fa:	0082      	lsls	r2, r0, #2
 80021fc:	4650      	mov	r0, sl
 80021fe:	4659      	mov	r1, fp
 8002200:	f7fe f83e 	bl	8000280 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <UART_SetConfig+0x38c>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2164      	movs	r1, #100	; 0x64
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a09      	ldr	r2, [pc, #36]	; (8002244 <UART_SetConfig+0x38c>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4432      	add	r2, r6
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	377c      	adds	r7, #124	; 0x7c
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	40011400 	.word	0x40011400
 8002244:	51eb851f 	.word	0x51eb851f

08002248 <atoi>:
 8002248:	220a      	movs	r2, #10
 800224a:	2100      	movs	r1, #0
 800224c:	f000 b8d6 	b.w	80023fc <strtol>

08002250 <__errno>:
 8002250:	4b01      	ldr	r3, [pc, #4]	; (8002258 <__errno+0x8>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	2000000c 	.word	0x2000000c

0800225c <__libc_init_array>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	4d0d      	ldr	r5, [pc, #52]	; (8002294 <__libc_init_array+0x38>)
 8002260:	4c0d      	ldr	r4, [pc, #52]	; (8002298 <__libc_init_array+0x3c>)
 8002262:	1b64      	subs	r4, r4, r5
 8002264:	10a4      	asrs	r4, r4, #2
 8002266:	2600      	movs	r6, #0
 8002268:	42a6      	cmp	r6, r4
 800226a:	d109      	bne.n	8002280 <__libc_init_array+0x24>
 800226c:	4d0b      	ldr	r5, [pc, #44]	; (800229c <__libc_init_array+0x40>)
 800226e:	4c0c      	ldr	r4, [pc, #48]	; (80022a0 <__libc_init_array+0x44>)
 8002270:	f000 fcdc 	bl	8002c2c <_init>
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	2600      	movs	r6, #0
 800227a:	42a6      	cmp	r6, r4
 800227c:	d105      	bne.n	800228a <__libc_init_array+0x2e>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	f855 3b04 	ldr.w	r3, [r5], #4
 8002284:	4798      	blx	r3
 8002286:	3601      	adds	r6, #1
 8002288:	e7ee      	b.n	8002268 <__libc_init_array+0xc>
 800228a:	f855 3b04 	ldr.w	r3, [r5], #4
 800228e:	4798      	blx	r3
 8002290:	3601      	adds	r6, #1
 8002292:	e7f2      	b.n	800227a <__libc_init_array+0x1e>
 8002294:	08002eb0 	.word	0x08002eb0
 8002298:	08002eb0 	.word	0x08002eb0
 800229c:	08002eb0 	.word	0x08002eb0
 80022a0:	08002eb4 	.word	0x08002eb4

080022a4 <memset>:
 80022a4:	4402      	add	r2, r0
 80022a6:	4603      	mov	r3, r0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	f803 1b01 	strb.w	r1, [r3], #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <siprintf>:
 80022b4:	b40e      	push	{r1, r2, r3}
 80022b6:	b500      	push	{lr}
 80022b8:	b09c      	sub	sp, #112	; 0x70
 80022ba:	ab1d      	add	r3, sp, #116	; 0x74
 80022bc:	9002      	str	r0, [sp, #8]
 80022be:	9006      	str	r0, [sp, #24]
 80022c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <siprintf+0x38>)
 80022c6:	9107      	str	r1, [sp, #28]
 80022c8:	9104      	str	r1, [sp, #16]
 80022ca:	4909      	ldr	r1, [pc, #36]	; (80022f0 <siprintf+0x3c>)
 80022cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80022d0:	9105      	str	r1, [sp, #20]
 80022d2:	6800      	ldr	r0, [r0, #0]
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	a902      	add	r1, sp, #8
 80022d8:	f000 f8f6 	bl	80024c8 <_svfiprintf_r>
 80022dc:	9b02      	ldr	r3, [sp, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	b01c      	add	sp, #112	; 0x70
 80022e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022e8:	b003      	add	sp, #12
 80022ea:	4770      	bx	lr
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	ffff0208 	.word	0xffff0208

080022f4 <_strtol_l.isra.0>:
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022fa:	d001      	beq.n	8002300 <_strtol_l.isra.0+0xc>
 80022fc:	2b24      	cmp	r3, #36	; 0x24
 80022fe:	d906      	bls.n	800230e <_strtol_l.isra.0+0x1a>
 8002300:	f7ff ffa6 	bl	8002250 <__errno>
 8002304:	2316      	movs	r3, #22
 8002306:	6003      	str	r3, [r0, #0]
 8002308:	2000      	movs	r0, #0
 800230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230e:	4f3a      	ldr	r7, [pc, #232]	; (80023f8 <_strtol_l.isra.0+0x104>)
 8002310:	468e      	mov	lr, r1
 8002312:	4676      	mov	r6, lr
 8002314:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002318:	5de5      	ldrb	r5, [r4, r7]
 800231a:	f015 0508 	ands.w	r5, r5, #8
 800231e:	d1f8      	bne.n	8002312 <_strtol_l.isra.0+0x1e>
 8002320:	2c2d      	cmp	r4, #45	; 0x2d
 8002322:	d134      	bne.n	800238e <_strtol_l.isra.0+0x9a>
 8002324:	f89e 4000 	ldrb.w	r4, [lr]
 8002328:	f04f 0801 	mov.w	r8, #1
 800232c:	f106 0e02 	add.w	lr, r6, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05c      	beq.n	80023ee <_strtol_l.isra.0+0xfa>
 8002334:	2b10      	cmp	r3, #16
 8002336:	d10c      	bne.n	8002352 <_strtol_l.isra.0+0x5e>
 8002338:	2c30      	cmp	r4, #48	; 0x30
 800233a:	d10a      	bne.n	8002352 <_strtol_l.isra.0+0x5e>
 800233c:	f89e 4000 	ldrb.w	r4, [lr]
 8002340:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002344:	2c58      	cmp	r4, #88	; 0x58
 8002346:	d14d      	bne.n	80023e4 <_strtol_l.isra.0+0xf0>
 8002348:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800234c:	2310      	movs	r3, #16
 800234e:	f10e 0e02 	add.w	lr, lr, #2
 8002352:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002356:	f10c 3cff 	add.w	ip, ip, #4294967295
 800235a:	2600      	movs	r6, #0
 800235c:	fbbc f9f3 	udiv	r9, ip, r3
 8002360:	4635      	mov	r5, r6
 8002362:	fb03 ca19 	mls	sl, r3, r9, ip
 8002366:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800236a:	2f09      	cmp	r7, #9
 800236c:	d818      	bhi.n	80023a0 <_strtol_l.isra.0+0xac>
 800236e:	463c      	mov	r4, r7
 8002370:	42a3      	cmp	r3, r4
 8002372:	dd24      	ble.n	80023be <_strtol_l.isra.0+0xca>
 8002374:	2e00      	cmp	r6, #0
 8002376:	db1f      	blt.n	80023b8 <_strtol_l.isra.0+0xc4>
 8002378:	45a9      	cmp	r9, r5
 800237a:	d31d      	bcc.n	80023b8 <_strtol_l.isra.0+0xc4>
 800237c:	d101      	bne.n	8002382 <_strtol_l.isra.0+0x8e>
 800237e:	45a2      	cmp	sl, r4
 8002380:	db1a      	blt.n	80023b8 <_strtol_l.isra.0+0xc4>
 8002382:	fb05 4503 	mla	r5, r5, r3, r4
 8002386:	2601      	movs	r6, #1
 8002388:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800238c:	e7eb      	b.n	8002366 <_strtol_l.isra.0+0x72>
 800238e:	2c2b      	cmp	r4, #43	; 0x2b
 8002390:	bf08      	it	eq
 8002392:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002396:	46a8      	mov	r8, r5
 8002398:	bf08      	it	eq
 800239a:	f106 0e02 	addeq.w	lr, r6, #2
 800239e:	e7c7      	b.n	8002330 <_strtol_l.isra.0+0x3c>
 80023a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80023a4:	2f19      	cmp	r7, #25
 80023a6:	d801      	bhi.n	80023ac <_strtol_l.isra.0+0xb8>
 80023a8:	3c37      	subs	r4, #55	; 0x37
 80023aa:	e7e1      	b.n	8002370 <_strtol_l.isra.0+0x7c>
 80023ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80023b0:	2f19      	cmp	r7, #25
 80023b2:	d804      	bhi.n	80023be <_strtol_l.isra.0+0xca>
 80023b4:	3c57      	subs	r4, #87	; 0x57
 80023b6:	e7db      	b.n	8002370 <_strtol_l.isra.0+0x7c>
 80023b8:	f04f 36ff 	mov.w	r6, #4294967295
 80023bc:	e7e4      	b.n	8002388 <_strtol_l.isra.0+0x94>
 80023be:	2e00      	cmp	r6, #0
 80023c0:	da05      	bge.n	80023ce <_strtol_l.isra.0+0xda>
 80023c2:	2322      	movs	r3, #34	; 0x22
 80023c4:	6003      	str	r3, [r0, #0]
 80023c6:	4665      	mov	r5, ip
 80023c8:	b942      	cbnz	r2, 80023dc <_strtol_l.isra.0+0xe8>
 80023ca:	4628      	mov	r0, r5
 80023cc:	e79d      	b.n	800230a <_strtol_l.isra.0+0x16>
 80023ce:	f1b8 0f00 	cmp.w	r8, #0
 80023d2:	d000      	beq.n	80023d6 <_strtol_l.isra.0+0xe2>
 80023d4:	426d      	negs	r5, r5
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d0f7      	beq.n	80023ca <_strtol_l.isra.0+0xd6>
 80023da:	b10e      	cbz	r6, 80023e0 <_strtol_l.isra.0+0xec>
 80023dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80023e0:	6011      	str	r1, [r2, #0]
 80023e2:	e7f2      	b.n	80023ca <_strtol_l.isra.0+0xd6>
 80023e4:	2430      	movs	r4, #48	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1b3      	bne.n	8002352 <_strtol_l.isra.0+0x5e>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e7b1      	b.n	8002352 <_strtol_l.isra.0+0x5e>
 80023ee:	2c30      	cmp	r4, #48	; 0x30
 80023f0:	d0a4      	beq.n	800233c <_strtol_l.isra.0+0x48>
 80023f2:	230a      	movs	r3, #10
 80023f4:	e7ad      	b.n	8002352 <_strtol_l.isra.0+0x5e>
 80023f6:	bf00      	nop
 80023f8:	08002d75 	.word	0x08002d75

080023fc <strtol>:
 80023fc:	4613      	mov	r3, r2
 80023fe:	460a      	mov	r2, r1
 8002400:	4601      	mov	r1, r0
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <strtol+0x10>)
 8002404:	6800      	ldr	r0, [r0, #0]
 8002406:	f7ff bf75 	b.w	80022f4 <_strtol_l.isra.0>
 800240a:	bf00      	nop
 800240c:	2000000c 	.word	0x2000000c

08002410 <__ssputs_r>:
 8002410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002414:	688e      	ldr	r6, [r1, #8]
 8002416:	429e      	cmp	r6, r3
 8002418:	4682      	mov	sl, r0
 800241a:	460c      	mov	r4, r1
 800241c:	4690      	mov	r8, r2
 800241e:	461f      	mov	r7, r3
 8002420:	d838      	bhi.n	8002494 <__ssputs_r+0x84>
 8002422:	898a      	ldrh	r2, [r1, #12]
 8002424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002428:	d032      	beq.n	8002490 <__ssputs_r+0x80>
 800242a:	6825      	ldr	r5, [r4, #0]
 800242c:	6909      	ldr	r1, [r1, #16]
 800242e:	eba5 0901 	sub.w	r9, r5, r1
 8002432:	6965      	ldr	r5, [r4, #20]
 8002434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800243c:	3301      	adds	r3, #1
 800243e:	444b      	add	r3, r9
 8002440:	106d      	asrs	r5, r5, #1
 8002442:	429d      	cmp	r5, r3
 8002444:	bf38      	it	cc
 8002446:	461d      	movcc	r5, r3
 8002448:	0553      	lsls	r3, r2, #21
 800244a:	d531      	bpl.n	80024b0 <__ssputs_r+0xa0>
 800244c:	4629      	mov	r1, r5
 800244e:	f000 fb47 	bl	8002ae0 <_malloc_r>
 8002452:	4606      	mov	r6, r0
 8002454:	b950      	cbnz	r0, 800246c <__ssputs_r+0x5c>
 8002456:	230c      	movs	r3, #12
 8002458:	f8ca 3000 	str.w	r3, [sl]
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002462:	81a3      	strh	r3, [r4, #12]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800246c:	6921      	ldr	r1, [r4, #16]
 800246e:	464a      	mov	r2, r9
 8002470:	f000 fabe 	bl	80029f0 <memcpy>
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800247a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247e:	81a3      	strh	r3, [r4, #12]
 8002480:	6126      	str	r6, [r4, #16]
 8002482:	6165      	str	r5, [r4, #20]
 8002484:	444e      	add	r6, r9
 8002486:	eba5 0509 	sub.w	r5, r5, r9
 800248a:	6026      	str	r6, [r4, #0]
 800248c:	60a5      	str	r5, [r4, #8]
 800248e:	463e      	mov	r6, r7
 8002490:	42be      	cmp	r6, r7
 8002492:	d900      	bls.n	8002496 <__ssputs_r+0x86>
 8002494:	463e      	mov	r6, r7
 8002496:	4632      	mov	r2, r6
 8002498:	6820      	ldr	r0, [r4, #0]
 800249a:	4641      	mov	r1, r8
 800249c:	f000 fab6 	bl	8002a0c <memmove>
 80024a0:	68a3      	ldr	r3, [r4, #8]
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	1b9b      	subs	r3, r3, r6
 80024a6:	4432      	add	r2, r6
 80024a8:	60a3      	str	r3, [r4, #8]
 80024aa:	6022      	str	r2, [r4, #0]
 80024ac:	2000      	movs	r0, #0
 80024ae:	e7db      	b.n	8002468 <__ssputs_r+0x58>
 80024b0:	462a      	mov	r2, r5
 80024b2:	f000 fb6f 	bl	8002b94 <_realloc_r>
 80024b6:	4606      	mov	r6, r0
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d1e1      	bne.n	8002480 <__ssputs_r+0x70>
 80024bc:	6921      	ldr	r1, [r4, #16]
 80024be:	4650      	mov	r0, sl
 80024c0:	f000 fabe 	bl	8002a40 <_free_r>
 80024c4:	e7c7      	b.n	8002456 <__ssputs_r+0x46>
	...

080024c8 <_svfiprintf_r>:
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	4698      	mov	r8, r3
 80024ce:	898b      	ldrh	r3, [r1, #12]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	b09d      	sub	sp, #116	; 0x74
 80024d4:	4607      	mov	r7, r0
 80024d6:	460d      	mov	r5, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	d50e      	bpl.n	80024fa <_svfiprintf_r+0x32>
 80024dc:	690b      	ldr	r3, [r1, #16]
 80024de:	b963      	cbnz	r3, 80024fa <_svfiprintf_r+0x32>
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	f000 fafd 	bl	8002ae0 <_malloc_r>
 80024e6:	6028      	str	r0, [r5, #0]
 80024e8:	6128      	str	r0, [r5, #16]
 80024ea:	b920      	cbnz	r0, 80024f6 <_svfiprintf_r+0x2e>
 80024ec:	230c      	movs	r3, #12
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	e0d1      	b.n	800269a <_svfiprintf_r+0x1d2>
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	616b      	str	r3, [r5, #20]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9309      	str	r3, [sp, #36]	; 0x24
 80024fe:	2320      	movs	r3, #32
 8002500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002504:	f8cd 800c 	str.w	r8, [sp, #12]
 8002508:	2330      	movs	r3, #48	; 0x30
 800250a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80026b4 <_svfiprintf_r+0x1ec>
 800250e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002512:	f04f 0901 	mov.w	r9, #1
 8002516:	4623      	mov	r3, r4
 8002518:	469a      	mov	sl, r3
 800251a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800251e:	b10a      	cbz	r2, 8002524 <_svfiprintf_r+0x5c>
 8002520:	2a25      	cmp	r2, #37	; 0x25
 8002522:	d1f9      	bne.n	8002518 <_svfiprintf_r+0x50>
 8002524:	ebba 0b04 	subs.w	fp, sl, r4
 8002528:	d00b      	beq.n	8002542 <_svfiprintf_r+0x7a>
 800252a:	465b      	mov	r3, fp
 800252c:	4622      	mov	r2, r4
 800252e:	4629      	mov	r1, r5
 8002530:	4638      	mov	r0, r7
 8002532:	f7ff ff6d 	bl	8002410 <__ssputs_r>
 8002536:	3001      	adds	r0, #1
 8002538:	f000 80aa 	beq.w	8002690 <_svfiprintf_r+0x1c8>
 800253c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800253e:	445a      	add	r2, fp
 8002540:	9209      	str	r2, [sp, #36]	; 0x24
 8002542:	f89a 3000 	ldrb.w	r3, [sl]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a2 	beq.w	8002690 <_svfiprintf_r+0x1c8>
 800254c:	2300      	movs	r3, #0
 800254e:	f04f 32ff 	mov.w	r2, #4294967295
 8002552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002556:	f10a 0a01 	add.w	sl, sl, #1
 800255a:	9304      	str	r3, [sp, #16]
 800255c:	9307      	str	r3, [sp, #28]
 800255e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002562:	931a      	str	r3, [sp, #104]	; 0x68
 8002564:	4654      	mov	r4, sl
 8002566:	2205      	movs	r2, #5
 8002568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800256c:	4851      	ldr	r0, [pc, #324]	; (80026b4 <_svfiprintf_r+0x1ec>)
 800256e:	f7fd fe37 	bl	80001e0 <memchr>
 8002572:	9a04      	ldr	r2, [sp, #16]
 8002574:	b9d8      	cbnz	r0, 80025ae <_svfiprintf_r+0xe6>
 8002576:	06d0      	lsls	r0, r2, #27
 8002578:	bf44      	itt	mi
 800257a:	2320      	movmi	r3, #32
 800257c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002580:	0711      	lsls	r1, r2, #28
 8002582:	bf44      	itt	mi
 8002584:	232b      	movmi	r3, #43	; 0x2b
 8002586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800258a:	f89a 3000 	ldrb.w	r3, [sl]
 800258e:	2b2a      	cmp	r3, #42	; 0x2a
 8002590:	d015      	beq.n	80025be <_svfiprintf_r+0xf6>
 8002592:	9a07      	ldr	r2, [sp, #28]
 8002594:	4654      	mov	r4, sl
 8002596:	2000      	movs	r0, #0
 8002598:	f04f 0c0a 	mov.w	ip, #10
 800259c:	4621      	mov	r1, r4
 800259e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025a2:	3b30      	subs	r3, #48	; 0x30
 80025a4:	2b09      	cmp	r3, #9
 80025a6:	d94e      	bls.n	8002646 <_svfiprintf_r+0x17e>
 80025a8:	b1b0      	cbz	r0, 80025d8 <_svfiprintf_r+0x110>
 80025aa:	9207      	str	r2, [sp, #28]
 80025ac:	e014      	b.n	80025d8 <_svfiprintf_r+0x110>
 80025ae:	eba0 0308 	sub.w	r3, r0, r8
 80025b2:	fa09 f303 	lsl.w	r3, r9, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	9304      	str	r3, [sp, #16]
 80025ba:	46a2      	mov	sl, r4
 80025bc:	e7d2      	b.n	8002564 <_svfiprintf_r+0x9c>
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	1d19      	adds	r1, r3, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	9103      	str	r1, [sp, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bfbb      	ittet	lt
 80025ca:	425b      	neglt	r3, r3
 80025cc:	f042 0202 	orrlt.w	r2, r2, #2
 80025d0:	9307      	strge	r3, [sp, #28]
 80025d2:	9307      	strlt	r3, [sp, #28]
 80025d4:	bfb8      	it	lt
 80025d6:	9204      	strlt	r2, [sp, #16]
 80025d8:	7823      	ldrb	r3, [r4, #0]
 80025da:	2b2e      	cmp	r3, #46	; 0x2e
 80025dc:	d10c      	bne.n	80025f8 <_svfiprintf_r+0x130>
 80025de:	7863      	ldrb	r3, [r4, #1]
 80025e0:	2b2a      	cmp	r3, #42	; 0x2a
 80025e2:	d135      	bne.n	8002650 <_svfiprintf_r+0x188>
 80025e4:	9b03      	ldr	r3, [sp, #12]
 80025e6:	1d1a      	adds	r2, r3, #4
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	9203      	str	r2, [sp, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bfb8      	it	lt
 80025f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80025f4:	3402      	adds	r4, #2
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80026c4 <_svfiprintf_r+0x1fc>
 80025fc:	7821      	ldrb	r1, [r4, #0]
 80025fe:	2203      	movs	r2, #3
 8002600:	4650      	mov	r0, sl
 8002602:	f7fd fded 	bl	80001e0 <memchr>
 8002606:	b140      	cbz	r0, 800261a <_svfiprintf_r+0x152>
 8002608:	2340      	movs	r3, #64	; 0x40
 800260a:	eba0 000a 	sub.w	r0, r0, sl
 800260e:	fa03 f000 	lsl.w	r0, r3, r0
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	4303      	orrs	r3, r0
 8002616:	3401      	adds	r4, #1
 8002618:	9304      	str	r3, [sp, #16]
 800261a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800261e:	4826      	ldr	r0, [pc, #152]	; (80026b8 <_svfiprintf_r+0x1f0>)
 8002620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002624:	2206      	movs	r2, #6
 8002626:	f7fd fddb 	bl	80001e0 <memchr>
 800262a:	2800      	cmp	r0, #0
 800262c:	d038      	beq.n	80026a0 <_svfiprintf_r+0x1d8>
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <_svfiprintf_r+0x1f4>)
 8002630:	bb1b      	cbnz	r3, 800267a <_svfiprintf_r+0x1b2>
 8002632:	9b03      	ldr	r3, [sp, #12]
 8002634:	3307      	adds	r3, #7
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	3308      	adds	r3, #8
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002640:	4433      	add	r3, r6
 8002642:	9309      	str	r3, [sp, #36]	; 0x24
 8002644:	e767      	b.n	8002516 <_svfiprintf_r+0x4e>
 8002646:	fb0c 3202 	mla	r2, ip, r2, r3
 800264a:	460c      	mov	r4, r1
 800264c:	2001      	movs	r0, #1
 800264e:	e7a5      	b.n	800259c <_svfiprintf_r+0xd4>
 8002650:	2300      	movs	r3, #0
 8002652:	3401      	adds	r4, #1
 8002654:	9305      	str	r3, [sp, #20]
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 0c0a 	mov.w	ip, #10
 800265c:	4620      	mov	r0, r4
 800265e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002662:	3a30      	subs	r2, #48	; 0x30
 8002664:	2a09      	cmp	r2, #9
 8002666:	d903      	bls.n	8002670 <_svfiprintf_r+0x1a8>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0c5      	beq.n	80025f8 <_svfiprintf_r+0x130>
 800266c:	9105      	str	r1, [sp, #20]
 800266e:	e7c3      	b.n	80025f8 <_svfiprintf_r+0x130>
 8002670:	fb0c 2101 	mla	r1, ip, r1, r2
 8002674:	4604      	mov	r4, r0
 8002676:	2301      	movs	r3, #1
 8002678:	e7f0      	b.n	800265c <_svfiprintf_r+0x194>
 800267a:	ab03      	add	r3, sp, #12
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	462a      	mov	r2, r5
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <_svfiprintf_r+0x1f8>)
 8002682:	a904      	add	r1, sp, #16
 8002684:	4638      	mov	r0, r7
 8002686:	f3af 8000 	nop.w
 800268a:	1c42      	adds	r2, r0, #1
 800268c:	4606      	mov	r6, r0
 800268e:	d1d6      	bne.n	800263e <_svfiprintf_r+0x176>
 8002690:	89ab      	ldrh	r3, [r5, #12]
 8002692:	065b      	lsls	r3, r3, #25
 8002694:	f53f af2c 	bmi.w	80024f0 <_svfiprintf_r+0x28>
 8002698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800269a:	b01d      	add	sp, #116	; 0x74
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a0:	ab03      	add	r3, sp, #12
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	462a      	mov	r2, r5
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <_svfiprintf_r+0x1f8>)
 80026a8:	a904      	add	r1, sp, #16
 80026aa:	4638      	mov	r0, r7
 80026ac:	f000 f87a 	bl	80027a4 <_printf_i>
 80026b0:	e7eb      	b.n	800268a <_svfiprintf_r+0x1c2>
 80026b2:	bf00      	nop
 80026b4:	08002e75 	.word	0x08002e75
 80026b8:	08002e7f 	.word	0x08002e7f
 80026bc:	00000000 	.word	0x00000000
 80026c0:	08002411 	.word	0x08002411
 80026c4:	08002e7b 	.word	0x08002e7b

080026c8 <_printf_common>:
 80026c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026cc:	4616      	mov	r6, r2
 80026ce:	4699      	mov	r9, r3
 80026d0:	688a      	ldr	r2, [r1, #8]
 80026d2:	690b      	ldr	r3, [r1, #16]
 80026d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026d8:	4293      	cmp	r3, r2
 80026da:	bfb8      	it	lt
 80026dc:	4613      	movlt	r3, r2
 80026de:	6033      	str	r3, [r6, #0]
 80026e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026e4:	4607      	mov	r7, r0
 80026e6:	460c      	mov	r4, r1
 80026e8:	b10a      	cbz	r2, 80026ee <_printf_common+0x26>
 80026ea:	3301      	adds	r3, #1
 80026ec:	6033      	str	r3, [r6, #0]
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	0699      	lsls	r1, r3, #26
 80026f2:	bf42      	ittt	mi
 80026f4:	6833      	ldrmi	r3, [r6, #0]
 80026f6:	3302      	addmi	r3, #2
 80026f8:	6033      	strmi	r3, [r6, #0]
 80026fa:	6825      	ldr	r5, [r4, #0]
 80026fc:	f015 0506 	ands.w	r5, r5, #6
 8002700:	d106      	bne.n	8002710 <_printf_common+0x48>
 8002702:	f104 0a19 	add.w	sl, r4, #25
 8002706:	68e3      	ldr	r3, [r4, #12]
 8002708:	6832      	ldr	r2, [r6, #0]
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	42ab      	cmp	r3, r5
 800270e:	dc26      	bgt.n	800275e <_printf_common+0x96>
 8002710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002714:	1e13      	subs	r3, r2, #0
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	bf18      	it	ne
 800271a:	2301      	movne	r3, #1
 800271c:	0692      	lsls	r2, r2, #26
 800271e:	d42b      	bmi.n	8002778 <_printf_common+0xb0>
 8002720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002724:	4649      	mov	r1, r9
 8002726:	4638      	mov	r0, r7
 8002728:	47c0      	blx	r8
 800272a:	3001      	adds	r0, #1
 800272c:	d01e      	beq.n	800276c <_printf_common+0xa4>
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	68e5      	ldr	r5, [r4, #12]
 8002732:	6832      	ldr	r2, [r6, #0]
 8002734:	f003 0306 	and.w	r3, r3, #6
 8002738:	2b04      	cmp	r3, #4
 800273a:	bf08      	it	eq
 800273c:	1aad      	subeq	r5, r5, r2
 800273e:	68a3      	ldr	r3, [r4, #8]
 8002740:	6922      	ldr	r2, [r4, #16]
 8002742:	bf0c      	ite	eq
 8002744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002748:	2500      	movne	r5, #0
 800274a:	4293      	cmp	r3, r2
 800274c:	bfc4      	itt	gt
 800274e:	1a9b      	subgt	r3, r3, r2
 8002750:	18ed      	addgt	r5, r5, r3
 8002752:	2600      	movs	r6, #0
 8002754:	341a      	adds	r4, #26
 8002756:	42b5      	cmp	r5, r6
 8002758:	d11a      	bne.n	8002790 <_printf_common+0xc8>
 800275a:	2000      	movs	r0, #0
 800275c:	e008      	b.n	8002770 <_printf_common+0xa8>
 800275e:	2301      	movs	r3, #1
 8002760:	4652      	mov	r2, sl
 8002762:	4649      	mov	r1, r9
 8002764:	4638      	mov	r0, r7
 8002766:	47c0      	blx	r8
 8002768:	3001      	adds	r0, #1
 800276a:	d103      	bne.n	8002774 <_printf_common+0xac>
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002774:	3501      	adds	r5, #1
 8002776:	e7c6      	b.n	8002706 <_printf_common+0x3e>
 8002778:	18e1      	adds	r1, r4, r3
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	2030      	movs	r0, #48	; 0x30
 800277e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002782:	4422      	add	r2, r4
 8002784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800278c:	3302      	adds	r3, #2
 800278e:	e7c7      	b.n	8002720 <_printf_common+0x58>
 8002790:	2301      	movs	r3, #1
 8002792:	4622      	mov	r2, r4
 8002794:	4649      	mov	r1, r9
 8002796:	4638      	mov	r0, r7
 8002798:	47c0      	blx	r8
 800279a:	3001      	adds	r0, #1
 800279c:	d0e6      	beq.n	800276c <_printf_common+0xa4>
 800279e:	3601      	adds	r6, #1
 80027a0:	e7d9      	b.n	8002756 <_printf_common+0x8e>
	...

080027a4 <_printf_i>:
 80027a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027a8:	460c      	mov	r4, r1
 80027aa:	4691      	mov	r9, r2
 80027ac:	7e27      	ldrb	r7, [r4, #24]
 80027ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80027b0:	2f78      	cmp	r7, #120	; 0x78
 80027b2:	4680      	mov	r8, r0
 80027b4:	469a      	mov	sl, r3
 80027b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027ba:	d807      	bhi.n	80027cc <_printf_i+0x28>
 80027bc:	2f62      	cmp	r7, #98	; 0x62
 80027be:	d80a      	bhi.n	80027d6 <_printf_i+0x32>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	f000 80d8 	beq.w	8002976 <_printf_i+0x1d2>
 80027c6:	2f58      	cmp	r7, #88	; 0x58
 80027c8:	f000 80a3 	beq.w	8002912 <_printf_i+0x16e>
 80027cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80027d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027d4:	e03a      	b.n	800284c <_printf_i+0xa8>
 80027d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027da:	2b15      	cmp	r3, #21
 80027dc:	d8f6      	bhi.n	80027cc <_printf_i+0x28>
 80027de:	a001      	add	r0, pc, #4	; (adr r0, 80027e4 <_printf_i+0x40>)
 80027e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80027e4:	0800283d 	.word	0x0800283d
 80027e8:	08002851 	.word	0x08002851
 80027ec:	080027cd 	.word	0x080027cd
 80027f0:	080027cd 	.word	0x080027cd
 80027f4:	080027cd 	.word	0x080027cd
 80027f8:	080027cd 	.word	0x080027cd
 80027fc:	08002851 	.word	0x08002851
 8002800:	080027cd 	.word	0x080027cd
 8002804:	080027cd 	.word	0x080027cd
 8002808:	080027cd 	.word	0x080027cd
 800280c:	080027cd 	.word	0x080027cd
 8002810:	0800295d 	.word	0x0800295d
 8002814:	08002881 	.word	0x08002881
 8002818:	0800293f 	.word	0x0800293f
 800281c:	080027cd 	.word	0x080027cd
 8002820:	080027cd 	.word	0x080027cd
 8002824:	0800297f 	.word	0x0800297f
 8002828:	080027cd 	.word	0x080027cd
 800282c:	08002881 	.word	0x08002881
 8002830:	080027cd 	.word	0x080027cd
 8002834:	080027cd 	.word	0x080027cd
 8002838:	08002947 	.word	0x08002947
 800283c:	680b      	ldr	r3, [r1, #0]
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	600a      	str	r2, [r1, #0]
 8002844:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800284c:	2301      	movs	r3, #1
 800284e:	e0a3      	b.n	8002998 <_printf_i+0x1f4>
 8002850:	6825      	ldr	r5, [r4, #0]
 8002852:	6808      	ldr	r0, [r1, #0]
 8002854:	062e      	lsls	r6, r5, #24
 8002856:	f100 0304 	add.w	r3, r0, #4
 800285a:	d50a      	bpl.n	8002872 <_printf_i+0xce>
 800285c:	6805      	ldr	r5, [r0, #0]
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	2d00      	cmp	r5, #0
 8002862:	da03      	bge.n	800286c <_printf_i+0xc8>
 8002864:	232d      	movs	r3, #45	; 0x2d
 8002866:	426d      	negs	r5, r5
 8002868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800286c:	485e      	ldr	r0, [pc, #376]	; (80029e8 <_printf_i+0x244>)
 800286e:	230a      	movs	r3, #10
 8002870:	e019      	b.n	80028a6 <_printf_i+0x102>
 8002872:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002876:	6805      	ldr	r5, [r0, #0]
 8002878:	600b      	str	r3, [r1, #0]
 800287a:	bf18      	it	ne
 800287c:	b22d      	sxthne	r5, r5
 800287e:	e7ef      	b.n	8002860 <_printf_i+0xbc>
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	6825      	ldr	r5, [r4, #0]
 8002884:	1d18      	adds	r0, r3, #4
 8002886:	6008      	str	r0, [r1, #0]
 8002888:	0628      	lsls	r0, r5, #24
 800288a:	d501      	bpl.n	8002890 <_printf_i+0xec>
 800288c:	681d      	ldr	r5, [r3, #0]
 800288e:	e002      	b.n	8002896 <_printf_i+0xf2>
 8002890:	0669      	lsls	r1, r5, #25
 8002892:	d5fb      	bpl.n	800288c <_printf_i+0xe8>
 8002894:	881d      	ldrh	r5, [r3, #0]
 8002896:	4854      	ldr	r0, [pc, #336]	; (80029e8 <_printf_i+0x244>)
 8002898:	2f6f      	cmp	r7, #111	; 0x6f
 800289a:	bf0c      	ite	eq
 800289c:	2308      	moveq	r3, #8
 800289e:	230a      	movne	r3, #10
 80028a0:	2100      	movs	r1, #0
 80028a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028a6:	6866      	ldr	r6, [r4, #4]
 80028a8:	60a6      	str	r6, [r4, #8]
 80028aa:	2e00      	cmp	r6, #0
 80028ac:	bfa2      	ittt	ge
 80028ae:	6821      	ldrge	r1, [r4, #0]
 80028b0:	f021 0104 	bicge.w	r1, r1, #4
 80028b4:	6021      	strge	r1, [r4, #0]
 80028b6:	b90d      	cbnz	r5, 80028bc <_printf_i+0x118>
 80028b8:	2e00      	cmp	r6, #0
 80028ba:	d04d      	beq.n	8002958 <_printf_i+0x1b4>
 80028bc:	4616      	mov	r6, r2
 80028be:	fbb5 f1f3 	udiv	r1, r5, r3
 80028c2:	fb03 5711 	mls	r7, r3, r1, r5
 80028c6:	5dc7      	ldrb	r7, [r0, r7]
 80028c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028cc:	462f      	mov	r7, r5
 80028ce:	42bb      	cmp	r3, r7
 80028d0:	460d      	mov	r5, r1
 80028d2:	d9f4      	bls.n	80028be <_printf_i+0x11a>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d10b      	bne.n	80028f0 <_printf_i+0x14c>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	07df      	lsls	r7, r3, #31
 80028dc:	d508      	bpl.n	80028f0 <_printf_i+0x14c>
 80028de:	6923      	ldr	r3, [r4, #16]
 80028e0:	6861      	ldr	r1, [r4, #4]
 80028e2:	4299      	cmp	r1, r3
 80028e4:	bfde      	ittt	le
 80028e6:	2330      	movle	r3, #48	; 0x30
 80028e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028f0:	1b92      	subs	r2, r2, r6
 80028f2:	6122      	str	r2, [r4, #16]
 80028f4:	f8cd a000 	str.w	sl, [sp]
 80028f8:	464b      	mov	r3, r9
 80028fa:	aa03      	add	r2, sp, #12
 80028fc:	4621      	mov	r1, r4
 80028fe:	4640      	mov	r0, r8
 8002900:	f7ff fee2 	bl	80026c8 <_printf_common>
 8002904:	3001      	adds	r0, #1
 8002906:	d14c      	bne.n	80029a2 <_printf_i+0x1fe>
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	b004      	add	sp, #16
 800290e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002912:	4835      	ldr	r0, [pc, #212]	; (80029e8 <_printf_i+0x244>)
 8002914:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	680e      	ldr	r6, [r1, #0]
 800291c:	061f      	lsls	r7, r3, #24
 800291e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002922:	600e      	str	r6, [r1, #0]
 8002924:	d514      	bpl.n	8002950 <_printf_i+0x1ac>
 8002926:	07d9      	lsls	r1, r3, #31
 8002928:	bf44      	itt	mi
 800292a:	f043 0320 	orrmi.w	r3, r3, #32
 800292e:	6023      	strmi	r3, [r4, #0]
 8002930:	b91d      	cbnz	r5, 800293a <_printf_i+0x196>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	f023 0320 	bic.w	r3, r3, #32
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	2310      	movs	r3, #16
 800293c:	e7b0      	b.n	80028a0 <_printf_i+0xfc>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	f043 0320 	orr.w	r3, r3, #32
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	2378      	movs	r3, #120	; 0x78
 8002948:	4828      	ldr	r0, [pc, #160]	; (80029ec <_printf_i+0x248>)
 800294a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800294e:	e7e3      	b.n	8002918 <_printf_i+0x174>
 8002950:	065e      	lsls	r6, r3, #25
 8002952:	bf48      	it	mi
 8002954:	b2ad      	uxthmi	r5, r5
 8002956:	e7e6      	b.n	8002926 <_printf_i+0x182>
 8002958:	4616      	mov	r6, r2
 800295a:	e7bb      	b.n	80028d4 <_printf_i+0x130>
 800295c:	680b      	ldr	r3, [r1, #0]
 800295e:	6826      	ldr	r6, [r4, #0]
 8002960:	6960      	ldr	r0, [r4, #20]
 8002962:	1d1d      	adds	r5, r3, #4
 8002964:	600d      	str	r5, [r1, #0]
 8002966:	0635      	lsls	r5, r6, #24
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	d501      	bpl.n	8002970 <_printf_i+0x1cc>
 800296c:	6018      	str	r0, [r3, #0]
 800296e:	e002      	b.n	8002976 <_printf_i+0x1d2>
 8002970:	0671      	lsls	r1, r6, #25
 8002972:	d5fb      	bpl.n	800296c <_printf_i+0x1c8>
 8002974:	8018      	strh	r0, [r3, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	6123      	str	r3, [r4, #16]
 800297a:	4616      	mov	r6, r2
 800297c:	e7ba      	b.n	80028f4 <_printf_i+0x150>
 800297e:	680b      	ldr	r3, [r1, #0]
 8002980:	1d1a      	adds	r2, r3, #4
 8002982:	600a      	str	r2, [r1, #0]
 8002984:	681e      	ldr	r6, [r3, #0]
 8002986:	6862      	ldr	r2, [r4, #4]
 8002988:	2100      	movs	r1, #0
 800298a:	4630      	mov	r0, r6
 800298c:	f7fd fc28 	bl	80001e0 <memchr>
 8002990:	b108      	cbz	r0, 8002996 <_printf_i+0x1f2>
 8002992:	1b80      	subs	r0, r0, r6
 8002994:	6060      	str	r0, [r4, #4]
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	6123      	str	r3, [r4, #16]
 800299a:	2300      	movs	r3, #0
 800299c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029a0:	e7a8      	b.n	80028f4 <_printf_i+0x150>
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	4632      	mov	r2, r6
 80029a6:	4649      	mov	r1, r9
 80029a8:	4640      	mov	r0, r8
 80029aa:	47d0      	blx	sl
 80029ac:	3001      	adds	r0, #1
 80029ae:	d0ab      	beq.n	8002908 <_printf_i+0x164>
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	079b      	lsls	r3, r3, #30
 80029b4:	d413      	bmi.n	80029de <_printf_i+0x23a>
 80029b6:	68e0      	ldr	r0, [r4, #12]
 80029b8:	9b03      	ldr	r3, [sp, #12]
 80029ba:	4298      	cmp	r0, r3
 80029bc:	bfb8      	it	lt
 80029be:	4618      	movlt	r0, r3
 80029c0:	e7a4      	b.n	800290c <_printf_i+0x168>
 80029c2:	2301      	movs	r3, #1
 80029c4:	4632      	mov	r2, r6
 80029c6:	4649      	mov	r1, r9
 80029c8:	4640      	mov	r0, r8
 80029ca:	47d0      	blx	sl
 80029cc:	3001      	adds	r0, #1
 80029ce:	d09b      	beq.n	8002908 <_printf_i+0x164>
 80029d0:	3501      	adds	r5, #1
 80029d2:	68e3      	ldr	r3, [r4, #12]
 80029d4:	9903      	ldr	r1, [sp, #12]
 80029d6:	1a5b      	subs	r3, r3, r1
 80029d8:	42ab      	cmp	r3, r5
 80029da:	dcf2      	bgt.n	80029c2 <_printf_i+0x21e>
 80029dc:	e7eb      	b.n	80029b6 <_printf_i+0x212>
 80029de:	2500      	movs	r5, #0
 80029e0:	f104 0619 	add.w	r6, r4, #25
 80029e4:	e7f5      	b.n	80029d2 <_printf_i+0x22e>
 80029e6:	bf00      	nop
 80029e8:	08002e86 	.word	0x08002e86
 80029ec:	08002e97 	.word	0x08002e97

080029f0 <memcpy>:
 80029f0:	440a      	add	r2, r1
 80029f2:	4291      	cmp	r1, r2
 80029f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80029f8:	d100      	bne.n	80029fc <memcpy+0xc>
 80029fa:	4770      	bx	lr
 80029fc:	b510      	push	{r4, lr}
 80029fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a06:	4291      	cmp	r1, r2
 8002a08:	d1f9      	bne.n	80029fe <memcpy+0xe>
 8002a0a:	bd10      	pop	{r4, pc}

08002a0c <memmove>:
 8002a0c:	4288      	cmp	r0, r1
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	eb01 0402 	add.w	r4, r1, r2
 8002a14:	d902      	bls.n	8002a1c <memmove+0x10>
 8002a16:	4284      	cmp	r4, r0
 8002a18:	4623      	mov	r3, r4
 8002a1a:	d807      	bhi.n	8002a2c <memmove+0x20>
 8002a1c:	1e43      	subs	r3, r0, #1
 8002a1e:	42a1      	cmp	r1, r4
 8002a20:	d008      	beq.n	8002a34 <memmove+0x28>
 8002a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a2a:	e7f8      	b.n	8002a1e <memmove+0x12>
 8002a2c:	4402      	add	r2, r0
 8002a2e:	4601      	mov	r1, r0
 8002a30:	428a      	cmp	r2, r1
 8002a32:	d100      	bne.n	8002a36 <memmove+0x2a>
 8002a34:	bd10      	pop	{r4, pc}
 8002a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a3e:	e7f7      	b.n	8002a30 <memmove+0x24>

08002a40 <_free_r>:
 8002a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a42:	2900      	cmp	r1, #0
 8002a44:	d048      	beq.n	8002ad8 <_free_r+0x98>
 8002a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a4a:	9001      	str	r0, [sp, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a52:	bfb8      	it	lt
 8002a54:	18e4      	addlt	r4, r4, r3
 8002a56:	f000 f8d3 	bl	8002c00 <__malloc_lock>
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <_free_r+0x9c>)
 8002a5c:	9801      	ldr	r0, [sp, #4]
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	4615      	mov	r5, r2
 8002a62:	b933      	cbnz	r3, 8002a72 <_free_r+0x32>
 8002a64:	6063      	str	r3, [r4, #4]
 8002a66:	6014      	str	r4, [r2, #0]
 8002a68:	b003      	add	sp, #12
 8002a6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a6e:	f000 b8cd 	b.w	8002c0c <__malloc_unlock>
 8002a72:	42a3      	cmp	r3, r4
 8002a74:	d90b      	bls.n	8002a8e <_free_r+0x4e>
 8002a76:	6821      	ldr	r1, [r4, #0]
 8002a78:	1862      	adds	r2, r4, r1
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	bf04      	itt	eq
 8002a7e:	681a      	ldreq	r2, [r3, #0]
 8002a80:	685b      	ldreq	r3, [r3, #4]
 8002a82:	6063      	str	r3, [r4, #4]
 8002a84:	bf04      	itt	eq
 8002a86:	1852      	addeq	r2, r2, r1
 8002a88:	6022      	streq	r2, [r4, #0]
 8002a8a:	602c      	str	r4, [r5, #0]
 8002a8c:	e7ec      	b.n	8002a68 <_free_r+0x28>
 8002a8e:	461a      	mov	r2, r3
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b10b      	cbz	r3, 8002a98 <_free_r+0x58>
 8002a94:	42a3      	cmp	r3, r4
 8002a96:	d9fa      	bls.n	8002a8e <_free_r+0x4e>
 8002a98:	6811      	ldr	r1, [r2, #0]
 8002a9a:	1855      	adds	r5, r2, r1
 8002a9c:	42a5      	cmp	r5, r4
 8002a9e:	d10b      	bne.n	8002ab8 <_free_r+0x78>
 8002aa0:	6824      	ldr	r4, [r4, #0]
 8002aa2:	4421      	add	r1, r4
 8002aa4:	1854      	adds	r4, r2, r1
 8002aa6:	42a3      	cmp	r3, r4
 8002aa8:	6011      	str	r1, [r2, #0]
 8002aaa:	d1dd      	bne.n	8002a68 <_free_r+0x28>
 8002aac:	681c      	ldr	r4, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	6053      	str	r3, [r2, #4]
 8002ab2:	4421      	add	r1, r4
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	e7d7      	b.n	8002a68 <_free_r+0x28>
 8002ab8:	d902      	bls.n	8002ac0 <_free_r+0x80>
 8002aba:	230c      	movs	r3, #12
 8002abc:	6003      	str	r3, [r0, #0]
 8002abe:	e7d3      	b.n	8002a68 <_free_r+0x28>
 8002ac0:	6825      	ldr	r5, [r4, #0]
 8002ac2:	1961      	adds	r1, r4, r5
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	bf04      	itt	eq
 8002ac8:	6819      	ldreq	r1, [r3, #0]
 8002aca:	685b      	ldreq	r3, [r3, #4]
 8002acc:	6063      	str	r3, [r4, #4]
 8002ace:	bf04      	itt	eq
 8002ad0:	1949      	addeq	r1, r1, r5
 8002ad2:	6021      	streq	r1, [r4, #0]
 8002ad4:	6054      	str	r4, [r2, #4]
 8002ad6:	e7c7      	b.n	8002a68 <_free_r+0x28>
 8002ad8:	b003      	add	sp, #12
 8002ada:	bd30      	pop	{r4, r5, pc}
 8002adc:	20000090 	.word	0x20000090

08002ae0 <_malloc_r>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	1ccd      	adds	r5, r1, #3
 8002ae4:	f025 0503 	bic.w	r5, r5, #3
 8002ae8:	3508      	adds	r5, #8
 8002aea:	2d0c      	cmp	r5, #12
 8002aec:	bf38      	it	cc
 8002aee:	250c      	movcc	r5, #12
 8002af0:	2d00      	cmp	r5, #0
 8002af2:	4606      	mov	r6, r0
 8002af4:	db01      	blt.n	8002afa <_malloc_r+0x1a>
 8002af6:	42a9      	cmp	r1, r5
 8002af8:	d903      	bls.n	8002b02 <_malloc_r+0x22>
 8002afa:	230c      	movs	r3, #12
 8002afc:	6033      	str	r3, [r6, #0]
 8002afe:	2000      	movs	r0, #0
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b02:	f000 f87d 	bl	8002c00 <__malloc_lock>
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <_malloc_r+0xac>)
 8002b08:	680a      	ldr	r2, [r1, #0]
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	b99c      	cbnz	r4, 8002b36 <_malloc_r+0x56>
 8002b0e:	4f20      	ldr	r7, [pc, #128]	; (8002b90 <_malloc_r+0xb0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b923      	cbnz	r3, 8002b1e <_malloc_r+0x3e>
 8002b14:	4621      	mov	r1, r4
 8002b16:	4630      	mov	r0, r6
 8002b18:	f000 f862 	bl	8002be0 <_sbrk_r>
 8002b1c:	6038      	str	r0, [r7, #0]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4630      	mov	r0, r6
 8002b22:	f000 f85d 	bl	8002be0 <_sbrk_r>
 8002b26:	1c43      	adds	r3, r0, #1
 8002b28:	d123      	bne.n	8002b72 <_malloc_r+0x92>
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	6033      	str	r3, [r6, #0]
 8002b2e:	4630      	mov	r0, r6
 8002b30:	f000 f86c 	bl	8002c0c <__malloc_unlock>
 8002b34:	e7e3      	b.n	8002afe <_malloc_r+0x1e>
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	1b5b      	subs	r3, r3, r5
 8002b3a:	d417      	bmi.n	8002b6c <_malloc_r+0x8c>
 8002b3c:	2b0b      	cmp	r3, #11
 8002b3e:	d903      	bls.n	8002b48 <_malloc_r+0x68>
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	441c      	add	r4, r3
 8002b44:	6025      	str	r5, [r4, #0]
 8002b46:	e004      	b.n	8002b52 <_malloc_r+0x72>
 8002b48:	6863      	ldr	r3, [r4, #4]
 8002b4a:	42a2      	cmp	r2, r4
 8002b4c:	bf0c      	ite	eq
 8002b4e:	600b      	streq	r3, [r1, #0]
 8002b50:	6053      	strne	r3, [r2, #4]
 8002b52:	4630      	mov	r0, r6
 8002b54:	f000 f85a 	bl	8002c0c <__malloc_unlock>
 8002b58:	f104 000b 	add.w	r0, r4, #11
 8002b5c:	1d23      	adds	r3, r4, #4
 8002b5e:	f020 0007 	bic.w	r0, r0, #7
 8002b62:	1ac2      	subs	r2, r0, r3
 8002b64:	d0cc      	beq.n	8002b00 <_malloc_r+0x20>
 8002b66:	1a1b      	subs	r3, r3, r0
 8002b68:	50a3      	str	r3, [r4, r2]
 8002b6a:	e7c9      	b.n	8002b00 <_malloc_r+0x20>
 8002b6c:	4622      	mov	r2, r4
 8002b6e:	6864      	ldr	r4, [r4, #4]
 8002b70:	e7cc      	b.n	8002b0c <_malloc_r+0x2c>
 8002b72:	1cc4      	adds	r4, r0, #3
 8002b74:	f024 0403 	bic.w	r4, r4, #3
 8002b78:	42a0      	cmp	r0, r4
 8002b7a:	d0e3      	beq.n	8002b44 <_malloc_r+0x64>
 8002b7c:	1a21      	subs	r1, r4, r0
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f000 f82e 	bl	8002be0 <_sbrk_r>
 8002b84:	3001      	adds	r0, #1
 8002b86:	d1dd      	bne.n	8002b44 <_malloc_r+0x64>
 8002b88:	e7cf      	b.n	8002b2a <_malloc_r+0x4a>
 8002b8a:	bf00      	nop
 8002b8c:	20000090 	.word	0x20000090
 8002b90:	20000094 	.word	0x20000094

08002b94 <_realloc_r>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	4607      	mov	r7, r0
 8002b98:	4614      	mov	r4, r2
 8002b9a:	460e      	mov	r6, r1
 8002b9c:	b921      	cbnz	r1, 8002ba8 <_realloc_r+0x14>
 8002b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	f7ff bf9c 	b.w	8002ae0 <_malloc_r>
 8002ba8:	b922      	cbnz	r2, 8002bb4 <_realloc_r+0x20>
 8002baa:	f7ff ff49 	bl	8002a40 <_free_r>
 8002bae:	4625      	mov	r5, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb4:	f000 f830 	bl	8002c18 <_malloc_usable_size_r>
 8002bb8:	42a0      	cmp	r0, r4
 8002bba:	d20f      	bcs.n	8002bdc <_realloc_r+0x48>
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f7ff ff8e 	bl	8002ae0 <_malloc_r>
 8002bc4:	4605      	mov	r5, r0
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0f2      	beq.n	8002bb0 <_realloc_r+0x1c>
 8002bca:	4631      	mov	r1, r6
 8002bcc:	4622      	mov	r2, r4
 8002bce:	f7ff ff0f 	bl	80029f0 <memcpy>
 8002bd2:	4631      	mov	r1, r6
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f7ff ff33 	bl	8002a40 <_free_r>
 8002bda:	e7e9      	b.n	8002bb0 <_realloc_r+0x1c>
 8002bdc:	4635      	mov	r5, r6
 8002bde:	e7e7      	b.n	8002bb0 <_realloc_r+0x1c>

08002be0 <_sbrk_r>:
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	4d06      	ldr	r5, [pc, #24]	; (8002bfc <_sbrk_r+0x1c>)
 8002be4:	2300      	movs	r3, #0
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	602b      	str	r3, [r5, #0]
 8002bec:	f7fd ff28 	bl	8000a40 <_sbrk>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d102      	bne.n	8002bfa <_sbrk_r+0x1a>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	b103      	cbz	r3, 8002bfa <_sbrk_r+0x1a>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	200000e0 	.word	0x200000e0

08002c00 <__malloc_lock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <__malloc_lock+0x8>)
 8002c02:	f000 b811 	b.w	8002c28 <__retarget_lock_acquire_recursive>
 8002c06:	bf00      	nop
 8002c08:	200000e8 	.word	0x200000e8

08002c0c <__malloc_unlock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__malloc_unlock+0x8>)
 8002c0e:	f000 b80c 	b.w	8002c2a <__retarget_lock_release_recursive>
 8002c12:	bf00      	nop
 8002c14:	200000e8 	.word	0x200000e8

08002c18 <_malloc_usable_size_r>:
 8002c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c1c:	1f18      	subs	r0, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bfbc      	itt	lt
 8002c22:	580b      	ldrlt	r3, [r1, r0]
 8002c24:	18c0      	addlt	r0, r0, r3
 8002c26:	4770      	bx	lr

08002c28 <__retarget_lock_acquire_recursive>:
 8002c28:	4770      	bx	lr

08002c2a <__retarget_lock_release_recursive>:
 8002c2a:	4770      	bx	lr

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
