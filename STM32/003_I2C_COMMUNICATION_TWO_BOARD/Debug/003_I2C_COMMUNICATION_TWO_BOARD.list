
003_I2C_COMMUNICATION_TWO_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000395c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b04  08003b04  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          000000c4  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000826d  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001524  00000000  00000000  000282f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  00029818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f49b  00000000  00000000  0002a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009592  00000000  00000000  00049af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea21  00000000  00000000  00053085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00111aa6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dd0  00000000  00000000  00111afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003acc 	.word	0x08003acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08003acc 	.word	0x08003acc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb3c 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f8da 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f970 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f940 	bl	8000754 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef MASTER_BOARD

  /* Wait for USER Button press before starting the Communication */
  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80004d4:	bf00      	nop
 80004d6:	2101      	movs	r1, #1
 80004d8:	4861      	ldr	r0, [pc, #388]	; (8000660 <main+0x1a0>)
 80004da:	f000 fea5 	bl	8001228 <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f8      	beq.n	80004d6 <main+0x16>
  {
  }

  /* Wait for USER Button release before starting the Communication */
  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80004e4:	bf00      	nop
 80004e6:	2101      	movs	r1, #1
 80004e8:	485d      	ldr	r0, [pc, #372]	; (8000660 <main+0x1a0>)
 80004ea:	f000 fe9d 	bl	8001228 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f8      	bne.n	80004e6 <main+0x26>
  }

  while(1)
  {
    /* Initialize number of data variables */
    hTxNumData = TXBUFFERSIZE;
 80004f4:	4b5b      	ldr	r3, [pc, #364]	; (8000664 <main+0x1a4>)
 80004f6:	2245      	movs	r2, #69	; 0x45
 80004f8:	801a      	strh	r2, [r3, #0]
    hRxNumData = RXBUFFERSIZE;
 80004fa:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <main+0x1a8>)
 80004fc:	2245      	movs	r2, #69	; 0x45
 80004fe:	801a      	strh	r2, [r3, #0]

    /* Update bTransferRequest to send buffer write request for Slave */
    bTransferRequest = MASTER_REQ_WRITE;
 8000500:	4b5a      	ldr	r3, [pc, #360]	; (800066c <main+0x1ac>)
 8000502:	2234      	movs	r2, #52	; 0x34
 8000504:	701a      	strb	r2, [r3, #0]

    /*##-2- Master sends write request for slave #############################*/
    do
    {
      if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)&bTransferRequest, 1)!= HAL_OK)
 8000506:	2301      	movs	r3, #1
 8000508:	4a58      	ldr	r2, [pc, #352]	; (800066c <main+0x1ac>)
 800050a:	213e      	movs	r1, #62	; 0x3e
 800050c:	4858      	ldr	r0, [pc, #352]	; (8000670 <main+0x1b0>)
 800050e:	f001 f81b 	bl	8001548 <HAL_I2C_Master_Transmit_IT>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <main+0x5c>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 8000518:	f000 fa04 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800051c:	bf00      	nop
 800051e:	4854      	ldr	r0, [pc, #336]	; (8000670 <main+0x1b0>)
 8000520:	f001 fbdc 	bl	8001cdc <HAL_I2C_GetState>
 8000524:	4603      	mov	r3, r0
 8000526:	2b20      	cmp	r3, #32
 8000528:	d1f9      	bne.n	800051e <main+0x5e>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800052a:	4851      	ldr	r0, [pc, #324]	; (8000670 <main+0x1b0>)
 800052c:	f001 fbe4 	bl	8001cf8 <HAL_I2C_GetError>
 8000530:	4603      	mov	r3, r0
 8000532:	2b04      	cmp	r3, #4
 8000534:	d0e7      	beq.n	8000506 <main+0x46>

    /*##-3- Master sends number of data to be written ########################*/
    do
    {
      if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)&hTxNumData, 2)!= HAL_OK)
 8000536:	2302      	movs	r3, #2
 8000538:	4a4a      	ldr	r2, [pc, #296]	; (8000664 <main+0x1a4>)
 800053a:	213e      	movs	r1, #62	; 0x3e
 800053c:	484c      	ldr	r0, [pc, #304]	; (8000670 <main+0x1b0>)
 800053e:	f001 f803 	bl	8001548 <HAL_I2C_Master_Transmit_IT>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <main+0x8c>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 8000548:	f000 f9ec 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800054c:	bf00      	nop
 800054e:	4848      	ldr	r0, [pc, #288]	; (8000670 <main+0x1b0>)
 8000550:	f001 fbc4 	bl	8001cdc <HAL_I2C_GetState>
 8000554:	4603      	mov	r3, r0
 8000556:	2b20      	cmp	r3, #32
 8000558:	d1f9      	bne.n	800054e <main+0x8e>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800055a:	4845      	ldr	r0, [pc, #276]	; (8000670 <main+0x1b0>)
 800055c:	f001 fbcc 	bl	8001cf8 <HAL_I2C_GetError>
 8000560:	4603      	mov	r3, r0
 8000562:	2b04      	cmp	r3, #4
 8000564:	d0e7      	beq.n	8000536 <main+0x76>

    /*##-4- Master sends aTxBuffer to slave ##################################*/
    do
    {
      if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000566:	2345      	movs	r3, #69	; 0x45
 8000568:	4a42      	ldr	r2, [pc, #264]	; (8000674 <main+0x1b4>)
 800056a:	213e      	movs	r1, #62	; 0x3e
 800056c:	4840      	ldr	r0, [pc, #256]	; (8000670 <main+0x1b0>)
 800056e:	f000 ffeb 	bl	8001548 <HAL_I2C_Master_Transmit_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0xbc>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 8000578:	f000 f9d4 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 800057c:	bf00      	nop
 800057e:	483c      	ldr	r0, [pc, #240]	; (8000670 <main+0x1b0>)
 8000580:	f001 fbac 	bl	8001cdc <HAL_I2C_GetState>
 8000584:	4603      	mov	r3, r0
 8000586:	2b20      	cmp	r3, #32
 8000588:	d1f9      	bne.n	800057e <main+0xbe>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800058a:	4839      	ldr	r0, [pc, #228]	; (8000670 <main+0x1b0>)
 800058c:	f001 fbb4 	bl	8001cf8 <HAL_I2C_GetError>
 8000590:	4603      	mov	r3, r0
 8000592:	2b04      	cmp	r3, #4
 8000594:	d0e7      	beq.n	8000566 <main+0xa6>

    /* Update bTransferRequest to send buffer read request for Slave */
    bTransferRequest = MASTER_REQ_READ;
 8000596:	4b35      	ldr	r3, [pc, #212]	; (800066c <main+0x1ac>)
 8000598:	2212      	movs	r2, #18
 800059a:	701a      	strb	r2, [r3, #0]

    /*##-5- Master sends read request for slave ##############################*/
    do
    {
      if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)&bTransferRequest, 1)!= HAL_OK)
 800059c:	2301      	movs	r3, #1
 800059e:	4a33      	ldr	r2, [pc, #204]	; (800066c <main+0x1ac>)
 80005a0:	213e      	movs	r1, #62	; 0x3e
 80005a2:	4833      	ldr	r0, [pc, #204]	; (8000670 <main+0x1b0>)
 80005a4:	f000 ffd0 	bl	8001548 <HAL_I2C_Master_Transmit_IT>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0xf2>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 80005ae:	f000 f9b9 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80005b2:	bf00      	nop
 80005b4:	482e      	ldr	r0, [pc, #184]	; (8000670 <main+0x1b0>)
 80005b6:	f001 fb91 	bl	8001cdc <HAL_I2C_GetState>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b20      	cmp	r3, #32
 80005be:	d1f9      	bne.n	80005b4 <main+0xf4>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005c0:	482b      	ldr	r0, [pc, #172]	; (8000670 <main+0x1b0>)
 80005c2:	f001 fb99 	bl	8001cf8 <HAL_I2C_GetError>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d0e7      	beq.n	800059c <main+0xdc>

    /*##-6- Master sends number of data to be read ###########################*/
    do
    {
      if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)&hRxNumData, 2)!= HAL_OK)
 80005cc:	2302      	movs	r3, #2
 80005ce:	4a26      	ldr	r2, [pc, #152]	; (8000668 <main+0x1a8>)
 80005d0:	213e      	movs	r1, #62	; 0x3e
 80005d2:	4827      	ldr	r0, [pc, #156]	; (8000670 <main+0x1b0>)
 80005d4:	f000 ffb8 	bl	8001548 <HAL_I2C_Master_Transmit_IT>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0x122>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 80005de:	f000 f9a1 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80005e2:	bf00      	nop
 80005e4:	4822      	ldr	r0, [pc, #136]	; (8000670 <main+0x1b0>)
 80005e6:	f001 fb79 	bl	8001cdc <HAL_I2C_GetState>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b20      	cmp	r3, #32
 80005ee:	d1f9      	bne.n	80005e4 <main+0x124>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005f0:	481f      	ldr	r0, [pc, #124]	; (8000670 <main+0x1b0>)
 80005f2:	f001 fb81 	bl	8001cf8 <HAL_I2C_GetError>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	d0e7      	beq.n	80005cc <main+0x10c>

    /*##-7- Master receives aRxBuffer from slave #############################*/
    do
    {
      if(HAL_I2C_Master_Receive_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)aRxBuffer, RXBUFFERSIZE)!= HAL_OK)
 80005fc:	2345      	movs	r3, #69	; 0x45
 80005fe:	4a1e      	ldr	r2, [pc, #120]	; (8000678 <main+0x1b8>)
 8000600:	213e      	movs	r1, #62	; 0x3e
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <main+0x1b0>)
 8000604:	f001 f846 	bl	8001694 <HAL_I2C_Master_Receive_IT>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0x152>
      {
        /* Error_Handler() function is called in case of error. */
        Error_Handler();
 800060e:	f000 f989 	bl	8000924 <Error_Handler>
      state of the peripheral; if it�s busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8000612:	bf00      	nop
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0x1b0>)
 8000616:	f001 fb61 	bl	8001cdc <HAL_I2C_GetState>
 800061a:	4603      	mov	r3, r0
 800061c:	2b20      	cmp	r3, #32
 800061e:	d1f9      	bne.n	8000614 <main+0x154>
      }

      /* When Acknowledge failure occurs (Slave don't acknowledge its address)
      Master restarts communication */
    }
    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0x1b0>)
 8000622:	f001 fb69 	bl	8001cf8 <HAL_I2C_GetError>
 8000626:	4603      	mov	r3, r0
 8000628:	2b04      	cmp	r3, #4
 800062a:	d0e7      	beq.n	80005fc <main+0x13c>

    /* Check correctness of received buffer ##################################*/
    if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,hRxNumData))
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <main+0x1a8>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4911      	ldr	r1, [pc, #68]	; (8000678 <main+0x1b8>)
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <main+0x1b4>)
 8000636:	f000 f939 	bl	80008ac <Buffercmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x184>
    {
      /* Processing Error */
      Error_Handler();
 8000640:	f000 f970 	bl	8000924 <Error_Handler>
    }

    /* Flush Rx buffers */
    Flush_Buffer((uint8_t*)aRxBuffer,RXBUFFERSIZE);
 8000644:	2145      	movs	r1, #69	; 0x45
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <main+0x1b8>)
 8000648:	f000 f952 	bl	80008f0 <Flush_Buffer>

    /* Toggle LED4 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800064c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <main+0x1bc>)
 8000652:	f000 fe1a 	bl	800128a <HAL_GPIO_TogglePin>

    /* This delay permit the user to see LED4 toggling */
    HAL_Delay(25);
 8000656:	2019      	movs	r0, #25
 8000658:	f000 fae4 	bl	8000c24 <HAL_Delay>
    hTxNumData = TXBUFFERSIZE;
 800065c:	e74a      	b.n	80004f4 <main+0x34>
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	20000070 	.word	0x20000070
 8000668:	20000072 	.word	0x20000072
 800066c:	20000074 	.word	0x20000074
 8000670:	20000078 	.word	0x20000078
 8000674:	20000000 	.word	0x20000000
 8000678:	200000cc 	.word	0x200000cc
 800067c:	40020c00 	.word	0x40020c00

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fa14 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fd54 	bl	80031b4 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 f907 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2105      	movs	r1, #5
 8000734:	4618      	mov	r0, r3
 8000736:	f002 ffb5 	bl	80036a4 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000740:	f000 f8f0 	bl	8000924 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3750      	adds	r7, #80	; 0x50
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_I2C1_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_I2C1_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2C1_Init+0x50>)
 800076c:	223e      	movs	r2, #62	; 0x3e
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C1_Init+0x50>)
 8000792:	f000 fd95 	bl	80012c0 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f8c2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000078 	.word	0x20000078
 80007a8:	40005400 	.word	0x40005400
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a25      	ldr	r2, [pc, #148]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_GPIO_Init+0xd4>)
 800083e:	f000 fd0b 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000856:	f000 fb4b 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800085a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000874:	f000 fb3c 	bl	8000ef0 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40020000 	.word	0x40020000

0800088c <HAL_I2C_ErrorCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
  * 1- When Slave don't acknowledge it's address, Master restarts communication.
  * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
  */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f001 fa2f 	bl	8001cf8 <HAL_I2C_GetError>
 800089a:	4603      	mov	r3, r0
 800089c:	2b04      	cmp	r3, #4
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80008a0:	f000 f840 	bl	8000924 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4613      	mov	r3, r2
 80008b8:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008ba:	e00d      	b.n	80008d8 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d001      	beq.n	80008cc <Buffercmp+0x20>
    {
      return BufferLength;
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	e00b      	b.n	80008e4 <Buffercmp+0x38>
    }
    pBuffer1++;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	80fa      	strh	r2, [r7, #6]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1ec      	bne.n	80008bc <Buffercmp+0x10>
  }

  return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <Flush_Buffer>:
  * @param  pBuffer: buffers to be flushed.
  * @param  BufferLength: buffer's length
  * @retval None
  */
static void Flush_Buffer(uint8_t* pBuffer, uint16_t BufferLength)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
  while (BufferLength--)
 80008fc:	e005      	b.n	800090a <Flush_Buffer+0x1a>
  {
    *pBuffer = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]

    pBuffer++;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	607b      	str	r3, [r7, #4]
  while (BufferLength--)
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	807a      	strh	r2, [r7, #2]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f4      	bne.n	80008fe <Flush_Buffer+0xe>
  }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <Error_Handler+0x24>)
 8000934:	f000 fc90 	bl	8001258 <HAL_GPIO_WritePin>
  /* Turn On LED5 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <Error_Handler+0x24>)
 8000940:	f000 fc8a 	bl	8001258 <HAL_GPIO_WritePin>
  while(1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x20>
 8000946:	bf00      	nop
 8000948:	40020c00 	.word	0x40020c00

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fa3e 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_I2C_MspInit+0xa4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d13b      	bne.n	8000a36 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ea:	2304      	movs	r3, #4
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <HAL_I2C_MspInit+0xac>)
 80009f6:	f000 fa7b 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_I2C_MspInit+0xa8>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	201f      	movs	r0, #31
 8000a1c:	f000 fa01 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a20:	201f      	movs	r0, #31
 8000a22:	f000 fa1a 	bl	8000e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f000 f9f9 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a30:	2020      	movs	r0, #32
 8000a32:	f000 fa12 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f8a4 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <I2C1_EV_IRQHandler+0x10>)
 8000aa6:	f000 fea3 	bl	80017f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000078 	.word	0x20000078

08000ab4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <I2C1_ER_IRQHandler+0x10>)
 8000aba:	f001 f80a 	bl	8001ad2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000078 	.word	0x20000078

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f002 ffab 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fccf 	bl	80004c0 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b30:	08003b0c 	.word	0x08003b0c
  ldr r2, =_sbss
 8000b34:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000b38:	20000118 	.word	0x20000118

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f94f 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f808 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff feea 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f967 	bl	8000e76 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f92f 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000048 	.word	0x20000048
 8000bdc:	20000050 	.word	0x20000050
 8000be0:	2000004c 	.word	0x2000004c

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000050 	.word	0x20000050
 8000c08:	20000114 	.word	0x20000114

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000114 	.word	0x20000114

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000050 	.word	0x20000050

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d004      	beq.n	8000eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00c      	b.n	8000ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee0:	b2db      	uxtb	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b60      	ldr	r3, [pc, #384]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5b      	ldr	r2, [pc, #364]	; (8001200 <HAL_GPIO_Init+0x310>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_GPIO_Init+0x330>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4935      	ldr	r1, [pc, #212]	; (8001200 <HAL_GPIO_Init+0x310>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_GPIO_Init+0x334>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_GPIO_Init+0x334>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40013800 	.word	0x40013800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40021000 	.word	0x40021000
 8001218:	40021400 	.word	0x40021400
 800121c:	40021800 	.word	0x40021800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40013c00 	.word	0x40013c00

08001228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	041a      	lsls	r2, r3, #16
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	400b      	ands	r3, r1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e12b      	b.n	800152a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fb58 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001324:	f002 fb92 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a81      	ldr	r2, [pc, #516]	; (8001534 <HAL_I2C_Init+0x274>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d807      	bhi.n	8001344 <HAL_I2C_Init+0x84>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a80      	ldr	r2, [pc, #512]	; (8001538 <HAL_I2C_Init+0x278>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	e006      	b.n	8001352 <HAL_I2C_Init+0x92>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a7d      	ldr	r2, [pc, #500]	; (800153c <HAL_I2C_Init+0x27c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	bf94      	ite	ls
 800134c:	2301      	movls	r3, #1
 800134e:	2300      	movhi	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0e7      	b.n	800152a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a78      	ldr	r2, [pc, #480]	; (8001540 <HAL_I2C_Init+0x280>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a6a      	ldr	r2, [pc, #424]	; (8001534 <HAL_I2C_Init+0x274>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d802      	bhi.n	8001394 <HAL_I2C_Init+0xd4>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3301      	adds	r3, #1
 8001392:	e009      	b.n	80013a8 <HAL_I2C_Init+0xe8>
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4a69      	ldr	r2, [pc, #420]	; (8001544 <HAL_I2C_Init+0x284>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	3301      	adds	r3, #1
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	495c      	ldr	r1, [pc, #368]	; (8001534 <HAL_I2C_Init+0x274>)
 80013c4:	428b      	cmp	r3, r1
 80013c6:	d819      	bhi.n	80013fc <HAL_I2C_Init+0x13c>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1e59      	subs	r1, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d6:	1c59      	adds	r1, r3, #1
 80013d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013dc:	400b      	ands	r3, r1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <HAL_I2C_Init+0x138>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1e59      	subs	r1, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f6:	e051      	b.n	800149c <HAL_I2C_Init+0x1dc>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e04f      	b.n	800149c <HAL_I2C_Init+0x1dc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_I2C_Init+0x168>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	440b      	add	r3, r1
 8001412:	fbb0 f3f3 	udiv	r3, r0, r3
 8001416:	3301      	adds	r3, #1
 8001418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e012      	b.n	800144e <HAL_I2C_Init+0x18e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e58      	subs	r0, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6859      	ldr	r1, [r3, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	0099      	lsls	r1, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Init+0x196>
 8001452:	2301      	movs	r3, #1
 8001454:	e022      	b.n	800149c <HAL_I2C_Init+0x1dc>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10e      	bne.n	800147c <HAL_I2C_Init+0x1bc>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1e58      	subs	r0, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	440b      	add	r3, r1
 800146c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147a:	e00f      	b.n	800149c <HAL_I2C_Init+0x1dc>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	0099      	lsls	r1, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001492:	3301      	adds	r3, #1
 8001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	6809      	ldr	r1, [r1, #0]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69da      	ldr	r2, [r3, #28]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6911      	ldr	r1, [r2, #16]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68d2      	ldr	r2, [r2, #12]
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	430b      	orrs	r3, r1
 80014de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	000186a0 	.word	0x000186a0
 8001538:	001e847f 	.word	0x001e847f
 800153c:	003d08ff 	.word	0x003d08ff
 8001540:	431bde83 	.word	0x431bde83
 8001544:	10624dd3 	.word	0x10624dd3

08001548 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	460b      	mov	r3, r1
 8001556:	817b      	strh	r3, [r7, #10]
 8001558:	4613      	mov	r3, r2
 800155a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b20      	cmp	r3, #32
 800156a:	f040 8085 	bne.w	8001678 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <HAL_I2C_Master_Transmit_IT+0x144>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a1a      	lsrs	r2, r3, #8
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009a      	lsls	r2, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3b01      	subs	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d116      	bne.n	80015c2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f043 0220 	orr.w	r2, r3, #32
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e05b      	b.n	800167a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d0db      	beq.n	8001588 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Master_Transmit_IT+0x96>
 80015da:	2302      	movs	r3, #2
 80015dc:	e04d      	b.n	800167a <HAL_I2C_Master_Transmit_IT+0x132>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d007      	beq.n	8001604 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2221      	movs	r2, #33	; 0x21
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2210      	movs	r2, #16
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	893a      	ldrh	r2, [r7, #8]
 8001634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_I2C_Master_Transmit_IT+0x148>)
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001646:	897a      	ldrh	r2, [r7, #10]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001662:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001672:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000048 	.word	0x20000048
 800168c:	14f8b589 	.word	0x14f8b589
 8001690:	ffff0000 	.word	0xffff0000

08001694 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	461a      	mov	r2, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	817b      	strh	r3, [r7, #10]
 80016a4:	4613      	mov	r3, r2
 80016a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	f040 808d 	bne.w	80017d4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_I2C_Master_Receive_IT+0x150>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_I2C_Master_Receive_IT+0x154>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a1a      	lsrs	r2, r3, #8
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009a      	lsls	r2, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d116      	bne.n	800170e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f043 0220 	orr.w	r2, r3, #32
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e063      	b.n	80017d6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d0db      	beq.n	80016d4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_I2C_Master_Receive_IT+0x96>
 8001726:	2302      	movs	r3, #2
 8001728:	e055      	b.n	80017d6 <HAL_I2C_Master_Receive_IT+0x142>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d007      	beq.n	8001750 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800175e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2222      	movs	r2, #34	; 0x22
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2210      	movs	r2, #16
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	893a      	ldrh	r2, [r7, #8]
 8001780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_I2C_Master_Receive_IT+0x158>)
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001792:	897a      	ldrh	r2, [r7, #10]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017ae:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017be:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
  }
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000048 	.word	0x20000048
 80017e8:	14f8b589 	.word	0x14f8b589
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001810:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001818:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d003      	beq.n	8001828 <HAL_I2C_EV_IRQHandler+0x38>
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	f040 80c1 	bne.w	80019aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_I2C_EV_IRQHandler+0x6e>
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001848:	d003      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0x62>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001850:	d101      	bne.n	8001856 <HAL_I2C_EV_IRQHandler+0x66>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_I2C_EV_IRQHandler+0x68>
 8001856:	2300      	movs	r3, #0
 8001858:	2b01      	cmp	r3, #1
 800185a:	f000 8132 	beq.w	8001ac2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00c      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x92>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	0a5b      	lsrs	r3, r3, #9
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f001 fc81 	bl	800317c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fd89 	bl	8002392 <I2C_Master_SB>
 8001880:	e092      	b.n	80019a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	0a5b      	lsrs	r3, r3, #9
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fdff 	bl	800249e <I2C_Master_ADD10>
 80018a0:	e082      	b.n	80019a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0a5b      	lsrs	r3, r3, #9
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fe19 	bl	80024f2 <I2C_Master_ADDR>
 80018c0:	e072      	b.n	80019a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03b      	beq.n	8001946 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018dc:	f000 80f3 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	09db      	lsrs	r3, r3, #7
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00f      	beq.n	800190c <HAL_I2C_EV_IRQHandler+0x11c>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	0a9b      	lsrs	r3, r3, #10
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d009      	beq.n	800190c <HAL_I2C_EV_IRQHandler+0x11c>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fa03 	bl	8001d10 <I2C_MasterTransmit_TXE>
 800190a:	e04d      	b.n	80019a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80d6 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	0a5b      	lsrs	r3, r3, #9
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80cf 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	2b21      	cmp	r3, #33	; 0x21
 800192c:	d103      	bne.n	8001936 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa8a 	bl	8001e48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001934:	e0c7      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	f040 80c4 	bne.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 faf8 	bl	8001f34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001944:	e0bf      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001954:	f000 80b7 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00f      	beq.n	8001984 <HAL_I2C_EV_IRQHandler+0x194>
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <HAL_I2C_EV_IRQHandler+0x194>
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fb6d 	bl	800205c <I2C_MasterReceive_RXNE>
 8001982:	e011      	b.n	80019a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 809a 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	0a5b      	lsrs	r3, r3, #9
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8093 	beq.w	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fc0c 	bl	80021be <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019a6:	e08e      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019a8:	e08d      	b.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e007      	b.n	80019cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_I2C_EV_IRQHandler+0x20e>
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	0a5b      	lsrs	r3, r3, #9
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 ffca 	bl	8002990 <I2C_Slave_ADDR>
 80019fc:	e066      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_I2C_EV_IRQHandler+0x22e>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	0a5b      	lsrs	r3, r3, #9
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f804 	bl	8002a24 <I2C_Slave_STOPF>
 8001a1c:	e056      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	2b21      	cmp	r3, #33	; 0x21
 8001a22:	d002      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x23a>
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	2b29      	cmp	r3, #41	; 0x29
 8001a28:	d125      	bne.n	8001a76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	09db      	lsrs	r3, r3, #7
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00f      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x266>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	0a9b      	lsrs	r3, r3, #10
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x266>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fee0 	bl	8002814 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a54:	e039      	b.n	8001aca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d033      	beq.n	8001aca <HAL_I2C_EV_IRQHandler+0x2da>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	0a5b      	lsrs	r3, r3, #9
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02d      	beq.n	8001aca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 ff0d 	bl	800288e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a74:	e029      	b.n	8001aca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00f      	beq.n	8001aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	0a9b      	lsrs	r3, r3, #10
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 ff18 	bl	80028d0 <I2C_SlaveReceive_RXNE>
 8001aa0:	e014      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00e      	beq.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	0a5b      	lsrs	r3, r3, #9
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 ff46 	bl	800294c <I2C_SlaveReceive_BTF>
 8001ac0:	e004      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001ac2:	bf00      	nop
 8001ac4:	e002      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac6:	bf00      	nop
 8001ac8:	e000      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	; 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00e      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x4e>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	0a5b      	lsrs	r3, r3, #9
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <HAL_I2C_ER_IRQHandler+0x78>
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	0a9b      	lsrs	r3, r3, #10
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03f      	beq.n	8001bd6 <HAL_I2C_ER_IRQHandler+0x104>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d039      	beq.n	8001bd6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001b62:	7efb      	ldrb	r3, [r7, #27]
 8001b64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b7c:	7ebb      	ldrb	r3, [r7, #26]
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d112      	bne.n	8001ba8 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	2b21      	cmp	r3, #33	; 0x21
 8001b8c:	d008      	beq.n	8001ba0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	2b29      	cmp	r3, #41	; 0x29
 8001b92:	d005      	beq.n	8001ba0 <HAL_I2C_ER_IRQHandler+0xce>
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	2b28      	cmp	r3, #40	; 0x28
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b21      	cmp	r3, #33	; 0x21
 8001b9e:	d103      	bne.n	8001ba8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f001 f86f 	bl	8002c84 <I2C_Slave_AF>
 8001ba6:	e016      	b.n	8001bd6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bb0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bba:	7efb      	ldrb	r3, [r7, #27]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d002      	beq.n	8001bc6 <HAL_I2C_ER_IRQHandler+0xf4>
 8001bc0:	7efb      	ldrb	r3, [r7, #27]
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d107      	bne.n	8001bd6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	0adb      	lsrs	r3, r3, #11
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00e      	beq.n	8001c00 <HAL_I2C_ER_IRQHandler+0x12e>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001bfe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f001 f8a6 	bl	8002d64 <I2C_ITError>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cea:	b2db      	uxtb	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d150      	bne.n	8001dd8 <I2C_MasterTransmit_TXE+0xc8>
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b21      	cmp	r3, #33	; 0x21
 8001d3a:	d14d      	bne.n	8001dd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d01d      	beq.n	8001d7e <I2C_MasterTransmit_TXE+0x6e>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d01a      	beq.n	8001d7e <I2C_MasterTransmit_TXE+0x6e>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d4e:	d016      	beq.n	8001d7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2211      	movs	r2, #17
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ff52 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d7c:	e060      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d107      	bne.n	8001dc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff6d 	bl	8001ca0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc6:	e03b      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff25 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dd6:	e033      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	2b21      	cmp	r3, #33	; 0x21
 8001ddc:	d005      	beq.n	8001dea <I2C_MasterTransmit_TXE+0xda>
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d12d      	bne.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b22      	cmp	r3, #34	; 0x22
 8001de8:	d12a      	bne.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d108      	bne.n	8001e06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e04:	e01c      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d103      	bne.n	8001e1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f88e 	bl	8001f34 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e18:	e012      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e3e:	e7ff      	b.n	8001e40 <I2C_MasterTransmit_TXE+0x130>
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b21      	cmp	r3, #33	; 0x21
 8001e60:	d164      	bne.n	8001f2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e90:	e04c      	b.n	8001f2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d01d      	beq.n	8001ed4 <I2C_MasterTransmit_BTF+0x8c>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d01a      	beq.n	8001ed4 <I2C_MasterTransmit_BTF+0x8c>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ea4:	d016      	beq.n	8001ed4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001eb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2211      	movs	r2, #17
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fea7 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
}
 8001ed2:	e02b      	b.n	8001f2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ee2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2220      	movs	r2, #32
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d107      	bne.n	8001f1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fec2 	bl	8001ca0 <HAL_I2C_MemTxCpltCallback>
}
 8001f1c:	e006      	b.n	8001f2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fe7a 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11d      	bne.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10b      	bne.n	8001f6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	1c9a      	adds	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001f6a:	e073      	b.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	121b      	asrs	r3, r3, #8
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f86:	e065      	b.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10b      	bne.n	8001fa8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fa6:	e055      	b.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d151      	bne.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b22      	cmp	r3, #34	; 0x22
 8001fb4:	d10d      	bne.n	8001fd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fd0:	e040      	b.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b21      	cmp	r3, #33	; 0x21
 8001fe0:	d112      	bne.n	8002008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002006:	e025      	b.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d120      	bne.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b21      	cmp	r3, #33	; 0x21
 8002016:	d11d      	bne.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002026:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fe26 	bl	8001ca0 <HAL_I2C_MemTxCpltCallback>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b22      	cmp	r3, #34	; 0x22
 800206e:	f040 80a2 	bne.w	80021b6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d921      	bls.n	80020c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	f040 8082 	bne.w	80021b6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80020c2:	e078      	b.n	80021b6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d074      	beq.n	80021b6 <I2C_MasterReceive_RXNE+0x15a>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d002      	beq.n	80020d8 <I2C_MasterReceive_RXNE+0x7c>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d16e      	bne.n	80021b6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f001 f81d 	bl	8003118 <I2C_WaitOnSTOPRequestThroughIT>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d142      	bne.n	800216a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002102:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d10a      	bne.n	8002154 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fdb1 	bl	8001cb4 <HAL_I2C_MemRxCpltCallback>
}
 8002152:	e030      	b.n	80021b6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2212      	movs	r2, #18
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fd66 	bl	8001c34 <HAL_I2C_MasterRxCpltCallback>
}
 8002168:	e025      	b.n	80021b6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002178:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe fb6b 	bl	800088c <HAL_I2C_ErrorCallback>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d11b      	bne.n	800220e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800220c:	e0bd      	b.n	800238a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d129      	bne.n	800226c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002226:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b04      	cmp	r3, #4
 800222c:	d00a      	beq.n	8002244 <I2C_MasterReceive_BTF+0x86>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d007      	beq.n	8002244 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800226a:	e08e      	b.n	800238a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d176      	bne.n	8002364 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d002      	beq.n	8002282 <I2C_MasterReceive_BTF+0xc4>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d108      	bne.n	8002294 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e019      	b.n	80022c8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d002      	beq.n	80022a0 <I2C_MasterReceive_BTF+0xe2>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d108      	bne.n	80022b2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e00a      	b.n	80022c8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d007      	beq.n	80022c8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002322:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d10a      	bne.n	800234e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fcb4 	bl	8001cb4 <HAL_I2C_MemRxCpltCallback>
}
 800234c:	e01d      	b.n	800238a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2212      	movs	r2, #18
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fc69 	bl	8001c34 <HAL_I2C_MasterRxCpltCallback>
}
 8002362:	e012      	b.n	800238a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d117      	bne.n	80023d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023c0:	e067      	b.n	8002492 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]
}
 80023d4:	e05d      	b.n	8002492 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023de:	d133      	bne.n	8002448 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b21      	cmp	r3, #33	; 0x21
 80023ea:	d109      	bne.n	8002400 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e008      	b.n	8002412 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <I2C_Master_SB+0x92>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d108      	bne.n	8002436 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	2b00      	cmp	r3, #0
 800242a:	d032      	beq.n	8002492 <I2C_Master_SB+0x100>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02d      	beq.n	8002492 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002444:	605a      	str	r2, [r3, #4]
}
 8002446:	e024      	b.n	8002492 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10e      	bne.n	800246e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	b29b      	uxth	r3, r3
 8002456:	11db      	asrs	r3, r3, #7
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0306 	and.w	r3, r3, #6
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 030f 	orn	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
}
 800246c:	e011      	b.n	8002492 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10d      	bne.n	8002492 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	b29b      	uxth	r3, r3
 800247c:	11db      	asrs	r3, r3, #7
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f003 0306 	and.w	r3, r3, #6
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f063 030e 	orn	r3, r3, #14
 800248a:	b2da      	uxtb	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	611a      	str	r2, [r3, #16]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <I2C_Master_ADD10+0x26>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <I2C_Master_ADD10+0x48>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e4:	605a      	str	r2, [r3, #4]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b091      	sub	sp, #68	; 0x44
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b22      	cmp	r3, #34	; 0x22
 800251a:	f040 8169 	bne.w	80027f0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <I2C_Master_ADDR+0x54>
 8002526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d10b      	bne.n	8002546 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	e160      	b.n	8002808 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <I2C_Master_ADDR+0x98>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002556:	d118      	bne.n	800258a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	651a      	str	r2, [r3, #80]	; 0x50
 8002588:	e13e      	b.n	8002808 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d113      	bne.n	80025bc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002594:	2300      	movs	r3, #0
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e115      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 808a 	bne.w	80026dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ce:	d137      	bne.n	8002640 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025de:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ee:	d113      	bne.n	8002618 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	e0e7      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	623b      	str	r3, [r7, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e0d3      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2b08      	cmp	r3, #8
 8002644:	d02e      	beq.n	80026a4 <I2C_Master_ADDR+0x1b2>
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	2b20      	cmp	r3, #32
 800264a:	d02b      	beq.n	80026a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	2b12      	cmp	r3, #18
 8002650:	d102      	bne.n	8002658 <I2C_Master_ADDR+0x166>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b01      	cmp	r3, #1
 8002656:	d125      	bne.n	80026a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00e      	beq.n	800267c <I2C_Master_ADDR+0x18a>
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2b02      	cmp	r3, #2
 8002662:	d00b      	beq.n	800267c <I2C_Master_ADDR+0x18a>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b10      	cmp	r3, #16
 8002668:	d008      	beq.n	800267c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800268a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	e0a1      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e085      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d14d      	bne.n	8002782 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d016      	beq.n	800271a <I2C_Master_ADDR+0x228>
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d013      	beq.n	800271a <I2C_Master_ADDR+0x228>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d010      	beq.n	800271a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002728:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002738:	d117      	bne.n	800276a <I2C_Master_ADDR+0x278>
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d00b      	beq.n	800275a <I2C_Master_ADDR+0x268>
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	2b01      	cmp	r3, #1
 8002746:	d008      	beq.n	800275a <I2C_Master_ADDR+0x268>
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	2b08      	cmp	r3, #8
 800274c:	d005      	beq.n	800275a <I2C_Master_ADDR+0x268>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	2b10      	cmp	r3, #16
 8002752:	d002      	beq.n	800275a <I2C_Master_ADDR+0x268>
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2b20      	cmp	r3, #32
 8002758:	d107      	bne.n	800276a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002768:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	e032      	b.n	80027e8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a0:	d117      	bne.n	80027d2 <I2C_Master_ADDR+0x2e0>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a8:	d00b      	beq.n	80027c2 <I2C_Master_ADDR+0x2d0>
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d008      	beq.n	80027c2 <I2C_Master_ADDR+0x2d0>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d005      	beq.n	80027c2 <I2C_Master_ADDR+0x2d0>
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d002      	beq.n	80027c2 <I2C_Master_ADDR+0x2d0>
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d107      	bne.n	80027d2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027ee:	e00b      	b.n	8002808 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
}
 8002806:	e7ff      	b.n	8002808 <I2C_Master_ADDR+0x316>
 8002808:	bf00      	nop
 800280a:	3744      	adds	r7, #68	; 0x44
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02b      	beq.n	8002886 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d114      	bne.n	8002886 <I2C_SlaveTransmit_TXE+0x72>
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b29      	cmp	r3, #41	; 0x29
 8002860:	d111      	bne.n	8002886 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002870:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2221      	movs	r2, #33	; 0x21
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2228      	movs	r2, #40	; 0x28
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff f9e1 	bl	8001c48 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d011      	beq.n	80028c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02c      	beq.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d114      	bne.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b2a      	cmp	r3, #42	; 0x2a
 800291e:	d111      	bne.n	8002944 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2222      	movs	r2, #34	; 0x22
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2228      	movs	r2, #40	; 0x28
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f98c 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800299a:	2300      	movs	r3, #0
 800299c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029aa:	2b28      	cmp	r3, #40	; 0x28
 80029ac:	d127      	bne.n	80029fe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	09db      	lsrs	r3, r3, #7
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	81bb      	strh	r3, [r7, #12]
 80029e0:	e002      	b.n	80029e8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029f0:	89ba      	ldrh	r2, [r7, #12]
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff f93a 	bl	8001c70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029fc:	e00e      	b.n	8002a1c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a42:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a80:	d172      	bne.n	8002b68 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b22      	cmp	r3, #34	; 0x22
 8002a86:	d002      	beq.n	8002a8e <I2C_Slave_STOPF+0x6a>
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a8c:	d135      	bne.n	8002afa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fa03 	bl	8000ed2 <HAL_DMA_GetState>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d049      	beq.n	8002b66 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	4a69      	ldr	r2, [pc, #420]	; (8002c7c <I2C_Slave_STOPF+0x258>)
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe f9d5 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03d      	beq.n	8002b66 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af4:	4610      	mov	r0, r2
 8002af6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af8:	e035      	b.n	8002b66 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe f9cd 	bl	8000ed2 <HAL_DMA_GetState>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d014      	beq.n	8002b68 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <I2C_Slave_STOPF+0x258>)
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f99f 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
 8002b64:	e000      	b.n	8002b68 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b66:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03e      	beq.n	8002bf0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d112      	bne.n	8002ba6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d112      	bne.n	8002bda <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8b3 	bl	8002d64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bfe:	e039      	b.n	8002c74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b2a      	cmp	r3, #42	; 0x2a
 8002c04:	d109      	bne.n	8002c1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2228      	movs	r2, #40	; 0x28
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff f821 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b28      	cmp	r3, #40	; 0x28
 8002c24:	d111      	bne.n	8002c4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <I2C_Slave_STOPF+0x25c>)
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff f822 	bl	8001c8c <HAL_I2C_ListenCpltCallback>
}
 8002c48:	e014      	b.n	8002c74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	2b22      	cmp	r3, #34	; 0x22
 8002c50:	d002      	beq.n	8002c58 <I2C_Slave_STOPF+0x234>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b22      	cmp	r3, #34	; 0x22
 8002c56:	d10d      	bne.n	8002c74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fff4 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	08002fc9 	.word	0x08002fc9
 8002c80:	ffff0000 	.word	0xffff0000

08002c84 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d002      	beq.n	8002ca6 <I2C_Slave_AF+0x22>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d129      	bne.n	8002cfa <I2C_Slave_AF+0x76>
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b28      	cmp	r3, #40	; 0x28
 8002caa:	d126      	bne.n	8002cfa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <I2C_Slave_AF+0xdc>)
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe ffca 	bl	8001c8c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002cf8:	e02e      	b.n	8002d58 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b21      	cmp	r3, #33	; 0x21
 8002cfe:	d126      	bne.n	8002d4e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <I2C_Slave_AF+0xdc>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2221      	movs	r2, #33	; 0x21
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d34:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe ff7e 	bl	8001c48 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d4c:	e004      	b.n	8002d58 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d56:	615a      	str	r2, [r3, #20]
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d002      	beq.n	8002d88 <I2C_ITError+0x24>
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	2b40      	cmp	r3, #64	; 0x40
 8002d86:	d10a      	bne.n	8002d9e <I2C_ITError+0x3a>
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b22      	cmp	r3, #34	; 0x22
 8002d8c:	d107      	bne.n	8002d9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da4:	2b28      	cmp	r3, #40	; 0x28
 8002da6:	d107      	bne.n	8002db8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002db6:	e015      	b.n	8002de4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc6:	d00a      	beq.n	8002dde <I2C_ITError+0x7a>
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b60      	cmp	r3, #96	; 0x60
 8002dcc:	d007      	beq.n	8002dde <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df2:	d162      	bne.n	8002eba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d020      	beq.n	8002e54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <I2C_ITError+0x25c>)
 8002e18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f835 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8089 	beq.w	8002f3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4798      	blx	r3
 8002e52:	e074      	b.n	8002f3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	4a59      	ldr	r2, [pc, #356]	; (8002fc0 <I2C_ITError+0x25c>)
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f814 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d068      	beq.n	8002f3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d10b      	bne.n	8002e92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4798      	blx	r3
 8002eb8:	e041      	b.n	8002f3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b60      	cmp	r3, #96	; 0x60
 8002ec4:	d125      	bne.n	8002f12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d10b      	bne.n	8002efa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fedc 	bl	8001cc8 <HAL_I2C_AbortCpltCallback>
 8002f10:	e015      	b.n	8002f3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d10b      	bne.n	8002f38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fd fca7 	bl	800088c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d113      	bne.n	8002fb8 <I2C_ITError+0x254>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b28      	cmp	r3, #40	; 0x28
 8002f94:	d110      	bne.n	8002fb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <I2C_ITError+0x260>)
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fe6a 	bl	8001c8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08002fc9 	.word	0x08002fc9
 8002fc4:	ffff0000 	.word	0xffff0000

08002fc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fe2:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <I2C_DMAAbort+0x148>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <I2C_DMAAbort+0x14c>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0a1a      	lsrs	r2, r3, #8
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00da      	lsls	r2, r3, #3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800300e:	e00a      	b.n	8003026 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b01      	subs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003024:	d0ea      	beq.n	8002ffc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	2200      	movs	r2, #0
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	2200      	movs	r2, #0
 800306a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2200      	movs	r2, #0
 800307a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b60      	cmp	r3, #96	; 0x60
 8003096:	d10e      	bne.n	80030b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7fe fe0a 	bl	8001cc8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030b4:	e027      	b.n	8003106 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030bc:	2b28      	cmp	r3, #40	; 0x28
 80030be:	d117      	bne.n	80030f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2228      	movs	r2, #40	; 0x28
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030ee:	e007      	b.n	8003100 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003100:	6978      	ldr	r0, [r7, #20]
 8003102:	f7fd fbc3 	bl	800088c <HAL_I2C_ErrorCallback>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000048 	.word	0x20000048
 8003114:	14f8b589 	.word	0x14f8b589

08003118 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	0a1a      	lsrs	r2, r3, #8
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b01      	subs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e008      	b.n	8003168 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d0e9      	beq.n	800313a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	20000048 	.word	0x20000048
 8003178:	14f8b589 	.word	0x14f8b589

0800317c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800318c:	d103      	bne.n	8003196 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003194:	e007      	b.n	80031a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800319e:	d102      	bne.n	80031a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2208      	movs	r2, #8
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e264      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4ba3      	ldr	r3, [pc, #652]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4ba0      	ldr	r3, [pc, #640]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b9d      	ldr	r3, [pc, #628]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b99      	ldr	r3, [pc, #612]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e23f      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a90      	ldr	r2, [pc, #576]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a8a      	ldr	r2, [pc, #552]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b84      	ldr	r3, [pc, #528]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a83      	ldr	r2, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b81      	ldr	r3, [pc, #516]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a80      	ldr	r2, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fd fcce 	bl	8000c0c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fd fcca 	bl	8000c0c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e204      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd fcba 	bl	8000c0c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fd fcb6 	bl	8000c0c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f0      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b6c      	ldr	r3, [pc, #432]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b62      	ldr	r3, [pc, #392]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c4      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b56      	ldr	r3, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4952      	ldr	r1, [pc, #328]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_OscConfig+0x2b0>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd fc6f 	bl	8000c0c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7fd fc6b 	bl	8000c0c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a5      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4940      	ldr	r1, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x2b0>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fc4e 	bl	8000c0c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fd fc4a 	bl	8000c0c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e184      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d030      	beq.n	8003400 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b30      	ldr	r3, [pc, #192]	; (8003468 <HAL_RCC_OscConfig+0x2b4>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd fc2e 	bl	8000c0c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fd fc2a 	bl	8000c0c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e164      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x2b4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fd fc17 	bl	8000c0c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fd fc13 	bl	8000c0c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e14d      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a0 	beq.w	800354e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d121      	bne.n	800348e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_RCC_OscConfig+0x2b8>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fd fbd9 	bl	8000c0c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e011      	b.n	8003482 <HAL_RCC_OscConfig+0x2ce>
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	42470000 	.word	0x42470000
 8003468:	42470e80 	.word	0x42470e80
 800346c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003470:	f7fd fbcc 	bl	8000c0c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e106      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_RCC_OscConfig+0x4e4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2f0>
 8003496:	4b81      	ldr	r3, [pc, #516]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	e01c      	b.n	80034de <HAL_RCC_OscConfig+0x32a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x312>
 80034ac:	4b7b      	ldr	r3, [pc, #492]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a7a      	ldr	r2, [pc, #488]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	4b78      	ldr	r3, [pc, #480]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a77      	ldr	r2, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	e00b      	b.n	80034de <HAL_RCC_OscConfig+0x32a>
 80034c6:	4b75      	ldr	r3, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a74      	ldr	r2, [pc, #464]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	4b72      	ldr	r3, [pc, #456]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a71      	ldr	r2, [pc, #452]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d015      	beq.n	8003512 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fd fb91 	bl	8000c0c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd fb8d 	bl	8000c0c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0c5      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCC_OscConfig+0x33a>
 8003510:	e014      	b.n	800353c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fd fb7b 	bl	8000c0c <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fd fb77 	bl	8000c0c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0af      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ee      	bne.n	800351a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a55      	ldr	r2, [pc, #340]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 809b 	beq.w	800368e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d05c      	beq.n	800361e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d141      	bne.n	80035f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fd fb4b 	bl	8000c0c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fd fb47 	bl	8000c0c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e081      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	019b      	lsls	r3, r3, #6
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	061b      	lsls	r3, r3, #24
 80035bc:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd fb20 	bl	8000c0c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd fb1c 	bl	8000c0c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e056      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x41c>
 80035ee:	e04e      	b.n	800368e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fd fb09 	bl	8000c0c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fd fb05 	bl	8000c0c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e03f      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x44a>
 800361c:	e037      	b.n	800368e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e032      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_RCC_OscConfig+0x4e8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d028      	beq.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d121      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d11a      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003660:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d107      	bne.n	800368a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40007000 	.word	0x40007000
 800369c:	40023800 	.word	0x40023800
 80036a0:	42470060 	.word	0x42470060

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fd fa3a 	bl	8000c0c <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd fa36 	bl	8000c0c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f99a 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08003ae4 	.word	0x08003ae4
 8003868:	20000048 	.word	0x20000048
 800386c:	2000004c 	.word	0x2000004c

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	2300      	movs	r3, #0
 8003882:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80bd 	bhi.w	8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e0b7      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038a6:	60bb      	str	r3, [r7, #8]
       break;
 80038a8:	e0b7      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038ac:	60bb      	str	r3, [r7, #8]
      break;
 80038ae:	e0b4      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04d      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	461a      	mov	r2, r3
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	ea02 0800 	and.w	r8, r2, r0
 80038de:	ea03 0901 	and.w	r9, r3, r1
 80038e2:	4640      	mov	r0, r8
 80038e4:	4649      	mov	r1, r9
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	014b      	lsls	r3, r1, #5
 80038f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038f4:	0142      	lsls	r2, r0, #5
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	ebb0 0008 	subs.w	r0, r0, r8
 80038fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	018b      	lsls	r3, r1, #6
 800390c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003910:	0182      	lsls	r2, r0, #6
 8003912:	1a12      	subs	r2, r2, r0
 8003914:	eb63 0301 	sbc.w	r3, r3, r1
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	00d9      	lsls	r1, r3, #3
 8003922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003926:	00d0      	lsls	r0, r2, #3
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	eb12 0208 	adds.w	r2, r2, r8
 8003930:	eb43 0309 	adc.w	r3, r3, r9
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0259      	lsls	r1, r3, #9
 800393e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003942:	0250      	lsls	r0, r2, #9
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	461a      	mov	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	f7fc fc38 	bl	80001c8 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e04a      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	ea02 0400 	and.w	r4, r2, r0
 800397a:	ea03 0501 	and.w	r5, r3, r1
 800397e:	4620      	mov	r0, r4
 8003980:	4629      	mov	r1, r5
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	014b      	lsls	r3, r1, #5
 800398c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003990:	0142      	lsls	r2, r0, #5
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	1b00      	subs	r0, r0, r4
 8003998:	eb61 0105 	sbc.w	r1, r1, r5
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	018b      	lsls	r3, r1, #6
 80039a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039aa:	0182      	lsls	r2, r0, #6
 80039ac:	1a12      	subs	r2, r2, r0
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	00d9      	lsls	r1, r3, #3
 80039bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039c0:	00d0      	lsls	r0, r2, #3
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	1912      	adds	r2, r2, r4
 80039c8:	eb45 0303 	adc.w	r3, r5, r3
 80039cc:	f04f 0000 	mov.w	r0, #0
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	0299      	lsls	r1, r3, #10
 80039d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039da:	0290      	lsls	r0, r2, #10
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	f7fc fbec 	bl	80001c8 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	3301      	adds	r3, #1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	60bb      	str	r3, [r7, #8]
      break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a16:	60bb      	str	r3, [r7, #8]
      break;
 8003a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000048 	.word	0x20000048

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a9b      	lsrs	r3, r3, #10
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	08003af4 	.word	0x08003af4

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4d0d      	ldr	r5, [pc, #52]	; (8003aac <__libc_init_array+0x38>)
 8003a78:	4c0d      	ldr	r4, [pc, #52]	; (8003ab0 <__libc_init_array+0x3c>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	2600      	movs	r6, #0
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	4d0b      	ldr	r5, [pc, #44]	; (8003ab4 <__libc_init_array+0x40>)
 8003a86:	4c0c      	ldr	r4, [pc, #48]	; (8003ab8 <__libc_init_array+0x44>)
 8003a88:	f000 f820 	bl	8003acc <_init>
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	2600      	movs	r6, #0
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08003b04 	.word	0x08003b04
 8003ab0:	08003b04 	.word	0x08003b04
 8003ab4:	08003b04 	.word	0x08003b04
 8003ab8:	08003b08 	.word	0x08003b08

08003abc <memset>:
 8003abc:	4402      	add	r2, r0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <_init>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	bf00      	nop
 8003ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad2:	bc08      	pop	{r3}
 8003ad4:	469e      	mov	lr, r3
 8003ad6:	4770      	bx	lr

08003ad8 <_fini>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr
