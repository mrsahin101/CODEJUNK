
003_DAC_TRIANGULAR_WAVE_DMA_TIMER_TRIGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b171  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b96  00000000  00000000  0002b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a60  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002029b  00000000  00000000  0002e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1b5  00000000  00000000  0004e57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60cd  00000000  00000000  0005a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001207fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ec4  00000000  00000000  00120850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002484 	.word	0x08002484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002484 	.word	0x08002484

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa76 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f822 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f912 	bl	80006f4 <MX_GPIO_Init>
  MX_DAC_Init();
 80004d0:	f000 f888 	bl	80005e4 <MX_DAC_Init>
  MX_DMA_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_DMA_Init>
  MX_TIM6_Init();
 80004d8:	f000 f8b8 	bl	800064c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	480a      	ldr	r0, [pc, #40]	; (8000508 <main+0x48>)
 80004e0:	f000 fc0d 	bl	8000cfe <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0xAAA);
 80004e4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <main+0x48>)
 80004ee:	f000 fc58 	bl	8000da2 <HAL_DAC_SetValue>
  HAL_TIM_Base_Start(&htim6);
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x4c>)
 80004f4:	f001 fe16 	bl	8002124 <HAL_TIM_Base_Start>
  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, 2047);
 80004f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80004fc:	2100      	movs	r1, #0
 80004fe:	4802      	ldr	r0, [pc, #8]	; (8000508 <main+0x48>)
 8000500:	f000 fcc3 	bl	8000e8a <HAL_DACEx_TriangleWaveGenerate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x44>
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088
 800050c:	2000009c 	.word	0x2000009c

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f001 ffa8 	bl	8002474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000584:	23a8      	movs	r3, #168	; 0xa8
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f935 	bl	8001804 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a0:	f000 f8d0 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb96 	bl	8001cf4 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 f8b9 	bl	8000744 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_DAC_Init+0x60>)
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <MX_DAC_Init+0x64>)
 80005f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_DAC_Init+0x60>)
 80005fa:	f000 fb5e 	bl	8000cba <HAL_DAC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000604:	f000 f89e 	bl	8000744 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000608:	2304      	movs	r3, #4
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_DAC_Init+0x60>)
 8000618:	f000 fbe8 	bl	8000dec <HAL_DAC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000622:	f000 f88f 	bl	8000744 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 8000626:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800062a:	2100      	movs	r1, #0
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_DAC_Init+0x60>)
 800062e:	f000 fc2c 	bl	8000e8a <HAL_DACEx_TriangleWaveGenerate>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000638:	f000 f884 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000088 	.word	0x20000088
 8000648:	40007400 	.word	0x40007400

0800064c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_TIM6_Init+0x60>)
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <MX_TIM6_Init+0x64>)
 800065e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_TIM6_Init+0x60>)
 8000662:	2202      	movs	r2, #2
 8000664:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_TIM6_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 234;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_TIM6_Init+0x60>)
 800066e:	22ea      	movs	r2, #234	; 0xea
 8000670:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_TIM6_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_TIM6_Init+0x60>)
 800067a:	f001 fd03 	bl	8002084 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000684:	f000 f85e 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000688:	2320      	movs	r3, #32
 800068a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM6_Init+0x60>)
 8000696:	f001 fe4d 	bl	8002334 <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80006a0:	f000 f850 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	40001000 	.word	0x40001000

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_DMA_Init+0x3c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <MX_DMA_Init+0x3c>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_DMA_Init+0x3c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2010      	movs	r0, #16
 80006dc:	f000 fab7 	bl	8000c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006e0:	2010      	movs	r0, #16
 80006e2:	f000 fad0 	bl	8000c86 <HAL_NVIC_EnableIRQ>

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <MX_GPIO_Init+0x4c>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_GPIO_Init+0x4c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <MX_GPIO_Init+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 fa52 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2f      	ldr	r2, [pc, #188]	; (800087c <HAL_DAC_MspInit+0xdc>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d157      	bne.n	8000872 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_DAC_MspInit+0xe0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	481d      	ldr	r0, [pc, #116]	; (8000884 <HAL_DAC_MspInit+0xe4>)
 800080e:	f000 fe5d 	bl	80014cc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <HAL_DAC_MspInit+0xec>)
 8000816:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800081a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800081e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000822:	2240      	movs	r2, #64	; 0x40
 8000824:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800082e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000832:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800083a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 8000858:	f000 fb4e 	bl	8000ef8 <HAL_DMA_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8000862:	f7ff ff6f 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_DAC_MspInit+0xe8>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40007400 	.word	0x40007400
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	20000028 	.word	0x20000028
 800088c:	40026088 	.word	0x40026088

08000890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_TIM_Base_MspInit+0x3c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d10d      	bne.n	80008be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_TIM_Base_MspInit+0x40>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_TIM_Base_MspInit+0x40>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_TIM_Base_MspInit+0x40>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40001000 	.word	0x40001000
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f89a 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <DMA1_Stream5_IRQHandler+0x10>)
 800092e:	f000 fb91 	bl	8001054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000028 	.word	0x20000028

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800098a:	f7ff ffd7 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f001 fd4d 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fd95 	bl	80004c0 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	200000e8 	.word	0x200000e8

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f92b 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff feb2 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f943 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f90b 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200000e4 	.word	0x200000e4

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000e4 	.word	0x200000e4

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e014      	b.n	8000cf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d105      	bne.n	8000ce2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fd5f 	bl	80007a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	795b      	ldrb	r3, [r3, #5]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_DAC_Start+0x16>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e040      	b.n	8000d96 <HAL_DAC_Start+0x98>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000d48:	2b3c      	cmp	r3, #60	; 0x3c
 8000d4a:	d11d      	bne.n	8000d88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	e014      	b.n	8000d88 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	213c      	movs	r1, #60	; 0x3c
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d107      	bne.n	8000d88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0202 	orr.w	r2, r2, #2
 8000d86:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b087      	sub	sp, #28
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e004      	b.n	8000dd6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3314      	adds	r3, #20
 8000dd4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	795b      	ldrb	r3, [r3, #5]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <HAL_DAC_ConfigChannel+0x18>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e03c      	b.n	8000e7e <HAL_DAC_ConfigChannel+0x92>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2201      	movs	r2, #1
 8000e08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2201      	movs	r2, #1
 8000e74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e024      	b.n	8000eec <HAL_DACEx_TriangleWaveGenerate+0x62>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	ea02 0103 	and.w	r1, r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fdbc 	bl	8000a80 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e099      	b.n	8001048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f34:	e00f      	b.n	8000f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f36:	f7ff fda3 	bl	8000a80 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d908      	bls.n	8000f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2220      	movs	r2, #32
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e078      	b.n	8001048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e8      	bne.n	8000f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_DMA_Init+0x158>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d107      	bne.n	8000fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f023 0307 	bic.w	r3, r3, #7
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d117      	bne.n	800101a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00e      	beq.n	800101a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f9e9 	bl	80013d4 <DMA_CheckFifoParam>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001016:	2301      	movs	r3, #1
 8001018:	e016      	b.n	8001048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f9a0 	bl	8001368 <DMA_CalcBaseAndBitshift>
 8001028:	4603      	mov	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	223f      	movs	r2, #63	; 0x3f
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	f010803f 	.word	0xf010803f

08001054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001060:	4b92      	ldr	r3, [pc, #584]	; (80012ac <HAL_DMA_IRQHandler+0x258>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <HAL_DMA_IRQHandler+0x25c>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0a9b      	lsrs	r3, r3, #10
 800106c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107e:	2208      	movs	r2, #8
 8001080:	409a      	lsls	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d01a      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0204 	bic.w	r2, r2, #4
 80010a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2208      	movs	r2, #8
 80010ae:	409a      	lsls	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	2201      	movs	r2, #1
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d012      	beq.n	80010f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2201      	movs	r2, #1
 80010e4:	409a      	lsls	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	f043 0202 	orr.w	r2, r3, #2
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	2204      	movs	r2, #4
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	2204      	movs	r2, #4
 800111a:	409a      	lsls	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001124:	f043 0204 	orr.w	r2, r3, #4
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	2210      	movs	r2, #16
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d043      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d03c      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114e:	2210      	movs	r2, #16
 8001150:	409a      	lsls	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d018      	beq.n	8001196 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d108      	bne.n	8001184 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	d024      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
 8001182:	e01f      	b.n	80011c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01b      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
 8001194:	e016      	b.n	80011c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d107      	bne.n	80011b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0208 	bic.w	r2, r2, #8
 80011b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c8:	2220      	movs	r2, #32
 80011ca:	409a      	lsls	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 808e 	beq.w	80012f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 8086 	beq.w	80012f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2220      	movs	r2, #32
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d136      	bne.n	800126c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0216 	bic.w	r2, r2, #22
 800120c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <HAL_DMA_IRQHandler+0x1da>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0208 	bic.w	r2, r2, #8
 800123c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001242:	223f      	movs	r2, #63	; 0x3f
 8001244:	409a      	lsls	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125e:	2b00      	cmp	r3, #0
 8001260:	d07d      	beq.n	800135e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
        }
        return;
 800126a:	e078      	b.n	800135e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01c      	beq.n	80012b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d108      	bne.n	800129a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	2b00      	cmp	r3, #0
 800128e:	d030      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
 8001298:	e02b      	b.n	80012f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d027      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
 80012aa:	e022      	b.n	80012f2 <HAL_DMA_IRQHandler+0x29e>
 80012ac:	20000000 	.word	0x20000000
 80012b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0210 	bic.w	r2, r2, #16
 80012d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d032      	beq.n	8001360 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d022      	beq.n	800134c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3301      	adds	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	429a      	cmp	r2, r3
 8001328:	d307      	bcc.n	800133a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f2      	bne.n	800131e <HAL_DMA_IRQHandler+0x2ca>
 8001338:	e000      	b.n	800133c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800133a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
 800135c:	e000      	b.n	8001360 <HAL_DMA_IRQHandler+0x30c>
        return;
 800135e:	bf00      	nop
    }
  }
}
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop

08001368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3b10      	subs	r3, #16
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <DMA_CalcBaseAndBitshift+0x64>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d909      	bls.n	80013aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	1d1a      	adds	r2, r3, #4
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	659a      	str	r2, [r3, #88]	; 0x58
 80013a8:	e007      	b.n	80013ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013b2:	f023 0303 	bic.w	r3, r3, #3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	aaaaaaab 	.word	0xaaaaaaab
 80013d0:	080024ac 	.word	0x080024ac

080013d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11f      	bne.n	800142e <DMA_CheckFifoParam+0x5a>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d856      	bhi.n	80014a2 <DMA_CheckFifoParam+0xce>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <DMA_CheckFifoParam+0x28>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	0800141f 	.word	0x0800141f
 8001404:	0800140d 	.word	0x0800140d
 8001408:	080014a3 	.word	0x080014a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d046      	beq.n	80014a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800141c:	e043      	b.n	80014a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001426:	d140      	bne.n	80014aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800142c:	e03d      	b.n	80014aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001436:	d121      	bne.n	800147c <DMA_CheckFifoParam+0xa8>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d837      	bhi.n	80014ae <DMA_CheckFifoParam+0xda>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <DMA_CheckFifoParam+0x70>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145b 	.word	0x0800145b
 800144c:	08001455 	.word	0x08001455
 8001450:	0800146d 	.word	0x0800146d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      break;
 8001458:	e030      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d025      	beq.n	80014b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800146a:	e022      	b.n	80014b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001474:	d11f      	bne.n	80014b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800147a:	e01c      	b.n	80014b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d903      	bls.n	800148a <DMA_CheckFifoParam+0xb6>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d003      	beq.n	8001490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001488:	e018      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
      break;
 800148e:	e015      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00e      	beq.n	80014ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
      break;
 80014a0:	e00b      	b.n	80014ba <DMA_CheckFifoParam+0xe6>
      break;
 80014a2:	bf00      	nop
 80014a4:	e00a      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;
 80014a6:	bf00      	nop
 80014a8:	e008      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;
 80014aa:	bf00      	nop
 80014ac:	e006      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;
 80014ae:	bf00      	nop
 80014b0:	e004      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;
 80014b2:	bf00      	nop
 80014b4:	e002      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;   
 80014b6:	bf00      	nop
 80014b8:	e000      	b.n	80014bc <DMA_CheckFifoParam+0xe8>
      break;
 80014ba:	bf00      	nop
    }
  } 
  
  return status; 
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e16b      	b.n	80017c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	f040 815a 	bne.w	80017ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d005      	beq.n	800151e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	2b02      	cmp	r3, #2
 800151c:	d130      	bne.n	8001580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b03      	cmp	r3, #3
 800158a:	d017      	beq.n	80015bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d123      	bne.n	8001610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	69b9      	ldr	r1, [r7, #24]
 800160c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0203 	and.w	r2, r3, #3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80b4 	beq.w	80017ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b60      	ldr	r3, [pc, #384]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a5f      	ldr	r2, [pc, #380]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166e:	4a5b      	ldr	r2, [pc, #364]	; (80017dc <HAL_GPIO_Init+0x310>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_GPIO_Init+0x314>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x318>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_GPIO_Init+0x31c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_GPIO_Init+0x320>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_GPIO_Init+0x324>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x328>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_GPIO_Init+0x32c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_GPIO_Init+0x330>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x20a>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00e      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016d6:	2308      	movs	r3, #8
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x310>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_GPIO_Init+0x334>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_GPIO_Init+0x334>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_GPIO_Init+0x334>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f ae90 	bls.w	80014e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40021800 	.word	0x40021800
 80017fc:	40021c00 	.word	0x40021c00
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e264      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d075      	beq.n	800190e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001822:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d00c      	beq.n	8001848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4ba0      	ldr	r3, [pc, #640]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001836:	2b08      	cmp	r3, #8
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4b9d      	ldr	r3, [pc, #628]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001846:	d10b      	bne.n	8001860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	4b99      	ldr	r3, [pc, #612]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d05b      	beq.n	800190c <HAL_RCC_OscConfig+0x108>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d157      	bne.n	800190c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e23f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001868:	d106      	bne.n	8001878 <HAL_RCC_OscConfig+0x74>
 800186a:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a90      	ldr	r2, [pc, #576]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e01d      	b.n	80018b4 <HAL_RCC_OscConfig+0xb0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b88      	ldr	r3, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a87      	ldr	r2, [pc, #540]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0xb0>
 800189c:	4b84      	ldr	r3, [pc, #528]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a83      	ldr	r2, [pc, #524]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a80      	ldr	r2, [pc, #512]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff f8e0 	bl	8000a80 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff f8dc 	bl	8000a80 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e204      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0xc0>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8cc 	bl	8000a80 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff f8c8 	bl	8000a80 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1f0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	4b6c      	ldr	r3, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0xe8>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d063      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800191a:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800192e:	2b08      	cmp	r3, #8
 8001930:	d11c      	bne.n	800196c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x152>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e1c4      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4952      	ldr	r1, [pc, #328]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e03a      	b.n	80019e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <HAL_RCC_OscConfig+0x2b0>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f881 	bl	8000a80 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff f87d 	bl	8000a80 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1a5      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4940      	ldr	r1, [pc, #256]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_OscConfig+0x2b0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f860 	bl	8000a80 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff f85c 	bl	8000a80 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e184      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d030      	beq.n	8001a50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_RCC_OscConfig+0x2b4>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f840 	bl	8000a80 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f83c 	bl	8000a80 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e164      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x200>
 8001a22:	e015      	b.n	8001a50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_OscConfig+0x2b4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f829 	bl	8000a80 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff f825 	bl	8000a80 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e14d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a0 	beq.w	8001b9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x2b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d121      	bne.n	8001ade <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x2b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <HAL_RCC_OscConfig+0x2b8>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7fe ffeb 	bl	8000a80 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e011      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2ce>
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	42470000 	.word	0x42470000
 8001ab8:	42470e80 	.word	0x42470e80
 8001abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7fe ffde 	bl	8000a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e106      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b85      	ldr	r3, [pc, #532]	; (8001ce8 <HAL_RCC_OscConfig+0x4e4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
 8001ae6:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x32a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b78      	ldr	r3, [pc, #480]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a77      	ldr	r2, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x32a>
 8001b16:	4b75      	ldr	r3, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a74      	ldr	r2, [pc, #464]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	4b72      	ldr	r3, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a71      	ldr	r2, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7fe ffa3 	bl	8000a80 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7fe ff9f 	bl	8000a80 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0c5      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x33a>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7fe ff8d 	bl	8000a80 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7fe ff89 	bl	8000a80 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0af      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a55      	ldr	r2, [pc, #340]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 809b 	beq.w	8001cde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d05c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d141      	bne.n	8001c40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x4ec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7fe ff5d 	bl	8000a80 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe ff59 	bl	8000a80 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e081      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	019b      	lsls	r3, r3, #6
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	3b01      	subs	r3, #1
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	4937      	ldr	r1, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0x4ec>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff32 	bl	8000a80 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ff2e 	bl	8000a80 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e056      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x41c>
 8001c3e:	e04e      	b.n	8001cde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_OscConfig+0x4ec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ff1b 	bl	8000a80 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe ff17 	bl	8000a80 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e03f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x44a>
 8001c6c:	e037      	b.n	8001cde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e032      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_RCC_OscConfig+0x4e8>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d028      	beq.n	8001cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d121      	bne.n	8001cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d11a      	bne.n	8001cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d111      	bne.n	8001cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470060 	.word	0x42470060

08001cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0cc      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d90c      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0b8      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	494d      	ldr	r1, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d044      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d119      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e07f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e067      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4934      	ldr	r1, [pc, #208]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7fe fe4c 	bl	8000a80 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe fe48 	bl	8000a80 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e04f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d20c      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e032      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4916      	ldr	r1, [pc, #88]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7a:	f000 f821 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	490a      	ldr	r1, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	5ccb      	ldrb	r3, [r1, r3]
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fdac 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	0800249c 	.word	0x0800249c
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed8:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d00d      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	f200 80bd 	bhi.w	8002064 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ef2:	e0b7      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ef6:	60bb      	str	r3, [r7, #8]
       break;
 8001ef8:	e0b7      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001efa:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001efc:	60bb      	str	r3, [r7, #8]
      break;
 8001efe:	e0b4      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f00:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d04d      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f16:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	ea02 0800 	and.w	r8, r2, r0
 8001f2e:	ea03 0901 	and.w	r9, r3, r1
 8001f32:	4640      	mov	r0, r8
 8001f34:	4649      	mov	r1, r9
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	014b      	lsls	r3, r1, #5
 8001f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f44:	0142      	lsls	r2, r0, #5
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	ebb0 0008 	subs.w	r0, r0, r8
 8001f4e:	eb61 0109 	sbc.w	r1, r1, r9
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f60:	0182      	lsls	r2, r0, #6
 8001f62:	1a12      	subs	r2, r2, r0
 8001f64:	eb63 0301 	sbc.w	r3, r3, r1
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	00d9      	lsls	r1, r3, #3
 8001f72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f76:	00d0      	lsls	r0, r2, #3
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	eb12 0208 	adds.w	r2, r2, r8
 8001f80:	eb43 0309 	adc.w	r3, r3, r9
 8001f84:	f04f 0000 	mov.w	r0, #0
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	0259      	lsls	r1, r3, #9
 8001f8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f92:	0250      	lsls	r0, r2, #9
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f7fe f910 	bl	80001c8 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e04a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	ea02 0400 	and.w	r4, r2, r0
 8001fca:	ea03 0501 	and.w	r5, r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	014b      	lsls	r3, r1, #5
 8001fdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fe0:	0142      	lsls	r2, r0, #5
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	1b00      	subs	r0, r0, r4
 8001fe8:	eb61 0105 	sbc.w	r1, r1, r5
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	018b      	lsls	r3, r1, #6
 8001ff6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ffa:	0182      	lsls	r2, r0, #6
 8001ffc:	1a12      	subs	r2, r2, r0
 8001ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	00d9      	lsls	r1, r3, #3
 800200c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002010:	00d0      	lsls	r0, r2, #3
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	1912      	adds	r2, r2, r4
 8002018:	eb45 0303 	adc.w	r3, r5, r3
 800201c:	f04f 0000 	mov.w	r0, #0
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	0299      	lsls	r1, r3, #10
 8002026:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800202a:	0290      	lsls	r0, r2, #10
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f7fe f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4613      	mov	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	60bb      	str	r3, [r7, #8]
      break;
 8002062:	e002      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002066:	60bb      	str	r3, [r7, #8]
      break;
 8002068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206a:	68bb      	ldr	r3, [r7, #8]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	00f42400 	.word	0x00f42400
 8002080:	007a1200 	.word	0x007a1200

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fbf0 	bl	8000890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 f896 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e046      	b.n	80021ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <HAL_TIM_Base_Start+0xb4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d01d      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1f      	ldr	r2, [pc, #124]	; (80021dc <HAL_TIM_Base_Start+0xb8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_TIM_Base_Start+0xbc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_TIM_Base_Start+0xc0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_Base_Start+0xc4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_TIM_Base_Start+0xc8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start+0x70>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_Base_Start+0xcc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40001800 	.word	0x40001800

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <TIM_Base_SetConfig+0x114>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d00f      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3d      	ldr	r2, [pc, #244]	; (800230c <TIM_Base_SetConfig+0x118>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00b      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3c      	ldr	r2, [pc, #240]	; (8002310 <TIM_Base_SetConfig+0x11c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <TIM_Base_SetConfig+0x120>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <TIM_Base_SetConfig+0x124>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d108      	bne.n	8002246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <TIM_Base_SetConfig+0x114>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d027      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <TIM_Base_SetConfig+0x118>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d023      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <TIM_Base_SetConfig+0x11c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <TIM_Base_SetConfig+0x120>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <TIM_Base_SetConfig+0x124>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d017      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <TIM_Base_SetConfig+0x128>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <TIM_Base_SetConfig+0x12c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00f      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <TIM_Base_SetConfig+0x130>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00b      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <TIM_Base_SetConfig+0x134>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <TIM_Base_SetConfig+0x138>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d003      	beq.n	80022a6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <TIM_Base_SetConfig+0x13c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <TIM_Base_SetConfig+0x114>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <TIM_Base_SetConfig+0xf8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <TIM_Base_SetConfig+0x124>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	615a      	str	r2, [r3, #20]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40010400 	.word	0x40010400
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	40001800 	.word	0x40001800
 800232c:	40001c00 	.word	0x40001c00
 8002330:	40002000 	.word	0x40002000

08002334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002348:	2302      	movs	r3, #2
 800234a:	e05a      	b.n	8002402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d01d      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d018      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00e      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a15      	ldr	r2, [pc, #84]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10c      	bne.n	80023f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40010400 	.word	0x40010400
 8002424:	40014000 	.word	0x40014000
 8002428:	40001800 	.word	0x40001800

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	4d0d      	ldr	r5, [pc, #52]	; (8002464 <__libc_init_array+0x38>)
 8002430:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <__libc_init_array+0x3c>)
 8002432:	1b64      	subs	r4, r4, r5
 8002434:	10a4      	asrs	r4, r4, #2
 8002436:	2600      	movs	r6, #0
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	4d0b      	ldr	r5, [pc, #44]	; (800246c <__libc_init_array+0x40>)
 800243e:	4c0c      	ldr	r4, [pc, #48]	; (8002470 <__libc_init_array+0x44>)
 8002440:	f000 f820 	bl	8002484 <_init>
 8002444:	1b64      	subs	r4, r4, r5
 8002446:	10a4      	asrs	r4, r4, #2
 8002448:	2600      	movs	r6, #0
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f855 3b04 	ldr.w	r3, [r5], #4
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f855 3b04 	ldr.w	r3, [r5], #4
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	080024bc 	.word	0x080024bc
 8002468:	080024bc 	.word	0x080024bc
 800246c:	080024bc 	.word	0x080024bc
 8002470:	080024c0 	.word	0x080024c0

08002474 <memset>:
 8002474:	4402      	add	r2, r0
 8002476:	4603      	mov	r3, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	d100      	bne.n	800247e <memset+0xa>
 800247c:	4770      	bx	lr
 800247e:	f803 1b01 	strb.w	r1, [r3], #1
 8002482:	e7f9      	b.n	8002478 <memset+0x4>

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
