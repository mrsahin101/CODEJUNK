
020_USB_OTG_VCP_BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007050  08007050  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007058  08007058  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001c6c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d6c  20001d6c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df10  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c9  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b93  00000000  00000000  00031e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebd0  00000000  00000000  000549db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3dc2  00000000  00000000  000635ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012736d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c88  00000000  00000000  001273c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fd8 	.word	0x08006fd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08006fd8 	.word	0x08006fd8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b598      	push	{r3, r4, r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f996 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f83a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8a2 	bl	8000630 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 f80a 	bl	8006504 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(buffer[0] != 0x00)
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x74>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d019      	beq.n	800052c <main+0x50>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4815      	ldr	r0, [pc, #84]	; (8000554 <main+0x78>)
 80004fe:	f000 fce4 	bl	8000eca <HAL_GPIO_TogglePin>
		  if(buffer[0] == 0x01)
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x74>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d104      	bne.n	8000514 <main+0x38>
			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x78>)
 8000510:	f000 fcdb 	bl	8000eca <HAL_GPIO_TogglePin>
		  if(buffer[5] == 0x01)
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <main+0x74>)
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d104      	bne.n	8000526 <main+0x4a>
			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x78>)
 8000522:	f000 fcd2 	bl	8000eca <HAL_GPIO_TogglePin>
		  buffer[0] = 0x00;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
	  }
	  CDC_Transmit_FS(data, strlen(data));
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <main+0x7c>)
 800052e:	681c      	ldr	r4, [r3, #0]
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <main+0x7c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe47 	bl	80001c8 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	4620      	mov	r0, r4
 8000542:	f006 f8b3 	bl	80066ac <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 f9d3 	bl	80008f4 <HAL_Delay>
	  if(buffer[0] != 0x00)
 800054e:	e7cf      	b.n	80004f0 <main+0x14>
 8000550:	2000011c 	.word	0x2000011c
 8000554:	40020c00 	.word	0x40020c00
 8000558:	20000000 	.word	0x20000000

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f006 fd2c 	bl	8006fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 ff08 	bl	80023f8 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 f871 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f969 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800061c:	f000 f85a 	bl	80006d4 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_GPIO_Init+0x9c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_GPIO_Init+0x9c>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0xa0>)
 80006a2:	f000 fbf9 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0xa0>)
 80006c0:	f000 fa4e 	bl	8000b60 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_MspInit+0x4c>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <HAL_MspInit+0x4c>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f4:	6453      	str	r3, [r2, #68]	; 0x44
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x4c>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_MspInit+0x4c>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800071e:	2007      	movs	r0, #7
 8000720:	f000 f9dc 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f89a 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <OTG_FS_IRQHandler+0x10>)
 800078a:	f000 fd08 	bl	800119e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20001640 	.word	0x20001640

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007d8:	4c0b      	ldr	r4, [pc, #44]	; (8000808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007e6:	f7ff ffd7 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f006 fbbb 	bl	8006f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ee:	f7ff fe75 	bl	80004dc <main>
  bx  lr    
 80007f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000800:	08007060 	.word	0x08007060
  ldr r2, =_sbss
 8000804:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000808:	20001d6c 	.word	0x20001d6c

0800080c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC_IRQHandler>
	...

08000810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <HAL_Init+0x40>)
 800081a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_Init+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_Init+0x40>)
 8000826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x40>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x40>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f94f 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f808 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff ff4c 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023c00 	.word	0x40023c00

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x54>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f967 	bl	8000b46 <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f92f 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_InitTick+0x5c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000004 	.word	0x20000004
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	20000008 	.word	0x20000008

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000000c 	.word	0x2000000c
 80008d8:	2000015c 	.word	0x2000015c

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000015c 	.word	0x2000015c

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff ffee 	bl	80008dc <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffde 	bl	80008dc <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000000c 	.word	0x2000000c

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <__NVIC_EnableIRQ+0x38>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff29 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff3e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff8e 	bl	8000a30 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff31 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e16b      	b.n	8000e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 815a 	bne.w	8000e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d005      	beq.n	8000bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d130      	bne.n	8000c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	f003 0201 	and.w	r2, r3, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d017      	beq.n	8000c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0203 	and.w	r2, r3, #3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80b4 	beq.w	8000e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b60      	ldr	r3, [pc, #384]	; (8000e6c <HAL_GPIO_Init+0x30c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a5f      	ldr	r2, [pc, #380]	; (8000e6c <HAL_GPIO_Init+0x30c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b5d      	ldr	r3, [pc, #372]	; (8000e6c <HAL_GPIO_Init+0x30c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d02:	4a5b      	ldr	r2, [pc, #364]	; (8000e70 <HAL_GPIO_Init+0x310>)
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a52      	ldr	r2, [pc, #328]	; (8000e74 <HAL_GPIO_Init+0x314>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d02b      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a51      	ldr	r2, [pc, #324]	; (8000e78 <HAL_GPIO_Init+0x318>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d025      	beq.n	8000d82 <HAL_GPIO_Init+0x222>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a50      	ldr	r2, [pc, #320]	; (8000e7c <HAL_GPIO_Init+0x31c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x21e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <HAL_GPIO_Init+0x320>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x21a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4e      	ldr	r2, [pc, #312]	; (8000e84 <HAL_GPIO_Init+0x324>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x216>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	; (8000e88 <HAL_GPIO_Init+0x328>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x212>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	; (8000e8c <HAL_GPIO_Init+0x32c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x20e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4b      	ldr	r2, [pc, #300]	; (8000e90 <HAL_GPIO_Init+0x330>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x20a>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e00e      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	e00c      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e00a      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d72:	2305      	movs	r3, #5
 8000d74:	e008      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e004      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x228>
 8000d86:	2300      	movs	r3, #0
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	f002 0203 	and.w	r2, r2, #3
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	4093      	lsls	r3, r2
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d98:	4935      	ldr	r1, [pc, #212]	; (8000e70 <HAL_GPIO_Init+0x310>)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da6:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dca:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df4:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_GPIO_Init+0x334>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	f67f ae90 	bls.w	8000b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40021400 	.word	0x40021400
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	40021c00 	.word	0x40021c00
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	041a      	lsls	r2, r3, #16
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	400b      	ands	r3, r1
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f00:	b08f      	sub	sp, #60	; 0x3c
 8000f02:	af0a      	add	r7, sp, #40	; 0x28
 8000f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e10f      	b.n	8001130 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f005 fd06 	bl	800693c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 ffd7 	bl	8002f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	687e      	ldr	r6, [r7, #4]
 8000f5c:	466d      	mov	r5, sp
 8000f5e:	f106 0410 	add.w	r4, r6, #16
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f72:	1d33      	adds	r3, r6, #4
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f001 feae 	bl	8002cd8 <USB_CoreInit>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2202      	movs	r2, #2
 8000f86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0d0      	b.n	8001130 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 ffc5 	bl	8002f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e04a      	b.n	8001036 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	333d      	adds	r3, #61	; 0x3d
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	333c      	adds	r3, #60	; 0x3c
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3344      	adds	r3, #68	; 0x44
 8000fdc:	4602      	mov	r2, r0
 8000fde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3340      	adds	r3, #64	; 0x40
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3348      	adds	r3, #72	; 0x48
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	334c      	adds	r3, #76	; 0x4c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3354      	adds	r3, #84	; 0x54
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3af      	bcc.n	8000fa0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e044      	b.n	80010d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3b5      	bcc.n	8001046 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	687e      	ldr	r6, [r7, #4]
 80010e2:	466d      	mov	r5, sp
 80010e4:	f106 0410 	add.w	r4, r6, #16
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f8:	1d33      	adds	r3, r6, #4
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f001 ff5d 	bl	8002fbc <USB_DevInit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00d      	b.n	8001130 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f003 f8ac 	bl	8004286 <USB_DevDisconnect>

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001138 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_PCD_Start+0x1c>
 8001150:	2302      	movs	r3, #2
 8001152:	e020      	b.n	8001196 <HAL_PCD_Start+0x5e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	2b01      	cmp	r3, #1
 8001162:	d109      	bne.n	8001178 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f001 feaf 	bl	8002ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f85c 	bl	8004244 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119e:	b590      	push	{r4, r7, lr}
 80011a0:	b08d      	sub	sp, #52	; 0x34
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f91a 	bl	80043ee <USB_GetMode>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 848a 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f87e 	bl	80042c8 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8480 	beq.w	8001ad4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f86b 	bl	80042c8 <USB_ReadInterrupts>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d107      	bne.n	800120c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f002 0202 	and.w	r2, r2, #2
 800120a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f859 	bl	80042c8 <USB_ReadInterrupts>
 8001216:	4603      	mov	r3, r0
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b10      	cmp	r3, #16
 800121e:	d161      	bne.n	80012e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0210 	bic.w	r2, r2, #16
 800122e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f003 020f 	and.w	r2, r3, #15
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	0c5b      	lsrs	r3, r3, #17
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	2b02      	cmp	r3, #2
 800125a:	d124      	bne.n	80012a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d035      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	6a38      	ldr	r0, [r7, #32]
 800127c:	f002 fe90 	bl	8003fa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800128c:	441a      	add	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129e:	441a      	add	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e016      	b.n	80012d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	0c5b      	lsrs	r3, r3, #17
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d110      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012b8:	2208      	movs	r2, #8
 80012ba:	4619      	mov	r1, r3
 80012bc:	6a38      	ldr	r0, [r7, #32]
 80012be:	f002 fe6f 	bl	8003fa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ce:	441a      	add	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0210 	orr.w	r2, r2, #16
 80012e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 ffed 	bl	80042c8 <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f8:	f040 80a7 	bne.w	800144a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fff2 	bl	80042ee <USB_ReadDevAllOutEpInterrupt>
 800130a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800130c:	e099      	b.n	8001442 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 808e 	beq.w	8001436 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f003 f816 	bl	8004356 <USB_ReadDevOutEPInterrupt>
 800132a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	015a      	lsls	r2, r3, #5
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001342:	461a      	mov	r2, r3
 8001344:	2301      	movs	r3, #1
 8001346:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fec2 	bl	80020d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	015a      	lsls	r2, r3, #5
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4413      	add	r3, r2
 8001362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001366:	461a      	mov	r2, r3
 8001368:	2308      	movs	r3, #8
 800136a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800136c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 ff98 	bl	80022a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138a:	461a      	mov	r2, r3
 800138c:	2310      	movs	r3, #16
 800138e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d030      	beq.n	80013fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	2b80      	cmp	r3, #128	; 0x80
 80013a4:	d109      	bne.n	80013ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d108      	bne.n	80013ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2200      	movs	r2, #0
 80013dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f005 fbaf 	bl	8006b48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	015a      	lsls	r2, r3, #5
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f6:	461a      	mov	r2, r3
 80013f8:	2302      	movs	r3, #2
 80013fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2320      	movs	r3, #32
 8001416:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001434:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3301      	adds	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f af62 	bne.w	800130e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 ff3a 	bl	80042c8 <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800145e:	f040 80db 	bne.w	8001618 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f002 ff5b 	bl	8004322 <USB_ReadDevAllInEpInterrupt>
 800146c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001472:	e0cd      	b.n	8001610 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80c2 	beq.w	8001604 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f002 ff81 	bl	8004392 <USB_ReadDevInEPInterrupt>
 8001490:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d057      	beq.n	800154c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	2201      	movs	r2, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69f9      	ldr	r1, [r7, #28]
 80014b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014bc:	4013      	ands	r3, r2
 80014be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	015a      	lsls	r2, r3, #5
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014cc:	461a      	mov	r2, r3
 80014ce:	2301      	movs	r3, #1
 80014d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d132      	bne.n	8001540 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	334c      	adds	r3, #76	; 0x4c
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	3348      	adds	r3, #72	; 0x48
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4419      	add	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4403      	add	r3, r0
 800150e:	334c      	adds	r3, #76	; 0x4c
 8001510:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	2b00      	cmp	r3, #0
 8001516:	d113      	bne.n	8001540 <HAL_PCD_IRQHandler+0x3a2>
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3354      	adds	r3, #84	; 0x54
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001538:	461a      	mov	r2, r3
 800153a:	2101      	movs	r1, #1
 800153c:	f002 ff88 	bl	8004450 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f005 fa79 	bl	8006a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001562:	461a      	mov	r2, r3
 8001564:	2308      	movs	r3, #8
 8001566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157e:	461a      	mov	r2, r3
 8001580:	2310      	movs	r3, #16
 8001582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159a:	461a      	mov	r2, r3
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d023      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ac:	6a38      	ldr	r0, [r7, #32]
 80015ae:	f001 fe69 	bl	8003284 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	3338      	adds	r3, #56	; 0x38
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	3304      	adds	r3, #4
 80015c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2200      	movs	r2, #0
 80015d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f005 fac6 	bl	8006b6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ec:	461a      	mov	r2, r3
 80015ee:	2302      	movs	r3, #2
 80015f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fcdb 	bl	8001fba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3301      	adds	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800160a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	2b00      	cmp	r3, #0
 8001614:	f47f af2e 	bne.w	8001474 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fe53 	bl	80042c8 <USB_ReadInterrupts>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800162c:	d122      	bne.n	8001674 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001654:	2100      	movs	r1, #0
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fec2 	bl	80023e0 <HAL_PCDEx_LPM_Callback>
 800165c:	e002      	b.n	8001664 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f005 fa64 	bl	8006b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fe25 	bl	80042c8 <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001688:	d112      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b01      	cmp	r3, #1
 8001698:	d102      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f005 fa20 	bl	8006ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fe07 	bl	80042c8 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c4:	f040 80b7 	bne.w	8001836 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2110      	movs	r1, #16
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fdce 	bl	8003284 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ec:	e046      	b.n	800177c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fa:	461a      	mov	r2, r3
 80016fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001700:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001712:	0151      	lsls	r1, r2, #5
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	440a      	add	r2, r1
 8001718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800171c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001720:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172e:	461a      	mov	r2, r3
 8001730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001734:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001746:	0151      	lsls	r1, r2, #5
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	440a      	add	r2, r1
 800174c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001754:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	440a      	add	r2, r1
 800176c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001770:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001774:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	3301      	adds	r3, #1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	429a      	cmp	r2, r3
 8001784:	d3b3      	bcc.n	80016ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001794:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001798:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b2:	f043 030b 	orr.w	r3, r3, #11
 80017b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c8:	f043 030b 	orr.w	r3, r3, #11
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	e015      	b.n	80017fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f6:	f043 030b 	orr.w	r3, r3, #11
 80017fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800180e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001820:	461a      	mov	r2, r3
 8001822:	f002 fe15 	bl	8004450 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fd44 	bl	80042c8 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184a:	d124      	bne.n	8001896 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fdda 	bl	800440a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fd8f 	bl	800337e <USB_GetDevSpeed>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	f001 fa28 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8001870:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4620      	mov	r0, r4
 800187c:	f001 fa8e 	bl	8002d9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f005 f904 	bl	8006a8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001894:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fd14 	bl	80042c8 <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d10a      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f005 f8e1 	bl	8006a72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f002 0208 	and.w	r2, r2, #8
 80018be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fcff 	bl	80042c8 <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d122      	bne.n	800191a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
 80018e4:	e014      	b.n	8001910 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fb27 	bl	8001f58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	3301      	adds	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	429a      	cmp	r2, r3
 8001918:	d3e5      	bcc.n	80018e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f002 fcd2 	bl	80042c8 <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800192e:	d13b      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001930:	2301      	movs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	e02b      	b.n	800198e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3340      	adds	r3, #64	; 0x40
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d115      	bne.n	8001988 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800195c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800195e:	2b00      	cmp	r3, #0
 8001960:	da12      	bge.n	8001988 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	333f      	adds	r3, #63	; 0x3f
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4619      	mov	r1, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fae8 	bl	8001f58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3301      	adds	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	429a      	cmp	r2, r3
 8001996:	d3ce      	bcc.n	8001936 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fc8b 	bl	80042c8 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019bc:	d155      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019be:	2301      	movs	r3, #1
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e045      	b.n	8001a50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d12e      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da2b      	bge.n	8001a4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d121      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6053      	str	r3, [r2, #4]
            break;
 8001a48:	e007      	b.n	8001a5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3b4      	bcc.n	80019c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fc2a 	bl	80042c8 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7e:	d10a      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f005 f885 	bl	8006b90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fc14 	bl	80042c8 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d115      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f005 f875 	bl	8006bac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	e000      	b.n	8001ad6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ad4:	bf00      	nop
    }
  }
}
 8001ad6:	3734      	adds	r7, #52	; 0x34
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}

08001adc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_PCD_SetAddress+0x1a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e013      	b.n	8001b1e <HAL_PCD_SetAddress+0x42>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fb72 	bl	80041f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	4608      	mov	r0, r1
 8001b30:	4611      	mov	r1, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	4603      	mov	r3, r0
 8001b36:	70fb      	strb	r3, [r7, #3]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	803b      	strh	r3, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da0f      	bge.n	8001b6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3338      	adds	r3, #56	; 0x38
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	705a      	strb	r2, [r3, #1]
 8001b6a:	e00f      	b.n	8001b8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 020f 	and.w	r2, r3, #15
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b98:	883a      	ldrh	r2, [r7, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	78ba      	ldrb	r2, [r7, #2]
 8001ba2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bb6:	78bb      	ldrb	r3, [r7, #2]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d102      	bne.n	8001bc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_EP_Open+0xaa>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e00e      	b.n	8001bee <HAL_PCD_EP_Open+0xc8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fbf2 	bl	80033c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bec:	7afb      	ldrb	r3, [r7, #11]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da0f      	bge.n	8001c2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3338      	adds	r3, #56	; 0x38
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00f      	b.n	8001c4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 020f 	and.w	r2, r3, #15
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_PCD_EP_Close+0x6e>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e00e      	b.n	8001c82 <HAL_PCD_EP_Close+0x8c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fc30 	bl	80034d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	460b      	mov	r3, r1
 8001c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	f003 020f 	and.w	r2, r3, #15
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	f001 ff0f 	bl	8003b20 <USB_EP0StartXfer>
 8001d02:	e008      	b.n	8001d16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6979      	ldr	r1, [r7, #20]
 8001d12:	f001 fcbd 	bl	8003690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3338      	adds	r3, #56	; 0x38
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	f001 fead 	bl	8003b20 <USB_EP0StartXfer>
 8001dc6:	e008      	b.n	8001dda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6979      	ldr	r1, [r7, #20]
 8001dd6:	f001 fc5b 	bl	8003690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d901      	bls.n	8001e02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e050      	b.n	8001ea4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da0f      	bge.n	8001e2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3338      	adds	r3, #56	; 0x38
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	705a      	strb	r2, [r3, #1]
 8001e28:	e00d      	b.n	8001e46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_PCD_EP_SetStall+0x82>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e01e      	b.n	8001ea4 <HAL_PCD_EP_SetStall+0xc0>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 f8eb 	bl	8004050 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	b2d9      	uxtb	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e94:	461a      	mov	r2, r3
 8001e96:	f002 fadb 	bl	8004450 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d901      	bls.n	8001eca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e042      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da0f      	bge.n	8001ef2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3338      	adds	r3, #56	; 0x38
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	705a      	strb	r2, [r3, #1]
 8001ef0:	e00f      	b.n	8001f12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_ClrStall+0x86>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 f8f3 	bl	800412c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da0c      	bge.n	8001f86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	3338      	adds	r3, #56	; 0x38
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e00c      	b.n	8001fa0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 020f 	and.w	r2, r3, #15
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68f9      	ldr	r1, [r7, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 ff12 	bl	8003dd0 <USB_EPStopXfer>
 8001fac:	4603      	mov	r3, r0
 8001fae:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08a      	sub	sp, #40	; 0x28
 8001fbe:	af02      	add	r7, sp, #8
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d901      	bls.n	8001ff2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e06c      	b.n	80020cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	d902      	bls.n	800200e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3303      	adds	r3, #3
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002016:	e02b      	b.n	8002070 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	429a      	cmp	r2, r3
 800202c:	d902      	bls.n	8002034 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3303      	adds	r3, #3
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6919      	ldr	r1, [r3, #16]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800204c:	b2db      	uxtb	r3, r3
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4603      	mov	r3, r0
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f001 ff66 	bl	8003f24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	441a      	add	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	441a      	add	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	b29b      	uxth	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	429a      	cmp	r2, r3
 8002084:	d809      	bhi.n	800209a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208e:	429a      	cmp	r2, r3
 8002090:	d203      	bcs.n	800209a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1be      	bne.n	8002018 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d811      	bhi.n	80020ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	2201      	movs	r2, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	43db      	mvns	r3, r3
 80020c0:	6939      	ldr	r1, [r7, #16]
 80020c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c6:	4013      	ands	r3, r2
 80020c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	333c      	adds	r3, #60	; 0x3c
 80020ec:	3304      	adds	r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d17b      	bne.n	8002202 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d015      	beq.n	8002140 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4a61      	ldr	r2, [pc, #388]	; (800229c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f240 80b9 	bls.w	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80b3 	beq.w	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	461a      	mov	r2, r3
 8002138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213c:	6093      	str	r3, [r2, #8]
 800213e:	e0a7      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	2320      	movs	r3, #32
 800215a:	6093      	str	r3, [r2, #8]
 800215c:	e098      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 8093 	bne.w	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4a4b      	ldr	r2, [pc, #300]	; (800229c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d90f      	bls.n	8002192 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002188:	461a      	mov	r2, r3
 800218a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	e07e      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	0159      	lsls	r1, r3, #5
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	440b      	add	r3, r1
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d114      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021dc:	461a      	mov	r2, r3
 80021de:	2101      	movs	r1, #1
 80021e0:	f002 f936 	bl	8004450 <USB_EP0_OutStart>
 80021e4:	e006      	b.n	80021f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	441a      	add	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 fc04 	bl	8006a08 <HAL_PCD_DataOutStageCallback>
 8002200:	e046      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d124      	bne.n	8002254 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	e032      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	2320      	movs	r3, #32
 8002244:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4619      	mov	r1, r3
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f004 fbdb 	bl	8006a08 <HAL_PCD_DataOutStageCallback>
 8002252:	e01d      	b.n	8002290 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d114      	bne.n	8002284 <PCD_EP_OutXfrComplete_int+0x1b0>
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800227c:	461a      	mov	r2, r3
 800227e:	2100      	movs	r1, #0
 8002280:	f002 f8e6 	bl	8004450 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f004 fbbc 	bl	8006a08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	4f54300a 	.word	0x4f54300a
 80022a0:	4f54310a 	.word	0x4f54310a

080022a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	333c      	adds	r3, #60	; 0x3c
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <PCD_EP_OutSetupPacket_int+0x88>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d90e      	bls.n	80022f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 fb73 	bl	80069e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <PCD_EP_OutSetupPacket_int+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d90c      	bls.n	8002320 <PCD_EP_OutSetupPacket_int+0x7c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002318:	461a      	mov	r2, r3
 800231a:	2101      	movs	r1, #1
 800231c:	f002 f898 	bl	8004450 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	4f54300a 	.word	0x4f54300a

08002330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
 800233c:	4613      	mov	r3, r2
 800233e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234e:	883b      	ldrh	r3, [r7, #0]
 8002350:	0419      	lsls	r1, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	430a      	orrs	r2, r1
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
 800235c:	e028      	b.n	80023b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e00d      	b.n	800238e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3340      	adds	r3, #64	; 0x40
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	3b01      	subs	r3, #1
 8002394:	429a      	cmp	r2, r3
 8002396:	d3ec      	bcc.n	8002372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002398:	883b      	ldrh	r3, [r7, #0]
 800239a:	0418      	lsls	r0, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4302      	orrs	r2, r0
 80023a8:	3340      	adds	r3, #64	; 0x40
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e267      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e242      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fa14 	bl	80008dc <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fa10 	bl	80008dc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e207      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fa00 	bl	80008dc <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe f9fc 	bl	80008dc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1f3      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe f9b5 	bl	80008dc <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe f9b1 	bl	80008dc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a8      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe f994 	bl	80008dc <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe f990 	bl	80008dc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e187      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe f974 	bl	80008dc <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe f970 	bl	80008dc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e167      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe f95d 	bl	80008dc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe f959 	bl	80008dc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e150      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b81      	ldr	r3, [pc, #516]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b74      	ldr	r3, [pc, #464]	; (800286c <HAL_RCC_OscConfig+0x474>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe f919 	bl	80008dc <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe f915 	bl	80008dc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b64      	ldr	r3, [pc, #400]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a63      	ldr	r2, [pc, #396]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b58      	ldr	r3, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a54      	ldr	r2, [pc, #336]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe f8da 	bl	80008dc <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe f8d6 	bl	80008dc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0cb      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7fe f8c4 	bl	80008dc <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe f8c0 	bl	80008dc <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b5      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d05c      	beq.n	800285c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe f894 	bl	80008dc <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe f890 	bl	80008dc <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe f869 	bl	80008dc <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe f865 	bl	80008dc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x416>
 800282c:	e054      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe f852 	bl	80008dc <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe f84e 	bl	80008dc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e038      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7fd ff80 	bl	80008dc <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7fd ff7c 	bl	80008dc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fee0 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08007040 	.word	0x08007040
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b094      	sub	sp, #80	; 0x50
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d00d      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 80e1 	bhi.w	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae6:	e0db      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002aec:	e0db      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af2:	e0d8      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
 8002b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	6139      	str	r1, [r7, #16]
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4651      	mov	r1, sl
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4651      	mov	r1, sl
 8002b68:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b86:	4690      	mov	r8, r2
 8002b88:	4699      	mov	r9, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb18 0303 	adds.w	r3, r8, r3
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb49 0303 	adc.w	r3, r9, r3
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	024b      	lsls	r3, r1, #9
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	024a      	lsls	r2, r1, #9
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc4:	f7fd fb08 	bl	80001d8 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	e058      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4611      	mov	r1, r2
 8002bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfe:	0150      	lsls	r0, r2, #5
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4641      	mov	r1, r8
 8002c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c24:	ebb2 040a 	subs.w	r4, r2, sl
 8002c28:	eb63 050b 	sbc.w	r5, r3, fp
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	61fa      	str	r2, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c78:	f7fd faae 	bl	80001d8 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3750      	adds	r7, #80	; 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cd8:	b084      	sub	sp, #16
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	f107 001c 	add.w	r0, r7, #28
 8002ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d122      	bne.n	8002d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 fbee 	bl	800450c <USB_CoreReset>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e01a      	b.n	8002d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f001 fbe2 	bl	800450c <USB_CoreReset>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d5e:	e005      	b.n	8002d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10b      	bne.n	8002d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f043 0206 	orr.w	r2, r3, #6
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d96:	b004      	add	sp, #16
 8002d98:	4770      	bx	lr
	...

08002d9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d165      	bne.n	8002e7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <USB_SetTurnaroundTime+0x11c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d906      	bls.n	8002dc6 <USB_SetTurnaroundTime+0x2a>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a40      	ldr	r2, [pc, #256]	; (8002ebc <USB_SetTurnaroundTime+0x120>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d202      	bcs.n	8002dc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e062      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <USB_SetTurnaroundTime+0x120>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d306      	bcc.n	8002ddc <USB_SetTurnaroundTime+0x40>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <USB_SetTurnaroundTime+0x124>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d202      	bcs.n	8002ddc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002dd6:	230e      	movs	r3, #14
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e057      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <USB_SetTurnaroundTime+0x124>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d306      	bcc.n	8002df2 <USB_SetTurnaroundTime+0x56>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <USB_SetTurnaroundTime+0x128>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d202      	bcs.n	8002df2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002dec:	230d      	movs	r3, #13
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e04c      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <USB_SetTurnaroundTime+0x128>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d306      	bcc.n	8002e08 <USB_SetTurnaroundTime+0x6c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <USB_SetTurnaroundTime+0x12c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e02:	230c      	movs	r3, #12
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e041      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <USB_SetTurnaroundTime+0x12c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d906      	bls.n	8002e1e <USB_SetTurnaroundTime+0x82>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a2e      	ldr	r2, [pc, #184]	; (8002ecc <USB_SetTurnaroundTime+0x130>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d802      	bhi.n	8002e1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e18:	230b      	movs	r3, #11
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e036      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <USB_SetTurnaroundTime+0x130>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d906      	bls.n	8002e34 <USB_SetTurnaroundTime+0x98>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <USB_SetTurnaroundTime+0x134>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e2e:	230a      	movs	r3, #10
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e02b      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <USB_SetTurnaroundTime+0x134>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d906      	bls.n	8002e4a <USB_SetTurnaroundTime+0xae>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <USB_SetTurnaroundTime+0x138>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d202      	bcs.n	8002e4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e44:	2309      	movs	r3, #9
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e020      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <USB_SetTurnaroundTime+0x138>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d306      	bcc.n	8002e60 <USB_SetTurnaroundTime+0xc4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <USB_SetTurnaroundTime+0x13c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e015      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <USB_SetTurnaroundTime+0x13c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d906      	bls.n	8002e76 <USB_SetTurnaroundTime+0xda>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <USB_SetTurnaroundTime+0x140>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d202      	bcs.n	8002e76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e70:	2307      	movs	r3, #7
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e00a      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e76:	2306      	movs	r3, #6
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e007      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e82:	2309      	movs	r3, #9
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e001      	b.n	8002e8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	00d8acbf 	.word	0x00d8acbf
 8002ebc:	00e4e1c0 	.word	0x00e4e1c0
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	01067380 	.word	0x01067380
 8002ec8:	011a499f 	.word	0x011a499f
 8002ecc:	01312cff 	.word	0x01312cff
 8002ed0:	014ca43f 	.word	0x014ca43f
 8002ed4:	016e3600 	.word	0x016e3600
 8002ed8:	01a6ab1f 	.word	0x01a6ab1f
 8002edc:	01e84800 	.word	0x01e84800

08002ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d115      	bne.n	8002f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fd fcce 	bl	80008f4 <HAL_Delay>
      ms++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 fa45 	bl	80043ee <USB_GetMode>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d01e      	beq.n	8002fa8 <USB_SetCurrentMode+0x84>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b31      	cmp	r3, #49	; 0x31
 8002f6e:	d9f0      	bls.n	8002f52 <USB_SetCurrentMode+0x2e>
 8002f70:	e01a      	b.n	8002fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fd fcb5 	bl	80008f4 <HAL_Delay>
      ms++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f001 fa2c 	bl	80043ee <USB_GetMode>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <USB_SetCurrentMode+0x84>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b31      	cmp	r3, #49	; 0x31
 8002fa0:	d9f0      	bls.n	8002f84 <USB_SetCurrentMode+0x60>
 8002fa2:	e001      	b.n	8002fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e005      	b.n	8002fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b32      	cmp	r3, #50	; 0x32
 8002fac:	d101      	bne.n	8002fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e009      	b.n	8002ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	3301      	adds	r3, #1
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0e      	cmp	r3, #14
 8002ff4:	d9f2      	bls.n	8002fdc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11c      	bne.n	8003036 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
 8003034:	e00b      	b.n	800304e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003054:	461a      	mov	r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	4619      	mov	r1, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	461a      	mov	r2, r3
 800306a:	680b      	ldr	r3, [r1, #0]
 800306c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10c      	bne.n	800308e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800307a:	2100      	movs	r1, #0
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f965 	bl	800334c <USB_SetDevSpeed>
 8003082:	e008      	b.n	8003096 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003084:	2101      	movs	r1, #1
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f960 	bl	800334c <USB_SetDevSpeed>
 800308c:	e003      	b.n	8003096 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800308e:	2103      	movs	r1, #3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f95b 	bl	800334c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003096:	2110      	movs	r1, #16
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8f3 	bl	8003284 <USB_FlushTxFifo>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f91f 	bl	80032ec <USB_FlushRxFifo>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	461a      	mov	r2, r3
 80030c0:	2300      	movs	r3, #0
 80030c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e043      	b.n	800316a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f8:	d118      	bne.n	800312c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e013      	b.n	800313e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e008      	b.n	800313e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	461a      	mov	r2, r3
 800315e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3301      	adds	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	429a      	cmp	r2, r3
 8003170:	d3b7      	bcc.n	80030e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e043      	b.n	8003200 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800318a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318e:	d118      	bne.n	80031c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e013      	b.n	80031d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e008      	b.n	80031d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2300      	movs	r3, #0
 80031d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b7      	bcc.n	8003178 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <USB_DevInit+0x2c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f043 0208 	orr.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800327c:	b004      	add	sp, #16
 800327e:	4770      	bx	lr
 8003280:	803c3800 	.word	0x803c3800

08003284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <USB_FlushTxFifo+0x64>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e01b      	b.n	80032dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	daf2      	bge.n	8003292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <USB_FlushTxFifo+0x64>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e006      	b.n	80032dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d0f0      	beq.n	80032bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	00030d40 	.word	0x00030d40

080032ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <USB_FlushRxFifo+0x5c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e018      	b.n	800333c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	daf2      	bge.n	80032f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2210      	movs	r2, #16
 800331a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a08      	ldr	r2, [pc, #32]	; (8003348 <USB_FlushRxFifo+0x5c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e006      	b.n	800333c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d0f0      	beq.n	800331c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	00030d40 	.word	0x00030d40

0800334c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0306 	and.w	r3, r3, #6
 8003396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
 80033a2:	e00a      	b.n	80033ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d002      	beq.n	80033b0 <USB_GetDevSpeed+0x32>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d102      	bne.n	80033b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033b0:	2302      	movs	r3, #2
 80033b2:	75fb      	strb	r3, [r7, #23]
 80033b4:	e001      	b.n	80033ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033b6:	230f      	movs	r3, #15
 80033b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d13a      	bne.n	800345a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	68f9      	ldr	r1, [r7, #12]
 80033fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003402:	4313      	orrs	r3, r2
 8003404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d155      	bne.n	80034c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	059b      	lsls	r3, r3, #22
 800343e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003440:	4313      	orrs	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e036      	b.n	80034c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003478:	4313      	orrs	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11a      	bne.n	80034c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	791b      	ldrb	r3, [r3, #4]
 80034ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034ae:	430b      	orrs	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d161      	bne.n	80035b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350a:	d11f      	bne.n	800354c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	440a      	add	r2, r1
 8003522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800352a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800354a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356c:	4013      	ands	r3, r2
 800356e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003590:	4013      	ands	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0159      	lsls	r1, r3, #5
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ae:	4619      	mov	r1, r3
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <USB_DeactivateEndpoint+0x1b0>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
 80035b6:	e060      	b.n	800367a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ce:	d11f      	bne.n	8003610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800360a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800360e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	43db      	mvns	r3, r3
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003630:	4013      	ands	r3, r2
 8003632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	43db      	mvns	r3, r3
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003654:	4013      	ands	r3, r2
 8003656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	0159      	lsls	r1, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	440b      	add	r3, r1
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	4619      	mov	r1, r3
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <USB_DeactivateEndpoint+0x1b4>)
 8003676:	4013      	ands	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	ec337800 	.word	0xec337800
 800368c:	eff37800 	.word	0xeff37800

08003690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 815c 	bne.w	800396a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d132      	bne.n	8003720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	0cdb      	lsrs	r3, r3, #19
 800371a:	04db      	lsls	r3, r3, #19
 800371c:	6113      	str	r3, [r2, #16]
 800371e:	e074      	b.n	800380a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	0151      	lsls	r1, r2, #5
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	440a      	add	r2, r1
 8003736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373a:	0cdb      	lsrs	r3, r3, #19
 800373c:	04db      	lsls	r3, r3, #19
 800373e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	440a      	add	r2, r1
 8003756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800375e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6999      	ldr	r1, [r3, #24]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	440b      	add	r3, r1
 800377c:	1e59      	subs	r1, r3, #1
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	fbb1 f3f3 	udiv	r3, r1, r3
 8003786:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003788:	4b9d      	ldr	r3, [pc, #628]	; (8003a00 <USB_EPStartXfer+0x370>)
 800378a:	400b      	ands	r3, r1
 800378c:	69b9      	ldr	r1, [r7, #24]
 800378e:	0148      	lsls	r0, r1, #5
 8003790:	69f9      	ldr	r1, [r7, #28]
 8003792:	4401      	add	r1, r0
 8003794:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003798:	4313      	orrs	r3, r2
 800379a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	0148      	lsls	r0, r1, #5
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	4401      	add	r1, r0
 80037ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037be:	4313      	orrs	r3, r2
 80037c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d11f      	bne.n	800380a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003808:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d14b      	bne.n	80038a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	461a      	mov	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	791b      	ldrb	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d128      	bne.n	8003886 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d110      	bne.n	8003866 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	440a      	add	r2, r1
 800385a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e00f      	b.n	8003886 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	440a      	add	r2, r1
 800387c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e133      	b.n	8003b10 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d015      	beq.n	80038fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 811b 	beq.w	8003b10 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f6:	4313      	orrs	r3, r2
 80038f8:	634b      	str	r3, [r1, #52]	; 0x34
 80038fa:	e109      	b.n	8003b10 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d110      	bne.n	800392e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e00f      	b.n	800394e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6919      	ldr	r1, [r3, #16]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	b298      	uxth	r0, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	4603      	mov	r3, r0
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fade 	bl	8003f24 <USB_WritePacket>
 8003968:	e0d2      	b.n	8003b10 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	440a      	add	r2, r1
 8003980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003984:	0cdb      	lsrs	r3, r3, #19
 8003986:	04db      	lsls	r3, r3, #19
 8003988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d126      	bne.n	8003a04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039cc:	69b9      	ldr	r1, [r7, #24]
 80039ce:	0148      	lsls	r0, r1, #5
 80039d0:	69f9      	ldr	r1, [r7, #28]
 80039d2:	4401      	add	r1, r0
 80039d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	0151      	lsls	r1, r2, #5
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	440a      	add	r2, r1
 80039f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039fa:	6113      	str	r3, [r2, #16]
 80039fc:	e03a      	b.n	8003a74 <USB_EPStartXfer+0x3e4>
 80039fe:	bf00      	nop
 8003a00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	8afa      	ldrh	r2, [r7, #22]
 8003a20:	fb03 f202 	mul.w	r2, r3, r2
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	8afb      	ldrh	r3, [r7, #22]
 8003a38:	04d9      	lsls	r1, r3, #19
 8003a3a:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <USB_EPStartXfer+0x48c>)
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	0148      	lsls	r0, r1, #5
 8003a42:	69f9      	ldr	r1, [r7, #28]
 8003a44:	4401      	add	r1, r0
 8003a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	0148      	lsls	r0, r1, #5
 8003a68:	69f9      	ldr	r1, [r7, #28]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10d      	bne.n	8003a96 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6919      	ldr	r1, [r3, #16]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	460a      	mov	r2, r1
 8003a94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	791b      	ldrb	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d128      	bne.n	8003af0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d110      	bne.n	8003ad0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e00f      	b.n	8003af0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	1ff80000 	.word	0x1ff80000

08003b20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 80ce 	bne.w	8003cde <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d132      	bne.n	8003bb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	0151      	lsls	r1, r2, #5
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	440a      	add	r2, r1
 8003b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	0cdb      	lsrs	r3, r3, #19
 8003baa:	04db      	lsls	r3, r3, #19
 8003bac:	6113      	str	r3, [r2, #16]
 8003bae:	e04e      	b.n	8003c4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bca:	0cdb      	lsrs	r3, r3, #19
 8003bcc:	04db      	lsls	r3, r3, #19
 8003bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bf2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d903      	bls.n	8003c08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3e:	6939      	ldr	r1, [r7, #16]
 8003c40:	0148      	lsls	r0, r1, #5
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	4401      	add	r1, r0
 8003c46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d11e      	bne.n	8003c92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e097      	b.n	8003dc2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	0151      	lsls	r1, r2, #5
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8083 	beq.w	8003dc2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	634b      	str	r3, [r1, #52]	; 0x34
 8003cdc:	e071      	b.n	8003dc2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf8:	0cdb      	lsrs	r3, r3, #19
 8003cfa:	04db      	lsls	r3, r3, #19
 8003cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d70:	6939      	ldr	r1, [r7, #16]
 8003d72:	0148      	lsls	r0, r1, #5
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	4401      	add	r1, r0
 8003d78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10d      	bne.n	8003da2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6919      	ldr	r1, [r3, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	460a      	mov	r2, r1
 8003da0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d14a      	bne.n	8003e84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e06:	f040 8086 	bne.w	8003f16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d902      	bls.n	8003e68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
          break;
 8003e66:	e056      	b.n	8003f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e80:	d0e7      	beq.n	8003e52 <USB_EPStopXfer+0x82>
 8003e82:	e048      	b.n	8003f16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9c:	d13b      	bne.n	8003f16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	7812      	ldrb	r2, [r2, #0]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ebc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ec0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	7812      	ldrb	r2, [r2, #0]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d902      	bls.n	8003efc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8003efa:	e00c      	b.n	8003f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f14:	d0e7      	beq.n	8003ee6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	460b      	mov	r3, r1
 8003f34:	71fb      	strb	r3, [r7, #7]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d123      	bne.n	8003f92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f4a:	88bb      	ldrh	r3, [r7, #4]
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e018      	b.n	8003f8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	031a      	lsls	r2, r3, #12
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f64:	461a      	mov	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3e2      	bcc.n	8003f58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3724      	adds	r7, #36	; 0x24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08b      	sub	sp, #44	; 0x2c
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	623b      	str	r3, [r7, #32]
 8003fca:	e014      	b.n	8003ff6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	3301      	adds	r3, #1
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d3e6      	bcc.n	8003fcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ffe:	8bfb      	ldrh	r3, [r7, #30]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01e      	beq.n	8004042 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	461a      	mov	r2, r3
 8004010:	f107 0310 	add.w	r3, r7, #16
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	701a      	strb	r2, [r3, #0]
      i++;
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	3301      	adds	r3, #1
 800402e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	3301      	adds	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004036:	8bfb      	ldrh	r3, [r7, #30]
 8004038:	3b01      	subs	r3, #1
 800403a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800403c:	8bfb      	ldrh	r3, [r7, #30]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ea      	bne.n	8004018 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004044:	4618      	mov	r0, r3
 8004046:	372c      	adds	r7, #44	; 0x2c
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d12c      	bne.n	80040c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db12      	blt.n	80040a4 <USB_EPSetStall+0x54>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00f      	beq.n	80040a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e02b      	b.n	800411e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	db12      	blt.n	80040fe <USB_EPSetStall+0xae>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00f      	beq.n	80040fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800411c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d128      	bne.n	800419a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	440a      	add	r2, r1
 800415e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004166:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	791b      	ldrb	r3, [r3, #4]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d003      	beq.n	8004178 <USB_EPClearStall+0x4c>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	791b      	ldrb	r3, [r3, #4]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d138      	bne.n	80041ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e027      	b.n	80041ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d003      	beq.n	80041ca <USB_EPClearStall+0x9e>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	791b      	ldrb	r3, [r3, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d10f      	bne.n	80041ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004216:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800421a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f023 0302 	bic.w	r3, r3, #2
 8004276:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042a0:	f023 0303 	bic.w	r3, r3, #3
 80042a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	0c1b      	lsrs	r3, r3, #16
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	b29b      	uxth	r3, r3
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004384:	68bb      	ldr	r3, [r7, #8]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004392:	b480      	push	{r7}
 8004394:	b087      	sub	sp, #28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	01db      	lsls	r3, r3, #7
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4013      	ands	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043e0:	68bb      	ldr	r3, [r7, #8]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0301 	and.w	r3, r3, #1
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004428:	f023 0307 	bic.w	r3, r3, #7
 800442c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	460b      	mov	r3, r1
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	333c      	adds	r3, #60	; 0x3c
 8004466:	3304      	adds	r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4a26      	ldr	r2, [pc, #152]	; (8004508 <USB_EP0_OutStart+0xb8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d90a      	bls.n	800448a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004484:	d101      	bne.n	800448a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e037      	b.n	80044fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	2300      	movs	r3, #0
 8004494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b8:	f043 0318 	orr.w	r3, r3, #24
 80044bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10f      	bne.n	80044f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	4f54300a 	.word	0x4f54300a

0800450c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <USB_CoreReset+0x64>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e01b      	b.n	8004562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	daf2      	bge.n	8004518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <USB_CoreReset+0x64>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d0f0      	beq.n	8004542 <USB_CoreReset+0x36>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	00030d40 	.word	0x00030d40

08004574 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004580:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004584:	f002 fcaa 	bl	8006edc <USBD_static_malloc>
 8004588:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	32b0      	adds	r2, #176	; 0xb0
 800459a:	2100      	movs	r1, #0
 800459c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0d4      	b.n	800474e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80045a4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80045a8:	2100      	movs	r1, #0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f002 fd0c 	bl	8006fc8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	32b0      	adds	r2, #176	; 0xb0
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	32b0      	adds	r2, #176	; 0xb0
 80045ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7c1b      	ldrb	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d138      	bne.n	800464e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045dc:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <USBD_CDC_Init+0x1e4>)
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e4:	2202      	movs	r2, #2
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f002 fb55 	bl	8006c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045ec:	4b5a      	ldr	r3, [pc, #360]	; (8004758 <USBD_CDC_Init+0x1e4>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3324      	adds	r3, #36	; 0x24
 8004602:	2201      	movs	r2, #1
 8004604:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <USBD_CDC_Init+0x1e8>)
 8004608:	7819      	ldrb	r1, [r3, #0]
 800460a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800460e:	2202      	movs	r2, #2
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f002 fb40 	bl	8006c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004616:	4b51      	ldr	r3, [pc, #324]	; (800475c <USBD_CDC_Init+0x1e8>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800462e:	2201      	movs	r2, #1
 8004630:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004632:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <USBD_CDC_Init+0x1ec>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f003 020f 	and.w	r2, r3, #15
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3326      	adds	r3, #38	; 0x26
 8004648:	2210      	movs	r2, #16
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e035      	b.n	80046ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800464e:	4b42      	ldr	r3, [pc, #264]	; (8004758 <USBD_CDC_Init+0x1e4>)
 8004650:	7819      	ldrb	r1, [r3, #0]
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	2202      	movs	r2, #2
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f002 fb1d 	bl	8006c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800465c:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <USBD_CDC_Init+0x1e4>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3324      	adds	r3, #36	; 0x24
 8004672:	2201      	movs	r2, #1
 8004674:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004676:	4b39      	ldr	r3, [pc, #228]	; (800475c <USBD_CDC_Init+0x1e8>)
 8004678:	7819      	ldrb	r1, [r3, #0]
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	2202      	movs	r2, #2
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f002 fb09 	bl	8006c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <USBD_CDC_Init+0x1e8>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 020f 	and.w	r2, r3, #15
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800469c:	2201      	movs	r2, #1
 800469e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <USBD_CDC_Init+0x1ec>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	3326      	adds	r3, #38	; 0x26
 80046b6:	2210      	movs	r2, #16
 80046b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046ba:	4b29      	ldr	r3, [pc, #164]	; (8004760 <USBD_CDC_Init+0x1ec>)
 80046bc:	7819      	ldrb	r1, [r3, #0]
 80046be:	2308      	movs	r3, #8
 80046c0:	2203      	movs	r2, #3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f002 fae7 	bl	8006c96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <USBD_CDC_Init+0x1ec>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	2201      	movs	r2, #1
 80046e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	33b0      	adds	r3, #176	; 0xb0
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004718:	2302      	movs	r3, #2
 800471a:	e018      	b.n	800474e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7c1b      	ldrb	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <USBD_CDC_Init+0x1e8>)
 8004726:	7819      	ldrb	r1, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800472e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f002 fb9e 	bl	8006e74 <USBD_LL_PrepareReceive>
 8004738:	e008      	b.n	800474c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800473a:	4b08      	ldr	r3, [pc, #32]	; (800475c <USBD_CDC_Init+0x1e8>)
 800473c:	7819      	ldrb	r1, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004744:	2340      	movs	r3, #64	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f002 fb94 	bl	8006e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000097 	.word	0x20000097
 800475c:	20000098 	.word	0x20000098
 8004760:	20000099 	.word	0x20000099

08004764 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004770:	4b3a      	ldr	r3, [pc, #232]	; (800485c <USBD_CDC_DeInit+0xf8>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f002 fab3 	bl	8006ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <USBD_CDC_DeInit+0xf8>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3324      	adds	r3, #36	; 0x24
 8004792:	2200      	movs	r2, #0
 8004794:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004796:	4b32      	ldr	r3, [pc, #200]	; (8004860 <USBD_CDC_DeInit+0xfc>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f002 faa0 	bl	8006ce2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <USBD_CDC_DeInit+0xfc>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047ba:	2200      	movs	r2, #0
 80047bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <USBD_CDC_DeInit+0x100>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f002 fa8c 	bl	8006ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <USBD_CDC_DeInit+0x100>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	3324      	adds	r3, #36	; 0x24
 80047e0:	2200      	movs	r2, #0
 80047e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80047e4:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <USBD_CDC_DeInit+0x100>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3326      	adds	r3, #38	; 0x26
 80047fa:	2200      	movs	r2, #0
 80047fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	32b0      	adds	r2, #176	; 0xb0
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01f      	beq.n	8004850 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	33b0      	adds	r3, #176	; 0xb0
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	32b0      	adds	r2, #176	; 0xb0
 800482e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004832:	4618      	mov	r0, r3
 8004834:	f002 fb60 	bl	8006ef8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	32b0      	adds	r2, #176	; 0xb0
 8004842:	2100      	movs	r1, #0
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000097 	.word	0x20000097
 8004860:	20000098 	.word	0x20000098
 8004864:	20000099 	.word	0x20000099

08004868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	32b0      	adds	r2, #176	; 0xb0
 800487c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004880:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004894:	2303      	movs	r3, #3
 8004896:	e0bf      	b.n	8004a18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d050      	beq.n	8004946 <USBD_CDC_Setup+0xde>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	f040 80af 	bne.w	8004a08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	88db      	ldrh	r3, [r3, #6]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03a      	beq.n	8004928 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da1b      	bge.n	80048f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	33b0      	adds	r3, #176	; 0xb0
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80048d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	88d2      	ldrh	r2, [r2, #6]
 80048d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	88db      	ldrh	r3, [r3, #6]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	bf28      	it	cs
 80048e2:	2307      	movcs	r3, #7
 80048e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	89fa      	ldrh	r2, [r7, #14]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fd89 	bl	8006404 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048f2:	e090      	b.n	8004a16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	785a      	ldrb	r2, [r3, #1]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	88db      	ldrh	r3, [r3, #6]
 8004902:	2b3f      	cmp	r3, #63	; 0x3f
 8004904:	d803      	bhi.n	800490e <USBD_CDC_Setup+0xa6>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	88db      	ldrh	r3, [r3, #6]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	e000      	b.n	8004910 <USBD_CDC_Setup+0xa8>
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004916:	6939      	ldr	r1, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800491e:	461a      	mov	r2, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fd9b 	bl	800645c <USBD_CtlPrepareRx>
      break;
 8004926:	e076      	b.n	8004a16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	33b0      	adds	r3, #176	; 0xb0
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	7850      	ldrb	r0, [r2, #1]
 800493e:	2200      	movs	r2, #0
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	4798      	blx	r3
      break;
 8004944:	e067      	b.n	8004a16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b0b      	cmp	r3, #11
 800494c:	d851      	bhi.n	80049f2 <USBD_CDC_Setup+0x18a>
 800494e:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <USBD_CDC_Setup+0xec>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	08004985 	.word	0x08004985
 8004958:	08004a01 	.word	0x08004a01
 800495c:	080049f3 	.word	0x080049f3
 8004960:	080049f3 	.word	0x080049f3
 8004964:	080049f3 	.word	0x080049f3
 8004968:	080049f3 	.word	0x080049f3
 800496c:	080049f3 	.word	0x080049f3
 8004970:	080049f3 	.word	0x080049f3
 8004974:	080049f3 	.word	0x080049f3
 8004978:	080049f3 	.word	0x080049f3
 800497c:	080049af 	.word	0x080049af
 8004980:	080049d9 	.word	0x080049d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d107      	bne.n	80049a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004990:	f107 030a 	add.w	r3, r7, #10
 8004994:	2202      	movs	r2, #2
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f001 fd33 	bl	8006404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800499e:	e032      	b.n	8004a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 fcbd 	bl	8006322 <USBD_CtlError>
            ret = USBD_FAIL;
 80049a8:	2303      	movs	r3, #3
 80049aa:	75fb      	strb	r3, [r7, #23]
          break;
 80049ac:	e02b      	b.n	8004a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80049ba:	f107 030d 	add.w	r3, r7, #13
 80049be:	2201      	movs	r2, #1
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 fd1e 	bl	8006404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049c8:	e01d      	b.n	8004a06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 fca8 	bl	8006322 <USBD_CtlError>
            ret = USBD_FAIL;
 80049d2:	2303      	movs	r3, #3
 80049d4:	75fb      	strb	r3, [r7, #23]
          break;
 80049d6:	e016      	b.n	8004a06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d00f      	beq.n	8004a04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 fc9b 	bl	8006322 <USBD_CtlError>
            ret = USBD_FAIL;
 80049ec:	2303      	movs	r3, #3
 80049ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049f0:	e008      	b.n	8004a04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fc94 	bl	8006322 <USBD_CtlError>
          ret = USBD_FAIL;
 80049fa:	2303      	movs	r3, #3
 80049fc:	75fb      	strb	r3, [r7, #23]
          break;
 80049fe:	e002      	b.n	8004a06 <USBD_CDC_Setup+0x19e>
          break;
 8004a00:	bf00      	nop
 8004a02:	e008      	b.n	8004a16 <USBD_CDC_Setup+0x1ae>
          break;
 8004a04:	bf00      	nop
      }
      break;
 8004a06:	e006      	b.n	8004a16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 fc89 	bl	8006322 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a10:	2303      	movs	r3, #3
 8004a12:	75fb      	strb	r3, [r7, #23]
      break;
 8004a14:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	32b0      	adds	r2, #176	; 0xb0
 8004a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e065      	b.n	8004b16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	32b0      	adds	r2, #176	; 0xb0
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3318      	adds	r3, #24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02f      	beq.n	8004ad4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3318      	adds	r3, #24
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 010f 	and.w	r1, r3, #15
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	460b      	mov	r3, r1
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4403      	add	r3, r0
 8004a9c:	3348      	adds	r3, #72	; 0x48
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d112      	bne.n	8004ad4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ac6:	78f9      	ldrb	r1, [r7, #3]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2200      	movs	r2, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f002 f9b0 	bl	8006e32 <USBD_LL_Transmit>
 8004ad2:	e01f      	b.n	8004b14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	33b0      	adds	r3, #176	; 0xb0
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	33b0      	adds	r3, #176	; 0xb0
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	32b0      	adds	r2, #176	; 0xb0
 8004b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	32b0      	adds	r2, #176	; 0xb0
 8004b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e01a      	b.n	8004b86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f002 f9ae 	bl	8006eb6 <USBD_LL_GetRxDataSize>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	33b0      	adds	r3, #176	; 0xb0
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b80:	4611      	mov	r1, r2
 8004b82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	32b0      	adds	r2, #176	; 0xb0
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e025      	b.n	8004bfc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	33b0      	adds	r3, #176	; 0xb0
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <USBD_CDC_EP0_RxReady+0x6c>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bca:	2bff      	cmp	r3, #255	; 0xff
 8004bcc:	d015      	beq.n	8004bfa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	33b0      	adds	r3, #176	; 0xb0
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004be6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c0c:	2182      	movs	r1, #130	; 0x82
 8004c0e:	4818      	ldr	r0, [pc, #96]	; (8004c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c10:	f000 fd4f 	bl	80056b2 <USBD_GetEpDesc>
 8004c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c16:	2101      	movs	r1, #1
 8004c18:	4815      	ldr	r0, [pc, #84]	; (8004c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c1a:	f000 fd4a 	bl	80056b2 <USBD_GetEpDesc>
 8004c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c20:	2181      	movs	r1, #129	; 0x81
 8004c22:	4813      	ldr	r0, [pc, #76]	; (8004c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c24:	f000 fd45 	bl	80056b2 <USBD_GetEpDesc>
 8004c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2210      	movs	r2, #16
 8004c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c44:	711a      	strb	r2, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	711a      	strb	r2, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2243      	movs	r2, #67	; 0x43
 8004c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000054 	.word	0x20000054

08004c74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c7c:	2182      	movs	r1, #130	; 0x82
 8004c7e:	4818      	ldr	r0, [pc, #96]	; (8004ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c80:	f000 fd17 	bl	80056b2 <USBD_GetEpDesc>
 8004c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c86:	2101      	movs	r1, #1
 8004c88:	4815      	ldr	r0, [pc, #84]	; (8004ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c8a:	f000 fd12 	bl	80056b2 <USBD_GetEpDesc>
 8004c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c90:	2181      	movs	r1, #129	; 0x81
 8004c92:	4813      	ldr	r0, [pc, #76]	; (8004ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c94:	f000 fd0d 	bl	80056b2 <USBD_GetEpDesc>
 8004c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d006      	beq.n	8004cba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	711a      	strb	r2, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f042 0202 	orr.w	r2, r2, #2
 8004cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	711a      	strb	r2, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f042 0202 	orr.w	r2, r2, #2
 8004ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2243      	movs	r2, #67	; 0x43
 8004cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000054 	.word	0x20000054

08004ce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cec:	2182      	movs	r1, #130	; 0x82
 8004cee:	4818      	ldr	r0, [pc, #96]	; (8004d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cf0:	f000 fcdf 	bl	80056b2 <USBD_GetEpDesc>
 8004cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4815      	ldr	r0, [pc, #84]	; (8004d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cfa:	f000 fcda 	bl	80056b2 <USBD_GetEpDesc>
 8004cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d00:	2181      	movs	r1, #129	; 0x81
 8004d02:	4813      	ldr	r0, [pc, #76]	; (8004d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d04:	f000 fcd5 	bl	80056b2 <USBD_GetEpDesc>
 8004d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2210      	movs	r2, #16
 8004d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	711a      	strb	r2, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d006      	beq.n	8004d3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d38:	711a      	strb	r2, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2243      	movs	r2, #67	; 0x43
 8004d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d44:	4b02      	ldr	r3, [pc, #8]	; (8004d50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000054 	.word	0x20000054

08004d54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	220a      	movs	r2, #10
 8004d60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d62:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	20000010 	.word	0x20000010

08004d74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e009      	b.n	8004d9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	33b0      	adds	r3, #176	; 0xb0
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	32b0      	adds	r2, #176	; 0xb0
 8004dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e008      	b.n	8004de0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	32b0      	adds	r2, #176	; 0xb0
 8004e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e004      	b.n	8004e1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	; 0xb0
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	32b0      	adds	r2, #176	; 0xb0
 8004e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e025      	b.n	8004ea6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11f      	bne.n	8004ea4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e6c:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <USBD_CDC_TransmitPacket+0x88>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4403      	add	r3, r0
 8004e86:	3318      	adds	r3, #24
 8004e88:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <USBD_CDC_TransmitPacket+0x88>)
 8004e8c:	7819      	ldrb	r1, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 ffc9 	bl	8006e32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000097 	.word	0x20000097

08004eb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	32b0      	adds	r2, #176	; 0xb0
 8004ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	32b0      	adds	r2, #176	; 0xb0
 8004ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e018      	b.n	8004f14 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7c1b      	ldrb	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <USBD_CDC_ReceivePacket+0x68>)
 8004eec:	7819      	ldrb	r1, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 ffbb 	bl	8006e74 <USBD_LL_PrepareReceive>
 8004efe:	e008      	b.n	8004f12 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <USBD_CDC_ReceivePacket+0x68>)
 8004f02:	7819      	ldrb	r1, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 ffb1 	bl	8006e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000098 	.word	0x20000098

08004f20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e01f      	b.n	8004f78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	79fa      	ldrb	r2, [r7, #7]
 8004f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f001 fe2b 	bl	8006bc8 <USBD_LL_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e025      	b.n	8004fe4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	32ae      	adds	r2, #174	; 0xae
 8004faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00f      	beq.n	8004fd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32ae      	adds	r2, #174	; 0xae
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f107 020e 	add.w	r2, r7, #14
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3
 8004fcc:	4602      	mov	r2, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 fe33 	bl	8006c60 <USBD_LL_Start>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800500c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	4611      	mov	r1, r2
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	4611      	mov	r1, r2
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f001 f908 	bl	80062ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d01a      	beq.n	80050f8 <USBD_LL_SetupStage+0x72>
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d822      	bhi.n	800510c <USBD_LL_SetupStage+0x86>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <USBD_LL_SetupStage+0x4a>
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d00a      	beq.n	80050e4 <USBD_LL_SetupStage+0x5e>
 80050ce:	e01d      	b.n	800510c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb5f 	bl	800579c <USBD_StdDevReq>
 80050de:	4603      	mov	r3, r0
 80050e0:	73fb      	strb	r3, [r7, #15]
      break;
 80050e2:	e020      	b.n	8005126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fbc7 	bl	8005880 <USBD_StdItfReq>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
      break;
 80050f6:	e016      	b.n	8005126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fc29 	bl	8005958 <USBD_StdEPReq>
 8005106:	4603      	mov	r3, r0
 8005108:	73fb      	strb	r3, [r7, #15]
      break;
 800510a:	e00c      	b.n	8005126 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005116:	b2db      	uxtb	r3, r3
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 fe00 	bl	8006d20 <USBD_LL_StallEP>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	bf00      	nop
  }

  return ret;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	460b      	mov	r3, r1
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005142:	7afb      	ldrb	r3, [r7, #11]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d16e      	bne.n	8005226 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800514e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005156:	2b03      	cmp	r3, #3
 8005158:	f040 8098 	bne.w	800528c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d913      	bls.n	8005190 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	1ad2      	subs	r2, r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	4293      	cmp	r3, r2
 8005180:	bf28      	it	cs
 8005182:	4613      	movcs	r3, r2
 8005184:	461a      	mov	r2, r3
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f001 f984 	bl	8006496 <USBD_CtlContinueRx>
 800518e:	e07d      	b.n	800528c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2b02      	cmp	r3, #2
 800519c:	d014      	beq.n	80051c8 <USBD_LL_DataOutStage+0x98>
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d81d      	bhi.n	80051de <USBD_LL_DataOutStage+0xae>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <USBD_LL_DataOutStage+0x7c>
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d003      	beq.n	80051b2 <USBD_LL_DataOutStage+0x82>
 80051aa:	e018      	b.n	80051de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75bb      	strb	r3, [r7, #22]
            break;
 80051b0:	e018      	b.n	80051e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa5e 	bl	800567e <USBD_CoreFindIF>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75bb      	strb	r3, [r7, #22]
            break;
 80051c6:	e00d      	b.n	80051e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fa60 	bl	8005698 <USBD_CoreFindEP>
 80051d8:	4603      	mov	r3, r0
 80051da:	75bb      	strb	r3, [r7, #22]
            break;
 80051dc:	e002      	b.n	80051e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	75bb      	strb	r3, [r7, #22]
            break;
 80051e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051e4:	7dbb      	ldrb	r3, [r7, #22]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d119      	bne.n	800521e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d113      	bne.n	800521e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051f6:	7dba      	ldrb	r2, [r7, #22]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	32ae      	adds	r2, #174	; 0xae
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005206:	7dba      	ldrb	r2, [r7, #22]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800520e:	7dba      	ldrb	r2, [r7, #22]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	32ae      	adds	r2, #174	; 0xae
 8005214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f001 f94a 	bl	80064b8 <USBD_CtlSendStatus>
 8005224:	e032      	b.n	800528c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fa31 	bl	8005698 <USBD_CoreFindEP>
 8005236:	4603      	mov	r3, r0
 8005238:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800523a:	7dbb      	ldrb	r3, [r7, #22]
 800523c:	2bff      	cmp	r3, #255	; 0xff
 800523e:	d025      	beq.n	800528c <USBD_LL_DataOutStage+0x15c>
 8005240:	7dbb      	ldrb	r3, [r7, #22]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d122      	bne.n	800528c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b03      	cmp	r3, #3
 8005250:	d117      	bne.n	8005282 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005252:	7dba      	ldrb	r2, [r7, #22]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	32ae      	adds	r2, #174	; 0xae
 8005258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005262:	7dba      	ldrb	r2, [r7, #22]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800526a:	7dba      	ldrb	r2, [r7, #22]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	32ae      	adds	r2, #174	; 0xae
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	7afa      	ldrb	r2, [r7, #11]
 8005278:	4611      	mov	r1, r2
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	4798      	blx	r3
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	e000      	b.n	800528e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b086      	sub	sp, #24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	460b      	mov	r3, r1
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80052a4:	7afb      	ldrb	r3, [r7, #11]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d16f      	bne.n	800538a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3314      	adds	r3, #20
 80052ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d15a      	bne.n	8005370 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d914      	bls.n	80052f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	461a      	mov	r2, r3
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f001 f8ac 	bl	800643a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052e2:	2300      	movs	r3, #0
 80052e4:	2200      	movs	r2, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f001 fdc3 	bl	8006e74 <USBD_LL_PrepareReceive>
 80052ee:	e03f      	b.n	8005370 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d11c      	bne.n	8005336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005304:	429a      	cmp	r2, r3
 8005306:	d316      	bcc.n	8005336 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005312:	429a      	cmp	r2, r3
 8005314:	d20f      	bcs.n	8005336 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005316:	2200      	movs	r2, #0
 8005318:	2100      	movs	r1, #0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f001 f88d 	bl	800643a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005328:	2300      	movs	r3, #0
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f001 fda0 	bl	8006e74 <USBD_LL_PrepareReceive>
 8005334:	e01c      	b.n	8005370 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b03      	cmp	r3, #3
 8005340:	d10f      	bne.n	8005362 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f001 fcdb 	bl	8006d20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f001 f8b7 	bl	80064de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d03a      	beq.n	80053f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff fe42 	bl	8005004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005388:	e032      	b.n	80053f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800538a:	7afb      	ldrb	r3, [r7, #11]
 800538c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005390:	b2db      	uxtb	r3, r3
 8005392:	4619      	mov	r1, r3
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f97f 	bl	8005698 <USBD_CoreFindEP>
 800539a:	4603      	mov	r3, r0
 800539c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2bff      	cmp	r3, #255	; 0xff
 80053a2:	d025      	beq.n	80053f0 <USBD_LL_DataInStage+0x15a>
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d122      	bne.n	80053f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d11c      	bne.n	80053f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80053b6:	7dfa      	ldrb	r2, [r7, #23]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	32ae      	adds	r2, #174	; 0xae
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80053c6:	7dfa      	ldrb	r2, [r7, #23]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80053ce:	7dfa      	ldrb	r2, [r7, #23]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	32ae      	adds	r2, #174	; 0xae
 80053d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	7afa      	ldrb	r2, [r7, #11]
 80053dc:	4611      	mov	r1, r2
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	4798      	blx	r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053e6:	7dbb      	ldrb	r3, [r7, #22]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053ec:	7dbb      	ldrb	r3, [r7, #22]
 80053ee:	e000      	b.n	80053f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6852      	ldr	r2, [r2, #4]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	4611      	mov	r1, r2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 fc15 	bl	8006c96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800547c:	2340      	movs	r3, #64	; 0x40
 800547e:	2200      	movs	r2, #0
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 fc07 	bl	8006c96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	621a      	str	r2, [r3, #32]

  return ret;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2204      	movs	r2, #4
 80054d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d106      	bne.n	800550c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005504:	b2da      	uxtb	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d110      	bne.n	8005550 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	32ae      	adds	r2, #174	; 0xae
 8005570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	e01c      	b.n	80055b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b03      	cmp	r3, #3
 8005586:	d115      	bne.n	80055b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	32ae      	adds	r2, #174	; 0xae
 8005592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	32ae      	adds	r2, #174	; 0xae
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	4611      	mov	r1, r2
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	32ae      	adds	r2, #174	; 0xae
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055dc:	2303      	movs	r3, #3
 80055de:	e01c      	b.n	800561a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d115      	bne.n	8005618 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	32ae      	adds	r2, #174	; 0xae
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	32ae      	adds	r2, #174	; 0xae
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	4611      	mov	r1, r2
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6852      	ldr	r2, [r2, #4]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	4611      	mov	r1, r2
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800568a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80056a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	885b      	ldrh	r3, [r3, #2]
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d920      	bls.n	800571c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056e2:	e013      	b.n	800570c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056e4:	f107 030a 	add.w	r3, r7, #10
 80056e8:	4619      	mov	r1, r3
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f000 f81b 	bl	8005726 <USBD_GetNextDesc>
 80056f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d108      	bne.n	800570c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	78fa      	ldrb	r2, [r7, #3]
 8005704:	429a      	cmp	r2, r3
 8005706:	d008      	beq.n	800571a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	885b      	ldrh	r3, [r3, #2]
 8005710:	b29a      	uxth	r2, r3
 8005712:	897b      	ldrh	r3, [r7, #10]
 8005714:	429a      	cmp	r2, r3
 8005716:	d8e5      	bhi.n	80056e4 <USBD_GetEpDesc+0x32>
 8005718:	e000      	b.n	800571c <USBD_GetEpDesc+0x6a>
          break;
 800571a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800571c:	693b      	ldr	r3, [r7, #16]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	3301      	adds	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800577e:	8a3b      	ldrh	r3, [r7, #16]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	b21a      	sxth	r2, r3
 8005784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005788:	4313      	orrs	r3, r2
 800578a:	b21b      	sxth	r3, r3
 800578c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800578e:	89fb      	ldrh	r3, [r7, #14]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d005      	beq.n	80057c2 <USBD_StdDevReq+0x26>
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d857      	bhi.n	800586a <USBD_StdDevReq+0xce>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00f      	beq.n	80057de <USBD_StdDevReq+0x42>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d153      	bne.n	800586a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	32ae      	adds	r2, #174	; 0xae
 80057cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
      break;
 80057dc:	e04a      	b.n	8005874 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d83b      	bhi.n	800585e <USBD_StdDevReq+0xc2>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <USBD_StdDevReq+0x50>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005855 	.word	0x08005855
 80057f4:	0800585f 	.word	0x0800585f
 80057f8:	0800584b 	.word	0x0800584b
 80057fc:	0800585f 	.word	0x0800585f
 8005800:	0800581f 	.word	0x0800581f
 8005804:	08005815 	.word	0x08005815
 8005808:	0800585f 	.word	0x0800585f
 800580c:	08005837 	.word	0x08005837
 8005810:	08005829 	.word	0x08005829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa3c 	bl	8005c94 <USBD_GetDescriptor>
          break;
 800581c:	e024      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fba1 	bl	8005f68 <USBD_SetAddress>
          break;
 8005826:	e01f      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fbe0 	bl	8005ff0 <USBD_SetConfig>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
          break;
 8005834:	e018      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fc83 	bl	8006144 <USBD_GetConfig>
          break;
 800583e:	e013      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fcb4 	bl	80061b0 <USBD_GetStatus>
          break;
 8005848:	e00e      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fce3 	bl	8006218 <USBD_SetFeature>
          break;
 8005852:	e009      	b.n	8005868 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fd07 	bl	800626a <USBD_ClrFeature>
          break;
 800585c:	e004      	b.n	8005868 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fd5e 	bl	8006322 <USBD_CtlError>
          break;
 8005866:	bf00      	nop
      }
      break;
 8005868:	e004      	b.n	8005874 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fd58 	bl	8006322 <USBD_CtlError>
      break;
 8005872:	bf00      	nop
  }

  return ret;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop

08005880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d005      	beq.n	80058a6 <USBD_StdItfReq+0x26>
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d852      	bhi.n	8005944 <USBD_StdItfReq+0xc4>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <USBD_StdItfReq+0x26>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d14e      	bne.n	8005944 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d840      	bhi.n	8005936 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	889b      	ldrh	r3, [r3, #4]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d836      	bhi.n	800592c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	889b      	ldrh	r3, [r3, #4]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fed9 	bl	800567e <USBD_CoreFindIF>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058d0:	7bbb      	ldrb	r3, [r7, #14]
 80058d2:	2bff      	cmp	r3, #255	; 0xff
 80058d4:	d01d      	beq.n	8005912 <USBD_StdItfReq+0x92>
 80058d6:	7bbb      	ldrb	r3, [r7, #14]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11a      	bne.n	8005912 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058dc:	7bba      	ldrb	r2, [r7, #14]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	32ae      	adds	r2, #174	; 0xae
 80058e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00f      	beq.n	800590c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058ec:	7bba      	ldrb	r2, [r7, #14]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058f4:	7bba      	ldrb	r2, [r7, #14]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	32ae      	adds	r2, #174	; 0xae
 80058fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800590a:	e004      	b.n	8005916 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005910:	e001      	b.n	8005916 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005912:	2303      	movs	r3, #3
 8005914:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	88db      	ldrh	r3, [r3, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d110      	bne.n	8005940 <USBD_StdItfReq+0xc0>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10d      	bne.n	8005940 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fdc7 	bl	80064b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800592a:	e009      	b.n	8005940 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fcf7 	bl	8006322 <USBD_CtlError>
          break;
 8005934:	e004      	b.n	8005940 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fcf2 	bl	8006322 <USBD_CtlError>
          break;
 800593e:	e000      	b.n	8005942 <USBD_StdItfReq+0xc2>
          break;
 8005940:	bf00      	nop
      }
      break;
 8005942:	e004      	b.n	800594e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fceb 	bl	8006322 <USBD_CtlError>
      break;
 800594c:	bf00      	nop
  }

  return ret;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	889b      	ldrh	r3, [r3, #4]
 800596a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d007      	beq.n	8005988 <USBD_StdEPReq+0x30>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	f200 817f 	bhi.w	8005c7c <USBD_StdEPReq+0x324>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d02a      	beq.n	80059d8 <USBD_StdEPReq+0x80>
 8005982:	2b20      	cmp	r3, #32
 8005984:	f040 817a 	bne.w	8005c7c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fe83 	bl	8005698 <USBD_CoreFindEP>
 8005992:	4603      	mov	r3, r0
 8005994:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005996:	7b7b      	ldrb	r3, [r7, #13]
 8005998:	2bff      	cmp	r3, #255	; 0xff
 800599a:	f000 8174 	beq.w	8005c86 <USBD_StdEPReq+0x32e>
 800599e:	7b7b      	ldrb	r3, [r7, #13]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 8170 	bne.w	8005c86 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80059a6:	7b7a      	ldrb	r2, [r7, #13]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80059ae:	7b7a      	ldrb	r2, [r7, #13]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	32ae      	adds	r2, #174	; 0xae
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8163 	beq.w	8005c86 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80059c0:	7b7a      	ldrb	r2, [r7, #13]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	32ae      	adds	r2, #174	; 0xae
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d6:	e156      	b.n	8005c86 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d008      	beq.n	80059f2 <USBD_StdEPReq+0x9a>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	f300 8145 	bgt.w	8005c70 <USBD_StdEPReq+0x318>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 809b 	beq.w	8005b22 <USBD_StdEPReq+0x1ca>
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d03c      	beq.n	8005a6a <USBD_StdEPReq+0x112>
 80059f0:	e13e      	b.n	8005c70 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d002      	beq.n	8005a04 <USBD_StdEPReq+0xac>
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d016      	beq.n	8005a30 <USBD_StdEPReq+0xd8>
 8005a02:	e02c      	b.n	8005a5e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <USBD_StdEPReq+0xce>
 8005a0a:	7bbb      	ldrb	r3, [r7, #14]
 8005a0c:	2b80      	cmp	r3, #128	; 0x80
 8005a0e:	d00a      	beq.n	8005a26 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 f983 	bl	8006d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f97f 	bl	8006d20 <USBD_LL_StallEP>
 8005a22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a24:	e020      	b.n	8005a68 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fc7a 	bl	8006322 <USBD_CtlError>
              break;
 8005a2e:	e01b      	b.n	8005a68 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	885b      	ldrh	r3, [r3, #2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10e      	bne.n	8005a56 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <USBD_StdEPReq+0xfe>
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d008      	beq.n	8005a56 <USBD_StdEPReq+0xfe>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	88db      	ldrh	r3, [r3, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f965 	bl	8006d20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fd2e 	bl	80064b8 <USBD_CtlSendStatus>

              break;
 8005a5c:	e004      	b.n	8005a68 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fc5e 	bl	8006322 <USBD_CtlError>
              break;
 8005a66:	bf00      	nop
          }
          break;
 8005a68:	e107      	b.n	8005c7a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d002      	beq.n	8005a7c <USBD_StdEPReq+0x124>
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d016      	beq.n	8005aa8 <USBD_StdEPReq+0x150>
 8005a7a:	e04b      	b.n	8005b14 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <USBD_StdEPReq+0x146>
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d00a      	beq.n	8005a9e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 f947 	bl	8006d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a92:	2180      	movs	r1, #128	; 0x80
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f943 	bl	8006d20 <USBD_LL_StallEP>
 8005a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a9c:	e040      	b.n	8005b20 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fc3e 	bl	8006322 <USBD_CtlError>
              break;
 8005aa6:	e03b      	b.n	8005b20 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	885b      	ldrh	r3, [r3, #2]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d136      	bne.n	8005b1e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f94d 	bl	8006d5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fcf7 	bl	80064b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fde2 	bl	8005698 <USBD_CoreFindEP>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ad8:	7b7b      	ldrb	r3, [r7, #13]
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d01f      	beq.n	8005b1e <USBD_StdEPReq+0x1c6>
 8005ade:	7b7b      	ldrb	r3, [r7, #13]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11c      	bne.n	8005b1e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ae4:	7b7a      	ldrb	r2, [r7, #13]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005aec:	7b7a      	ldrb	r2, [r7, #13]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	; 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005afc:	7b7a      	ldrb	r2, [r7, #13]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	32ae      	adds	r2, #174	; 0xae
 8005b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005b12:	e004      	b.n	8005b1e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fc03 	bl	8006322 <USBD_CtlError>
              break;
 8005b1c:	e000      	b.n	8005b20 <USBD_StdEPReq+0x1c8>
              break;
 8005b1e:	bf00      	nop
          }
          break;
 8005b20:	e0ab      	b.n	8005c7a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d002      	beq.n	8005b34 <USBD_StdEPReq+0x1dc>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d032      	beq.n	8005b98 <USBD_StdEPReq+0x240>
 8005b32:	e097      	b.n	8005c64 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <USBD_StdEPReq+0x1f2>
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d004      	beq.n	8005b4a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbed 	bl	8006322 <USBD_CtlError>
                break;
 8005b48:	e091      	b.n	8005c6e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da0b      	bge.n	8005b6a <USBD_StdEPReq+0x212>
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3310      	adds	r3, #16
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	e00b      	b.n	8005b82 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	3304      	adds	r3, #4
 8005b82:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fc37 	bl	8006404 <USBD_CtlSendData>
              break;
 8005b96:	e06a      	b.n	8005c6e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	da11      	bge.n	8005bc4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	f003 020f 	and.w	r2, r3, #15
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	3324      	adds	r3, #36	; 0x24
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d117      	bne.n	8005bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fbb0 	bl	8006322 <USBD_CtlError>
                  break;
 8005bc2:	e054      	b.n	8005c6e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 020f 	and.w	r2, r3, #15
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fb9d 	bl	8006322 <USBD_CtlError>
                  break;
 8005be8:	e041      	b.n	8005c6e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da0b      	bge.n	8005c0a <USBD_StdEPReq+0x2b2>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3310      	adds	r3, #16
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	e00b      	b.n	8005c22 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <USBD_StdEPReq+0x2d8>
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d103      	bne.n	8005c38 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e00e      	b.n	8005c56 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c38:	7bbb      	ldrb	r3, [r7, #14]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f8ad 	bl	8006d9c <USBD_LL_IsStallEP>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e002      	b.n	8005c56 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fbd1 	bl	8006404 <USBD_CtlSendData>
              break;
 8005c62:	e004      	b.n	8005c6e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb5b 	bl	8006322 <USBD_CtlError>
              break;
 8005c6c:	bf00      	nop
          }
          break;
 8005c6e:	e004      	b.n	8005c7a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb55 	bl	8006322 <USBD_CtlError>
          break;
 8005c78:	bf00      	nop
      }
      break;
 8005c7a:	e005      	b.n	8005c88 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fb4f 	bl	8006322 <USBD_CtlError>
      break;
 8005c84:	e000      	b.n	8005c88 <USBD_StdEPReq+0x330>
      break;
 8005c86:	bf00      	nop
  }

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	885b      	ldrh	r3, [r3, #2]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	f200 8128 	bhi.w	8005f0a <USBD_GetDescriptor+0x276>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USBD_GetDescriptor+0x2c>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005f0b 	.word	0x08005f0b
 8005cd0:	08005f0b 	.word	0x08005f0b
 8005cd4:	08005eab 	.word	0x08005eab
 8005cd8:	08005ed7 	.word	0x08005ed7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	7c12      	ldrb	r2, [r2, #16]
 8005ce8:	f107 0108 	add.w	r1, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
      break;
 8005cf2:	e112      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7c1b      	ldrb	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f107 0208 	add.w	r2, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	2202      	movs	r2, #2
 8005d14:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d16:	e100      	b.n	8005f1a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	2202      	movs	r2, #2
 8005d30:	701a      	strb	r2, [r3, #0]
      break;
 8005d32:	e0f2      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	885b      	ldrh	r3, [r3, #2]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	f200 80ac 	bhi.w	8005e98 <USBD_GetDescriptor+0x204>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <USBD_GetDescriptor+0xb4>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d95 	.word	0x08005d95
 8005d50:	08005dc9 	.word	0x08005dc9
 8005d54:	08005dfd 	.word	0x08005dfd
 8005d58:	08005e31 	.word	0x08005e31
 8005d5c:	08005e65 	.word	0x08005e65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	7c12      	ldrb	r2, [r2, #16]
 8005d78:	f107 0108 	add.w	r1, r7, #8
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
 8005d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d82:	e091      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 facb 	bl	8006322 <USBD_CtlError>
            err++;
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	72fb      	strb	r3, [r7, #11]
          break;
 8005d92:	e089      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db6:	e077      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fab1 	bl	8006322 <USBD_CtlError>
            err++;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc6:	e06f      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7c12      	ldrb	r2, [r2, #16]
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dea:	e05d      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa97 	bl	8006322 <USBD_CtlError>
            err++;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3301      	adds	r3, #1
 8005df8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dfa:	e055      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	7c12      	ldrb	r2, [r2, #16]
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1e:	e043      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa7d 	bl	8006322 <USBD_CtlError>
            err++;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2e:	e03b      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	7c12      	ldrb	r2, [r2, #16]
 8005e48:	f107 0108 	add.w	r1, r7, #8
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e52:	e029      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa63 	bl	8006322 <USBD_CtlError>
            err++;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
          break;
 8005e62:	e021      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	7c12      	ldrb	r2, [r2, #16]
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e86:	e00f      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa49 	bl	8006322 <USBD_CtlError>
            err++;
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	3301      	adds	r3, #1
 8005e94:	72fb      	strb	r3, [r7, #11]
          break;
 8005e96:	e007      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa41 	bl	8006322 <USBD_CtlError>
          err++;
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ea6:	bf00      	nop
      }
      break;
 8005ea8:	e037      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7c1b      	ldrb	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4798      	blx	r3
 8005ec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ec4:	e029      	b.n	8005f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa2a 	bl	8006322 <USBD_CtlError>
        err++;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed4:	e021      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7c1b      	ldrb	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f107 0208 	add.w	r2, r7, #8
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
 8005eee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef8:	e00f      	b.n	8005f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa10 	bl	8006322 <USBD_CtlError>
        err++;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	3301      	adds	r3, #1
 8005f06:	72fb      	strb	r3, [r7, #11]
      break;
 8005f08:	e007      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa08 	bl	8006322 <USBD_CtlError>
      err++;
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	3301      	adds	r3, #1
 8005f16:	72fb      	strb	r3, [r7, #11]
      break;
 8005f18:	bf00      	nop
  }

  if (err != 0U)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d11e      	bne.n	8005f5e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	88db      	ldrh	r3, [r3, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005f28:	893b      	ldrh	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	88da      	ldrh	r2, [r3, #6]
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bf28      	it	cs
 8005f38:	4613      	movcs	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	461a      	mov	r2, r3
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa5d 	bl	8006404 <USBD_CtlSendData>
 8005f4a:	e009      	b.n	8005f60 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9e7 	bl	8006322 <USBD_CtlError>
 8005f54:	e004      	b.n	8005f60 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 faae 	bl	80064b8 <USBD_CtlSendStatus>
 8005f5c:	e000      	b.n	8005f60 <USBD_GetDescriptor+0x2cc>
    return;
 8005f5e:	bf00      	nop
  }
}
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop

08005f68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	889b      	ldrh	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d131      	bne.n	8005fde <USBD_SetAddress+0x76>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d12d      	bne.n	8005fde <USBD_SetAddress+0x76>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	885b      	ldrh	r3, [r3, #2]
 8005f86:	2b7f      	cmp	r3, #127	; 0x7f
 8005f88:	d829      	bhi.n	8005fde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	885b      	ldrh	r3, [r3, #2]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d104      	bne.n	8005fac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9bc 	bl	8006322 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005faa:	e01d      	b.n	8005fe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 ff1b 	bl	8006df4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa7a 	bl	80064b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd2:	e009      	b.n	8005fe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fdc:	e004      	b.n	8005fe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f99e 	bl	8006322 <USBD_CtlError>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	885b      	ldrh	r3, [r3, #2]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	4b4e      	ldr	r3, [pc, #312]	; (8006140 <USBD_SetConfig+0x150>)
 8006006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006008:	4b4d      	ldr	r3, [pc, #308]	; (8006140 <USBD_SetConfig+0x150>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d905      	bls.n	800601c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f985 	bl	8006322 <USBD_CtlError>
    return USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e08c      	b.n	8006136 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d002      	beq.n	800602e <USBD_SetConfig+0x3e>
 8006028:	2b03      	cmp	r3, #3
 800602a:	d029      	beq.n	8006080 <USBD_SetConfig+0x90>
 800602c:	e075      	b.n	800611a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800602e:	4b44      	ldr	r3, [pc, #272]	; (8006140 <USBD_SetConfig+0x150>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d020      	beq.n	8006078 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006036:	4b42      	ldr	r3, [pc, #264]	; (8006140 <USBD_SetConfig+0x150>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <USBD_SetConfig+0x150>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fe ffe7 	bl	800501a <USBD_SetClassConfig>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f962 	bl	8006322 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006066:	e065      	b.n	8006134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fa25 	bl	80064b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2203      	movs	r2, #3
 8006072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006076:	e05d      	b.n	8006134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa1d 	bl	80064b8 <USBD_CtlSendStatus>
      break;
 800607e:	e059      	b.n	8006134 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006080:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <USBD_SetConfig+0x150>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d112      	bne.n	80060ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <USBD_SetConfig+0x150>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800609a:	4b29      	ldr	r3, [pc, #164]	; (8006140 <USBD_SetConfig+0x150>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fe ffd6 	bl	8005052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa06 	bl	80064b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060ac:	e042      	b.n	8006134 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <USBD_SetConfig+0x150>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d02a      	beq.n	8006112 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fe ffc4 	bl	8005052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <USBD_SetConfig+0x150>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <USBD_SetConfig+0x150>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fe ff9d 	bl	800501a <USBD_SetClassConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00f      	beq.n	800610a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f918 	bl	8006322 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fe ffa9 	bl	8005052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006108:	e014      	b.n	8006134 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9d4 	bl	80064b8 <USBD_CtlSendStatus>
      break;
 8006110:	e010      	b.n	8006134 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9d0 	bl	80064b8 <USBD_CtlSendStatus>
      break;
 8006118:	e00c      	b.n	8006134 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f900 	bl	8006322 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <USBD_SetConfig+0x150>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fe ff92 	bl	8005052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800612e:	2303      	movs	r3, #3
 8006130:	73fb      	strb	r3, [r7, #15]
      break;
 8006132:	bf00      	nop
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000160 	.word	0x20000160

08006144 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	88db      	ldrh	r3, [r3, #6]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d004      	beq.n	8006160 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f8e2 	bl	8006322 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800615e:	e023      	b.n	80061a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	dc02      	bgt.n	8006172 <USBD_GetConfig+0x2e>
 800616c:	2b00      	cmp	r3, #0
 800616e:	dc03      	bgt.n	8006178 <USBD_GetConfig+0x34>
 8006170:	e015      	b.n	800619e <USBD_GetConfig+0x5a>
 8006172:	2b03      	cmp	r3, #3
 8006174:	d00b      	beq.n	800618e <USBD_GetConfig+0x4a>
 8006176:	e012      	b.n	800619e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3308      	adds	r3, #8
 8006182:	2201      	movs	r2, #1
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f93c 	bl	8006404 <USBD_CtlSendData>
        break;
 800618c:	e00c      	b.n	80061a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	2201      	movs	r2, #1
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f934 	bl	8006404 <USBD_CtlSendData>
        break;
 800619c:	e004      	b.n	80061a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8be 	bl	8006322 <USBD_CtlError>
        break;
 80061a6:	bf00      	nop
}
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d81e      	bhi.n	8006206 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	88db      	ldrh	r3, [r3, #6]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d004      	beq.n	80061da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8a5 	bl	8006322 <USBD_CtlError>
        break;
 80061d8:	e01a      	b.n	8006210 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f043 0202 	orr.w	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	330c      	adds	r3, #12
 80061fa:	2202      	movs	r2, #2
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f900 	bl	8006404 <USBD_CtlSendData>
      break;
 8006204:	e004      	b.n	8006210 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f88a 	bl	8006322 <USBD_CtlError>
      break;
 800620e:	bf00      	nop
  }
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	885b      	ldrh	r3, [r3, #2]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d107      	bne.n	800623a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f940 	bl	80064b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006238:	e013      	b.n	8006262 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	885b      	ldrh	r3, [r3, #2]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d10b      	bne.n	800625a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	889b      	ldrh	r3, [r3, #4]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	b29b      	uxth	r3, r3
 800624a:	b2da      	uxtb	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f930 	bl	80064b8 <USBD_CtlSendStatus>
}
 8006258:	e003      	b.n	8006262 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f860 	bl	8006322 <USBD_CtlError>
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	2b02      	cmp	r3, #2
 8006280:	d80b      	bhi.n	800629a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	885b      	ldrh	r3, [r3, #2]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10c      	bne.n	80062a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f910 	bl	80064b8 <USBD_CtlSendStatus>
      }
      break;
 8006298:	e004      	b.n	80062a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f840 	bl	8006322 <USBD_CtlError>
      break;
 80062a2:	e000      	b.n	80062a6 <USBD_ClrFeature+0x3c>
      break;
 80062a4:	bf00      	nop
  }
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fa41 	bl	8005760 <SWAPBYTE>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fa34 	bl	8005760 <SWAPBYTE>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fa27 	bl	8005760 <SWAPBYTE>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	80da      	strh	r2, [r3, #6]
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fcf6 	bl	8006d20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006334:	2100      	movs	r1, #0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fcf2 	bl	8006d20 <USBD_LL_StallEP>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d036      	beq.n	80063c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800635e:	6938      	ldr	r0, [r7, #16]
 8006360:	f000 f836 	bl	80063d0 <USBD_GetLen>
 8006364:	4603      	mov	r3, r0
 8006366:	3301      	adds	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4413      	add	r3, r2
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	701a      	strb	r2, [r3, #0]
  idx++;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	3301      	adds	r3, #1
 8006382:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006384:	7dfb      	ldrb	r3, [r7, #23]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4413      	add	r3, r2
 800638a:	2203      	movs	r2, #3
 800638c:	701a      	strb	r2, [r3, #0]
  idx++;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	3301      	adds	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006394:	e013      	b.n	80063be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	4413      	add	r3, r2
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	3301      	adds	r3, #1
 80063a6:	613b      	str	r3, [r7, #16]
    idx++;
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	3301      	adds	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4413      	add	r3, r2
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	3301      	adds	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e7      	bne.n	8006396 <USBD_GetString+0x52>
 80063c6:	e000      	b.n	80063ca <USBD_GetString+0x86>
    return;
 80063c8:	bf00      	nop
  }
}
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063e0:	e005      	b.n	80063ee <USBD_GetLen+0x1e>
  {
    len++;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	3301      	adds	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f5      	bne.n	80063e2 <USBD_GetLen+0x12>
  }

  return len;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2202      	movs	r2, #2
 8006414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	2100      	movs	r1, #0
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fd01 	bl	8006e32 <USBD_LL_Transmit>

  return USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	2100      	movs	r1, #0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fcf0 	bl	8006e32 <USBD_LL_Transmit>

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2203      	movs	r2, #3
 800646c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	2100      	movs	r1, #0
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fcf4 	bl	8006e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fce3 	bl	8006e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064c8:	2300      	movs	r3, #0
 80064ca:	2200      	movs	r2, #0
 80064cc:	2100      	movs	r1, #0
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fcaf 	bl	8006e32 <USBD_LL_Transmit>

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2205      	movs	r2, #5
 80064ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ee:	2300      	movs	r3, #0
 80064f0:	2200      	movs	r2, #0
 80064f2:	2100      	movs	r1, #0
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fcbd 	bl	8006e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006508:	2200      	movs	r2, #0
 800650a:	4912      	ldr	r1, [pc, #72]	; (8006554 <MX_USB_DEVICE_Init+0x50>)
 800650c:	4812      	ldr	r0, [pc, #72]	; (8006558 <MX_USB_DEVICE_Init+0x54>)
 800650e:	f7fe fd07 	bl	8004f20 <USBD_Init>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006518:	f7fa f8dc 	bl	80006d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800651c:	490f      	ldr	r1, [pc, #60]	; (800655c <MX_USB_DEVICE_Init+0x58>)
 800651e:	480e      	ldr	r0, [pc, #56]	; (8006558 <MX_USB_DEVICE_Init+0x54>)
 8006520:	f7fe fd2e 	bl	8004f80 <USBD_RegisterClass>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800652a:	f7fa f8d3 	bl	80006d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800652e:	490c      	ldr	r1, [pc, #48]	; (8006560 <MX_USB_DEVICE_Init+0x5c>)
 8006530:	4809      	ldr	r0, [pc, #36]	; (8006558 <MX_USB_DEVICE_Init+0x54>)
 8006532:	f7fe fc1f 	bl	8004d74 <USBD_CDC_RegisterInterface>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800653c:	f7fa f8ca 	bl	80006d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006540:	4805      	ldr	r0, [pc, #20]	; (8006558 <MX_USB_DEVICE_Init+0x54>)
 8006542:	f7fe fd53 	bl	8004fec <USBD_Start>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800654c:	f7fa f8c2 	bl	80006d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006550:	bf00      	nop
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200000b0 	.word	0x200000b0
 8006558:	20000164 	.word	0x20000164
 800655c:	2000001c 	.word	0x2000001c
 8006560:	2000009c 	.word	0x2000009c

08006564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006568:	2200      	movs	r2, #0
 800656a:	4905      	ldr	r1, [pc, #20]	; (8006580 <CDC_Init_FS+0x1c>)
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <CDC_Init_FS+0x20>)
 800656e:	f7fe fc1b 	bl	8004da8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006572:	4905      	ldr	r1, [pc, #20]	; (8006588 <CDC_Init_FS+0x24>)
 8006574:	4803      	ldr	r0, [pc, #12]	; (8006584 <CDC_Init_FS+0x20>)
 8006576:	f7fe fc39 	bl	8004dec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800657a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000c40 	.word	0x20000c40
 8006584:	20000164 	.word	0x20000164
 8006588:	20000440 	.word	0x20000440

0800658c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006592:	4618      	mov	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	6039      	str	r1, [r7, #0]
 80065a6:	71fb      	strb	r3, [r7, #7]
 80065a8:	4613      	mov	r3, r2
 80065aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b23      	cmp	r3, #35	; 0x23
 80065b0:	d84a      	bhi.n	8006648 <CDC_Control_FS+0xac>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <CDC_Control_FS+0x1c>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	08006649 	.word	0x08006649
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006649 	.word	0x08006649
 80065c4:	08006649 	.word	0x08006649
 80065c8:	08006649 	.word	0x08006649
 80065cc:	08006649 	.word	0x08006649
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006649 	.word	0x08006649
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	08006649 	.word	0x08006649
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006649 	.word	0x08006649
 8006600:	08006649 	.word	0x08006649
 8006604:	08006649 	.word	0x08006649
 8006608:	08006649 	.word	0x08006649
 800660c:	08006649 	.word	0x08006649
 8006610:	08006649 	.word	0x08006649
 8006614:	08006649 	.word	0x08006649
 8006618:	08006649 	.word	0x08006649
 800661c:	08006649 	.word	0x08006649
 8006620:	08006649 	.word	0x08006649
 8006624:	08006649 	.word	0x08006649
 8006628:	08006649 	.word	0x08006649
 800662c:	08006649 	.word	0x08006649
 8006630:	08006649 	.word	0x08006649
 8006634:	08006649 	.word	0x08006649
 8006638:	08006649 	.word	0x08006649
 800663c:	08006649 	.word	0x08006649
 8006640:	08006649 	.word	0x08006649
 8006644:	08006649 	.word	0x08006649
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006648:	bf00      	nop
  }

  return (USBD_OK);
 800664a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	480f      	ldr	r0, [pc, #60]	; (80066a4 <CDC_Receive_FS+0x4c>)
 8006666:	f7fe fbc1 	bl	8004dec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800666a:	480e      	ldr	r0, [pc, #56]	; (80066a4 <CDC_Receive_FS+0x4c>)
 800666c:	f7fe fc22 	bl	8004eb4 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	73fb      	strb	r3, [r7, #15]
  memset(buffer,'\0',64);
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	2100      	movs	r1, #0
 800667a:	480b      	ldr	r0, [pc, #44]	; (80066a8 <CDC_Receive_FS+0x50>)
 800667c:	f000 fca4 	bl	8006fc8 <memset>
  memcpy(buffer,Buf,len);
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	461a      	mov	r2, r3
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	4808      	ldr	r0, [pc, #32]	; (80066a8 <CDC_Receive_FS+0x50>)
 8006688:	f000 fc90 	bl	8006fac <memcpy>
  memset(Buf,'\0',len);
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	461a      	mov	r2, r3
 8006690:	2100      	movs	r1, #0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fc98 	bl	8006fc8 <memset>
  return (USBD_OK);
 8006698:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000164 	.word	0x20000164
 80066a8:	2000011c 	.word	0x2000011c

080066ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <CDC_Transmit_FS+0x48>)
 80066be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e00b      	b.n	80066ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80066d2:	887b      	ldrh	r3, [r7, #2]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4806      	ldr	r0, [pc, #24]	; (80066f4 <CDC_Transmit_FS+0x48>)
 80066da:	f7fe fb65 	bl	8004da8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80066de:	4805      	ldr	r0, [pc, #20]	; (80066f4 <CDC_Transmit_FS+0x48>)
 80066e0:	f7fe fba2 	bl	8004e28 <USBD_CDC_TransmitPacket>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000164 	.word	0x20000164

080066f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800670a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2212      	movs	r2, #18
 800672c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	200000cc 	.word	0x200000cc

08006740 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	6039      	str	r1, [r7, #0]
 800674a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2204      	movs	r2, #4
 8006750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006752:	4b03      	ldr	r3, [pc, #12]	; (8006760 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	200000e0 	.word	0x200000e0

08006764 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	4907      	ldr	r1, [pc, #28]	; (8006798 <USBD_FS_ProductStrDescriptor+0x34>)
 800677a:	4808      	ldr	r0, [pc, #32]	; (800679c <USBD_FS_ProductStrDescriptor+0x38>)
 800677c:	f7ff fde2 	bl	8006344 <USBD_GetString>
 8006780:	e004      	b.n	800678c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	4904      	ldr	r1, [pc, #16]	; (8006798 <USBD_FS_ProductStrDescriptor+0x34>)
 8006786:	4805      	ldr	r0, [pc, #20]	; (800679c <USBD_FS_ProductStrDescriptor+0x38>)
 8006788:	f7ff fddc 	bl	8006344 <USBD_GetString>
  }
  return USBD_StrDesc;
 800678c:	4b02      	ldr	r3, [pc, #8]	; (8006798 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20001440 	.word	0x20001440
 800679c:	0800700c 	.word	0x0800700c

080067a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	6039      	str	r1, [r7, #0]
 80067aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	4904      	ldr	r1, [pc, #16]	; (80067c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067b0:	4804      	ldr	r0, [pc, #16]	; (80067c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067b2:	f7ff fdc7 	bl	8006344 <USBD_GetString>
  return USBD_StrDesc;
 80067b6:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20001440 	.word	0x20001440
 80067c4:	0800700c 	.word	0x0800700c

080067c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	221a      	movs	r2, #26
 80067d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067da:	f000 f843 	bl	8006864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067de:	4b02      	ldr	r3, [pc, #8]	; (80067e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	200000e4 	.word	0x200000e4

080067ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	4907      	ldr	r1, [pc, #28]	; (8006820 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006802:	4808      	ldr	r0, [pc, #32]	; (8006824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006804:	f7ff fd9e 	bl	8006344 <USBD_GetString>
 8006808:	e004      	b.n	8006814 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4904      	ldr	r1, [pc, #16]	; (8006820 <USBD_FS_ConfigStrDescriptor+0x34>)
 800680e:	4805      	ldr	r0, [pc, #20]	; (8006824 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006810:	f7ff fd98 	bl	8006344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006814:	4b02      	ldr	r3, [pc, #8]	; (8006820 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20001440 	.word	0x20001440
 8006824:	08007024 	.word	0x08007024

08006828 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4907      	ldr	r1, [pc, #28]	; (800685c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800683e:	4808      	ldr	r0, [pc, #32]	; (8006860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006840:	f7ff fd80 	bl	8006344 <USBD_GetString>
 8006844:	e004      	b.n	8006850 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	4904      	ldr	r1, [pc, #16]	; (800685c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800684a:	4805      	ldr	r0, [pc, #20]	; (8006860 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800684c:	f7ff fd7a 	bl	8006344 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006850:	4b02      	ldr	r3, [pc, #8]	; (800685c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20001440 	.word	0x20001440
 8006860:	08007030 	.word	0x08007030

08006864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <Get_SerialNum+0x44>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <Get_SerialNum+0x48>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006876:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <Get_SerialNum+0x4c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800688a:	2208      	movs	r2, #8
 800688c:	4909      	ldr	r1, [pc, #36]	; (80068b4 <Get_SerialNum+0x50>)
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f814 	bl	80068bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006894:	2204      	movs	r2, #4
 8006896:	4908      	ldr	r1, [pc, #32]	; (80068b8 <Get_SerialNum+0x54>)
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	f000 f80f 	bl	80068bc <IntToUnicode>
  }
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	1fff7a10 	.word	0x1fff7a10
 80068ac:	1fff7a14 	.word	0x1fff7a14
 80068b0:	1fff7a18 	.word	0x1fff7a18
 80068b4:	200000e6 	.word	0x200000e6
 80068b8:	200000f6 	.word	0x200000f6

080068bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]
 80068d2:	e027      	b.n	8006924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0f1b      	lsrs	r3, r3, #28
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d80b      	bhi.n	80068f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0f1b      	lsrs	r3, r3, #28
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4619      	mov	r1, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	440b      	add	r3, r1
 80068ec:	3230      	adds	r2, #48	; 0x30
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	e00a      	b.n	800690a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	0f1b      	lsrs	r3, r3, #28
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4619      	mov	r1, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	440b      	add	r3, r1
 8006904:	3237      	adds	r2, #55	; 0x37
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	3301      	adds	r3, #1
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4413      	add	r3, r2
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	3301      	adds	r3, #1
 8006922:	75fb      	strb	r3, [r7, #23]
 8006924:	7dfa      	ldrb	r2, [r7, #23]
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3d3      	bcc.n	80068d4 <IntToUnicode+0x18>
  }
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800695c:	d13a      	bne.n	80069d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6313      	str	r3, [r2, #48]	; 0x30
 800696e:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800697a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800697e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006980:	2302      	movs	r3, #2
 8006982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006988:	2303      	movs	r3, #3
 800698a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800698c:	230a      	movs	r3, #10
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	4619      	mov	r1, r3
 8006996:	4812      	ldr	r0, [pc, #72]	; (80069e0 <HAL_PCD_MspInit+0xa4>)
 8006998:	f7fa f8e2 	bl	8000b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	6353      	str	r3, [r2, #52]	; 0x34
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 80069b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b6:	6453      	str	r3, [r2, #68]	; 0x44
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <HAL_PCD_MspInit+0xa0>)
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	2043      	movs	r0, #67	; 0x43
 80069ca:	f7fa f892 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80069ce:	2043      	movs	r0, #67	; 0x43
 80069d0:	f7fa f8ab 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80069d4:	bf00      	nop
 80069d6:	3728      	adds	r7, #40	; 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40020000 	.word	0x40020000

080069e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f7fe fb43 	bl	8005086 <USBD_LL_SetupStage>
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7fe fb7d 	bl	8005130 <USBD_LL_DataOutStage>
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	334c      	adds	r3, #76	; 0x4c
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	4619      	mov	r1, r3
 8006a66:	f7fe fc16 	bl	8005296 <USBD_LL_DataInStage>
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fd4a 	bl	800551a <USBD_LL_SOF>
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a96:	2301      	movs	r3, #1
 8006a98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	e008      	b.n	8006aba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d102      	bne.n	8006ab6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
 8006ab4:	e001      	b.n	8006aba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006ab6:	f7f9 fe0d 	bl	80006d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ac0:	7bfa      	ldrb	r2, [r7, #15]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fcea 	bl	800549e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe fc92 	bl	80053fa <USBD_LL_Reset>
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fce5 	bl	80054be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <HAL_PCD_SuspendCallback+0x48>)
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	4a03      	ldr	r2, [pc, #12]	; (8006b28 <HAL_PCD_SuspendCallback+0x48>)
 8006b1a:	f043 0306 	orr.w	r3, r3, #6
 8006b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	e000ed00 	.word	0xe000ed00

08006b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fcd5 	bl	80054ea <USBD_LL_Resume>
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fd2d 	bl	80055be <USBD_LL_IsoOUTIncomplete>
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b7e:	78fa      	ldrb	r2, [r7, #3]
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fce9 	bl	800555a <USBD_LL_IsoINIncomplete>
}
 8006b88:	bf00      	nop
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fd3f 	bl	8005622 <USBD_LL_DevConnected>
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fd3c 	bl	8005638 <USBD_LL_DevDisconnected>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d13c      	bne.n	8006c52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006bd8:	4a20      	ldr	r2, [pc, #128]	; (8006c5c <USBD_LL_Init+0x94>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <USBD_LL_Init+0x94>)
 8006be4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <USBD_LL_Init+0x94>)
 8006bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <USBD_LL_Init+0x94>)
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bf6:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <USBD_LL_Init+0x94>)
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bfc:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <USBD_LL_Init+0x94>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c04:	2202      	movs	r2, #2
 8006c06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c08:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c26:	480d      	ldr	r0, [pc, #52]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c28:	f7fa f969 	bl	8000efe <HAL_PCD_Init>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006c32:	f7f9 fd4f 	bl	80006d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	4808      	ldr	r0, [pc, #32]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c3a:	f7fb fbc0 	bl	80023be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	2100      	movs	r1, #0
 8006c42:	4806      	ldr	r0, [pc, #24]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c44:	f7fb fb74 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c48:	2280      	movs	r2, #128	; 0x80
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	4803      	ldr	r0, [pc, #12]	; (8006c5c <USBD_LL_Init+0x94>)
 8006c4e:	f7fb fb6f 	bl	8002330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20001640 	.word	0x20001640

08006c60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fa fa5e 	bl	8001138 <HAL_PCD_Start>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f942 	bl	8006f0c <USBD_Get_USB_Status>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	4608      	mov	r0, r1
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	70fb      	strb	r3, [r7, #3]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70bb      	strb	r3, [r7, #2]
 8006cac:	4613      	mov	r3, r2
 8006cae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006cbe:	78bb      	ldrb	r3, [r7, #2]
 8006cc0:	883a      	ldrh	r2, [r7, #0]
 8006cc2:	78f9      	ldrb	r1, [r7, #3]
 8006cc4:	f7fa ff2f 	bl	8001b26 <HAL_PCD_EP_Open>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f91c 	bl	8006f0c <USBD_Get_USB_Status>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fa ff78 	bl	8001bf6 <HAL_PCD_EP_Close>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f8fd 	bl	8006f0c <USBD_Get_USB_Status>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fb f850 	bl	8001de4 <HAL_PCD_EP_SetStall>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f8de 	bl	8006f0c <USBD_Get_USB_Status>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fb f895 	bl	8001eac <HAL_PCD_EP_ClrStall>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 f8bf 	bl	8006f0c <USBD_Get_USB_Status>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da0b      	bge.n	8006dd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	333e      	adds	r3, #62	; 0x3e
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	e00b      	b.n	8006de8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006de6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fa fe62 	bl	8001adc <HAL_PCD_SetAddress>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f874 	bl	8006f0c <USBD_Get_USB_Status>
 8006e24:	4603      	mov	r3, r0
 8006e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e50:	7af9      	ldrb	r1, [r7, #11]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	f7fa ff7b 	bl	8001d50 <HAL_PCD_EP_Transmit>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f853 	bl	8006f0c <USBD_Get_USB_Status>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	460b      	mov	r3, r1
 8006e82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e92:	7af9      	ldrb	r1, [r7, #11]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	f7fa fef7 	bl	8001c8a <HAL_PCD_EP_Receive>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f832 	bl	8006f0c <USBD_Get_USB_Status>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fa ff27 	bl	8001d20 <HAL_PCD_EP_GetRxCount>
 8006ed2:	4603      	mov	r3, r0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ee4:	4b03      	ldr	r3, [pc, #12]	; (8006ef4 <USBD_static_malloc+0x18>)
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20001b4c 	.word	0x20001b4c

08006ef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d817      	bhi.n	8006f50 <USBD_Get_USB_Status+0x44>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <USBD_Get_USB_Status+0x1c>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f3f 	.word	0x08006f3f
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f4b 	.word	0x08006f4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f3c:	e00b      	b.n	8006f56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	73fb      	strb	r3, [r7, #15]
    break;
 8006f42:	e008      	b.n	8006f56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f44:	2301      	movs	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
    break;
 8006f48:	e005      	b.n	8006f56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4e:	e002      	b.n	8006f56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f50:	2303      	movs	r3, #3
 8006f52:	73fb      	strb	r3, [r7, #15]
    break;
 8006f54:	bf00      	nop
  }
  return usb_status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <__libc_init_array>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4d0d      	ldr	r5, [pc, #52]	; (8006f9c <__libc_init_array+0x38>)
 8006f68:	4c0d      	ldr	r4, [pc, #52]	; (8006fa0 <__libc_init_array+0x3c>)
 8006f6a:	1b64      	subs	r4, r4, r5
 8006f6c:	10a4      	asrs	r4, r4, #2
 8006f6e:	2600      	movs	r6, #0
 8006f70:	42a6      	cmp	r6, r4
 8006f72:	d109      	bne.n	8006f88 <__libc_init_array+0x24>
 8006f74:	4d0b      	ldr	r5, [pc, #44]	; (8006fa4 <__libc_init_array+0x40>)
 8006f76:	4c0c      	ldr	r4, [pc, #48]	; (8006fa8 <__libc_init_array+0x44>)
 8006f78:	f000 f82e 	bl	8006fd8 <_init>
 8006f7c:	1b64      	subs	r4, r4, r5
 8006f7e:	10a4      	asrs	r4, r4, #2
 8006f80:	2600      	movs	r6, #0
 8006f82:	42a6      	cmp	r6, r4
 8006f84:	d105      	bne.n	8006f92 <__libc_init_array+0x2e>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8c:	4798      	blx	r3
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7ee      	b.n	8006f70 <__libc_init_array+0xc>
 8006f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f96:	4798      	blx	r3
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7f2      	b.n	8006f82 <__libc_init_array+0x1e>
 8006f9c:	08007058 	.word	0x08007058
 8006fa0:	08007058 	.word	0x08007058
 8006fa4:	08007058 	.word	0x08007058
 8006fa8:	0800705c 	.word	0x0800705c

08006fac <memcpy>:
 8006fac:	440a      	add	r2, r1
 8006fae:	4291      	cmp	r1, r2
 8006fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb4:	d100      	bne.n	8006fb8 <memcpy+0xc>
 8006fb6:	4770      	bx	lr
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc2:	4291      	cmp	r1, r2
 8006fc4:	d1f9      	bne.n	8006fba <memcpy+0xe>
 8006fc6:	bd10      	pop	{r4, pc}

08006fc8 <memset>:
 8006fc8:	4402      	add	r2, r0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d100      	bne.n	8006fd2 <memset+0xa>
 8006fd0:	4770      	bx	lr
 8006fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd6:	e7f9      	b.n	8006fcc <memset+0x4>

08006fd8 <_init>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_fini>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr
