
015_ETHERNET_RMII_HTTP_SERVER_N_F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001150c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ddc  080116dc  080116dc  000216dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144b8  080144b8  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  080144b8  080144b8  000244b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144c0  080144c0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144c0  080144c0  000244c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144c4  080144c4  000244c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080144c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cbac  20000080  08014548  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cc2c  08014548  0003cc2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000356a1  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c4d  00000000  00000000  00065751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  0006c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001640  00000000  00000000  0006db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003326a  00000000  00000000  0006f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027f99  00000000  00000000  000a23aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001061ad  00000000  00000000  000ca343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d04f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006518  00000000  00000000  001d0544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080116c4 	.word	0x080116c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080116c4 	.word	0x080116c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	200000f0 	.word	0x200000f0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa34 	bl	8000a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f81b 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f885 	bl	80006f8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x3c>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 f8b4 	bl	8003772 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <main+0x40>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f003 f898 	bl	8003744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x38>
 8000616:	bf00      	nop
 8000618:	080116e8 	.word	0x080116e8
 800061c:	200041e0 	.word	0x200041e0

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f010 f826 	bl	8010680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <SystemClock_Config+0xd4>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800068c:	23d8      	movs	r3, #216	; 0xd8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fe41 	bl	8002324 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f878 	bl	800079c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ac:	f001 fdea 	bl	8002284 <HAL_PWREx_EnableOverDrive>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f871 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2107      	movs	r1, #7
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f8c7 	bl	800286c <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006e4:	f000 f85a 	bl	800079c <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_GPIO_Init+0x8c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <MX_GPIO_Init+0x8c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_GPIO_Init+0x8c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <MX_GPIO_Init+0x8c>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <MX_GPIO_Init+0x8c>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_GPIO_Init+0x8c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

}
 8000776:	bf00      	nop
 8000778:	371c      	adds	r7, #28
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000790:	f002 fa46 	bl	8002c20 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f003 f838 	bl	800380a <osDelay>
 800079a:	e7fb      	b.n	8000794 <StartDefaultTask+0xc>

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	210f      	movs	r1, #15
 80007e2:	f06f 0001 	mvn.w	r0, #1
 80007e6:	f000 fa70 	bl	8000cca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f94e 	bl	8000ac8 <HAL_IncTick>
  osSystickHandler();
 800082c:	f003 f9fa 	bl	8003c24 <osSystickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000830:	f005 f83c 	bl	80058ac <xTaskGetSchedulerState>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d001      	beq.n	800083e <SysTick_Handler+0x1a>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800083a:	f005 fc1d 	bl	8006078 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}

08000842 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
	return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <_kill>:

int _kill(int pid, int sig)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_kill+0x20>)
 8000860:	2216      	movs	r2, #22
 8000862:	601a      	str	r2, [r3, #0]
	return -1;
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000cc18 	.word	0x2000cc18

08000878 <_exit>:

void _exit (int status)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffe5 	bl	8000854 <_kill>
	while (1) {}		/* Make sure we hang here */
 800088a:	e7fe      	b.n	800088a <_exit+0x12>

0800088c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e00a      	b.n	80008b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800089e:	f3af 8000 	nop.w
 80008a2:	4601      	mov	r1, r0
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	b2ca      	uxtb	r2, r1
 80008ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbf0      	blt.n	800089e <_read+0x12>
	}

return len;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e009      	b.n	80008ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf1      	blt.n	80008d8 <_write+0x12>
	}
	return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_close>:

int _close(int file)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000926:	605a      	str	r2, [r3, #4]
	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_isatty>:

int _isatty(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	return 1;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d205      	bcs.n	80009a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <_sbrk+0x6c>)
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	20050000 	.word	0x20050000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	200002f0 	.word	0x200002f0
 80009d0:	2000cc30 	.word	0x2000cc30
 80009d4:	2000cc18 	.word	0x2000cc18

080009d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ffd7 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f00f fde9 	bl	8010600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fdd5 	bl	80005dc <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000a40:	080144c8 	.word	0x080144c8
  ldr r2, =_sbss
 8000a44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000a48:	2000cc2c 	.word	0x2000cc2c

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>

08000a4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a52:	2003      	movs	r0, #3
 8000a54:	f000 f92e 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a58:	200f      	movs	r0, #15
 8000a5a:	f000 f805 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5e:	f7ff fea3 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f93b 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f911 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200041e4 	.word	0x200041e4

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200041e4 	.word	0x200041e4

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <__NVIC_SetPriorityGrouping+0x40>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x40>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	05fa0000 	.word	0x05fa0000

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff47 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5c 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000d2c:	4ba9      	ldr	r3, [pc, #676]	; (8000fd4 <HAL_ETH_Init+0x2b8>)
 8000d2e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e181      	b.n	8001046 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f002 f8c0 	bl	8002edc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b9e      	ldr	r3, [pc, #632]	; (8000fd8 <HAL_ETH_Init+0x2bc>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	4a9d      	ldr	r2, [pc, #628]	; (8000fd8 <HAL_ETH_Init+0x2bc>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6453      	str	r3, [r2, #68]	; 0x44
 8000d68:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <HAL_ETH_Init+0x2bc>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d74:	4b99      	ldr	r3, [pc, #612]	; (8000fdc <HAL_ETH_Init+0x2c0>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_ETH_Init+0x2c0>)
 8000d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d7e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d80:	4b96      	ldr	r3, [pc, #600]	; (8000fdc <HAL_ETH_Init+0x2c0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4994      	ldr	r1, [pc, #592]	; (8000fdc <HAL_ETH_Init+0x2c0>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0201 	orr.w	r2, r2, #1
 8000da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000da4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000da6:	f7ff fea3 	bl	8000af0 <HAL_GetTick>
 8000daa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000dac:	e011      	b.n	8000dd2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000dae:	f7ff fe9f 	bl	8000af0 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dbc:	d909      	bls.n	8000dd2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e139      	b.n	8001046 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e4      	bne.n	8000dae <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f023 031c 	bic.w	r3, r3, #28
 8000df2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000df4:	f001 ff08 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8000df8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4a78      	ldr	r2, [pc, #480]	; (8000fe0 <HAL_ETH_Init+0x2c4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d908      	bls.n	8000e14 <HAL_ETH_Init+0xf8>
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4a77      	ldr	r2, [pc, #476]	; (8000fe4 <HAL_ETH_Init+0x2c8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d804      	bhi.n	8000e14 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e027      	b.n	8000e64 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4a73      	ldr	r2, [pc, #460]	; (8000fe4 <HAL_ETH_Init+0x2c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d908      	bls.n	8000e2e <HAL_ETH_Init+0x112>
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4a6d      	ldr	r2, [pc, #436]	; (8000fd4 <HAL_ETH_Init+0x2b8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d204      	bcs.n	8000e2e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f043 030c 	orr.w	r3, r3, #12
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	e01a      	b.n	8000e64 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4a68      	ldr	r2, [pc, #416]	; (8000fd4 <HAL_ETH_Init+0x2b8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d303      	bcc.n	8000e3e <HAL_ETH_Init+0x122>
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4a6b      	ldr	r2, [pc, #428]	; (8000fe8 <HAL_ETH_Init+0x2cc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d911      	bls.n	8000e62 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4a69      	ldr	r2, [pc, #420]	; (8000fe8 <HAL_ETH_Init+0x2cc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d908      	bls.n	8000e58 <HAL_ETH_Init+0x13c>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4a68      	ldr	r2, [pc, #416]	; (8000fec <HAL_ETH_Init+0x2d0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d804      	bhi.n	8000e58 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e005      	b.n	8000e64 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	e000      	b.n	8000e64 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e62:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fb9c 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000e82:	6939      	ldr	r1, [r7, #16]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 fd51 	bl	800192c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0d7      	b.n	8001046 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e96:	20ff      	movs	r0, #255	; 0xff
 8000e98:	f7ff fe36 	bl	8000b08 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a5 	beq.w	8000ff0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ea6:	f7ff fe23 	bl	8000af0 <HAL_GetTick>
 8000eaa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fb13 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000eba:	f7ff fe19 	bl	8000af0 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d90f      	bls.n	8000eec <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fd2a 	bl	800192c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0ac      	b.n	8001046 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0da      	beq.n	8000eac <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000ef6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efa:	2100      	movs	r1, #0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fb57 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fd0c 	bl	800192c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e092      	b.n	8001046 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f20:	f7ff fde6 	bl	8000af0 <HAL_GetTick>
 8000f24:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fad6 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f34:	f7ff fddc 	bl	8000af0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d90f      	bls.n	8000f66 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f4a:	6939      	ldr	r1, [r7, #16]
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fced 	bl	800192c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e06f      	b.n	8001046 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0da      	beq.n	8000f26 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	461a      	mov	r2, r3
 8000f76:	2110      	movs	r1, #16
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fab1 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fcce 	bl	800192c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e054      	b.n	8001046 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	e002      	b.n	8000fb6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	e035      	b.n	8001034 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	e030      	b.n	8001034 <HAL_ETH_Init+0x318>
 8000fd2:	bf00      	nop
 8000fd4:	03938700 	.word	0x03938700
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	01312cff 	.word	0x01312cff
 8000fe4:	02160ebf 	.word	0x02160ebf
 8000fe8:	05f5e0ff 	.word	0x05f5e0ff
 8000fec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001000:	4313      	orrs	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fad1 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001018:	6939      	ldr	r1, [r7, #16]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 fc86 	bl	800192c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e00c      	b.n	8001046 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800102c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001030:	f7ff fd6a 	bl	8000b08 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fc78 	bl	800192c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop

08001050 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ETH_DMATxDescListInit+0x20>
 800106c:	2302      	movs	r3, #2
 800106e:	e052      	b.n	8001116 <HAL_ETH_DMATxDescListInit+0xc6>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e030      	b.n	80010ee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800109c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010a4:	fb02 f303 	mul.w	r3, r2, r3
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d208      	bcs.n	80010e2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	015b      	lsls	r3, r3, #5
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	e002      	b.n	80010e8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ca      	bcc.n	800108c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f241 0310 	movw	r3, #4112	; 0x1010
 8001100:	440b      	add	r3, r1
 8001102:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001122:	b480      	push	{r7}
 8001124:	b087      	sub	sp, #28
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ETH_DMARxDescListInit+0x20>
 800113e:	2302      	movs	r3, #2
 8001140:	e056      	b.n	80011f0 <HAL_ETH_DMARxDescListInit+0xce>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2202      	movs	r2, #2
 800114e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e034      	b.n	80011c8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	015b      	lsls	r3, r3, #5
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4413      	add	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800116e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001176:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	461a      	mov	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d208      	bcs.n	80011bc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4413      	add	r3, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	e002      	b.n	80011c2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3c6      	bcc.n	800115e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	f241 030c 	movw	r3, #4108	; 0x100c
 80011da:	440b      	add	r3, r1
 80011dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ETH_TransmitFrame+0x24>
 800121c:	2302      	movs	r3, #2
 800121e:	e0cd      	b.n	80013bc <HAL_ETH_TransmitFrame+0x1c0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001246:	2301      	movs	r3, #1
 8001248:	e0b8      	b.n	80013bc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da09      	bge.n	8001268 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2212      	movs	r2, #18
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0a9      	b.n	80013bc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800126e:	4293      	cmp	r3, r2
 8001270:	d915      	bls.n	800129e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	4a54      	ldr	r2, [pc, #336]	; (80013c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0a9b      	lsrs	r3, r3, #10
 800127c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001282:	fba3 1302 	umull	r1, r3, r3, r2
 8001286:	0a9b      	lsrs	r3, r3, #10
 8001288:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800128c:	fb01 f303 	mul.w	r3, r1, r3
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e001      	b.n	80012a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d11c      	bne.n	80012e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80012b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80012c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e0:	e04b      	b.n	800137a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e044      	b.n	8001372 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800130c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001316:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3b01      	subs	r3, #1
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	429a      	cmp	r2, r3
 8001320:	d116      	bne.n	8001350 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001330:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4a25      	ldr	r2, [pc, #148]	; (80013cc <HAL_ETH_TransmitFrame+0x1d0>)
 8001336:	fb02 f203 	mul.w	r2, r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001342:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800134e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	3301      	adds	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3b6      	bcc.n	80012e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f241 0314 	movw	r3, #4116	; 0x1014
 8001396:	4413      	add	r3, r2
 8001398:	2204      	movs	r2, #4
 800139a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f241 0304 	movw	r3, #4100	; 0x1004
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	ac02b00b 	.word	0xac02b00b
 80013cc:	fffffa0c 	.word	0xfffffa0c

080013d0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e074      	b.n	80014d4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80013fa:	e05a      	b.n	80014b2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800140c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001410:	d10d      	bne.n	800142e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
 800142c:	e041      	b.n	80014b2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	461a      	mov	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
 8001452:	e02e      	b.n	80014b2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001482:	1f1a      	subs	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e010      	b.n	80014d4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db02      	blt.n	80014c2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d99c      	bls.n	80013fc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b82      	cmp	r3, #130	; 0x82
 8001500:	d101      	bne.n	8001506 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	e050      	b.n	80015a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2282      	movs	r2, #130	; 0x82
 800150a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8a1b      	ldrh	r3, [r3, #16]
 8001522:	02db      	lsls	r3, r3, #11
 8001524:	b29b      	uxth	r3, r3
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	019b      	lsls	r3, r3, #6
 8001530:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f023 0302 	bic.w	r3, r3, #2
 8001540:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001552:	f7ff facd 	bl	8000af0 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001558:	e015      	b.n	8001586 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800155a:	f7ff fac9 	bl	8000af0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d309      	bcc.n	800157e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e014      	b.n	80015a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e4      	bne.n	800155a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	460b      	mov	r3, r1
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b42      	cmp	r3, #66	; 0x42
 80015d0:	d101      	bne.n	80015d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80015d2:	2302      	movs	r3, #2
 80015d4:	e04e      	b.n	8001674 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2242      	movs	r2, #66	; 0x42
 80015da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 031c 	and.w	r3, r3, #28
 80015ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8a1b      	ldrh	r3, [r3, #16]
 80015f2:	02db      	lsls	r3, r3, #11
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7ff fa60 	bl	8000af0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001632:	e015      	b.n	8001660 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001634:	f7ff fa5c 	bl	8000af0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001642:	d309      	bcc.n	8001658 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e00d      	b.n	8001674 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e4      	bne.n	8001634 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_ETH_Start+0x16>
 800168e:	2302      	movs	r3, #2
 8001690:	e01f      	b.n	80016d2 <HAL_ETH_Start+0x56>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fb44 	bl	8001d30 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fb7b 	bl	8001da4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fc12 	bl	8001ed8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fbaf 	bl	8001e18 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fbdc 	bl	8001e78 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ETH_Stop+0x16>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e01f      	b.n	8001730 <HAL_ETH_Stop+0x56>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fba1 	bl	8001e48 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fbce 	bl	8001ea8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fb66 	bl	8001dde <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fbe0 	bl	8001ed8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fb26 	bl	8001d6a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_ETH_ConfigMAC+0x1c>
 8001750:	2302      	movs	r3, #2
 8001752:	e0e4      	b.n	800191e <HAL_ETH_ConfigMAC+0x1e6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80b1 	beq.w	80018ce <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4b6c      	ldr	r3, [pc, #432]	; (8001928 <HAL_ETH_ConfigMAC+0x1f0>)
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001784:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800178a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001790:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001796:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800179c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80017a2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80017a8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80017ae:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80017b4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80017ba:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80017c0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80017c6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff f992 	bl	8000b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017f4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80017fa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001800:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001806:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800180c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001812:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800181e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001820:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff f96c 	bl	8000b08 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001840:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800184a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f64f 7341 	movw	r3, #65345	; 0xff41
 800185a:	4013      	ands	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001868:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800186e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001874:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800187a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001880:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff f935 	bl	8000b08 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff f922 	bl	8000b08 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	61da      	str	r2, [r3, #28]
 80018cc:	e01e      	b.n	800190c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80018dc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff f902 	bl	8000b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	ff20810f 	.word	0xff20810f

0800192c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0b0      	sub	sp, #192	; 0xc0
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001948:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001950:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800195a:	2300      	movs	r3, #0
 800195c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	663b      	str	r3, [r7, #96]	; 0x60
 8001978:	e001      	b.n	800197e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800197e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001982:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001988:	2300      	movs	r3, #0
 800198a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001998:	2340      	movs	r3, #64	; 0x40
 800199a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a04:	4bab      	ldr	r3, [pc, #684]	; (8001cb4 <ETH_MACDMAConfig+0x388>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a10:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a14:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a18:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a1e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a22:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a26:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a2c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a30:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a34:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a38:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a3c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff f851 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a6e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a74:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a78:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a7e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a84:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a8a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a90:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a94:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a9c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a9e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff f82c 	bl	8000b08 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ab8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ac2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001acc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ad8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001adc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001af0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001af6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001afc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b02:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b08:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7fe ffed 	bl	8000b08 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b36:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b38:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7fe ffd8 	bl	8000b08 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b60:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b74:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b86:	2304      	movs	r3, #4
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <ETH_MACDMAConfig+0x38c>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001bd0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001bd2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001bd4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001bd6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001bd8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001bda:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001bdc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001bde:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001be0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001be2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001be6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001bea:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f241 0318 	movw	r3, #4120	; 0x1018
 8001bfe:	4413      	add	r3, r2
 8001c00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7fe ff76 	bl	8000b08 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c24:	4413      	add	r3, r2
 8001c26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c2a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c30:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c34:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c38:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c3c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c40:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c42:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001c46:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7fe ff4f 	bl	8000b08 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c76:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10d      	bne.n	8001c9c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6811      	ldr	r1, [r2, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <ETH_MACDMAConfig+0x390>)
 8001c92:	431a      	orrs	r2, r3
 8001c94:	f241 031c 	movw	r3, #4124	; 0x101c
 8001c98:	440b      	add	r3, r1
 8001c9a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f80b 	bl	8001cc0 <ETH_MACAddressConfig>
}
 8001caa:	bf00      	nop
 8001cac:	37c0      	adds	r7, #192	; 0xc0
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	ff20810f 	.word	0xff20810f
 8001cb8:	f8de3f23 	.word	0xf8de3f23
 8001cbc:	00010040 	.word	0x00010040

08001cc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3305      	adds	r3, #5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	3204      	adds	r2, #4
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <ETH_MACAddressConfig+0x68>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3303      	adds	r3, #3
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	061a      	lsls	r2, r3, #24
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4313      	orrs	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <ETH_MACAddressConfig+0x6c>)
 8001d12:	4413      	add	r3, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6013      	str	r3, [r2, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40028040 	.word	0x40028040
 8001d2c:	40028044 	.word	0x40028044

08001d30 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0208 	orr.w	r2, r2, #8
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7fe fed7 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7fe feba 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	601a      	str	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0204 	orr.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7fe fe9d 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7fe fe80 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6811      	ldr	r1, [r2, #0]
 8001e30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e34:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e38:	440b      	add	r3, r1
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6811      	ldr	r1, [r2, #0]
 8001e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e64:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e68:	440b      	add	r3, r1
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e88:	4413      	add	r3, r2
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6811      	ldr	r1, [r2, #0]
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e98:	440b      	add	r3, r1
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6811      	ldr	r1, [r2, #0]
 8001ec0:	f023 0202 	bic.w	r2, r3, #2
 8001ec4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ec8:	440b      	add	r3, r1
 8001eca:	601a      	str	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6811      	ldr	r1, [r2, #0]
 8001ef4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001efc:	440b      	add	r3, r1
 8001efe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7fe fdfa 	bl	8000b08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f1e:	440b      	add	r3, r1
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e175      	b.n	8002238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8164 	bne.w	8002232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <HAL_GPIO_Init+0x56>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d130      	bne.n	8001fe4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d017      	beq.n	8002020 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d123      	bne.n	8002074 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80be 	beq.w	8002232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_GPIO_Init+0x324>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a65      	ldr	r2, [pc, #404]	; (8002250 <HAL_GPIO_Init+0x324>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_GPIO_Init+0x324>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020ce:	4a61      	ldr	r2, [pc, #388]	; (8002254 <HAL_GPIO_Init+0x328>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_GPIO_Init+0x32c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d037      	beq.n	800216a <HAL_GPIO_Init+0x23e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a57      	ldr	r2, [pc, #348]	; (800225c <HAL_GPIO_Init+0x330>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_GPIO_Init+0x23a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a56      	ldr	r2, [pc, #344]	; (8002260 <HAL_GPIO_Init+0x334>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <HAL_GPIO_Init+0x236>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a55      	ldr	r2, [pc, #340]	; (8002264 <HAL_GPIO_Init+0x338>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d025      	beq.n	800215e <HAL_GPIO_Init+0x232>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a54      	ldr	r2, [pc, #336]	; (8002268 <HAL_GPIO_Init+0x33c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x22e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_GPIO_Init+0x340>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x22a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_GPIO_Init+0x344>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_GPIO_Init+0x348>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x222>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_GPIO_Init+0x34c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <HAL_GPIO_Init+0x350>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x21a>
 8002142:	2309      	movs	r3, #9
 8002144:	e012      	b.n	800216c <HAL_GPIO_Init+0x240>
 8002146:	230a      	movs	r3, #10
 8002148:	e010      	b.n	800216c <HAL_GPIO_Init+0x240>
 800214a:	2308      	movs	r3, #8
 800214c:	e00e      	b.n	800216c <HAL_GPIO_Init+0x240>
 800214e:	2307      	movs	r3, #7
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x240>
 8002152:	2306      	movs	r3, #6
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x240>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x240>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x240>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x240>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x240>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x240>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	; (8002254 <HAL_GPIO_Init+0x328>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_GPIO_Init+0x354>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_GPIO_Init+0x354>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_GPIO_Init+0x354>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_GPIO_Init+0x354>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_GPIO_Init+0x354>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_GPIO_Init+0x354>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_GPIO_Init+0x354>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_GPIO_Init+0x354>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae86 	bls.w	8001f4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40021400 	.word	0x40021400
 8002270:	40021800 	.word	0x40021800
 8002274:	40021c00 	.word	0x40021c00
 8002278:	40022000 	.word	0x40022000
 800227c:	40022400 	.word	0x40022400
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_PWREx_EnableOverDrive+0x98>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_PWREx_EnableOverDrive+0x98>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_PWREx_EnableOverDrive+0x98>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b2:	f7fe fc1d 	bl	8000af0 <HAL_GetTick>
 80022b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022b8:	e009      	b.n	80022ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022ba:	f7fe fc19 	bl	8000af0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c8:	d901      	bls.n	80022ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e022      	b.n	8002314 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d1ee      	bne.n	80022ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e8:	f7fe fc02 	bl	8000af0 <HAL_GetTick>
 80022ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022ee:	e009      	b.n	8002304 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022f0:	f7fe fbfe 	bl	8000af0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022fe:	d901      	bls.n	8002304 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e007      	b.n	8002314 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002310:	d1ee      	bne.n	80022f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000

08002324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e291      	b.n	800285e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8087 	beq.w	8002456 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002348:	4b96      	ldr	r3, [pc, #600]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00c      	beq.n	800236e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002354:	4b93      	ldr	r3, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d112      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
 8002360:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236c:	d10b      	bne.n	8002386 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236e:	4b8d      	ldr	r3, [pc, #564]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d06c      	beq.n	8002454 <HAL_RCC_OscConfig+0x130>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d168      	bne.n	8002454 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e26b      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x7a>
 8002390:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a83      	ldr	r2, [pc, #524]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e02e      	b.n	80023fc <HAL_RCC_OscConfig+0xd8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x9c>
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7e      	ldr	r2, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7b      	ldr	r2, [pc, #492]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01d      	b.n	80023fc <HAL_RCC_OscConfig+0xd8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0xd8>
 80023e4:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6b      	ldr	r2, [pc, #428]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fb74 	bl	8000af0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fb70 	bl	8000af0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e21f      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e014      	b.n	8002456 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fb60 	bl	8000af0 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fb5c 	bl	8000af0 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e20b      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x110>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d069      	beq.n	8002536 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002462:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x190>
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_RCC_OscConfig+0x17a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e1df      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	493d      	ldr	r1, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e040      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fb12 	bl	8000af0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fb0e 	bl	8000af0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1bd      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
 8002502:	e018      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe faee 	bl	8000af0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe faea 	bl	8000af0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e199      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d038      	beq.n	80025b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d019      	beq.n	800257e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe facb 	bl	8000af0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe fac7 	bl	8000af0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e176      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x23a>
 800257c:	e01a      	b.n	80025b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fab1 	bl	8000af0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002592:	f7fe faad 	bl	8000af0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d903      	bls.n	80025a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e15c      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
 80025a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b91      	ldr	r3, [pc, #580]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a4 	beq.w	800270a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7e      	ldr	r2, [pc, #504]	; (80027f4 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe fa75 	bl	8000af0 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe fa71 	bl	8000af0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e120      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x4d0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x31a>
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e02d      	b.n	800269a <HAL_RCC_OscConfig+0x376>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x33c>
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a66      	ldr	r2, [pc, #408]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	e01c      	b.n	800269a <HAL_RCC_OscConfig+0x376>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_OscConfig+0x35e>
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a5d      	ldr	r2, [pc, #372]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	e00b      	b.n	800269a <HAL_RCC_OscConfig+0x376>
 8002682:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d015      	beq.n	80026ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fe fa25 	bl	8000af0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fa21 	bl	8000af0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0ce      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ee      	beq.n	80026aa <HAL_RCC_OscConfig+0x386>
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe fa0f 	bl	8000af0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fa0b 	bl	8000af0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ee      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a4 	beq.w	800285c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d06b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d149      	bne.n	80027bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800272e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe f9dc 	bl	8000af0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe f9d8 	bl	8000af0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e087      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	019b      	lsls	r3, r3, #6
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	3b01      	subs	r3, #1
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4313      	orrs	r3, r2
 8002780:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 8002782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002786:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe f9ac 	bl	8000af0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe f9a8 	bl	8000af0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e057      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x478>
 80027ba:	e04f      	b.n	800285c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe f992 	bl	8000af0 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe f98e 	bl	8000af0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e03d      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <HAL_RCC_OscConfig+0x4cc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4ac>
 80027ee:	e035      	b.n	800285c <HAL_RCC_OscConfig+0x538>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x544>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d028      	beq.n	8002858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d121      	bne.n	8002858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11a      	bne.n	8002858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	3b01      	subs	r3, #1
 8002842:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0d0      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 020f 	bic.w	r2, r3, #15
 800289a:	4965      	ldr	r1, [pc, #404]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d040      	beq.n	8002990 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e073      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06b      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4936      	ldr	r1, [pc, #216]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe f8c6 	bl	8000af0 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe f8c2 	bl	8000af0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e053      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d210      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 020f 	bic.w	r2, r3, #15
 80029a6:	4922      	ldr	r1, [pc, #136]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f821 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x1cc>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1d0>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1d4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f822 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08014230 	.word	0x08014230
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d00d      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x40>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	f200 80bd 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a76:	e0b7      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a7a:	60bb      	str	r3, [r7, #8]
      break;
 8002a7c:	e0b7      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a80:	60bb      	str	r3, [r7, #8]
      break;
 8002a82:	e0b4      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a84:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d04d      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	ea02 0800 	and.w	r8, r2, r0
 8002ab2:	ea03 0901 	and.w	r9, r3, r1
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	4649      	mov	r1, r9
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	014b      	lsls	r3, r1, #5
 8002ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac8:	0142      	lsls	r2, r0, #5
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	ebb0 0008 	subs.w	r0, r0, r8
 8002ad2:	eb61 0109 	sbc.w	r1, r1, r9
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	018b      	lsls	r3, r1, #6
 8002ae0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ae4:	0182      	lsls	r2, r0, #6
 8002ae6:	1a12      	subs	r2, r2, r0
 8002ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8002aec:	f04f 0000 	mov.w	r0, #0
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	00d9      	lsls	r1, r3, #3
 8002af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002afa:	00d0      	lsls	r0, r2, #3
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	eb12 0208 	adds.w	r2, r2, r8
 8002b04:	eb43 0309 	adc.w	r3, r3, r9
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	0259      	lsls	r1, r3, #9
 8002b12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b16:	0250      	lsls	r0, r2, #9
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	f7fd fbc2 	bl	80002b0 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e04a      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	ea02 0400 	and.w	r4, r2, r0
 8002b4e:	ea03 0501 	and.w	r5, r3, r1
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	014b      	lsls	r3, r1, #5
 8002b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b64:	0142      	lsls	r2, r0, #5
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	1b00      	subs	r0, r0, r4
 8002b6c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	018b      	lsls	r3, r1, #6
 8002b7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b7e:	0182      	lsls	r2, r0, #6
 8002b80:	1a12      	subs	r2, r2, r0
 8002b82:	eb63 0301 	sbc.w	r3, r3, r1
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	00d9      	lsls	r1, r3, #3
 8002b90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b94:	00d0      	lsls	r0, r2, #3
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	1912      	adds	r2, r2, r4
 8002b9c:	eb45 0303 	adc.w	r3, r5, r3
 8002ba0:	f04f 0000 	mov.w	r0, #0
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	0299      	lsls	r1, r3, #10
 8002baa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bae:	0290      	lsls	r0, r2, #10
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	f7fd fb76 	bl	80002b0 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	60bb      	str	r3, [r7, #8]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bea:	60bb      	str	r3, [r7, #8]
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	68bb      	ldr	r3, [r7, #8]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	007a1200 	.word	0x007a1200

08002c08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000

08002c20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002c26:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c28:	22c0      	movs	r2, #192	; 0xc0
 8002c2a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002c2c:	4b9e      	ldr	r3, [pc, #632]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c2e:	22a8      	movs	r2, #168	; 0xa8
 8002c30:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002c32:	4b9d      	ldr	r3, [pc, #628]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 8002c38:	4b9b      	ldr	r3, [pc, #620]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c3a:	226e      	movs	r2, #110	; 0x6e
 8002c3c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002c3e:	4b9b      	ldr	r3, [pc, #620]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002c44:	4b99      	ldr	r3, [pc, #612]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002c4a:	4b98      	ldr	r3, [pc, #608]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002c4c:	22ff      	movs	r2, #255	; 0xff
 8002c4e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002c50:	4b96      	ldr	r3, [pc, #600]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002c56:	4b96      	ldr	r3, [pc, #600]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002c58:	22c0      	movs	r2, #192	; 0xc0
 8002c5a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002c5e:	22a8      	movs	r2, #168	; 0xa8
 8002c60:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002c62:	4b93      	ldr	r3, [pc, #588]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002c68:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2000      	movs	r0, #0
 8002c72:	f003 fdd3 	bl	800681c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002c76:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	061a      	lsls	r2, r3, #24
 8002c7c:	4b8a      	ldr	r3, [pc, #552]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	431a      	orrs	r2, r3
 8002c84:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	4a86      	ldr	r2, [pc, #536]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c8e:	78d2      	ldrb	r2, [r2, #3]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	061a      	lsls	r2, r3, #24
 8002c94:	4b84      	ldr	r3, [pc, #528]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	0619      	lsls	r1, r3, #24
 8002c9a:	4b83      	ldr	r3, [pc, #524]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	4319      	orrs	r1, r3
 8002ca2:	4b81      	ldr	r3, [pc, #516]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	497f      	ldr	r1, [pc, #508]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cac:	78c9      	ldrb	r1, [r1, #3]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0619      	lsls	r1, r3, #24
 8002cbe:	4b7a      	ldr	r3, [pc, #488]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	4319      	orrs	r1, r3
 8002cc6:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cc8:	789b      	ldrb	r3, [r3, #2]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4976      	ldr	r1, [pc, #472]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cd0:	78c9      	ldrb	r1, [r1, #3]
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	4b72      	ldr	r3, [pc, #456]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	0619      	lsls	r1, r3, #24
 8002ce2:	4b71      	ldr	r3, [pc, #452]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	4319      	orrs	r1, r3
 8002cea:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cec:	789b      	ldrb	r3, [r3, #2]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	496d      	ldr	r1, [pc, #436]	; (8002ea8 <MX_LWIP_Init+0x288>)
 8002cf4:	78c9      	ldrb	r1, [r1, #3]
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	0e1b      	lsrs	r3, r3, #24
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	4a6d      	ldr	r2, [pc, #436]	; (8002eb4 <MX_LWIP_Init+0x294>)
 8002cfe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	061a      	lsls	r2, r3, #24
 8002d06:	4b69      	ldr	r3, [pc, #420]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	4313      	orrs	r3, r2
 8002d16:	4a65      	ldr	r2, [pc, #404]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d18:	78d2      	ldrb	r2, [r2, #3]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	061a      	lsls	r2, r3, #24
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0619      	lsls	r1, r3, #24
 8002d24:	4b61      	ldr	r3, [pc, #388]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	4319      	orrs	r1, r3
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d2e:	789b      	ldrb	r3, [r3, #2]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	430b      	orrs	r3, r1
 8002d34:	495d      	ldr	r1, [pc, #372]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d36:	78c9      	ldrb	r1, [r1, #3]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d40:	431a      	orrs	r2, r3
 8002d42:	4b5a      	ldr	r3, [pc, #360]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0619      	lsls	r1, r3, #24
 8002d48:	4b58      	ldr	r3, [pc, #352]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	4319      	orrs	r1, r3
 8002d50:	4b56      	ldr	r3, [pc, #344]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d52:	789b      	ldrb	r3, [r3, #2]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4954      	ldr	r1, [pc, #336]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d5a:	78c9      	ldrb	r1, [r1, #3]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d64:	431a      	orrs	r2, r3
 8002d66:	4b51      	ldr	r3, [pc, #324]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	0619      	lsls	r1, r3, #24
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	4319      	orrs	r1, r3
 8002d74:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d76:	789b      	ldrb	r3, [r3, #2]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	494b      	ldr	r1, [pc, #300]	; (8002eac <MX_LWIP_Init+0x28c>)
 8002d7e:	78c9      	ldrb	r1, [r1, #3]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	0e1b      	lsrs	r3, r3, #24
 8002d84:	4313      	orrs	r3, r2
 8002d86:	4a4c      	ldr	r2, [pc, #304]	; (8002eb8 <MX_LWIP_Init+0x298>)
 8002d88:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	061a      	lsls	r2, r3, #24
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	431a      	orrs	r2, r3
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002d9a:	789b      	ldrb	r3, [r3, #2]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002da2:	78d2      	ldrb	r2, [r2, #3]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	061a      	lsls	r2, r3, #24
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	0619      	lsls	r1, r3, #24
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002db0:	785b      	ldrb	r3, [r3, #1]
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	4319      	orrs	r1, r3
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002db8:	789b      	ldrb	r3, [r3, #2]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	493c      	ldr	r1, [pc, #240]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002dc0:	78c9      	ldrb	r1, [r1, #3]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	0619      	lsls	r1, r3, #24
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	4319      	orrs	r1, r3
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	430b      	orrs	r3, r1
 8002de2:	4933      	ldr	r1, [pc, #204]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002de4:	78c9      	ldrb	r1, [r1, #3]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002dee:	431a      	orrs	r2, r3
 8002df0:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	0619      	lsls	r1, r3, #24
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	4319      	orrs	r1, r3
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002e00:	789b      	ldrb	r3, [r3, #2]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	430b      	orrs	r3, r1
 8002e06:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <MX_LWIP_Init+0x290>)
 8002e08:	78c9      	ldrb	r1, [r1, #3]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	0e1b      	lsrs	r3, r3, #24
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <MX_LWIP_Init+0x29c>)
 8002e12:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <MX_LWIP_Init+0x2a0>)
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <MX_LWIP_Init+0x2a4>)
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <MX_LWIP_Init+0x29c>)
 8002e22:	4a25      	ldr	r2, [pc, #148]	; (8002eb8 <MX_LWIP_Init+0x298>)
 8002e24:	4923      	ldr	r1, [pc, #140]	; (8002eb4 <MX_LWIP_Init+0x294>)
 8002e26:	4828      	ldr	r0, [pc, #160]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e28:	f004 fa7c 	bl	8007324 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002e2c:	4826      	ldr	r0, [pc, #152]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e2e:	f004 fc2b 	bl	8007688 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002e44:	4820      	ldr	r0, [pc, #128]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e46:	f004 fc2f 	bl	80076a8 <netif_set_up>
 8002e4a:	e002      	b.n	8002e52 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002e4c:	481e      	ldr	r0, [pc, #120]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e4e:	f004 fc97 	bl	8007780 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002e52:	491e      	ldr	r1, [pc, #120]	; (8002ecc <MX_LWIP_Init+0x2ac>)
 8002e54:	481c      	ldr	r0, [pc, #112]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e56:	f004 fd29 	bl	80078ac <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd7f 	bl	800396c <osSemaphoreCreate>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <MX_LWIP_Init+0x2b0>)
 8002e72:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_LWIP_Init+0x2b4>)
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <MX_LWIP_Init+0x2a8>)
 8002e78:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_LWIP_Init+0x2b0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <MX_LWIP_Init+0x2b4>)
 8002e80:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <MX_LWIP_Init+0x2b8>)
 8002e84:	1d3c      	adds	r4, r7, #4
 8002e86:	461d      	mov	r5, r3
 8002e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	490f      	ldr	r1, [pc, #60]	; (8002ed4 <MX_LWIP_Init+0x2b4>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fc6a 	bl	8003772 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20004230 	.word	0x20004230
 8002eac:	2000422c 	.word	0x2000422c
 8002eb0:	200041f0 	.word	0x200041f0
 8002eb4:	20004228 	.word	0x20004228
 8002eb8:	20004234 	.word	0x20004234
 8002ebc:	20004238 	.word	0x20004238
 8002ec0:	08006759 	.word	0x08006759
 8002ec4:	08003501 	.word	0x08003501
 8002ec8:	200041f4 	.word	0x200041f4
 8002ecc:	080035e5 	.word	0x080035e5
 8002ed0:	200002f4 	.word	0x200002f4
 8002ed4:	200041e8 	.word	0x200041e8
 8002ed8:	0801170c 	.word	0x0801170c

08002edc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a4e      	ldr	r2, [pc, #312]	; (8003034 <HAL_ETH_MspInit+0x158>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	f040 8096 	bne.w	800302c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0c:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4a46      	ldr	r2, [pc, #280]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f22:	6313      	str	r3, [r2, #48]	; 0x30
 8002f24:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	4a3a      	ldr	r2, [pc, #232]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6313      	str	r3, [r2, #48]	; 0x30
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a34      	ldr	r2, [pc, #208]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	6313      	str	r3, [r2, #48]	; 0x30
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_ETH_MspInit+0x15c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fa8:	2332      	movs	r3, #50	; 0x32
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fb8:	230b      	movs	r3, #11
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	481e      	ldr	r0, [pc, #120]	; (800303c <HAL_ETH_MspInit+0x160>)
 8002fc4:	f7fe ffb2 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002fc8:	2386      	movs	r3, #134	; 0x86
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fd8:	230b      	movs	r3, #11
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4817      	ldr	r0, [pc, #92]	; (8003040 <HAL_ETH_MspInit+0x164>)
 8002fe4:	f7fe ffa2 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ffa:	230b      	movs	r3, #11
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003002:	4619      	mov	r1, r3
 8003004:	480f      	ldr	r0, [pc, #60]	; (8003044 <HAL_ETH_MspInit+0x168>)
 8003006:	f7fe ff91 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800300a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800301c:	230b      	movs	r3, #11
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003024:	4619      	mov	r1, r3
 8003026:	4808      	ldr	r0, [pc, #32]	; (8003048 <HAL_ETH_MspInit+0x16c>)
 8003028:	f7fe ff80 	bl	8001f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800302c:	bf00      	nop
 800302e:	3738      	adds	r7, #56	; 0x38
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40028000 	.word	0x40028000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020800 	.word	0x40020800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40021800 	.word	0x40021800

0800304c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800304c:	b5b0      	push	{r4, r5, r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <low_level_init+0x190>)
 800305a:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <low_level_init+0x194>)
 800305c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <low_level_init+0x190>)
 8003060:	2201      	movs	r2, #1
 8003062:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <low_level_init+0x190>)
 8003066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800306a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800306c:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <low_level_init+0x190>)
 800306e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003072:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <low_level_init+0x190>)
 8003076:	2200      	movs	r2, #0
 8003078:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003086:	23e1      	movs	r3, #225	; 0xe1
 8003088:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800309e:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <low_level_init+0x190>)
 80030a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030a4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80030a6:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <low_level_init+0x190>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <low_level_init+0x190>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80030b2:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <low_level_init+0x190>)
 80030b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030b8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80030ba:	4848      	ldr	r0, [pc, #288]	; (80031dc <low_level_init+0x190>)
 80030bc:	f7fd fe2e 	bl	8000d1c <HAL_ETH_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80030c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80030e0:	2304      	movs	r3, #4
 80030e2:	4a40      	ldr	r2, [pc, #256]	; (80031e4 <low_level_init+0x198>)
 80030e4:	4940      	ldr	r1, [pc, #256]	; (80031e8 <low_level_init+0x19c>)
 80030e6:	483d      	ldr	r0, [pc, #244]	; (80031dc <low_level_init+0x190>)
 80030e8:	f7fd ffb2 	bl	8001050 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80030ec:	2304      	movs	r3, #4
 80030ee:	4a3f      	ldr	r2, [pc, #252]	; (80031ec <low_level_init+0x1a0>)
 80030f0:	493f      	ldr	r1, [pc, #252]	; (80031f0 <low_level_init+0x1a4>)
 80030f2:	483a      	ldr	r0, [pc, #232]	; (80031dc <low_level_init+0x190>)
 80030f4:	f7fe f815 	bl	8001122 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2206      	movs	r2, #6
 80030fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <low_level_init+0x190>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800310c:	4b33      	ldr	r3, [pc, #204]	; (80031dc <low_level_init+0x190>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	785a      	ldrb	r2, [r3, #1]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <low_level_init+0x190>)
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	789a      	ldrb	r2, [r3, #2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <low_level_init+0x190>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	78da      	ldrb	r2, [r3, #3]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <low_level_init+0x190>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	791a      	ldrb	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <low_level_init+0x190>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	795a      	ldrb	r2, [r3, #5]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800314e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003156:	f043 030a 	orr.w	r3, r3, #10
 800315a:	b2da      	uxtb	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800316a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fbfb 	bl	800396c <osSemaphoreCreate>
 8003176:	4603      	mov	r3, r0
 8003178:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <low_level_init+0x1a8>)
 800317a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <low_level_init+0x1ac>)
 800317e:	f107 040c 	add.w	r4, r7, #12
 8003182:	461d      	mov	r5, r3
 8003184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800318c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 faeb 	bl	8003772 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800319c:	480f      	ldr	r0, [pc, #60]	; (80031dc <low_level_init+0x190>)
 800319e:	f7fe fa6d 	bl	800167c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80031a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031a6:	461a      	mov	r2, r3
 80031a8:	211d      	movs	r1, #29
 80031aa:	480c      	ldr	r0, [pc, #48]	; (80031dc <low_level_init+0x190>)
 80031ac:	f7fe f998 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	f043 030b 	orr.w	r3, r3, #11
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	461a      	mov	r2, r3
 80031bc:	211d      	movs	r1, #29
 80031be:	4807      	ldr	r0, [pc, #28]	; (80031dc <low_level_init+0x190>)
 80031c0:	f7fe f9f6 	bl	80015b0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80031c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031c8:	461a      	mov	r2, r3
 80031ca:	211d      	movs	r1, #29
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <low_level_init+0x190>)
 80031ce:	f7fe f987 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80031d2:	bf00      	nop
 80031d4:	3740      	adds	r7, #64	; 0x40
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
 80031da:	bf00      	nop
 80031dc:	20005b0c 	.word	0x20005b0c
 80031e0:	40028000 	.word	0x40028000
 80031e4:	20005b54 	.word	0x20005b54
 80031e8:	2000423c 	.word	0x2000423c
 80031ec:	200042bc 	.word	0x200042bc
 80031f0:	20005a8c 	.word	0x20005a8c
 80031f4:	200002f8 	.word	0x200002f8
 80031f8:	08011730 	.word	0x08011730

080031fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <low_level_output+0x138>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800321e:	4b45      	ldr	r3, [pc, #276]	; (8003334 <low_level_output+0x138>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	e05a      	b.n	80032e4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da03      	bge.n	800323e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003236:	23f8      	movs	r3, #248	; 0xf8
 8003238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800323c:	e05c      	b.n	80032f8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	895b      	ldrh	r3, [r3, #10]
 8003242:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003248:	e02f      	b.n	80032aa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	18d0      	adds	r0, r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	18d1      	adds	r1, r2, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	461a      	mov	r2, r3
 8003262:	f00d f9ff 	bl	8010664 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da03      	bge.n	800327c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003274:	23f8      	movs	r3, #248	; 0xf8
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800327a:	e03d      	b.n	80032f8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800328c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003298:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80032a4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d8c8      	bhi.n	800324a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	18d0      	adds	r0, r2, r3
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4413      	add	r3, r2
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f00d f9cb 	bl	8010664 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1a1      	bne.n	800322e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	4811      	ldr	r0, [pc, #68]	; (8003334 <low_level_output+0x138>)
 80032ee:	f7fd ff85 	bl	80011fc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <low_level_output+0x138>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003300:	4413      	add	r3, r2
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <low_level_output+0x138>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f241 0314 	movw	r3, #4116	; 0x1014
 8003314:	4413      	add	r3, r2
 8003316:	2220      	movs	r2, #32
 8003318:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <low_level_output+0x138>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003322:	4413      	add	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003328:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800332c:	4618      	mov	r0, r3
 800332e:	3728      	adds	r7, #40	; 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20005b0c 	.word	0x20005b0c

08003338 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800335c:	484f      	ldr	r0, [pc, #316]	; (800349c <low_level_input+0x164>)
 800335e:	f7fe f837 	bl	80013d0 <HAL_ETH_GetReceivedFrame_IT>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <low_level_input+0x34>

    return NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	e092      	b.n	8003492 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800336c:	4b4b      	ldr	r3, [pc, #300]	; (800349c <low_level_input+0x164>)
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <low_level_input+0x164>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003384:	4619      	mov	r1, r3
 8003386:	2000      	movs	r0, #0
 8003388:	f004 fb5a 	bl	8007a40 <pbuf_alloc>
 800338c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d04b      	beq.n	800342c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <low_level_input+0x164>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a2:	e040      	b.n	8003426 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	895b      	ldrh	r3, [r3, #10]
 80033a8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80033ae:	e021      	b.n	80033f4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	18d0      	adds	r0, r2, r3
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	18d1      	adds	r1, r2, r3
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	461a      	mov	r2, r3
 80033c8:	f00d f94c 	bl	8010664 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	4413      	add	r3, r2
 80033de:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80033e2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80033ee:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033fe:	4293      	cmp	r3, r2
 8003400:	d8d6      	bhi.n	80033b0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	18d0      	adds	r0, r2, r3
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4619      	mov	r1, r3
 8003414:	f00d f926 	bl	8010664 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1bb      	bne.n	80033a4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <low_level_input+0x164>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e00b      	b.n	8003450 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3301      	adds	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <low_level_input+0x164>)
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d3ee      	bcc.n	8003438 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <low_level_input+0x164>)
 800345c:	2200      	movs	r2, #0
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <low_level_input+0x164>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f241 0314 	movw	r3, #4116	; 0x1014
 8003468:	4413      	add	r3, r2
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <low_level_input+0x164>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	f241 0314 	movw	r3, #4116	; 0x1014
 800347c:	4413      	add	r3, r2
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <low_level_input+0x164>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f241 0308 	movw	r3, #4104	; 0x1008
 800348a:	4413      	add	r3, r2
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003492:	4618      	mov	r0, r3
 8003494:	3730      	adds	r7, #48	; 0x30
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20005b0c 	.word	0x20005b0c

080034a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <ethernetif_input+0x58>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa8b 	bl	80039d0 <osSemaphoreWait>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f5      	bne.n	80034ac <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80034c0:	480e      	ldr	r0, [pc, #56]	; (80034fc <ethernetif_input+0x5c>)
 80034c2:	f00d f83d 	bl	8010540 <sys_mutex_lock>
        p = low_level_input( netif );
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff36 	bl	8003338 <low_level_input>
 80034cc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	4798      	blx	r3
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f004 fd8f 	bl	8008008 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80034ea:	4804      	ldr	r0, [pc, #16]	; (80034fc <ethernetif_input+0x5c>)
 80034ec:	f00d f837 	bl	801055e <sys_mutex_unlock>
      } while(p!=NULL);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e4      	bne.n	80034c0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80034f6:	e7d9      	b.n	80034ac <ethernetif_input+0xc>
 80034f8:	200002f8 	.word	0x200002f8
 80034fc:	20007324 	.word	0x20007324

08003500 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <ethernetif_init+0x1c>
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <ethernetif_init+0x48>)
 8003510:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003514:	490d      	ldr	r1, [pc, #52]	; (800354c <ethernetif_init+0x4c>)
 8003516:	480e      	ldr	r0, [pc, #56]	; (8003550 <ethernetif_init+0x50>)
 8003518:	f00d f8ba 	bl	8010690 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2273      	movs	r2, #115	; 0x73
 8003520:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2274      	movs	r2, #116	; 0x74
 8003528:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <ethernetif_init+0x54>)
 8003530:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <ethernetif_init+0x58>)
 8003536:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff fd87 	bl	800304c <low_level_init>

  return ERR_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	0801174c 	.word	0x0801174c
 800354c:	08011768 	.word	0x08011768
 8003550:	08011778 	.word	0x08011778
 8003554:	0800e6ed 	.word	0x0800e6ed
 8003558:	080031fd 	.word	0x080031fd

0800355c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003560:	f7fd fac6 	bl	8000af0 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	461a      	mov	r2, r3
 8003582:	2101      	movs	r1, #1
 8003584:	4816      	ldr	r0, [pc, #88]	; (80035e0 <ethernetif_set_link+0x74>)
 8003586:	f7fd ffab 	bl	80014e0 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <ethernetif_set_link+0x48>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f004 f919 	bl	80077e4 <netif_set_link_up>
 80035b2:	e011      	b.n	80035d8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <ethernetif_set_link+0x6c>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f93a 	bl	800784c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80035d8:	20c8      	movs	r0, #200	; 0xc8
 80035da:	f000 f916 	bl	800380a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80035de:	e7cd      	b.n	800357c <ethernetif_set_link+0x10>
 80035e0:	20005b0c 	.word	0x20005b0c

080035e4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05d      	beq.n	80036c2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03f      	beq.n	800368e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800360e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003612:	2100      	movs	r1, #0
 8003614:	4830      	ldr	r0, [pc, #192]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003616:	f7fd ffcb 	bl	80015b0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800361a:	f7fd fa69 	bl	8000af0 <HAL_GetTick>
 800361e:	4603      	mov	r3, r0
 8003620:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	461a      	mov	r2, r3
 8003628:	2101      	movs	r1, #1
 800362a:	482b      	ldr	r0, [pc, #172]	; (80036d8 <ethernetif_update_config+0xf4>)
 800362c:	f7fd ff58 	bl	80014e0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003630:	f7fd fa5e 	bl	8000af0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800363e:	d828      	bhi.n	8003692 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0eb      	beq.n	8003622 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	461a      	mov	r2, r3
 8003650:	2110      	movs	r1, #16
 8003652:	4821      	ldr	r0, [pc, #132]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003654:	f7fd ff44 	bl	80014e0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	e002      	b.n	8003672 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <ethernetif_update_config+0xf4>)
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <ethernetif_update_config+0xf4>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	e016      	b.n	80036b2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	e011      	b.n	80036b2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <ethernetif_update_config+0xb0>
          goto error;
 8003692:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <ethernetif_update_config+0xf4>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	08db      	lsrs	r3, r3, #3
 800369a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <ethernetif_update_config+0xf4>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	2100      	movs	r1, #0
 80036ac:	480a      	ldr	r0, [pc, #40]	; (80036d8 <ethernetif_update_config+0xf4>)
 80036ae:	f7fd ff7f 	bl	80015b0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80036b2:	2100      	movs	r1, #0
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <ethernetif_update_config+0xf4>)
 80036b6:	f7fe f83f 	bl	8001738 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <ethernetif_update_config+0xf4>)
 80036bc:	f7fd ffde 	bl	800167c <HAL_ETH_Start>
 80036c0:	e002      	b.n	80036c8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <ethernetif_update_config+0xf4>)
 80036c4:	f7fe f809 	bl	80016da <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f807 	bl	80036dc <ethernetif_notify_conn_changed>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20005b0c 	.word	0x20005b0c

080036dc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003702:	2b84      	cmp	r3, #132	; 0x84
 8003704:	d005      	beq.n	8003712 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	3303      	adds	r3, #3
 8003710:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003726:	f3ef 8305 	mrs	r3, IPSR
 800372a:	607b      	str	r3, [r7, #4]
  return(result);
 800372c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003748:	f001 fc7c 	bl	8005044 <vTaskStartScheduler>
  
  return osOK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	bd80      	pop	{r7, pc}

08003752 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003756:	f7ff ffe3 	bl	8003720 <inHandlerMode>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003760:	f001 fd90 	bl	8005284 <xTaskGetTickCountFromISR>
 8003764:	4603      	mov	r3, r0
 8003766:	e002      	b.n	800376e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003768:	f001 fd7c 	bl	8005264 <xTaskGetTickCount>
 800376c:	4603      	mov	r3, r0
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}

08003772 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003774:	b089      	sub	sp, #36	; 0x24
 8003776:	af04      	add	r7, sp, #16
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <osThreadCreate+0x54>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01c      	beq.n	80037c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685c      	ldr	r4, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681d      	ldr	r5, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691e      	ldr	r6, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ffa6 	bl	80036f0 <makeFreeRtosPriority>
 80037a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ae:	9202      	str	r2, [sp, #8]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	9100      	str	r1, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4632      	mov	r2, r6
 80037b8:	4629      	mov	r1, r5
 80037ba:	4620      	mov	r0, r4
 80037bc:	f001 fa70 	bl	8004ca0 <xTaskCreateStatic>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e01c      	b.n	8003800 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685c      	ldr	r4, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d2:	b29e      	uxth	r6, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff88 	bl	80036f0 <makeFreeRtosPriority>
 80037e0:	4602      	mov	r2, r0
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4632      	mov	r2, r6
 80037ee:	4629      	mov	r1, r5
 80037f0:	4620      	mov	r0, r4
 80037f2:	f001 fab8 	bl	8004d66 <xTaskCreate>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800380a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <osDelay+0x16>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	e000      	b.n	8003822 <osDelay+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fbd8 	bl	8004fd8 <vTaskDelay>
  
  return osOK;
 8003828:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4619      	mov	r1, r3
 8003848:	2001      	movs	r0, #1
 800384a:	f000 fc2a 	bl	80040a2 <xQueueCreateMutexStatic>
 800384e:	4603      	mov	r3, r0
 8003850:	e003      	b.n	800385a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003852:	2001      	movs	r0, #1
 8003854:	f000 fc0d 	bl	8004072 <xQueueCreateMutex>
 8003858:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <osMutexWait+0x18>
    return osErrorParameter;
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	e03a      	b.n	80038f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e009      	b.n	80038a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <osMutexWait+0x40>
      ticks = 1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80038a4:	f7ff ff3c 	bl	8003720 <inHandlerMode>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	461a      	mov	r2, r3
 80038b4:	2100      	movs	r1, #0
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f001 f844 	bl	8004944 <xQueueReceiveFromISR>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <osMutexWait+0x62>
      return osErrorOS;
 80038c2:	23ff      	movs	r3, #255	; 0xff
 80038c4:	e015      	b.n	80038f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d011      	beq.n	80038f0 <osMutexWait+0x8c>
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <osMutexWait+0x98>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	e008      	b.n	80038f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 ff1b 	bl	800471c <xQueueSemaphoreTake>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d001      	beq.n	80038f0 <osMutexWait+0x8c>
    return osErrorOS;
 80038ec:	23ff      	movs	r3, #255	; 0xff
 80038ee:	e000      	b.n	80038f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003910:	f7ff ff06 	bl	8003720 <inHandlerMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fd7f 	bl	8004424 <xQueueGiveFromISR>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d001      	beq.n	8003930 <osMutexRelease+0x30>
      return osErrorOS;
 800392c:	23ff      	movs	r3, #255	; 0xff
 800392e:	e017      	b.n	8003960 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d013      	beq.n	800395e <osMutexRelease+0x5e>
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <osMutexRelease+0x68>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	e00a      	b.n	800395e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003948:	2300      	movs	r3, #0
 800394a:	2200      	movs	r2, #0
 800394c:	2100      	movs	r1, #0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fbc2 	bl	80040d8 <xQueueGenericSend>
 8003954:	4603      	mov	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800395a:	23ff      	movs	r3, #255	; 0xff
 800395c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00f      	beq.n	800399e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10a      	bne.n	800399a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2203      	movs	r2, #3
 800398a:	9200      	str	r2, [sp, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2001      	movs	r0, #1
 8003992:	f000 fa71 	bl	8003e78 <xQueueGenericCreateStatic>
 8003996:	4603      	mov	r3, r0
 8003998:	e016      	b.n	80039c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	e014      	b.n	80039c8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d110      	bne.n	80039c6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80039a4:	2203      	movs	r2, #3
 80039a6:	2100      	movs	r1, #0
 80039a8:	2001      	movs	r0, #1
 80039aa:	f000 fae7 	bl	8003f7c <xQueueGenericCreate>
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <osSemaphoreCreate+0x56>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fb8b 	bl	80040d8 <xQueueGenericSend>
      return sema;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	e000      	b.n	80039c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80039c6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	e03a      	b.n	8003a5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d103      	bne.n	80039fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80039f4:	f04f 33ff 	mov.w	r3, #4294967295
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e009      	b.n	8003a10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <osSemaphoreWait+0x40>
      ticks = 1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a10:	f7ff fe86 	bl	8003720 <inHandlerMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2100      	movs	r1, #0
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 ff8e 	bl	8004944 <xQueueReceiveFromISR>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003a2e:	23ff      	movs	r3, #255	; 0xff
 8003a30:	e015      	b.n	8003a5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d011      	beq.n	8003a5c <osSemaphoreWait+0x8c>
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <osSemaphoreWait+0x98>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	e008      	b.n	8003a5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fe65 	bl	800471c <xQueueSemaphoreTake>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003a58:	23ff      	movs	r3, #255	; 0xff
 8003a5a:	e000      	b.n	8003a5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <osMessageCreate+0x36>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2400      	movs	r4, #0
 8003a98:	9400      	str	r4, [sp, #0]
 8003a9a:	f000 f9ed 	bl	8003e78 <xQueueGenericCreateStatic>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	e008      	b.n	8003ab4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4619      	mov	r1, r3
 8003aae:	f000 fa65 	bl	8003f7c <xQueueGenericCreate>
 8003ab2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}

08003abc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <osMessagePut+0x1e>
    ticks = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003ada:	f7ff fe21 	bl	8003720 <inHandlerMode>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d018      	beq.n	8003b16 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003ae4:	f107 0210 	add.w	r2, r7, #16
 8003ae8:	f107 0108 	add.w	r1, r7, #8
 8003aec:	2300      	movs	r3, #0
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fbf8 	bl	80042e4 <xQueueGenericSendFromISR>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <osMessagePut+0x42>
      return osErrorOS;
 8003afa:	23ff      	movs	r3, #255	; 0xff
 8003afc:	e018      	b.n	8003b30 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d014      	beq.n	8003b2e <osMessagePut+0x72>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <osMessagePut+0x7c>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	e00b      	b.n	8003b2e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003b16:	f107 0108 	add.w	r1, r7, #8
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fada 	bl	80040d8 <xQueueGenericSend>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <osMessagePut+0x72>
      return osErrorOS;
 8003b2a:	23ff      	movs	r3, #255	; 0xff
 8003b2c:	e000      	b.n	8003b30 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b08b      	sub	sp, #44	; 0x2c
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	617b      	str	r3, [r7, #20]
    return event;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	461c      	mov	r4, r3
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b6a:	e054      	b.n	8003c16 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d103      	bne.n	8003b84 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	e009      	b.n	8003b98 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <osMessageGet+0x5c>
      ticks = 1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003b98:	f7ff fdc2 	bl	8003720 <inHandlerMode>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01c      	beq.n	8003bdc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003ba2:	f107 0220 	add.w	r2, r7, #32
 8003ba6:	f107 0314 	add.w	r3, r7, #20
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	68b8      	ldr	r0, [r7, #8]
 8003bb0:	f000 fec8 	bl	8004944 <xQueueReceiveFromISR>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003bba:	2310      	movs	r3, #16
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e001      	b.n	8003bc4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01d      	beq.n	8003c06 <osMessageGet+0xca>
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <osMessageGet+0xe4>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e014      	b.n	8003c06 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	3304      	adds	r3, #4
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4619      	mov	r1, r3
 8003be6:	68b8      	ldr	r0, [r7, #8]
 8003be8:	f000 fcb2 	bl	8004550 <xQueueReceive>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e006      	b.n	8003c06 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <osMessageGet+0xc6>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <osMessageGet+0xc8>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	461c      	mov	r4, r3
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	372c      	adds	r7, #44	; 0x2c
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003c28:	f001 fe40 	bl	80058ac <xTaskGetSchedulerState>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003c32:	f002 fa21 	bl	8006078 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 0208 	add.w	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0208 	add.w	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f103 0208 	add.w	r2, r3, #8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d103      	bne.n	8003cfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e00c      	b.n	8003d16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	e002      	b.n	8003d0a <vListInsert+0x2e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d2f6      	bcs.n	8003d04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6852      	ldr	r2, [r2, #4]
 8003d6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d103      	bne.n	8003d82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10c      	bne.n	8003dd2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	b672      	cpsid	i
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	b662      	cpsie	i
 8003dcc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003dd2:	f002 f8bb 	bl	8005f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	22ff      	movs	r2, #255	; 0xff
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d114      	bne.n	8003e52 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01a      	beq.n	8003e66 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3310      	adds	r3, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fb75 	bl	8005524 <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <xQueueGenericReset+0xd0>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e009      	b.n	8003e66 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff feef 	bl	8003c3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3324      	adds	r3, #36	; 0x24
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff feea 	bl	8003c3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e66:	f002 f8a5 	bl	8005fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10c      	bne.n	8003ea6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	b672      	cpsid	i
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	b662      	cpsie	i
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10c      	bne.n	8003ec6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	b672      	cpsid	i
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	b662      	cpsie	i
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <xQueueGenericCreateStatic+0x5a>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <xQueueGenericCreateStatic+0x5e>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericCreateStatic+0x60>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10c      	bne.n	8003ef6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	b672      	cpsid	i
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	b662      	cpsie	i
 8003ef0:	623b      	str	r3, [r7, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <xQueueGenericCreateStatic+0x8a>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <xQueueGenericCreateStatic+0x8e>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueGenericCreateStatic+0x90>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10c      	bne.n	8003f26 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	b672      	cpsid	i
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	b662      	cpsie	i
 8003f20:	61fb      	str	r3, [r7, #28]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f26:	2348      	movs	r3, #72	; 0x48
 8003f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b48      	cmp	r3, #72	; 0x48
 8003f2e:	d00c      	beq.n	8003f4a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	b672      	cpsid	i
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	b662      	cpsie	i
 8003f44:	61bb      	str	r3, [r7, #24]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f847 	bl	8004000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3730      	adds	r7, #48	; 0x30
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <xQueueGenericCreate+0x2e>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	b672      	cpsid	i
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	b662      	cpsie	i
 8003fa4:	613b      	str	r3, [r7, #16]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e004      	b.n	8003fc0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3348      	adds	r3, #72	; 0x48
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 f8ed 	bl	80061a4 <pvPortMalloc>
 8003fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	3348      	adds	r3, #72	; 0x48
 8003fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fe4:	79fa      	ldrb	r2, [r7, #7]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f805 	bl	8004000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e002      	b.n	8004022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800402e:	2101      	movs	r1, #1
 8004030:	69b8      	ldr	r0, [r7, #24]
 8004032:	f7ff feb7 	bl	8003da4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800405e:	2300      	movs	r3, #0
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f837 	bl	80040d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	461a      	mov	r2, r3
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff76 	bl	8003f7c <xQueueGenericCreate>
 8004090:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff ffd3 	bl	800403e <prvInitialiseMutex>

		return xNewQueue;
 8004098:	68fb      	ldr	r3, [r7, #12]
	}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	4603      	mov	r3, r0
 80040aa:	6039      	str	r1, [r7, #0]
 80040ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7ff fed9 	bl	8003e78 <xQueueGenericCreateStatic>
 80040c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ffb8 	bl	800403e <prvInitialiseMutex>

		return xNewQueue;
 80040ce:	68fb      	ldr	r3, [r7, #12]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08e      	sub	sp, #56	; 0x38
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040e6:	2300      	movs	r3, #0
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10c      	bne.n	800410e <xQueueGenericSend+0x36>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	b672      	cpsid	i
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	b662      	cpsie	i
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <xQueueGenericSend+0x44>
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <xQueueGenericSend+0x48>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <xQueueGenericSend+0x4a>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <xQueueGenericSend+0x68>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	b672      	cpsid	i
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	b662      	cpsie	i
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d103      	bne.n	800414e <xQueueGenericSend+0x76>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <xQueueGenericSend+0x7a>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <xQueueGenericSend+0x7c>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10c      	bne.n	8004172 <xQueueGenericSend+0x9a>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	b672      	cpsid	i
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	b662      	cpsie	i
 800416c:	623b      	str	r3, [r7, #32]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004172:	f001 fb9b 	bl	80058ac <xTaskGetSchedulerState>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <xQueueGenericSend+0xaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <xQueueGenericSend+0xae>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <xQueueGenericSend+0xb0>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10c      	bne.n	80041a6 <xQueueGenericSend+0xce>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	b672      	cpsid	i
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	b662      	cpsie	i
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041a6:	f001 fed1 	bl	8005f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <xQueueGenericSend+0xe4>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d129      	bne.n	8004210 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c2:	f000 fc5d 	bl	8004a80 <prvCopyDataToQueue>
 80041c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	3324      	adds	r3, #36	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 f9a5 	bl	8005524 <xTaskRemoveFromEventList>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041e0:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <xQueueGenericSend+0x208>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	e00a      	b.n	8004208 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <xQueueGenericSend+0x208>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004208:	f001 fed4 	bl	8005fb4 <vPortExitCritical>
				return pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	e063      	b.n	80042d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004216:	f001 fecd 	bl	8005fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800421a:	2300      	movs	r3, #0
 800421c:	e05c      	b.n	80042d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800421e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4618      	mov	r0, r3
 800422a:	f001 f9df 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800422e:	2301      	movs	r3, #1
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004232:	f001 febf 	bl	8005fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004236:	f000 ff69 	bl	800510c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800423a:	f001 fe87 	bl	8005f4c <vPortEnterCritical>
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004244:	b25b      	sxtb	r3, r3
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d103      	bne.n	8004254 <xQueueGenericSend+0x17c>
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425a:	b25b      	sxtb	r3, r3
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d103      	bne.n	800426a <xQueueGenericSend+0x192>
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800426a:	f001 fea3 	bl	8005fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800426e:	1d3a      	adds	r2, r7, #4
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f9ce 	bl	8005618 <xTaskCheckForTimeOut>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d124      	bne.n	80042cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004284:	f000 fcf4 	bl	8004c70 <prvIsQueueFull>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d018      	beq.n	80042c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	3310      	adds	r3, #16
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f001 f91e 	bl	80054d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800429c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429e:	f000 fc7f 	bl	8004ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042a2:	f000 ff41 	bl	8005128 <xTaskResumeAll>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f47f af7c 	bne.w	80041a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <xQueueGenericSend+0x208>)
 80042b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	e772      	b.n	80041a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c2:	f000 fc6d 	bl	8004ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042c6:	f000 ff2f 	bl	8005128 <xTaskResumeAll>
 80042ca:	e76c      	b.n	80041a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ce:	f000 fc67 	bl	8004ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042d2:	f000 ff29 	bl	8005128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3738      	adds	r7, #56	; 0x38
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10c      	bne.n	8004316 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	b672      	cpsid	i
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	b662      	cpsie	i
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <xQueueGenericSendFromISR+0x40>
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <xQueueGenericSendFromISR+0x44>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <xQueueGenericSendFromISR+0x46>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	b672      	cpsid	i
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	b662      	cpsie	i
 8004342:	623b      	str	r3, [r7, #32]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d103      	bne.n	8004356 <xQueueGenericSendFromISR+0x72>
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <xQueueGenericSendFromISR+0x76>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <xQueueGenericSendFromISR+0x78>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10c      	bne.n	800437a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	b672      	cpsid	i
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	b662      	cpsie	i
 8004374:	61fb      	str	r3, [r7, #28]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437a:	f001 fecf 	bl	800611c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800437e:	f3ef 8211 	mrs	r2, BASEPRI
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	b672      	cpsid	i
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	b662      	cpsie	i
 8004396:	61ba      	str	r2, [r7, #24]
 8004398:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800439a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <xQueueGenericSendFromISR+0xcc>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d12c      	bne.n	800440a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c0:	f000 fb5e 	bl	8004a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d112      	bne.n	80043f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	3324      	adds	r3, #36	; 0x24
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f8a2 	bl	8005524 <xTaskRemoveFromEventList>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00b      	beq.n	8004404 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043f8:	3301      	adds	r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004404:	2301      	movs	r3, #1
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004408:	e001      	b.n	800440e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004418:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800441c:	4618      	mov	r0, r3
 800441e:	3738      	adds	r7, #56	; 0x38
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	; 0x38
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10c      	bne.n	8004452 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	b672      	cpsid	i
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	b662      	cpsie	i
 800444c:	623b      	str	r3, [r7, #32]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <xQueueGiveFromISR+0x50>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	b672      	cpsid	i
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	b662      	cpsie	i
 800446e:	61fb      	str	r3, [r7, #28]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <xQueueGiveFromISR+0x60>
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <xQueueGiveFromISR+0x64>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <xQueueGiveFromISR+0x66>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	b672      	cpsid	i
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	b662      	cpsie	i
 80044a2:	61bb      	str	r3, [r7, #24]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a8:	f001 fe38 	bl	800611c <vPortValidateInterruptPriority>
	__asm volatile
 80044ac:	f3ef 8211 	mrs	r2, BASEPRI
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	b672      	cpsid	i
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	b662      	cpsie	i
 80044c4:	617a      	str	r2, [r7, #20]
 80044c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80044c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d8:	429a      	cmp	r2, r3
 80044da:	d22b      	bcs.n	8004534 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d112      	bne.n	800451e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d016      	beq.n	800452e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	3324      	adds	r3, #36	; 0x24
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f80d 	bl	8005524 <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e007      	b.n	800452e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800451e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004522:	3301      	adds	r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	b25a      	sxtb	r2, r3
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800452e:	2301      	movs	r3, #1
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	e001      	b.n	8004538 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004534:	2300      	movs	r3, #0
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f383 8811 	msr	BASEPRI, r3
}
 8004542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004546:	4618      	mov	r0, r3
 8004548:	3738      	adds	r7, #56	; 0x38
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	; 0x30
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <xQueueReceive+0x34>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	b672      	cpsid	i
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	b662      	cpsie	i
 800457e:	623b      	str	r3, [r7, #32]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <xQueueReceive+0x42>
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <xQueueReceive+0x46>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueReceive+0x48>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10c      	bne.n	80045b6 <xQueueReceive+0x66>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	b672      	cpsid	i
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	b662      	cpsie	i
 80045b0:	61fb      	str	r3, [r7, #28]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b6:	f001 f979 	bl	80058ac <xTaskGetSchedulerState>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xQueueReceive+0x76>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xQueueReceive+0x7a>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueReceive+0x7c>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10c      	bne.n	80045ea <xQueueReceive+0x9a>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	b672      	cpsid	i
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	b662      	cpsie	i
 80045e4:	61bb      	str	r3, [r7, #24]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ea:	f001 fcaf 	bl	8005f4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01f      	beq.n	800463a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 faa9 	bl	8004b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	3310      	adds	r3, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f000 ff84 	bl	8005524 <xTaskRemoveFromEventList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004622:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <xQueueReceive+0x1c8>)
 8004624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004632:	f001 fcbf 	bl	8005fb4 <vPortExitCritical>
				return pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	e069      	b.n	800470e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004640:	f001 fcb8 	bl	8005fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004644:	2300      	movs	r3, #0
 8004646:	e062      	b.n	800470e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ffca 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800465c:	f001 fcaa 	bl	8005fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004660:	f000 fd54 	bl	800510c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004664:	f001 fc72 	bl	8005f4c <vPortEnterCritical>
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800466e:	b25b      	sxtb	r3, r3
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d103      	bne.n	800467e <xQueueReceive+0x12e>
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004684:	b25b      	sxtb	r3, r3
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d103      	bne.n	8004694 <xQueueReceive+0x144>
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	f001 fc8e 	bl	8005fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004698:	1d3a      	adds	r2, r7, #4
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ffb9 	bl	8005618 <xTaskCheckForTimeOut>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d123      	bne.n	80046f4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f000 fac9 	bl	8004c44 <prvIsQueueEmpty>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	3324      	adds	r3, #36	; 0x24
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ff09 	bl	80054d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c8:	f000 fa6a 	bl	8004ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046cc:	f000 fd2c 	bl	8005128 <xTaskResumeAll>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d189      	bne.n	80045ea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <xQueueReceive+0x1c8>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	e780      	b.n	80045ea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ea:	f000 fa59 	bl	8004ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ee:	f000 fd1b 	bl	8005128 <xTaskResumeAll>
 80046f2:	e77a      	b.n	80045ea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f6:	f000 fa53 	bl	8004ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046fa:	f000 fd15 	bl	8005128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004700:	f000 faa0 	bl	8004c44 <prvIsQueueEmpty>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f af6f 	beq.w	80045ea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800470c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	b672      	cpsid	i
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	b662      	cpsie	i
 800474c:	623b      	str	r3, [r7, #32]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	b672      	cpsid	i
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	b662      	cpsie	i
 800476e:	61fb      	str	r3, [r7, #28]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004774:	f001 f89a 	bl	80058ac <xTaskGetSchedulerState>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <xQueueSemaphoreTake+0x68>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <xQueueSemaphoreTake+0x6c>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <xQueueSemaphoreTake+0x6e>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	b672      	cpsid	i
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	b662      	cpsie	i
 80047a2:	61bb      	str	r3, [r7, #24]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047a8:	f001 fbd0 	bl	8005f4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d024      	beq.n	8004802 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	1e5a      	subs	r2, r3, #1
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047c8:	f001 fa36 	bl	8005c38 <pvTaskIncrementMutexHeldCount>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00f      	beq.n	80047fa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	3310      	adds	r3, #16
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fea0 	bl	8005524 <xTaskRemoveFromEventList>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047ea:	4b55      	ldr	r3, [pc, #340]	; (8004940 <xQueueSemaphoreTake+0x224>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047fa:	f001 fbdb 	bl	8005fb4 <vPortExitCritical>
				return pdPASS;
 80047fe:	2301      	movs	r3, #1
 8004800:	e099      	b.n	8004936 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d113      	bne.n	8004830 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	617b      	str	r3, [r7, #20]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004828:	f001 fbc4 	bl	8005fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800482c:	2300      	movs	r3, #0
 800482e:	e082      	b.n	8004936 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004836:	f107 030c 	add.w	r3, r7, #12
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fed6 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004844:	f001 fbb6 	bl	8005fb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004848:	f000 fc60 	bl	800510c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484c:	f001 fb7e 	bl	8005f4c <vPortEnterCritical>
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004856:	b25b      	sxtb	r3, r3
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d103      	bne.n	8004866 <xQueueSemaphoreTake+0x14a>
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486c:	b25b      	sxtb	r3, r3
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d103      	bne.n	800487c <xQueueSemaphoreTake+0x160>
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487c:	f001 fb9a 	bl	8005fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004880:	463a      	mov	r2, r7
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fec5 	bl	8005618 <xTaskCheckForTimeOut>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d132      	bne.n	80048fa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004896:	f000 f9d5 	bl	8004c44 <prvIsQueueEmpty>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d026      	beq.n	80048ee <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80048a8:	f001 fb50 	bl	8005f4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f819 	bl	80058e8 <xTaskPriorityInherit>
 80048b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80048b8:	f001 fb7c 	bl	8005fb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe07 	bl	80054d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048cc:	f000 f968 	bl	8004ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048d0:	f000 fc2a 	bl	8005128 <xTaskResumeAll>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f47f af66 	bne.w	80047a8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <xQueueSemaphoreTake+0x224>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	e75c      	b.n	80047a8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048f0:	f000 f956 	bl	8004ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048f4:	f000 fc18 	bl	8005128 <xTaskResumeAll>
 80048f8:	e756      	b.n	80047a8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048fc:	f000 f950 	bl	8004ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004900:	f000 fc12 	bl	8005128 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004906:	f000 f99d 	bl	8004c44 <prvIsQueueEmpty>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f43f af4b 	beq.w	80047a8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004918:	f001 fb18 	bl	8005f4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800491c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800491e:	f000 f897 	bl	8004a50 <prvGetDisinheritPriorityAfterTimeout>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800492a:	4618      	mov	r0, r3
 800492c:	f001 f8e6 	bl	8005afc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004930:	f001 fb40 	bl	8005fb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004936:	4618      	mov	r0, r3
 8004938:	3738      	adds	r7, #56	; 0x38
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	; 0x38
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	b672      	cpsid	i
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	b662      	cpsie	i
 800496e:	623b      	str	r3, [r7, #32]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <xQueueReceiveFromISR+0x3e>
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueReceiveFromISR+0x42>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueReceiveFromISR+0x44>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	b672      	cpsid	i
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	b662      	cpsie	i
 80049a0:	61fb      	str	r3, [r7, #28]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049a6:	f001 fbb9 	bl	800611c <vPortValidateInterruptPriority>
	__asm volatile
 80049aa:	f3ef 8211 	mrs	r2, BASEPRI
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	61ba      	str	r2, [r7, #24]
 80049c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80049c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02f      	beq.n	8004a36 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e4:	f000 f8b6 	bl	8004b54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80049f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f8:	d112      	bne.n	8004a20 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	3310      	adds	r3, #16
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fd8c 	bl	8005524 <xTaskRemoveFromEventList>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00e      	beq.n	8004a30 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e007      	b.n	8004a30 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a24:	3301      	adds	r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	b25a      	sxtb	r2, r3
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a30:	2301      	movs	r3, #1
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	e001      	b.n	8004a3a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f383 8811 	msr	BASEPRI, r3
}
 8004a44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3738      	adds	r7, #56	; 0x38
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e001      	b.n	8004a72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a72:	68fb      	ldr	r3, [r7, #12]
	}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d14d      	bne.n	8004b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 ff9c 	bl	80059e8 <xTaskPriorityDisinherit>
 8004ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	e043      	b.n	8004b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d119      	bne.n	8004af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6858      	ldr	r0, [r3, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	f00b fdca 	bl	8010664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d32b      	bcc.n	8004b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	e026      	b.n	8004b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68d8      	ldr	r0, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	461a      	mov	r2, r3
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	f00b fdb0 	bl	8010664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d207      	bcs.n	8004b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	425b      	negs	r3, r3
 8004b2a:	441a      	add	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d105      	bne.n	8004b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b4a:	697b      	ldr	r3, [r7, #20]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d303      	bcc.n	8004b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68d9      	ldr	r1, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	461a      	mov	r2, r3
 8004b92:	6838      	ldr	r0, [r7, #0]
 8004b94:	f00b fd66 	bl	8010664 <memcpy>
	}
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ba8:	f001 f9d0 	bl	8005f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb4:	e011      	b.n	8004bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3324      	adds	r3, #36	; 0x24
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fcae 	bl	8005524 <xTaskRemoveFromEventList>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bce:	f000 fd89 	bl	80056e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dce9      	bgt.n	8004bb6 <prvUnlockQueue+0x16>
 8004be2:	e000      	b.n	8004be6 <prvUnlockQueue+0x46>
					break;
 8004be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	22ff      	movs	r2, #255	; 0xff
 8004bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bee:	f001 f9e1 	bl	8005fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bf2:	f001 f9ab 	bl	8005f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bfe:	e011      	b.n	8004c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fc89 	bl	8005524 <xTaskRemoveFromEventList>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c18:	f000 fd64 	bl	80056e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c1c:	7bbb      	ldrb	r3, [r7, #14]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	dce9      	bgt.n	8004c00 <prvUnlockQueue+0x60>
 8004c2c:	e000      	b.n	8004c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	22ff      	movs	r2, #255	; 0xff
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c38:	f001 f9bc 	bl	8005fb4 <vPortExitCritical>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c4c:	f001 f97e 	bl	8005f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e001      	b.n	8004c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c62:	f001 f9a7 	bl	8005fb4 <vPortExitCritical>

	return xReturn;
 8004c66:	68fb      	ldr	r3, [r7, #12]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c78:	f001 f968 	bl	8005f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d102      	bne.n	8004c8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e001      	b.n	8004c92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c92:	f001 f98f 	bl	8005fb4 <vPortExitCritical>

	return xReturn;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af04      	add	r7, sp, #16
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10c      	bne.n	8004cce <xTaskCreateStatic+0x2e>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	b672      	cpsid	i
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	b662      	cpsie	i
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <xTaskCreateStatic+0x4e>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	b672      	cpsid	i
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	b662      	cpsie	i
 8004ce8:	61fb      	str	r3, [r7, #28]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cee:	2354      	movs	r3, #84	; 0x54
 8004cf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b54      	cmp	r3, #84	; 0x54
 8004cf6:	d00c      	beq.n	8004d12 <xTaskCreateStatic+0x72>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	b672      	cpsid	i
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	b662      	cpsie	i
 8004d0c:	61bb      	str	r3, [r7, #24]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01e      	beq.n	8004d58 <xTaskCreateStatic+0xb8>
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d32:	2300      	movs	r3, #0
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f850 	bl	8004df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d52:	f000 f8d7 	bl	8004f04 <prvAddNewTaskToReadyList>
 8004d56:	e001      	b.n	8004d5c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d5c:	697b      	ldr	r3, [r7, #20]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08c      	sub	sp, #48	; 0x30
 8004d6a:	af04      	add	r7, sp, #16
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fa12 	bl	80061a4 <pvPortMalloc>
 8004d80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d88:	2054      	movs	r0, #84	; 0x54
 8004d8a:	f001 fa0b 	bl	80061a4 <pvPortMalloc>
 8004d8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d9c:	e005      	b.n	8004daa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f001 faca 	bl	8006338 <vPortFree>
 8004da4:	e001      	b.n	8004daa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d017      	beq.n	8004de0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	9302      	str	r3, [sp, #8]
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f80e 	bl	8004df0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dd4:	69f8      	ldr	r0, [r7, #28]
 8004dd6:	f000 f895 	bl	8004f04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e002      	b.n	8004de6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004de6:	69bb      	ldr	r3, [r7, #24]
	}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e08:	440b      	add	r3, r1
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	b672      	cpsid	i
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	b662      	cpsie	i
 8004e36:	617b      	str	r3, [r7, #20]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01f      	beq.n	8004e82 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e012      	b.n	8004e6e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	7819      	ldrb	r1, [r3, #0]
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	3334      	adds	r3, #52	; 0x34
 8004e58:	460a      	mov	r2, r1
 8004e5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d006      	beq.n	8004e76 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d9e9      	bls.n	8004e48 <prvInitialiseNewTask+0x58>
 8004e74:	e000      	b.n	8004e78 <prvInitialiseNewTask+0x88>
			{
				break;
 8004e76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e80:	e003      	b.n	8004e8a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d901      	bls.n	8004e94 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e90:	2306      	movs	r3, #6
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fee5 	bl	8003c7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	3318      	adds	r3, #24
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe fee0 	bl	8003c7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f1c3 0207 	rsb	r2, r3, #7
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 ff22 	bl	8005d2c <pxPortInitialiseStack>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004efa:	bf00      	nop
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f0c:	f001 f81e 	bl	8005f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f1a:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f22:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <prvAddNewTaskToReadyList+0xb8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d110      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f30:	f000 fbfc 	bl	800572c <prvInitialiseTaskLists>
 8004f34:	e00d      	b.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f36:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <prvAddNewTaskToReadyList+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d802      	bhi.n	8004f52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f52:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <prvAddNewTaskToReadyList+0xc4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <prvAddNewTaskToReadyList+0xc4>)
 8004f5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <prvAddNewTaskToReadyList+0xc8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <prvAddNewTaskToReadyList+0xc8>)
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <prvAddNewTaskToReadyList+0xcc>)
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f7fe fe85 	bl	8003c94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 f813 	bl	8005fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <prvAddNewTaskToReadyList+0xc0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvAddNewTaskToReadyList+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d207      	bcs.n	8004fb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <prvAddNewTaskToReadyList+0xd0>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	200003fc 	.word	0x200003fc
 8004fc0:	200002fc 	.word	0x200002fc
 8004fc4:	20000408 	.word	0x20000408
 8004fc8:	20000418 	.word	0x20000418
 8004fcc:	20000404 	.word	0x20000404
 8004fd0:	20000300 	.word	0x20000300
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d019      	beq.n	800501e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <vTaskDelay+0x64>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <vTaskDelay+0x34>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	b672      	cpsid	i
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	b662      	cpsie	i
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800500c:	f000 f87e 	bl	800510c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005010:	2100      	movs	r1, #0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fe24 	bl	8005c60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005018:	f000 f886 	bl	8005128 <xTaskResumeAll>
 800501c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d107      	bne.n	8005034 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <vTaskDelay+0x68>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000424 	.word	0x20000424
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005052:	463a      	mov	r2, r7
 8005054:	1d39      	adds	r1, r7, #4
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb faa4 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	9202      	str	r2, [sp, #8]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2300      	movs	r3, #0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	460a      	mov	r2, r1
 8005072:	4920      	ldr	r1, [pc, #128]	; (80050f4 <vTaskStartScheduler+0xb0>)
 8005074:	4820      	ldr	r0, [pc, #128]	; (80050f8 <vTaskStartScheduler+0xb4>)
 8005076:	f7ff fe13 	bl	8004ca0 <xTaskCreateStatic>
 800507a:	4603      	mov	r3, r0
 800507c:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <vTaskStartScheduler+0xb8>)
 800507e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <vTaskStartScheduler+0xb8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e001      	b.n	8005092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d118      	bne.n	80050ca <vTaskStartScheduler+0x86>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	b672      	cpsid	i
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	b662      	cpsie	i
 80050ac:	613b      	str	r3, [r7, #16]
}
 80050ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <vTaskStartScheduler+0xbc>)
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295
 80050b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050b8:	4b12      	ldr	r3, [pc, #72]	; (8005104 <vTaskStartScheduler+0xc0>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <vTaskStartScheduler+0xc4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050c4:	f000 fec4 	bl	8005e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050c8:	e010      	b.n	80050ec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d10c      	bne.n	80050ec <vTaskStartScheduler+0xa8>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	b672      	cpsid	i
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	b662      	cpsie	i
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <vTaskStartScheduler+0xa6>
}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	080117a0 	.word	0x080117a0
 80050f8:	080056fd 	.word	0x080056fd
 80050fc:	20000420 	.word	0x20000420
 8005100:	2000041c 	.word	0x2000041c
 8005104:	20000408 	.word	0x20000408
 8005108:	20000400 	.word	0x20000400

0800510c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <vTaskSuspendAll+0x18>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a03      	ldr	r2, [pc, #12]	; (8005124 <vTaskSuspendAll+0x18>)
 8005118:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	20000424 	.word	0x20000424

08005128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005136:	4b42      	ldr	r3, [pc, #264]	; (8005240 <xTaskResumeAll+0x118>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10c      	bne.n	8005158 <xTaskResumeAll+0x30>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	b672      	cpsid	i
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	b662      	cpsie	i
 8005152:	603b      	str	r3, [r7, #0]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005158:	f000 fef8 	bl	8005f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <xTaskResumeAll+0x118>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3b01      	subs	r3, #1
 8005162:	4a37      	ldr	r2, [pc, #220]	; (8005240 <xTaskResumeAll+0x118>)
 8005164:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005166:	4b36      	ldr	r3, [pc, #216]	; (8005240 <xTaskResumeAll+0x118>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d161      	bne.n	8005232 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800516e:	4b35      	ldr	r3, [pc, #212]	; (8005244 <xTaskResumeAll+0x11c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d05d      	beq.n	8005232 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005176:	e02e      	b.n	80051d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005178:	4b33      	ldr	r3, [pc, #204]	; (8005248 <xTaskResumeAll+0x120>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3318      	adds	r3, #24
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fde2 	bl	8003d4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3304      	adds	r3, #4
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe fddd 	bl	8003d4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	409a      	lsls	r2, r3
 800519c:	4b2b      	ldr	r3, [pc, #172]	; (800524c <xTaskResumeAll+0x124>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	4a2a      	ldr	r2, [pc, #168]	; (800524c <xTaskResumeAll+0x124>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <xTaskResumeAll+0x128>)
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe fd69 	bl	8003c94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <xTaskResumeAll+0x12c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051d0:	4b21      	ldr	r3, [pc, #132]	; (8005258 <xTaskResumeAll+0x130>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <xTaskResumeAll+0x120>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1cc      	bne.n	8005178 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051e4:	f000 fb42 	bl	800586c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <xTaskResumeAll+0x134>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051f4:	f000 f858 	bl	80052a8 <xTaskIncrementTick>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <xTaskResumeAll+0x130>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f1      	bne.n	80051f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005210:	4b12      	ldr	r3, [pc, #72]	; (800525c <xTaskResumeAll+0x134>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005216:	4b10      	ldr	r3, [pc, #64]	; (8005258 <xTaskResumeAll+0x130>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800521e:	2301      	movs	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <xTaskResumeAll+0x138>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005232:	f000 febf 	bl	8005fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005236:	68bb      	ldr	r3, [r7, #8]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000424 	.word	0x20000424
 8005244:	200003fc 	.word	0x200003fc
 8005248:	200003bc 	.word	0x200003bc
 800524c:	20000404 	.word	0x20000404
 8005250:	20000300 	.word	0x20000300
 8005254:	200002fc 	.word	0x200002fc
 8005258:	20000410 	.word	0x20000410
 800525c:	2000040c 	.word	0x2000040c
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <xTaskGetTickCount+0x1c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005270:	687b      	ldr	r3, [r7, #4]
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000400 	.word	0x20000400

08005284 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800528a:	f000 ff47 	bl	800611c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <xTaskGetTickCountFromISR+0x20>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005298:	683b      	ldr	r3, [r7, #0]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000400 	.word	0x20000400

080052a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <xTaskIncrementTick+0x148>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 808a 	bne.w	80053d0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052bc:	4b4d      	ldr	r3, [pc, #308]	; (80053f4 <xTaskIncrementTick+0x14c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052c4:	4a4b      	ldr	r2, [pc, #300]	; (80053f4 <xTaskIncrementTick+0x14c>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d122      	bne.n	8005316 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80052d0:	4b49      	ldr	r3, [pc, #292]	; (80053f8 <xTaskIncrementTick+0x150>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	b672      	cpsid	i
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	b662      	cpsie	i
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xTaskIncrementTick+0x4a>
 80052f4:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <xTaskIncrementTick+0x150>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	4b40      	ldr	r3, [pc, #256]	; (80053fc <xTaskIncrementTick+0x154>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3e      	ldr	r2, [pc, #248]	; (80053f8 <xTaskIncrementTick+0x150>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4a3e      	ldr	r2, [pc, #248]	; (80053fc <xTaskIncrementTick+0x154>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <xTaskIncrementTick+0x158>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <xTaskIncrementTick+0x158>)
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	f000 faab 	bl	800586c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005316:	4b3b      	ldr	r3, [pc, #236]	; (8005404 <xTaskIncrementTick+0x15c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	429a      	cmp	r2, r3
 800531e:	d348      	bcc.n	80053b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005320:	4b35      	ldr	r3, [pc, #212]	; (80053f8 <xTaskIncrementTick+0x150>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d104      	bne.n	8005334 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532a:	4b36      	ldr	r3, [pc, #216]	; (8005404 <xTaskIncrementTick+0x15c>)
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	601a      	str	r2, [r3, #0]
					break;
 8005332:	e03e      	b.n	80053b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	4b30      	ldr	r3, [pc, #192]	; (80053f8 <xTaskIncrementTick+0x150>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	429a      	cmp	r2, r3
 800534a:	d203      	bcs.n	8005354 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800534c:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <xTaskIncrementTick+0x15c>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005352:	e02e      	b.n	80053b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fcf8 	bl	8003d4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	3318      	adds	r3, #24
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fcef 	bl	8003d4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	2201      	movs	r2, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <xTaskIncrementTick+0x160>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4313      	orrs	r3, r2
 800537e:	4a22      	ldr	r2, [pc, #136]	; (8005408 <xTaskIncrementTick+0x160>)
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a1f      	ldr	r2, [pc, #124]	; (800540c <xTaskIncrementTick+0x164>)
 8005390:	441a      	add	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7fe fc7b 	bl	8003c94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <xTaskIncrementTick+0x168>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3b9      	bcc.n	8005320 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b0:	e7b6      	b.n	8005320 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <xTaskIncrementTick+0x168>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b8:	4914      	ldr	r1, [pc, #80]	; (800540c <xTaskIncrementTick+0x164>)
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d907      	bls.n	80053da <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80053ca:	2301      	movs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e004      	b.n	80053da <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <xTaskIncrementTick+0x16c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <xTaskIncrementTick+0x16c>)
 80053d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <xTaskIncrementTick+0x170>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053e6:	697b      	ldr	r3, [r7, #20]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000424 	.word	0x20000424
 80053f4:	20000400 	.word	0x20000400
 80053f8:	200003b4 	.word	0x200003b4
 80053fc:	200003b8 	.word	0x200003b8
 8005400:	20000414 	.word	0x20000414
 8005404:	2000041c 	.word	0x2000041c
 8005408:	20000404 	.word	0x20000404
 800540c:	20000300 	.word	0x20000300
 8005410:	200002fc 	.word	0x200002fc
 8005414:	2000040c 	.word	0x2000040c
 8005418:	20000410 	.word	0x20000410

0800541c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005422:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <vTaskSwitchContext+0xa8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <vTaskSwitchContext+0xac>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005430:	e041      	b.n	80054b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005432:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <vTaskSwitchContext+0xac>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <vTaskSwitchContext+0xb0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	fab3 f383 	clz	r3, r3
 8005444:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005446:	7afb      	ldrb	r3, [r7, #11]
 8005448:	f1c3 031f 	rsb	r3, r3, #31
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	4920      	ldr	r1, [pc, #128]	; (80054d0 <vTaskSwitchContext+0xb4>)
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <vTaskSwitchContext+0x60>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	607b      	str	r3, [r7, #4]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <vTaskSwitchContext+0x5e>
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <vTaskSwitchContext+0xb4>)
 8005488:	4413      	add	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3308      	adds	r3, #8
 800549e:	429a      	cmp	r2, r3
 80054a0:	d104      	bne.n	80054ac <vTaskSwitchContext+0x90>
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <vTaskSwitchContext+0xb8>)
 80054b4:	6013      	str	r3, [r2, #0]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000424 	.word	0x20000424
 80054c8:	20000410 	.word	0x20000410
 80054cc:	20000404 	.word	0x20000404
 80054d0:	20000300 	.word	0x20000300
 80054d4:	200002fc 	.word	0x200002fc

080054d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	60fb      	str	r3, [r7, #12]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <vTaskPlaceOnEventList+0x48>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3318      	adds	r3, #24
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe fbe6 	bl	8003cdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005510:	2101      	movs	r1, #1
 8005512:	6838      	ldr	r0, [r7, #0]
 8005514:	f000 fba4 	bl	8005c60 <prvAddCurrentTaskToDelayedList>
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200002fc 	.word	0x200002fc

08005524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	b672      	cpsid	i
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	b662      	cpsie	i
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3318      	adds	r3, #24
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fbf8 	bl	8003d4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <xTaskRemoveFromEventList+0xb0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11c      	bne.n	80055a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fbef 	bl	8003d4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <xTaskRemoveFromEventList+0xb4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <xTaskRemoveFromEventList+0xb4>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a13      	ldr	r2, [pc, #76]	; (80055dc <xTaskRemoveFromEventList+0xb8>)
 8005590:	441a      	add	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fe fb7b 	bl	8003c94 <vListInsertEnd>
 800559e:	e005      	b.n	80055ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3318      	adds	r3, #24
 80055a4:	4619      	mov	r1, r3
 80055a6:	480e      	ldr	r0, [pc, #56]	; (80055e0 <xTaskRemoveFromEventList+0xbc>)
 80055a8:	f7fe fb74 	bl	8003c94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <xTaskRemoveFromEventList+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d905      	bls.n	80055c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055be:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <xTaskRemoveFromEventList+0xc4>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e001      	b.n	80055ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ca:	697b      	ldr	r3, [r7, #20]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000424 	.word	0x20000424
 80055d8:	20000404 	.word	0x20000404
 80055dc:	20000300 	.word	0x20000300
 80055e0:	200003bc 	.word	0x200003bc
 80055e4:	200002fc 	.word	0x200002fc
 80055e8:	20000410 	.word	0x20000410

080055ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <vTaskInternalSetTimeOutState+0x24>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <vTaskInternalSetTimeOutState+0x28>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000414 	.word	0x20000414
 8005614:	20000400 	.word	0x20000400

08005618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10c      	bne.n	8005642 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	613b      	str	r3, [r7, #16]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	b672      	cpsid	i
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	b662      	cpsie	i
 800565c:	60fb      	str	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005662:	f000 fc73 	bl	8005f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <xTaskCheckForTimeOut+0xc4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d102      	bne.n	8005686 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e023      	b.n	80056ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <xTaskCheckForTimeOut+0xc8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d007      	beq.n	80056a2 <xTaskCheckForTimeOut+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e015      	b.n	80056ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d20b      	bcs.n	80056c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff97 	bl	80055ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e004      	b.n	80056ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f000 fc71 	bl	8005fb4 <vPortExitCritical>

	return xReturn;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000400 	.word	0x20000400
 80056e0:	20000414 	.word	0x20000414

080056e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e8:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <vTaskMissedYield+0x14>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	20000410 	.word	0x20000410

080056fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005704:	f000 f852 	bl	80057ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <prvIdleTask+0x28>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d9f9      	bls.n	8005704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <prvIdleTask+0x2c>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005720:	e7f0      	b.n	8005704 <prvIdleTask+0x8>
 8005722:	bf00      	nop
 8005724:	20000300 	.word	0x20000300
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e00c      	b.n	8005752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <prvInitialiseTaskLists+0x60>)
 8005744:	4413      	add	r3, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fa77 	bl	8003c3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b06      	cmp	r3, #6
 8005756:	d9ef      	bls.n	8005738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005758:	480d      	ldr	r0, [pc, #52]	; (8005790 <prvInitialiseTaskLists+0x64>)
 800575a:	f7fe fa6e 	bl	8003c3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575e:	480d      	ldr	r0, [pc, #52]	; (8005794 <prvInitialiseTaskLists+0x68>)
 8005760:	f7fe fa6b 	bl	8003c3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005764:	480c      	ldr	r0, [pc, #48]	; (8005798 <prvInitialiseTaskLists+0x6c>)
 8005766:	f7fe fa68 	bl	8003c3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800576a:	480c      	ldr	r0, [pc, #48]	; (800579c <prvInitialiseTaskLists+0x70>)
 800576c:	f7fe fa65 	bl	8003c3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005770:	480b      	ldr	r0, [pc, #44]	; (80057a0 <prvInitialiseTaskLists+0x74>)
 8005772:	f7fe fa62 	bl	8003c3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <prvInitialiseTaskLists+0x78>)
 8005778:	4a05      	ldr	r2, [pc, #20]	; (8005790 <prvInitialiseTaskLists+0x64>)
 800577a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <prvInitialiseTaskLists+0x7c>)
 800577e:	4a05      	ldr	r2, [pc, #20]	; (8005794 <prvInitialiseTaskLists+0x68>)
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000300 	.word	0x20000300
 8005790:	2000038c 	.word	0x2000038c
 8005794:	200003a0 	.word	0x200003a0
 8005798:	200003bc 	.word	0x200003bc
 800579c:	200003d0 	.word	0x200003d0
 80057a0:	200003e8 	.word	0x200003e8
 80057a4:	200003b4 	.word	0x200003b4
 80057a8:	200003b8 	.word	0x200003b8

080057ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b2:	e019      	b.n	80057e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b4:	f000 fbca 	bl	8005f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <prvCheckTasksWaitingTermination+0x50>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fac2 	bl	8003d4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057de:	f000 fbe9 	bl	8005fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f810 	bl	8005808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e1      	bne.n	80057b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200003d0 	.word	0x200003d0
 8005800:	200003fc 	.word	0x200003fc
 8005804:	200003e4 	.word	0x200003e4

08005808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fd8a 	bl	8006338 <vPortFree>
				vPortFree( pxTCB );
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fd87 	bl	8006338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800582a:	e01a      	b.n	8005862 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005832:	2b01      	cmp	r3, #1
 8005834:	d103      	bne.n	800583e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fd7e 	bl	8006338 <vPortFree>
	}
 800583c:	e011      	b.n	8005862 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005844:	2b02      	cmp	r3, #2
 8005846:	d00c      	beq.n	8005862 <prvDeleteTCB+0x5a>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	b672      	cpsid	i
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	b662      	cpsie	i
 800585c:	60fb      	str	r3, [r7, #12]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <prvDeleteTCB+0x58>
	}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <prvResetNextTaskUnblockTime+0x38>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <prvResetNextTaskUnblockTime+0x3c>)
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005884:	e008      	b.n	8005898 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <prvResetNextTaskUnblockTime+0x38>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <prvResetNextTaskUnblockTime+0x3c>)
 8005896:	6013      	str	r3, [r2, #0]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	200003b4 	.word	0x200003b4
 80058a8:	2000041c 	.word	0x2000041c

080058ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <xTaskGetSchedulerState+0x34>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ba:	2301      	movs	r3, #1
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	e008      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <xTaskGetSchedulerState+0x38>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c8:	2302      	movs	r3, #2
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e001      	b.n	80058d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ce:	2300      	movs	r3, #0
 80058d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058d2:	687b      	ldr	r3, [r7, #4]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	20000408 	.word	0x20000408
 80058e4:	20000424 	.word	0x20000424

080058e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d069      	beq.n	80059d2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <xTaskPriorityInherit+0xf4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d259      	bcs.n	80059c0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db06      	blt.n	8005922 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <xTaskPriorityInherit+0xf4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	f1c3 0207 	rsb	r2, r3, #7
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6959      	ldr	r1, [r3, #20]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4a2b      	ldr	r2, [pc, #172]	; (80059e0 <xTaskPriorityInherit+0xf8>)
 8005934:	4413      	add	r3, r2
 8005936:	4299      	cmp	r1, r3
 8005938:	d13a      	bne.n	80059b0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fa05 	bl	8003d4e <uxListRemove>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d115      	bne.n	8005976 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	4924      	ldr	r1, [pc, #144]	; (80059e0 <xTaskPriorityInherit+0xf8>)
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xTaskPriorityInherit+0x8e>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	2201      	movs	r2, #1
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	43da      	mvns	r2, r3
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <xTaskPriorityInherit+0xfc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4013      	ands	r3, r2
 8005972:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <xTaskPriorityInherit+0xfc>)
 8005974:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005976:	4b19      	ldr	r3, [pc, #100]	; (80059dc <xTaskPriorityInherit+0xf4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <xTaskPriorityInherit+0xfc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <xTaskPriorityInherit+0xfc>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a10      	ldr	r2, [pc, #64]	; (80059e0 <xTaskPriorityInherit+0xf8>)
 80059a0:	441a      	add	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe f973 	bl	8003c94 <vListInsertEnd>
 80059ae:	e004      	b.n	80059ba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <xTaskPriorityInherit+0xf4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e008      	b.n	80059d2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <xTaskPriorityInherit+0xf4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d201      	bcs.n	80059d2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059d2:	68fb      	ldr	r3, [r7, #12]
	}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200002fc 	.word	0x200002fc
 80059e0:	20000300 	.word	0x20000300
 80059e4:	20000404 	.word	0x20000404

080059e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d072      	beq.n	8005ae4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059fe:	4b3c      	ldr	r3, [pc, #240]	; (8005af0 <xTaskPriorityDisinherit+0x108>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d00c      	beq.n	8005a22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	b672      	cpsid	i
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	b662      	cpsie	i
 8005a1c:	60fb      	str	r3, [r7, #12]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	b672      	cpsid	i
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	b662      	cpsie	i
 8005a3e:	60bb      	str	r3, [r7, #8]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a48:	1e5a      	subs	r2, r3, #1
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d044      	beq.n	8005ae4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d140      	bne.n	8005ae4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe f971 	bl	8003d4e <uxListRemove>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d115      	bne.n	8005a9e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	491f      	ldr	r1, [pc, #124]	; (8005af4 <xTaskPriorityDisinherit+0x10c>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xTaskPriorityDisinherit+0xb6>
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43da      	mvns	r2, r3
 8005a94:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <xTaskPriorityDisinherit+0x110>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <xTaskPriorityDisinherit+0x110>)
 8005a9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f1c3 0207 	rsb	r2, r3, #7
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <xTaskPriorityDisinherit+0x110>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	; (8005af8 <xTaskPriorityDisinherit+0x110>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <xTaskPriorityDisinherit+0x10c>)
 8005ad2:	441a      	add	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe f8da 	bl	8003c94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ae4:	697b      	ldr	r3, [r7, #20]
	}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200002fc 	.word	0x200002fc
 8005af4:	20000300 	.word	0x20000300
 8005af8:	20000404 	.word	0x20000404

08005afc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8087 	beq.w	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10c      	bne.n	8005b38 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	b672      	cpsid	i
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	b662      	cpsie	i
 8005b32:	60fb      	str	r3, [r7, #12]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d902      	bls.n	8005b48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	e002      	b.n	8005b4e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d065      	beq.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d160      	bne.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b62:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d10c      	bne.n	8005b86 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	60bb      	str	r3, [r7, #8]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db04      	blt.n	8005ba4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f1c3 0207 	rsb	r2, r3, #7
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6959      	ldr	r1, [r3, #20]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d134      	bne.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe f8c5 	bl	8003d4e <uxListRemove>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bce:	4918      	ldr	r1, [pc, #96]	; (8005c30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2201      	movs	r2, #1
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43da      	mvns	r2, r3
 8005bec:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005bf4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	4a0b      	ldr	r2, [pc, #44]	; (8005c34 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4a06      	ldr	r2, [pc, #24]	; (8005c30 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005c16:	441a      	add	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7fe f838 	bl	8003c94 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c24:	bf00      	nop
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	200002fc 	.word	0x200002fc
 8005c30:	20000300 	.word	0x20000300
 8005c34:	20000404 	.word	0x20000404

08005c38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c4a:	3201      	adds	r2, #1
 8005c4c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c50:	681b      	ldr	r3, [r3, #0]
	}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	200002fc 	.word	0x200002fc

08005c60 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c6a:	4b29      	ldr	r3, [pc, #164]	; (8005d10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe f869 	bl	8003d4e <uxListRemove>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	2201      	movs	r2, #1
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	43da      	mvns	r2, r3
 8005c90:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4013      	ands	r3, r2
 8005c96:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d10a      	bne.n	8005cb8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	481a      	ldr	r0, [pc, #104]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cb2:	f7fd ffef 	bl	8003c94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb6:	e026      	b.n	8005d06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cc0:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d209      	bcs.n	8005ce4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd0:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fd fffd 	bl	8003cdc <vListInsert>
}
 8005ce2:	e010      	b.n	8005d06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fd fff3 	bl	8003cdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d202      	bcs.n	8005d06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6013      	str	r3, [r2, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000400 	.word	0x20000400
 8005d14:	200002fc 	.word	0x200002fc
 8005d18:	20000404 	.word	0x20000404
 8005d1c:	200003e8 	.word	0x200003e8
 8005d20:	200003b8 	.word	0x200003b8
 8005d24:	200003b4 	.word	0x200003b4
 8005d28:	2000041c 	.word	0x2000041c

08005d2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3b04      	subs	r3, #4
 8005d3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3b04      	subs	r3, #4
 8005d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3b04      	subs	r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d5c:	4a0c      	ldr	r2, [pc, #48]	; (8005d90 <pxPortInitialiseStack+0x64>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b14      	subs	r3, #20
 8005d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f06f 0202 	mvn.w	r2, #2
 8005d7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3b20      	subs	r3, #32
 8005d80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d82:	68fb      	ldr	r3, [r7, #12]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	08005d95 	.word	0x08005d95

08005d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <prvTaskExitError+0x5c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d00c      	beq.n	8005dc2 <prvTaskExitError+0x2e>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	b672      	cpsid	i
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	b662      	cpsie	i
 8005dbc:	60fb      	str	r3, [r7, #12]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <prvTaskExitError+0x2c>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	b672      	cpsid	i
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	b662      	cpsie	i
 8005dd6:	60bb      	str	r3, [r7, #8]
}
 8005dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dda:	bf00      	nop
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0fc      	beq.n	8005ddc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	2000000c 	.word	0x2000000c
	...

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	4770      	bx	lr
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst2>:
 8005e20:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e28:	4808      	ldr	r0, [pc, #32]	; (8005e4c <prvPortStartFirstTask+0x24>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8814 	msr	CONTROL, r0
 8005e3a:	b662      	cpsie	i
 8005e3c:	b661      	cpsie	f
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	df00      	svc	0
 8005e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e4a:	bf00      	nop
 8005e4c:	e000ed08 	.word	0xe000ed08

08005e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e56:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <xPortStartScheduler+0xe4>)
 8005e58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	22ff      	movs	r2, #255	; 0xff
 8005e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <xPortStartScheduler+0xe8>)
 8005e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e7e:	4b2f      	ldr	r3, [pc, #188]	; (8005f3c <xPortStartScheduler+0xec>)
 8005e80:	2207      	movs	r2, #7
 8005e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e84:	e009      	b.n	8005e9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005e86:	4b2d      	ldr	r3, [pc, #180]	; (8005f3c <xPortStartScheduler+0xec>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <xPortStartScheduler+0xec>)
 8005e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b80      	cmp	r3, #128	; 0x80
 8005ea4:	d0ef      	beq.n	8005e86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ea6:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <xPortStartScheduler+0xec>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1c3 0307 	rsb	r3, r3, #7
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d00c      	beq.n	8005ecc <xPortStartScheduler+0x7c>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	b672      	cpsid	i
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	b662      	cpsie	i
 8005ec6:	60bb      	str	r3, [r7, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <xPortStartScheduler+0xec>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <xPortStartScheduler+0xec>)
 8005ed4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ed6:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <xPortStartScheduler+0xec>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ede:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <xPortStartScheduler+0xec>)
 8005ee0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <xPortStartScheduler+0xf0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <xPortStartScheduler+0xf0>)
 8005ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ef4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <xPortStartScheduler+0xf0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <xPortStartScheduler+0xf0>)
 8005efc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f02:	f000 f8dd 	bl	80060c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <xPortStartScheduler+0xf4>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f0c:	f000 f8fc 	bl	8006108 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f10:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <xPortStartScheduler+0xf8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <xPortStartScheduler+0xf8>)
 8005f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f1c:	f7ff ff84 	bl	8005e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f20:	f7ff fa7c 	bl	800541c <vTaskSwitchContext>
	prvTaskExitError();
 8005f24:	f7ff ff36 	bl	8005d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	e000e400 	.word	0xe000e400
 8005f38:	20000428 	.word	0x20000428
 8005f3c:	2000042c 	.word	0x2000042c
 8005f40:	e000ed20 	.word	0xe000ed20
 8005f44:	2000000c 	.word	0x2000000c
 8005f48:	e000ef34 	.word	0xe000ef34

08005f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	b672      	cpsid	i
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	b662      	cpsie	i
 8005f66:	607b      	str	r3, [r7, #4]
}
 8005f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <vPortEnterCritical+0x60>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a0e      	ldr	r2, [pc, #56]	; (8005fac <vPortEnterCritical+0x60>)
 8005f72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f74:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <vPortEnterCritical+0x60>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d111      	bne.n	8005fa0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <vPortEnterCritical+0x64>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <vPortEnterCritical+0x54>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	b672      	cpsid	i
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	b662      	cpsie	i
 8005f9a:	603b      	str	r3, [r7, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <vPortEnterCritical+0x52>
	}
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2000000c 	.word	0x2000000c
 8005fb0:	e000ed04 	.word	0xe000ed04

08005fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <vPortExitCritical+0x54>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10c      	bne.n	8005fdc <vPortExitCritical+0x28>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	b672      	cpsid	i
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	b662      	cpsie	i
 8005fd6:	607b      	str	r3, [r7, #4]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <vPortExitCritical+0x54>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <vPortExitCritical+0x54>)
 8005fe4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <vPortExitCritical+0x54>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <vPortExitCritical+0x46>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f383 8811 	msr	BASEPRI, r3
}
 8005ff8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	2000000c 	.word	0x2000000c
 800600c:	00000000 	.word	0x00000000

08006010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006010:	f3ef 8009 	mrs	r0, PSP
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <pxCurrentTCBConst>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f01e 0f10 	tst.w	lr, #16
 8006020:	bf08      	it	eq
 8006022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602a:	6010      	str	r0, [r2, #0]
 800602c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006034:	b672      	cpsid	i
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	b662      	cpsie	i
 8006044:	f7ff f9ea 	bl	800541c <vTaskSwitchContext>
 8006048:	f04f 0000 	mov.w	r0, #0
 800604c:	f380 8811 	msr	BASEPRI, r0
 8006050:	bc09      	pop	{r0, r3}
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f01e 0f10 	tst.w	lr, #16
 800605e:	bf08      	it	eq
 8006060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006064:	f380 8809 	msr	PSP, r0
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <pxCurrentTCBConst>:
 8006070:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	b672      	cpsid	i
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	b662      	cpsie	i
 8006092:	607b      	str	r3, [r7, #4]
}
 8006094:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006096:	f7ff f907 	bl	80052a8 <xTaskIncrementTick>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <xPortSysTickHandler+0x44>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f383 8811 	msr	BASEPRI, r3
}
 80060b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <vPortSetupTimerInterrupt+0x34>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <vPortSetupTimerInterrupt+0x38>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <vPortSetupTimerInterrupt+0x3c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <vPortSetupTimerInterrupt+0x40>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	099b      	lsrs	r3, r3, #6
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <vPortSetupTimerInterrupt+0x44>)
 80060de:	3b01      	subs	r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <vPortSetupTimerInterrupt+0x34>)
 80060e4:	2207      	movs	r2, #7
 80060e6:	601a      	str	r2, [r3, #0]
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	e000e010 	.word	0xe000e010
 80060f8:	e000e018 	.word	0xe000e018
 80060fc:	20000000 	.word	0x20000000
 8006100:	10624dd3 	.word	0x10624dd3
 8006104:	e000e014 	.word	0xe000e014

08006108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006108:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006118 <vPortEnableVFP+0x10>
 800610c:	6801      	ldr	r1, [r0, #0]
 800610e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006112:	6001      	str	r1, [r0, #0]
 8006114:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006116:	bf00      	nop
 8006118:	e000ed88 	.word	0xe000ed88

0800611c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006122:	f3ef 8305 	mrs	r3, IPSR
 8006126:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b0f      	cmp	r3, #15
 800612c:	d916      	bls.n	800615c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800612e:	4a19      	ldr	r2, [pc, #100]	; (8006194 <vPortValidateInterruptPriority+0x78>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006138:	4b17      	ldr	r3, [pc, #92]	; (8006198 <vPortValidateInterruptPriority+0x7c>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	7afa      	ldrb	r2, [r7, #11]
 800613e:	429a      	cmp	r2, r3
 8006140:	d20c      	bcs.n	800615c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	607b      	str	r3, [r7, #4]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800615c:	4b0f      	ldr	r3, [pc, #60]	; (800619c <vPortValidateInterruptPriority+0x80>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <vPortValidateInterruptPriority+0x84>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d90c      	bls.n	8006186 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	b672      	cpsid	i
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	b662      	cpsie	i
 8006180:	603b      	str	r3, [r7, #0]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <vPortValidateInterruptPriority+0x68>
	}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	e000e3f0 	.word	0xe000e3f0
 8006198:	20000428 	.word	0x20000428
 800619c:	e000ed0c 	.word	0xe000ed0c
 80061a0:	2000042c 	.word	0x2000042c

080061a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061b0:	f7fe ffac 	bl	800510c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061b4:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <pvPortMalloc+0x180>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061bc:	f000 f91a 	bl	80063f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061c0:	4b59      	ldr	r3, [pc, #356]	; (8006328 <pvPortMalloc+0x184>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 8092 	bne.w	80062f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01f      	beq.n	8006214 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80061d4:	2208      	movs	r2, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f023 0307 	bic.w	r3, r3, #7
 80061ec:	3308      	adds	r3, #8
 80061ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <pvPortMalloc+0x70>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	b672      	cpsid	i
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	b662      	cpsie	i
 800620e:	617b      	str	r3, [r7, #20]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d06b      	beq.n	80062f2 <pvPortMalloc+0x14e>
 800621a:	4b44      	ldr	r3, [pc, #272]	; (800632c <pvPortMalloc+0x188>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d866      	bhi.n	80062f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006224:	4b42      	ldr	r3, [pc, #264]	; (8006330 <pvPortMalloc+0x18c>)
 8006226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <pvPortMalloc+0x18c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800622e:	e004      	b.n	800623a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d903      	bls.n	800624c <pvPortMalloc+0xa8>
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f1      	bne.n	8006230 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800624c:	4b35      	ldr	r3, [pc, #212]	; (8006324 <pvPortMalloc+0x180>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006252:	429a      	cmp	r2, r3
 8006254:	d04d      	beq.n	80062f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2208      	movs	r2, #8
 800625c:	4413      	add	r3, r2
 800625e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	2308      	movs	r3, #8
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	429a      	cmp	r2, r3
 8006276:	d921      	bls.n	80062bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <pvPortMalloc+0x100>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	b672      	cpsid	i
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	b662      	cpsie	i
 800629e:	613b      	str	r3, [r7, #16]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062b6:	69b8      	ldr	r0, [r7, #24]
 80062b8:	f000 f8fe 	bl	80064b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <pvPortMalloc+0x188>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	4a19      	ldr	r2, [pc, #100]	; (800632c <pvPortMalloc+0x188>)
 80062c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ca:	4b18      	ldr	r3, [pc, #96]	; (800632c <pvPortMalloc+0x188>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b19      	ldr	r3, [pc, #100]	; (8006334 <pvPortMalloc+0x190>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d203      	bcs.n	80062de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <pvPortMalloc+0x188>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a16      	ldr	r2, [pc, #88]	; (8006334 <pvPortMalloc+0x190>)
 80062dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	4b11      	ldr	r3, [pc, #68]	; (8006328 <pvPortMalloc+0x184>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062f2:	f7fe ff19 	bl	8005128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <pvPortMalloc+0x176>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	b672      	cpsid	i
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	b662      	cpsie	i
 8006314:	60fb      	str	r3, [r7, #12]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <pvPortMalloc+0x174>
	return pvReturn;
 800631a:	69fb      	ldr	r3, [r7, #28]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20004038 	.word	0x20004038
 8006328:	20004044 	.word	0x20004044
 800632c:	2000403c 	.word	0x2000403c
 8006330:	20004030 	.word	0x20004030
 8006334:	20004040 	.word	0x20004040

08006338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04c      	beq.n	80063e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800634a:	2308      	movs	r3, #8
 800634c:	425b      	negs	r3, r3
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b23      	ldr	r3, [pc, #140]	; (80063ec <vPortFree+0xb4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <vPortFree+0x48>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00c      	beq.n	80063a2 <vPortFree+0x6a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	60bb      	str	r3, [r7, #8]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <vPortFree+0xb4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d019      	beq.n	80063e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d115      	bne.n	80063e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <vPortFree+0xb4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063c8:	f7fe fea0 	bl	800510c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <vPortFree+0xb8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4413      	add	r3, r2
 80063d6:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <vPortFree+0xb8>)
 80063d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063da:	6938      	ldr	r0, [r7, #16]
 80063dc:	f000 f86c 	bl	80064b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063e0:	f7fe fea2 	bl	8005128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063e4:	bf00      	nop
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20004044 	.word	0x20004044
 80063f0:	2000403c 	.word	0x2000403c

080063f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006400:	4b27      	ldr	r3, [pc, #156]	; (80064a0 <prvHeapInit+0xac>)
 8006402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3307      	adds	r3, #7
 8006412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <prvHeapInit+0xac>)
 8006424:	4413      	add	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <prvHeapInit+0xb0>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <prvHeapInit+0xb0>)
 8006434:	2200      	movs	r2, #0
 8006436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006440:	2208      	movs	r2, #8
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <prvHeapInit+0xb4>)
 8006454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <prvHeapInit+0xb4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <prvHeapInit+0xb4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <prvHeapInit+0xb4>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <prvHeapInit+0xb8>)
 8006482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <prvHeapInit+0xbc>)
 800648a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <prvHeapInit+0xc0>)
 800648e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	20000430 	.word	0x20000430
 80064a4:	20004030 	.word	0x20004030
 80064a8:	20004038 	.word	0x20004038
 80064ac:	20004040 	.word	0x20004040
 80064b0:	2000403c 	.word	0x2000403c
 80064b4:	20004044 	.word	0x20004044

080064b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064c0:	4b28      	ldr	r3, [pc, #160]	; (8006564 <prvInsertBlockIntoFreeList+0xac>)
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e002      	b.n	80064cc <prvInsertBlockIntoFreeList+0x14>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d8f7      	bhi.n	80064c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4413      	add	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d108      	bne.n	80064fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	441a      	add	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	441a      	add	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d118      	bne.n	8006540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <prvInsertBlockIntoFreeList+0xb0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d00d      	beq.n	8006536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e008      	b.n	8006548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvInsertBlockIntoFreeList+0xb0>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e003      	b.n	8006548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d002      	beq.n	8006556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20004030 	.word	0x20004030
 8006568:	20004038 	.word	0x20004038

0800656c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006576:	f007 fa7b 	bl	800da70 <sys_timeouts_sleeptime>
 800657a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d10b      	bne.n	800659c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006584:	4813      	ldr	r0, [pc, #76]	; (80065d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006586:	f009 ffea 	bl	801055e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800658a:	2200      	movs	r2, #0
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f009 ff5c 	bl	801044c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006594:	480f      	ldr	r0, [pc, #60]	; (80065d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006596:	f009 ffd3 	bl	8010540 <sys_mutex_lock>
    return;
 800659a:	e018      	b.n	80065ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d102      	bne.n	80065a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80065a2:	f007 fa2b 	bl	800d9fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80065a6:	e7e6      	b.n	8006576 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80065a8:	480a      	ldr	r0, [pc, #40]	; (80065d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80065aa:	f009 ffd8 	bl	801055e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f009 ff4a 	bl	801044c <sys_arch_mbox_fetch>
 80065b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80065ba:	4806      	ldr	r0, [pc, #24]	; (80065d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80065bc:	f009 ffc0 	bl	8010540 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d102      	bne.n	80065ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80065c8:	f007 fa18 	bl	800d9fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80065cc:	e7d3      	b.n	8006576 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20007324 	.word	0x20007324

080065d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80065e0:	4810      	ldr	r0, [pc, #64]	; (8006624 <tcpip_thread+0x4c>)
 80065e2:	f009 ffad 	bl	8010540 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <tcpip_thread+0x50>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <tcpip_thread+0x50>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <tcpip_thread+0x54>)
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	4610      	mov	r0, r2
 80065f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	4619      	mov	r1, r3
 8006600:	480b      	ldr	r0, [pc, #44]	; (8006630 <tcpip_thread+0x58>)
 8006602:	f7ff ffb3 	bl	800656c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <tcpip_thread+0x5c>)
 800660e:	2291      	movs	r2, #145	; 0x91
 8006610:	4909      	ldr	r1, [pc, #36]	; (8006638 <tcpip_thread+0x60>)
 8006612:	480a      	ldr	r0, [pc, #40]	; (800663c <tcpip_thread+0x64>)
 8006614:	f00a f83c 	bl	8010690 <iprintf>
      continue;
 8006618:	e003      	b.n	8006622 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 f80f 	bl	8006640 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006622:	e7ea      	b.n	80065fa <tcpip_thread+0x22>
 8006624:	20007324 	.word	0x20007324
 8006628:	20004048 	.word	0x20004048
 800662c:	2000404c 	.word	0x2000404c
 8006630:	20004050 	.word	0x20004050
 8006634:	080117a8 	.word	0x080117a8
 8006638:	080117d8 	.word	0x080117d8
 800663c:	080117f8 	.word	0x080117f8

08006640 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d026      	beq.n	800669e <tcpip_thread_handle_msg+0x5e>
 8006650:	2b02      	cmp	r3, #2
 8006652:	dc2b      	bgt.n	80066ac <tcpip_thread_handle_msg+0x6c>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <tcpip_thread_handle_msg+0x1e>
 8006658:	2b01      	cmp	r3, #1
 800665a:	d015      	beq.n	8006688 <tcpip_thread_handle_msg+0x48>
 800665c:	e026      	b.n	80066ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6850      	ldr	r0, [r2, #4]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6892      	ldr	r2, [r2, #8]
 800666a:	4611      	mov	r1, r2
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	f001 fcc5 	bl	8008008 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	2009      	movs	r0, #9
 8006682:	f000 fe1d 	bl	80072c0 <memp_free>
      break;
 8006686:	e018      	b.n	80066ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6892      	ldr	r2, [r2, #8]
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	2008      	movs	r0, #8
 8006698:	f000 fe12 	bl	80072c0 <memp_free>
      break;
 800669c:	e00d      	b.n	80066ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	4610      	mov	r0, r2
 80066a8:	4798      	blx	r3
      break;
 80066aa:	e006      	b.n	80066ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <tcpip_thread_handle_msg+0x84>)
 80066ae:	22cf      	movs	r2, #207	; 0xcf
 80066b0:	4905      	ldr	r1, [pc, #20]	; (80066c8 <tcpip_thread_handle_msg+0x88>)
 80066b2:	4806      	ldr	r0, [pc, #24]	; (80066cc <tcpip_thread_handle_msg+0x8c>)
 80066b4:	f009 ffec 	bl	8010690 <iprintf>
      break;
 80066b8:	bf00      	nop
  }
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	080117a8 	.word	0x080117a8
 80066c8:	080117d8 	.word	0x080117d8
 80066cc:	080117f8 	.word	0x080117f8

080066d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80066dc:	481a      	ldr	r0, [pc, #104]	; (8006748 <tcpip_inpkt+0x78>)
 80066de:	f009 fef4 	bl	80104ca <sys_mbox_valid>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <tcpip_inpkt+0x24>
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <tcpip_inpkt+0x7c>)
 80066ea:	22fc      	movs	r2, #252	; 0xfc
 80066ec:	4918      	ldr	r1, [pc, #96]	; (8006750 <tcpip_inpkt+0x80>)
 80066ee:	4819      	ldr	r0, [pc, #100]	; (8006754 <tcpip_inpkt+0x84>)
 80066f0:	f009 ffce 	bl	8010690 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80066f4:	2009      	movs	r0, #9
 80066f6:	f000 fd91 	bl	800721c <memp_malloc>
 80066fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	e01a      	b.n	800673e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	4809      	ldr	r0, [pc, #36]	; (8006748 <tcpip_inpkt+0x78>)
 8006724:	f009 fe78 	bl	8010418 <sys_mbox_trypost>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	2009      	movs	r0, #9
 8006732:	f000 fdc5 	bl	80072c0 <memp_free>
    return ERR_MEM;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	e000      	b.n	800673e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800673c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20004050 	.word	0x20004050
 800674c:	080117a8 	.word	0x080117a8
 8006750:	08011820 	.word	0x08011820
 8006754:	080117f8 	.word	0x080117f8

08006758 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006768:	f003 0318 	and.w	r3, r3, #24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <tcpip_input+0x3c>)
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff ffab 	bl	80066d0 <tcpip_inpkt>
 800677a:	4603      	mov	r3, r0
 800677c:	e005      	b.n	800678a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800677e:	4a06      	ldr	r2, [pc, #24]	; (8006798 <tcpip_input+0x40>)
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ffa4 	bl	80066d0 <tcpip_inpkt>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	08010229 	.word	0x08010229
 8006798:	0800f13d 	.word	0x0800f13d

0800679c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80067a6:	4819      	ldr	r0, [pc, #100]	; (800680c <tcpip_try_callback+0x70>)
 80067a8:	f009 fe8f 	bl	80104ca <sys_mbox_valid>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <tcpip_try_callback+0x24>
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <tcpip_try_callback+0x74>)
 80067b4:	f240 125d 	movw	r2, #349	; 0x15d
 80067b8:	4916      	ldr	r1, [pc, #88]	; (8006814 <tcpip_try_callback+0x78>)
 80067ba:	4817      	ldr	r0, [pc, #92]	; (8006818 <tcpip_try_callback+0x7c>)
 80067bc:	f009 ff68 	bl	8010690 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80067c0:	2008      	movs	r0, #8
 80067c2:	f000 fd2b 	bl	800721c <memp_malloc>
 80067c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	e017      	b.n	8006804 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	4808      	ldr	r0, [pc, #32]	; (800680c <tcpip_try_callback+0x70>)
 80067ea:	f009 fe15 	bl	8010418 <sys_mbox_trypost>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	2008      	movs	r0, #8
 80067f8:	f000 fd62 	bl	80072c0 <memp_free>
    return ERR_MEM;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	e000      	b.n	8006804 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20004050 	.word	0x20004050
 8006810:	080117a8 	.word	0x080117a8
 8006814:	08011820 	.word	0x08011820
 8006818:	080117f8 	.word	0x080117f8

0800681c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006826:	f000 f871 	bl	800690c <lwip_init>

  tcpip_init_done = initfunc;
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <tcpip_init+0x6c>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8006830:	4a16      	ldr	r2, [pc, #88]	; (800688c <tcpip_init+0x70>)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006836:	2106      	movs	r1, #6
 8006838:	4815      	ldr	r0, [pc, #84]	; (8006890 <tcpip_init+0x74>)
 800683a:	f009 fdcb 	bl	80103d4 <sys_mbox_new>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006844:	4b13      	ldr	r3, [pc, #76]	; (8006894 <tcpip_init+0x78>)
 8006846:	f240 2261 	movw	r2, #609	; 0x261
 800684a:	4913      	ldr	r1, [pc, #76]	; (8006898 <tcpip_init+0x7c>)
 800684c:	4813      	ldr	r0, [pc, #76]	; (800689c <tcpip_init+0x80>)
 800684e:	f009 ff1f 	bl	8010690 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006852:	4813      	ldr	r0, [pc, #76]	; (80068a0 <tcpip_init+0x84>)
 8006854:	f009 fe58 	bl	8010508 <sys_mutex_new>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <tcpip_init+0x78>)
 8006860:	f240 2265 	movw	r2, #613	; 0x265
 8006864:	490f      	ldr	r1, [pc, #60]	; (80068a4 <tcpip_init+0x88>)
 8006866:	480d      	ldr	r0, [pc, #52]	; (800689c <tcpip_init+0x80>)
 8006868:	f009 ff12 	bl	8010690 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800686c:	2300      	movs	r3, #0
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006874:	2200      	movs	r2, #0
 8006876:	490c      	ldr	r1, [pc, #48]	; (80068a8 <tcpip_init+0x8c>)
 8006878:	480c      	ldr	r0, [pc, #48]	; (80068ac <tcpip_init+0x90>)
 800687a:	f009 fe7d 	bl	8010578 <sys_thread_new>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20004048 	.word	0x20004048
 800688c:	2000404c 	.word	0x2000404c
 8006890:	20004050 	.word	0x20004050
 8006894:	080117a8 	.word	0x080117a8
 8006898:	08011830 	.word	0x08011830
 800689c:	080117f8 	.word	0x080117f8
 80068a0:	20007324 	.word	0x20007324
 80068a4:	08011854 	.word	0x08011854
 80068a8:	080065d9 	.word	0x080065d9
 80068ac:	08011878 	.word	0x08011878

080068b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	b21a      	sxth	r2, r3
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	b21b      	sxth	r3, r3
 80068c8:	4313      	orrs	r3, r2
 80068ca:	b21b      	sxth	r3, r3
 80068cc:	b29b      	uxth	r3, r3
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	061a      	lsls	r2, r3, #24
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	0e1b      	lsrs	r3, r3, #24
 80068fe:	4313      	orrs	r3, r2
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006916:	f009 fde9 	bl	80104ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800691a:	f000 f8d5 	bl	8006ac8 <mem_init>
  memp_init();
 800691e:	f000 fc31 	bl	8007184 <memp_init>
  pbuf_init();
  netif_init();
 8006922:	f000 fcf7 	bl	8007314 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006926:	f007 f8db 	bl	800dae0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800692a:	f001 fe07 	bl	800853c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800692e:	f007 f81d 	bl	800d96c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <ptr_to_mem+0x20>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	4413      	add	r3, r2
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20004054 	.word	0x20004054

08006960 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <mem_to_ptr+0x20>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	b29b      	uxth	r3, r3
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20004054 	.word	0x20004054

08006984 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006984:	b590      	push	{r4, r7, lr}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800698c:	4b45      	ldr	r3, [pc, #276]	; (8006aa4 <plug_holes+0x120>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d206      	bcs.n	80069a4 <plug_holes+0x20>
 8006996:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <plug_holes+0x124>)
 8006998:	f240 12df 	movw	r2, #479	; 0x1df
 800699c:	4943      	ldr	r1, [pc, #268]	; (8006aac <plug_holes+0x128>)
 800699e:	4844      	ldr	r0, [pc, #272]	; (8006ab0 <plug_holes+0x12c>)
 80069a0:	f009 fe76 	bl	8010690 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80069a4:	4b43      	ldr	r3, [pc, #268]	; (8006ab4 <plug_holes+0x130>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d306      	bcc.n	80069bc <plug_holes+0x38>
 80069ae:	4b3e      	ldr	r3, [pc, #248]	; (8006aa8 <plug_holes+0x124>)
 80069b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80069b4:	4940      	ldr	r1, [pc, #256]	; (8006ab8 <plug_holes+0x134>)
 80069b6:	483e      	ldr	r0, [pc, #248]	; (8006ab0 <plug_holes+0x12c>)
 80069b8:	f009 fe6a 	bl	8010690 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d006      	beq.n	80069d2 <plug_holes+0x4e>
 80069c4:	4b38      	ldr	r3, [pc, #224]	; (8006aa8 <plug_holes+0x124>)
 80069c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80069ca:	493c      	ldr	r1, [pc, #240]	; (8006abc <plug_holes+0x138>)
 80069cc:	4838      	ldr	r0, [pc, #224]	; (8006ab0 <plug_holes+0x12c>)
 80069ce:	f009 fe5f 	bl	8010690 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80069da:	d906      	bls.n	80069ea <plug_holes+0x66>
 80069dc:	4b32      	ldr	r3, [pc, #200]	; (8006aa8 <plug_holes+0x124>)
 80069de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80069e2:	4937      	ldr	r1, [pc, #220]	; (8006ac0 <plug_holes+0x13c>)
 80069e4:	4832      	ldr	r0, [pc, #200]	; (8006ab0 <plug_holes+0x12c>)
 80069e6:	f009 fe53 	bl	8010690 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff ffa4 	bl	800693c <ptr_to_mem>
 80069f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d024      	beq.n	8006a48 <plug_holes+0xc4>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	791b      	ldrb	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d120      	bne.n	8006a48 <plug_holes+0xc4>
 8006a06:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <plug_holes+0x130>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d01b      	beq.n	8006a48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006a10:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <plug_holes+0x140>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d102      	bne.n	8006a20 <plug_holes+0x9c>
      lfree = mem;
 8006a1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <plug_holes+0x140>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	881a      	ldrh	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a30:	d00a      	beq.n	8006a48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff ff80 	bl	800693c <ptr_to_mem>
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff8e 	bl	8006960 <mem_to_ptr>
 8006a44:	4603      	mov	r3, r0
 8006a46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff ff75 	bl	800693c <ptr_to_mem>
 8006a52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d01f      	beq.n	8006a9c <plug_holes+0x118>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11b      	bne.n	8006a9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006a64:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <plug_holes+0x140>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d102      	bne.n	8006a74 <plug_holes+0xf0>
      lfree = pmem;
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <plug_holes+0x140>)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a84:	d00a      	beq.n	8006a9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff ff56 	bl	800693c <ptr_to_mem>
 8006a90:	4604      	mov	r4, r0
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f7ff ff64 	bl	8006960 <mem_to_ptr>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd90      	pop	{r4, r7, pc}
 8006aa4:	20004054 	.word	0x20004054
 8006aa8:	08011888 	.word	0x08011888
 8006aac:	080118b8 	.word	0x080118b8
 8006ab0:	080118d0 	.word	0x080118d0
 8006ab4:	20004058 	.word	0x20004058
 8006ab8:	080118f8 	.word	0x080118f8
 8006abc:	08011914 	.word	0x08011914
 8006ac0:	08011930 	.word	0x08011930
 8006ac4:	20004060 	.word	0x20004060

08006ac8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006ace:	4b1f      	ldr	r3, [pc, #124]	; (8006b4c <mem_init+0x84>)
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <mem_init+0x88>)
 8006ada:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006adc:	4b1c      	ldr	r3, [pc, #112]	; (8006b50 <mem_init+0x88>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006ae8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006af6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006afa:	f7ff ff1f 	bl	800693c <ptr_to_mem>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4a14      	ldr	r2, [pc, #80]	; (8006b54 <mem_init+0x8c>)
 8006b02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <mem_init+0x8c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006b0c:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <mem_init+0x8c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006b14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <mem_init+0x8c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006b1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <mem_init+0x88>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <mem_init+0x90>)
 8006b26:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006b28:	480c      	ldr	r0, [pc, #48]	; (8006b5c <mem_init+0x94>)
 8006b2a:	f009 fced 	bl	8010508 <sys_mutex_new>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d006      	beq.n	8006b42 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <mem_init+0x98>)
 8006b36:	f240 221f 	movw	r2, #543	; 0x21f
 8006b3a:	490a      	ldr	r1, [pc, #40]	; (8006b64 <mem_init+0x9c>)
 8006b3c:	480a      	ldr	r0, [pc, #40]	; (8006b68 <mem_init+0xa0>)
 8006b3e:	f009 fda7 	bl	8010690 <iprintf>
  }
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20007340 	.word	0x20007340
 8006b50:	20004054 	.word	0x20004054
 8006b54:	20004058 	.word	0x20004058
 8006b58:	20004060 	.word	0x20004060
 8006b5c:	2000405c 	.word	0x2000405c
 8006b60:	08011888 	.word	0x08011888
 8006b64:	0801195c 	.word	0x0801195c
 8006b68:	080118d0 	.word	0x080118d0

08006b6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fef3 	bl	8006960 <mem_to_ptr>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff feda 	bl	800693c <ptr_to_mem>
 8006b88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fed4 	bl	800693c <ptr_to_mem>
 8006b94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006b9e:	d818      	bhi.n	8006bd2 <mem_link_valid+0x66>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	885b      	ldrh	r3, [r3, #2]
 8006ba4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006ba8:	d813      	bhi.n	8006bd2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006bae:	8afa      	ldrh	r2, [r7, #22]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d004      	beq.n	8006bbe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	8afa      	ldrh	r2, [r7, #22]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d109      	bne.n	8006bd2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <mem_link_valid+0x74>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d006      	beq.n	8006bd6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	885b      	ldrh	r3, [r3, #2]
 8006bcc:	8afa      	ldrh	r2, [r7, #22]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d001      	beq.n	8006bd6 <mem_link_valid+0x6a>
    return 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <mem_link_valid+0x6c>
  }
  return 1;
 8006bd6:	2301      	movs	r3, #1
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20004058 	.word	0x20004058

08006be4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d070      	beq.n	8006cd4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00d      	beq.n	8006c18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006bfc:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <mem_free+0xf8>)
 8006bfe:	f240 2273 	movw	r2, #627	; 0x273
 8006c02:	4937      	ldr	r1, [pc, #220]	; (8006ce0 <mem_free+0xfc>)
 8006c04:	4837      	ldr	r0, [pc, #220]	; (8006ce4 <mem_free+0x100>)
 8006c06:	f009 fd43 	bl	8010690 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006c0a:	f009 fcdb 	bl	80105c4 <sys_arch_protect>
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f009 fce5 	bl	80105e0 <sys_arch_unprotect>
    return;
 8006c16:	e05e      	b.n	8006cd6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3b08      	subs	r3, #8
 8006c1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006c1e:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <mem_free+0x104>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d306      	bcc.n	8006c36 <mem_free+0x52>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f103 020c 	add.w	r2, r3, #12
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <mem_free+0x108>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d90d      	bls.n	8006c52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <mem_free+0xf8>)
 8006c38:	f240 227f 	movw	r2, #639	; 0x27f
 8006c3c:	492c      	ldr	r1, [pc, #176]	; (8006cf0 <mem_free+0x10c>)
 8006c3e:	4829      	ldr	r0, [pc, #164]	; (8006ce4 <mem_free+0x100>)
 8006c40:	f009 fd26 	bl	8010690 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006c44:	f009 fcbe 	bl	80105c4 <sys_arch_protect>
 8006c48:	6138      	str	r0, [r7, #16]
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f009 fcc8 	bl	80105e0 <sys_arch_unprotect>
    return;
 8006c50:	e041      	b.n	8006cd6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006c52:	4828      	ldr	r0, [pc, #160]	; (8006cf4 <mem_free+0x110>)
 8006c54:	f009 fc74 	bl	8010540 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	791b      	ldrb	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d110      	bne.n	8006c82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006c60:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <mem_free+0xf8>)
 8006c62:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006c66:	4924      	ldr	r1, [pc, #144]	; (8006cf8 <mem_free+0x114>)
 8006c68:	481e      	ldr	r0, [pc, #120]	; (8006ce4 <mem_free+0x100>)
 8006c6a:	f009 fd11 	bl	8010690 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006c6e:	4821      	ldr	r0, [pc, #132]	; (8006cf4 <mem_free+0x110>)
 8006c70:	f009 fc75 	bl	801055e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006c74:	f009 fca6 	bl	80105c4 <sys_arch_protect>
 8006c78:	6178      	str	r0, [r7, #20]
 8006c7a:	6978      	ldr	r0, [r7, #20]
 8006c7c:	f009 fcb0 	bl	80105e0 <sys_arch_unprotect>
    return;
 8006c80:	e029      	b.n	8006cd6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8006c82:	69f8      	ldr	r0, [r7, #28]
 8006c84:	f7ff ff72 	bl	8006b6c <mem_link_valid>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d110      	bne.n	8006cb0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <mem_free+0xf8>)
 8006c90:	f240 2295 	movw	r2, #661	; 0x295
 8006c94:	4919      	ldr	r1, [pc, #100]	; (8006cfc <mem_free+0x118>)
 8006c96:	4813      	ldr	r0, [pc, #76]	; (8006ce4 <mem_free+0x100>)
 8006c98:	f009 fcfa 	bl	8010690 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006c9c:	4815      	ldr	r0, [pc, #84]	; (8006cf4 <mem_free+0x110>)
 8006c9e:	f009 fc5e 	bl	801055e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006ca2:	f009 fc8f 	bl	80105c4 <sys_arch_protect>
 8006ca6:	61b8      	str	r0, [r7, #24]
 8006ca8:	69b8      	ldr	r0, [r7, #24]
 8006caa:	f009 fc99 	bl	80105e0 <sys_arch_unprotect>
    return;
 8006cae:	e012      	b.n	8006cd6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <mem_free+0x11c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d202      	bcs.n	8006cc6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006cc0:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <mem_free+0x11c>)
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006cc6:	69f8      	ldr	r0, [r7, #28]
 8006cc8:	f7ff fe5c 	bl	8006984 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006ccc:	4809      	ldr	r0, [pc, #36]	; (8006cf4 <mem_free+0x110>)
 8006cce:	f009 fc46 	bl	801055e <sys_mutex_unlock>
 8006cd2:	e000      	b.n	8006cd6 <mem_free+0xf2>
    return;
 8006cd4:	bf00      	nop
}
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	08011888 	.word	0x08011888
 8006ce0:	08011978 	.word	0x08011978
 8006ce4:	080118d0 	.word	0x080118d0
 8006ce8:	20004054 	.word	0x20004054
 8006cec:	20004058 	.word	0x20004058
 8006cf0:	0801199c 	.word	0x0801199c
 8006cf4:	2000405c 	.word	0x2000405c
 8006cf8:	080119b8 	.word	0x080119b8
 8006cfc:	080119e0 	.word	0x080119e0
 8006d00:	20004060 	.word	0x20004060

08006d04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006d10:	887b      	ldrh	r3, [r7, #2]
 8006d12:	3303      	adds	r3, #3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006d1c:	8bfb      	ldrh	r3, [r7, #30]
 8006d1e:	2b0b      	cmp	r3, #11
 8006d20:	d801      	bhi.n	8006d26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006d22:	230c      	movs	r3, #12
 8006d24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006d26:	8bfb      	ldrh	r3, [r7, #30]
 8006d28:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d2c:	d803      	bhi.n	8006d36 <mem_trim+0x32>
 8006d2e:	8bfa      	ldrh	r2, [r7, #30]
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d201      	bcs.n	8006d3a <mem_trim+0x36>
    return NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e0d8      	b.n	8006eec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006d3a:	4b6e      	ldr	r3, [pc, #440]	; (8006ef4 <mem_trim+0x1f0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d304      	bcc.n	8006d4e <mem_trim+0x4a>
 8006d44:	4b6c      	ldr	r3, [pc, #432]	; (8006ef8 <mem_trim+0x1f4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d306      	bcc.n	8006d5c <mem_trim+0x58>
 8006d4e:	4b6b      	ldr	r3, [pc, #428]	; (8006efc <mem_trim+0x1f8>)
 8006d50:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006d54:	496a      	ldr	r1, [pc, #424]	; (8006f00 <mem_trim+0x1fc>)
 8006d56:	486b      	ldr	r0, [pc, #428]	; (8006f04 <mem_trim+0x200>)
 8006d58:	f009 fc9a 	bl	8010690 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006d5c:	4b65      	ldr	r3, [pc, #404]	; (8006ef4 <mem_trim+0x1f0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d304      	bcc.n	8006d70 <mem_trim+0x6c>
 8006d66:	4b64      	ldr	r3, [pc, #400]	; (8006ef8 <mem_trim+0x1f4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d307      	bcc.n	8006d80 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006d70:	f009 fc28 	bl	80105c4 <sys_arch_protect>
 8006d74:	60b8      	str	r0, [r7, #8]
 8006d76:	68b8      	ldr	r0, [r7, #8]
 8006d78:	f009 fc32 	bl	80105e0 <sys_arch_unprotect>
    return rmem;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	e0b5      	b.n	8006eec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3b08      	subs	r3, #8
 8006d84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006d86:	69b8      	ldr	r0, [r7, #24]
 8006d88:	f7ff fdea 	bl	8006960 <mem_to_ptr>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	881a      	ldrh	r2, [r3, #0]
 8006d94:	8afb      	ldrh	r3, [r7, #22]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b08      	subs	r3, #8
 8006d9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006d9e:	8bfa      	ldrh	r2, [r7, #30]
 8006da0:	8abb      	ldrh	r3, [r7, #20]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d906      	bls.n	8006db4 <mem_trim+0xb0>
 8006da6:	4b55      	ldr	r3, [pc, #340]	; (8006efc <mem_trim+0x1f8>)
 8006da8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006dac:	4956      	ldr	r1, [pc, #344]	; (8006f08 <mem_trim+0x204>)
 8006dae:	4855      	ldr	r0, [pc, #340]	; (8006f04 <mem_trim+0x200>)
 8006db0:	f009 fc6e 	bl	8010690 <iprintf>
  if (newsize > size) {
 8006db4:	8bfa      	ldrh	r2, [r7, #30]
 8006db6:	8abb      	ldrh	r3, [r7, #20]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d901      	bls.n	8006dc0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e095      	b.n	8006eec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8006dc0:	8bfa      	ldrh	r2, [r7, #30]
 8006dc2:	8abb      	ldrh	r3, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d101      	bne.n	8006dcc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	e08f      	b.n	8006eec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006dcc:	484f      	ldr	r0, [pc, #316]	; (8006f0c <mem_trim+0x208>)
 8006dce:	f009 fbb7 	bl	8010540 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff fdb0 	bl	800693c <ptr_to_mem>
 8006ddc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d13f      	bne.n	8006e66 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006dee:	d106      	bne.n	8006dfe <mem_trim+0xfa>
 8006df0:	4b42      	ldr	r3, [pc, #264]	; (8006efc <mem_trim+0x1f8>)
 8006df2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006df6:	4946      	ldr	r1, [pc, #280]	; (8006f10 <mem_trim+0x20c>)
 8006df8:	4842      	ldr	r0, [pc, #264]	; (8006f04 <mem_trim+0x200>)
 8006dfa:	f009 fc49 	bl	8010690 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006e04:	8afa      	ldrh	r2, [r7, #22]
 8006e06:	8bfb      	ldrh	r3, [r7, #30]
 8006e08:	4413      	add	r3, r2
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006e10:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <mem_trim+0x210>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d106      	bne.n	8006e28 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fd8d 	bl	800693c <ptr_to_mem>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4a3b      	ldr	r2, [pc, #236]	; (8006f14 <mem_trim+0x210>)
 8006e26:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fd86 	bl	800693c <ptr_to_mem>
 8006e30:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2200      	movs	r2, #0
 8006e36:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	89ba      	ldrh	r2, [r7, #12]
 8006e3c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	8afa      	ldrh	r2, [r7, #22]
 8006e42:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	89fa      	ldrh	r2, [r7, #14]
 8006e48:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006e52:	d047      	beq.n	8006ee4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fd6f 	bl	800693c <ptr_to_mem>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	89fb      	ldrh	r3, [r7, #14]
 8006e62:	8053      	strh	r3, [r2, #2]
 8006e64:	e03e      	b.n	8006ee4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006e66:	8bfb      	ldrh	r3, [r7, #30]
 8006e68:	f103 0214 	add.w	r2, r3, #20
 8006e6c:	8abb      	ldrh	r3, [r7, #20]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d838      	bhi.n	8006ee4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006e72:	8afa      	ldrh	r2, [r7, #22]
 8006e74:	8bfb      	ldrh	r3, [r7, #30]
 8006e76:	4413      	add	r3, r2
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006e86:	d106      	bne.n	8006e96 <mem_trim+0x192>
 8006e88:	4b1c      	ldr	r3, [pc, #112]	; (8006efc <mem_trim+0x1f8>)
 8006e8a:	f240 3216 	movw	r2, #790	; 0x316
 8006e8e:	4920      	ldr	r1, [pc, #128]	; (8006f10 <mem_trim+0x20c>)
 8006e90:	481c      	ldr	r0, [pc, #112]	; (8006f04 <mem_trim+0x200>)
 8006e92:	f009 fbfd 	bl	8010690 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fd4f 	bl	800693c <ptr_to_mem>
 8006e9e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006ea0:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <mem_trim+0x210>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d202      	bcs.n	8006eb0 <mem_trim+0x1ac>
      lfree = mem2;
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <mem_trim+0x210>)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	881a      	ldrh	r2, [r3, #0]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	8afa      	ldrh	r2, [r7, #22]
 8006ec2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	89fa      	ldrh	r2, [r7, #14]
 8006ec8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006ed2:	d007      	beq.n	8006ee4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fd2f 	bl	800693c <ptr_to_mem>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006ee4:	4809      	ldr	r0, [pc, #36]	; (8006f0c <mem_trim+0x208>)
 8006ee6:	f009 fb3a 	bl	801055e <sys_mutex_unlock>
  return rmem;
 8006eea:	687b      	ldr	r3, [r7, #4]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20004054 	.word	0x20004054
 8006ef8:	20004058 	.word	0x20004058
 8006efc:	08011888 	.word	0x08011888
 8006f00:	08011a14 	.word	0x08011a14
 8006f04:	080118d0 	.word	0x080118d0
 8006f08:	08011a2c 	.word	0x08011a2c
 8006f0c:	2000405c 	.word	0x2000405c
 8006f10:	08011a4c 	.word	0x08011a4c
 8006f14:	20004060 	.word	0x20004060

08006f18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <mem_malloc+0x14>
    return NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e0e2      	b.n	80070f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	3303      	adds	r3, #3
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f023 0303 	bic.w	r3, r3, #3
 8006f36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006f38:	8bbb      	ldrh	r3, [r7, #28]
 8006f3a:	2b0b      	cmp	r3, #11
 8006f3c:	d801      	bhi.n	8006f42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006f3e:	230c      	movs	r3, #12
 8006f40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006f42:	8bbb      	ldrh	r3, [r7, #28]
 8006f44:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006f48:	d803      	bhi.n	8006f52 <mem_malloc+0x3a>
 8006f4a:	8bba      	ldrh	r2, [r7, #28]
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d201      	bcs.n	8006f56 <mem_malloc+0x3e>
    return NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e0cd      	b.n	80070f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006f56:	4869      	ldr	r0, [pc, #420]	; (80070fc <mem_malloc+0x1e4>)
 8006f58:	f009 faf2 	bl	8010540 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <mem_malloc+0x1e8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fcfd 	bl	8006960 <mem_to_ptr>
 8006f66:	4603      	mov	r3, r0
 8006f68:	83fb      	strh	r3, [r7, #30]
 8006f6a:	e0b7      	b.n	80070dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006f6c:	8bfb      	ldrh	r3, [r7, #30]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff fce4 	bl	800693c <ptr_to_mem>
 8006f74:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	791b      	ldrb	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 80a7 	bne.w	80070ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	8bfb      	ldrh	r3, [r7, #30]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	f1a3 0208 	sub.w	r2, r3, #8
 8006f8e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f0c0 809c 	bcc.w	80070ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	8bfb      	ldrh	r3, [r7, #30]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f1a3 0208 	sub.w	r2, r3, #8
 8006fa4:	8bbb      	ldrh	r3, [r7, #28]
 8006fa6:	3314      	adds	r3, #20
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d333      	bcc.n	8007014 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006fac:	8bfa      	ldrh	r2, [r7, #30]
 8006fae:	8bbb      	ldrh	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006fb8:	8a7b      	ldrh	r3, [r7, #18]
 8006fba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006fbe:	d106      	bne.n	8006fce <mem_malloc+0xb6>
 8006fc0:	4b50      	ldr	r3, [pc, #320]	; (8007104 <mem_malloc+0x1ec>)
 8006fc2:	f240 3287 	movw	r2, #903	; 0x387
 8006fc6:	4950      	ldr	r1, [pc, #320]	; (8007108 <mem_malloc+0x1f0>)
 8006fc8:	4850      	ldr	r0, [pc, #320]	; (800710c <mem_malloc+0x1f4>)
 8006fca:	f009 fb61 	bl	8010690 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006fce:	8a7b      	ldrh	r3, [r7, #18]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff fcb3 	bl	800693c <ptr_to_mem>
 8006fd6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	881a      	ldrh	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8bfa      	ldrh	r2, [r7, #30]
 8006fea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	8a7a      	ldrh	r2, [r7, #18]
 8006ff0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007000:	d00b      	beq.n	800701a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fc98 	bl	800693c <ptr_to_mem>
 800700c:	4602      	mov	r2, r0
 800700e:	8a7b      	ldrh	r3, [r7, #18]
 8007010:	8053      	strh	r3, [r2, #2]
 8007012:	e002      	b.n	800701a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2201      	movs	r2, #1
 8007018:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <mem_malloc+0x1e8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	429a      	cmp	r2, r3
 8007022:	d127      	bne.n	8007074 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007024:	4b36      	ldr	r3, [pc, #216]	; (8007100 <mem_malloc+0x1e8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800702a:	e005      	b.n	8007038 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fc83 	bl	800693c <ptr_to_mem>
 8007036:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	791b      	ldrb	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <mem_malloc+0x132>
 8007040:	4b33      	ldr	r3, [pc, #204]	; (8007110 <mem_malloc+0x1f8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	429a      	cmp	r2, r3
 8007048:	d1f0      	bne.n	800702c <mem_malloc+0x114>
          }
          lfree = cur;
 800704a:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <mem_malloc+0x1e8>)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007050:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <mem_malloc+0x1e8>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4b2e      	ldr	r3, [pc, #184]	; (8007110 <mem_malloc+0x1f8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d00b      	beq.n	8007074 <mem_malloc+0x15c>
 800705c:	4b28      	ldr	r3, [pc, #160]	; (8007100 <mem_malloc+0x1e8>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	791b      	ldrb	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <mem_malloc+0x15c>
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <mem_malloc+0x1ec>)
 8007068:	f240 32b5 	movw	r2, #949	; 0x3b5
 800706c:	4929      	ldr	r1, [pc, #164]	; (8007114 <mem_malloc+0x1fc>)
 800706e:	4827      	ldr	r0, [pc, #156]	; (800710c <mem_malloc+0x1f4>)
 8007070:	f009 fb0e 	bl	8010690 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007074:	4821      	ldr	r0, [pc, #132]	; (80070fc <mem_malloc+0x1e4>)
 8007076:	f009 fa72 	bl	801055e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800707a:	8bba      	ldrh	r2, [r7, #28]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	3308      	adds	r3, #8
 8007082:	4a23      	ldr	r2, [pc, #140]	; (8007110 <mem_malloc+0x1f8>)
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	4293      	cmp	r3, r2
 8007088:	d906      	bls.n	8007098 <mem_malloc+0x180>
 800708a:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <mem_malloc+0x1ec>)
 800708c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007090:	4921      	ldr	r1, [pc, #132]	; (8007118 <mem_malloc+0x200>)
 8007092:	481e      	ldr	r0, [pc, #120]	; (800710c <mem_malloc+0x1f4>)
 8007094:	f009 fafc 	bl	8010690 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <mem_malloc+0x198>
 80070a2:	4b18      	ldr	r3, [pc, #96]	; (8007104 <mem_malloc+0x1ec>)
 80070a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80070a8:	491c      	ldr	r1, [pc, #112]	; (800711c <mem_malloc+0x204>)
 80070aa:	4818      	ldr	r0, [pc, #96]	; (800710c <mem_malloc+0x1f4>)
 80070ac:	f009 faf0 	bl	8010690 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d006      	beq.n	80070c8 <mem_malloc+0x1b0>
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <mem_malloc+0x1ec>)
 80070bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80070c0:	4917      	ldr	r1, [pc, #92]	; (8007120 <mem_malloc+0x208>)
 80070c2:	4812      	ldr	r0, [pc, #72]	; (800710c <mem_malloc+0x1f4>)
 80070c4:	f009 fae4 	bl	8010690 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3308      	adds	r3, #8
 80070cc:	e011      	b.n	80070f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80070ce:	8bfb      	ldrh	r3, [r7, #30]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fc33 	bl	800693c <ptr_to_mem>
 80070d6:	4603      	mov	r3, r0
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80070dc:	8bfa      	ldrh	r2, [r7, #30]
 80070de:	8bbb      	ldrh	r3, [r7, #28]
 80070e0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80070e4:	429a      	cmp	r2, r3
 80070e6:	f4ff af41 	bcc.w	8006f6c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80070ea:	4804      	ldr	r0, [pc, #16]	; (80070fc <mem_malloc+0x1e4>)
 80070ec:	f009 fa37 	bl	801055e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2000405c 	.word	0x2000405c
 8007100:	20004060 	.word	0x20004060
 8007104:	08011888 	.word	0x08011888
 8007108:	08011a4c 	.word	0x08011a4c
 800710c:	080118d0 	.word	0x080118d0
 8007110:	20004058 	.word	0x20004058
 8007114:	08011a60 	.word	0x08011a60
 8007118:	08011a7c 	.word	0x08011a7c
 800711c:	08011aac 	.word	0x08011aac
 8007120:	08011adc 	.word	0x08011adc

08007124 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	3303      	adds	r3, #3
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e011      	b.n	800716a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	885b      	ldrh	r3, [r3, #2]
 800716e:	461a      	mov	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4293      	cmp	r3, r2
 8007174:	dbe7      	blt.n	8007146 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800718a:	2300      	movs	r3, #0
 800718c:	80fb      	strh	r3, [r7, #6]
 800718e:	e009      	b.n	80071a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <memp_init+0x30>)
 8007194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff ffc3 	bl	8007124 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	3301      	adds	r3, #1
 80071a2:	80fb      	strh	r3, [r7, #6]
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d9f2      	bls.n	8007190 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	080142dc 	.word	0x080142dc

080071b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80071c0:	f009 fa00 	bl	80105c4 <sys_arch_protect>
 80071c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d015      	beq.n	8007200 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <do_memp_malloc_pool+0x3e>
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <do_memp_malloc_pool+0x58>)
 80071ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 80071ee:	4909      	ldr	r1, [pc, #36]	; (8007214 <do_memp_malloc_pool+0x5c>)
 80071f0:	4809      	ldr	r0, [pc, #36]	; (8007218 <do_memp_malloc_pool+0x60>)
 80071f2:	f009 fa4d 	bl	8010690 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f009 f9f2 	bl	80105e0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	e003      	b.n	8007208 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f009 f9ed 	bl	80105e0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	08011b00 	.word	0x08011b00
 8007214:	08011b30 	.word	0x08011b30
 8007218:	08011b54 	.word	0x08011b54

0800721c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d908      	bls.n	800723e <memp_malloc+0x22>
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <memp_malloc+0x3c>)
 800722e:	f240 1257 	movw	r2, #343	; 0x157
 8007232:	490a      	ldr	r1, [pc, #40]	; (800725c <memp_malloc+0x40>)
 8007234:	480a      	ldr	r0, [pc, #40]	; (8007260 <memp_malloc+0x44>)
 8007236:	f009 fa2b 	bl	8010690 <iprintf>
 800723a:	2300      	movs	r3, #0
 800723c:	e008      	b.n	8007250 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	4a08      	ldr	r2, [pc, #32]	; (8007264 <memp_malloc+0x48>)
 8007242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff ffb6 	bl	80071b8 <do_memp_malloc_pool>
 800724c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	08011b00 	.word	0x08011b00
 800725c:	08011b90 	.word	0x08011b90
 8007260:	08011b54 	.word	0x08011b54
 8007264:	080142dc 	.word	0x080142dc

08007268 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d006      	beq.n	800728a <do_memp_free_pool+0x22>
 800727c:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <do_memp_free_pool+0x4c>)
 800727e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007282:	490d      	ldr	r1, [pc, #52]	; (80072b8 <do_memp_free_pool+0x50>)
 8007284:	480d      	ldr	r0, [pc, #52]	; (80072bc <do_memp_free_pool+0x54>)
 8007286:	f009 fa03 	bl	8010690 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800728e:	f009 f999 	bl	80105c4 <sys_arch_protect>
 8007292:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80072a6:	68b8      	ldr	r0, [r7, #8]
 80072a8:	f009 f99a 	bl	80105e0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	08011b00 	.word	0x08011b00
 80072b8:	08011bb0 	.word	0x08011bb0
 80072bc:	08011b54 	.word	0x08011b54

080072c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	2b0c      	cmp	r3, #12
 80072d0:	d907      	bls.n	80072e2 <memp_free+0x22>
 80072d2:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <memp_free+0x44>)
 80072d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80072d8:	490b      	ldr	r1, [pc, #44]	; (8007308 <memp_free+0x48>)
 80072da:	480c      	ldr	r0, [pc, #48]	; (800730c <memp_free+0x4c>)
 80072dc:	f009 f9d8 	bl	8010690 <iprintf>
 80072e0:	e00c      	b.n	80072fc <memp_free+0x3c>

  if (mem == NULL) {
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	4a09      	ldr	r2, [pc, #36]	; (8007310 <memp_free+0x50>)
 80072ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ffb8 	bl	8007268 <do_memp_free_pool>
 80072f8:	e000      	b.n	80072fc <memp_free+0x3c>
    return;
 80072fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	08011b00 	.word	0x08011b00
 8007308:	08011bd0 	.word	0x08011bd0
 800730c:	08011b54 	.word	0x08011b54
 8007310:	080142dc 	.word	0x080142dc

08007314 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <netif_add+0x26>
 8007338:	4b57      	ldr	r3, [pc, #348]	; (8007498 <netif_add+0x174>)
 800733a:	f240 1227 	movw	r2, #295	; 0x127
 800733e:	4957      	ldr	r1, [pc, #348]	; (800749c <netif_add+0x178>)
 8007340:	4857      	ldr	r0, [pc, #348]	; (80074a0 <netif_add+0x17c>)
 8007342:	f009 f9a5 	bl	8010690 <iprintf>
 8007346:	2300      	movs	r3, #0
 8007348:	e0a2      	b.n	8007490 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d108      	bne.n	8007362 <netif_add+0x3e>
 8007350:	4b51      	ldr	r3, [pc, #324]	; (8007498 <netif_add+0x174>)
 8007352:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007356:	4953      	ldr	r1, [pc, #332]	; (80074a4 <netif_add+0x180>)
 8007358:	4851      	ldr	r0, [pc, #324]	; (80074a0 <netif_add+0x17c>)
 800735a:	f009 f999 	bl	8010690 <iprintf>
 800735e:	2300      	movs	r3, #0
 8007360:	e096      	b.n	8007490 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007368:	4b4f      	ldr	r3, [pc, #316]	; (80074a8 <netif_add+0x184>)
 800736a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007372:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <netif_add+0x184>)
 8007374:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800737c:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <netif_add+0x184>)
 800737e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a45      	ldr	r2, [pc, #276]	; (80074ac <netif_add+0x188>)
 8007396:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a3a      	ldr	r2, [r7, #32]
 80073b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80073b2:	4b3f      	ldr	r3, [pc, #252]	; (80074b0 <netif_add+0x18c>)
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f913 	bl	80075f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <netif_add+0xba>
    return NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	e058      	b.n	8007490 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073e4:	2bff      	cmp	r3, #255	; 0xff
 80073e6:	d103      	bne.n	80073f0 <netif_add+0xcc>
        netif->num = 0;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80073f4:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <netif_add+0x190>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e02b      	b.n	8007454 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	429a      	cmp	r2, r3
 8007402:	d106      	bne.n	8007412 <netif_add+0xee>
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <netif_add+0x174>)
 8007406:	f240 128b 	movw	r2, #395	; 0x18b
 800740a:	492b      	ldr	r1, [pc, #172]	; (80074b8 <netif_add+0x194>)
 800740c:	4824      	ldr	r0, [pc, #144]	; (80074a0 <netif_add+0x17c>)
 800740e:	f009 f93f 	bl	8010690 <iprintf>
        num_netifs++;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3301      	adds	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	dd06      	ble.n	800742c <netif_add+0x108>
 800741e:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <netif_add+0x174>)
 8007420:	f240 128d 	movw	r2, #397	; 0x18d
 8007424:	4925      	ldr	r1, [pc, #148]	; (80074bc <netif_add+0x198>)
 8007426:	481e      	ldr	r0, [pc, #120]	; (80074a0 <netif_add+0x17c>)
 8007428:	f009 f932 	bl	8010690 <iprintf>
        if (netif2->num == netif->num) {
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007438:	429a      	cmp	r2, r3
 800743a:	d108      	bne.n	800744e <netif_add+0x12a>
          netif->num++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007442:	3301      	adds	r3, #1
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800744c:	e005      	b.n	800745a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1d0      	bne.n	80073fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1be      	bne.n	80073de <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007466:	2bfe      	cmp	r3, #254	; 0xfe
 8007468:	d103      	bne.n	8007472 <netif_add+0x14e>
    netif_num = 0;
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <netif_add+0x18c>)
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e006      	b.n	8007480 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007478:	3301      	adds	r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <netif_add+0x18c>)
 800747e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <netif_add+0x190>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007488:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <netif_add+0x190>)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	08011bec 	.word	0x08011bec
 800749c:	08011c80 	.word	0x08011c80
 80074a0:	08011c3c 	.word	0x08011c3c
 80074a4:	08011c9c 	.word	0x08011c9c
 80074a8:	08014350 	.word	0x08014350
 80074ac:	080078cf 	.word	0x080078cf
 80074b0:	20004098 	.word	0x20004098
 80074b4:	2000cbec 	.word	0x2000cbec
 80074b8:	08011cc0 	.word	0x08011cc0
 80074bc:	08011cd4 	.word	0x08011cd4

080074c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f002 fb7d 	bl	8009bcc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f006 fc8d 	bl	800ddf4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <netif_do_set_ipaddr+0x20>
 80074f6:	4b1d      	ldr	r3, [pc, #116]	; (800756c <netif_do_set_ipaddr+0x88>)
 80074f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80074fc:	491c      	ldr	r1, [pc, #112]	; (8007570 <netif_do_set_ipaddr+0x8c>)
 80074fe:	481d      	ldr	r0, [pc, #116]	; (8007574 <netif_do_set_ipaddr+0x90>)
 8007500:	f009 f8c6 	bl	8010690 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <netif_do_set_ipaddr+0x34>
 800750a:	4b18      	ldr	r3, [pc, #96]	; (800756c <netif_do_set_ipaddr+0x88>)
 800750c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007510:	4917      	ldr	r1, [pc, #92]	; (8007570 <netif_do_set_ipaddr+0x8c>)
 8007512:	4818      	ldr	r0, [pc, #96]	; (8007574 <netif_do_set_ipaddr+0x90>)
 8007514:	f009 f8bc 	bl	8010690 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3304      	adds	r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d01c      	beq.n	8007560 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3304      	adds	r3, #4
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007536:	f107 0314 	add.w	r3, r7, #20
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ffbf 	bl	80074c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <netif_do_set_ipaddr+0x6a>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	e000      	b.n	8007550 <netif_do_set_ipaddr+0x6c>
 800754e:	2300      	movs	r3, #0
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007554:	2101      	movs	r1, #1
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f8d2 	bl	8007700 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	08011bec 	.word	0x08011bec
 8007570:	08011d04 	.word	0x08011d04
 8007574:	08011c3c 	.word	0x08011c3c

08007578 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3308      	adds	r3, #8
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d00a      	beq.n	80075a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <netif_do_set_netmask+0x26>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	e000      	b.n	80075a0 <netif_do_set_netmask+0x28>
 800759e:	2300      	movs	r3, #0
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	330c      	adds	r3, #12
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d00a      	beq.n	80075e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <netif_do_set_gw+0x26>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	e000      	b.n	80075de <netif_do_set_gw+0x28>
 80075dc:	2300      	movs	r3, #0
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <netif_set_addr+0x90>)
 8007612:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800761a:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <netif_set_addr+0x90>)
 800761c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007624:	4b17      	ldr	r3, [pc, #92]	; (8007684 <netif_set_addr+0x90>)
 8007626:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <netif_set_addr+0x42>
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <netif_set_addr+0x46>
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <netif_set_addr+0x48>
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	461a      	mov	r2, r3
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff ff49 	bl	80074e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff8e 	bl	8007578 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff ffa8 	bl	80075b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800766c:	f107 0310 	add.w	r3, r7, #16
 8007670:	461a      	mov	r2, r3
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff35 	bl	80074e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800767a:	bf00      	nop
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	08014350 	.word	0x08014350

08007688 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007690:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <netif_set_default+0x1c>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000cbf0 	.word	0x2000cbf0

080076a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d107      	bne.n	80076c6 <netif_set_up+0x1e>
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <netif_set_up+0x4c>)
 80076b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80076bc:	490e      	ldr	r1, [pc, #56]	; (80076f8 <netif_set_up+0x50>)
 80076be:	480f      	ldr	r0, [pc, #60]	; (80076fc <netif_set_up+0x54>)
 80076c0:	f008 ffe6 	bl	8010690 <iprintf>
 80076c4:	e013      	b.n	80076ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10c      	bne.n	80076ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80076e6:	2103      	movs	r1, #3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f809 	bl	8007700 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	08011bec 	.word	0x08011bec
 80076f8:	08011d74 	.word	0x08011d74
 80076fc:	08011c3c 	.word	0x08011c3c

08007700 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <netif_issue_reports+0x20>
 8007712:	4b18      	ldr	r3, [pc, #96]	; (8007774 <netif_issue_reports+0x74>)
 8007714:	f240 326d 	movw	r2, #877	; 0x36d
 8007718:	4917      	ldr	r1, [pc, #92]	; (8007778 <netif_issue_reports+0x78>)
 800771a:	4818      	ldr	r0, [pc, #96]	; (800777c <netif_issue_reports+0x7c>)
 800771c:	f008 ffb8 	bl	8010690 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01e      	beq.n	800776c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007734:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007738:	2b00      	cmp	r3, #0
 800773a:	d017      	beq.n	800776c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d013      	beq.n	800776e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00e      	beq.n	800776e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f007 faaf 	bl	800ecc8 <etharp_request>
 800776a:	e000      	b.n	800776e <netif_issue_reports+0x6e>
    return;
 800776c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	08011bec 	.word	0x08011bec
 8007778:	08011d90 	.word	0x08011d90
 800777c:	08011c3c 	.word	0x08011c3c

08007780 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <netif_set_down+0x1e>
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <netif_set_down+0x58>)
 8007790:	f240 329b 	movw	r2, #923	; 0x39b
 8007794:	4911      	ldr	r1, [pc, #68]	; (80077dc <netif_set_down+0x5c>)
 8007796:	4812      	ldr	r0, [pc, #72]	; (80077e0 <netif_set_down+0x60>)
 8007798:	f008 ff7a 	bl	8010690 <iprintf>
 800779c:	e019      	b.n	80077d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d012      	beq.n	80077d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f006 fe39 	bl	800e444 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	08011bec 	.word	0x08011bec
 80077dc:	08011db4 	.word	0x08011db4
 80077e0:	08011c3c 	.word	0x08011c3c

080077e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <netif_set_link_up+0x1e>
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <netif_set_link_up+0x5c>)
 80077f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80077f8:	4912      	ldr	r1, [pc, #72]	; (8007844 <netif_set_link_up+0x60>)
 80077fa:	4813      	ldr	r0, [pc, #76]	; (8007848 <netif_set_link_up+0x64>)
 80077fc:	f008 ff48 	bl	8010690 <iprintf>
 8007800:	e01b      	b.n	800783a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d114      	bne.n	800783a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007816:	f043 0304 	orr.w	r3, r3, #4
 800781a:	b2da      	uxtb	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007822:	2103      	movs	r1, #3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff6b 	bl	8007700 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <netif_set_link_up+0x56>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	08011bec 	.word	0x08011bec
 8007844:	08011dd4 	.word	0x08011dd4
 8007848:	08011c3c 	.word	0x08011c3c

0800784c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d107      	bne.n	800786a <netif_set_link_down+0x1e>
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <netif_set_link_down+0x54>)
 800785c:	f240 4206 	movw	r2, #1030	; 0x406
 8007860:	4910      	ldr	r1, [pc, #64]	; (80078a4 <netif_set_link_down+0x58>)
 8007862:	4811      	ldr	r0, [pc, #68]	; (80078a8 <netif_set_link_down+0x5c>)
 8007864:	f008 ff14 	bl	8010690 <iprintf>
 8007868:	e017      	b.n	800789a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d010      	beq.n	800789a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800787e:	f023 0304 	bic.w	r3, r3, #4
 8007882:	b2da      	uxtb	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <netif_set_link_down+0x4e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08011bec 	.word	0x08011bec
 80078a4:	08011df8 	.word	0x08011df8
 80078a8:	08011c3c 	.word	0x08011c3c

080078ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	61da      	str	r2, [r3, #28]
  }
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80078da:	f06f 030b 	mvn.w	r3, #11
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d013      	beq.n	8007924 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <netif_get_by_index+0x48>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	e00c      	b.n	800791e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800790a:	3301      	adds	r3, #1
 800790c:	b2db      	uxtb	r3, r3
 800790e:	79fa      	ldrb	r2, [r7, #7]
 8007910:	429a      	cmp	r2, r3
 8007912:	d101      	bne.n	8007918 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	e006      	b.n	8007926 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1ef      	bne.n	8007904 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	2000cbec 	.word	0x2000cbec

08007938 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800793e:	f008 fe41 	bl	80105c4 <sys_arch_protect>
 8007942:	6038      	str	r0, [r7, #0]
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <pbuf_free_ooseq+0x44>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	6838      	ldr	r0, [r7, #0]
 800794c:	f008 fe48 	bl	80105e0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <pbuf_free_ooseq+0x48>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	e00a      	b.n	800796e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f002 f971 	bl	8009c48 <tcp_free_ooseq>
      return;
 8007966:	e005      	b.n	8007974 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	607b      	str	r3, [r7, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1f1      	bne.n	8007958 <pbuf_free_ooseq+0x20>
    }
  }
}
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	2000cbf4 	.word	0x2000cbf4
 8007980:	2000cbfc 	.word	0x2000cbfc

08007984 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800798c:	f7ff ffd4 	bl	8007938 <pbuf_free_ooseq>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800799e:	f008 fe11 	bl	80105c4 <sys_arch_protect>
 80079a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <pbuf_pool_is_empty+0x4c>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <pbuf_pool_is_empty+0x4c>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f008 fe15 	bl	80105e0 <sys_arch_unprotect>

  if (!queued) {
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10f      	bne.n	80079dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80079bc:	2100      	movs	r1, #0
 80079be:	480a      	ldr	r0, [pc, #40]	; (80079e8 <pbuf_pool_is_empty+0x50>)
 80079c0:	f7fe feec 	bl	800679c <tcpip_try_callback>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <pbuf_pool_is_empty+0x44>
 80079ca:	f008 fdfb 	bl	80105c4 <sys_arch_protect>
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <pbuf_pool_is_empty+0x4c>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f008 fe02 	bl	80105e0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000cbf4 	.word	0x2000cbf4
 80079e8:	08007985 	.word	0x08007985

080079ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	460b      	mov	r3, r1
 80079fc:	80fb      	strh	r3, [r7, #6]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88ba      	ldrh	r2, [r7, #4]
 8007a18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007a1a:	8b3b      	ldrh	r3, [r7, #24]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	7f3a      	ldrb	r2, [r7, #28]
 8007a26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	73da      	strb	r2, [r3, #15]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	; 0x30
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	80bb      	strh	r3, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007a5c:	d07f      	beq.n	8007b5e <pbuf_alloc+0x11e>
 8007a5e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007a62:	f300 80c8 	bgt.w	8007bf6 <pbuf_alloc+0x1b6>
 8007a66:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007a6a:	d010      	beq.n	8007a8e <pbuf_alloc+0x4e>
 8007a6c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007a70:	f300 80c1 	bgt.w	8007bf6 <pbuf_alloc+0x1b6>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d002      	beq.n	8007a7e <pbuf_alloc+0x3e>
 8007a78:	2b41      	cmp	r3, #65	; 0x41
 8007a7a:	f040 80bc 	bne.w	8007bf6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	88bb      	ldrh	r3, [r7, #4]
 8007a82:	4619      	mov	r1, r3
 8007a84:	2000      	movs	r0, #0
 8007a86:	f000 f8d1 	bl	8007c2c <pbuf_alloc_reference>
 8007a8a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007a8c:	e0bd      	b.n	8007c0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007a96:	88bb      	ldrh	r3, [r7, #4]
 8007a98:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a9a:	200c      	movs	r0, #12
 8007a9c:	f7ff fbbe 	bl	800721c <memp_malloc>
 8007aa0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007aa8:	f7ff ff76 	bl	8007998 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ab4:	f000 faa8 	bl	8008008 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e0a7      	b.n	8007c0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007abe:	3303      	adds	r3, #3
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	8b7a      	ldrh	r2, [r7, #26]
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	bf28      	it	cs
 8007ad4:	4613      	movcs	r3, r2
 8007ad6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007ad8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ada:	3310      	adds	r3, #16
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3303      	adds	r3, #3
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	89f9      	ldrh	r1, [r7, #14]
 8007aea:	8b7a      	ldrh	r2, [r7, #26]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	887b      	ldrh	r3, [r7, #2]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	460b      	mov	r3, r1
 8007af6:	4601      	mov	r1, r0
 8007af8:	6938      	ldr	r0, [r7, #16]
 8007afa:	f7ff ff77 	bl	80079ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d006      	beq.n	8007b18 <pbuf_alloc+0xd8>
 8007b0a:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <pbuf_alloc+0x1d4>)
 8007b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b10:	4941      	ldr	r1, [pc, #260]	; (8007c18 <pbuf_alloc+0x1d8>)
 8007b12:	4842      	ldr	r0, [pc, #264]	; (8007c1c <pbuf_alloc+0x1dc>)
 8007b14:	f008 fdbc 	bl	8010690 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b1a:	3303      	adds	r3, #3
 8007b1c:	f023 0303 	bic.w	r3, r3, #3
 8007b20:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007b24:	d106      	bne.n	8007b34 <pbuf_alloc+0xf4>
 8007b26:	4b3b      	ldr	r3, [pc, #236]	; (8007c14 <pbuf_alloc+0x1d4>)
 8007b28:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007b2c:	493c      	ldr	r1, [pc, #240]	; (8007c20 <pbuf_alloc+0x1e0>)
 8007b2e:	483b      	ldr	r0, [pc, #236]	; (8007c1c <pbuf_alloc+0x1dc>)
 8007b30:	f008 fdae 	bl	8010690 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3e:	e002      	b.n	8007b46 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007b4a:	8b7a      	ldrh	r2, [r7, #26]
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007b56:	8b7b      	ldrh	r3, [r7, #26]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d19e      	bne.n	8007a9a <pbuf_alloc+0x5a>
      break;
 8007b5c:	e055      	b.n	8007c0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007b5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b60:	3303      	adds	r3, #3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f023 0303 	bic.w	r3, r3, #3
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	88bb      	ldrh	r3, [r7, #4]
 8007b6c:	3303      	adds	r3, #3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007b7a:	8b3b      	ldrh	r3, [r7, #24]
 8007b7c:	3310      	adds	r3, #16
 8007b7e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b80:	8b3a      	ldrh	r2, [r7, #24]
 8007b82:	88bb      	ldrh	r3, [r7, #4]
 8007b84:	3303      	adds	r3, #3
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d306      	bcc.n	8007b9c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007b8e:	8afa      	ldrh	r2, [r7, #22]
 8007b90:	88bb      	ldrh	r3, [r7, #4]
 8007b92:	3303      	adds	r3, #3
 8007b94:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d201      	bcs.n	8007ba0 <pbuf_alloc+0x160>
        return NULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e035      	b.n	8007c0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007ba0:	8afb      	ldrh	r3, [r7, #22]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff f9b8 	bl	8006f18 <mem_malloc>
 8007ba8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <pbuf_alloc+0x174>
        return NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e02b      	b.n	8007c0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007bb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bb6:	3310      	adds	r3, #16
 8007bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bba:	4413      	add	r3, r2
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	88b9      	ldrh	r1, [r7, #4]
 8007bc6:	88ba      	ldrh	r2, [r7, #4]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	887b      	ldrh	r3, [r7, #2]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bd6:	f7ff ff09 	bl	80079ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <pbuf_alloc+0x1c8>
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <pbuf_alloc+0x1d4>)
 8007be8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007bec:	490d      	ldr	r1, [pc, #52]	; (8007c24 <pbuf_alloc+0x1e4>)
 8007bee:	480b      	ldr	r0, [pc, #44]	; (8007c1c <pbuf_alloc+0x1dc>)
 8007bf0:	f008 fd4e 	bl	8010690 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007bf4:	e008      	b.n	8007c08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <pbuf_alloc+0x1d4>)
 8007bf8:	f240 1227 	movw	r2, #295	; 0x127
 8007bfc:	490a      	ldr	r1, [pc, #40]	; (8007c28 <pbuf_alloc+0x1e8>)
 8007bfe:	4807      	ldr	r0, [pc, #28]	; (8007c1c <pbuf_alloc+0x1dc>)
 8007c00:	f008 fd46 	bl	8010690 <iprintf>
      return NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	e001      	b.n	8007c0c <pbuf_alloc+0x1cc>
      break;
 8007c08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3728      	adds	r7, #40	; 0x28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	08011e1c 	.word	0x08011e1c
 8007c18:	08011e4c 	.word	0x08011e4c
 8007c1c:	08011e7c 	.word	0x08011e7c
 8007c20:	08011ea4 	.word	0x08011ea4
 8007c24:	08011ed8 	.word	0x08011ed8
 8007c28:	08011f04 	.word	0x08011f04

08007c2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007c3c:	883b      	ldrh	r3, [r7, #0]
 8007c3e:	2b41      	cmp	r3, #65	; 0x41
 8007c40:	d009      	beq.n	8007c56 <pbuf_alloc_reference+0x2a>
 8007c42:	883b      	ldrh	r3, [r7, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d006      	beq.n	8007c56 <pbuf_alloc_reference+0x2a>
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <pbuf_alloc_reference+0x5c>)
 8007c4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007c4e:	490f      	ldr	r1, [pc, #60]	; (8007c8c <pbuf_alloc_reference+0x60>)
 8007c50:	480f      	ldr	r0, [pc, #60]	; (8007c90 <pbuf_alloc_reference+0x64>)
 8007c52:	f008 fd1d 	bl	8010690 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007c56:	200b      	movs	r0, #11
 8007c58:	f7ff fae0 	bl	800721c <memp_malloc>
 8007c5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e00b      	b.n	8007c80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007c68:	8879      	ldrh	r1, [r7, #2]
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	883b      	ldrh	r3, [r7, #0]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff feb7 	bl	80079ec <pbuf_init_alloced_pbuf>
  return p;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	08011e1c 	.word	0x08011e1c
 8007c8c:	08011f20 	.word	0x08011f20
 8007c90:	08011e7c 	.word	0x08011e7c

08007c94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	81bb      	strh	r3, [r7, #12]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007cac:	8a7b      	ldrh	r3, [r7, #18]
 8007cae:	3303      	adds	r3, #3
 8007cb0:	f023 0203 	bic.w	r2, r3, #3
 8007cb4:	89bb      	ldrh	r3, [r7, #12]
 8007cb6:	441a      	add	r2, r3
 8007cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d901      	bls.n	8007cc2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e018      	b.n	8007cf4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007cc8:	8a7b      	ldrh	r3, [r7, #18]
 8007cca:	3303      	adds	r3, #3
 8007ccc:	f023 0303 	bic.w	r3, r3, #3
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e001      	b.n	8007cdc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	89b9      	ldrh	r1, [r7, #12]
 8007ce0:	89ba      	ldrh	r2, [r7, #12]
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	897b      	ldrh	r3, [r7, #10]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	460b      	mov	r3, r1
 8007cec:	6979      	ldr	r1, [r7, #20]
 8007cee:	f7ff fe7d 	bl	80079ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007cf2:	687b      	ldr	r3, [r7, #4]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <pbuf_realloc+0x20>
 8007d0e:	4b3a      	ldr	r3, [pc, #232]	; (8007df8 <pbuf_realloc+0xfc>)
 8007d10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007d14:	4939      	ldr	r1, [pc, #228]	; (8007dfc <pbuf_realloc+0x100>)
 8007d16:	483a      	ldr	r0, [pc, #232]	; (8007e00 <pbuf_realloc+0x104>)
 8007d18:	f008 fcba 	bl	8010690 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	891b      	ldrh	r3, [r3, #8]
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d263      	bcs.n	8007dee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	891a      	ldrh	r2, [r3, #8]
 8007d2a:	887b      	ldrh	r3, [r7, #2]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007d30:	887b      	ldrh	r3, [r7, #2]
 8007d32:	817b      	strh	r3, [r7, #10]
  q = p;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007d38:	e018      	b.n	8007d6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	895b      	ldrh	r3, [r3, #10]
 8007d3e:	897a      	ldrh	r2, [r7, #10]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	891a      	ldrh	r2, [r3, #8]
 8007d48:	893b      	ldrh	r3, [r7, #8]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <pbuf_realloc+0x70>
 8007d5e:	4b26      	ldr	r3, [pc, #152]	; (8007df8 <pbuf_realloc+0xfc>)
 8007d60:	f240 12af 	movw	r2, #431	; 0x1af
 8007d64:	4927      	ldr	r1, [pc, #156]	; (8007e04 <pbuf_realloc+0x108>)
 8007d66:	4826      	ldr	r0, [pc, #152]	; (8007e00 <pbuf_realloc+0x104>)
 8007d68:	f008 fc92 	bl	8010690 <iprintf>
  while (rem_len > q->len) {
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	897a      	ldrh	r2, [r7, #10]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8e1      	bhi.n	8007d3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	7b1b      	ldrb	r3, [r3, #12]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d121      	bne.n	8007dc6 <pbuf_realloc+0xca>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	895b      	ldrh	r3, [r3, #10]
 8007d86:	897a      	ldrh	r2, [r7, #10]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d01c      	beq.n	8007dc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	7b5b      	ldrb	r3, [r3, #13]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d116      	bne.n	8007dc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	897b      	ldrh	r3, [r7, #10]
 8007da4:	4413      	add	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7fe ffaa 	bl	8006d04 <mem_trim>
 8007db0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <pbuf_realloc+0xca>
 8007db8:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <pbuf_realloc+0xfc>)
 8007dba:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007dbe:	4912      	ldr	r1, [pc, #72]	; (8007e08 <pbuf_realloc+0x10c>)
 8007dc0:	480f      	ldr	r0, [pc, #60]	; (8007e00 <pbuf_realloc+0x104>)
 8007dc2:	f008 fc65 	bl	8010690 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	897a      	ldrh	r2, [r7, #10]
 8007dca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	895a      	ldrh	r2, [r3, #10]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f911 	bl	8008008 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	e000      	b.n	8007df0 <pbuf_realloc+0xf4>
    return;
 8007dee:	bf00      	nop

}
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	08011e1c 	.word	0x08011e1c
 8007dfc:	08011f34 	.word	0x08011f34
 8007e00:	08011e7c 	.word	0x08011e7c
 8007e04:	08011f4c 	.word	0x08011f4c
 8007e08:	08011f64 	.word	0x08011f64

08007e0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <pbuf_add_header_impl+0x22>
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <pbuf_add_header_impl+0xc4>)
 8007e22:	f240 12df 	movw	r2, #479	; 0x1df
 8007e26:	492b      	ldr	r1, [pc, #172]	; (8007ed4 <pbuf_add_header_impl+0xc8>)
 8007e28:	482b      	ldr	r0, [pc, #172]	; (8007ed8 <pbuf_add_header_impl+0xcc>)
 8007e2a:	f008 fc31 	bl	8010690 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <pbuf_add_header_impl+0x30>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3a:	d301      	bcc.n	8007e40 <pbuf_add_header_impl+0x34>
    return 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e043      	b.n	8007ec8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <pbuf_add_header_impl+0x3e>
    return 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e03e      	b.n	8007ec8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	891a      	ldrh	r2, [r3, #8]
 8007e52:	8a7b      	ldrh	r3, [r7, #18]
 8007e54:	4413      	add	r3, r2
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8a7a      	ldrh	r2, [r7, #18]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d901      	bls.n	8007e62 <pbuf_add_header_impl+0x56>
    return 1;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e032      	b.n	8007ec8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	7b1b      	ldrb	r3, [r3, #12]
 8007e66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007e68:	8a3b      	ldrh	r3, [r7, #16]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00c      	beq.n	8007e8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	425b      	negs	r3, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3310      	adds	r3, #16
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d20d      	bcs.n	8007ea4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e01d      	b.n	8007ec8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d006      	beq.n	8007ea0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	425b      	negs	r3, r3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e001      	b.n	8007ea4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e011      	b.n	8007ec8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	895a      	ldrh	r2, [r3, #10]
 8007eae:	8a7b      	ldrh	r3, [r7, #18]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	891a      	ldrh	r2, [r3, #8]
 8007ebc:	8a7b      	ldrh	r3, [r7, #18]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	811a      	strh	r2, [r3, #8]


  return 0;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	08011e1c 	.word	0x08011e1c
 8007ed4:	08011f80 	.word	0x08011f80
 8007ed8:	08011e7c 	.word	0x08011e7c

08007edc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff ff8e 	bl	8007e0c <pbuf_add_header_impl>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <pbuf_remove_header+0x1e>
 8007f0c:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <pbuf_remove_header+0x94>)
 8007f0e:	f240 224b 	movw	r2, #587	; 0x24b
 8007f12:	4920      	ldr	r1, [pc, #128]	; (8007f94 <pbuf_remove_header+0x98>)
 8007f14:	4820      	ldr	r0, [pc, #128]	; (8007f98 <pbuf_remove_header+0x9c>)
 8007f16:	f008 fbbb 	bl	8010690 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <pbuf_remove_header+0x2c>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d301      	bcc.n	8007f2c <pbuf_remove_header+0x30>
    return 1;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e02c      	b.n	8007f86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <pbuf_remove_header+0x3a>
    return 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e027      	b.n	8007f86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	895b      	ldrh	r3, [r3, #10]
 8007f3e:	89fa      	ldrh	r2, [r7, #14]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d908      	bls.n	8007f56 <pbuf_remove_header+0x5a>
 8007f44:	4b12      	ldr	r3, [pc, #72]	; (8007f90 <pbuf_remove_header+0x94>)
 8007f46:	f240 2255 	movw	r2, #597	; 0x255
 8007f4a:	4914      	ldr	r1, [pc, #80]	; (8007f9c <pbuf_remove_header+0xa0>)
 8007f4c:	4812      	ldr	r0, [pc, #72]	; (8007f98 <pbuf_remove_header+0x9c>)
 8007f4e:	f008 fb9f 	bl	8010690 <iprintf>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e017      	b.n	8007f86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	441a      	add	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	895a      	ldrh	r2, [r3, #10]
 8007f6c:	89fb      	ldrh	r3, [r7, #14]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	891a      	ldrh	r2, [r3, #8]
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	08011e1c 	.word	0x08011e1c
 8007f94:	08011f80 	.word	0x08011f80
 8007f98:	08011e7c 	.word	0x08011e7c
 8007f9c:	08011f8c 	.word	0x08011f8c

08007fa0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	807b      	strh	r3, [r7, #2]
 8007fac:	4613      	mov	r3, r2
 8007fae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da08      	bge.n	8007fca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff9b 	bl	8007efc <pbuf_remove_header>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	e007      	b.n	8007fda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fce:	787a      	ldrb	r2, [r7, #1]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff ff1a 	bl	8007e0c <pbuf_add_header_impl>
 8007fd8:	4603      	mov	r3, r0
  }
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff ffd2 	bl	8007fa0 <pbuf_header_impl>
 8007ffc:	4603      	mov	r3, r0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <pbuf_free+0x22>
 800801c:	4b3b      	ldr	r3, [pc, #236]	; (800810c <pbuf_free+0x104>)
 800801e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008022:	493b      	ldr	r1, [pc, #236]	; (8008110 <pbuf_free+0x108>)
 8008024:	483b      	ldr	r0, [pc, #236]	; (8008114 <pbuf_free+0x10c>)
 8008026:	f008 fb33 	bl	8010690 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800802a:	2300      	movs	r3, #0
 800802c:	e069      	b.n	8008102 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008032:	e062      	b.n	80080fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008034:	f008 fac6 	bl	80105c4 <sys_arch_protect>
 8008038:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7b9b      	ldrb	r3, [r3, #14]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <pbuf_free+0x48>
 8008042:	4b32      	ldr	r3, [pc, #200]	; (800810c <pbuf_free+0x104>)
 8008044:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008048:	4933      	ldr	r1, [pc, #204]	; (8008118 <pbuf_free+0x110>)
 800804a:	4832      	ldr	r0, [pc, #200]	; (8008114 <pbuf_free+0x10c>)
 800804c:	f008 fb20 	bl	8010690 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7b9b      	ldrb	r3, [r3, #14]
 8008054:	3b01      	subs	r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	739a      	strb	r2, [r3, #14]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7b9b      	ldrb	r3, [r3, #14]
 8008060:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008062:	69b8      	ldr	r0, [r7, #24]
 8008064:	f008 fabc 	bl	80105e0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d143      	bne.n	80080f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7b1b      	ldrb	r3, [r3, #12]
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7b5b      	ldrb	r3, [r3, #13]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d011      	beq.n	80080ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <pbuf_free+0x9c>
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <pbuf_free+0x104>)
 8008098:	f240 22ff 	movw	r2, #767	; 0x2ff
 800809c:	491f      	ldr	r1, [pc, #124]	; (800811c <pbuf_free+0x114>)
 800809e:	481d      	ldr	r0, [pc, #116]	; (8008114 <pbuf_free+0x10c>)
 80080a0:	f008 faf6 	bl	8010690 <iprintf>
        pc->custom_free_function(p);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
 80080ac:	e01d      	b.n	80080ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d104      	bne.n	80080be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	200c      	movs	r0, #12
 80080b8:	f7ff f902 	bl	80072c0 <memp_free>
 80080bc:	e015      	b.n	80080ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d104      	bne.n	80080ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	200b      	movs	r0, #11
 80080c8:	f7ff f8fa 	bl	80072c0 <memp_free>
 80080cc:	e00d      	b.n	80080ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d103      	bne.n	80080dc <pbuf_free+0xd4>
          mem_free(p);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fe fd85 	bl	8006be4 <mem_free>
 80080da:	e006      	b.n	80080ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <pbuf_free+0x104>)
 80080de:	f240 320f 	movw	r2, #783	; 0x30f
 80080e2:	490f      	ldr	r1, [pc, #60]	; (8008120 <pbuf_free+0x118>)
 80080e4:	480b      	ldr	r0, [pc, #44]	; (8008114 <pbuf_free+0x10c>)
 80080e6:	f008 fad3 	bl	8010690 <iprintf>
        }
      }
      count++;
 80080ea:	7ffb      	ldrb	r3, [r7, #31]
 80080ec:	3301      	adds	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	607b      	str	r3, [r7, #4]
 80080f4:	e001      	b.n	80080fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d199      	bne.n	8008034 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008100:	7ffb      	ldrb	r3, [r7, #31]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	08011e1c 	.word	0x08011e1c
 8008110:	08011f80 	.word	0x08011f80
 8008114:	08011e7c 	.word	0x08011e7c
 8008118:	08011fac 	.word	0x08011fac
 800811c:	08011fc4 	.word	0x08011fc4
 8008120:	08011fe8 	.word	0x08011fe8

08008124 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008130:	e005      	b.n	800813e <pbuf_clen+0x1a>
    ++len;
 8008132:	89fb      	ldrh	r3, [r7, #14]
 8008134:	3301      	adds	r3, #1
 8008136:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f6      	bne.n	8008132 <pbuf_clen+0xe>
  }
  return len;
 8008144:	89fb      	ldrh	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d016      	beq.n	8008190 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008162:	f008 fa2f 	bl	80105c4 <sys_arch_protect>
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7b9b      	ldrb	r3, [r3, #14]
 800816c:	3301      	adds	r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	739a      	strb	r2, [r3, #14]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f008 fa33 	bl	80105e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7b9b      	ldrb	r3, [r3, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <pbuf_ref+0x3c>
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <pbuf_ref+0x44>)
 8008184:	f240 3242 	movw	r2, #834	; 0x342
 8008188:	4904      	ldr	r1, [pc, #16]	; (800819c <pbuf_ref+0x48>)
 800818a:	4805      	ldr	r0, [pc, #20]	; (80081a0 <pbuf_ref+0x4c>)
 800818c:	f008 fa80 	bl	8010690 <iprintf>
  }
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	08011e1c 	.word	0x08011e1c
 800819c:	08011ffc 	.word	0x08011ffc
 80081a0:	08011e7c 	.word	0x08011e7c

080081a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <pbuf_cat+0x16>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <pbuf_cat+0x26>
 80081ba:	4b20      	ldr	r3, [pc, #128]	; (800823c <pbuf_cat+0x98>)
 80081bc:	f240 3259 	movw	r2, #857	; 0x359
 80081c0:	491f      	ldr	r1, [pc, #124]	; (8008240 <pbuf_cat+0x9c>)
 80081c2:	4820      	ldr	r0, [pc, #128]	; (8008244 <pbuf_cat+0xa0>)
 80081c4:	f008 fa64 	bl	8010690 <iprintf>
 80081c8:	e034      	b.n	8008234 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e00a      	b.n	80081e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	891a      	ldrh	r2, [r3, #8]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	891b      	ldrh	r3, [r3, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	891a      	ldrh	r2, [r3, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	895b      	ldrh	r3, [r3, #10]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d006      	beq.n	8008208 <pbuf_cat+0x64>
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <pbuf_cat+0x98>)
 80081fc:	f240 3262 	movw	r2, #866	; 0x362
 8008200:	4911      	ldr	r1, [pc, #68]	; (8008248 <pbuf_cat+0xa4>)
 8008202:	4810      	ldr	r0, [pc, #64]	; (8008244 <pbuf_cat+0xa0>)
 8008204:	f008 fa44 	bl	8010690 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d006      	beq.n	800821e <pbuf_cat+0x7a>
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <pbuf_cat+0x98>)
 8008212:	f240 3263 	movw	r2, #867	; 0x363
 8008216:	490d      	ldr	r1, [pc, #52]	; (800824c <pbuf_cat+0xa8>)
 8008218:	480a      	ldr	r0, [pc, #40]	; (8008244 <pbuf_cat+0xa0>)
 800821a:	f008 fa39 	bl	8010690 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	891a      	ldrh	r2, [r3, #8]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	891b      	ldrh	r3, [r3, #8]
 8008226:	4413      	add	r3, r2
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	08011e1c 	.word	0x08011e1c
 8008240:	08012010 	.word	0x08012010
 8008244:	08011e7c 	.word	0x08011e7c
 8008248:	08012048 	.word	0x08012048
 800824c:	08012078 	.word	0x08012078

08008250 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <pbuf_copy+0x2a>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <pbuf_copy+0x2a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	891a      	ldrh	r2, [r3, #8]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	891b      	ldrh	r3, [r3, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	d209      	bcs.n	800828e <pbuf_copy+0x3e>
 800827a:	4b57      	ldr	r3, [pc, #348]	; (80083d8 <pbuf_copy+0x188>)
 800827c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008280:	4956      	ldr	r1, [pc, #344]	; (80083dc <pbuf_copy+0x18c>)
 8008282:	4857      	ldr	r0, [pc, #348]	; (80083e0 <pbuf_copy+0x190>)
 8008284:	f008 fa04 	bl	8010690 <iprintf>
 8008288:	f06f 030f 	mvn.w	r3, #15
 800828c:	e09f      	b.n	80083ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	895b      	ldrh	r3, [r3, #10]
 8008292:	461a      	mov	r2, r3
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	895b      	ldrh	r3, [r3, #10]
 800829c:	4619      	mov	r1, r3
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1acb      	subs	r3, r1, r3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d306      	bcc.n	80082b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	895b      	ldrh	r3, [r3, #10]
 80082aa:	461a      	mov	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e005      	b.n	80082c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	895b      	ldrh	r3, [r3, #10]
 80082b8:	461a      	mov	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	18d0      	adds	r0, r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	4413      	add	r3, r2
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4619      	mov	r1, r3
 80082d4:	f008 f9c6 	bl	8010664 <memcpy>
    offset_to += len;
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	895b      	ldrh	r3, [r3, #10]
 80082ec:	461a      	mov	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d906      	bls.n	8008302 <pbuf_copy+0xb2>
 80082f4:	4b38      	ldr	r3, [pc, #224]	; (80083d8 <pbuf_copy+0x188>)
 80082f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80082fa:	493a      	ldr	r1, [pc, #232]	; (80083e4 <pbuf_copy+0x194>)
 80082fc:	4838      	ldr	r0, [pc, #224]	; (80083e0 <pbuf_copy+0x190>)
 80082fe:	f008 f9c7 	bl	8010690 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	895b      	ldrh	r3, [r3, #10]
 8008306:	461a      	mov	r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4293      	cmp	r3, r2
 800830c:	d906      	bls.n	800831c <pbuf_copy+0xcc>
 800830e:	4b32      	ldr	r3, [pc, #200]	; (80083d8 <pbuf_copy+0x188>)
 8008310:	f240 32da 	movw	r2, #986	; 0x3da
 8008314:	4934      	ldr	r1, [pc, #208]	; (80083e8 <pbuf_copy+0x198>)
 8008316:	4832      	ldr	r0, [pc, #200]	; (80083e0 <pbuf_copy+0x190>)
 8008318:	f008 f9ba 	bl	8010690 <iprintf>
    if (offset_from >= p_from->len) {
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	895b      	ldrh	r3, [r3, #10]
 8008320:	461a      	mov	r2, r3
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4293      	cmp	r3, r2
 8008326:	d304      	bcc.n	8008332 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	895b      	ldrh	r3, [r3, #10]
 8008336:	461a      	mov	r2, r3
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4293      	cmp	r3, r2
 800833c:	d114      	bne.n	8008368 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <pbuf_copy+0x118>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d009      	beq.n	8008368 <pbuf_copy+0x118>
 8008354:	4b20      	ldr	r3, [pc, #128]	; (80083d8 <pbuf_copy+0x188>)
 8008356:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800835a:	4924      	ldr	r1, [pc, #144]	; (80083ec <pbuf_copy+0x19c>)
 800835c:	4820      	ldr	r0, [pc, #128]	; (80083e0 <pbuf_copy+0x190>)
 800835e:	f008 f997 	bl	8010690 <iprintf>
 8008362:	f06f 030f 	mvn.w	r3, #15
 8008366:	e032      	b.n	80083ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d013      	beq.n	8008396 <pbuf_copy+0x146>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	895a      	ldrh	r2, [r3, #10]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	891b      	ldrh	r3, [r3, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d10d      	bne.n	8008396 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <pbuf_copy+0x146>
 8008382:	4b15      	ldr	r3, [pc, #84]	; (80083d8 <pbuf_copy+0x188>)
 8008384:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008388:	4919      	ldr	r1, [pc, #100]	; (80083f0 <pbuf_copy+0x1a0>)
 800838a:	4815      	ldr	r0, [pc, #84]	; (80083e0 <pbuf_copy+0x190>)
 800838c:	f008 f980 	bl	8010690 <iprintf>
 8008390:	f06f 0305 	mvn.w	r3, #5
 8008394:	e01b      	b.n	80083ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d013      	beq.n	80083c4 <pbuf_copy+0x174>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	895a      	ldrh	r2, [r3, #10]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	891b      	ldrh	r3, [r3, #8]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d10d      	bne.n	80083c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <pbuf_copy+0x174>
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <pbuf_copy+0x188>)
 80083b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80083b6:	490e      	ldr	r1, [pc, #56]	; (80083f0 <pbuf_copy+0x1a0>)
 80083b8:	4809      	ldr	r0, [pc, #36]	; (80083e0 <pbuf_copy+0x190>)
 80083ba:	f008 f969 	bl	8010690 <iprintf>
 80083be:	f06f 0305 	mvn.w	r3, #5
 80083c2:	e004      	b.n	80083ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f47f af61 	bne.w	800828e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	08011e1c 	.word	0x08011e1c
 80083dc:	080120c4 	.word	0x080120c4
 80083e0:	08011e7c 	.word	0x08011e7c
 80083e4:	080120f4 	.word	0x080120f4
 80083e8:	0801210c 	.word	0x0801210c
 80083ec:	08012128 	.word	0x08012128
 80083f0:	08012138 	.word	0x08012138

080083f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4611      	mov	r1, r2
 8008400:	461a      	mov	r2, r3
 8008402:	460b      	mov	r3, r1
 8008404:	80fb      	strh	r3, [r7, #6]
 8008406:	4613      	mov	r3, r2
 8008408:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <pbuf_copy_partial+0x36>
 8008418:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <pbuf_copy_partial+0xd4>)
 800841a:	f240 420a 	movw	r2, #1034	; 0x40a
 800841e:	492b      	ldr	r1, [pc, #172]	; (80084cc <pbuf_copy_partial+0xd8>)
 8008420:	482b      	ldr	r0, [pc, #172]	; (80084d0 <pbuf_copy_partial+0xdc>)
 8008422:	f008 f935 	bl	8010690 <iprintf>
 8008426:	2300      	movs	r3, #0
 8008428:	e04a      	b.n	80084c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d108      	bne.n	8008442 <pbuf_copy_partial+0x4e>
 8008430:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <pbuf_copy_partial+0xd4>)
 8008432:	f240 420b 	movw	r2, #1035	; 0x40b
 8008436:	4927      	ldr	r1, [pc, #156]	; (80084d4 <pbuf_copy_partial+0xe0>)
 8008438:	4825      	ldr	r0, [pc, #148]	; (80084d0 <pbuf_copy_partial+0xdc>)
 800843a:	f008 f929 	bl	8010690 <iprintf>
 800843e:	2300      	movs	r3, #0
 8008440:	e03e      	b.n	80084c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e034      	b.n	80084b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008448:	88bb      	ldrh	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <pbuf_copy_partial+0x70>
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	895b      	ldrh	r3, [r3, #10]
 8008452:	88ba      	ldrh	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d305      	bcc.n	8008464 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	895b      	ldrh	r3, [r3, #10]
 800845c:	88ba      	ldrh	r2, [r7, #4]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	80bb      	strh	r3, [r7, #4]
 8008462:	e023      	b.n	80084ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	895a      	ldrh	r2, [r3, #10]
 8008468:	88bb      	ldrh	r3, [r7, #4]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800846e:	8b3a      	ldrh	r2, [r7, #24]
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	429a      	cmp	r2, r3
 8008474:	d901      	bls.n	800847a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800847a:	8b7b      	ldrh	r3, [r7, #26]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	18d0      	adds	r0, r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	88bb      	ldrh	r3, [r7, #4]
 8008486:	4413      	add	r3, r2
 8008488:	8b3a      	ldrh	r2, [r7, #24]
 800848a:	4619      	mov	r1, r3
 800848c:	f008 f8ea 	bl	8010664 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008490:	8afa      	ldrh	r2, [r7, #22]
 8008492:	8b3b      	ldrh	r3, [r7, #24]
 8008494:	4413      	add	r3, r2
 8008496:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008498:	8b7a      	ldrh	r2, [r7, #26]
 800849a:	8b3b      	ldrh	r3, [r7, #24]
 800849c:	4413      	add	r3, r2
 800849e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	8b3b      	ldrh	r3, [r7, #24]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <pbuf_copy_partial+0xca>
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1c4      	bne.n	8008448 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80084be:	8afb      	ldrh	r3, [r7, #22]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3720      	adds	r7, #32
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	08011e1c 	.word	0x08011e1c
 80084cc:	08012164 	.word	0x08012164
 80084d0:	08011e7c 	.word	0x08011e7c
 80084d4:	08012184 	.word	0x08012184

080084d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	4603      	mov	r3, r0
 80084e0:	603a      	str	r2, [r7, #0]
 80084e2:	71fb      	strb	r3, [r7, #7]
 80084e4:	460b      	mov	r3, r1
 80084e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	8919      	ldrh	r1, [r3, #8]
 80084ec:	88ba      	ldrh	r2, [r7, #4]
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff faa5 	bl	8007a40 <pbuf_alloc>
 80084f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <pbuf_clone+0x2a>
    return NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	e011      	b.n	8008526 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fea3 	bl	8008250 <pbuf_copy>
 800850a:	4603      	mov	r3, r0
 800850c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800850e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d006      	beq.n	8008524 <pbuf_clone+0x4c>
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <pbuf_clone+0x58>)
 8008518:	f240 5224 	movw	r2, #1316	; 0x524
 800851c:	4905      	ldr	r1, [pc, #20]	; (8008534 <pbuf_clone+0x5c>)
 800851e:	4806      	ldr	r0, [pc, #24]	; (8008538 <pbuf_clone+0x60>)
 8008520:	f008 f8b6 	bl	8010690 <iprintf>
  return q;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	08011e1c 	.word	0x08011e1c
 8008534:	08012290 	.word	0x08012290
 8008538:	08011e7c 	.word	0x08011e7c

0800853c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008540:	f008 f8be 	bl	80106c0 <rand>
 8008544:	4603      	mov	r3, r0
 8008546:	b29b      	uxth	r3, r3
 8008548:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800854c:	b29b      	uxth	r3, r3
 800854e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008552:	b29a      	uxth	r2, r3
 8008554:	4b01      	ldr	r3, [pc, #4]	; (800855c <tcp_init+0x20>)
 8008556:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008558:	bf00      	nop
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000010 	.word	0x20000010

08008560 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d105      	bne.n	800857c <tcp_free+0x1c>
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <tcp_free+0x2c>)
 8008572:	22d4      	movs	r2, #212	; 0xd4
 8008574:	4906      	ldr	r1, [pc, #24]	; (8008590 <tcp_free+0x30>)
 8008576:	4807      	ldr	r0, [pc, #28]	; (8008594 <tcp_free+0x34>)
 8008578:	f008 f88a 	bl	8010690 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	2001      	movs	r0, #1
 8008580:	f7fe fe9e 	bl	80072c0 <memp_free>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	0801231c 	.word	0x0801231c
 8008590:	0801234c 	.word	0x0801234c
 8008594:	08012360 	.word	0x08012360

08008598 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d105      	bne.n	80085b4 <tcp_free_listen+0x1c>
 80085a8:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <tcp_free_listen+0x2c>)
 80085aa:	22df      	movs	r2, #223	; 0xdf
 80085ac:	4906      	ldr	r1, [pc, #24]	; (80085c8 <tcp_free_listen+0x30>)
 80085ae:	4807      	ldr	r0, [pc, #28]	; (80085cc <tcp_free_listen+0x34>)
 80085b0:	f008 f86e 	bl	8010690 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	2002      	movs	r0, #2
 80085b8:	f7fe fe82 	bl	80072c0 <memp_free>
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	0801231c 	.word	0x0801231c
 80085c8:	08012388 	.word	0x08012388
 80085cc:	08012360 	.word	0x08012360

080085d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80085d4:	f000 fea2 	bl	800931c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80085d8:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <tcp_tmr+0x28>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <tcp_tmr+0x28>)
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <tcp_tmr+0x28>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80085f0:	f000 fb54 	bl	8008c9c <tcp_slowtmr>
  }
}
 80085f4:	bf00      	nop
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20004099 	.word	0x20004099

080085fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <tcp_remove_listener+0x1c>
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <tcp_remove_listener+0x48>)
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	490d      	ldr	r1, [pc, #52]	; (8008648 <tcp_remove_listener+0x4c>)
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <tcp_remove_listener+0x50>)
 8008614:	f008 f83c 	bl	8010690 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e00a      	b.n	8008634 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d102      	bne.n	800862e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1f1      	bne.n	800861e <tcp_remove_listener+0x22>
    }
  }
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	0801231c 	.word	0x0801231c
 8008648:	080123a4 	.word	0x080123a4
 800864c:	08012360 	.word	0x08012360

08008650 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <tcp_listen_closed+0x1c>
 800865e:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <tcp_listen_closed+0x60>)
 8008660:	f240 1211 	movw	r2, #273	; 0x111
 8008664:	4913      	ldr	r1, [pc, #76]	; (80086b4 <tcp_listen_closed+0x64>)
 8008666:	4814      	ldr	r0, [pc, #80]	; (80086b8 <tcp_listen_closed+0x68>)
 8008668:	f008 f812 	bl	8010690 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d006      	beq.n	8008682 <tcp_listen_closed+0x32>
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <tcp_listen_closed+0x60>)
 8008676:	f44f 7289 	mov.w	r2, #274	; 0x112
 800867a:	4910      	ldr	r1, [pc, #64]	; (80086bc <tcp_listen_closed+0x6c>)
 800867c:	480e      	ldr	r0, [pc, #56]	; (80086b8 <tcp_listen_closed+0x68>)
 800867e:	f008 f807 	bl	8010690 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008682:	2301      	movs	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e00b      	b.n	80086a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <tcp_listen_closed+0x70>)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff ffb1 	bl	80085fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d9f0      	bls.n	8008688 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	0801231c 	.word	0x0801231c
 80086b4:	080123cc 	.word	0x080123cc
 80086b8:	08012360 	.word	0x08012360
 80086bc:	080123d8 	.word	0x080123d8
 80086c0:	08014328 	.word	0x08014328

080086c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80086c4:	b5b0      	push	{r4, r5, r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <tcp_close_shutdown+0x20>
 80086d6:	4b63      	ldr	r3, [pc, #396]	; (8008864 <tcp_close_shutdown+0x1a0>)
 80086d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80086dc:	4962      	ldr	r1, [pc, #392]	; (8008868 <tcp_close_shutdown+0x1a4>)
 80086de:	4863      	ldr	r0, [pc, #396]	; (800886c <tcp_close_shutdown+0x1a8>)
 80086e0:	f007 ffd6 	bl	8010690 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d066      	beq.n	80087b8 <tcp_close_shutdown+0xf4>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7d1b      	ldrb	r3, [r3, #20]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d003      	beq.n	80086fa <tcp_close_shutdown+0x36>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7d1b      	ldrb	r3, [r3, #20]
 80086f6:	2b07      	cmp	r3, #7
 80086f8:	d15e      	bne.n	80087b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <tcp_close_shutdown+0x48>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008706:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800870a:	d055      	beq.n	80087b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8b5b      	ldrh	r3, [r3, #26]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <tcp_close_shutdown+0x62>
 8008718:	4b52      	ldr	r3, [pc, #328]	; (8008864 <tcp_close_shutdown+0x1a0>)
 800871a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800871e:	4954      	ldr	r1, [pc, #336]	; (8008870 <tcp_close_shutdown+0x1ac>)
 8008720:	4852      	ldr	r0, [pc, #328]	; (800886c <tcp_close_shutdown+0x1a8>)
 8008722:	f007 ffb5 	bl	8010690 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800872e:	687d      	ldr	r5, [r7, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	8ad2      	ldrh	r2, [r2, #22]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	8b09      	ldrh	r1, [r1, #24]
 800873c:	9102      	str	r1, [sp, #8]
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	462b      	mov	r3, r5
 8008744:	4622      	mov	r2, r4
 8008746:	4601      	mov	r1, r0
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f004 fe8d 	bl	800d468 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 f8c6 	bl	80098e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008754:	4b47      	ldr	r3, [pc, #284]	; (8008874 <tcp_close_shutdown+0x1b0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d105      	bne.n	800876a <tcp_close_shutdown+0xa6>
 800875e:	4b45      	ldr	r3, [pc, #276]	; (8008874 <tcp_close_shutdown+0x1b0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4a43      	ldr	r2, [pc, #268]	; (8008874 <tcp_close_shutdown+0x1b0>)
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e013      	b.n	8008792 <tcp_close_shutdown+0xce>
 800876a:	4b42      	ldr	r3, [pc, #264]	; (8008874 <tcp_close_shutdown+0x1b0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e00c      	b.n	800878c <tcp_close_shutdown+0xc8>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d104      	bne.n	8008786 <tcp_close_shutdown+0xc2>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
 8008784:	e005      	b.n	8008792 <tcp_close_shutdown+0xce>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1ef      	bne.n	8008772 <tcp_close_shutdown+0xae>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	60da      	str	r2, [r3, #12]
 8008798:	4b37      	ldr	r3, [pc, #220]	; (8008878 <tcp_close_shutdown+0x1b4>)
 800879a:	2201      	movs	r2, #1
 800879c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800879e:	4b37      	ldr	r3, [pc, #220]	; (800887c <tcp_close_shutdown+0x1b8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d102      	bne.n	80087ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80087a8:	f003 fd5a 	bl	800c260 <tcp_trigger_input_pcb_close>
 80087ac:	e002      	b.n	80087b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fed6 	bl	8008560 <tcp_free>
      }
      return ERR_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e050      	b.n	800885a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7d1b      	ldrb	r3, [r3, #20]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d03b      	beq.n	8008838 <tcp_close_shutdown+0x174>
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	dc44      	bgt.n	800884e <tcp_close_shutdown+0x18a>
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <tcp_close_shutdown+0x10a>
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d02a      	beq.n	8008822 <tcp_close_shutdown+0x15e>
 80087cc:	e03f      	b.n	800884e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	8adb      	ldrh	r3, [r3, #22]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d021      	beq.n	800881a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80087d6:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <tcp_close_shutdown+0x1bc>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d105      	bne.n	80087ec <tcp_close_shutdown+0x128>
 80087e0:	4b27      	ldr	r3, [pc, #156]	; (8008880 <tcp_close_shutdown+0x1bc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	4a26      	ldr	r2, [pc, #152]	; (8008880 <tcp_close_shutdown+0x1bc>)
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	e013      	b.n	8008814 <tcp_close_shutdown+0x150>
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <tcp_close_shutdown+0x1bc>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
 80087f2:	e00c      	b.n	800880e <tcp_close_shutdown+0x14a>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d104      	bne.n	8008808 <tcp_close_shutdown+0x144>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	60da      	str	r2, [r3, #12]
 8008806:	e005      	b.n	8008814 <tcp_close_shutdown+0x150>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1ef      	bne.n	80087f4 <tcp_close_shutdown+0x130>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fea0 	bl	8008560 <tcp_free>
      break;
 8008820:	e01a      	b.n	8008858 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff14 	bl	8008650 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4816      	ldr	r0, [pc, #88]	; (8008884 <tcp_close_shutdown+0x1c0>)
 800882c:	f001 f8a8 	bl	8009980 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff feb1 	bl	8008598 <tcp_free_listen>
      break;
 8008836:	e00f      	b.n	8008858 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	480e      	ldr	r0, [pc, #56]	; (8008874 <tcp_close_shutdown+0x1b0>)
 800883c:	f001 f8a0 	bl	8009980 <tcp_pcb_remove>
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <tcp_close_shutdown+0x1b4>)
 8008842:	2201      	movs	r2, #1
 8008844:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fe8a 	bl	8008560 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800884c:	e004      	b.n	8008858 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f81a 	bl	8008888 <tcp_close_shutdown_fin>
 8008854:	4603      	mov	r3, r0
 8008856:	e000      	b.n	800885a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bdb0      	pop	{r4, r5, r7, pc}
 8008862:	bf00      	nop
 8008864:	0801231c 	.word	0x0801231c
 8008868:	080123f0 	.word	0x080123f0
 800886c:	08012360 	.word	0x08012360
 8008870:	08012410 	.word	0x08012410
 8008874:	2000cbfc 	.word	0x2000cbfc
 8008878:	2000cbf8 	.word	0x2000cbf8
 800887c:	2000cc10 	.word	0x2000cc10
 8008880:	2000cc08 	.word	0x2000cc08
 8008884:	2000cc04 	.word	0x2000cc04

08008888 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <tcp_close_shutdown_fin+0x1c>
 8008896:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <tcp_close_shutdown_fin+0xc8>)
 8008898:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800889c:	492d      	ldr	r1, [pc, #180]	; (8008954 <tcp_close_shutdown_fin+0xcc>)
 800889e:	482e      	ldr	r0, [pc, #184]	; (8008958 <tcp_close_shutdown_fin+0xd0>)
 80088a0:	f007 fef6 	bl	8010690 <iprintf>

  switch (pcb->state) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	7d1b      	ldrb	r3, [r3, #20]
 80088a8:	2b07      	cmp	r3, #7
 80088aa:	d020      	beq.n	80088ee <tcp_close_shutdown_fin+0x66>
 80088ac:	2b07      	cmp	r3, #7
 80088ae:	dc2b      	bgt.n	8008908 <tcp_close_shutdown_fin+0x80>
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d002      	beq.n	80088ba <tcp_close_shutdown_fin+0x32>
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d00d      	beq.n	80088d4 <tcp_close_shutdown_fin+0x4c>
 80088b8:	e026      	b.n	8008908 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f003 fee2 	bl	800c684 <tcp_send_fin>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80088c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11f      	bne.n	800890c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2205      	movs	r2, #5
 80088d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80088d2:	e01b      	b.n	800890c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f003 fed5 	bl	800c684 <tcp_send_fin>
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80088de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d114      	bne.n	8008910 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2205      	movs	r2, #5
 80088ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80088ec:	e010      	b.n	8008910 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f003 fec8 	bl	800c684 <tcp_send_fin>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80088f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2209      	movs	r2, #9
 8008904:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008906:	e005      	b.n	8008914 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e01c      	b.n	8008946 <tcp_close_shutdown_fin+0xbe>
      break;
 800890c:	bf00      	nop
 800890e:	e002      	b.n	8008916 <tcp_close_shutdown_fin+0x8e>
      break;
 8008910:	bf00      	nop
 8008912:	e000      	b.n	8008916 <tcp_close_shutdown_fin+0x8e>
      break;
 8008914:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f003 ffee 	bl	800c900 <tcp_output>
 8008924:	e00d      	b.n	8008942 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d108      	bne.n	8008942 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8b5b      	ldrh	r3, [r3, #26]
 8008934:	f043 0308 	orr.w	r3, r3, #8
 8008938:	b29a      	uxth	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e001      	b.n	8008946 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	0801231c 	.word	0x0801231c
 8008954:	080123cc 	.word	0x080123cc
 8008958:	08012360 	.word	0x08012360

0800895c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <tcp_close+0x22>
 800896a:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <tcp_close+0x4c>)
 800896c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008970:	490e      	ldr	r1, [pc, #56]	; (80089ac <tcp_close+0x50>)
 8008972:	480f      	ldr	r0, [pc, #60]	; (80089b0 <tcp_close+0x54>)
 8008974:	f007 fe8c 	bl	8010690 <iprintf>
 8008978:	f06f 030f 	mvn.w	r3, #15
 800897c:	e00f      	b.n	800899e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7d1b      	ldrb	r3, [r3, #20]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d006      	beq.n	8008994 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8b5b      	ldrh	r3, [r3, #26]
 800898a:	f043 0310 	orr.w	r3, r3, #16
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008994:	2101      	movs	r1, #1
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fe94 	bl	80086c4 <tcp_close_shutdown>
 800899c:	4603      	mov	r3, r0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	0801231c 	.word	0x0801231c
 80089ac:	0801242c 	.word	0x0801242c
 80089b0:	08012360 	.word	0x08012360

080089b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08e      	sub	sp, #56	; 0x38
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d107      	bne.n	80089d4 <tcp_abandon+0x20>
 80089c4:	4b52      	ldr	r3, [pc, #328]	; (8008b10 <tcp_abandon+0x15c>)
 80089c6:	f240 223d 	movw	r2, #573	; 0x23d
 80089ca:	4952      	ldr	r1, [pc, #328]	; (8008b14 <tcp_abandon+0x160>)
 80089cc:	4852      	ldr	r0, [pc, #328]	; (8008b18 <tcp_abandon+0x164>)
 80089ce:	f007 fe5f 	bl	8010690 <iprintf>
 80089d2:	e099      	b.n	8008b08 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7d1b      	ldrb	r3, [r3, #20]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d106      	bne.n	80089ea <tcp_abandon+0x36>
 80089dc:	4b4c      	ldr	r3, [pc, #304]	; (8008b10 <tcp_abandon+0x15c>)
 80089de:	f44f 7210 	mov.w	r2, #576	; 0x240
 80089e2:	494e      	ldr	r1, [pc, #312]	; (8008b1c <tcp_abandon+0x168>)
 80089e4:	484c      	ldr	r0, [pc, #304]	; (8008b18 <tcp_abandon+0x164>)
 80089e6:	f007 fe53 	bl	8010690 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7d1b      	ldrb	r3, [r3, #20]
 80089ee:	2b0a      	cmp	r3, #10
 80089f0:	d107      	bne.n	8008a02 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	484a      	ldr	r0, [pc, #296]	; (8008b20 <tcp_abandon+0x16c>)
 80089f6:	f000 ffc3 	bl	8009980 <tcp_pcb_remove>
    tcp_free(pcb);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fdb0 	bl	8008560 <tcp_free>
 8008a00:	e082      	b.n	8008b08 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	7d1b      	ldrb	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d126      	bne.n	8008a7a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8adb      	ldrh	r3, [r3, #22]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02e      	beq.n	8008a92 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008a34:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <tcp_abandon+0x170>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d105      	bne.n	8008a4a <tcp_abandon+0x96>
 8008a3e:	4b39      	ldr	r3, [pc, #228]	; (8008b24 <tcp_abandon+0x170>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4a37      	ldr	r2, [pc, #220]	; (8008b24 <tcp_abandon+0x170>)
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	e013      	b.n	8008a72 <tcp_abandon+0xbe>
 8008a4a:	4b36      	ldr	r3, [pc, #216]	; (8008b24 <tcp_abandon+0x170>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e00c      	b.n	8008a6c <tcp_abandon+0xb8>
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d104      	bne.n	8008a66 <tcp_abandon+0xb2>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e005      	b.n	8008a72 <tcp_abandon+0xbe>
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ef      	bne.n	8008a52 <tcp_abandon+0x9e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	60da      	str	r2, [r3, #12]
 8008a78:	e00b      	b.n	8008a92 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8adb      	ldrh	r3, [r3, #22]
 8008a82:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4828      	ldr	r0, [pc, #160]	; (8008b28 <tcp_abandon+0x174>)
 8008a88:	f000 ff7a 	bl	8009980 <tcp_pcb_remove>
 8008a8c:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <tcp_abandon+0x178>)
 8008a8e:	2201      	movs	r2, #1
 8008a90:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fd1c 	bl	80094dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd13 	bl	80094dc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fd0a 	bl	80094dc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	8b12      	ldrh	r2, [r2, #24]
 8008ad8:	9202      	str	r2, [sp, #8]
 8008ada:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008adc:	9201      	str	r2, [sp, #4]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	69b9      	ldr	r1, [r7, #24]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f004 fcbe 	bl	800d468 <tcp_rst>
    }
    last_state = pcb->state;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7d1b      	ldrb	r3, [r3, #20]
 8008af0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff fd34 	bl	8008560 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <tcp_abandon+0x154>
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f06f 010c 	mvn.w	r1, #12
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	4798      	blx	r3
  }
}
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	0801231c 	.word	0x0801231c
 8008b14:	08012460 	.word	0x08012460
 8008b18:	08012360 	.word	0x08012360
 8008b1c:	0801247c 	.word	0x0801247c
 8008b20:	2000cc0c 	.word	0x2000cc0c
 8008b24:	2000cc08 	.word	0x2000cc08
 8008b28:	2000cbfc 	.word	0x2000cbfc
 8008b2c:	2000cbf8 	.word	0x2000cbf8

08008b30 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008b38:	2101      	movs	r1, #1
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff ff3a 	bl	80089b4 <tcp_abandon>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <tcp_update_rcv_ann_wnd+0x1c>
 8008b56:	4b25      	ldr	r3, [pc, #148]	; (8008bec <tcp_update_rcv_ann_wnd+0xa4>)
 8008b58:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008b5c:	4924      	ldr	r1, [pc, #144]	; (8008bf0 <tcp_update_rcv_ann_wnd+0xa8>)
 8008b5e:	4825      	ldr	r0, [pc, #148]	; (8008bf4 <tcp_update_rcv_ann_wnd+0xac>)
 8008b60:	f007 fd96 	bl	8010690 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008b78:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008b7c:	bf28      	it	cs
 8008b7e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008b82:	b292      	uxth	r2, r2
 8008b84:	4413      	add	r3, r2
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	db08      	blt.n	8008ba0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	e020      	b.n	8008be2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd03      	ble.n	8008bb6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bb4:	e014      	b.n	8008be0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d306      	bcc.n	8008bd8 <tcp_update_rcv_ann_wnd+0x90>
 8008bca:	4b08      	ldr	r3, [pc, #32]	; (8008bec <tcp_update_rcv_ann_wnd+0xa4>)
 8008bcc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008bd0:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <tcp_update_rcv_ann_wnd+0xb0>)
 8008bd2:	4808      	ldr	r0, [pc, #32]	; (8008bf4 <tcp_update_rcv_ann_wnd+0xac>)
 8008bd4:	f007 fd5c 	bl	8010690 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008be0:	2300      	movs	r3, #0
  }
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	0801231c 	.word	0x0801231c
 8008bf0:	08012578 	.word	0x08012578
 8008bf4:	08012360 	.word	0x08012360
 8008bf8:	0801259c 	.word	0x0801259c

08008bfc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d107      	bne.n	8008c1e <tcp_recved+0x22>
 8008c0e:	4b1f      	ldr	r3, [pc, #124]	; (8008c8c <tcp_recved+0x90>)
 8008c10:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008c14:	491e      	ldr	r1, [pc, #120]	; (8008c90 <tcp_recved+0x94>)
 8008c16:	481f      	ldr	r0, [pc, #124]	; (8008c94 <tcp_recved+0x98>)
 8008c18:	f007 fd3a 	bl	8010690 <iprintf>
 8008c1c:	e032      	b.n	8008c84 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d106      	bne.n	8008c34 <tcp_recved+0x38>
 8008c26:	4b19      	ldr	r3, [pc, #100]	; (8008c8c <tcp_recved+0x90>)
 8008c28:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008c2c:	491a      	ldr	r1, [pc, #104]	; (8008c98 <tcp_recved+0x9c>)
 8008c2e:	4819      	ldr	r0, [pc, #100]	; (8008c94 <tcp_recved+0x98>)
 8008c30:	f007 fd2e 	bl	8010690 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c38:	887b      	ldrh	r3, [r7, #2]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008c3e:	89fb      	ldrh	r3, [r7, #14]
 8008c40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008c44:	d804      	bhi.n	8008c50 <tcp_recved+0x54>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4a:	89fa      	ldrh	r2, [r7, #14]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d204      	bcs.n	8008c5a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c56:	851a      	strh	r2, [r3, #40]	; 0x28
 8008c58:	e002      	b.n	8008c60 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	89fa      	ldrh	r2, [r7, #14]
 8008c5e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ff71 	bl	8008b48 <tcp_update_rcv_ann_wnd>
 8008c66:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008c6e:	d309      	bcc.n	8008c84 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8b5b      	ldrh	r3, [r3, #26]
 8008c74:	f043 0302 	orr.w	r3, r3, #2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f003 fe3e 	bl	800c900 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0801231c 	.word	0x0801231c
 8008c90:	080125b8 	.word	0x080125b8
 8008c94:	08012360 	.word	0x08012360
 8008c98:	080125d0 	.word	0x080125d0

08008c9c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008c9c:	b5b0      	push	{r4, r5, r7, lr}
 8008c9e:	b090      	sub	sp, #64	; 0x40
 8008ca0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008ca8:	4b94      	ldr	r3, [pc, #592]	; (8008efc <tcp_slowtmr+0x260>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	4a93      	ldr	r2, [pc, #588]	; (8008efc <tcp_slowtmr+0x260>)
 8008cb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008cb2:	4b93      	ldr	r3, [pc, #588]	; (8008f00 <tcp_slowtmr+0x264>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b91      	ldr	r3, [pc, #580]	; (8008f00 <tcp_slowtmr+0x264>)
 8008cbc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008cc2:	4b90      	ldr	r3, [pc, #576]	; (8008f04 <tcp_slowtmr+0x268>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008cc8:	e29d      	b.n	8009206 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	7d1b      	ldrb	r3, [r3, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <tcp_slowtmr+0x44>
 8008cd2:	4b8d      	ldr	r3, [pc, #564]	; (8008f08 <tcp_slowtmr+0x26c>)
 8008cd4:	f240 42be 	movw	r2, #1214	; 0x4be
 8008cd8:	498c      	ldr	r1, [pc, #560]	; (8008f0c <tcp_slowtmr+0x270>)
 8008cda:	488d      	ldr	r0, [pc, #564]	; (8008f10 <tcp_slowtmr+0x274>)
 8008cdc:	f007 fcd8 	bl	8010690 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	7d1b      	ldrb	r3, [r3, #20]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d106      	bne.n	8008cf6 <tcp_slowtmr+0x5a>
 8008ce8:	4b87      	ldr	r3, [pc, #540]	; (8008f08 <tcp_slowtmr+0x26c>)
 8008cea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008cee:	4989      	ldr	r1, [pc, #548]	; (8008f14 <tcp_slowtmr+0x278>)
 8008cf0:	4887      	ldr	r0, [pc, #540]	; (8008f10 <tcp_slowtmr+0x274>)
 8008cf2:	f007 fccd 	bl	8010690 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	7d1b      	ldrb	r3, [r3, #20]
 8008cfa:	2b0a      	cmp	r3, #10
 8008cfc:	d106      	bne.n	8008d0c <tcp_slowtmr+0x70>
 8008cfe:	4b82      	ldr	r3, [pc, #520]	; (8008f08 <tcp_slowtmr+0x26c>)
 8008d00:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008d04:	4984      	ldr	r1, [pc, #528]	; (8008f18 <tcp_slowtmr+0x27c>)
 8008d06:	4882      	ldr	r0, [pc, #520]	; (8008f10 <tcp_slowtmr+0x274>)
 8008d08:	f007 fcc2 	bl	8010690 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	7f9a      	ldrb	r2, [r3, #30]
 8008d10:	4b7b      	ldr	r3, [pc, #492]	; (8008f00 <tcp_slowtmr+0x264>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d105      	bne.n	8008d24 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008d22:	e270      	b.n	8009206 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008d24:	4b76      	ldr	r3, [pc, #472]	; (8008f00 <tcp_slowtmr+0x264>)
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	7d1b      	ldrb	r3, [r3, #20]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d10a      	bne.n	8008d56 <tcp_slowtmr+0xba>
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	d905      	bls.n	8008d56 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d4e:	3301      	adds	r3, #1
 8008d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d54:	e11e      	b.n	8008f94 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d5c:	2b0b      	cmp	r3, #11
 8008d5e:	d905      	bls.n	8008d6c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d64:	3301      	adds	r3, #1
 8008d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d6a:	e113      	b.n	8008f94 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d075      	beq.n	8008e62 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d006      	beq.n	8008d8c <tcp_slowtmr+0xf0>
 8008d7e:	4b62      	ldr	r3, [pc, #392]	; (8008f08 <tcp_slowtmr+0x26c>)
 8008d80:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008d84:	4965      	ldr	r1, [pc, #404]	; (8008f1c <tcp_slowtmr+0x280>)
 8008d86:	4862      	ldr	r0, [pc, #392]	; (8008f10 <tcp_slowtmr+0x274>)
 8008d88:	f007 fc82 	bl	8010690 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <tcp_slowtmr+0x106>
 8008d94:	4b5c      	ldr	r3, [pc, #368]	; (8008f08 <tcp_slowtmr+0x26c>)
 8008d96:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008d9a:	4961      	ldr	r1, [pc, #388]	; (8008f20 <tcp_slowtmr+0x284>)
 8008d9c:	485c      	ldr	r0, [pc, #368]	; (8008f10 <tcp_slowtmr+0x274>)
 8008d9e:	f007 fc77 	bl	8010690 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008da8:	2b0b      	cmp	r3, #11
 8008daa:	d905      	bls.n	8008db8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db0:	3301      	adds	r3, #1
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008db6:	e0ed      	b.n	8008f94 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4a58      	ldr	r2, [pc, #352]	; (8008f24 <tcp_slowtmr+0x288>)
 8008dc2:	5cd3      	ldrb	r3, [r2, r3]
 8008dc4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008dcc:	7c7a      	ldrb	r2, [r7, #17]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d907      	bls.n	8008de2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008dd8:	3301      	adds	r3, #1
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008de8:	7c7a      	ldrb	r2, [r7, #17]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	f200 80d2 	bhi.w	8008f94 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008df0:	2301      	movs	r3, #1
 8008df2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e00:	f004 fc26 	bl	800d650 <tcp_zero_window_probe>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d014      	beq.n	8008e34 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	623b      	str	r3, [r7, #32]
 8008e0e:	e011      	b.n	8008e34 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e16:	4619      	mov	r1, r3
 8008e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e1a:	f003 faeb 	bl	800c3f4 <tcp_split_unsent_seg>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d107      	bne.n	8008e34 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e26:	f003 fd6b 	bl	800c900 <tcp_output>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 80ac 	beq.w	8008f94 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	f200 80a2 	bhi.w	8008f94 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008e60:	e098      	b.n	8008f94 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	db0f      	blt.n	8008e8c <tcp_slowtmr+0x1f0>
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d008      	beq.n	8008e8c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3301      	adds	r3, #1
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	b21a      	sxth	r2, r3
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	db7b      	blt.n	8008f94 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e9e:	f004 f821 	bl	800cee4 <tcp_rexmit_rto_prepare>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <tcp_slowtmr+0x21c>
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d171      	bne.n	8008f94 <tcp_slowtmr+0x2f8>
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d06d      	beq.n	8008f94 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d03a      	beq.n	8008f36 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ec6:	2b0c      	cmp	r3, #12
 8008ec8:	bf28      	it	cs
 8008eca:	230c      	movcs	r3, #12
 8008ecc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ed4:	10db      	asrs	r3, r3, #3
 8008ed6:	b21b      	sxth	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ee0:	4413      	add	r3, r2
 8008ee2:	7efa      	ldrb	r2, [r7, #27]
 8008ee4:	4910      	ldr	r1, [pc, #64]	; (8008f28 <tcp_slowtmr+0x28c>)
 8008ee6:	5c8a      	ldrb	r2, [r1, r2]
 8008ee8:	4093      	lsls	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	dc1a      	bgt.n	8008f2c <tcp_slowtmr+0x290>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	b21a      	sxth	r2, r3
 8008efa:	e019      	b.n	8008f30 <tcp_slowtmr+0x294>
 8008efc:	2000cc00 	.word	0x2000cc00
 8008f00:	2000409a 	.word	0x2000409a
 8008f04:	2000cbfc 	.word	0x2000cbfc
 8008f08:	0801231c 	.word	0x0801231c
 8008f0c:	08012660 	.word	0x08012660
 8008f10:	08012360 	.word	0x08012360
 8008f14:	0801268c 	.word	0x0801268c
 8008f18:	080126b8 	.word	0x080126b8
 8008f1c:	080126e8 	.word	0x080126e8
 8008f20:	0801271c 	.word	0x0801271c
 8008f24:	08014320 	.word	0x08014320
 8008f28:	08014310 	.word	0x08014310
 8008f2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	2200      	movs	r2, #0
 8008f3a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	bf28      	it	cs
 8008f4c:	4613      	movcs	r3, r2
 8008f4e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008f50:	8a7b      	ldrh	r3, [r7, #18]
 8008f52:	085b      	lsrs	r3, r3, #1
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d206      	bcs.n	8008f7c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f90:	f004 f818 	bl	800cfc4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
 8008f98:	2b06      	cmp	r3, #6
 8008f9a:	d111      	bne.n	8008fc0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	8b5b      	ldrh	r3, [r3, #26]
 8008fa0:	f003 0310 	and.w	r3, r3, #16
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008fa8:	4b9c      	ldr	r3, [pc, #624]	; (800921c <tcp_slowtmr+0x580>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b28      	cmp	r3, #40	; 0x28
 8008fb4:	d904      	bls.n	8008fc0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fba:	3301      	adds	r3, #1
 8008fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	7a5b      	ldrb	r3, [r3, #9]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d04a      	beq.n	8009062 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d003      	beq.n	8008fdc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008fd8:	2b07      	cmp	r3, #7
 8008fda:	d142      	bne.n	8009062 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008fdc:	4b8f      	ldr	r3, [pc, #572]	; (800921c <tcp_slowtmr+0x580>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008fec:	4b8c      	ldr	r3, [pc, #560]	; (8009220 <tcp_slowtmr+0x584>)
 8008fee:	440b      	add	r3, r1
 8008ff0:	498c      	ldr	r1, [pc, #560]	; (8009224 <tcp_slowtmr+0x588>)
 8008ff2:	fba1 1303 	umull	r1, r3, r1, r3
 8008ff6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d90a      	bls.n	8009012 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009000:	3301      	adds	r3, #1
 8009002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800900a:	3301      	adds	r3, #1
 800900c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009010:	e027      	b.n	8009062 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009012:	4b82      	ldr	r3, [pc, #520]	; (800921c <tcp_slowtmr+0x580>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009028:	4618      	mov	r0, r3
 800902a:	4b7f      	ldr	r3, [pc, #508]	; (8009228 <tcp_slowtmr+0x58c>)
 800902c:	fb03 f300 	mul.w	r3, r3, r0
 8009030:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009032:	497c      	ldr	r1, [pc, #496]	; (8009224 <tcp_slowtmr+0x588>)
 8009034:	fba1 1303 	umull	r1, r3, r1, r3
 8009038:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800903a:	429a      	cmp	r2, r3
 800903c:	d911      	bls.n	8009062 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800903e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009040:	f004 fac6 	bl	800d5d0 <tcp_keepalive>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800904a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800904e:	2b00      	cmp	r3, #0
 8009050:	d107      	bne.n	8009062 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009058:	3301      	adds	r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009066:	2b00      	cmp	r3, #0
 8009068:	d011      	beq.n	800908e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800906a:	4b6c      	ldr	r3, [pc, #432]	; (800921c <tcp_slowtmr+0x580>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	1ad2      	subs	r2, r2, r3
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800907a:	4619      	mov	r1, r3
 800907c:	460b      	mov	r3, r1
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	440b      	add	r3, r1
 8009082:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d302      	bcc.n	800908e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800908a:	f000 fddd 	bl	8009c48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	7d1b      	ldrb	r3, [r3, #20]
 8009092:	2b03      	cmp	r3, #3
 8009094:	d10b      	bne.n	80090ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009096:	4b61      	ldr	r3, [pc, #388]	; (800921c <tcp_slowtmr+0x580>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b28      	cmp	r3, #40	; 0x28
 80090a2:	d904      	bls.n	80090ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80090a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a8:	3301      	adds	r3, #1
 80090aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	7d1b      	ldrb	r3, [r3, #20]
 80090b2:	2b09      	cmp	r3, #9
 80090b4:	d10b      	bne.n	80090ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80090b6:	4b59      	ldr	r3, [pc, #356]	; (800921c <tcp_slowtmr+0x580>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2bf0      	cmp	r3, #240	; 0xf0
 80090c2:	d904      	bls.n	80090ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 80090c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090c8:	3301      	adds	r3, #1
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80090ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d060      	beq.n	8009198 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80090de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090e0:	f000 fbfe 	bl	80098e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d010      	beq.n	800910c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80090ea:	4b50      	ldr	r3, [pc, #320]	; (800922c <tcp_slowtmr+0x590>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d106      	bne.n	8009102 <tcp_slowtmr+0x466>
 80090f4:	4b4e      	ldr	r3, [pc, #312]	; (8009230 <tcp_slowtmr+0x594>)
 80090f6:	f240 526d 	movw	r2, #1389	; 0x56d
 80090fa:	494e      	ldr	r1, [pc, #312]	; (8009234 <tcp_slowtmr+0x598>)
 80090fc:	484e      	ldr	r0, [pc, #312]	; (8009238 <tcp_slowtmr+0x59c>)
 80090fe:	f007 fac7 	bl	8010690 <iprintf>
        prev->next = pcb->next;
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	60da      	str	r2, [r3, #12]
 800910a:	e00f      	b.n	800912c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800910c:	4b47      	ldr	r3, [pc, #284]	; (800922c <tcp_slowtmr+0x590>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d006      	beq.n	8009124 <tcp_slowtmr+0x488>
 8009116:	4b46      	ldr	r3, [pc, #280]	; (8009230 <tcp_slowtmr+0x594>)
 8009118:	f240 5271 	movw	r2, #1393	; 0x571
 800911c:	4947      	ldr	r1, [pc, #284]	; (800923c <tcp_slowtmr+0x5a0>)
 800911e:	4846      	ldr	r0, [pc, #280]	; (8009238 <tcp_slowtmr+0x59c>)
 8009120:	f007 fab6 	bl	8010690 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	4a40      	ldr	r2, [pc, #256]	; (800922c <tcp_slowtmr+0x590>)
 800912a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800912c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009130:	2b00      	cmp	r3, #0
 8009132:	d013      	beq.n	800915c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800913c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	3304      	adds	r3, #4
 8009142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009144:	8ad2      	ldrh	r2, [r2, #22]
 8009146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009148:	8b09      	ldrh	r1, [r1, #24]
 800914a:	9102      	str	r1, [sp, #8]
 800914c:	9201      	str	r2, [sp, #4]
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	462b      	mov	r3, r5
 8009152:	4622      	mov	r2, r4
 8009154:	4601      	mov	r1, r0
 8009156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009158:	f004 f986 	bl	800d468 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	7d1b      	ldrb	r3, [r3, #20]
 8009166:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009172:	6838      	ldr	r0, [r7, #0]
 8009174:	f7ff f9f4 	bl	8008560 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009178:	4b31      	ldr	r3, [pc, #196]	; (8009240 <tcp_slowtmr+0x5a4>)
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d004      	beq.n	800918e <tcp_slowtmr+0x4f2>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f06f 010c 	mvn.w	r1, #12
 800918a:	68b8      	ldr	r0, [r7, #8]
 800918c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800918e:	4b2c      	ldr	r3, [pc, #176]	; (8009240 <tcp_slowtmr+0x5a4>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d037      	beq.n	8009206 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009196:	e592      	b.n	8008cbe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	7f1b      	ldrb	r3, [r3, #28]
 80091a6:	3301      	adds	r3, #1
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	7f1a      	ldrb	r2, [r3, #28]
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	7f5b      	ldrb	r3, [r3, #29]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d325      	bcc.n	8009206 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	2200      	movs	r2, #0
 80091be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80091c0:	4b1f      	ldr	r3, [pc, #124]	; (8009240 <tcp_slowtmr+0x5a4>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <tcp_slowtmr+0x54c>
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d8:	6912      	ldr	r2, [r2, #16]
 80091da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	4603      	mov	r3, r0
 80091e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80091e6:	e002      	b.n	80091ee <tcp_slowtmr+0x552>
 80091e8:	2300      	movs	r3, #0
 80091ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80091ee:	4b14      	ldr	r3, [pc, #80]	; (8009240 <tcp_slowtmr+0x5a4>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d000      	beq.n	80091f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80091f6:	e562      	b.n	8008cbe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80091f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009202:	f003 fb7d 	bl	800c900 <tcp_output>
  while (pcb != NULL) {
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	2b00      	cmp	r3, #0
 800920a:	f47f ad5e 	bne.w	8008cca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009212:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <tcp_slowtmr+0x5a8>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009218:	e069      	b.n	80092ee <tcp_slowtmr+0x652>
 800921a:	bf00      	nop
 800921c:	2000cc00 	.word	0x2000cc00
 8009220:	000a4cb8 	.word	0x000a4cb8
 8009224:	10624dd3 	.word	0x10624dd3
 8009228:	000124f8 	.word	0x000124f8
 800922c:	2000cbfc 	.word	0x2000cbfc
 8009230:	0801231c 	.word	0x0801231c
 8009234:	08012754 	.word	0x08012754
 8009238:	08012360 	.word	0x08012360
 800923c:	08012780 	.word	0x08012780
 8009240:	2000cbf8 	.word	0x2000cbf8
 8009244:	2000cc0c 	.word	0x2000cc0c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	7d1b      	ldrb	r3, [r3, #20]
 800924c:	2b0a      	cmp	r3, #10
 800924e:	d006      	beq.n	800925e <tcp_slowtmr+0x5c2>
 8009250:	4b2b      	ldr	r3, [pc, #172]	; (8009300 <tcp_slowtmr+0x664>)
 8009252:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009256:	492b      	ldr	r1, [pc, #172]	; (8009304 <tcp_slowtmr+0x668>)
 8009258:	482b      	ldr	r0, [pc, #172]	; (8009308 <tcp_slowtmr+0x66c>)
 800925a:	f007 fa19 	bl	8010690 <iprintf>
    pcb_remove = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009264:	4b29      	ldr	r3, [pc, #164]	; (800930c <tcp_slowtmr+0x670>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2bf0      	cmp	r3, #240	; 0xf0
 8009270:	d904      	bls.n	800927c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009276:	3301      	adds	r3, #1
 8009278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800927c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009280:	2b00      	cmp	r3, #0
 8009282:	d02f      	beq.n	80092e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009286:	f000 fb2b 	bl	80098e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	2b00      	cmp	r3, #0
 800928e:	d010      	beq.n	80092b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009290:	4b1f      	ldr	r3, [pc, #124]	; (8009310 <tcp_slowtmr+0x674>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009296:	429a      	cmp	r2, r3
 8009298:	d106      	bne.n	80092a8 <tcp_slowtmr+0x60c>
 800929a:	4b19      	ldr	r3, [pc, #100]	; (8009300 <tcp_slowtmr+0x664>)
 800929c:	f240 52af 	movw	r2, #1455	; 0x5af
 80092a0:	491c      	ldr	r1, [pc, #112]	; (8009314 <tcp_slowtmr+0x678>)
 80092a2:	4819      	ldr	r0, [pc, #100]	; (8009308 <tcp_slowtmr+0x66c>)
 80092a4:	f007 f9f4 	bl	8010690 <iprintf>
        prev->next = pcb->next;
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e00f      	b.n	80092d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80092b2:	4b17      	ldr	r3, [pc, #92]	; (8009310 <tcp_slowtmr+0x674>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d006      	beq.n	80092ca <tcp_slowtmr+0x62e>
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <tcp_slowtmr+0x664>)
 80092be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80092c2:	4915      	ldr	r1, [pc, #84]	; (8009318 <tcp_slowtmr+0x67c>)
 80092c4:	4810      	ldr	r0, [pc, #64]	; (8009308 <tcp_slowtmr+0x66c>)
 80092c6:	f007 f9e3 	bl	8010690 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	4a10      	ldr	r2, [pc, #64]	; (8009310 <tcp_slowtmr+0x674>)
 80092d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80092dc:	69f8      	ldr	r0, [r7, #28]
 80092de:	f7ff f93f 	bl	8008560 <tcp_free>
 80092e2:	e004      	b.n	80092ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1a9      	bne.n	8009248 <tcp_slowtmr+0x5ac>
    }
  }
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	3730      	adds	r7, #48	; 0x30
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bdb0      	pop	{r4, r5, r7, pc}
 80092fe:	bf00      	nop
 8009300:	0801231c 	.word	0x0801231c
 8009304:	080127ac 	.word	0x080127ac
 8009308:	08012360 	.word	0x08012360
 800930c:	2000cc00 	.word	0x2000cc00
 8009310:	2000cc0c 	.word	0x2000cc0c
 8009314:	080127dc 	.word	0x080127dc
 8009318:	08012804 	.word	0x08012804

0800931c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009322:	4b2d      	ldr	r3, [pc, #180]	; (80093d8 <tcp_fasttmr+0xbc>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	3301      	adds	r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <tcp_fasttmr+0xbc>)
 800932c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800932e:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <tcp_fasttmr+0xc0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009334:	e048      	b.n	80093c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7f9a      	ldrb	r2, [r3, #30]
 800933a:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <tcp_fasttmr+0xbc>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d03f      	beq.n	80093c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009342:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <tcp_fasttmr+0xbc>)
 8009344:	781a      	ldrb	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8b5b      	ldrh	r3, [r3, #26]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d010      	beq.n	8009378 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8b5b      	ldrh	r3, [r3, #26]
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	b29a      	uxth	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f003 facb 	bl	800c900 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	8b5b      	ldrh	r3, [r3, #26]
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	8b5b      	ldrh	r3, [r3, #26]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d009      	beq.n	8009398 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8b5b      	ldrh	r3, [r3, #26]
 8009388:	f023 0308 	bic.w	r3, r3, #8
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff fa78 	bl	8008888 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <tcp_fasttmr+0xc4>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f819 	bl	80093e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <tcp_fasttmr+0xc4>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d000      	beq.n	80093bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80093ba:	e7b8      	b.n	800932e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	607b      	str	r3, [r7, #4]
 80093c0:	e002      	b.n	80093c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1b3      	bne.n	8009336 <tcp_fasttmr+0x1a>
    }
  }
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	2000409a 	.word	0x2000409a
 80093dc:	2000cbfc 	.word	0x2000cbfc
 80093e0:	2000cbf8 	.word	0x2000cbf8

080093e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <tcp_process_refused_data+0x22>
 80093f2:	4b37      	ldr	r3, [pc, #220]	; (80094d0 <tcp_process_refused_data+0xec>)
 80093f4:	f240 6209 	movw	r2, #1545	; 0x609
 80093f8:	4936      	ldr	r1, [pc, #216]	; (80094d4 <tcp_process_refused_data+0xf0>)
 80093fa:	4837      	ldr	r0, [pc, #220]	; (80094d8 <tcp_process_refused_data+0xf4>)
 80093fc:	f007 f948 	bl	8010690 <iprintf>
 8009400:	f06f 030f 	mvn.w	r3, #15
 8009404:	e060      	b.n	80094c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800940a:	7b5b      	ldrb	r3, [r3, #13]
 800940c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009412:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00b      	beq.n	800943c <tcp_process_refused_data+0x58>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6918      	ldr	r0, [r3, #16]
 800942e:	2300      	movs	r3, #0
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	47a0      	blx	r4
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
 800943a:	e007      	b.n	800944c <tcp_process_refused_data+0x68>
 800943c:	2300      	movs	r3, #0
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	2000      	movs	r0, #0
 8009444:	f000 f8a4 	bl	8009590 <tcp_recv_null>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800944c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d12a      	bne.n	80094aa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d033      	beq.n	80094c6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009462:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009466:	d005      	beq.n	8009474 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	3301      	adds	r3, #1
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <tcp_process_refused_data+0xb2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6918      	ldr	r0, [r3, #16]
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	47a0      	blx	r4
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
 8009494:	e001      	b.n	800949a <tcp_process_refused_data+0xb6>
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800949a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949e:	f113 0f0d 	cmn.w	r3, #13
 80094a2:	d110      	bne.n	80094c6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80094a4:	f06f 030c 	mvn.w	r3, #12
 80094a8:	e00e      	b.n	80094c8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80094aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ae:	f113 0f0d 	cmn.w	r3, #13
 80094b2:	d102      	bne.n	80094ba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80094b4:	f06f 030c 	mvn.w	r3, #12
 80094b8:	e006      	b.n	80094c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80094c0:	f06f 0304 	mvn.w	r3, #4
 80094c4:	e000      	b.n	80094c8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd90      	pop	{r4, r7, pc}
 80094d0:	0801231c 	.word	0x0801231c
 80094d4:	0801282c 	.word	0x0801282c
 80094d8:	08012360 	.word	0x08012360

080094dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80094e4:	e007      	b.n	80094f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f80a 	bl	8009506 <tcp_seg_free>
    seg = next;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1f4      	bne.n	80094e6 <tcp_segs_free+0xa>
  }
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00c      	beq.n	800952e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d004      	beq.n	8009526 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe fd71 	bl	8008008 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	2003      	movs	r0, #3
 800952a:	f7fd fec9 	bl	80072c0 <memp_free>
  }
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <tcp_seg_copy+0x1c>
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <tcp_seg_copy+0x4c>)
 8009548:	f240 6282 	movw	r2, #1666	; 0x682
 800954c:	490e      	ldr	r1, [pc, #56]	; (8009588 <tcp_seg_copy+0x50>)
 800954e:	480f      	ldr	r0, [pc, #60]	; (800958c <tcp_seg_copy+0x54>)
 8009550:	f007 f89e 	bl	8010690 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009554:	2003      	movs	r0, #3
 8009556:	f7fd fe61 	bl	800721c <memp_malloc>
 800955a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <tcp_seg_copy+0x2e>
    return NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	e00a      	b.n	800957c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009566:	2210      	movs	r2, #16
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f007 f87a 	bl	8010664 <memcpy>
  pbuf_ref(cseg->p);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fded 	bl	8008154 <pbuf_ref>
  return cseg;
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	0801231c 	.word	0x0801231c
 8009588:	08012870 	.word	0x08012870
 800958c:	08012360 	.word	0x08012360

08009590 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d109      	bne.n	80095b8 <tcp_recv_null+0x28>
 80095a4:	4b12      	ldr	r3, [pc, #72]	; (80095f0 <tcp_recv_null+0x60>)
 80095a6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80095aa:	4912      	ldr	r1, [pc, #72]	; (80095f4 <tcp_recv_null+0x64>)
 80095ac:	4812      	ldr	r0, [pc, #72]	; (80095f8 <tcp_recv_null+0x68>)
 80095ae:	f007 f86f 	bl	8010690 <iprintf>
 80095b2:	f06f 030f 	mvn.w	r3, #15
 80095b6:	e016      	b.n	80095e6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d009      	beq.n	80095d2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	891b      	ldrh	r3, [r3, #8]
 80095c2:	4619      	mov	r1, r3
 80095c4:	68b8      	ldr	r0, [r7, #8]
 80095c6:	f7ff fb19 	bl	8008bfc <tcp_recved>
    pbuf_free(p);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7fe fd1c 	bl	8008008 <pbuf_free>
 80095d0:	e008      	b.n	80095e4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80095d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d104      	bne.n	80095e4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80095da:	68b8      	ldr	r0, [r7, #8]
 80095dc:	f7ff f9be 	bl	800895c <tcp_close>
 80095e0:	4603      	mov	r3, r0
 80095e2:	e000      	b.n	80095e6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	0801231c 	.word	0x0801231c
 80095f4:	0801288c 	.word	0x0801288c
 80095f8:	08012360 	.word	0x08012360

080095fc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800960a:	2b00      	cmp	r3, #0
 800960c:	db01      	blt.n	8009612 <tcp_kill_prio+0x16>
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	e000      	b.n	8009614 <tcp_kill_prio+0x18>
 8009612:	237f      	movs	r3, #127	; 0x7f
 8009614:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d034      	beq.n	8009686 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800961c:	7afb      	ldrb	r3, [r7, #11]
 800961e:	3b01      	subs	r3, #1
 8009620:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800962a:	4b19      	ldr	r3, [pc, #100]	; (8009690 <tcp_kill_prio+0x94>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	e01f      	b.n	8009672 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	7d5b      	ldrb	r3, [r3, #21]
 8009636:	7afa      	ldrb	r2, [r7, #11]
 8009638:	429a      	cmp	r2, r3
 800963a:	d80c      	bhi.n	8009656 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009640:	7afa      	ldrb	r2, [r7, #11]
 8009642:	429a      	cmp	r2, r3
 8009644:	d112      	bne.n	800966c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <tcp_kill_prio+0x98>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	429a      	cmp	r2, r3
 8009654:	d80a      	bhi.n	800966c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009656:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <tcp_kill_prio+0x98>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	7d5b      	ldrb	r3, [r3, #21]
 800966a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1dc      	bne.n	8009632 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d004      	beq.n	8009688 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800967e:	6938      	ldr	r0, [r7, #16]
 8009680:	f7ff fa56 	bl	8008b30 <tcp_abort>
 8009684:	e000      	b.n	8009688 <tcp_kill_prio+0x8c>
    return;
 8009686:	bf00      	nop
  }
}
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	2000cbfc 	.word	0x2000cbfc
 8009694:	2000cc00 	.word	0x2000cc00

08009698 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d009      	beq.n	80096bc <tcp_kill_state+0x24>
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d006      	beq.n	80096bc <tcp_kill_state+0x24>
 80096ae:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <tcp_kill_state+0x80>)
 80096b0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80096b4:	4919      	ldr	r1, [pc, #100]	; (800971c <tcp_kill_state+0x84>)
 80096b6:	481a      	ldr	r0, [pc, #104]	; (8009720 <tcp_kill_state+0x88>)
 80096b8:	f006 ffea 	bl	8010690 <iprintf>

  inactivity = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096c4:	4b17      	ldr	r3, [pc, #92]	; (8009724 <tcp_kill_state+0x8c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	e017      	b.n	80096fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	7d1b      	ldrb	r3, [r3, #20]
 80096d0:	79fa      	ldrb	r2, [r7, #7]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d10f      	bne.n	80096f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80096d6:	4b14      	ldr	r3, [pc, #80]	; (8009728 <tcp_kill_state+0x90>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d807      	bhi.n	80096f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <tcp_kill_state+0x90>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e4      	bne.n	80096cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009708:	2100      	movs	r1, #0
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f7ff f952 	bl	80089b4 <tcp_abandon>
  }
}
 8009710:	bf00      	nop
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	0801231c 	.word	0x0801231c
 800971c:	080128a8 	.word	0x080128a8
 8009720:	08012360 	.word	0x08012360
 8009724:	2000cbfc 	.word	0x2000cbfc
 8009728:	2000cc00 	.word	0x2000cc00

0800972c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <tcp_kill_timewait+0x58>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	e012      	b.n	8009768 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009742:	4b11      	ldr	r3, [pc, #68]	; (8009788 <tcp_kill_timewait+0x5c>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	429a      	cmp	r2, r3
 8009750:	d807      	bhi.n	8009762 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <tcp_kill_timewait+0x5c>)
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e9      	bne.n	8009742 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009774:	68b8      	ldr	r0, [r7, #8]
 8009776:	f7ff f9db 	bl	8008b30 <tcp_abort>
  }
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	2000cc0c 	.word	0x2000cc0c
 8009788:	2000cc00 	.word	0x2000cc00

0800978c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <tcp_handle_closepend+0x48>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009798:	e014      	b.n	80097c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	8b5b      	ldrh	r3, [r3, #26]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	8b5b      	ldrh	r3, [r3, #26]
 80097b0:	f023 0308 	bic.w	r3, r3, #8
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff f864 	bl	8008888 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e7      	bne.n	800979a <tcp_handle_closepend+0xe>
  }
}
 80097ca:	bf00      	nop
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	2000cbfc 	.word	0x2000cbfc

080097d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097e2:	2001      	movs	r0, #1
 80097e4:	f7fd fd1a 	bl	800721c <memp_malloc>
 80097e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d126      	bne.n	800983e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80097f0:	f7ff ffcc 	bl	800978c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80097f4:	f7ff ff9a 	bl	800972c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097f8:	2001      	movs	r0, #1
 80097fa:	f7fd fd0f 	bl	800721c <memp_malloc>
 80097fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d11b      	bne.n	800983e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009806:	2009      	movs	r0, #9
 8009808:	f7ff ff46 	bl	8009698 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800980c:	2001      	movs	r0, #1
 800980e:	f7fd fd05 	bl	800721c <memp_malloc>
 8009812:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d111      	bne.n	800983e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800981a:	2008      	movs	r0, #8
 800981c:	f7ff ff3c 	bl	8009698 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009820:	2001      	movs	r0, #1
 8009822:	f7fd fcfb 	bl	800721c <memp_malloc>
 8009826:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fee3 	bl	80095fc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009836:	2001      	movs	r0, #1
 8009838:	f7fd fcf0 	bl	800721c <memp_malloc>
 800983c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d03f      	beq.n	80098c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009844:	229c      	movs	r2, #156	; 0x9c
 8009846:	2100      	movs	r1, #0
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f006 ff19 	bl	8010680 <memset>
    pcb->prio = prio;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	79fa      	ldrb	r2, [r7, #7]
 8009852:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800985a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009864:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f44f 7206 	mov.w	r2, #536	; 0x218
 800987a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2206      	movs	r2, #6
 8009880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2206      	movs	r2, #6
 8009888:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009890:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <tcp_alloc+0xf8>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <tcp_alloc+0xfc>)
 80098a4:	781a      	ldrb	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80098b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <tcp_alloc+0x100>)
 80098b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4a07      	ldr	r2, [pc, #28]	; (80098dc <tcp_alloc+0x104>)
 80098c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	2000cc00 	.word	0x2000cc00
 80098d4:	2000409a 	.word	0x2000409a
 80098d8:	08009591 	.word	0x08009591
 80098dc:	006ddd00 	.word	0x006ddd00

080098e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d107      	bne.n	80098fe <tcp_pcb_purge+0x1e>
 80098ee:	4b21      	ldr	r3, [pc, #132]	; (8009974 <tcp_pcb_purge+0x94>)
 80098f0:	f640 0251 	movw	r2, #2129	; 0x851
 80098f4:	4920      	ldr	r1, [pc, #128]	; (8009978 <tcp_pcb_purge+0x98>)
 80098f6:	4821      	ldr	r0, [pc, #132]	; (800997c <tcp_pcb_purge+0x9c>)
 80098f8:	f006 feca 	bl	8010690 <iprintf>
 80098fc:	e037      	b.n	800996e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7d1b      	ldrb	r3, [r3, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d033      	beq.n	800996e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800990a:	2b0a      	cmp	r3, #10
 800990c:	d02f      	beq.n	800996e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009912:	2b01      	cmp	r3, #1
 8009914:	d02b      	beq.n	800996e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fb70 	bl	8008008 <pbuf_free>
      pcb->refused_data = NULL;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f986 	bl	8009c48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009942:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fdc7 	bl	80094dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fdc2 	bl	80094dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	66da      	str	r2, [r3, #108]	; 0x6c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0801231c 	.word	0x0801231c
 8009978:	08012968 	.word	0x08012968
 800997c:	08012360 	.word	0x08012360

08009980 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <tcp_pcb_remove+0x1e>
 8009990:	4b3e      	ldr	r3, [pc, #248]	; (8009a8c <tcp_pcb_remove+0x10c>)
 8009992:	f640 0283 	movw	r2, #2179	; 0x883
 8009996:	493e      	ldr	r1, [pc, #248]	; (8009a90 <tcp_pcb_remove+0x110>)
 8009998:	483e      	ldr	r0, [pc, #248]	; (8009a94 <tcp_pcb_remove+0x114>)
 800999a:	f006 fe79 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <tcp_pcb_remove+0x32>
 80099a4:	4b39      	ldr	r3, [pc, #228]	; (8009a8c <tcp_pcb_remove+0x10c>)
 80099a6:	f640 0284 	movw	r2, #2180	; 0x884
 80099aa:	493b      	ldr	r1, [pc, #236]	; (8009a98 <tcp_pcb_remove+0x118>)
 80099ac:	4839      	ldr	r0, [pc, #228]	; (8009a94 <tcp_pcb_remove+0x114>)
 80099ae:	f006 fe6f 	bl	8010690 <iprintf>

  TCP_RMV(pcblist, pcb);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d105      	bne.n	80099c8 <tcp_pcb_remove+0x48>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	e013      	b.n	80099f0 <tcp_pcb_remove+0x70>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	e00c      	b.n	80099ea <tcp_pcb_remove+0x6a>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d104      	bne.n	80099e4 <tcp_pcb_remove+0x64>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	e005      	b.n	80099f0 <tcp_pcb_remove+0x70>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1ef      	bne.n	80099d0 <tcp_pcb_remove+0x50>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80099f6:	6838      	ldr	r0, [r7, #0]
 80099f8:	f7ff ff72 	bl	80098e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	7d1b      	ldrb	r3, [r3, #20]
 8009a00:	2b0a      	cmp	r3, #10
 8009a02:	d013      	beq.n	8009a2c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d00f      	beq.n	8009a2c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	8b5b      	ldrh	r3, [r3, #26]
 8009a10:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	8b5b      	ldrh	r3, [r3, #26]
 8009a1c:	f043 0302 	orr.w	r3, r3, #2
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009a26:	6838      	ldr	r0, [r7, #0]
 8009a28:	f002 ff6a 	bl	800c900 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	7d1b      	ldrb	r3, [r3, #20]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d020      	beq.n	8009a76 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <tcp_pcb_remove+0xca>
 8009a3c:	4b13      	ldr	r3, [pc, #76]	; (8009a8c <tcp_pcb_remove+0x10c>)
 8009a3e:	f640 0293 	movw	r2, #2195	; 0x893
 8009a42:	4916      	ldr	r1, [pc, #88]	; (8009a9c <tcp_pcb_remove+0x11c>)
 8009a44:	4813      	ldr	r0, [pc, #76]	; (8009a94 <tcp_pcb_remove+0x114>)
 8009a46:	f006 fe23 	bl	8010690 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d006      	beq.n	8009a60 <tcp_pcb_remove+0xe0>
 8009a52:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <tcp_pcb_remove+0x10c>)
 8009a54:	f640 0294 	movw	r2, #2196	; 0x894
 8009a58:	4911      	ldr	r1, [pc, #68]	; (8009aa0 <tcp_pcb_remove+0x120>)
 8009a5a:	480e      	ldr	r0, [pc, #56]	; (8009a94 <tcp_pcb_remove+0x114>)
 8009a5c:	f006 fe18 	bl	8010690 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d006      	beq.n	8009a76 <tcp_pcb_remove+0xf6>
 8009a68:	4b08      	ldr	r3, [pc, #32]	; (8009a8c <tcp_pcb_remove+0x10c>)
 8009a6a:	f640 0296 	movw	r2, #2198	; 0x896
 8009a6e:	490d      	ldr	r1, [pc, #52]	; (8009aa4 <tcp_pcb_remove+0x124>)
 8009a70:	4808      	ldr	r0, [pc, #32]	; (8009a94 <tcp_pcb_remove+0x114>)
 8009a72:	f006 fe0d 	bl	8010690 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0801231c 	.word	0x0801231c
 8009a90:	08012984 	.word	0x08012984
 8009a94:	08012360 	.word	0x08012360
 8009a98:	080129a0 	.word	0x080129a0
 8009a9c:	080129c0 	.word	0x080129c0
 8009aa0:	080129d8 	.word	0x080129d8
 8009aa4:	080129f4 	.word	0x080129f4

08009aa8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <tcp_next_iss+0x1c>
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <tcp_next_iss+0x38>)
 8009ab8:	f640 02af 	movw	r2, #2223	; 0x8af
 8009abc:	4909      	ldr	r1, [pc, #36]	; (8009ae4 <tcp_next_iss+0x3c>)
 8009abe:	480a      	ldr	r0, [pc, #40]	; (8009ae8 <tcp_next_iss+0x40>)
 8009ac0:	f006 fde6 	bl	8010690 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009ac4:	4b09      	ldr	r3, [pc, #36]	; (8009aec <tcp_next_iss+0x44>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <tcp_next_iss+0x48>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4413      	add	r3, r2
 8009ace:	4a07      	ldr	r2, [pc, #28]	; (8009aec <tcp_next_iss+0x44>)
 8009ad0:	6013      	str	r3, [r2, #0]
  return iss;
 8009ad2:	4b06      	ldr	r3, [pc, #24]	; (8009aec <tcp_next_iss+0x44>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	0801231c 	.word	0x0801231c
 8009ae4:	08012a0c 	.word	0x08012a0c
 8009ae8:	08012360 	.word	0x08012360
 8009aec:	20000014 	.word	0x20000014
 8009af0:	2000cc00 	.word	0x2000cc00

08009af4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <tcp_eff_send_mss_netif+0x22>
 8009b08:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <tcp_eff_send_mss_netif+0x68>)
 8009b0a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009b0e:	4914      	ldr	r1, [pc, #80]	; (8009b60 <tcp_eff_send_mss_netif+0x6c>)
 8009b10:	4814      	ldr	r0, [pc, #80]	; (8009b64 <tcp_eff_send_mss_netif+0x70>)
 8009b12:	f006 fdbd 	bl	8010690 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009b1c:	89fb      	ldrh	r3, [r7, #14]
 8009b1e:	e019      	b.n	8009b54 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009b26:	8afb      	ldrh	r3, [r7, #22]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d012      	beq.n	8009b52 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009b2c:	2328      	movs	r3, #40	; 0x28
 8009b2e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009b30:	8afa      	ldrh	r2, [r7, #22]
 8009b32:	8abb      	ldrh	r3, [r7, #20]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d904      	bls.n	8009b42 <tcp_eff_send_mss_netif+0x4e>
 8009b38:	8afa      	ldrh	r2, [r7, #22]
 8009b3a:	8abb      	ldrh	r3, [r7, #20]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	e000      	b.n	8009b44 <tcp_eff_send_mss_netif+0x50>
 8009b42:	2300      	movs	r3, #0
 8009b44:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009b46:	8a7a      	ldrh	r2, [r7, #18]
 8009b48:	89fb      	ldrh	r3, [r7, #14]
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf28      	it	cs
 8009b4e:	4613      	movcs	r3, r2
 8009b50:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009b52:	89fb      	ldrh	r3, [r7, #14]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	0801231c 	.word	0x0801231c
 8009b60:	08012a28 	.word	0x08012a28
 8009b64:	08012360 	.word	0x08012360

08009b68 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d119      	bne.n	8009bb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009b7c:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009b7e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009b82:	4910      	ldr	r1, [pc, #64]	; (8009bc4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009b84:	4810      	ldr	r0, [pc, #64]	; (8009bc8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009b86:	f006 fd83 	bl	8010690 <iprintf>

  while (pcb != NULL) {
 8009b8a:	e011      	b.n	8009bb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d108      	bne.n	8009baa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7fe ffc6 	bl	8008b30 <tcp_abort>
      pcb = next;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e002      	b.n	8009bb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1ea      	bne.n	8009b8c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	0801231c 	.word	0x0801231c
 8009bc4:	08012a50 	.word	0x08012a50
 8009bc8:	08012360 	.word	0x08012360

08009bcc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d02a      	beq.n	8009c32 <tcp_netif_ip_addr_changed+0x66>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d026      	beq.n	8009c32 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <tcp_netif_ip_addr_changed+0x70>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff ffbc 	bl	8009b68 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <tcp_netif_ip_addr_changed+0x74>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff ffb6 	bl	8009b68 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d017      	beq.n	8009c32 <tcp_netif_ip_addr_changed+0x66>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d013      	beq.n	8009c32 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c0a:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <tcp_netif_ip_addr_changed+0x78>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	e00c      	b.n	8009c2c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d103      	bne.n	8009c26 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1ef      	bne.n	8009c12 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	2000cbfc 	.word	0x2000cbfc
 8009c40:	2000cc08 	.word	0x2000cc08
 8009c44:	2000cc04 	.word	0x2000cc04

08009c48 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d007      	beq.n	8009c68 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fc3d 	bl	80094dc <tcp_segs_free>
    pcb->ooseq = NULL;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b08d      	sub	sp, #52	; 0x34
 8009c74:	af04      	add	r7, sp, #16
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d105      	bne.n	8009c8c <tcp_input+0x1c>
 8009c80:	4b9b      	ldr	r3, [pc, #620]	; (8009ef0 <tcp_input+0x280>)
 8009c82:	2283      	movs	r2, #131	; 0x83
 8009c84:	499b      	ldr	r1, [pc, #620]	; (8009ef4 <tcp_input+0x284>)
 8009c86:	489c      	ldr	r0, [pc, #624]	; (8009ef8 <tcp_input+0x288>)
 8009c88:	f006 fd02 	bl	8010690 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	4a9a      	ldr	r2, [pc, #616]	; (8009efc <tcp_input+0x28c>)
 8009c92:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	895b      	ldrh	r3, [r3, #10]
 8009c98:	2b13      	cmp	r3, #19
 8009c9a:	f240 83c4 	bls.w	800a426 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009c9e:	4b98      	ldr	r3, [pc, #608]	; (8009f00 <tcp_input+0x290>)
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	4a97      	ldr	r2, [pc, #604]	; (8009f00 <tcp_input+0x290>)
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f005 fc43 	bl	800f534 <ip4_addr_isbroadcast_u32>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f040 83ba 	bne.w	800a42a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009cb6:	4b92      	ldr	r3, [pc, #584]	; (8009f00 <tcp_input+0x290>)
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009cbe:	2be0      	cmp	r3, #224	; 0xe0
 8009cc0:	f000 83b3 	beq.w	800a42a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009cc4:	4b8d      	ldr	r3, [pc, #564]	; (8009efc <tcp_input+0x28c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	899b      	ldrh	r3, [r3, #12]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fc fdef 	bl	80068b0 <lwip_htons>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	0b1b      	lsrs	r3, r3, #12
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009cde:	7cbb      	ldrb	r3, [r7, #18]
 8009ce0:	2b13      	cmp	r3, #19
 8009ce2:	f240 83a4 	bls.w	800a42e <tcp_input+0x7be>
 8009ce6:	7cbb      	ldrb	r3, [r7, #18]
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	891b      	ldrh	r3, [r3, #8]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	f200 839d 	bhi.w	800a42e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009cf4:	7cbb      	ldrb	r3, [r7, #18]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b14      	subs	r3, #20
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	4b81      	ldr	r3, [pc, #516]	; (8009f04 <tcp_input+0x294>)
 8009cfe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009d00:	4b81      	ldr	r3, [pc, #516]	; (8009f08 <tcp_input+0x298>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	895a      	ldrh	r2, [r3, #10]
 8009d0a:	7cbb      	ldrb	r3, [r7, #18]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d309      	bcc.n	8009d26 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009d12:	4b7c      	ldr	r3, [pc, #496]	; (8009f04 <tcp_input+0x294>)
 8009d14:	881a      	ldrh	r2, [r3, #0]
 8009d16:	4b7d      	ldr	r3, [pc, #500]	; (8009f0c <tcp_input+0x29c>)
 8009d18:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009d1a:	7cbb      	ldrb	r3, [r7, #18]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fe f8ec 	bl	8007efc <pbuf_remove_header>
 8009d24:	e04e      	b.n	8009dc4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <tcp_input+0xca>
 8009d2e:	4b70      	ldr	r3, [pc, #448]	; (8009ef0 <tcp_input+0x280>)
 8009d30:	22c2      	movs	r2, #194	; 0xc2
 8009d32:	4977      	ldr	r1, [pc, #476]	; (8009f10 <tcp_input+0x2a0>)
 8009d34:	4870      	ldr	r0, [pc, #448]	; (8009ef8 <tcp_input+0x288>)
 8009d36:	f006 fcab 	bl	8010690 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009d3a:	2114      	movs	r1, #20
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7fe f8dd 	bl	8007efc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	895a      	ldrh	r2, [r3, #10]
 8009d46:	4b71      	ldr	r3, [pc, #452]	; (8009f0c <tcp_input+0x29c>)
 8009d48:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009d4a:	4b6e      	ldr	r3, [pc, #440]	; (8009f04 <tcp_input+0x294>)
 8009d4c:	881a      	ldrh	r2, [r3, #0]
 8009d4e:	4b6f      	ldr	r3, [pc, #444]	; (8009f0c <tcp_input+0x29c>)
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009d56:	4b6d      	ldr	r3, [pc, #436]	; (8009f0c <tcp_input+0x29c>)
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe f8cd 	bl	8007efc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	895b      	ldrh	r3, [r3, #10]
 8009d68:	8a3a      	ldrh	r2, [r7, #16]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	f200 8361 	bhi.w	800a432 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4a64      	ldr	r2, [pc, #400]	; (8009f08 <tcp_input+0x298>)
 8009d78:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	8a3a      	ldrh	r2, [r7, #16]
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe f8ba 	bl	8007efc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	891a      	ldrh	r2, [r3, #8]
 8009d8c:	8a3b      	ldrh	r3, [r7, #16]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	895b      	ldrh	r3, [r3, #10]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d005      	beq.n	8009daa <tcp_input+0x13a>
 8009d9e:	4b54      	ldr	r3, [pc, #336]	; (8009ef0 <tcp_input+0x280>)
 8009da0:	22df      	movs	r2, #223	; 0xdf
 8009da2:	495c      	ldr	r1, [pc, #368]	; (8009f14 <tcp_input+0x2a4>)
 8009da4:	4854      	ldr	r0, [pc, #336]	; (8009ef8 <tcp_input+0x288>)
 8009da6:	f006 fc73 	bl	8010690 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	891a      	ldrh	r2, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	891b      	ldrh	r3, [r3, #8]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d005      	beq.n	8009dc4 <tcp_input+0x154>
 8009db8:	4b4d      	ldr	r3, [pc, #308]	; (8009ef0 <tcp_input+0x280>)
 8009dba:	22e0      	movs	r2, #224	; 0xe0
 8009dbc:	4956      	ldr	r1, [pc, #344]	; (8009f18 <tcp_input+0x2a8>)
 8009dbe:	484e      	ldr	r0, [pc, #312]	; (8009ef8 <tcp_input+0x288>)
 8009dc0:	f006 fc66 	bl	8010690 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009dc4:	4b4d      	ldr	r3, [pc, #308]	; (8009efc <tcp_input+0x28c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	4a4b      	ldr	r2, [pc, #300]	; (8009efc <tcp_input+0x28c>)
 8009dce:	6814      	ldr	r4, [r2, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fc fd6d 	bl	80068b0 <lwip_htons>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009dda:	4b48      	ldr	r3, [pc, #288]	; (8009efc <tcp_input+0x28c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	885b      	ldrh	r3, [r3, #2]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	4a46      	ldr	r2, [pc, #280]	; (8009efc <tcp_input+0x28c>)
 8009de4:	6814      	ldr	r4, [r2, #0]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fc fd62 	bl	80068b0 <lwip_htons>
 8009dec:	4603      	mov	r3, r0
 8009dee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009df0:	4b42      	ldr	r3, [pc, #264]	; (8009efc <tcp_input+0x28c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4a41      	ldr	r2, [pc, #260]	; (8009efc <tcp_input+0x28c>)
 8009df8:	6814      	ldr	r4, [r2, #0]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fc fd6d 	bl	80068da <lwip_htonl>
 8009e00:	4603      	mov	r3, r0
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	6863      	ldr	r3, [r4, #4]
 8009e06:	4a45      	ldr	r2, [pc, #276]	; (8009f1c <tcp_input+0x2ac>)
 8009e08:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009e0a:	4b3c      	ldr	r3, [pc, #240]	; (8009efc <tcp_input+0x28c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	4a3a      	ldr	r2, [pc, #232]	; (8009efc <tcp_input+0x28c>)
 8009e12:	6814      	ldr	r4, [r2, #0]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fc fd60 	bl	80068da <lwip_htonl>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	60a3      	str	r3, [r4, #8]
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	4a3f      	ldr	r2, [pc, #252]	; (8009f20 <tcp_input+0x2b0>)
 8009e22:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009e24:	4b35      	ldr	r3, [pc, #212]	; (8009efc <tcp_input+0x28c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	89db      	ldrh	r3, [r3, #14]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	4a33      	ldr	r2, [pc, #204]	; (8009efc <tcp_input+0x28c>)
 8009e2e:	6814      	ldr	r4, [r2, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fc fd3d 	bl	80068b0 <lwip_htons>
 8009e36:	4603      	mov	r3, r0
 8009e38:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009e3a:	4b30      	ldr	r3, [pc, #192]	; (8009efc <tcp_input+0x28c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	899b      	ldrh	r3, [r3, #12]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fc fd34 	bl	80068b0 <lwip_htons>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	4b34      	ldr	r3, [pc, #208]	; (8009f24 <tcp_input+0x2b4>)
 8009e54:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	891a      	ldrh	r2, [r3, #8]
 8009e5a:	4b33      	ldr	r3, [pc, #204]	; (8009f28 <tcp_input+0x2b8>)
 8009e5c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <tcp_input+0x2b4>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <tcp_input+0x214>
    tcplen++;
 8009e6a:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <tcp_input+0x2b8>)
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <tcp_input+0x2b8>)
 8009e74:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	891a      	ldrh	r2, [r3, #8]
 8009e7a:	4b2b      	ldr	r3, [pc, #172]	; (8009f28 <tcp_input+0x2b8>)
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	f200 82d9 	bhi.w	800a436 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e88:	4b28      	ldr	r3, [pc, #160]	; (8009f2c <tcp_input+0x2bc>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	e09d      	b.n	8009fcc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d105      	bne.n	8009ea4 <tcp_input+0x234>
 8009e98:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <tcp_input+0x280>)
 8009e9a:	22fb      	movs	r2, #251	; 0xfb
 8009e9c:	4924      	ldr	r1, [pc, #144]	; (8009f30 <tcp_input+0x2c0>)
 8009e9e:	4816      	ldr	r0, [pc, #88]	; (8009ef8 <tcp_input+0x288>)
 8009ea0:	f006 fbf6 	bl	8010690 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	7d1b      	ldrb	r3, [r3, #20]
 8009ea8:	2b0a      	cmp	r3, #10
 8009eaa:	d105      	bne.n	8009eb8 <tcp_input+0x248>
 8009eac:	4b10      	ldr	r3, [pc, #64]	; (8009ef0 <tcp_input+0x280>)
 8009eae:	22fc      	movs	r2, #252	; 0xfc
 8009eb0:	4920      	ldr	r1, [pc, #128]	; (8009f34 <tcp_input+0x2c4>)
 8009eb2:	4811      	ldr	r0, [pc, #68]	; (8009ef8 <tcp_input+0x288>)
 8009eb4:	f006 fbec 	bl	8010690 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	7d1b      	ldrb	r3, [r3, #20]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d105      	bne.n	8009ecc <tcp_input+0x25c>
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <tcp_input+0x280>)
 8009ec2:	22fd      	movs	r2, #253	; 0xfd
 8009ec4:	491c      	ldr	r1, [pc, #112]	; (8009f38 <tcp_input+0x2c8>)
 8009ec6:	480c      	ldr	r0, [pc, #48]	; (8009ef8 <tcp_input+0x288>)
 8009ec8:	f006 fbe2 	bl	8010690 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	7a1b      	ldrb	r3, [r3, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d033      	beq.n	8009f3c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	7a1a      	ldrb	r2, [r3, #8]
 8009ed8:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <tcp_input+0x290>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d029      	beq.n	8009f3c <tcp_input+0x2cc>
      prev = pcb;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	61bb      	str	r3, [r7, #24]
      continue;
 8009eec:	e06b      	b.n	8009fc6 <tcp_input+0x356>
 8009eee:	bf00      	nop
 8009ef0:	08012a84 	.word	0x08012a84
 8009ef4:	08012ab8 	.word	0x08012ab8
 8009ef8:	08012ad0 	.word	0x08012ad0
 8009efc:	200040ac 	.word	0x200040ac
 8009f00:	20007328 	.word	0x20007328
 8009f04:	200040b0 	.word	0x200040b0
 8009f08:	200040b4 	.word	0x200040b4
 8009f0c:	200040b2 	.word	0x200040b2
 8009f10:	08012af8 	.word	0x08012af8
 8009f14:	08012b08 	.word	0x08012b08
 8009f18:	08012b14 	.word	0x08012b14
 8009f1c:	200040bc 	.word	0x200040bc
 8009f20:	200040c0 	.word	0x200040c0
 8009f24:	200040c8 	.word	0x200040c8
 8009f28:	200040c6 	.word	0x200040c6
 8009f2c:	2000cbfc 	.word	0x2000cbfc
 8009f30:	08012b34 	.word	0x08012b34
 8009f34:	08012b5c 	.word	0x08012b5c
 8009f38:	08012b88 	.word	0x08012b88
    }

    if (pcb->remote_port == tcphdr->src &&
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	8b1a      	ldrh	r2, [r3, #24]
 8009f40:	4b94      	ldr	r3, [pc, #592]	; (800a194 <tcp_input+0x524>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d13a      	bne.n	8009fc2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	8ada      	ldrh	r2, [r3, #22]
 8009f50:	4b90      	ldr	r3, [pc, #576]	; (800a194 <tcp_input+0x524>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d132      	bne.n	8009fc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b8d      	ldr	r3, [pc, #564]	; (800a198 <tcp_input+0x528>)
 8009f62:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d12c      	bne.n	8009fc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	4b8a      	ldr	r3, [pc, #552]	; (800a198 <tcp_input+0x528>)
 8009f6e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d126      	bne.n	8009fc2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d106      	bne.n	8009f8c <tcp_input+0x31c>
 8009f7e:	4b87      	ldr	r3, [pc, #540]	; (800a19c <tcp_input+0x52c>)
 8009f80:	f240 120d 	movw	r2, #269	; 0x10d
 8009f84:	4986      	ldr	r1, [pc, #536]	; (800a1a0 <tcp_input+0x530>)
 8009f86:	4887      	ldr	r0, [pc, #540]	; (800a1a4 <tcp_input+0x534>)
 8009f88:	f006 fb82 	bl	8010690 <iprintf>
      if (prev != NULL) {
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <tcp_input+0x338>
        prev->next = pcb->next;
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009f9a:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <tcp_input+0x538>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009fa2:	4a81      	ldr	r2, [pc, #516]	; (800a1a8 <tcp_input+0x538>)
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d111      	bne.n	8009fd6 <tcp_input+0x366>
 8009fb2:	4b7a      	ldr	r3, [pc, #488]	; (800a19c <tcp_input+0x52c>)
 8009fb4:	f240 1215 	movw	r2, #277	; 0x115
 8009fb8:	497c      	ldr	r1, [pc, #496]	; (800a1ac <tcp_input+0x53c>)
 8009fba:	487a      	ldr	r0, [pc, #488]	; (800a1a4 <tcp_input+0x534>)
 8009fbc:	f006 fb68 	bl	8010690 <iprintf>
      break;
 8009fc0:	e009      	b.n	8009fd6 <tcp_input+0x366>
    }
    prev = pcb;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f47f af5e 	bne.w	8009e90 <tcp_input+0x220>
 8009fd4:	e000      	b.n	8009fd8 <tcp_input+0x368>
      break;
 8009fd6:	bf00      	nop
  }

  if (pcb == NULL) {
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 8095 	bne.w	800a10a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fe0:	4b73      	ldr	r3, [pc, #460]	; (800a1b0 <tcp_input+0x540>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	61fb      	str	r3, [r7, #28]
 8009fe6:	e03f      	b.n	800a068 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	7d1b      	ldrb	r3, [r3, #20]
 8009fec:	2b0a      	cmp	r3, #10
 8009fee:	d006      	beq.n	8009ffe <tcp_input+0x38e>
 8009ff0:	4b6a      	ldr	r3, [pc, #424]	; (800a19c <tcp_input+0x52c>)
 8009ff2:	f240 121f 	movw	r2, #287	; 0x11f
 8009ff6:	496f      	ldr	r1, [pc, #444]	; (800a1b4 <tcp_input+0x544>)
 8009ff8:	486a      	ldr	r0, [pc, #424]	; (800a1a4 <tcp_input+0x534>)
 8009ffa:	f006 fb49 	bl	8010690 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	7a1b      	ldrb	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d009      	beq.n	800a01a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	7a1a      	ldrb	r2, [r3, #8]
 800a00a:	4b63      	ldr	r3, [pc, #396]	; (800a198 <tcp_input+0x528>)
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a012:	3301      	adds	r3, #1
 800a014:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a016:	429a      	cmp	r2, r3
 800a018:	d122      	bne.n	800a060 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	8b1a      	ldrh	r2, [r3, #24]
 800a01e:	4b5d      	ldr	r3, [pc, #372]	; (800a194 <tcp_input+0x524>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29b      	uxth	r3, r3
 800a026:	429a      	cmp	r2, r3
 800a028:	d11b      	bne.n	800a062 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	8ada      	ldrh	r2, [r3, #22]
 800a02e:	4b59      	ldr	r3, [pc, #356]	; (800a194 <tcp_input+0x524>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	885b      	ldrh	r3, [r3, #2]
 800a034:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a036:	429a      	cmp	r2, r3
 800a038:	d113      	bne.n	800a062 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	4b56      	ldr	r3, [pc, #344]	; (800a198 <tcp_input+0x528>)
 800a040:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a042:	429a      	cmp	r2, r3
 800a044:	d10d      	bne.n	800a062 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4b53      	ldr	r3, [pc, #332]	; (800a198 <tcp_input+0x528>)
 800a04c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a04e:	429a      	cmp	r2, r3
 800a050:	d107      	bne.n	800a062 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a052:	69f8      	ldr	r0, [r7, #28]
 800a054:	f000 fb54 	bl	800a700 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fd ffd5 	bl	8008008 <pbuf_free>
        return;
 800a05e:	e1f0      	b.n	800a442 <tcp_input+0x7d2>
        continue;
 800a060:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1bc      	bne.n	8009fe8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a072:	4b51      	ldr	r3, [pc, #324]	; (800a1b8 <tcp_input+0x548>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	e02a      	b.n	800a0d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	7a1b      	ldrb	r3, [r3, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00c      	beq.n	800a09c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	7a1a      	ldrb	r2, [r3, #8]
 800a086:	4b44      	ldr	r3, [pc, #272]	; (800a198 <tcp_input+0x528>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a08e:	3301      	adds	r3, #1
 800a090:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a092:	429a      	cmp	r2, r3
 800a094:	d002      	beq.n	800a09c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	61bb      	str	r3, [r7, #24]
        continue;
 800a09a:	e016      	b.n	800a0ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	8ada      	ldrh	r2, [r3, #22]
 800a0a0:	4b3c      	ldr	r3, [pc, #240]	; (800a194 <tcp_input+0x524>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d10c      	bne.n	800a0c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	4b39      	ldr	r3, [pc, #228]	; (800a198 <tcp_input+0x528>)
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d00f      	beq.n	800a0d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00d      	beq.n	800a0da <tcp_input+0x46a>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1d1      	bne.n	800a07a <tcp_input+0x40a>
 800a0d6:	e000      	b.n	800a0da <tcp_input+0x46a>
            break;
 800a0d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d014      	beq.n	800a10a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	68da      	ldr	r2, [r3, #12]
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a0ee:	4b32      	ldr	r3, [pc, #200]	; (800a1b8 <tcp_input+0x548>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a0f6:	4a30      	ldr	r2, [pc, #192]	; (800a1b8 <tcp_input+0x548>)
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a0fc:	6978      	ldr	r0, [r7, #20]
 800a0fe:	f000 fa01 	bl	800a504 <tcp_listen_input>
      }
      pbuf_free(p);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7fd ff80 	bl	8008008 <pbuf_free>
      return;
 800a108:	e19b      	b.n	800a442 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 8160 	beq.w	800a3d2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a112:	4b2a      	ldr	r3, [pc, #168]	; (800a1bc <tcp_input+0x54c>)
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	891a      	ldrh	r2, [r3, #8]
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <tcp_input+0x54c>)
 800a11e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a120:	4a26      	ldr	r2, [pc, #152]	; (800a1bc <tcp_input+0x54c>)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a126:	4b1b      	ldr	r3, [pc, #108]	; (800a194 <tcp_input+0x524>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a24      	ldr	r2, [pc, #144]	; (800a1bc <tcp_input+0x54c>)
 800a12c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a12e:	4b24      	ldr	r3, [pc, #144]	; (800a1c0 <tcp_input+0x550>)
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a134:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <tcp_input+0x554>)
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a13a:	4b23      	ldr	r3, [pc, #140]	; (800a1c8 <tcp_input+0x558>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a140:	4b22      	ldr	r3, [pc, #136]	; (800a1cc <tcp_input+0x55c>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 0308 	and.w	r3, r3, #8
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	7b5b      	ldrb	r3, [r3, #13]
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	b2da      	uxtb	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d038      	beq.n	800a1d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a162:	69f8      	ldr	r0, [r7, #28]
 800a164:	f7ff f93e 	bl	80093e4 <tcp_process_refused_data>
 800a168:	4603      	mov	r3, r0
 800a16a:	f113 0f0d 	cmn.w	r3, #13
 800a16e:	d007      	beq.n	800a180 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02d      	beq.n	800a1d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <tcp_input+0x560>)
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d029      	beq.n	800a1d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 8104 	bne.w	800a392 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a18a:	69f8      	ldr	r0, [r7, #28]
 800a18c:	f003 f9be 	bl	800d50c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a190:	e0ff      	b.n	800a392 <tcp_input+0x722>
 800a192:	bf00      	nop
 800a194:	200040ac 	.word	0x200040ac
 800a198:	20007328 	.word	0x20007328
 800a19c:	08012a84 	.word	0x08012a84
 800a1a0:	08012bb0 	.word	0x08012bb0
 800a1a4:	08012ad0 	.word	0x08012ad0
 800a1a8:	2000cbfc 	.word	0x2000cbfc
 800a1ac:	08012bdc 	.word	0x08012bdc
 800a1b0:	2000cc0c 	.word	0x2000cc0c
 800a1b4:	08012c08 	.word	0x08012c08
 800a1b8:	2000cc04 	.word	0x2000cc04
 800a1bc:	2000409c 	.word	0x2000409c
 800a1c0:	200040cc 	.word	0x200040cc
 800a1c4:	200040c9 	.word	0x200040c9
 800a1c8:	200040c4 	.word	0x200040c4
 800a1cc:	200040c8 	.word	0x200040c8
 800a1d0:	200040c6 	.word	0x200040c6
      }
    }
    tcp_input_pcb = pcb;
 800a1d4:	4a9c      	ldr	r2, [pc, #624]	; (800a448 <tcp_input+0x7d8>)
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a1da:	69f8      	ldr	r0, [r7, #28]
 800a1dc:	f000 fb0a 	bl	800a7f4 <tcp_process>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a1e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1e8:	f113 0f0d 	cmn.w	r3, #13
 800a1ec:	f000 80d3 	beq.w	800a396 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800a1f0:	4b96      	ldr	r3, [pc, #600]	; (800a44c <tcp_input+0x7dc>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d015      	beq.n	800a228 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a202:	2b00      	cmp	r3, #0
 800a204:	d008      	beq.n	800a218 <tcp_input+0x5a8>
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	6912      	ldr	r2, [r2, #16]
 800a210:	f06f 010d 	mvn.w	r1, #13
 800a214:	4610      	mov	r0, r2
 800a216:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a218:	69f9      	ldr	r1, [r7, #28]
 800a21a:	488d      	ldr	r0, [pc, #564]	; (800a450 <tcp_input+0x7e0>)
 800a21c:	f7ff fbb0 	bl	8009980 <tcp_pcb_remove>
        tcp_free(pcb);
 800a220:	69f8      	ldr	r0, [r7, #28]
 800a222:	f7fe f99d 	bl	8008560 <tcp_free>
 800a226:	e0c1      	b.n	800a3ac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a22c:	4b89      	ldr	r3, [pc, #548]	; (800a454 <tcp_input+0x7e4>)
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d01d      	beq.n	800a270 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a234:	4b87      	ldr	r3, [pc, #540]	; (800a454 <tcp_input+0x7e4>)
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00a      	beq.n	800a25a <tcp_input+0x5ea>
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	6910      	ldr	r0, [r2, #16]
 800a24e:	89fa      	ldrh	r2, [r7, #14]
 800a250:	69f9      	ldr	r1, [r7, #28]
 800a252:	4798      	blx	r3
 800a254:	4603      	mov	r3, r0
 800a256:	74fb      	strb	r3, [r7, #19]
 800a258:	e001      	b.n	800a25e <tcp_input+0x5ee>
 800a25a:	2300      	movs	r3, #0
 800a25c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a25e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a262:	f113 0f0d 	cmn.w	r3, #13
 800a266:	f000 8098 	beq.w	800a39a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a26a:	4b7a      	ldr	r3, [pc, #488]	; (800a454 <tcp_input+0x7e4>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a270:	69f8      	ldr	r0, [r7, #28]
 800a272:	f000 f907 	bl	800a484 <tcp_input_delayed_close>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f040 8090 	bne.w	800a39e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a27e:	4b76      	ldr	r3, [pc, #472]	; (800a458 <tcp_input+0x7e8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d041      	beq.n	800a30a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <tcp_input+0x62c>
 800a28e:	4b73      	ldr	r3, [pc, #460]	; (800a45c <tcp_input+0x7ec>)
 800a290:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a294:	4972      	ldr	r1, [pc, #456]	; (800a460 <tcp_input+0x7f0>)
 800a296:	4873      	ldr	r0, [pc, #460]	; (800a464 <tcp_input+0x7f4>)
 800a298:	f006 f9fa 	bl	8010690 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	8b5b      	ldrh	r3, [r3, #26]
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a2a8:	4b6b      	ldr	r3, [pc, #428]	; (800a458 <tcp_input+0x7e8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fd feab 	bl	8008008 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a2b2:	69f8      	ldr	r0, [r7, #28]
 800a2b4:	f7fe fc3c 	bl	8008b30 <tcp_abort>
            goto aborted;
 800a2b8:	e078      	b.n	800a3ac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00c      	beq.n	800a2de <tcp_input+0x66e>
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	6918      	ldr	r0, [r3, #16]
 800a2ce:	4b62      	ldr	r3, [pc, #392]	; (800a458 <tcp_input+0x7e8>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	69f9      	ldr	r1, [r7, #28]
 800a2d6:	47a0      	blx	r4
 800a2d8:	4603      	mov	r3, r0
 800a2da:	74fb      	strb	r3, [r7, #19]
 800a2dc:	e008      	b.n	800a2f0 <tcp_input+0x680>
 800a2de:	4b5e      	ldr	r3, [pc, #376]	; (800a458 <tcp_input+0x7e8>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	69f9      	ldr	r1, [r7, #28]
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f7ff f952 	bl	8009590 <tcp_recv_null>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a2f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2f4:	f113 0f0d 	cmn.w	r3, #13
 800a2f8:	d053      	beq.n	800a3a2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a2fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a302:	4b55      	ldr	r3, [pc, #340]	; (800a458 <tcp_input+0x7e8>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a30a:	4b50      	ldr	r3, [pc, #320]	; (800a44c <tcp_input+0x7dc>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	d030      	beq.n	800a378 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d009      	beq.n	800a332 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a322:	7b5a      	ldrb	r2, [r3, #13]
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a328:	f042 0220 	orr.w	r2, r2, #32
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	735a      	strb	r2, [r3, #13]
 800a330:	e022      	b.n	800a378 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a336:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a33a:	d005      	beq.n	800a348 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a340:	3301      	adds	r3, #1
 800a342:	b29a      	uxth	r2, r3
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00b      	beq.n	800a36a <tcp_input+0x6fa>
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	6918      	ldr	r0, [r3, #16]
 800a35c:	2300      	movs	r3, #0
 800a35e:	2200      	movs	r2, #0
 800a360:	69f9      	ldr	r1, [r7, #28]
 800a362:	47a0      	blx	r4
 800a364:	4603      	mov	r3, r0
 800a366:	74fb      	strb	r3, [r7, #19]
 800a368:	e001      	b.n	800a36e <tcp_input+0x6fe>
 800a36a:	2300      	movs	r3, #0
 800a36c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a36e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a372:	f113 0f0d 	cmn.w	r3, #13
 800a376:	d016      	beq.n	800a3a6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a378:	4b33      	ldr	r3, [pc, #204]	; (800a448 <tcp_input+0x7d8>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a37e:	69f8      	ldr	r0, [r7, #28]
 800a380:	f000 f880 	bl	800a484 <tcp_input_delayed_close>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10f      	bne.n	800a3aa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a38a:	69f8      	ldr	r0, [r7, #28]
 800a38c:	f002 fab8 	bl	800c900 <tcp_output>
 800a390:	e00c      	b.n	800a3ac <tcp_input+0x73c>
        goto aborted;
 800a392:	bf00      	nop
 800a394:	e00a      	b.n	800a3ac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a396:	bf00      	nop
 800a398:	e008      	b.n	800a3ac <tcp_input+0x73c>
              goto aborted;
 800a39a:	bf00      	nop
 800a39c:	e006      	b.n	800a3ac <tcp_input+0x73c>
          goto aborted;
 800a39e:	bf00      	nop
 800a3a0:	e004      	b.n	800a3ac <tcp_input+0x73c>
            goto aborted;
 800a3a2:	bf00      	nop
 800a3a4:	e002      	b.n	800a3ac <tcp_input+0x73c>
              goto aborted;
 800a3a6:	bf00      	nop
 800a3a8:	e000      	b.n	800a3ac <tcp_input+0x73c>
          goto aborted;
 800a3aa:	bf00      	nop
    tcp_input_pcb = NULL;
 800a3ac:	4b26      	ldr	r3, [pc, #152]	; (800a448 <tcp_input+0x7d8>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a3b2:	4b29      	ldr	r3, [pc, #164]	; (800a458 <tcp_input+0x7e8>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a3b8:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <tcp_input+0x7f8>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d03f      	beq.n	800a440 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a3c0:	4b29      	ldr	r3, [pc, #164]	; (800a468 <tcp_input+0x7f8>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd fe1f 	bl	8008008 <pbuf_free>
      inseg.p = NULL;
 800a3ca:	4b27      	ldr	r3, [pc, #156]	; (800a468 <tcp_input+0x7f8>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a3d0:	e036      	b.n	800a440 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a3d2:	4b26      	ldr	r3, [pc, #152]	; (800a46c <tcp_input+0x7fc>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	899b      	ldrh	r3, [r3, #12]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc fa68 	bl	80068b0 <lwip_htons>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d118      	bne.n	800a41e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3ec:	4b20      	ldr	r3, [pc, #128]	; (800a470 <tcp_input+0x800>)
 800a3ee:	6819      	ldr	r1, [r3, #0]
 800a3f0:	4b20      	ldr	r3, [pc, #128]	; (800a474 <tcp_input+0x804>)
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b20      	ldr	r3, [pc, #128]	; (800a478 <tcp_input+0x808>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <tcp_input+0x7fc>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a400:	885b      	ldrh	r3, [r3, #2]
 800a402:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <tcp_input+0x7fc>)
 800a406:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a408:	8812      	ldrh	r2, [r2, #0]
 800a40a:	b292      	uxth	r2, r2
 800a40c:	9202      	str	r2, [sp, #8]
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <tcp_input+0x80c>)
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <tcp_input+0x810>)
 800a416:	4602      	mov	r2, r0
 800a418:	2000      	movs	r0, #0
 800a41a:	f003 f825 	bl	800d468 <tcp_rst>
    pbuf_free(p);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7fd fdf2 	bl	8008008 <pbuf_free>
  return;
 800a424:	e00c      	b.n	800a440 <tcp_input+0x7d0>
    goto dropped;
 800a426:	bf00      	nop
 800a428:	e006      	b.n	800a438 <tcp_input+0x7c8>
    goto dropped;
 800a42a:	bf00      	nop
 800a42c:	e004      	b.n	800a438 <tcp_input+0x7c8>
    goto dropped;
 800a42e:	bf00      	nop
 800a430:	e002      	b.n	800a438 <tcp_input+0x7c8>
      goto dropped;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <tcp_input+0x7c8>
      goto dropped;
 800a436:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7fd fde5 	bl	8008008 <pbuf_free>
 800a43e:	e000      	b.n	800a442 <tcp_input+0x7d2>
  return;
 800a440:	bf00      	nop
}
 800a442:	3724      	adds	r7, #36	; 0x24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd90      	pop	{r4, r7, pc}
 800a448:	2000cc10 	.word	0x2000cc10
 800a44c:	200040c9 	.word	0x200040c9
 800a450:	2000cbfc 	.word	0x2000cbfc
 800a454:	200040c4 	.word	0x200040c4
 800a458:	200040cc 	.word	0x200040cc
 800a45c:	08012a84 	.word	0x08012a84
 800a460:	08012c38 	.word	0x08012c38
 800a464:	08012ad0 	.word	0x08012ad0
 800a468:	2000409c 	.word	0x2000409c
 800a46c:	200040ac 	.word	0x200040ac
 800a470:	200040c0 	.word	0x200040c0
 800a474:	200040c6 	.word	0x200040c6
 800a478:	200040bc 	.word	0x200040bc
 800a47c:	20007338 	.word	0x20007338
 800a480:	2000733c 	.word	0x2000733c

0800a484 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <tcp_input_delayed_close+0x1c>
 800a492:	4b17      	ldr	r3, [pc, #92]	; (800a4f0 <tcp_input_delayed_close+0x6c>)
 800a494:	f240 225a 	movw	r2, #602	; 0x25a
 800a498:	4916      	ldr	r1, [pc, #88]	; (800a4f4 <tcp_input_delayed_close+0x70>)
 800a49a:	4817      	ldr	r0, [pc, #92]	; (800a4f8 <tcp_input_delayed_close+0x74>)
 800a49c:	f006 f8f8 	bl	8010690 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a4a0:	4b16      	ldr	r3, [pc, #88]	; (800a4fc <tcp_input_delayed_close+0x78>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01c      	beq.n	800a4e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	8b5b      	ldrh	r3, [r3, #26]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10d      	bne.n	800a4d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d008      	beq.n	800a4d4 <tcp_input_delayed_close+0x50>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6912      	ldr	r2, [r2, #16]
 800a4cc:	f06f 010e 	mvn.w	r1, #14
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	480a      	ldr	r0, [pc, #40]	; (800a500 <tcp_input_delayed_close+0x7c>)
 800a4d8:	f7ff fa52 	bl	8009980 <tcp_pcb_remove>
    tcp_free(pcb);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7fe f83f 	bl	8008560 <tcp_free>
    return 1;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e000      	b.n	800a4e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	08012a84 	.word	0x08012a84
 800a4f4:	08012c54 	.word	0x08012c54
 800a4f8:	08012ad0 	.word	0x08012ad0
 800a4fc:	200040c9 	.word	0x200040c9
 800a500:	2000cbfc 	.word	0x2000cbfc

0800a504 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a504:	b590      	push	{r4, r7, lr}
 800a506:	b08b      	sub	sp, #44	; 0x2c
 800a508:	af04      	add	r7, sp, #16
 800a50a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a50c:	4b6f      	ldr	r3, [pc, #444]	; (800a6cc <tcp_listen_input+0x1c8>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 80d2 	bne.w	800a6be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d106      	bne.n	800a52e <tcp_listen_input+0x2a>
 800a520:	4b6b      	ldr	r3, [pc, #428]	; (800a6d0 <tcp_listen_input+0x1cc>)
 800a522:	f240 2281 	movw	r2, #641	; 0x281
 800a526:	496b      	ldr	r1, [pc, #428]	; (800a6d4 <tcp_listen_input+0x1d0>)
 800a528:	486b      	ldr	r0, [pc, #428]	; (800a6d8 <tcp_listen_input+0x1d4>)
 800a52a:	f006 f8b1 	bl	8010690 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a52e:	4b67      	ldr	r3, [pc, #412]	; (800a6cc <tcp_listen_input+0x1c8>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 0310 	and.w	r3, r3, #16
 800a536:	2b00      	cmp	r3, #0
 800a538:	d019      	beq.n	800a56e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a53a:	4b68      	ldr	r3, [pc, #416]	; (800a6dc <tcp_listen_input+0x1d8>)
 800a53c:	6819      	ldr	r1, [r3, #0]
 800a53e:	4b68      	ldr	r3, [pc, #416]	; (800a6e0 <tcp_listen_input+0x1dc>)
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	4b67      	ldr	r3, [pc, #412]	; (800a6e4 <tcp_listen_input+0x1e0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a54a:	4b67      	ldr	r3, [pc, #412]	; (800a6e8 <tcp_listen_input+0x1e4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a54e:	885b      	ldrh	r3, [r3, #2]
 800a550:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a552:	4a65      	ldr	r2, [pc, #404]	; (800a6e8 <tcp_listen_input+0x1e4>)
 800a554:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a556:	8812      	ldrh	r2, [r2, #0]
 800a558:	b292      	uxth	r2, r2
 800a55a:	9202      	str	r2, [sp, #8]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	4b63      	ldr	r3, [pc, #396]	; (800a6ec <tcp_listen_input+0x1e8>)
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	4b63      	ldr	r3, [pc, #396]	; (800a6f0 <tcp_listen_input+0x1ec>)
 800a564:	4602      	mov	r2, r0
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f002 ff7e 	bl	800d468 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a56c:	e0a9      	b.n	800a6c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a56e:	4b57      	ldr	r3, [pc, #348]	; (800a6cc <tcp_listen_input+0x1c8>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80a3 	beq.w	800a6c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7d5b      	ldrb	r3, [r3, #21]
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff f929 	bl	80097d8 <tcp_alloc>
 800a586:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d111      	bne.n	800a5b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <tcp_listen_input+0xa8>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6910      	ldr	r0, [r2, #16]
 800a59e:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4798      	blx	r3
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]
      return;
 800a5aa:	e08b      	b.n	800a6c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a5ac:	23f0      	movs	r3, #240	; 0xf0
 800a5ae:	73bb      	strb	r3, [r7, #14]
      return;
 800a5b0:	e088      	b.n	800a6c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a5b2:	4b50      	ldr	r3, [pc, #320]	; (800a6f4 <tcp_listen_input+0x1f0>)
 800a5b4:	695a      	ldr	r2, [r3, #20]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a5ba:	4b4e      	ldr	r3, [pc, #312]	; (800a6f4 <tcp_listen_input+0x1f0>)
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8ada      	ldrh	r2, [r3, #22]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a5ca:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <tcp_listen_input+0x1e4>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2203      	movs	r2, #3
 800a5da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a5dc:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <tcp_listen_input+0x1e0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f7ff fa5a 	bl	8009aa8 <tcp_next_iss>
 800a5f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a60e:	4b35      	ldr	r3, [pc, #212]	; (800a6e4 <tcp_listen_input+0x1e0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7a5b      	ldrb	r3, [r3, #9]
 800a62a:	f003 030c 	and.w	r3, r3, #12
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	7a1a      	ldrb	r2, [r3, #8]
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a63c:	4b2e      	ldr	r3, [pc, #184]	; (800a6f8 <tcp_listen_input+0x1f4>)
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	60da      	str	r2, [r3, #12]
 800a644:	4a2c      	ldr	r2, [pc, #176]	; (800a6f8 <tcp_listen_input+0x1f4>)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	f003 f8cf 	bl	800d7ec <tcp_timer_needed>
 800a64e:	4b2b      	ldr	r3, [pc, #172]	; (800a6fc <tcp_listen_input+0x1f8>)
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a654:	6978      	ldr	r0, [r7, #20]
 800a656:	f001 fd8d 	bl	800c174 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a65a:	4b23      	ldr	r3, [pc, #140]	; (800a6e8 <tcp_listen_input+0x1e4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	89db      	ldrh	r3, [r3, #14]
 800a660:	b29a      	uxth	r2, r3
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4618      	mov	r0, r3
 800a67e:	f004 fcc3 	bl	800f008 <ip4_route>
 800a682:	4601      	mov	r1, r0
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	3304      	adds	r3, #4
 800a688:	461a      	mov	r2, r3
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff fa32 	bl	8009af4 <tcp_eff_send_mss_netif>
 800a690:	4603      	mov	r3, r0
 800a692:	461a      	mov	r2, r3
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a698:	2112      	movs	r1, #18
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f002 f842 	bl	800c724 <tcp_enqueue_flags>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	6978      	ldr	r0, [r7, #20]
 800a6b0:	f7fe f980 	bl	80089b4 <tcp_abandon>
      return;
 800a6b4:	e006      	b.n	800a6c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a6b6:	6978      	ldr	r0, [r7, #20]
 800a6b8:	f002 f922 	bl	800c900 <tcp_output>
  return;
 800a6bc:	e001      	b.n	800a6c2 <tcp_listen_input+0x1be>
    return;
 800a6be:	bf00      	nop
 800a6c0:	e000      	b.n	800a6c4 <tcp_listen_input+0x1c0>
  return;
 800a6c2:	bf00      	nop
}
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd90      	pop	{r4, r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	200040c8 	.word	0x200040c8
 800a6d0:	08012a84 	.word	0x08012a84
 800a6d4:	08012c7c 	.word	0x08012c7c
 800a6d8:	08012ad0 	.word	0x08012ad0
 800a6dc:	200040c0 	.word	0x200040c0
 800a6e0:	200040c6 	.word	0x200040c6
 800a6e4:	200040bc 	.word	0x200040bc
 800a6e8:	200040ac 	.word	0x200040ac
 800a6ec:	20007338 	.word	0x20007338
 800a6f0:	2000733c 	.word	0x2000733c
 800a6f4:	20007328 	.word	0x20007328
 800a6f8:	2000cbfc 	.word	0x2000cbfc
 800a6fc:	2000cbf8 	.word	0x2000cbf8

0800a700 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af04      	add	r7, sp, #16
 800a706:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a708:	4b2f      	ldr	r3, [pc, #188]	; (800a7c8 <tcp_timewait_input+0xc8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d153      	bne.n	800a7bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <tcp_timewait_input+0x28>
 800a71a:	4b2c      	ldr	r3, [pc, #176]	; (800a7cc <tcp_timewait_input+0xcc>)
 800a71c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a720:	492b      	ldr	r1, [pc, #172]	; (800a7d0 <tcp_timewait_input+0xd0>)
 800a722:	482c      	ldr	r0, [pc, #176]	; (800a7d4 <tcp_timewait_input+0xd4>)
 800a724:	f005 ffb4 	bl	8010690 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a728:	4b27      	ldr	r3, [pc, #156]	; (800a7c8 <tcp_timewait_input+0xc8>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b00      	cmp	r3, #0
 800a732:	d02a      	beq.n	800a78a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a734:	4b28      	ldr	r3, [pc, #160]	; (800a7d8 <tcp_timewait_input+0xd8>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	db2d      	blt.n	800a79e <tcp_timewait_input+0x9e>
 800a742:	4b25      	ldr	r3, [pc, #148]	; (800a7d8 <tcp_timewait_input+0xd8>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a74e:	440b      	add	r3, r1
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	dc23      	bgt.n	800a79e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a756:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <tcp_timewait_input+0xdc>)
 800a758:	6819      	ldr	r1, [r3, #0]
 800a75a:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <tcp_timewait_input+0xe0>)
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <tcp_timewait_input+0xd8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a766:	4b1f      	ldr	r3, [pc, #124]	; (800a7e4 <tcp_timewait_input+0xe4>)
 800a768:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a76a:	885b      	ldrh	r3, [r3, #2]
 800a76c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a76e:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <tcp_timewait_input+0xe4>)
 800a770:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a772:	8812      	ldrh	r2, [r2, #0]
 800a774:	b292      	uxth	r2, r2
 800a776:	9202      	str	r2, [sp, #8]
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <tcp_timewait_input+0xe8>)
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <tcp_timewait_input+0xec>)
 800a780:	4602      	mov	r2, r0
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f002 fe70 	bl	800d468 <tcp_rst>
      return;
 800a788:	e01b      	b.n	800a7c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a78a:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <tcp_timewait_input+0xc8>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a796:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <tcp_timewait_input+0xf0>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a79e:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <tcp_timewait_input+0xe0>)
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00c      	beq.n	800a7c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8b5b      	ldrh	r3, [r3, #26]
 800a7aa:	f043 0302 	orr.w	r3, r3, #2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f002 f8a3 	bl	800c900 <tcp_output>
  }
  return;
 800a7ba:	e001      	b.n	800a7c0 <tcp_timewait_input+0xc0>
    return;
 800a7bc:	bf00      	nop
 800a7be:	e000      	b.n	800a7c2 <tcp_timewait_input+0xc2>
  return;
 800a7c0:	bf00      	nop
}
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	200040c8 	.word	0x200040c8
 800a7cc:	08012a84 	.word	0x08012a84
 800a7d0:	08012c9c 	.word	0x08012c9c
 800a7d4:	08012ad0 	.word	0x08012ad0
 800a7d8:	200040bc 	.word	0x200040bc
 800a7dc:	200040c0 	.word	0x200040c0
 800a7e0:	200040c6 	.word	0x200040c6
 800a7e4:	200040ac 	.word	0x200040ac
 800a7e8:	20007338 	.word	0x20007338
 800a7ec:	2000733c 	.word	0x2000733c
 800a7f0:	2000cc00 	.word	0x2000cc00

0800a7f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a7f4:	b590      	push	{r4, r7, lr}
 800a7f6:	b08d      	sub	sp, #52	; 0x34
 800a7f8:	af04      	add	r7, sp, #16
 800a7fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <tcp_process+0x24>
 800a80a:	4ba5      	ldr	r3, [pc, #660]	; (800aaa0 <tcp_process+0x2ac>)
 800a80c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a810:	49a4      	ldr	r1, [pc, #656]	; (800aaa4 <tcp_process+0x2b0>)
 800a812:	48a5      	ldr	r0, [pc, #660]	; (800aaa8 <tcp_process+0x2b4>)
 800a814:	f005 ff3c 	bl	8010690 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a818:	4ba4      	ldr	r3, [pc, #656]	; (800aaac <tcp_process+0x2b8>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d04e      	beq.n	800a8c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7d1b      	ldrb	r3, [r3, #20]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d108      	bne.n	800a83e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a830:	4b9f      	ldr	r3, [pc, #636]	; (800aab0 <tcp_process+0x2bc>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d123      	bne.n	800a880 <tcp_process+0x8c>
        acceptable = 1;
 800a838:	2301      	movs	r3, #1
 800a83a:	76fb      	strb	r3, [r7, #27]
 800a83c:	e020      	b.n	800a880 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a842:	4b9c      	ldr	r3, [pc, #624]	; (800aab4 <tcp_process+0x2c0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d102      	bne.n	800a850 <tcp_process+0x5c>
        acceptable = 1;
 800a84a:	2301      	movs	r3, #1
 800a84c:	76fb      	strb	r3, [r7, #27]
 800a84e:	e017      	b.n	800a880 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a850:	4b98      	ldr	r3, [pc, #608]	; (800aab4 <tcp_process+0x2c0>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	db10      	blt.n	800a880 <tcp_process+0x8c>
 800a85e:	4b95      	ldr	r3, [pc, #596]	; (800aab4 <tcp_process+0x2c0>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a86a:	440b      	add	r3, r1
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	dc06      	bgt.n	800a880 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8b5b      	ldrh	r3, [r3, #26]
 800a876:	f043 0302 	orr.w	r3, r3, #2
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a880:	7efb      	ldrb	r3, [r7, #27]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01b      	beq.n	800a8be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7d1b      	ldrb	r3, [r3, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d106      	bne.n	800a89c <tcp_process+0xa8>
 800a88e:	4b84      	ldr	r3, [pc, #528]	; (800aaa0 <tcp_process+0x2ac>)
 800a890:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a894:	4988      	ldr	r1, [pc, #544]	; (800aab8 <tcp_process+0x2c4>)
 800a896:	4884      	ldr	r0, [pc, #528]	; (800aaa8 <tcp_process+0x2b4>)
 800a898:	f005 fefa 	bl	8010690 <iprintf>
      recv_flags |= TF_RESET;
 800a89c:	4b87      	ldr	r3, [pc, #540]	; (800aabc <tcp_process+0x2c8>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	f043 0308 	orr.w	r3, r3, #8
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	4b85      	ldr	r3, [pc, #532]	; (800aabc <tcp_process+0x2c8>)
 800a8a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	8b5b      	ldrh	r3, [r3, #26]
 800a8ae:	f023 0301 	bic.w	r3, r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a8b8:	f06f 030d 	mvn.w	r3, #13
 800a8bc:	e37a      	b.n	800afb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e378      	b.n	800afb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a8c2:	4b7a      	ldr	r3, [pc, #488]	; (800aaac <tcp_process+0x2b8>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d010      	beq.n	800a8f0 <tcp_process+0xfc>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	7d1b      	ldrb	r3, [r3, #20]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d00c      	beq.n	800a8f0 <tcp_process+0xfc>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	7d1b      	ldrb	r3, [r3, #20]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d008      	beq.n	800a8f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8b5b      	ldrh	r3, [r3, #26]
 800a8e2:	f043 0302 	orr.w	r3, r3, #2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e361      	b.n	800afb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	8b5b      	ldrh	r3, [r3, #26]
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a8fc:	4b70      	ldr	r3, [pc, #448]	; (800aac0 <tcp_process+0x2cc>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fc2d 	bl	800c174 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7d1b      	ldrb	r3, [r3, #20]
 800a91e:	3b02      	subs	r3, #2
 800a920:	2b07      	cmp	r3, #7
 800a922:	f200 8337 	bhi.w	800af94 <tcp_process+0x7a0>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <tcp_process+0x138>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a94d 	.word	0x0800a94d
 800a930:	0800ab7d 	.word	0x0800ab7d
 800a934:	0800acf5 	.word	0x0800acf5
 800a938:	0800ad1f 	.word	0x0800ad1f
 800a93c:	0800ae43 	.word	0x0800ae43
 800a940:	0800acf5 	.word	0x0800acf5
 800a944:	0800aecf 	.word	0x0800aecf
 800a948:	0800af5f 	.word	0x0800af5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a94c:	4b57      	ldr	r3, [pc, #348]	; (800aaac <tcp_process+0x2b8>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f003 0310 	and.w	r3, r3, #16
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 80e4 	beq.w	800ab22 <tcp_process+0x32e>
 800a95a:	4b54      	ldr	r3, [pc, #336]	; (800aaac <tcp_process+0x2b8>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 0302 	and.w	r3, r3, #2
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 80dd 	beq.w	800ab22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	4b50      	ldr	r3, [pc, #320]	; (800aab0 <tcp_process+0x2bc>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	f040 80d5 	bne.w	800ab22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a978:	4b4e      	ldr	r3, [pc, #312]	; (800aab4 <tcp_process+0x2c0>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a98a:	4b49      	ldr	r3, [pc, #292]	; (800aab0 <tcp_process+0x2bc>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a992:	4b4c      	ldr	r3, [pc, #304]	; (800aac4 <tcp_process+0x2d0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	89db      	ldrh	r3, [r3, #14]
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a9ac:	4b41      	ldr	r3, [pc, #260]	; (800aab4 <tcp_process+0x2c0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	1e5a      	subs	r2, r3, #1
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2204      	movs	r2, #4
 800a9ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f004 fb1f 	bl	800f008 <ip4_route>
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff f88e 	bl	8009af4 <tcp_eff_send_mss_netif>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9e4:	009a      	lsls	r2, r3, #2
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf38      	it	cc
 800a9f4:	460b      	movcc	r3, r1
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d204      	bcs.n	800aa04 <tcp_process+0x210>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	e00d      	b.n	800aa20 <tcp_process+0x22c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	f241 121c 	movw	r2, #4380	; 0x111c
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d904      	bls.n	800aa1c <tcp_process+0x228>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	e001      	b.n	800aa20 <tcp_process+0x22c>
 800aa1c:	f241 131c 	movw	r3, #4380	; 0x111c
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d106      	bne.n	800aa3e <tcp_process+0x24a>
 800aa30:	4b1b      	ldr	r3, [pc, #108]	; (800aaa0 <tcp_process+0x2ac>)
 800aa32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800aa36:	4924      	ldr	r1, [pc, #144]	; (800aac8 <tcp_process+0x2d4>)
 800aa38:	481b      	ldr	r0, [pc, #108]	; (800aaa8 <tcp_process+0x2b4>)
 800aa3a:	f005 fe29 	bl	8010690 <iprintf>
        --pcb->snd_queuelen;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d111      	bne.n	800aa7e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <tcp_process+0x280>
 800aa66:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <tcp_process+0x2ac>)
 800aa68:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aa6c:	4917      	ldr	r1, [pc, #92]	; (800aacc <tcp_process+0x2d8>)
 800aa6e:	480e      	ldr	r0, [pc, #56]	; (800aaa8 <tcp_process+0x2b4>)
 800aa70:	f005 fe0e 	bl	8010690 <iprintf>
          pcb->unsent = rseg->next;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa7c:	e003      	b.n	800aa86 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800aa86:	69f8      	ldr	r0, [r7, #28]
 800aa88:	f7fe fd3d 	bl	8009506 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11d      	bne.n	800aad0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa9a:	861a      	strh	r2, [r3, #48]	; 0x30
 800aa9c:	e01f      	b.n	800aade <tcp_process+0x2ea>
 800aa9e:	bf00      	nop
 800aaa0:	08012a84 	.word	0x08012a84
 800aaa4:	08012cbc 	.word	0x08012cbc
 800aaa8:	08012ad0 	.word	0x08012ad0
 800aaac:	200040c8 	.word	0x200040c8
 800aab0:	200040c0 	.word	0x200040c0
 800aab4:	200040bc 	.word	0x200040bc
 800aab8:	08012cd8 	.word	0x08012cd8
 800aabc:	200040c9 	.word	0x200040c9
 800aac0:	2000cc00 	.word	0x2000cc00
 800aac4:	200040ac 	.word	0x200040ac
 800aac8:	08012cf8 	.word	0x08012cf8
 800aacc:	08012d10 	.word	0x08012d10
        } else {
          pcb->rtime = 0;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00a      	beq.n	800aafe <tcp_process+0x30a>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	6910      	ldr	r0, [r2, #16]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	4798      	blx	r3
 800aaf8:	4603      	mov	r3, r0
 800aafa:	76bb      	strb	r3, [r7, #26]
 800aafc:	e001      	b.n	800ab02 <tcp_process+0x30e>
 800aafe:	2300      	movs	r3, #0
 800ab00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ab02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab06:	f113 0f0d 	cmn.w	r3, #13
 800ab0a:	d102      	bne.n	800ab12 <tcp_process+0x31e>
          return ERR_ABRT;
 800ab0c:	f06f 030c 	mvn.w	r3, #12
 800ab10:	e250      	b.n	800afb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	8b5b      	ldrh	r3, [r3, #26]
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ab20:	e23a      	b.n	800af98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ab22:	4b9d      	ldr	r3, [pc, #628]	; (800ad98 <tcp_process+0x5a4>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f003 0310 	and.w	r3, r3, #16
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8234 	beq.w	800af98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab30:	4b9a      	ldr	r3, [pc, #616]	; (800ad9c <tcp_process+0x5a8>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	4b9a      	ldr	r3, [pc, #616]	; (800ada0 <tcp_process+0x5ac>)
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4b9a      	ldr	r3, [pc, #616]	; (800ada4 <tcp_process+0x5b0>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab40:	4b99      	ldr	r3, [pc, #612]	; (800ada8 <tcp_process+0x5b4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab48:	4a97      	ldr	r2, [pc, #604]	; (800ada8 <tcp_process+0x5b4>)
 800ab4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab4c:	8812      	ldrh	r2, [r2, #0]
 800ab4e:	b292      	uxth	r2, r2
 800ab50:	9202      	str	r2, [sp, #8]
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	4b95      	ldr	r3, [pc, #596]	; (800adac <tcp_process+0x5b8>)
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	4b95      	ldr	r3, [pc, #596]	; (800adb0 <tcp_process+0x5bc>)
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f002 fc83 	bl	800d468 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab68:	2b05      	cmp	r3, #5
 800ab6a:	f200 8215 	bhi.w	800af98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f002 fa4d 	bl	800d014 <tcp_rexmit_rto>
      break;
 800ab7a:	e20d      	b.n	800af98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ab7c:	4b86      	ldr	r3, [pc, #536]	; (800ad98 <tcp_process+0x5a4>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80a1 	beq.w	800accc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ab8a:	4b84      	ldr	r3, [pc, #528]	; (800ad9c <tcp_process+0x5a8>)
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	3b01      	subs	r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	db7e      	blt.n	800ac98 <tcp_process+0x4a4>
 800ab9a:	4b80      	ldr	r3, [pc, #512]	; (800ad9c <tcp_process+0x5a8>)
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dc77      	bgt.n	800ac98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2204      	movs	r2, #4
 800abac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800abb6:	23fa      	movs	r3, #250	; 0xfa
 800abb8:	76bb      	strb	r3, [r7, #26]
 800abba:	e01d      	b.n	800abf8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <tcp_process+0x3e0>
 800abc6:	4b7b      	ldr	r3, [pc, #492]	; (800adb4 <tcp_process+0x5c0>)
 800abc8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800abcc:	497a      	ldr	r1, [pc, #488]	; (800adb8 <tcp_process+0x5c4>)
 800abce:	487b      	ldr	r0, [pc, #492]	; (800adbc <tcp_process+0x5c8>)
 800abd0:	f005 fd5e 	bl	8010690 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <tcp_process+0x400>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6910      	ldr	r0, [r2, #16]
 800abe8:	2200      	movs	r2, #0
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	4798      	blx	r3
 800abee:	4603      	mov	r3, r0
 800abf0:	76bb      	strb	r3, [r7, #26]
 800abf2:	e001      	b.n	800abf8 <tcp_process+0x404>
 800abf4:	23f0      	movs	r3, #240	; 0xf0
 800abf6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800abf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00a      	beq.n	800ac16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ac00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac04:	f113 0f0d 	cmn.w	r3, #13
 800ac08:	d002      	beq.n	800ac10 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7fd ff90 	bl	8008b30 <tcp_abort>
            }
            return ERR_ABRT;
 800ac10:	f06f 030c 	mvn.w	r3, #12
 800ac14:	e1ce      	b.n	800afb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fae0 	bl	800b1dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ac1c:	4b68      	ldr	r3, [pc, #416]	; (800adc0 <tcp_process+0x5cc>)
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <tcp_process+0x43c>
            recv_acked--;
 800ac24:	4b66      	ldr	r3, [pc, #408]	; (800adc0 <tcp_process+0x5cc>)
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	4b64      	ldr	r3, [pc, #400]	; (800adc0 <tcp_process+0x5cc>)
 800ac2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac34:	009a      	lsls	r2, r3, #2
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf38      	it	cc
 800ac44:	460b      	movcc	r3, r1
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d204      	bcs.n	800ac54 <tcp_process+0x460>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	e00d      	b.n	800ac70 <tcp_process+0x47c>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d904      	bls.n	800ac6c <tcp_process+0x478>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	e001      	b.n	800ac70 <tcp_process+0x47c>
 800ac6c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ac76:	4b53      	ldr	r3, [pc, #332]	; (800adc4 <tcp_process+0x5d0>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d037      	beq.n	800acf2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8b5b      	ldrh	r3, [r3, #26]
 800ac86:	f043 0302 	orr.w	r3, r3, #2
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2207      	movs	r2, #7
 800ac94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ac96:	e02c      	b.n	800acf2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac98:	4b40      	ldr	r3, [pc, #256]	; (800ad9c <tcp_process+0x5a8>)
 800ac9a:	6819      	ldr	r1, [r3, #0]
 800ac9c:	4b40      	ldr	r3, [pc, #256]	; (800ada0 <tcp_process+0x5ac>)
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	461a      	mov	r2, r3
 800aca2:	4b40      	ldr	r3, [pc, #256]	; (800ada4 <tcp_process+0x5b0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aca8:	4b3f      	ldr	r3, [pc, #252]	; (800ada8 <tcp_process+0x5b4>)
 800acaa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acac:	885b      	ldrh	r3, [r3, #2]
 800acae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acb0:	4a3d      	ldr	r2, [pc, #244]	; (800ada8 <tcp_process+0x5b4>)
 800acb2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	b292      	uxth	r2, r2
 800acb8:	9202      	str	r2, [sp, #8]
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	4b3b      	ldr	r3, [pc, #236]	; (800adac <tcp_process+0x5b8>)
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4b3b      	ldr	r3, [pc, #236]	; (800adb0 <tcp_process+0x5bc>)
 800acc2:	4602      	mov	r2, r0
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f002 fbcf 	bl	800d468 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800acca:	e167      	b.n	800af9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800accc:	4b32      	ldr	r3, [pc, #200]	; (800ad98 <tcp_process+0x5a4>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8161 	beq.w	800af9c <tcp_process+0x7a8>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	1e5a      	subs	r2, r3, #1
 800ace0:	4b30      	ldr	r3, [pc, #192]	; (800ada4 <tcp_process+0x5b0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	f040 8159 	bne.w	800af9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f002 f9b4 	bl	800d058 <tcp_rexmit>
      break;
 800acf0:	e154      	b.n	800af9c <tcp_process+0x7a8>
 800acf2:	e153      	b.n	800af9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fa71 	bl	800b1dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800acfa:	4b32      	ldr	r3, [pc, #200]	; (800adc4 <tcp_process+0x5d0>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	f003 0320 	and.w	r3, r3, #32
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 814c 	beq.w	800afa0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	8b5b      	ldrh	r3, [r3, #26]
 800ad0c:	f043 0302 	orr.w	r3, r3, #2
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2207      	movs	r2, #7
 800ad1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad1c:	e140      	b.n	800afa0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa5c 	bl	800b1dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ad24:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <tcp_process+0x5d0>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d071      	beq.n	800ae14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad30:	4b19      	ldr	r3, [pc, #100]	; (800ad98 <tcp_process+0x5a4>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0310 	and.w	r3, r3, #16
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d060      	beq.n	800adfe <tcp_process+0x60a>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad40:	4b16      	ldr	r3, [pc, #88]	; (800ad9c <tcp_process+0x5a8>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d15a      	bne.n	800adfe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d156      	bne.n	800adfe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8b5b      	ldrh	r3, [r3, #26]
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7fe fdbe 	bl	80098e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ad64:	4b18      	ldr	r3, [pc, #96]	; (800adc8 <tcp_process+0x5d4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d105      	bne.n	800ad7a <tcp_process+0x586>
 800ad6e:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <tcp_process+0x5d4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	4a14      	ldr	r2, [pc, #80]	; (800adc8 <tcp_process+0x5d4>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	e02e      	b.n	800add8 <tcp_process+0x5e4>
 800ad7a:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <tcp_process+0x5d4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	e027      	b.n	800add2 <tcp_process+0x5de>
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d11f      	bne.n	800adcc <tcp_process+0x5d8>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	60da      	str	r2, [r3, #12]
 800ad94:	e020      	b.n	800add8 <tcp_process+0x5e4>
 800ad96:	bf00      	nop
 800ad98:	200040c8 	.word	0x200040c8
 800ad9c:	200040c0 	.word	0x200040c0
 800ada0:	200040c6 	.word	0x200040c6
 800ada4:	200040bc 	.word	0x200040bc
 800ada8:	200040ac 	.word	0x200040ac
 800adac:	20007338 	.word	0x20007338
 800adb0:	2000733c 	.word	0x2000733c
 800adb4:	08012a84 	.word	0x08012a84
 800adb8:	08012d24 	.word	0x08012d24
 800adbc:	08012ad0 	.word	0x08012ad0
 800adc0:	200040c4 	.word	0x200040c4
 800adc4:	200040c9 	.word	0x200040c9
 800adc8:	2000cbfc 	.word	0x2000cbfc
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1d4      	bne.n	800ad82 <tcp_process+0x58e>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	60da      	str	r2, [r3, #12]
 800adde:	4b77      	ldr	r3, [pc, #476]	; (800afbc <tcp_process+0x7c8>)
 800ade0:	2201      	movs	r2, #1
 800ade2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	220a      	movs	r2, #10
 800ade8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800adea:	4b75      	ldr	r3, [pc, #468]	; (800afc0 <tcp_process+0x7cc>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60da      	str	r2, [r3, #12]
 800adf2:	4a73      	ldr	r2, [pc, #460]	; (800afc0 <tcp_process+0x7cc>)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	f002 fcf8 	bl	800d7ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800adfc:	e0d2      	b.n	800afa4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	8b5b      	ldrh	r3, [r3, #26]
 800ae02:	f043 0302 	orr.w	r3, r3, #2
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2208      	movs	r2, #8
 800ae10:	751a      	strb	r2, [r3, #20]
      break;
 800ae12:	e0c7      	b.n	800afa4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae14:	4b6b      	ldr	r3, [pc, #428]	; (800afc4 <tcp_process+0x7d0>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 0310 	and.w	r3, r3, #16
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 80c1 	beq.w	800afa4 <tcp_process+0x7b0>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae26:	4b68      	ldr	r3, [pc, #416]	; (800afc8 <tcp_process+0x7d4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	f040 80ba 	bne.w	800afa4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f040 80b5 	bne.w	800afa4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2206      	movs	r2, #6
 800ae3e:	751a      	strb	r2, [r3, #20]
      break;
 800ae40:	e0b0      	b.n	800afa4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f9ca 	bl	800b1dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ae48:	4b60      	ldr	r3, [pc, #384]	; (800afcc <tcp_process+0x7d8>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f003 0320 	and.w	r3, r3, #32
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 80a9 	beq.w	800afa8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8b5b      	ldrh	r3, [r3, #26]
 800ae5a:	f043 0302 	orr.w	r3, r3, #2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe fd3b 	bl	80098e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae6a:	4b59      	ldr	r3, [pc, #356]	; (800afd0 <tcp_process+0x7dc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d105      	bne.n	800ae80 <tcp_process+0x68c>
 800ae74:	4b56      	ldr	r3, [pc, #344]	; (800afd0 <tcp_process+0x7dc>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	4a55      	ldr	r2, [pc, #340]	; (800afd0 <tcp_process+0x7dc>)
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	e013      	b.n	800aea8 <tcp_process+0x6b4>
 800ae80:	4b53      	ldr	r3, [pc, #332]	; (800afd0 <tcp_process+0x7dc>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	e00c      	b.n	800aea2 <tcp_process+0x6ae>
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d104      	bne.n	800ae9c <tcp_process+0x6a8>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68da      	ldr	r2, [r3, #12]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	e005      	b.n	800aea8 <tcp_process+0x6b4>
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1ef      	bne.n	800ae88 <tcp_process+0x694>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	60da      	str	r2, [r3, #12]
 800aeae:	4b43      	ldr	r3, [pc, #268]	; (800afbc <tcp_process+0x7c8>)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	220a      	movs	r2, #10
 800aeb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aeba:	4b41      	ldr	r3, [pc, #260]	; (800afc0 <tcp_process+0x7cc>)
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60da      	str	r2, [r3, #12]
 800aec2:	4a3f      	ldr	r2, [pc, #252]	; (800afc0 <tcp_process+0x7cc>)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	f002 fc90 	bl	800d7ec <tcp_timer_needed>
      }
      break;
 800aecc:	e06c      	b.n	800afa8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f984 	bl	800b1dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aed4:	4b3b      	ldr	r3, [pc, #236]	; (800afc4 <tcp_process+0x7d0>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 0310 	and.w	r3, r3, #16
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d065      	beq.n	800afac <tcp_process+0x7b8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aee4:	4b38      	ldr	r3, [pc, #224]	; (800afc8 <tcp_process+0x7d4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d15f      	bne.n	800afac <tcp_process+0x7b8>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d15b      	bne.n	800afac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7fe fcf3 	bl	80098e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aefa:	4b35      	ldr	r3, [pc, #212]	; (800afd0 <tcp_process+0x7dc>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d105      	bne.n	800af10 <tcp_process+0x71c>
 800af04:	4b32      	ldr	r3, [pc, #200]	; (800afd0 <tcp_process+0x7dc>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	4a31      	ldr	r2, [pc, #196]	; (800afd0 <tcp_process+0x7dc>)
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	e013      	b.n	800af38 <tcp_process+0x744>
 800af10:	4b2f      	ldr	r3, [pc, #188]	; (800afd0 <tcp_process+0x7dc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	e00c      	b.n	800af32 <tcp_process+0x73e>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d104      	bne.n	800af2c <tcp_process+0x738>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	e005      	b.n	800af38 <tcp_process+0x744>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1ef      	bne.n	800af18 <tcp_process+0x724>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <tcp_process+0x7c8>)
 800af40:	2201      	movs	r2, #1
 800af42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	220a      	movs	r2, #10
 800af48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af4a:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <tcp_process+0x7cc>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	60da      	str	r2, [r3, #12]
 800af52:	4a1b      	ldr	r2, [pc, #108]	; (800afc0 <tcp_process+0x7cc>)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f002 fc48 	bl	800d7ec <tcp_timer_needed>
      }
      break;
 800af5c:	e026      	b.n	800afac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f93c 	bl	800b1dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af64:	4b17      	ldr	r3, [pc, #92]	; (800afc4 <tcp_process+0x7d0>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 0310 	and.w	r3, r3, #16
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01f      	beq.n	800afb0 <tcp_process+0x7bc>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af74:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <tcp_process+0x7d4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d119      	bne.n	800afb0 <tcp_process+0x7bc>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d115      	bne.n	800afb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800af84:	4b11      	ldr	r3, [pc, #68]	; (800afcc <tcp_process+0x7d8>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f043 0310 	orr.w	r3, r3, #16
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <tcp_process+0x7d8>)
 800af90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800af92:	e00d      	b.n	800afb0 <tcp_process+0x7bc>
    default:
      break;
 800af94:	bf00      	nop
 800af96:	e00c      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800af98:	bf00      	nop
 800af9a:	e00a      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800af9c:	bf00      	nop
 800af9e:	e008      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800afa0:	bf00      	nop
 800afa2:	e006      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800afa4:	bf00      	nop
 800afa6:	e004      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800afa8:	bf00      	nop
 800afaa:	e002      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800afac:	bf00      	nop
 800afae:	e000      	b.n	800afb2 <tcp_process+0x7be>
      break;
 800afb0:	bf00      	nop
  }
  return ERR_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3724      	adds	r7, #36	; 0x24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd90      	pop	{r4, r7, pc}
 800afbc:	2000cbf8 	.word	0x2000cbf8
 800afc0:	2000cc0c 	.word	0x2000cc0c
 800afc4:	200040c8 	.word	0x200040c8
 800afc8:	200040c0 	.word	0x200040c0
 800afcc:	200040c9 	.word	0x200040c9
 800afd0:	2000cbfc 	.word	0x2000cbfc

0800afd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800afd4:	b590      	push	{r4, r7, lr}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d106      	bne.n	800aff2 <tcp_oos_insert_segment+0x1e>
 800afe4:	4b3b      	ldr	r3, [pc, #236]	; (800b0d4 <tcp_oos_insert_segment+0x100>)
 800afe6:	f240 421f 	movw	r2, #1055	; 0x41f
 800afea:	493b      	ldr	r1, [pc, #236]	; (800b0d8 <tcp_oos_insert_segment+0x104>)
 800afec:	483b      	ldr	r0, [pc, #236]	; (800b0dc <tcp_oos_insert_segment+0x108>)
 800afee:	f005 fb4f 	bl	8010690 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	899b      	ldrh	r3, [r3, #12]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4618      	mov	r0, r3
 800affc:	f7fb fc58 	bl	80068b0 <lwip_htons>
 800b000:	4603      	mov	r3, r0
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d028      	beq.n	800b05e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b00c:	6838      	ldr	r0, [r7, #0]
 800b00e:	f7fe fa65 	bl	80094dc <tcp_segs_free>
    next = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	603b      	str	r3, [r7, #0]
 800b016:	e056      	b.n	800b0c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	899b      	ldrh	r3, [r3, #12]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb fc45 	bl	80068b0 <lwip_htons>
 800b026:	4603      	mov	r3, r0
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00d      	beq.n	800b04e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	899b      	ldrh	r3, [r3, #12]
 800b038:	b29c      	uxth	r4, r3
 800b03a:	2001      	movs	r0, #1
 800b03c:	f7fb fc38 	bl	80068b0 <lwip_htons>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	4322      	orrs	r2, r4
 800b04a:	b292      	uxth	r2, r2
 800b04c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7fe fa54 	bl	8009506 <tcp_seg_free>
    while (next &&
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	891b      	ldrh	r3, [r3, #8]
 800b068:	461a      	mov	r2, r3
 800b06a:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <tcp_oos_insert_segment+0x10c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	441a      	add	r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	8909      	ldrh	r1, [r1, #8]
 800b07a:	440b      	add	r3, r1
 800b07c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b07e:	2b00      	cmp	r3, #0
 800b080:	daca      	bge.n	800b018 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01e      	beq.n	800b0c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	891b      	ldrh	r3, [r3, #8]
 800b08c:	461a      	mov	r2, r3
 800b08e:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <tcp_oos_insert_segment+0x10c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	441a      	add	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd12      	ble.n	800b0c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	; (800b0e0 <tcp_oos_insert_segment+0x10c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	891b      	ldrh	r3, [r3, #8]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7fc fe1b 	bl	8007cfc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]
}
 800b0cc:	bf00      	nop
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd90      	pop	{r4, r7, pc}
 800b0d4:	08012a84 	.word	0x08012a84
 800b0d8:	08012d44 	.word	0x08012d44
 800b0dc:	08012ad0 	.word	0x08012ad0
 800b0e0:	200040bc 	.word	0x200040bc

0800b0e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b0e4:	b5b0      	push	{r4, r5, r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b0f2:	e03e      	b.n	800b172 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	4618      	mov	r0, r3
 800b104:	f7fd f80e 	bl	8008124 <pbuf_clen>
 800b108:	4603      	mov	r3, r0
 800b10a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b112:	8a7a      	ldrh	r2, [r7, #18]
 800b114:	429a      	cmp	r2, r3
 800b116:	d906      	bls.n	800b126 <tcp_free_acked_segments+0x42>
 800b118:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <tcp_free_acked_segments+0xe0>)
 800b11a:	f240 4257 	movw	r2, #1111	; 0x457
 800b11e:	492a      	ldr	r1, [pc, #168]	; (800b1c8 <tcp_free_acked_segments+0xe4>)
 800b120:	482a      	ldr	r0, [pc, #168]	; (800b1cc <tcp_free_acked_segments+0xe8>)
 800b122:	f005 fab5 	bl	8010690 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b12c:	8a7b      	ldrh	r3, [r7, #18]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	891a      	ldrh	r2, [r3, #8]
 800b13c:	4b24      	ldr	r3, [pc, #144]	; (800b1d0 <tcp_free_acked_segments+0xec>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	4413      	add	r3, r2
 800b142:	b29a      	uxth	r2, r3
 800b144:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <tcp_free_acked_segments+0xec>)
 800b146:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b148:	6978      	ldr	r0, [r7, #20]
 800b14a:	f7fe f9dc 	bl	8009506 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00c      	beq.n	800b172 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <tcp_free_acked_segments+0x8e>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d106      	bne.n	800b172 <tcp_free_acked_segments+0x8e>
 800b164:	4b17      	ldr	r3, [pc, #92]	; (800b1c4 <tcp_free_acked_segments+0xe0>)
 800b166:	f240 4261 	movw	r2, #1121	; 0x461
 800b16a:	491a      	ldr	r1, [pc, #104]	; (800b1d4 <tcp_free_acked_segments+0xf0>)
 800b16c:	4817      	ldr	r0, [pc, #92]	; (800b1cc <tcp_free_acked_segments+0xe8>)
 800b16e:	f005 fa8f 	bl	8010690 <iprintf>
  while (seg_list != NULL &&
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d020      	beq.n	800b1ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb fbab 	bl	80068da <lwip_htonl>
 800b184:	4604      	mov	r4, r0
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	891b      	ldrh	r3, [r3, #8]
 800b18a:	461d      	mov	r5, r3
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	899b      	ldrh	r3, [r3, #12]
 800b192:	b29b      	uxth	r3, r3
 800b194:	4618      	mov	r0, r3
 800b196:	f7fb fb8b 	bl	80068b0 <lwip_htons>
 800b19a:	4603      	mov	r3, r0
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <tcp_free_acked_segments+0xc6>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <tcp_free_acked_segments+0xc8>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	442b      	add	r3, r5
 800b1ae:	18e2      	adds	r2, r4, r3
 800b1b0:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <tcp_free_acked_segments+0xf4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd9c      	ble.n	800b0f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b1c4:	08012a84 	.word	0x08012a84
 800b1c8:	08012d6c 	.word	0x08012d6c
 800b1cc:	08012ad0 	.word	0x08012ad0
 800b1d0:	200040c4 	.word	0x200040c4
 800b1d4:	08012d94 	.word	0x08012d94
 800b1d8:	200040c0 	.word	0x200040c0

0800b1dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b1dc:	b5b0      	push	{r4, r5, r7, lr}
 800b1de:	b094      	sub	sp, #80	; 0x50
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <tcp_receive+0x20>
 800b1ee:	4ba6      	ldr	r3, [pc, #664]	; (800b488 <tcp_receive+0x2ac>)
 800b1f0:	f240 427b 	movw	r2, #1147	; 0x47b
 800b1f4:	49a5      	ldr	r1, [pc, #660]	; (800b48c <tcp_receive+0x2b0>)
 800b1f6:	48a6      	ldr	r0, [pc, #664]	; (800b490 <tcp_receive+0x2b4>)
 800b1f8:	f005 fa4a 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7d1b      	ldrb	r3, [r3, #20]
 800b200:	2b03      	cmp	r3, #3
 800b202:	d806      	bhi.n	800b212 <tcp_receive+0x36>
 800b204:	4ba0      	ldr	r3, [pc, #640]	; (800b488 <tcp_receive+0x2ac>)
 800b206:	f240 427c 	movw	r2, #1148	; 0x47c
 800b20a:	49a2      	ldr	r1, [pc, #648]	; (800b494 <tcp_receive+0x2b8>)
 800b20c:	48a0      	ldr	r0, [pc, #640]	; (800b490 <tcp_receive+0x2b4>)
 800b20e:	f005 fa3f 	bl	8010690 <iprintf>

  if (flags & TCP_ACK) {
 800b212:	4ba1      	ldr	r3, [pc, #644]	; (800b498 <tcp_receive+0x2bc>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 8263 	beq.w	800b6e6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b226:	461a      	mov	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22c:	4413      	add	r3, r2
 800b22e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b234:	4b99      	ldr	r3, [pc, #612]	; (800b49c <tcp_receive+0x2c0>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	db1b      	blt.n	800b276 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b242:	4b96      	ldr	r3, [pc, #600]	; (800b49c <tcp_receive+0x2c0>)
 800b244:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b246:	429a      	cmp	r2, r3
 800b248:	d106      	bne.n	800b258 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b24e:	4b94      	ldr	r3, [pc, #592]	; (800b4a0 <tcp_receive+0x2c4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	db0e      	blt.n	800b276 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b25c:	4b90      	ldr	r3, [pc, #576]	; (800b4a0 <tcp_receive+0x2c4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b260:	429a      	cmp	r2, r3
 800b262:	d125      	bne.n	800b2b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b264:	4b8f      	ldr	r3, [pc, #572]	; (800b4a4 <tcp_receive+0x2c8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	89db      	ldrh	r3, [r3, #14]
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b272:	429a      	cmp	r2, r3
 800b274:	d91c      	bls.n	800b2b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b276:	4b8b      	ldr	r3, [pc, #556]	; (800b4a4 <tcp_receive+0x2c8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	89db      	ldrh	r3, [r3, #14]
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b290:	429a      	cmp	r2, r3
 800b292:	d205      	bcs.n	800b2a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b2a0:	4b7e      	ldr	r3, [pc, #504]	; (800b49c <tcp_receive+0x2c0>)
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b2a8:	4b7d      	ldr	r3, [pc, #500]	; (800b4a0 <tcp_receive+0x2c4>)
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b2b0:	4b7b      	ldr	r3, [pc, #492]	; (800b4a0 <tcp_receive+0x2c4>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dc58      	bgt.n	800b370 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b2be:	4b7a      	ldr	r3, [pc, #488]	; (800b4a8 <tcp_receive+0x2cc>)
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d14b      	bne.n	800b35e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b2d0:	4413      	add	r3, r2
 800b2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d142      	bne.n	800b35e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	db3d      	blt.n	800b35e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2e6:	4b6e      	ldr	r3, [pc, #440]	; (800b4a0 <tcp_receive+0x2c4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d137      	bne.n	800b35e <tcp_receive+0x182>
              found_dupack = 1;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2f8:	2bff      	cmp	r3, #255	; 0xff
 800b2fa:	d007      	beq.n	800b30c <tcp_receive+0x130>
                ++pcb->dupacks;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b302:	3301      	adds	r3, #1
 800b304:	b2da      	uxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b312:	2b03      	cmp	r3, #3
 800b314:	d91b      	bls.n	800b34e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b320:	4413      	add	r3, r2
 800b322:	b29a      	uxth	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d30a      	bcc.n	800b344 <tcp_receive+0x168>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b338:	4413      	add	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b342:	e004      	b.n	800b34e <tcp_receive+0x172>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b354:	2b02      	cmp	r3, #2
 800b356:	d902      	bls.n	800b35e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f001 fee9 	bl	800d130 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 8160 	bne.w	800b626 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b36e:	e15a      	b.n	800b626 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b370:	4b4b      	ldr	r3, [pc, #300]	; (800b4a0 <tcp_receive+0x2c4>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f2c0 814d 	blt.w	800b61c <tcp_receive+0x440>
 800b382:	4b47      	ldr	r3, [pc, #284]	; (800b4a0 <tcp_receive+0x2c4>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f300 8145 	bgt.w	800b61c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	8b5b      	ldrh	r3, [r3, #26]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8b5b      	ldrh	r3, [r3, #26]
 800b3a2:	f023 0304 	bic.w	r3, r3, #4
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b3ce:	10db      	asrs	r3, r3, #3
 800b3d0:	b21b      	sxth	r3, r3
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	b21a      	sxth	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b3e8:	4b2d      	ldr	r3, [pc, #180]	; (800b4a0 <tcp_receive+0x2c4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b400:	4b27      	ldr	r3, [pc, #156]	; (800b4a0 <tcp_receive+0x2c4>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	7d1b      	ldrb	r3, [r3, #20]
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	f240 8096 	bls.w	800b53e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b41e:	429a      	cmp	r2, r3
 800b420:	d244      	bcs.n	800b4ac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8b5b      	ldrh	r3, [r3, #26]
 800b426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <tcp_receive+0x256>
 800b42e:	2301      	movs	r3, #1
 800b430:	e000      	b.n	800b434 <tcp_receive+0x258>
 800b432:	2302      	movs	r3, #2
 800b434:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b442:	fb12 f303 	smulbb	r3, r2, r3
 800b446:	b29b      	uxth	r3, r3
 800b448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bf28      	it	cs
 800b44e:	4613      	movcs	r3, r2
 800b450:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b45a:	4413      	add	r3, r2
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b464:	429a      	cmp	r2, r3
 800b466:	d309      	bcc.n	800b47c <tcp_receive+0x2a0>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b46e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b470:	4413      	add	r3, r2
 800b472:	b29a      	uxth	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b47a:	e060      	b.n	800b53e <tcp_receive+0x362>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b482:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b486:	e05a      	b.n	800b53e <tcp_receive+0x362>
 800b488:	08012a84 	.word	0x08012a84
 800b48c:	08012db4 	.word	0x08012db4
 800b490:	08012ad0 	.word	0x08012ad0
 800b494:	08012dd0 	.word	0x08012dd0
 800b498:	200040c8 	.word	0x200040c8
 800b49c:	200040bc 	.word	0x200040bc
 800b4a0:	200040c0 	.word	0x200040c0
 800b4a4:	200040ac 	.word	0x200040ac
 800b4a8:	200040c6 	.word	0x200040c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4b4:	4413      	add	r3, r2
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d309      	bcc.n	800b4d6 <tcp_receive+0x2fa>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ca:	4413      	add	r3, r2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b4d4:	e004      	b.n	800b4e0 <tcp_receive+0x304>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d326      	bcc.n	800b53e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b510:	4413      	add	r3, r2
 800b512:	b29a      	uxth	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d30a      	bcc.n	800b534 <tcp_receive+0x358>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b528:	4413      	add	r3, r2
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b532:	e004      	b.n	800b53e <tcp_receive+0x362>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b53a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b546:	4a98      	ldr	r2, [pc, #608]	; (800b7a8 <tcp_receive+0x5cc>)
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff fdcb 	bl	800b0e4 <tcp_free_acked_segments>
 800b54e:	4602      	mov	r2, r0
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55c:	4a93      	ldr	r2, [pc, #588]	; (800b7ac <tcp_receive+0x5d0>)
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff fdc0 	bl	800b0e4 <tcp_free_acked_segments>
 800b564:	4602      	mov	r2, r0
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d104      	bne.n	800b57c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b578:	861a      	strh	r2, [r3, #48]	; 0x30
 800b57a:	e002      	b.n	800b582 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d103      	bne.n	800b598 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b59e:	4b84      	ldr	r3, [pc, #528]	; (800b7b0 <tcp_receive+0x5d4>)
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	8b5b      	ldrh	r3, [r3, #26]
 800b5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d035      	beq.n	800b624 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d118      	bne.n	800b5f2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00c      	beq.n	800b5e2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fb f980 	bl	80068da <lwip_htonl>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dc20      	bgt.n	800b624 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	8b5b      	ldrh	r3, [r3, #26]
 800b5e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5f0:	e018      	b.n	800b624 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fb f96b 	bl	80068da <lwip_htonl>
 800b604:	4603      	mov	r3, r0
 800b606:	1ae3      	subs	r3, r4, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	dc0b      	bgt.n	800b624 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8b5b      	ldrh	r3, [r3, #26]
 800b610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b61a:	e003      	b.n	800b624 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 ff75 	bl	800d50c <tcp_send_empty_ack>
 800b622:	e000      	b.n	800b626 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b624:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d05b      	beq.n	800b6e6 <tcp_receive+0x50a>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b632:	4b60      	ldr	r3, [pc, #384]	; (800b7b4 <tcp_receive+0x5d8>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	da54      	bge.n	800b6e6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b63c:	4b5e      	ldr	r3, [pc, #376]	; (800b7b8 <tcp_receive+0x5dc>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	b29a      	uxth	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b646:	b29b      	uxth	r3, r3
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b650:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b65a:	10db      	asrs	r3, r3, #3
 800b65c:	b21b      	sxth	r3, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	b29b      	uxth	r3, r3
 800b664:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b66e:	b29a      	uxth	r2, r3
 800b670:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b674:	4413      	add	r3, r2
 800b676:	b29b      	uxth	r3, r3
 800b678:	b21a      	sxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b67e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b682:	2b00      	cmp	r3, #0
 800b684:	da05      	bge.n	800b692 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b68a:	425b      	negs	r3, r3
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b692:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b69c:	109b      	asrs	r3, r3, #2
 800b69e:	b21b      	sxth	r3, r3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6b6:	4413      	add	r3, r2
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	b21a      	sxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6c6:	10db      	asrs	r3, r3, #3
 800b6c8:	b21b      	sxth	r3, r3
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	4413      	add	r3, r2
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	b21a      	sxth	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b6e6:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <tcp_receive+0x5e0>)
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f000 84e1 	beq.w	800c0b2 <tcp_receive+0xed6>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7d1b      	ldrb	r3, [r3, #20]
 800b6f4:	2b06      	cmp	r3, #6
 800b6f6:	f200 84dc 	bhi.w	800c0b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6fe:	4b30      	ldr	r3, [pc, #192]	; (800b7c0 <tcp_receive+0x5e4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	3b01      	subs	r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	f2c0 808e 	blt.w	800b828 <tcp_receive+0x64c>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <tcp_receive+0x5e0>)
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	4619      	mov	r1, r3
 800b716:	4b2a      	ldr	r3, [pc, #168]	; (800b7c0 <tcp_receive+0x5e4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	440b      	add	r3, r1
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	3301      	adds	r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	f300 8081 	bgt.w	800b828 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b726:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <tcp_receive+0x5e8>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b730:	4b23      	ldr	r3, [pc, #140]	; (800b7c0 <tcp_receive+0x5e4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b738:	4b22      	ldr	r3, [pc, #136]	; (800b7c4 <tcp_receive+0x5e8>)
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d106      	bne.n	800b74e <tcp_receive+0x572>
 800b740:	4b21      	ldr	r3, [pc, #132]	; (800b7c8 <tcp_receive+0x5ec>)
 800b742:	f240 5294 	movw	r2, #1428	; 0x594
 800b746:	4921      	ldr	r1, [pc, #132]	; (800b7cc <tcp_receive+0x5f0>)
 800b748:	4821      	ldr	r0, [pc, #132]	; (800b7d0 <tcp_receive+0x5f4>)
 800b74a:	f004 ffa1 	bl	8010690 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b754:	4293      	cmp	r3, r2
 800b756:	d906      	bls.n	800b766 <tcp_receive+0x58a>
 800b758:	4b1b      	ldr	r3, [pc, #108]	; (800b7c8 <tcp_receive+0x5ec>)
 800b75a:	f240 5295 	movw	r2, #1429	; 0x595
 800b75e:	491d      	ldr	r1, [pc, #116]	; (800b7d4 <tcp_receive+0x5f8>)
 800b760:	481b      	ldr	r0, [pc, #108]	; (800b7d0 <tcp_receive+0x5f4>)
 800b762:	f004 ff95 	bl	8010690 <iprintf>
      off = (u16_t)off32;
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b76c:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <tcp_receive+0x5e8>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	891b      	ldrh	r3, [r3, #8]
 800b772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b776:	429a      	cmp	r2, r3
 800b778:	d906      	bls.n	800b788 <tcp_receive+0x5ac>
 800b77a:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <tcp_receive+0x5ec>)
 800b77c:	f240 5297 	movw	r2, #1431	; 0x597
 800b780:	4915      	ldr	r1, [pc, #84]	; (800b7d8 <tcp_receive+0x5fc>)
 800b782:	4813      	ldr	r0, [pc, #76]	; (800b7d0 <tcp_receive+0x5f4>)
 800b784:	f004 ff84 	bl	8010690 <iprintf>
      inseg.len -= off;
 800b788:	4b0e      	ldr	r3, [pc, #56]	; (800b7c4 <tcp_receive+0x5e8>)
 800b78a:	891a      	ldrh	r2, [r3, #8]
 800b78c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	b29a      	uxth	r2, r3
 800b794:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <tcp_receive+0x5e8>)
 800b796:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <tcp_receive+0x5e8>)
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	891a      	ldrh	r2, [r3, #8]
 800b79e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b7a6:	e029      	b.n	800b7fc <tcp_receive+0x620>
 800b7a8:	08012dec 	.word	0x08012dec
 800b7ac:	08012df4 	.word	0x08012df4
 800b7b0:	200040c4 	.word	0x200040c4
 800b7b4:	200040c0 	.word	0x200040c0
 800b7b8:	2000cc00 	.word	0x2000cc00
 800b7bc:	200040c6 	.word	0x200040c6
 800b7c0:	200040bc 	.word	0x200040bc
 800b7c4:	2000409c 	.word	0x2000409c
 800b7c8:	08012a84 	.word	0x08012a84
 800b7cc:	08012dfc 	.word	0x08012dfc
 800b7d0:	08012ad0 	.word	0x08012ad0
 800b7d4:	08012e0c 	.word	0x08012e0c
 800b7d8:	08012e1c 	.word	0x08012e1c
        off -= p->len;
 800b7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7de:	895b      	ldrh	r3, [r3, #10]
 800b7e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b7ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7fe:	895b      	ldrh	r3, [r3, #10]
 800b800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b804:	429a      	cmp	r2, r3
 800b806:	d8e9      	bhi.n	800b7dc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b808:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b80c:	4619      	mov	r1, r3
 800b80e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b810:	f7fc fb74 	bl	8007efc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	4a91      	ldr	r2, [pc, #580]	; (800ba60 <tcp_receive+0x884>)
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	4b91      	ldr	r3, [pc, #580]	; (800ba64 <tcp_receive+0x888>)
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	4a8f      	ldr	r2, [pc, #572]	; (800ba60 <tcp_receive+0x884>)
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b826:	e00d      	b.n	800b844 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b828:	4b8d      	ldr	r3, [pc, #564]	; (800ba60 <tcp_receive+0x884>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	da06      	bge.n	800b844 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	8b5b      	ldrh	r3, [r3, #26]
 800b83a:	f043 0302 	orr.w	r3, r3, #2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b844:	4b86      	ldr	r3, [pc, #536]	; (800ba60 <tcp_receive+0x884>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f2c0 842a 	blt.w	800c0a8 <tcp_receive+0xecc>
 800b854:	4b82      	ldr	r3, [pc, #520]	; (800ba60 <tcp_receive+0x884>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b860:	440b      	add	r3, r1
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	3301      	adds	r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	f300 841e 	bgt.w	800c0a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b870:	4b7b      	ldr	r3, [pc, #492]	; (800ba60 <tcp_receive+0x884>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	f040 829a 	bne.w	800bdae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b87a:	4b7a      	ldr	r3, [pc, #488]	; (800ba64 <tcp_receive+0x888>)
 800b87c:	891c      	ldrh	r4, [r3, #8]
 800b87e:	4b79      	ldr	r3, [pc, #484]	; (800ba64 <tcp_receive+0x888>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	899b      	ldrh	r3, [r3, #12]
 800b884:	b29b      	uxth	r3, r3
 800b886:	4618      	mov	r0, r3
 800b888:	f7fb f812 	bl	80068b0 <lwip_htons>
 800b88c:	4603      	mov	r3, r0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	f003 0303 	and.w	r3, r3, #3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <tcp_receive+0x6c0>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <tcp_receive+0x6c2>
 800b89c:	2300      	movs	r3, #0
 800b89e:	4423      	add	r3, r4
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	4b71      	ldr	r3, [pc, #452]	; (800ba68 <tcp_receive+0x88c>)
 800b8a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b8aa:	4b6f      	ldr	r3, [pc, #444]	; (800ba68 <tcp_receive+0x88c>)
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d275      	bcs.n	800b99e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b8b2:	4b6c      	ldr	r3, [pc, #432]	; (800ba64 <tcp_receive+0x888>)
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	899b      	ldrh	r3, [r3, #12]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fa fff8 	bl	80068b0 <lwip_htons>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01f      	beq.n	800b90c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b8cc:	4b65      	ldr	r3, [pc, #404]	; (800ba64 <tcp_receive+0x888>)
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	899b      	ldrh	r3, [r3, #12]
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	b21b      	sxth	r3, r3
 800b8d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8da:	b21c      	sxth	r4, r3
 800b8dc:	4b61      	ldr	r3, [pc, #388]	; (800ba64 <tcp_receive+0x888>)
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	899b      	ldrh	r3, [r3, #12]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fa ffe3 	bl	80068b0 <lwip_htons>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fa ffda 	bl	80068b0 <lwip_htons>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	b21b      	sxth	r3, r3
 800b900:	4323      	orrs	r3, r4
 800b902:	b21a      	sxth	r2, r3
 800b904:	4b57      	ldr	r3, [pc, #348]	; (800ba64 <tcp_receive+0x888>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	b292      	uxth	r2, r2
 800b90a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b910:	4b54      	ldr	r3, [pc, #336]	; (800ba64 <tcp_receive+0x888>)
 800b912:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b914:	4b53      	ldr	r3, [pc, #332]	; (800ba64 <tcp_receive+0x888>)
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	899b      	ldrh	r3, [r3, #12]
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fa ffc7 	bl	80068b0 <lwip_htons>
 800b922:	4603      	mov	r3, r0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	f003 0302 	and.w	r3, r3, #2
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <tcp_receive+0x75e>
            inseg.len -= 1;
 800b92e:	4b4d      	ldr	r3, [pc, #308]	; (800ba64 <tcp_receive+0x888>)
 800b930:	891b      	ldrh	r3, [r3, #8]
 800b932:	3b01      	subs	r3, #1
 800b934:	b29a      	uxth	r2, r3
 800b936:	4b4b      	ldr	r3, [pc, #300]	; (800ba64 <tcp_receive+0x888>)
 800b938:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b93a:	4b4a      	ldr	r3, [pc, #296]	; (800ba64 <tcp_receive+0x888>)
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	4a49      	ldr	r2, [pc, #292]	; (800ba64 <tcp_receive+0x888>)
 800b940:	8912      	ldrh	r2, [r2, #8]
 800b942:	4611      	mov	r1, r2
 800b944:	4618      	mov	r0, r3
 800b946:	f7fc f9d9 	bl	8007cfc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b94a:	4b46      	ldr	r3, [pc, #280]	; (800ba64 <tcp_receive+0x888>)
 800b94c:	891c      	ldrh	r4, [r3, #8]
 800b94e:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <tcp_receive+0x888>)
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	b29b      	uxth	r3, r3
 800b956:	4618      	mov	r0, r3
 800b958:	f7fa ffaa 	bl	80068b0 <lwip_htons>
 800b95c:	4603      	mov	r3, r0
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0303 	and.w	r3, r3, #3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <tcp_receive+0x790>
 800b968:	2301      	movs	r3, #1
 800b96a:	e000      	b.n	800b96e <tcp_receive+0x792>
 800b96c:	2300      	movs	r3, #0
 800b96e:	4423      	add	r3, r4
 800b970:	b29a      	uxth	r2, r3
 800b972:	4b3d      	ldr	r3, [pc, #244]	; (800ba68 <tcp_receive+0x88c>)
 800b974:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b976:	4b3c      	ldr	r3, [pc, #240]	; (800ba68 <tcp_receive+0x88c>)
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b38      	ldr	r3, [pc, #224]	; (800ba60 <tcp_receive+0x884>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	441a      	add	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b98a:	440b      	add	r3, r1
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d006      	beq.n	800b99e <tcp_receive+0x7c2>
 800b990:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <tcp_receive+0x890>)
 800b992:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b996:	4936      	ldr	r1, [pc, #216]	; (800ba70 <tcp_receive+0x894>)
 800b998:	4836      	ldr	r0, [pc, #216]	; (800ba74 <tcp_receive+0x898>)
 800b99a:	f004 fe79 	bl	8010690 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 80e7 	beq.w	800bb76 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b9a8:	4b2e      	ldr	r3, [pc, #184]	; (800ba64 <tcp_receive+0x888>)
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fa ff7d 	bl	80068b0 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d010      	beq.n	800b9e4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b9c2:	e00a      	b.n	800b9da <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7fd fd96 	bl	8009506 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1f0      	bne.n	800b9c4 <tcp_receive+0x7e8>
 800b9e2:	e0c8      	b.n	800bb76 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b9ea:	e052      	b.n	800ba92 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	899b      	ldrh	r3, [r3, #12]
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fa ff5b 	bl	80068b0 <lwip_htons>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d03d      	beq.n	800ba82 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ba06:	4b17      	ldr	r3, [pc, #92]	; (800ba64 <tcp_receive+0x888>)
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	899b      	ldrh	r3, [r3, #12]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fa ff4e 	bl	80068b0 <lwip_htons>
 800ba14:	4603      	mov	r3, r0
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d130      	bne.n	800ba82 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <tcp_receive+0x888>)
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	899b      	ldrh	r3, [r3, #12]
 800ba26:	b29c      	uxth	r4, r3
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f7fa ff41 	bl	80068b0 <lwip_htons>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	461a      	mov	r2, r3
 800ba32:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <tcp_receive+0x888>)
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	4322      	orrs	r2, r4
 800ba38:	b292      	uxth	r2, r2
 800ba3a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <tcp_receive+0x888>)
 800ba3e:	891c      	ldrh	r4, [r3, #8]
 800ba40:	4b08      	ldr	r3, [pc, #32]	; (800ba64 <tcp_receive+0x888>)
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	899b      	ldrh	r3, [r3, #12]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fa ff31 	bl	80068b0 <lwip_htons>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00e      	beq.n	800ba78 <tcp_receive+0x89c>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e00d      	b.n	800ba7a <tcp_receive+0x89e>
 800ba5e:	bf00      	nop
 800ba60:	200040bc 	.word	0x200040bc
 800ba64:	2000409c 	.word	0x2000409c
 800ba68:	200040c6 	.word	0x200040c6
 800ba6c:	08012a84 	.word	0x08012a84
 800ba70:	08012e2c 	.word	0x08012e2c
 800ba74:	08012ad0 	.word	0x08012ad0
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4423      	add	r3, r4
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	4b98      	ldr	r3, [pc, #608]	; (800bce0 <tcp_receive+0xb04>)
 800ba80:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ba82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba84:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ba86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ba8c:	6938      	ldr	r0, [r7, #16]
 800ba8e:	f7fd fd3a 	bl	8009506 <tcp_seg_free>
            while (next &&
 800ba92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00e      	beq.n	800bab6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ba98:	4b91      	ldr	r3, [pc, #580]	; (800bce0 <tcp_receive+0xb04>)
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4b91      	ldr	r3, [pc, #580]	; (800bce4 <tcp_receive+0xb08>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	441a      	add	r2, r3
 800baa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800baac:	8909      	ldrh	r1, [r1, #8]
 800baae:	440b      	add	r3, r1
 800bab0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da9a      	bge.n	800b9ec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d059      	beq.n	800bb70 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800babc:	4b88      	ldr	r3, [pc, #544]	; (800bce0 <tcp_receive+0xb04>)
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b88      	ldr	r3, [pc, #544]	; (800bce4 <tcp_receive+0xb08>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	441a      	add	r2, r3
 800bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dd4d      	ble.n	800bb70 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	b29a      	uxth	r2, r3
 800badc:	4b81      	ldr	r3, [pc, #516]	; (800bce4 <tcp_receive+0xb08>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	4b80      	ldr	r3, [pc, #512]	; (800bce8 <tcp_receive+0xb0c>)
 800bae8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800baea:	4b7f      	ldr	r3, [pc, #508]	; (800bce8 <tcp_receive+0xb0c>)
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	899b      	ldrh	r3, [r3, #12]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fa fedc 	bl	80068b0 <lwip_htons>
 800baf8:	4603      	mov	r3, r0
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <tcp_receive+0x934>
                inseg.len -= 1;
 800bb04:	4b78      	ldr	r3, [pc, #480]	; (800bce8 <tcp_receive+0xb0c>)
 800bb06:	891b      	ldrh	r3, [r3, #8]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	4b76      	ldr	r3, [pc, #472]	; (800bce8 <tcp_receive+0xb0c>)
 800bb0e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bb10:	4b75      	ldr	r3, [pc, #468]	; (800bce8 <tcp_receive+0xb0c>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	4a74      	ldr	r2, [pc, #464]	; (800bce8 <tcp_receive+0xb0c>)
 800bb16:	8912      	ldrh	r2, [r2, #8]
 800bb18:	4611      	mov	r1, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fc f8ee 	bl	8007cfc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bb20:	4b71      	ldr	r3, [pc, #452]	; (800bce8 <tcp_receive+0xb0c>)
 800bb22:	891c      	ldrh	r4, [r3, #8]
 800bb24:	4b70      	ldr	r3, [pc, #448]	; (800bce8 <tcp_receive+0xb0c>)
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	899b      	ldrh	r3, [r3, #12]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fa febf 	bl	80068b0 <lwip_htons>
 800bb32:	4603      	mov	r3, r0
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	f003 0303 	and.w	r3, r3, #3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <tcp_receive+0x966>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e000      	b.n	800bb44 <tcp_receive+0x968>
 800bb42:	2300      	movs	r3, #0
 800bb44:	4423      	add	r3, r4
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	4b65      	ldr	r3, [pc, #404]	; (800bce0 <tcp_receive+0xb04>)
 800bb4a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bb4c:	4b64      	ldr	r3, [pc, #400]	; (800bce0 <tcp_receive+0xb04>)
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	4b64      	ldr	r3, [pc, #400]	; (800bce4 <tcp_receive+0xb08>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	441a      	add	r2, r3
 800bb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d006      	beq.n	800bb70 <tcp_receive+0x994>
 800bb62:	4b62      	ldr	r3, [pc, #392]	; (800bcec <tcp_receive+0xb10>)
 800bb64:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bb68:	4961      	ldr	r1, [pc, #388]	; (800bcf0 <tcp_receive+0xb14>)
 800bb6a:	4862      	ldr	r0, [pc, #392]	; (800bcf4 <tcp_receive+0xb18>)
 800bb6c:	f004 fd90 	bl	8010690 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb74:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bb76:	4b5a      	ldr	r3, [pc, #360]	; (800bce0 <tcp_receive+0xb04>)
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	4b59      	ldr	r3, [pc, #356]	; (800bce4 <tcp_receive+0xb08>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	441a      	add	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb8a:	4b55      	ldr	r3, [pc, #340]	; (800bce0 <tcp_receive+0xb04>)
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d206      	bcs.n	800bba0 <tcp_receive+0x9c4>
 800bb92:	4b56      	ldr	r3, [pc, #344]	; (800bcec <tcp_receive+0xb10>)
 800bb94:	f240 6207 	movw	r2, #1543	; 0x607
 800bb98:	4957      	ldr	r1, [pc, #348]	; (800bcf8 <tcp_receive+0xb1c>)
 800bb9a:	4856      	ldr	r0, [pc, #344]	; (800bcf4 <tcp_receive+0xb18>)
 800bb9c:	f004 fd78 	bl	8010690 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bba4:	4b4e      	ldr	r3, [pc, #312]	; (800bce0 <tcp_receive+0xb04>)
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fc ffc9 	bl	8008b48 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bbb6:	4b4c      	ldr	r3, [pc, #304]	; (800bce8 <tcp_receive+0xb0c>)
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	891b      	ldrh	r3, [r3, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d006      	beq.n	800bbce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800bbc0:	4b49      	ldr	r3, [pc, #292]	; (800bce8 <tcp_receive+0xb0c>)
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	4a4d      	ldr	r2, [pc, #308]	; (800bcfc <tcp_receive+0xb20>)
 800bbc6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bbc8:	4b47      	ldr	r3, [pc, #284]	; (800bce8 <tcp_receive+0xb0c>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bbce:	4b46      	ldr	r3, [pc, #280]	; (800bce8 <tcp_receive+0xb0c>)
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	899b      	ldrh	r3, [r3, #12]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa fe6a 	bl	80068b0 <lwip_htons>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80b8 	beq.w	800bd5a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bbea:	4b45      	ldr	r3, [pc, #276]	; (800bd00 <tcp_receive+0xb24>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	f043 0320 	orr.w	r3, r3, #32
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	4b42      	ldr	r3, [pc, #264]	; (800bd00 <tcp_receive+0xb24>)
 800bbf6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bbf8:	e0af      	b.n	800bd5a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbfe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a36      	ldr	r2, [pc, #216]	; (800bce4 <tcp_receive+0xb08>)
 800bc0a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	891b      	ldrh	r3, [r3, #8]
 800bc10:	461c      	mov	r4, r3
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	899b      	ldrh	r3, [r3, #12]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fa fe48 	bl	80068b0 <lwip_htons>
 800bc20:	4603      	mov	r3, r0
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0303 	and.w	r3, r3, #3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <tcp_receive+0xa54>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <tcp_receive+0xa56>
 800bc30:	2300      	movs	r3, #0
 800bc32:	191a      	adds	r2, r3, r4
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	441a      	add	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc42:	461c      	mov	r4, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	891b      	ldrh	r3, [r3, #8]
 800bc48:	461d      	mov	r5, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	899b      	ldrh	r3, [r3, #12]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fa fe2c 	bl	80068b0 <lwip_htons>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <tcp_receive+0xa8c>
 800bc64:	2301      	movs	r3, #1
 800bc66:	e000      	b.n	800bc6a <tcp_receive+0xa8e>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	442b      	add	r3, r5
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	d206      	bcs.n	800bc7e <tcp_receive+0xaa2>
 800bc70:	4b1e      	ldr	r3, [pc, #120]	; (800bcec <tcp_receive+0xb10>)
 800bc72:	f240 622b 	movw	r2, #1579	; 0x62b
 800bc76:	4923      	ldr	r1, [pc, #140]	; (800bd04 <tcp_receive+0xb28>)
 800bc78:	481e      	ldr	r0, [pc, #120]	; (800bcf4 <tcp_receive+0xb18>)
 800bc7a:	f004 fd09 	bl	8010690 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	891b      	ldrh	r3, [r3, #8]
 800bc82:	461c      	mov	r4, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	899b      	ldrh	r3, [r3, #12]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fa fe0f 	bl	80068b0 <lwip_htons>
 800bc92:	4603      	mov	r3, r0
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	f003 0303 	and.w	r3, r3, #3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <tcp_receive+0xac6>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <tcp_receive+0xac8>
 800bca2:	2300      	movs	r3, #0
 800bca4:	1919      	adds	r1, r3, r4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bcaa:	b28b      	uxth	r3, r1
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7fc ff47 	bl	8008b48 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	891b      	ldrh	r3, [r3, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d028      	beq.n	800bd16 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	; (800bcfc <tcp_receive+0xb20>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d01d      	beq.n	800bd08 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bccc:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <tcp_receive+0xb20>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	f7fc fa64 	bl	80081a4 <pbuf_cat>
 800bcdc:	e018      	b.n	800bd10 <tcp_receive+0xb34>
 800bcde:	bf00      	nop
 800bce0:	200040c6 	.word	0x200040c6
 800bce4:	200040bc 	.word	0x200040bc
 800bce8:	2000409c 	.word	0x2000409c
 800bcec:	08012a84 	.word	0x08012a84
 800bcf0:	08012e64 	.word	0x08012e64
 800bcf4:	08012ad0 	.word	0x08012ad0
 800bcf8:	08012ea0 	.word	0x08012ea0
 800bcfc:	200040cc 	.word	0x200040cc
 800bd00:	200040c9 	.word	0x200040c9
 800bd04:	08012ec0 	.word	0x08012ec0
            } else {
              recv_data = cseg->p;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	4a70      	ldr	r2, [pc, #448]	; (800bed0 <tcp_receive+0xcf4>)
 800bd0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2200      	movs	r2, #0
 800bd14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fa fdc6 	bl	80068b0 <lwip_htons>
 800bd24:	4603      	mov	r3, r0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00d      	beq.n	800bd4c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bd30:	4b68      	ldr	r3, [pc, #416]	; (800bed4 <tcp_receive+0xcf8>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	f043 0320 	orr.w	r3, r3, #32
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b66      	ldr	r3, [pc, #408]	; (800bed4 <tcp_receive+0xcf8>)
 800bd3c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7d1b      	ldrb	r3, [r3, #20]
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d102      	bne.n	800bd4c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2207      	movs	r2, #7
 800bd4a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	f7fd fbd6 	bl	8009506 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d008      	beq.n	800bd74 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	f43f af43 	beq.w	800bbfa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	8b5b      	ldrh	r3, [r3, #26]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00e      	beq.n	800bd9e <tcp_receive+0xbc2>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	8b5b      	ldrh	r3, [r3, #26]
 800bd84:	f023 0301 	bic.w	r3, r3, #1
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	835a      	strh	r2, [r3, #26]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8b5b      	ldrh	r3, [r3, #26]
 800bd92:	f043 0302 	orr.w	r3, r3, #2
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bd9c:	e188      	b.n	800c0b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	8b5b      	ldrh	r3, [r3, #26]
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bdac:	e180      	b.n	800c0b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bdb6:	4848      	ldr	r0, [pc, #288]	; (800bed8 <tcp_receive+0xcfc>)
 800bdb8:	f7fd fbbe 	bl	8009538 <tcp_seg_copy>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	675a      	str	r2, [r3, #116]	; 0x74
 800bdc2:	e16d      	b.n	800c0a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdce:	e157      	b.n	800c080 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <tcp_receive+0xd00>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d11d      	bne.n	800be1a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bdde:	4b3e      	ldr	r3, [pc, #248]	; (800bed8 <tcp_receive+0xcfc>)
 800bde0:	891a      	ldrh	r2, [r3, #8]
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	891b      	ldrh	r3, [r3, #8]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	f240 814f 	bls.w	800c08a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdec:	483a      	ldr	r0, [pc, #232]	; (800bed8 <tcp_receive+0xcfc>)
 800bdee:	f7fd fba3 	bl	8009538 <tcp_seg_copy>
 800bdf2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 8149 	beq.w	800c08e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800be02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	e002      	b.n	800be10 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800be10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be12:	6978      	ldr	r0, [r7, #20]
 800be14:	f7ff f8de 	bl	800afd4 <tcp_oos_insert_segment>
                }
                break;
 800be18:	e139      	b.n	800c08e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d117      	bne.n	800be50 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800be20:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <tcp_receive+0xd00>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	da57      	bge.n	800bee0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800be30:	4829      	ldr	r0, [pc, #164]	; (800bed8 <tcp_receive+0xcfc>)
 800be32:	f7fd fb81 	bl	8009538 <tcp_seg_copy>
 800be36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 8129 	beq.w	800c092 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800be46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be48:	69b8      	ldr	r0, [r7, #24]
 800be4a:	f7ff f8c3 	bl	800afd4 <tcp_oos_insert_segment>
                  }
                  break;
 800be4e:	e120      	b.n	800c092 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800be50:	4b22      	ldr	r3, [pc, #136]	; (800bedc <tcp_receive+0xd00>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	3b01      	subs	r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	db3e      	blt.n	800bee0 <tcp_receive+0xd04>
 800be62:	4b1e      	ldr	r3, [pc, #120]	; (800bedc <tcp_receive+0xd00>)
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	3301      	adds	r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc35      	bgt.n	800bee0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800be74:	4818      	ldr	r0, [pc, #96]	; (800bed8 <tcp_receive+0xcfc>)
 800be76:	f7fd fb5f 	bl	8009538 <tcp_seg_copy>
 800be7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 8109 	beq.w	800c096 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be8c:	8912      	ldrh	r2, [r2, #8]
 800be8e:	441a      	add	r2, r3
 800be90:	4b12      	ldr	r3, [pc, #72]	; (800bedc <tcp_receive+0xd00>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd12      	ble.n	800bec0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800be9a:	4b10      	ldr	r3, [pc, #64]	; (800bedc <tcp_receive+0xd00>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	b29a      	uxth	r2, r3
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb6:	891b      	ldrh	r3, [r3, #8]
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7fb ff1e 	bl	8007cfc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec2:	69fa      	ldr	r2, [r7, #28]
 800bec4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bec8:	69f8      	ldr	r0, [r7, #28]
 800beca:	f7ff f883 	bl	800afd4 <tcp_oos_insert_segment>
                  }
                  break;
 800bece:	e0e2      	b.n	800c096 <tcp_receive+0xeba>
 800bed0:	200040cc 	.word	0x200040cc
 800bed4:	200040c9 	.word	0x200040c9
 800bed8:	2000409c 	.word	0x2000409c
 800bedc:	200040bc 	.word	0x200040bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 80c6 	bne.w	800c07a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800beee:	4b80      	ldr	r3, [pc, #512]	; (800c0f0 <tcp_receive+0xf14>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800befa:	2b00      	cmp	r3, #0
 800befc:	f340 80bd 	ble.w	800c07a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	899b      	ldrh	r3, [r3, #12]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fa fcd1 	bl	80068b0 <lwip_htons>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f040 80bf 	bne.w	800c09a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bf1c:	4875      	ldr	r0, [pc, #468]	; (800c0f4 <tcp_receive+0xf18>)
 800bf1e:	f7fd fb0b 	bl	8009538 <tcp_seg_copy>
 800bf22:	4602      	mov	r2, r0
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 80b6 	beq.w	800c09e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf3a:	8912      	ldrh	r2, [r2, #8]
 800bf3c:	441a      	add	r2, r3
 800bf3e:	4b6c      	ldr	r3, [pc, #432]	; (800c0f0 <tcp_receive+0xf14>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd12      	ble.n	800bf6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bf48:	4b69      	ldr	r3, [pc, #420]	; (800c0f0 <tcp_receive+0xf14>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	891b      	ldrh	r3, [r3, #8]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7fb fec7 	bl	8007cfc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bf6e:	4b62      	ldr	r3, [pc, #392]	; (800c0f8 <tcp_receive+0xf1c>)
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	4b5e      	ldr	r3, [pc, #376]	; (800c0f0 <tcp_receive+0xf14>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	441a      	add	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf82:	440b      	add	r3, r1
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f340 8089 	ble.w	800c09e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	899b      	ldrh	r3, [r3, #12]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fa fc8a 	bl	80068b0 <lwip_htons>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d022      	beq.n	800bfee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	899b      	ldrh	r3, [r3, #12]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfb8:	b21c      	sxth	r4, r3
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	899b      	ldrh	r3, [r3, #12]
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fa fc73 	bl	80068b0 <lwip_htons>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fa fc6a 	bl	80068b0 <lwip_htons>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	b21b      	sxth	r3, r3
 800bfe0:	4323      	orrs	r3, r4
 800bfe2:	b21a      	sxth	r2, r3
 800bfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	b292      	uxth	r2, r2
 800bfec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff8:	4413      	add	r3, r2
 800bffa:	b299      	uxth	r1, r3
 800bffc:	4b3c      	ldr	r3, [pc, #240]	; (800c0f0 <tcp_receive+0xf14>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	b29a      	uxth	r2, r3
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	1a8a      	subs	r2, r1, r2
 800c008:	b292      	uxth	r2, r2
 800c00a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	891b      	ldrh	r3, [r3, #8]
 800c018:	4619      	mov	r1, r3
 800c01a:	4610      	mov	r0, r2
 800c01c:	f7fb fe6e 	bl	8007cfc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	891c      	ldrh	r4, [r3, #8]
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	899b      	ldrh	r3, [r3, #12]
 800c02e:	b29b      	uxth	r3, r3
 800c030:	4618      	mov	r0, r3
 800c032:	f7fa fc3d 	bl	80068b0 <lwip_htons>
 800c036:	4603      	mov	r3, r0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <tcp_receive+0xe6a>
 800c042:	2301      	movs	r3, #1
 800c044:	e000      	b.n	800c048 <tcp_receive+0xe6c>
 800c046:	2300      	movs	r3, #0
 800c048:	4423      	add	r3, r4
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	4b2a      	ldr	r3, [pc, #168]	; (800c0f8 <tcp_receive+0xf1c>)
 800c04e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c050:	4b29      	ldr	r3, [pc, #164]	; (800c0f8 <tcp_receive+0xf1c>)
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <tcp_receive+0xf14>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	441a      	add	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c064:	440b      	add	r3, r1
 800c066:	429a      	cmp	r2, r3
 800c068:	d019      	beq.n	800c09e <tcp_receive+0xec2>
 800c06a:	4b24      	ldr	r3, [pc, #144]	; (800c0fc <tcp_receive+0xf20>)
 800c06c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c070:	4923      	ldr	r1, [pc, #140]	; (800c100 <tcp_receive+0xf24>)
 800c072:	4824      	ldr	r0, [pc, #144]	; (800c104 <tcp_receive+0xf28>)
 800c074:	f004 fb0c 	bl	8010690 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c078:	e011      	b.n	800c09e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	2b00      	cmp	r3, #0
 800c084:	f47f aea4 	bne.w	800bdd0 <tcp_receive+0xbf4>
 800c088:	e00a      	b.n	800c0a0 <tcp_receive+0xec4>
                break;
 800c08a:	bf00      	nop
 800c08c:	e008      	b.n	800c0a0 <tcp_receive+0xec4>
                break;
 800c08e:	bf00      	nop
 800c090:	e006      	b.n	800c0a0 <tcp_receive+0xec4>
                  break;
 800c092:	bf00      	nop
 800c094:	e004      	b.n	800c0a0 <tcp_receive+0xec4>
                  break;
 800c096:	bf00      	nop
 800c098:	e002      	b.n	800c0a0 <tcp_receive+0xec4>
                  break;
 800c09a:	bf00      	nop
 800c09c:	e000      	b.n	800c0a0 <tcp_receive+0xec4>
                break;
 800c09e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 fa33 	bl	800d50c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c0a6:	e003      	b.n	800c0b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fa2f 	bl	800d50c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c0ae:	e01a      	b.n	800c0e6 <tcp_receive+0xf0a>
 800c0b0:	e019      	b.n	800c0e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <tcp_receive+0xf14>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	db0a      	blt.n	800c0d6 <tcp_receive+0xefa>
 800c0c0:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <tcp_receive+0xf14>)
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0cc:	440b      	add	r3, r1
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	dd07      	ble.n	800c0e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	8b5b      	ldrh	r3, [r3, #26]
 800c0da:	f043 0302 	orr.w	r3, r3, #2
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c0e4:	e7ff      	b.n	800c0e6 <tcp_receive+0xf0a>
 800c0e6:	bf00      	nop
 800c0e8:	3750      	adds	r7, #80	; 0x50
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	200040bc 	.word	0x200040bc
 800c0f4:	2000409c 	.word	0x2000409c
 800c0f8:	200040c6 	.word	0x200040c6
 800c0fc:	08012a84 	.word	0x08012a84
 800c100:	08012e2c 	.word	0x08012e2c
 800c104:	08012ad0 	.word	0x08012ad0

0800c108 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c10e:	4b15      	ldr	r3, [pc, #84]	; (800c164 <tcp_get_next_optbyte+0x5c>)
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	1c5a      	adds	r2, r3, #1
 800c114:	b291      	uxth	r1, r2
 800c116:	4a13      	ldr	r2, [pc, #76]	; (800c164 <tcp_get_next_optbyte+0x5c>)
 800c118:	8011      	strh	r1, [r2, #0]
 800c11a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c11c:	4b12      	ldr	r3, [pc, #72]	; (800c168 <tcp_get_next_optbyte+0x60>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <tcp_get_next_optbyte+0x26>
 800c124:	4b11      	ldr	r3, [pc, #68]	; (800c16c <tcp_get_next_optbyte+0x64>)
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	88fa      	ldrh	r2, [r7, #6]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d208      	bcs.n	800c140 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c12e:	4b10      	ldr	r3, [pc, #64]	; (800c170 <tcp_get_next_optbyte+0x68>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3314      	adds	r3, #20
 800c134:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c136:	88fb      	ldrh	r3, [r7, #6]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	4413      	add	r3, r2
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	e00b      	b.n	800c158 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c140:	88fb      	ldrh	r3, [r7, #6]
 800c142:	b2da      	uxtb	r2, r3
 800c144:	4b09      	ldr	r3, [pc, #36]	; (800c16c <tcp_get_next_optbyte+0x64>)
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c14e:	4b06      	ldr	r3, [pc, #24]	; (800c168 <tcp_get_next_optbyte+0x60>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	797b      	ldrb	r3, [r7, #5]
 800c154:	4413      	add	r3, r2
 800c156:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	200040b8 	.word	0x200040b8
 800c168:	200040b4 	.word	0x200040b4
 800c16c:	200040b2 	.word	0x200040b2
 800c170:	200040ac 	.word	0x200040ac

0800c174 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d106      	bne.n	800c190 <tcp_parseopt+0x1c>
 800c182:	4b32      	ldr	r3, [pc, #200]	; (800c24c <tcp_parseopt+0xd8>)
 800c184:	f240 727d 	movw	r2, #1917	; 0x77d
 800c188:	4931      	ldr	r1, [pc, #196]	; (800c250 <tcp_parseopt+0xdc>)
 800c18a:	4832      	ldr	r0, [pc, #200]	; (800c254 <tcp_parseopt+0xe0>)
 800c18c:	f004 fa80 	bl	8010690 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c190:	4b31      	ldr	r3, [pc, #196]	; (800c258 <tcp_parseopt+0xe4>)
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d055      	beq.n	800c244 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c198:	4b30      	ldr	r3, [pc, #192]	; (800c25c <tcp_parseopt+0xe8>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	801a      	strh	r2, [r3, #0]
 800c19e:	e045      	b.n	800c22c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c1a0:	f7ff ffb2 	bl	800c108 <tcp_get_next_optbyte>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d006      	beq.n	800c1bc <tcp_parseopt+0x48>
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	dc2b      	bgt.n	800c20a <tcp_parseopt+0x96>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d041      	beq.n	800c23a <tcp_parseopt+0xc6>
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d127      	bne.n	800c20a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c1ba:	e037      	b.n	800c22c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c1bc:	f7ff ffa4 	bl	800c108 <tcp_get_next_optbyte>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d13b      	bne.n	800c23e <tcp_parseopt+0xca>
 800c1c6:	4b25      	ldr	r3, [pc, #148]	; (800c25c <tcp_parseopt+0xe8>)
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	4a22      	ldr	r2, [pc, #136]	; (800c258 <tcp_parseopt+0xe4>)
 800c1ce:	8812      	ldrh	r2, [r2, #0]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	da34      	bge.n	800c23e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c1d4:	f7ff ff98 	bl	800c108 <tcp_get_next_optbyte>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c1e0:	f7ff ff92 	bl	800c108 <tcp_get_next_optbyte>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	89bb      	ldrh	r3, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c1ee:	89bb      	ldrh	r3, [r7, #12]
 800c1f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c1f4:	d804      	bhi.n	800c200 <tcp_parseopt+0x8c>
 800c1f6:	89bb      	ldrh	r3, [r7, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <tcp_parseopt+0x8c>
 800c1fc:	89ba      	ldrh	r2, [r7, #12]
 800c1fe:	e001      	b.n	800c204 <tcp_parseopt+0x90>
 800c200:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c208:	e010      	b.n	800c22c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c20a:	f7ff ff7d 	bl	800c108 <tcp_get_next_optbyte>
 800c20e:	4603      	mov	r3, r0
 800c210:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c212:	7afb      	ldrb	r3, [r7, #11]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d914      	bls.n	800c242 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c218:	7afb      	ldrb	r3, [r7, #11]
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <tcp_parseopt+0xe8>)
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	4413      	add	r3, r2
 800c222:	b29b      	uxth	r3, r3
 800c224:	3b02      	subs	r3, #2
 800c226:	b29a      	uxth	r2, r3
 800c228:	4b0c      	ldr	r3, [pc, #48]	; (800c25c <tcp_parseopt+0xe8>)
 800c22a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <tcp_parseopt+0xe8>)
 800c22e:	881a      	ldrh	r2, [r3, #0]
 800c230:	4b09      	ldr	r3, [pc, #36]	; (800c258 <tcp_parseopt+0xe4>)
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d3b3      	bcc.n	800c1a0 <tcp_parseopt+0x2c>
 800c238:	e004      	b.n	800c244 <tcp_parseopt+0xd0>
          return;
 800c23a:	bf00      	nop
 800c23c:	e002      	b.n	800c244 <tcp_parseopt+0xd0>
            return;
 800c23e:	bf00      	nop
 800c240:	e000      	b.n	800c244 <tcp_parseopt+0xd0>
            return;
 800c242:	bf00      	nop
      }
    }
  }
}
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	08012a84 	.word	0x08012a84
 800c250:	08012ee8 	.word	0x08012ee8
 800c254:	08012ad0 	.word	0x08012ad0
 800c258:	200040b0 	.word	0x200040b0
 800c25c:	200040b8 	.word	0x200040b8

0800c260 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <tcp_trigger_input_pcb_close+0x1c>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	f043 0310 	orr.w	r3, r3, #16
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	4b03      	ldr	r3, [pc, #12]	; (800c27c <tcp_trigger_input_pcb_close+0x1c>)
 800c270:	701a      	strb	r2, [r3, #0]
}
 800c272:	bf00      	nop
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	200040c9 	.word	0x200040c9

0800c280 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00a      	beq.n	800c2a8 <tcp_route+0x28>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	7a1b      	ldrb	r3, [r3, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d006      	beq.n	800c2a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	7a1b      	ldrb	r3, [r3, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fb fb24 	bl	80078ec <netif_get_by_index>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	e003      	b.n	800c2b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f002 fead 	bl	800f008 <ip4_route>
 800c2ae:	4603      	mov	r3, r0
  }
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d105      	bne.n	800c2da <tcp_create_segment+0x22>
 800c2ce:	4b44      	ldr	r3, [pc, #272]	; (800c3e0 <tcp_create_segment+0x128>)
 800c2d0:	22a3      	movs	r2, #163	; 0xa3
 800c2d2:	4944      	ldr	r1, [pc, #272]	; (800c3e4 <tcp_create_segment+0x12c>)
 800c2d4:	4844      	ldr	r0, [pc, #272]	; (800c3e8 <tcp_create_segment+0x130>)
 800c2d6:	f004 f9db 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <tcp_create_segment+0x34>
 800c2e0:	4b3f      	ldr	r3, [pc, #252]	; (800c3e0 <tcp_create_segment+0x128>)
 800c2e2:	22a4      	movs	r2, #164	; 0xa4
 800c2e4:	4941      	ldr	r1, [pc, #260]	; (800c3ec <tcp_create_segment+0x134>)
 800c2e6:	4840      	ldr	r0, [pc, #256]	; (800c3e8 <tcp_create_segment+0x130>)
 800c2e8:	f004 f9d2 	bl	8010690 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c2fa:	2003      	movs	r0, #3
 800c2fc:	f7fa ff8e 	bl	800721c <memp_malloc>
 800c300:	6138      	str	r0, [r7, #16]
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d104      	bne.n	800c312 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c308:	68b8      	ldr	r0, [r7, #8]
 800c30a:	f7fb fe7d 	bl	8008008 <pbuf_free>
    return NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	e061      	b.n	800c3d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c318:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2200      	movs	r2, #0
 800c31e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	891a      	ldrh	r2, [r3, #8]
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	429a      	cmp	r2, r3
 800c330:	d205      	bcs.n	800c33e <tcp_create_segment+0x86>
 800c332:	4b2b      	ldr	r3, [pc, #172]	; (800c3e0 <tcp_create_segment+0x128>)
 800c334:	22b0      	movs	r2, #176	; 0xb0
 800c336:	492e      	ldr	r1, [pc, #184]	; (800c3f0 <tcp_create_segment+0x138>)
 800c338:	482b      	ldr	r0, [pc, #172]	; (800c3e8 <tcp_create_segment+0x130>)
 800c33a:	f004 f9a9 	bl	8010690 <iprintf>
  seg->len = p->tot_len - optlen;
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	891a      	ldrh	r2, [r3, #8]
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	b29b      	uxth	r3, r3
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	b29a      	uxth	r2, r3
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c34e:	2114      	movs	r1, #20
 800c350:	68b8      	ldr	r0, [r7, #8]
 800c352:	f7fb fdc3 	bl	8007edc <pbuf_add_header>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c35c:	6938      	ldr	r0, [r7, #16]
 800c35e:	f7fd f8d2 	bl	8009506 <tcp_seg_free>
    return NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	e037      	b.n	800c3d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	8ada      	ldrh	r2, [r3, #22]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	68dc      	ldr	r4, [r3, #12]
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fa fa99 	bl	80068b0 <lwip_htons>
 800c37e:	4603      	mov	r3, r0
 800c380:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8b1a      	ldrh	r2, [r3, #24]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	68dc      	ldr	r4, [r3, #12]
 800c38a:	4610      	mov	r0, r2
 800c38c:	f7fa fa90 	bl	80068b0 <lwip_htons>
 800c390:	4603      	mov	r3, r0
 800c392:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	68dc      	ldr	r4, [r3, #12]
 800c398:	6838      	ldr	r0, [r7, #0]
 800c39a:	f7fa fa9e 	bl	80068da <lwip_htonl>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	089b      	lsrs	r3, r3, #2
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3305      	adds	r3, #5
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	031b      	lsls	r3, r3, #12
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	68dc      	ldr	r4, [r3, #12]
 800c3be:	4610      	mov	r0, r2
 800c3c0:	f7fa fa76 	bl	80068b0 <lwip_htons>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	749a      	strb	r2, [r3, #18]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	74da      	strb	r2, [r3, #19]
  return seg;
 800c3d4:	693b      	ldr	r3, [r7, #16]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd90      	pop	{r4, r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	08012f04 	.word	0x08012f04
 800c3e4:	08012f38 	.word	0x08012f38
 800c3e8:	08012f58 	.word	0x08012f58
 800c3ec:	08012f80 	.word	0x08012f80
 800c3f0:	08012fa4 	.word	0x08012fa4

0800c3f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b08b      	sub	sp, #44	; 0x2c
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c400:	2300      	movs	r3, #0
 800c402:	61fb      	str	r3, [r7, #28]
 800c404:	2300      	movs	r3, #0
 800c406:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <tcp_split_unsent_seg+0x2c>
 800c412:	4b95      	ldr	r3, [pc, #596]	; (800c668 <tcp_split_unsent_seg+0x274>)
 800c414:	f240 324b 	movw	r2, #843	; 0x34b
 800c418:	4994      	ldr	r1, [pc, #592]	; (800c66c <tcp_split_unsent_seg+0x278>)
 800c41a:	4895      	ldr	r0, [pc, #596]	; (800c670 <tcp_split_unsent_seg+0x27c>)
 800c41c:	f004 f938 	bl	8010690 <iprintf>

  useg = pcb->unsent;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c42c:	f04f 33ff 	mov.w	r3, #4294967295
 800c430:	e116      	b.n	800c660 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c432:	887b      	ldrh	r3, [r7, #2]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c438:	4b8b      	ldr	r3, [pc, #556]	; (800c668 <tcp_split_unsent_seg+0x274>)
 800c43a:	f240 3253 	movw	r2, #851	; 0x353
 800c43e:	498d      	ldr	r1, [pc, #564]	; (800c674 <tcp_split_unsent_seg+0x280>)
 800c440:	488b      	ldr	r0, [pc, #556]	; (800c670 <tcp_split_unsent_seg+0x27c>)
 800c442:	f004 f925 	bl	8010690 <iprintf>
    return ERR_VAL;
 800c446:	f06f 0305 	mvn.w	r3, #5
 800c44a:	e109      	b.n	800c660 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	891b      	ldrh	r3, [r3, #8]
 800c450:	887a      	ldrh	r2, [r7, #2]
 800c452:	429a      	cmp	r2, r3
 800c454:	d301      	bcc.n	800c45a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	e102      	b.n	800c660 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c45e:	887a      	ldrh	r2, [r7, #2]
 800c460:	429a      	cmp	r2, r3
 800c462:	d906      	bls.n	800c472 <tcp_split_unsent_seg+0x7e>
 800c464:	4b80      	ldr	r3, [pc, #512]	; (800c668 <tcp_split_unsent_seg+0x274>)
 800c466:	f240 325b 	movw	r2, #859	; 0x35b
 800c46a:	4983      	ldr	r1, [pc, #524]	; (800c678 <tcp_split_unsent_seg+0x284>)
 800c46c:	4880      	ldr	r0, [pc, #512]	; (800c670 <tcp_split_unsent_seg+0x27c>)
 800c46e:	f004 f90f 	bl	8010690 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	891b      	ldrh	r3, [r3, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d106      	bne.n	800c488 <tcp_split_unsent_seg+0x94>
 800c47a:	4b7b      	ldr	r3, [pc, #492]	; (800c668 <tcp_split_unsent_seg+0x274>)
 800c47c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c480:	497e      	ldr	r1, [pc, #504]	; (800c67c <tcp_split_unsent_seg+0x288>)
 800c482:	487b      	ldr	r0, [pc, #492]	; (800c670 <tcp_split_unsent_seg+0x27c>)
 800c484:	f004 f904 	bl	8010690 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	7a9b      	ldrb	r3, [r3, #10]
 800c48c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 0304 	and.w	r3, r3, #4
 800c498:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	891a      	ldrh	r2, [r3, #8]
 800c49e:	887b      	ldrh	r3, [r7, #2]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	89bb      	ldrh	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	2036      	movs	r0, #54	; 0x36
 800c4b6:	f7fb fac3 	bl	8007a40 <pbuf_alloc>
 800c4ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 80b7 	beq.w	800c632 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	891a      	ldrh	r2, [r3, #8]
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	891b      	ldrh	r3, [r3, #8]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	887b      	ldrh	r3, [r7, #2]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	6858      	ldr	r0, [r3, #4]
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	18d1      	adds	r1, r2, r3
 800c4e4:	897b      	ldrh	r3, [r7, #10]
 800c4e6:	89ba      	ldrh	r2, [r7, #12]
 800c4e8:	f7fb ff84 	bl	80083f4 <pbuf_copy_partial>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	89bb      	ldrh	r3, [r7, #12]
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	f040 809f 	bne.w	800c636 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	899b      	ldrh	r3, [r3, #12]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	4618      	mov	r0, r3
 800c502:	f7fa f9d5 	bl	80068b0 <lwip_htons>
 800c506:	4603      	mov	r3, r0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c50e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c510:	2300      	movs	r3, #0
 800c512:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c514:	7efb      	ldrb	r3, [r7, #27]
 800c516:	f003 0308 	and.w	r3, r3, #8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c51e:	7efb      	ldrb	r3, [r7, #27]
 800c520:	f023 0308 	bic.w	r3, r3, #8
 800c524:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c526:	7ebb      	ldrb	r3, [r7, #26]
 800c528:	f043 0308 	orr.w	r3, r3, #8
 800c52c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c52e:	7efb      	ldrb	r3, [r7, #27]
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c538:	7efb      	ldrb	r3, [r7, #27]
 800c53a:	f023 0301 	bic.w	r3, r3, #1
 800c53e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c540:	7ebb      	ldrb	r3, [r7, #26]
 800c542:	f043 0301 	orr.w	r3, r3, #1
 800c546:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fa f9c3 	bl	80068da <lwip_htonl>
 800c554:	4602      	mov	r2, r0
 800c556:	887b      	ldrh	r3, [r7, #2]
 800c558:	18d1      	adds	r1, r2, r3
 800c55a:	7eba      	ldrb	r2, [r7, #26]
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	460b      	mov	r3, r1
 800c562:	6939      	ldr	r1, [r7, #16]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff fea7 	bl	800c2b8 <tcp_create_segment>
 800c56a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d063      	beq.n	800c63a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb fdd4 	bl	8008124 <pbuf_clen>
 800c57c:	4603      	mov	r3, r0
 800c57e:	461a      	mov	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	6858      	ldr	r0, [r3, #4]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	891a      	ldrh	r2, [r3, #8]
 800c59a:	89bb      	ldrh	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7fb fbab 	bl	8007cfc <pbuf_realloc>
  useg->len -= remainder;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	891a      	ldrh	r2, [r3, #8]
 800c5aa:	89bb      	ldrh	r3, [r7, #12]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	899b      	ldrh	r3, [r3, #12]
 800c5ba:	b29c      	uxth	r4, r3
 800c5bc:	7efb      	ldrb	r3, [r7, #27]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fa f975 	bl	80068b0 <lwip_htons>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	4322      	orrs	r2, r4
 800c5d0:	b292      	uxth	r2, r2
 800c5d2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fb fda3 	bl	8008124 <pbuf_clen>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5e8:	4413      	add	r3, r2
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fb fd94 	bl	8008124 <pbuf_clen>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	461a      	mov	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c606:	4413      	add	r3, r2
 800c608:	b29a      	uxth	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	69fa      	ldr	r2, [r7, #28]
 800c61c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d103      	bne.n	800c62e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	e016      	b.n	800c660 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c632:	bf00      	nop
 800c634:	e002      	b.n	800c63c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c636:	bf00      	nop
 800c638:	e000      	b.n	800c63c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c63a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <tcp_split_unsent_seg+0x25c>
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <tcp_split_unsent_seg+0x274>)
 800c644:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c648:	490d      	ldr	r1, [pc, #52]	; (800c680 <tcp_split_unsent_seg+0x28c>)
 800c64a:	4809      	ldr	r0, [pc, #36]	; (800c670 <tcp_split_unsent_seg+0x27c>)
 800c64c:	f004 f820 	bl	8010690 <iprintf>
  if (p != NULL) {
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c656:	6938      	ldr	r0, [r7, #16]
 800c658:	f7fb fcd6 	bl	8008008 <pbuf_free>
  }

  return ERR_MEM;
 800c65c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c660:	4618      	mov	r0, r3
 800c662:	3724      	adds	r7, #36	; 0x24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd90      	pop	{r4, r7, pc}
 800c668:	08012f04 	.word	0x08012f04
 800c66c:	08013298 	.word	0x08013298
 800c670:	08012f58 	.word	0x08012f58
 800c674:	080132bc 	.word	0x080132bc
 800c678:	080132e0 	.word	0x080132e0
 800c67c:	080132f0 	.word	0x080132f0
 800c680:	08013300 	.word	0x08013300

0800c684 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d106      	bne.n	800c6a0 <tcp_send_fin+0x1c>
 800c692:	4b21      	ldr	r3, [pc, #132]	; (800c718 <tcp_send_fin+0x94>)
 800c694:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c698:	4920      	ldr	r1, [pc, #128]	; (800c71c <tcp_send_fin+0x98>)
 800c69a:	4821      	ldr	r0, [pc, #132]	; (800c720 <tcp_send_fin+0x9c>)
 800c69c:	f003 fff8 	bl	8010690 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d02e      	beq.n	800c706 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e002      	b.n	800c6b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1f8      	bne.n	800c6b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	899b      	ldrh	r3, [r3, #12]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fa f8f2 	bl	80068b0 <lwip_htons>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0307 	and.w	r3, r3, #7
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d116      	bne.n	800c706 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	899b      	ldrh	r3, [r3, #12]
 800c6de:	b29c      	uxth	r4, r3
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f7fa f8e5 	bl	80068b0 <lwip_htons>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	4322      	orrs	r2, r4
 800c6f0:	b292      	uxth	r2, r2
 800c6f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	8b5b      	ldrh	r3, [r3, #26]
 800c6f8:	f043 0320 	orr.w	r3, r3, #32
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	e004      	b.n	800c710 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c706:	2101      	movs	r1, #1
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 f80b 	bl	800c724 <tcp_enqueue_flags>
 800c70e:	4603      	mov	r3, r0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	bd90      	pop	{r4, r7, pc}
 800c718:	08012f04 	.word	0x08012f04
 800c71c:	0801330c 	.word	0x0801330c
 800c720:	08012f58 	.word	0x08012f58

0800c724 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08a      	sub	sp, #40	; 0x28
 800c728:	af02      	add	r7, sp, #8
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	f003 0303 	and.w	r3, r3, #3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_enqueue_flags+0x2c>
 800c742:	4b67      	ldr	r3, [pc, #412]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c744:	f240 4211 	movw	r2, #1041	; 0x411
 800c748:	4966      	ldr	r1, [pc, #408]	; (800c8e4 <tcp_enqueue_flags+0x1c0>)
 800c74a:	4867      	ldr	r0, [pc, #412]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c74c:	f003 ffa0 	bl	8010690 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <tcp_enqueue_flags+0x40>
 800c756:	4b62      	ldr	r3, [pc, #392]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c758:	f240 4213 	movw	r2, #1043	; 0x413
 800c75c:	4963      	ldr	r1, [pc, #396]	; (800c8ec <tcp_enqueue_flags+0x1c8>)
 800c75e:	4862      	ldr	r0, [pc, #392]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c760:	f003 ff96 	bl	8010690 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	f003 0302 	and.w	r3, r3, #2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c76e:	2301      	movs	r3, #1
 800c770:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c772:	7ffb      	ldrb	r3, [r7, #31]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	b29b      	uxth	r3, r3
 800c782:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c786:	4619      	mov	r1, r3
 800c788:	2036      	movs	r0, #54	; 0x36
 800c78a:	f7fb f959 	bl	8007a40 <pbuf_alloc>
 800c78e:	6138      	str	r0, [r7, #16]
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d109      	bne.n	800c7aa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	8b5b      	ldrh	r3, [r3, #26]
 800c79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a8:	e095      	b.n	800c8d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	895a      	ldrh	r2, [r3, #10]
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d206      	bcs.n	800c7c4 <tcp_enqueue_flags+0xa0>
 800c7b6:	4b4a      	ldr	r3, [pc, #296]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c7b8:	f240 4239 	movw	r2, #1081	; 0x439
 800c7bc:	494c      	ldr	r1, [pc, #304]	; (800c8f0 <tcp_enqueue_flags+0x1cc>)
 800c7be:	484a      	ldr	r0, [pc, #296]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c7c0:	f003 ff66 	bl	8010690 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	7ffb      	ldrb	r3, [r7, #31]
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	6939      	ldr	r1, [r7, #16]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff fd70 	bl	800c2b8 <tcp_create_segment>
 800c7d8:	60f8      	str	r0, [r7, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d109      	bne.n	800c7f4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	8b5b      	ldrh	r3, [r3, #26]
 800c7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f2:	e070      	b.n	800c8d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f003 0303 	and.w	r3, r3, #3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d006      	beq.n	800c80e <tcp_enqueue_flags+0xea>
 800c800:	4b37      	ldr	r3, [pc, #220]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c802:	f240 4242 	movw	r2, #1090	; 0x442
 800c806:	493b      	ldr	r1, [pc, #236]	; (800c8f4 <tcp_enqueue_flags+0x1d0>)
 800c808:	4837      	ldr	r0, [pc, #220]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c80a:	f003 ff41 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	891b      	ldrh	r3, [r3, #8]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d006      	beq.n	800c824 <tcp_enqueue_flags+0x100>
 800c816:	4b32      	ldr	r3, [pc, #200]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c818:	f240 4243 	movw	r2, #1091	; 0x443
 800c81c:	4936      	ldr	r1, [pc, #216]	; (800c8f8 <tcp_enqueue_flags+0x1d4>)
 800c81e:	4832      	ldr	r0, [pc, #200]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c820:	f003 ff36 	bl	8010690 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d103      	bne.n	800c834 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	66da      	str	r2, [r3, #108]	; 0x6c
 800c832:	e00d      	b.n	800c850 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c838:	61bb      	str	r3, [r7, #24]
 800c83a:	e002      	b.n	800c842 <tcp_enqueue_flags+0x11e>
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	61bb      	str	r3, [r7, #24]
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1f8      	bne.n	800c83c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	f003 0302 	and.w	r3, r3, #2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d104      	bne.n	800c86c <tcp_enqueue_flags+0x148>
 800c862:	78fb      	ldrb	r3, [r7, #3]
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d004      	beq.n	800c876 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d006      	beq.n	800c88e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	8b5b      	ldrh	r3, [r3, #26]
 800c884:	f043 0320 	orr.w	r3, r3, #32
 800c888:	b29a      	uxth	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	4618      	mov	r0, r3
 800c894:	f7fb fc46 	bl	8008124 <pbuf_clen>
 800c898:	4603      	mov	r3, r0
 800c89a:	461a      	mov	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8a2:	4413      	add	r3, r2
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00e      	beq.n	800c8d4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10a      	bne.n	800c8d4 <tcp_enqueue_flags+0x1b0>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <tcp_enqueue_flags+0x1b0>
 800c8c6:	4b06      	ldr	r3, [pc, #24]	; (800c8e0 <tcp_enqueue_flags+0x1bc>)
 800c8c8:	f240 4265 	movw	r2, #1125	; 0x465
 800c8cc:	490b      	ldr	r1, [pc, #44]	; (800c8fc <tcp_enqueue_flags+0x1d8>)
 800c8ce:	4806      	ldr	r0, [pc, #24]	; (800c8e8 <tcp_enqueue_flags+0x1c4>)
 800c8d0:	f003 fede 	bl	8010690 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3720      	adds	r7, #32
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	08012f04 	.word	0x08012f04
 800c8e4:	08013328 	.word	0x08013328
 800c8e8:	08012f58 	.word	0x08012f58
 800c8ec:	08013380 	.word	0x08013380
 800c8f0:	080133a0 	.word	0x080133a0
 800c8f4:	080133dc 	.word	0x080133dc
 800c8f8:	080133f4 	.word	0x080133f4
 800c8fc:	08013420 	.word	0x08013420

0800c900 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c900:	b5b0      	push	{r4, r5, r7, lr}
 800c902:	b08a      	sub	sp, #40	; 0x28
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <tcp_output+0x1c>
 800c90e:	4b9e      	ldr	r3, [pc, #632]	; (800cb88 <tcp_output+0x288>)
 800c910:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c914:	499d      	ldr	r1, [pc, #628]	; (800cb8c <tcp_output+0x28c>)
 800c916:	489e      	ldr	r0, [pc, #632]	; (800cb90 <tcp_output+0x290>)
 800c918:	f003 feba 	bl	8010690 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7d1b      	ldrb	r3, [r3, #20]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d106      	bne.n	800c932 <tcp_output+0x32>
 800c924:	4b98      	ldr	r3, [pc, #608]	; (800cb88 <tcp_output+0x288>)
 800c926:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c92a:	499a      	ldr	r1, [pc, #616]	; (800cb94 <tcp_output+0x294>)
 800c92c:	4898      	ldr	r0, [pc, #608]	; (800cb90 <tcp_output+0x290>)
 800c92e:	f003 feaf 	bl	8010690 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c932:	4b99      	ldr	r3, [pc, #612]	; (800cb98 <tcp_output+0x298>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d101      	bne.n	800c940 <tcp_output+0x40>
    return ERR_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	e1ce      	b.n	800ccde <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c94c:	4293      	cmp	r3, r2
 800c94e:	bf28      	it	cs
 800c950:	4613      	movcs	r3, r2
 800c952:	b29b      	uxth	r3, r3
 800c954:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8b5b      	ldrh	r3, [r3, #26]
 800c966:	f003 0302 	and.w	r3, r3, #2
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 81aa 	beq.w	800ccc4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fdcb 	bl	800d50c <tcp_send_empty_ack>
 800c976:	4603      	mov	r3, r0
 800c978:	e1b1      	b.n	800ccde <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3304      	adds	r3, #4
 800c980:	461a      	mov	r2, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff fc7c 	bl	800c280 <tcp_route>
 800c988:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <tcp_output+0x96>
    return ERR_RTE;
 800c990:	f06f 0303 	mvn.w	r3, #3
 800c994:	e1a3      	b.n	800ccde <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <tcp_output+0xa4>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d111      	bne.n	800c9c8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <tcp_output+0xb0>
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	e000      	b.n	800c9b2 <tcp_output+0xb2>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <tcp_output+0xc0>
      return ERR_RTE;
 800c9ba:	f06f 0303 	mvn.w	r3, #3
 800c9be:	e18e      	b.n	800ccde <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f9 ff83 	bl	80068da <lwip_htonl>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9de:	8912      	ldrh	r2, [r2, #8]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d227      	bcs.n	800ca38 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d114      	bne.n	800ca20 <tcp_output+0x120>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d110      	bne.n	800ca20 <tcp_output+0x120>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8b5b      	ldrh	r3, [r3, #26]
 800ca24:	f003 0302 	and.w	r3, r3, #2
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 814d 	beq.w	800ccc8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fd6c 	bl	800d50c <tcp_send_empty_ack>
 800ca34:	4603      	mov	r3, r0
 800ca36:	e152      	b.n	800ccde <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca44:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 811c 	beq.w	800cc86 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ca4e:	e002      	b.n	800ca56 <tcp_output+0x156>
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	623b      	str	r3, [r7, #32]
 800ca56:	6a3b      	ldr	r3, [r7, #32]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1f8      	bne.n	800ca50 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ca5e:	e112      	b.n	800cc86 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ca60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	899b      	ldrh	r3, [r3, #12]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7f9 ff21 	bl	80068b0 <lwip_htons>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0304 	and.w	r3, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <tcp_output+0x188>
 800ca7a:	4b43      	ldr	r3, [pc, #268]	; (800cb88 <tcp_output+0x288>)
 800ca7c:	f240 5236 	movw	r2, #1334	; 0x536
 800ca80:	4946      	ldr	r1, [pc, #280]	; (800cb9c <tcp_output+0x29c>)
 800ca82:	4843      	ldr	r0, [pc, #268]	; (800cb90 <tcp_output+0x290>)
 800ca84:	f003 fe04 	bl	8010690 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d01f      	beq.n	800cad0 <tcp_output+0x1d0>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8b5b      	ldrh	r3, [r3, #26]
 800ca94:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d119      	bne.n	800cad0 <tcp_output+0x1d0>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00b      	beq.n	800cabc <tcp_output+0x1bc>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d110      	bne.n	800cad0 <tcp_output+0x1d0>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab2:	891a      	ldrh	r2, [r3, #8]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cab8:	429a      	cmp	r2, r3
 800caba:	d209      	bcs.n	800cad0 <tcp_output+0x1d0>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d004      	beq.n	800cad0 <tcp_output+0x1d0>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cacc:	2b08      	cmp	r3, #8
 800cace:	d901      	bls.n	800cad4 <tcp_output+0x1d4>
 800cad0:	2301      	movs	r3, #1
 800cad2:	e000      	b.n	800cad6 <tcp_output+0x1d6>
 800cad4:	2300      	movs	r3, #0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8b5b      	ldrh	r3, [r3, #26]
 800cade:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 80e4 	beq.w	800ccb0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d00d      	beq.n	800cb0c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800caf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	899b      	ldrh	r3, [r3, #12]
 800caf6:	b29c      	uxth	r4, r3
 800caf8:	2010      	movs	r0, #16
 800cafa:	f7f9 fed9 	bl	80068b0 <lwip_htons>
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	4322      	orrs	r2, r4
 800cb08:	b292      	uxth	r2, r2
 800cb0a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	6879      	ldr	r1, [r7, #4]
 800cb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb12:	f000 f909 	bl	800cd28 <tcp_output_segment>
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d009      	beq.n	800cb36 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	8b5b      	ldrh	r3, [r3, #26]
 800cb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	835a      	strh	r2, [r3, #26]
      return err;
 800cb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb34:	e0d3      	b.n	800ccde <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7d1b      	ldrb	r3, [r3, #20]
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d006      	beq.n	800cb54 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	8b5b      	ldrh	r3, [r3, #26]
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7f9 febd 	bl	80068da <lwip_htonl>
 800cb60:	4604      	mov	r4, r0
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	891b      	ldrh	r3, [r3, #8]
 800cb66:	461d      	mov	r5, r3
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7f9 fe9d 	bl	80068b0 <lwip_htons>
 800cb76:	4603      	mov	r3, r0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	f003 0303 	and.w	r3, r3, #3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00e      	beq.n	800cba0 <tcp_output+0x2a0>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e00d      	b.n	800cba2 <tcp_output+0x2a2>
 800cb86:	bf00      	nop
 800cb88:	08012f04 	.word	0x08012f04
 800cb8c:	08013448 	.word	0x08013448
 800cb90:	08012f58 	.word	0x08012f58
 800cb94:	08013460 	.word	0x08013460
 800cb98:	2000cc10 	.word	0x2000cc10
 800cb9c:	08013488 	.word	0x08013488
 800cba0:	2300      	movs	r3, #0
 800cba2:	442b      	add	r3, r5
 800cba4:	4423      	add	r3, r4
 800cba6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	da02      	bge.n	800cbba <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	891b      	ldrh	r3, [r3, #8]
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	899b      	ldrh	r3, [r3, #12]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f9 fe71 	bl	80068b0 <lwip_htons>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	f003 0303 	and.w	r3, r3, #3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <tcp_output+0x2de>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e000      	b.n	800cbe0 <tcp_output+0x2e0>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	4423      	add	r3, r4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d049      	beq.n	800cc7a <tcp_output+0x37a>
      seg->next = NULL;
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d105      	bne.n	800cc00 <tcp_output+0x300>
        pcb->unacked = seg;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	623b      	str	r3, [r7, #32]
 800cbfe:	e03f      	b.n	800cc80 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f9 fe67 	bl	80068da <lwip_htonl>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7f9 fe60 	bl	80068da <lwip_htonl>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	1ae3      	subs	r3, r4, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	da24      	bge.n	800cc6c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3370      	adds	r3, #112	; 0x70
 800cc26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cc28:	e002      	b.n	800cc30 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d011      	beq.n	800cc5c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7f9 fe4a 	bl	80068da <lwip_htonl>
 800cc46:	4604      	mov	r4, r0
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7f9 fe43 	bl	80068da <lwip_htonl>
 800cc54:	4603      	mov	r3, r0
 800cc56:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dbe6      	blt.n	800cc2a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e009      	b.n	800cc80 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc70:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	623b      	str	r3, [r7, #32]
 800cc78:	e002      	b.n	800cc80 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cc7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc7c:	f7fc fc43 	bl	8009506 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d012      	beq.n	800ccb2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7f9 fe21 	bl	80068da <lwip_htonl>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	8912      	ldrh	r2, [r2, #8]
 800cca4:	4413      	add	r3, r2
  while (seg != NULL &&
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	f4bf aed9 	bcs.w	800ca60 <tcp_output+0x160>
 800ccae:	e000      	b.n	800ccb2 <tcp_output+0x3b2>
      break;
 800ccb0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d108      	bne.n	800cccc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ccc2:	e004      	b.n	800ccce <tcp_output+0x3ce>
    goto output_done;
 800ccc4:	bf00      	nop
 800ccc6:	e002      	b.n	800ccce <tcp_output+0x3ce>
    goto output_done;
 800ccc8:	bf00      	nop
 800ccca:	e000      	b.n	800ccce <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cccc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8b5b      	ldrh	r3, [r3, #26]
 800ccd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3728      	adds	r7, #40	; 0x28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bdb0      	pop	{r4, r5, r7, pc}
 800cce6:	bf00      	nop

0800cce8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <tcp_output_segment_busy+0x1c>
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <tcp_output_segment_busy+0x34>)
 800ccf8:	f240 529a 	movw	r2, #1434	; 0x59a
 800ccfc:	4908      	ldr	r1, [pc, #32]	; (800cd20 <tcp_output_segment_busy+0x38>)
 800ccfe:	4809      	ldr	r0, [pc, #36]	; (800cd24 <tcp_output_segment_busy+0x3c>)
 800cd00:	f003 fcc6 	bl	8010690 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	7b9b      	ldrb	r3, [r3, #14]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d001      	beq.n	800cd12 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e000      	b.n	800cd14 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	08012f04 	.word	0x08012f04
 800cd20:	080134a0 	.word	0x080134a0
 800cd24:	08012f58 	.word	0x08012f58

0800cd28 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cd28:	b5b0      	push	{r4, r5, r7, lr}
 800cd2a:	b08c      	sub	sp, #48	; 0x30
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d106      	bne.n	800cd48 <tcp_output_segment+0x20>
 800cd3a:	4b63      	ldr	r3, [pc, #396]	; (800cec8 <tcp_output_segment+0x1a0>)
 800cd3c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cd40:	4962      	ldr	r1, [pc, #392]	; (800cecc <tcp_output_segment+0x1a4>)
 800cd42:	4863      	ldr	r0, [pc, #396]	; (800ced0 <tcp_output_segment+0x1a8>)
 800cd44:	f003 fca4 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <tcp_output_segment+0x34>
 800cd4e:	4b5e      	ldr	r3, [pc, #376]	; (800cec8 <tcp_output_segment+0x1a0>)
 800cd50:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cd54:	495f      	ldr	r1, [pc, #380]	; (800ced4 <tcp_output_segment+0x1ac>)
 800cd56:	485e      	ldr	r0, [pc, #376]	; (800ced0 <tcp_output_segment+0x1a8>)
 800cd58:	f003 fc9a 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <tcp_output_segment+0x48>
 800cd62:	4b59      	ldr	r3, [pc, #356]	; (800cec8 <tcp_output_segment+0x1a0>)
 800cd64:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cd68:	495b      	ldr	r1, [pc, #364]	; (800ced8 <tcp_output_segment+0x1b0>)
 800cd6a:	4859      	ldr	r0, [pc, #356]	; (800ced0 <tcp_output_segment+0x1a8>)
 800cd6c:	f003 fc90 	bl	8010690 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff ffb9 	bl	800cce8 <tcp_output_segment_busy>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e09f      	b.n	800cec0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	68dc      	ldr	r4, [r3, #12]
 800cd88:	4610      	mov	r0, r2
 800cd8a:	f7f9 fda6 	bl	80068da <lwip_htonl>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	68dc      	ldr	r4, [r3, #12]
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	f7f9 fd88 	bl	80068b0 <lwip_htons>
 800cda0:	4603      	mov	r3, r0
 800cda2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cdac:	441a      	add	r2, r3
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	7a9b      	ldrb	r3, [r3, #10]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d015      	beq.n	800cdf2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	461a      	mov	r2, r3
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cdd2:	f7fc fe8f 	bl	8009af4 <tcp_eff_send_mss_netif>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cdda:	8b7b      	ldrh	r3, [r7, #26]
 800cddc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7f9 fd7a 	bl	80068da <lwip_htonl>
 800cde6:	4602      	mov	r2, r0
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	da02      	bge.n	800ce02 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10c      	bne.n	800ce24 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ce0a:	4b34      	ldr	r3, [pc, #208]	; (800cedc <tcp_output_segment+0x1b4>)
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f9 fd5e 	bl	80068da <lwip_htonl>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	68da      	ldr	r2, [r3, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	8959      	ldrh	r1, [r3, #10]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	8b3a      	ldrh	r2, [r7, #24]
 800ce3e:	1a8a      	subs	r2, r1, r2
 800ce40:	b292      	uxth	r2, r2
 800ce42:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	8919      	ldrh	r1, [r3, #8]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	8b3a      	ldrh	r2, [r7, #24]
 800ce50:	1a8a      	subs	r2, r1, r2
 800ce52:	b292      	uxth	r2, r2
 800ce54:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	68d2      	ldr	r2, [r2, #12]
 800ce5e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	741a      	strb	r2, [r3, #16]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	f103 0214 	add.w	r2, r3, #20
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	7a9b      	ldrb	r3, [r3, #10]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	4413      	add	r3, r2
 800ce80:	69fa      	ldr	r2, [r7, #28]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d006      	beq.n	800ce94 <tcp_output_segment+0x16c>
 800ce86:	4b10      	ldr	r3, [pc, #64]	; (800cec8 <tcp_output_segment+0x1a0>)
 800ce88:	f240 621c 	movw	r2, #1564	; 0x61c
 800ce8c:	4914      	ldr	r1, [pc, #80]	; (800cee0 <tcp_output_segment+0x1b8>)
 800ce8e:	4810      	ldr	r0, [pc, #64]	; (800ced0 <tcp_output_segment+0x1a8>)
 800ce90:	f003 fbfe 	bl	8010690 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6858      	ldr	r0, [r3, #4]
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	1d1c      	adds	r4, r3, #4
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	7add      	ldrb	r5, [r3, #11]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	7a9b      	ldrb	r3, [r3, #10]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	9202      	str	r2, [sp, #8]
 800ceaa:	2206      	movs	r2, #6
 800ceac:	9201      	str	r2, [sp, #4]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	4622      	mov	r2, r4
 800ceb4:	f002 fa66 	bl	800f384 <ip4_output_if>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3720      	adds	r7, #32
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bdb0      	pop	{r4, r5, r7, pc}
 800cec8:	08012f04 	.word	0x08012f04
 800cecc:	080134c8 	.word	0x080134c8
 800ced0:	08012f58 	.word	0x08012f58
 800ced4:	080134e8 	.word	0x080134e8
 800ced8:	08013508 	.word	0x08013508
 800cedc:	2000cc00 	.word	0x2000cc00
 800cee0:	0801352c 	.word	0x0801352c

0800cee4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cee4:	b5b0      	push	{r4, r5, r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d106      	bne.n	800cf00 <tcp_rexmit_rto_prepare+0x1c>
 800cef2:	4b31      	ldr	r3, [pc, #196]	; (800cfb8 <tcp_rexmit_rto_prepare+0xd4>)
 800cef4:	f240 6263 	movw	r2, #1635	; 0x663
 800cef8:	4930      	ldr	r1, [pc, #192]	; (800cfbc <tcp_rexmit_rto_prepare+0xd8>)
 800cefa:	4831      	ldr	r0, [pc, #196]	; (800cfc0 <tcp_rexmit_rto_prepare+0xdc>)
 800cefc:	f003 fbc8 	bl	8010690 <iprintf>

  if (pcb->unacked == NULL) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cf08:	f06f 0305 	mvn.w	r3, #5
 800cf0c:	e050      	b.n	800cfb0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e00b      	b.n	800cf2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7ff fee6 	bl	800cce8 <tcp_output_segment_busy>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d002      	beq.n	800cf28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cf22:	f06f 0305 	mvn.w	r3, #5
 800cf26:	e043      	b.n	800cfb0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1ef      	bne.n	800cf16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff fed6 	bl	800cce8 <tcp_output_segment_busy>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cf42:	f06f 0305 	mvn.w	r3, #5
 800cf46:	e033      	b.n	800cfb0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	8b5b      	ldrh	r3, [r3, #26]
 800cf62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f9 fcb1 	bl	80068da <lwip_htonl>
 800cf78:	4604      	mov	r4, r0
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	891b      	ldrh	r3, [r3, #8]
 800cf7e:	461d      	mov	r5, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	899b      	ldrh	r3, [r3, #12]
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7f9 fc91 	bl	80068b0 <lwip_htons>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	f003 0303 	and.w	r3, r3, #3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <tcp_rexmit_rto_prepare+0xba>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e000      	b.n	800cfa0 <tcp_rexmit_rto_prepare+0xbc>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	442b      	add	r3, r5
 800cfa2:	18e2      	adds	r2, r4, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bdb0      	pop	{r4, r5, r7, pc}
 800cfb8:	08012f04 	.word	0x08012f04
 800cfbc:	08013540 	.word	0x08013540
 800cfc0:	08012f58 	.word	0x08012f58

0800cfc4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <tcp_rexmit_rto_commit+0x1c>
 800cfd2:	4b0d      	ldr	r3, [pc, #52]	; (800d008 <tcp_rexmit_rto_commit+0x44>)
 800cfd4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cfd8:	490c      	ldr	r1, [pc, #48]	; (800d00c <tcp_rexmit_rto_commit+0x48>)
 800cfda:	480d      	ldr	r0, [pc, #52]	; (800d010 <tcp_rexmit_rto_commit+0x4c>)
 800cfdc:	f003 fb58 	bl	8010690 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfe6:	2bff      	cmp	r3, #255	; 0xff
 800cfe8:	d007      	beq.n	800cffa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cff0:	3301      	adds	r3, #1
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff fc80 	bl	800c900 <tcp_output>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	08012f04 	.word	0x08012f04
 800d00c:	08013564 	.word	0x08013564
 800d010:	08012f58 	.word	0x08012f58

0800d014 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <tcp_rexmit_rto+0x1c>
 800d022:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <tcp_rexmit_rto+0x38>)
 800d024:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d028:	4909      	ldr	r1, [pc, #36]	; (800d050 <tcp_rexmit_rto+0x3c>)
 800d02a:	480a      	ldr	r0, [pc, #40]	; (800d054 <tcp_rexmit_rto+0x40>)
 800d02c:	f003 fb30 	bl	8010690 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ff57 	bl	800cee4 <tcp_rexmit_rto_prepare>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7ff ffc1 	bl	800cfc4 <tcp_rexmit_rto_commit>
  }
}
 800d042:	bf00      	nop
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08012f04 	.word	0x08012f04
 800d050:	08013588 	.word	0x08013588
 800d054:	08012f58 	.word	0x08012f58

0800d058 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d058:	b590      	push	{r4, r7, lr}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <tcp_rexmit+0x1c>
 800d066:	4b2f      	ldr	r3, [pc, #188]	; (800d124 <tcp_rexmit+0xcc>)
 800d068:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d06c:	492e      	ldr	r1, [pc, #184]	; (800d128 <tcp_rexmit+0xd0>)
 800d06e:	482f      	ldr	r0, [pc, #188]	; (800d12c <tcp_rexmit+0xd4>)
 800d070:	f003 fb0e 	bl	8010690 <iprintf>

  if (pcb->unacked == NULL) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d07c:	f06f 0305 	mvn.w	r3, #5
 800d080:	e04c      	b.n	800d11c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d086:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d088:	68b8      	ldr	r0, [r7, #8]
 800d08a:	f7ff fe2d 	bl	800cce8 <tcp_output_segment_busy>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d094:	f06f 0305 	mvn.w	r3, #5
 800d098:	e040      	b.n	800d11c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	336c      	adds	r3, #108	; 0x6c
 800d0a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d0a8:	e002      	b.n	800d0b0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d011      	beq.n	800d0dc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7f9 fc0a 	bl	80068da <lwip_htonl>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7f9 fc03 	bl	80068da <lwip_htonl>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	dbe6      	blt.n	800d0aa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d100:	2bff      	cmp	r3, #255	; 0xff
 800d102:	d007      	beq.n	800d114 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d10a:	3301      	adds	r3, #1
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}
 800d124:	08012f04 	.word	0x08012f04
 800d128:	080135a4 	.word	0x080135a4
 800d12c:	08012f58 	.word	0x08012f58

0800d130 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <tcp_rexmit_fast+0x1c>
 800d13e:	4b2a      	ldr	r3, [pc, #168]	; (800d1e8 <tcp_rexmit_fast+0xb8>)
 800d140:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d144:	4929      	ldr	r1, [pc, #164]	; (800d1ec <tcp_rexmit_fast+0xbc>)
 800d146:	482a      	ldr	r0, [pc, #168]	; (800d1f0 <tcp_rexmit_fast+0xc0>)
 800d148:	f003 faa2 	bl	8010690 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d150:	2b00      	cmp	r3, #0
 800d152:	d045      	beq.n	800d1e0 <tcp_rexmit_fast+0xb0>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8b5b      	ldrh	r3, [r3, #26]
 800d158:	f003 0304 	and.w	r3, r3, #4
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d13f      	bne.n	800d1e0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff ff79 	bl	800d058 <tcp_rexmit>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d139      	bne.n	800d1e0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d178:	4293      	cmp	r3, r2
 800d17a:	bf28      	it	cs
 800d17c:	4613      	movcs	r3, r2
 800d17e:	b29b      	uxth	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	da00      	bge.n	800d186 <tcp_rexmit_fast+0x56>
 800d184:	3301      	adds	r3, #1
 800d186:	105b      	asrs	r3, r3, #1
 800d188:	b29a      	uxth	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d196:	461a      	mov	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d206      	bcs.n	800d1b0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	0049      	lsls	r1, r1, #1
 800d1be:	440b      	add	r3, r1
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	4413      	add	r3, r2
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	8b5b      	ldrh	r3, [r3, #26]
 800d1d0:	f043 0304 	orr.w	r3, r3, #4
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	08012f04 	.word	0x08012f04
 800d1ec:	080135bc 	.word	0x080135bc
 800d1f0:	08012f58 	.word	0x08012f58

0800d1f4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	607b      	str	r3, [r7, #4]
 800d1fe:	460b      	mov	r3, r1
 800d200:	817b      	strh	r3, [r7, #10]
 800d202:	4613      	mov	r3, r2
 800d204:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d206:	897a      	ldrh	r2, [r7, #10]
 800d208:	893b      	ldrh	r3, [r7, #8]
 800d20a:	4413      	add	r3, r2
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	3314      	adds	r3, #20
 800d210:	b29b      	uxth	r3, r3
 800d212:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d216:	4619      	mov	r1, r3
 800d218:	2022      	movs	r0, #34	; 0x22
 800d21a:	f7fa fc11 	bl	8007a40 <pbuf_alloc>
 800d21e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d04d      	beq.n	800d2c2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	3313      	adds	r3, #19
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	8952      	ldrh	r2, [r2, #10]
 800d22e:	4293      	cmp	r3, r2
 800d230:	db06      	blt.n	800d240 <tcp_output_alloc_header_common+0x4c>
 800d232:	4b26      	ldr	r3, [pc, #152]	; (800d2cc <tcp_output_alloc_header_common+0xd8>)
 800d234:	f240 7223 	movw	r2, #1827	; 0x723
 800d238:	4925      	ldr	r1, [pc, #148]	; (800d2d0 <tcp_output_alloc_header_common+0xdc>)
 800d23a:	4826      	ldr	r0, [pc, #152]	; (800d2d4 <tcp_output_alloc_header_common+0xe0>)
 800d23c:	f003 fa28 	bl	8010690 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d246:	8c3b      	ldrh	r3, [r7, #32]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f9 fb31 	bl	80068b0 <lwip_htons>
 800d24e:	4603      	mov	r3, r0
 800d250:	461a      	mov	r2, r3
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f9 fb29 	bl	80068b0 <lwip_htons>
 800d25e:	4603      	mov	r3, r0
 800d260:	461a      	mov	r2, r3
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f7f9 fb34 	bl	80068da <lwip_htonl>
 800d272:	4602      	mov	r2, r0
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d278:	897b      	ldrh	r3, [r7, #10]
 800d27a:	089b      	lsrs	r3, r3, #2
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	3305      	adds	r3, #5
 800d280:	b29b      	uxth	r3, r3
 800d282:	031b      	lsls	r3, r3, #12
 800d284:	b29a      	uxth	r2, r3
 800d286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	4313      	orrs	r3, r2
 800d28e:	b29b      	uxth	r3, r3
 800d290:	4618      	mov	r0, r3
 800d292:	f7f9 fb0d 	bl	80068b0 <lwip_htons>
 800d296:	4603      	mov	r3, r0
 800d298:	461a      	mov	r2, r3
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d29e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f9 fb05 	bl	80068b0 <lwip_htons>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	741a      	strb	r2, [r3, #16]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	749a      	strb	r2, [r3, #18]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d2c2:	697b      	ldr	r3, [r7, #20]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3718      	adds	r7, #24
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08012f04 	.word	0x08012f04
 800d2d0:	080135dc 	.word	0x080135dc
 800d2d4:	08012f58 	.word	0x08012f58

0800d2d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d2d8:	b5b0      	push	{r4, r5, r7, lr}
 800d2da:	b08a      	sub	sp, #40	; 0x28
 800d2dc:	af04      	add	r7, sp, #16
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	607b      	str	r3, [r7, #4]
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	817b      	strh	r3, [r7, #10]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d106      	bne.n	800d2fe <tcp_output_alloc_header+0x26>
 800d2f0:	4b15      	ldr	r3, [pc, #84]	; (800d348 <tcp_output_alloc_header+0x70>)
 800d2f2:	f240 7242 	movw	r2, #1858	; 0x742
 800d2f6:	4915      	ldr	r1, [pc, #84]	; (800d34c <tcp_output_alloc_header+0x74>)
 800d2f8:	4815      	ldr	r0, [pc, #84]	; (800d350 <tcp_output_alloc_header+0x78>)
 800d2fa:	f003 f9c9 	bl	8010690 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	8adb      	ldrh	r3, [r3, #22]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	8b12      	ldrh	r2, [r2, #24]
 800d30a:	68f9      	ldr	r1, [r7, #12]
 800d30c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d30e:	893d      	ldrh	r5, [r7, #8]
 800d310:	897c      	ldrh	r4, [r7, #10]
 800d312:	9103      	str	r1, [sp, #12]
 800d314:	2110      	movs	r1, #16
 800d316:	9102      	str	r1, [sp, #8]
 800d318:	9201      	str	r2, [sp, #4]
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	462a      	mov	r2, r5
 800d320:	4621      	mov	r1, r4
 800d322:	f7ff ff67 	bl	800d1f4 <tcp_output_alloc_header_common>
 800d326:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d006      	beq.n	800d33c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d336:	441a      	add	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d33c:	697b      	ldr	r3, [r7, #20]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bdb0      	pop	{r4, r5, r7, pc}
 800d346:	bf00      	nop
 800d348:	08012f04 	.word	0x08012f04
 800d34c:	0801360c 	.word	0x0801360c
 800d350:	08012f58 	.word	0x08012f58

0800d354 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b088      	sub	sp, #32
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	4611      	mov	r1, r2
 800d360:	461a      	mov	r2, r3
 800d362:	460b      	mov	r3, r1
 800d364:	71fb      	strb	r3, [r7, #7]
 800d366:	4613      	mov	r3, r2
 800d368:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d106      	bne.n	800d382 <tcp_output_fill_options+0x2e>
 800d374:	4b13      	ldr	r3, [pc, #76]	; (800d3c4 <tcp_output_fill_options+0x70>)
 800d376:	f240 7256 	movw	r2, #1878	; 0x756
 800d37a:	4913      	ldr	r1, [pc, #76]	; (800d3c8 <tcp_output_fill_options+0x74>)
 800d37c:	4813      	ldr	r0, [pc, #76]	; (800d3cc <tcp_output_fill_options+0x78>)
 800d37e:	f003 f987 	bl	8010690 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	3314      	adds	r3, #20
 800d38c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	f103 0214 	add.w	r2, r3, #20
 800d394:	8bfb      	ldrh	r3, [r7, #30]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4619      	mov	r1, r3
 800d39a:	79fb      	ldrb	r3, [r7, #7]
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	f003 0304 	and.w	r3, r3, #4
 800d3a2:	440b      	add	r3, r1
 800d3a4:	4413      	add	r3, r2
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d006      	beq.n	800d3ba <tcp_output_fill_options+0x66>
 800d3ac:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <tcp_output_fill_options+0x70>)
 800d3ae:	f240 7275 	movw	r2, #1909	; 0x775
 800d3b2:	4907      	ldr	r1, [pc, #28]	; (800d3d0 <tcp_output_fill_options+0x7c>)
 800d3b4:	4805      	ldr	r0, [pc, #20]	; (800d3cc <tcp_output_fill_options+0x78>)
 800d3b6:	f003 f96b 	bl	8010690 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d3ba:	bf00      	nop
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	08012f04 	.word	0x08012f04
 800d3c8:	08013634 	.word	0x08013634
 800d3cc:	08012f58 	.word	0x08012f58
 800d3d0:	0801352c 	.word	0x0801352c

0800d3d4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08a      	sub	sp, #40	; 0x28
 800d3d8:	af04      	add	r7, sp, #16
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <tcp_output_control_segment+0x22>
 800d3e8:	4b1c      	ldr	r3, [pc, #112]	; (800d45c <tcp_output_control_segment+0x88>)
 800d3ea:	f240 7287 	movw	r2, #1927	; 0x787
 800d3ee:	491c      	ldr	r1, [pc, #112]	; (800d460 <tcp_output_control_segment+0x8c>)
 800d3f0:	481c      	ldr	r0, [pc, #112]	; (800d464 <tcp_output_control_segment+0x90>)
 800d3f2:	f003 f94d 	bl	8010690 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7fe ff40 	bl	800c280 <tcp_route>
 800d400:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d102      	bne.n	800d40e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d408:	23fc      	movs	r3, #252	; 0xfc
 800d40a:	75fb      	strb	r3, [r7, #23]
 800d40c:	e01c      	b.n	800d448 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	7adb      	ldrb	r3, [r3, #11]
 800d418:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	7a9b      	ldrb	r3, [r3, #10]
 800d41e:	757b      	strb	r3, [r7, #21]
 800d420:	e003      	b.n	800d42a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d422:	23ff      	movs	r3, #255	; 0xff
 800d424:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d42a:	7dba      	ldrb	r2, [r7, #22]
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	9302      	str	r3, [sp, #8]
 800d430:	2306      	movs	r3, #6
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	7d7b      	ldrb	r3, [r7, #21]
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	4613      	mov	r3, r2
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	6879      	ldr	r1, [r7, #4]
 800d43e:	68b8      	ldr	r0, [r7, #8]
 800d440:	f001 ffa0 	bl	800f384 <ip4_output_if>
 800d444:	4603      	mov	r3, r0
 800d446:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d448:	68b8      	ldr	r0, [r7, #8]
 800d44a:	f7fa fddd 	bl	8008008 <pbuf_free>
  return err;
 800d44e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	08012f04 	.word	0x08012f04
 800d460:	0801365c 	.word	0x0801365c
 800d464:	08012f58 	.word	0x08012f58

0800d468 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d468:	b590      	push	{r4, r7, lr}
 800d46a:	b08b      	sub	sp, #44	; 0x2c
 800d46c:	af04      	add	r7, sp, #16
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d106      	bne.n	800d48a <tcp_rst+0x22>
 800d47c:	4b1f      	ldr	r3, [pc, #124]	; (800d4fc <tcp_rst+0x94>)
 800d47e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d482:	491f      	ldr	r1, [pc, #124]	; (800d500 <tcp_rst+0x98>)
 800d484:	481f      	ldr	r0, [pc, #124]	; (800d504 <tcp_rst+0x9c>)
 800d486:	f003 f903 	bl	8010690 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d106      	bne.n	800d49e <tcp_rst+0x36>
 800d490:	4b1a      	ldr	r3, [pc, #104]	; (800d4fc <tcp_rst+0x94>)
 800d492:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d496:	491c      	ldr	r1, [pc, #112]	; (800d508 <tcp_rst+0xa0>)
 800d498:	481a      	ldr	r0, [pc, #104]	; (800d504 <tcp_rst+0x9c>)
 800d49a:	f003 f8f9 	bl	8010690 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d49e:	2300      	movs	r3, #0
 800d4a0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d4a2:	f246 0308 	movw	r3, #24584	; 0x6008
 800d4a6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
 800d4aa:	b29c      	uxth	r4, r3
 800d4ac:	68b8      	ldr	r0, [r7, #8]
 800d4ae:	f7f9 fa14 	bl	80068da <lwip_htonl>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	8abb      	ldrh	r3, [r7, #20]
 800d4b6:	9303      	str	r3, [sp, #12]
 800d4b8:	2314      	movs	r3, #20
 800d4ba:	9302      	str	r3, [sp, #8]
 800d4bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d4be:	9301      	str	r3, [sp, #4]
 800d4c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7ff fe92 	bl	800d1f4 <tcp_output_alloc_header_common>
 800d4d0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d00c      	beq.n	800d4f2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	6939      	ldr	r1, [r7, #16]
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7ff ff38 	bl	800d354 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	6939      	ldr	r1, [r7, #16]
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff ff72 	bl	800d3d4 <tcp_output_control_segment>
 800d4f0:	e000      	b.n	800d4f4 <tcp_rst+0x8c>
    return;
 800d4f2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d4f4:	371c      	adds	r7, #28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd90      	pop	{r4, r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	08012f04 	.word	0x08012f04
 800d500:	08013688 	.word	0x08013688
 800d504:	08012f58 	.word	0x08012f58
 800d508:	080136a4 	.word	0x080136a4

0800d50c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d50c:	b590      	push	{r4, r7, lr}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <tcp_send_empty_ack+0x24>
 800d522:	4b28      	ldr	r3, [pc, #160]	; (800d5c4 <tcp_send_empty_ack+0xb8>)
 800d524:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d528:	4927      	ldr	r1, [pc, #156]	; (800d5c8 <tcp_send_empty_ack+0xbc>)
 800d52a:	4828      	ldr	r0, [pc, #160]	; (800d5cc <tcp_send_empty_ack+0xc0>)
 800d52c:	f003 f8b0 	bl	8010690 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d530:	7dfb      	ldrb	r3, [r7, #23]
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	b2db      	uxtb	r3, r3
 800d536:	f003 0304 	and.w	r3, r3, #4
 800d53a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d53c:	7d7b      	ldrb	r3, [r7, #21]
 800d53e:	b29c      	uxth	r4, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d544:	4618      	mov	r0, r3
 800d546:	f7f9 f9c8 	bl	80068da <lwip_htonl>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2200      	movs	r2, #0
 800d54e:	4621      	mov	r1, r4
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff fec1 	bl	800d2d8 <tcp_output_alloc_header>
 800d556:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d109      	bne.n	800d572 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8b5b      	ldrh	r3, [r3, #26]
 800d562:	f043 0303 	orr.w	r3, r3, #3
 800d566:	b29a      	uxth	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d56c:	f06f 0301 	mvn.w	r3, #1
 800d570:	e023      	b.n	800d5ba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d572:	7dbb      	ldrb	r3, [r7, #22]
 800d574:	7dfa      	ldrb	r2, [r7, #23]
 800d576:	6939      	ldr	r1, [r7, #16]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff feeb 	bl	800d354 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3304      	adds	r3, #4
 800d584:	6939      	ldr	r1, [r7, #16]
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff ff24 	bl	800d3d4 <tcp_output_control_segment>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	8b5b      	ldrh	r3, [r3, #26]
 800d59c:	f043 0303 	orr.w	r3, r3, #3
 800d5a0:	b29a      	uxth	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	835a      	strh	r2, [r3, #26]
 800d5a6:	e006      	b.n	800d5b6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8b5b      	ldrh	r3, [r3, #26]
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	371c      	adds	r7, #28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd90      	pop	{r4, r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	08012f04 	.word	0x08012f04
 800d5c8:	080136c0 	.word	0x080136c0
 800d5cc:	08012f58 	.word	0x08012f58

0800d5d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d5d0:	b590      	push	{r4, r7, lr}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d5d8:	2300      	movs	r3, #0
 800d5da:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <tcp_keepalive+0x20>
 800d5e2:	4b18      	ldr	r3, [pc, #96]	; (800d644 <tcp_keepalive+0x74>)
 800d5e4:	f640 0224 	movw	r2, #2084	; 0x824
 800d5e8:	4917      	ldr	r1, [pc, #92]	; (800d648 <tcp_keepalive+0x78>)
 800d5ea:	4818      	ldr	r0, [pc, #96]	; (800d64c <tcp_keepalive+0x7c>)
 800d5ec:	f003 f850 	bl	8010690 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	b29c      	uxth	r4, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7f9 f96d 	bl	80068da <lwip_htonl>
 800d600:	4603      	mov	r3, r0
 800d602:	2200      	movs	r2, #0
 800d604:	4621      	mov	r1, r4
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff fe66 	bl	800d2d8 <tcp_output_alloc_header>
 800d60c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d614:	f04f 33ff 	mov.w	r3, #4294967295
 800d618:	e010      	b.n	800d63c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	2200      	movs	r2, #0
 800d61e:	6939      	ldr	r1, [r7, #16]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff fe97 	bl	800d354 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3304      	adds	r3, #4
 800d62c:	6939      	ldr	r1, [r7, #16]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff fed0 	bl	800d3d4 <tcp_output_control_segment>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	371c      	adds	r7, #28
 800d640:	46bd      	mov	sp, r7
 800d642:	bd90      	pop	{r4, r7, pc}
 800d644:	08012f04 	.word	0x08012f04
 800d648:	080136e0 	.word	0x080136e0
 800d64c:	08012f58 	.word	0x08012f58

0800d650 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d650:	b590      	push	{r4, r7, lr}
 800d652:	b08b      	sub	sp, #44	; 0x2c
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d106      	bne.n	800d672 <tcp_zero_window_probe+0x22>
 800d664:	4b4c      	ldr	r3, [pc, #304]	; (800d798 <tcp_zero_window_probe+0x148>)
 800d666:	f640 024f 	movw	r2, #2127	; 0x84f
 800d66a:	494c      	ldr	r1, [pc, #304]	; (800d79c <tcp_zero_window_probe+0x14c>)
 800d66c:	484c      	ldr	r0, [pc, #304]	; (800d7a0 <tcp_zero_window_probe+0x150>)
 800d66e:	f003 f80f 	bl	8010690 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d676:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	e086      	b.n	800d790 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d688:	2bff      	cmp	r3, #255	; 0xff
 800d68a:	d007      	beq.n	800d69c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d692:	3301      	adds	r3, #1
 800d694:	b2da      	uxtb	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	899b      	ldrh	r3, [r3, #12]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7f9 f903 	bl	80068b0 <lwip_htons>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d005      	beq.n	800d6c2 <tcp_zero_window_probe+0x72>
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	891b      	ldrh	r3, [r3, #8]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d101      	bne.n	800d6c2 <tcp_zero_window_probe+0x72>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e000      	b.n	800d6c4 <tcp_zero_window_probe+0x74>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d6c6:	7ffb      	ldrb	r3, [r7, #31]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	bf0c      	ite	eq
 800d6cc:	2301      	moveq	r3, #1
 800d6ce:	2300      	movne	r3, #0
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6d8:	b299      	uxth	r1, r3
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	8bba      	ldrh	r2, [r7, #28]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fdf8 	bl	800d2d8 <tcp_output_alloc_header>
 800d6e8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d102      	bne.n	800d6f6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f4:	e04c      	b.n	800d790 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d6fc:	7ffb      	ldrb	r3, [r7, #31]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d011      	beq.n	800d726 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	899b      	ldrh	r3, [r3, #12]
 800d706:	b29b      	uxth	r3, r3
 800d708:	b21b      	sxth	r3, r3
 800d70a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d70e:	b21c      	sxth	r4, r3
 800d710:	2011      	movs	r0, #17
 800d712:	f7f9 f8cd 	bl	80068b0 <lwip_htons>
 800d716:	4603      	mov	r3, r0
 800d718:	b21b      	sxth	r3, r3
 800d71a:	4323      	orrs	r3, r4
 800d71c:	b21b      	sxth	r3, r3
 800d71e:	b29a      	uxth	r2, r3
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	819a      	strh	r2, [r3, #12]
 800d724:	e010      	b.n	800d748 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	3314      	adds	r3, #20
 800d72c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	6858      	ldr	r0, [r3, #4]
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	891a      	ldrh	r2, [r3, #8]
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	891b      	ldrh	r3, [r3, #8]
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	b29b      	uxth	r3, r3
 800d740:	2201      	movs	r2, #1
 800d742:	6939      	ldr	r1, [r7, #16]
 800d744:	f7fa fe56 	bl	80083f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	4618      	mov	r0, r3
 800d750:	f7f9 f8c3 	bl	80068da <lwip_htonl>
 800d754:	4603      	mov	r3, r0
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	da02      	bge.n	800d76c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d76c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d770:	2200      	movs	r2, #0
 800d772:	69b9      	ldr	r1, [r7, #24]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff fded 	bl	800d354 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3304      	adds	r3, #4
 800d780:	69b9      	ldr	r1, [r7, #24]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fe26 	bl	800d3d4 <tcp_output_control_segment>
 800d788:	4603      	mov	r3, r0
 800d78a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d78c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d790:	4618      	mov	r0, r3
 800d792:	372c      	adds	r7, #44	; 0x2c
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}
 800d798:	08012f04 	.word	0x08012f04
 800d79c:	080136fc 	.word	0x080136fc
 800d7a0:	08012f58 	.word	0x08012f58

0800d7a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d7ac:	f7fa ff10 	bl	80085d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <tcpip_tcp_timer+0x38>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d103      	bne.n	800d7c0 <tcpip_tcp_timer+0x1c>
 800d7b8:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <tcpip_tcp_timer+0x3c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d005      	beq.n	800d7cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4908      	ldr	r1, [pc, #32]	; (800d7e4 <tcpip_tcp_timer+0x40>)
 800d7c4:	20fa      	movs	r0, #250	; 0xfa
 800d7c6:	f000 f8f3 	bl	800d9b0 <sys_timeout>
 800d7ca:	e003      	b.n	800d7d4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d7cc:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <tcpip_tcp_timer+0x44>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	2000cbfc 	.word	0x2000cbfc
 800d7e0:	2000cc0c 	.word	0x2000cc0c
 800d7e4:	0800d7a5 	.word	0x0800d7a5
 800d7e8:	200040d8 	.word	0x200040d8

0800d7ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <tcp_timer_needed+0x30>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10f      	bne.n	800d818 <tcp_timer_needed+0x2c>
 800d7f8:	4b09      	ldr	r3, [pc, #36]	; (800d820 <tcp_timer_needed+0x34>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <tcp_timer_needed+0x1c>
 800d800:	4b08      	ldr	r3, [pc, #32]	; (800d824 <tcp_timer_needed+0x38>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d808:	4b04      	ldr	r3, [pc, #16]	; (800d81c <tcp_timer_needed+0x30>)
 800d80a:	2201      	movs	r2, #1
 800d80c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d80e:	2200      	movs	r2, #0
 800d810:	4905      	ldr	r1, [pc, #20]	; (800d828 <tcp_timer_needed+0x3c>)
 800d812:	20fa      	movs	r0, #250	; 0xfa
 800d814:	f000 f8cc 	bl	800d9b0 <sys_timeout>
  }
}
 800d818:	bf00      	nop
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	200040d8 	.word	0x200040d8
 800d820:	2000cbfc 	.word	0x2000cbfc
 800d824:	2000cc0c 	.word	0x2000cc0c
 800d828:	0800d7a5 	.word	0x0800d7a5

0800d82c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d838:	200a      	movs	r0, #10
 800d83a:	f7f9 fcef 	bl	800721c <memp_malloc>
 800d83e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d151      	bne.n	800d8f0 <sys_timeout_abs+0xc4>
 800d84c:	4b2a      	ldr	r3, [pc, #168]	; (800d8f8 <sys_timeout_abs+0xcc>)
 800d84e:	22be      	movs	r2, #190	; 0xbe
 800d850:	492a      	ldr	r1, [pc, #168]	; (800d8fc <sys_timeout_abs+0xd0>)
 800d852:	482b      	ldr	r0, [pc, #172]	; (800d900 <sys_timeout_abs+0xd4>)
 800d854:	f002 ff1c 	bl	8010690 <iprintf>
    return;
 800d858:	e04a      	b.n	800d8f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2200      	movs	r2, #0
 800d85e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d872:	4b24      	ldr	r3, [pc, #144]	; (800d904 <sys_timeout_abs+0xd8>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d103      	bne.n	800d882 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d87a:	4a22      	ldr	r2, [pc, #136]	; (800d904 <sys_timeout_abs+0xd8>)
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	6013      	str	r3, [r2, #0]
    return;
 800d880:	e037      	b.n	800d8f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	4b1f      	ldr	r3, [pc, #124]	; (800d904 <sys_timeout_abs+0xd8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	0fdb      	lsrs	r3, r3, #31
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d007      	beq.n	800d8aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d89a:	4b1a      	ldr	r3, [pc, #104]	; (800d904 <sys_timeout_abs+0xd8>)
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d8a2:	4a18      	ldr	r2, [pc, #96]	; (800d904 <sys_timeout_abs+0xd8>)
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	e023      	b.n	800d8f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8aa:	4b16      	ldr	r3, [pc, #88]	; (800d904 <sys_timeout_abs+0xd8>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	e01a      	b.n	800d8e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00b      	beq.n	800d8d2 <sys_timeout_abs+0xa6>
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	0fdb      	lsrs	r3, r3, #31
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	601a      	str	r2, [r3, #0]
        break;
 800d8e0:	e007      	b.n	800d8f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1e1      	bne.n	800d8b2 <sys_timeout_abs+0x86>
 800d8ee:	e000      	b.n	800d8f2 <sys_timeout_abs+0xc6>
    return;
 800d8f0:	bf00      	nop
      }
    }
  }
}
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	08013720 	.word	0x08013720
 800d8fc:	08013754 	.word	0x08013754
 800d900:	08013794 	.word	0x08013794
 800d904:	200040d0 	.word	0x200040d0

0800d908 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4798      	blx	r3

  now = sys_now();
 800d91a:	f7f5 fe1f 	bl	800355c <sys_now>
 800d91e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <lwip_cyclic_timer+0x5c>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4413      	add	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	0fdb      	lsrs	r3, r3, #31
 800d934:	f003 0301 	and.w	r3, r3, #1
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d009      	beq.n	800d952 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	4413      	add	r3, r2
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	4907      	ldr	r1, [pc, #28]	; (800d968 <lwip_cyclic_timer+0x60>)
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff ff6e 	bl	800d82c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d950:	e004      	b.n	800d95c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	4904      	ldr	r1, [pc, #16]	; (800d968 <lwip_cyclic_timer+0x60>)
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff ff68 	bl	800d82c <sys_timeout_abs>
}
 800d95c:	bf00      	nop
 800d95e:	3718      	adds	r7, #24
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	200040d4 	.word	0x200040d4
 800d968:	0800d909 	.word	0x0800d909

0800d96c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d972:	2301      	movs	r3, #1
 800d974:	607b      	str	r3, [r7, #4]
 800d976:	e00e      	b.n	800d996 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d978:	4a0b      	ldr	r2, [pc, #44]	; (800d9a8 <sys_timeouts_init+0x3c>)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	4a08      	ldr	r2, [pc, #32]	; (800d9a8 <sys_timeouts_init+0x3c>)
 800d986:	4413      	add	r3, r2
 800d988:	461a      	mov	r2, r3
 800d98a:	4908      	ldr	r1, [pc, #32]	; (800d9ac <sys_timeouts_init+0x40>)
 800d98c:	f000 f810 	bl	800d9b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3301      	adds	r3, #1
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d9ed      	bls.n	800d978 <sys_timeouts_init+0xc>
  }
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	08014338 	.word	0x08014338
 800d9ac:	0800d909 	.word	0x0800d909

0800d9b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9c2:	d306      	bcc.n	800d9d2 <sys_timeout+0x22>
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <sys_timeout+0x40>)
 800d9c6:	f240 1229 	movw	r2, #297	; 0x129
 800d9ca:	490a      	ldr	r1, [pc, #40]	; (800d9f4 <sys_timeout+0x44>)
 800d9cc:	480a      	ldr	r0, [pc, #40]	; (800d9f8 <sys_timeout+0x48>)
 800d9ce:	f002 fe5f 	bl	8010690 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d9d2:	f7f5 fdc3 	bl	800355c <sys_now>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4413      	add	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	68b9      	ldr	r1, [r7, #8]
 800d9e2:	6978      	ldr	r0, [r7, #20]
 800d9e4:	f7ff ff22 	bl	800d82c <sys_timeout_abs>
#endif
}
 800d9e8:	bf00      	nop
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08013720 	.word	0x08013720
 800d9f4:	080137bc 	.word	0x080137bc
 800d9f8:	08013794 	.word	0x08013794

0800d9fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800da02:	f7f5 fdab 	bl	800355c <sys_now>
 800da06:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800da08:	4b17      	ldr	r3, [pc, #92]	; (800da68 <sys_check_timeouts+0x6c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d022      	beq.n	800da5a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	0fdb      	lsrs	r3, r3, #31
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d11a      	bne.n	800da5e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a0e      	ldr	r2, [pc, #56]	; (800da68 <sys_check_timeouts+0x6c>)
 800da2e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4a0a      	ldr	r2, [pc, #40]	; (800da6c <sys_check_timeouts+0x70>)
 800da42:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800da44:	68b9      	ldr	r1, [r7, #8]
 800da46:	200a      	movs	r0, #10
 800da48:	f7f9 fc3a 	bl	80072c0 <memp_free>
    if (handler != NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0da      	beq.n	800da08 <sys_check_timeouts+0xc>
      handler(arg);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6838      	ldr	r0, [r7, #0]
 800da56:	4798      	blx	r3
  do {
 800da58:	e7d6      	b.n	800da08 <sys_check_timeouts+0xc>
      return;
 800da5a:	bf00      	nop
 800da5c:	e000      	b.n	800da60 <sys_check_timeouts+0x64>
      return;
 800da5e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	200040d0 	.word	0x200040d0
 800da6c:	200040d4 	.word	0x200040d4

0800da70 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800da76:	4b16      	ldr	r3, [pc, #88]	; (800dad0 <sys_timeouts_sleeptime+0x60>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d102      	bne.n	800da84 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800da7e:	f04f 33ff 	mov.w	r3, #4294967295
 800da82:	e020      	b.n	800dac6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800da84:	f7f5 fd6a 	bl	800355c <sys_now>
 800da88:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <sys_timeouts_sleeptime+0x60>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	0fdb      	lsrs	r3, r3, #31
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <sys_timeouts_sleeptime+0x34>
    return 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	e010      	b.n	800dac6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800daa4:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <sys_timeouts_sleeptime+0x60>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685a      	ldr	r2, [r3, #4]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	da06      	bge.n	800dac4 <sys_timeouts_sleeptime+0x54>
 800dab6:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <sys_timeouts_sleeptime+0x64>)
 800dab8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800dabc:	4906      	ldr	r1, [pc, #24]	; (800dad8 <sys_timeouts_sleeptime+0x68>)
 800dabe:	4807      	ldr	r0, [pc, #28]	; (800dadc <sys_timeouts_sleeptime+0x6c>)
 800dac0:	f002 fde6 	bl	8010690 <iprintf>
    return ret;
 800dac4:	683b      	ldr	r3, [r7, #0]
  }
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	200040d0 	.word	0x200040d0
 800dad4:	08013720 	.word	0x08013720
 800dad8:	080137f4 	.word	0x080137f4
 800dadc:	08013794 	.word	0x08013794

0800dae0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dae4:	f002 fdec 	bl	80106c0 <rand>
 800dae8:	4603      	mov	r3, r0
 800daea:	b29b      	uxth	r3, r3
 800daec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	4b01      	ldr	r3, [pc, #4]	; (800db00 <udp_init+0x20>)
 800dafa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dafc:	bf00      	nop
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20000018 	.word	0x20000018

0800db04 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	4613      	mov	r3, r2
 800db10:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d105      	bne.n	800db24 <udp_input_local_match+0x20>
 800db18:	4b27      	ldr	r3, [pc, #156]	; (800dbb8 <udp_input_local_match+0xb4>)
 800db1a:	2287      	movs	r2, #135	; 0x87
 800db1c:	4927      	ldr	r1, [pc, #156]	; (800dbbc <udp_input_local_match+0xb8>)
 800db1e:	4828      	ldr	r0, [pc, #160]	; (800dbc0 <udp_input_local_match+0xbc>)
 800db20:	f002 fdb6 	bl	8010690 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d105      	bne.n	800db36 <udp_input_local_match+0x32>
 800db2a:	4b23      	ldr	r3, [pc, #140]	; (800dbb8 <udp_input_local_match+0xb4>)
 800db2c:	2288      	movs	r2, #136	; 0x88
 800db2e:	4925      	ldr	r1, [pc, #148]	; (800dbc4 <udp_input_local_match+0xc0>)
 800db30:	4823      	ldr	r0, [pc, #140]	; (800dbc0 <udp_input_local_match+0xbc>)
 800db32:	f002 fdad 	bl	8010690 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	7a1b      	ldrb	r3, [r3, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	7a1a      	ldrb	r2, [r3, #8]
 800db42:	4b21      	ldr	r3, [pc, #132]	; (800dbc8 <udp_input_local_match+0xc4>)
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db4a:	3301      	adds	r3, #1
 800db4c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db4e:	429a      	cmp	r2, r3
 800db50:	d001      	beq.n	800db56 <udp_input_local_match+0x52>
    return 0;
 800db52:	2300      	movs	r3, #0
 800db54:	e02b      	b.n	800dbae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d018      	beq.n	800db8e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d013      	beq.n	800db8a <udp_input_local_match+0x86>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00f      	beq.n	800db8a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db6a:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <udp_input_local_match+0xc4>)
 800db6c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db72:	d00a      	beq.n	800db8a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	4b13      	ldr	r3, [pc, #76]	; (800dbc8 <udp_input_local_match+0xc4>)
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	405a      	eors	r2, r3
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	3308      	adds	r3, #8
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db86:	2b00      	cmp	r3, #0
 800db88:	d110      	bne.n	800dbac <udp_input_local_match+0xa8>
          return 1;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e00f      	b.n	800dbae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d009      	beq.n	800dba8 <udp_input_local_match+0xa4>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <udp_input_local_match+0xa4>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <udp_input_local_match+0xc4>)
 800dba2:	695b      	ldr	r3, [r3, #20]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d101      	bne.n	800dbac <udp_input_local_match+0xa8>
        return 1;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	08013808 	.word	0x08013808
 800dbbc:	08013838 	.word	0x08013838
 800dbc0:	0801385c 	.word	0x0801385c
 800dbc4:	08013884 	.word	0x08013884
 800dbc8:	20007328 	.word	0x20007328

0800dbcc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dbcc:	b590      	push	{r4, r7, lr}
 800dbce:	b08d      	sub	sp, #52	; 0x34
 800dbd0:	af02      	add	r7, sp, #8
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d105      	bne.n	800dbec <udp_input+0x20>
 800dbe0:	4b7c      	ldr	r3, [pc, #496]	; (800ddd4 <udp_input+0x208>)
 800dbe2:	22cf      	movs	r2, #207	; 0xcf
 800dbe4:	497c      	ldr	r1, [pc, #496]	; (800ddd8 <udp_input+0x20c>)
 800dbe6:	487d      	ldr	r0, [pc, #500]	; (800dddc <udp_input+0x210>)
 800dbe8:	f002 fd52 	bl	8010690 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <udp_input+0x32>
 800dbf2:	4b78      	ldr	r3, [pc, #480]	; (800ddd4 <udp_input+0x208>)
 800dbf4:	22d0      	movs	r2, #208	; 0xd0
 800dbf6:	497a      	ldr	r1, [pc, #488]	; (800dde0 <udp_input+0x214>)
 800dbf8:	4878      	ldr	r0, [pc, #480]	; (800dddc <udp_input+0x210>)
 800dbfa:	f002 fd49 	bl	8010690 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	895b      	ldrh	r3, [r3, #10]
 800dc02:	2b07      	cmp	r3, #7
 800dc04:	d803      	bhi.n	800dc0e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7fa f9fe 	bl	8008008 <pbuf_free>
    goto end;
 800dc0c:	e0de      	b.n	800ddcc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dc14:	4b73      	ldr	r3, [pc, #460]	; (800dde4 <udp_input+0x218>)
 800dc16:	695b      	ldr	r3, [r3, #20]
 800dc18:	4a72      	ldr	r2, [pc, #456]	; (800dde4 <udp_input+0x218>)
 800dc1a:	6812      	ldr	r2, [r2, #0]
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 fc88 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800dc24:	4603      	mov	r3, r0
 800dc26:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f8 fe3e 	bl	80068b0 <lwip_htons>
 800dc34:	4603      	mov	r3, r0
 800dc36:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	885b      	ldrh	r3, [r3, #2]
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f8 fe36 	bl	80068b0 <lwip_htons>
 800dc44:	4603      	mov	r3, r0
 800dc46:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dc50:	2300      	movs	r3, #0
 800dc52:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc54:	4b64      	ldr	r3, [pc, #400]	; (800dde8 <udp_input+0x21c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
 800dc5a:	e054      	b.n	800dd06 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	8a5b      	ldrh	r3, [r3, #18]
 800dc60:	89fa      	ldrh	r2, [r7, #14]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d14a      	bne.n	800dcfc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dc66:	7cfb      	ldrb	r3, [r7, #19]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc6e:	f7ff ff49 	bl	800db04 <udp_input_local_match>
 800dc72:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d041      	beq.n	800dcfc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	7c1b      	ldrb	r3, [r3, #16]
 800dc7c:	f003 0304 	and.w	r3, r3, #4
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d11d      	bne.n	800dcc0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	61fb      	str	r3, [r7, #28]
 800dc8e:	e017      	b.n	800dcc0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800dc90:	7cfb      	ldrb	r3, [r7, #19]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d014      	beq.n	800dcc0 <udp_input+0xf4>
 800dc96:	4b53      	ldr	r3, [pc, #332]	; (800dde4 <udp_input+0x218>)
 800dc98:	695b      	ldr	r3, [r3, #20]
 800dc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9e:	d10f      	bne.n	800dcc0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	3304      	adds	r3, #4
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d008      	beq.n	800dcc0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d101      	bne.n	800dcc0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	8a9b      	ldrh	r3, [r3, #20]
 800dcc4:	8a3a      	ldrh	r2, [r7, #16]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d118      	bne.n	800dcfc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d005      	beq.n	800dcde <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	4b43      	ldr	r3, [pc, #268]	; (800dde4 <udp_input+0x218>)
 800dcd8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d10e      	bne.n	800dcfc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d014      	beq.n	800dd0e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	68da      	ldr	r2, [r3, #12]
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800dcec:	4b3e      	ldr	r3, [pc, #248]	; (800dde8 <udp_input+0x21c>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dcf4:	4a3c      	ldr	r2, [pc, #240]	; (800dde8 <udp_input+0x21c>)
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dcfa:	e008      	b.n	800dd0e <udp_input+0x142>
      }
    }

    prev = pcb;
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	627b      	str	r3, [r7, #36]	; 0x24
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1a7      	bne.n	800dc5c <udp_input+0x90>
 800dd0c:	e000      	b.n	800dd10 <udp_input+0x144>
        break;
 800dd0e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <udp_input+0x14e>
    pcb = uncon_pcb;
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <udp_input+0x15a>
    for_us = 1;
 800dd20:	2301      	movs	r3, #1
 800dd22:	76fb      	strb	r3, [r7, #27]
 800dd24:	e00a      	b.n	800dd3c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	4b2d      	ldr	r3, [pc, #180]	; (800dde4 <udp_input+0x218>)
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	bf0c      	ite	eq
 800dd34:	2301      	moveq	r3, #1
 800dd36:	2300      	movne	r3, #0
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dd3c:	7efb      	ldrb	r3, [r7, #27]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d041      	beq.n	800ddc6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dd42:	2108      	movs	r1, #8
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7fa f8d9 	bl	8007efc <pbuf_remove_header>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dd50:	4b20      	ldr	r3, [pc, #128]	; (800ddd4 <udp_input+0x208>)
 800dd52:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dd56:	4925      	ldr	r1, [pc, #148]	; (800ddec <udp_input+0x220>)
 800dd58:	4820      	ldr	r0, [pc, #128]	; (800dddc <udp_input+0x210>)
 800dd5a:	f002 fc99 	bl	8010690 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7fa f952 	bl	8008008 <pbuf_free>
      goto end;
 800dd64:	e032      	b.n	800ddcc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d012      	beq.n	800dd92 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	699b      	ldr	r3, [r3, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00a      	beq.n	800dd8a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	699c      	ldr	r4, [r3, #24]
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	69d8      	ldr	r0, [r3, #28]
 800dd7c:	8a3b      	ldrh	r3, [r7, #16]
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	4b1b      	ldr	r3, [pc, #108]	; (800ddf0 <udp_input+0x224>)
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd86:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dd88:	e021      	b.n	800ddce <udp_input+0x202>
        pbuf_free(p);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7fa f93c 	bl	8008008 <pbuf_free>
        goto end;
 800dd90:	e01c      	b.n	800ddcc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd92:	7cfb      	ldrb	r3, [r7, #19]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d112      	bne.n	800ddbe <udp_input+0x1f2>
 800dd98:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <udp_input+0x218>)
 800dd9a:	695b      	ldr	r3, [r3, #20]
 800dd9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dda0:	2be0      	cmp	r3, #224	; 0xe0
 800dda2:	d00c      	beq.n	800ddbe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dda4:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <udp_input+0x218>)
 800dda6:	899b      	ldrh	r3, [r3, #12]
 800dda8:	3308      	adds	r3, #8
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	b21b      	sxth	r3, r3
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7fa f916 	bl	8007fe2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ddb6:	2103      	movs	r1, #3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f001 f89b 	bl	800eef4 <icmp_dest_unreach>
      pbuf_free(p);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f7fa f922 	bl	8008008 <pbuf_free>
  return;
 800ddc4:	e003      	b.n	800ddce <udp_input+0x202>
    pbuf_free(p);
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7fa f91e 	bl	8008008 <pbuf_free>
  return;
 800ddcc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ddce:	372c      	adds	r7, #44	; 0x2c
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd90      	pop	{r4, r7, pc}
 800ddd4:	08013808 	.word	0x08013808
 800ddd8:	080138ac 	.word	0x080138ac
 800dddc:	0801385c 	.word	0x0801385c
 800dde0:	080138c4 	.word	0x080138c4
 800dde4:	20007328 	.word	0x20007328
 800dde8:	2000cc14 	.word	0x2000cc14
 800ddec:	080138e0 	.word	0x080138e0
 800ddf0:	20007338 	.word	0x20007338

0800ddf4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01e      	beq.n	800de42 <udp_netif_ip_addr_changed+0x4e>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d01a      	beq.n	800de42 <udp_netif_ip_addr_changed+0x4e>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d017      	beq.n	800de42 <udp_netif_ip_addr_changed+0x4e>
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d013      	beq.n	800de42 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800de1a:	4b0d      	ldr	r3, [pc, #52]	; (800de50 <udp_netif_ip_addr_changed+0x5c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e00c      	b.n	800de3c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d103      	bne.n	800de36 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1ef      	bne.n	800de22 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	2000cc14 	.word	0x2000cc14

0800de54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800de5c:	4915      	ldr	r1, [pc, #84]	; (800deb4 <etharp_free_entry+0x60>)
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	4613      	mov	r3, r2
 800de62:	005b      	lsls	r3, r3, #1
 800de64:	4413      	add	r3, r2
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	440b      	add	r3, r1
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d013      	beq.n	800de98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800de70:	4910      	ldr	r1, [pc, #64]	; (800deb4 <etharp_free_entry+0x60>)
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	440b      	add	r3, r1
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f7fa f8c1 	bl	8008008 <pbuf_free>
    arp_table[i].q = NULL;
 800de86:	490b      	ldr	r1, [pc, #44]	; (800deb4 <etharp_free_entry+0x60>)
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	440b      	add	r3, r1
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800de98:	4906      	ldr	r1, [pc, #24]	; (800deb4 <etharp_free_entry+0x60>)
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	4613      	mov	r3, r2
 800de9e:	005b      	lsls	r3, r3, #1
 800dea0:	4413      	add	r3, r2
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	440b      	add	r3, r1
 800dea6:	3314      	adds	r3, #20
 800dea8:	2200      	movs	r2, #0
 800deaa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	200040dc 	.word	0x200040dc

0800deb8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800debe:	2300      	movs	r3, #0
 800dec0:	607b      	str	r3, [r7, #4]
 800dec2:	e096      	b.n	800dff2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dec4:	494f      	ldr	r1, [pc, #316]	; (800e004 <etharp_tmr+0x14c>)
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	4613      	mov	r3, r2
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	4413      	add	r3, r2
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	440b      	add	r3, r1
 800ded2:	3314      	adds	r3, #20
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ded8:	78fb      	ldrb	r3, [r7, #3]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	f000 8086 	beq.w	800dfec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dee0:	4948      	ldr	r1, [pc, #288]	; (800e004 <etharp_tmr+0x14c>)
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	4613      	mov	r3, r2
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	4413      	add	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	440b      	add	r3, r1
 800deee:	3312      	adds	r3, #18
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	3301      	adds	r3, #1
 800def4:	b298      	uxth	r0, r3
 800def6:	4943      	ldr	r1, [pc, #268]	; (800e004 <etharp_tmr+0x14c>)
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	4613      	mov	r3, r2
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4413      	add	r3, r2
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	440b      	add	r3, r1
 800df04:	3312      	adds	r3, #18
 800df06:	4602      	mov	r2, r0
 800df08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800df0a:	493e      	ldr	r1, [pc, #248]	; (800e004 <etharp_tmr+0x14c>)
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	4613      	mov	r3, r2
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	4413      	add	r3, r2
 800df14:	00db      	lsls	r3, r3, #3
 800df16:	440b      	add	r3, r1
 800df18:	3312      	adds	r3, #18
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800df20:	d215      	bcs.n	800df4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800df22:	4938      	ldr	r1, [pc, #224]	; (800e004 <etharp_tmr+0x14c>)
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	4613      	mov	r3, r2
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	4413      	add	r3, r2
 800df2c:	00db      	lsls	r3, r3, #3
 800df2e:	440b      	add	r3, r1
 800df30:	3314      	adds	r3, #20
 800df32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800df34:	2b01      	cmp	r3, #1
 800df36:	d10e      	bne.n	800df56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800df38:	4932      	ldr	r1, [pc, #200]	; (800e004 <etharp_tmr+0x14c>)
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	4613      	mov	r3, r2
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	4413      	add	r3, r2
 800df42:	00db      	lsls	r3, r3, #3
 800df44:	440b      	add	r3, r1
 800df46:	3312      	adds	r3, #18
 800df48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d903      	bls.n	800df56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff ff80 	bl	800de54 <etharp_free_entry>
 800df54:	e04a      	b.n	800dfec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800df56:	492b      	ldr	r1, [pc, #172]	; (800e004 <etharp_tmr+0x14c>)
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	4413      	add	r3, r2
 800df60:	00db      	lsls	r3, r3, #3
 800df62:	440b      	add	r3, r1
 800df64:	3314      	adds	r3, #20
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d10a      	bne.n	800df82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800df6c:	4925      	ldr	r1, [pc, #148]	; (800e004 <etharp_tmr+0x14c>)
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	4413      	add	r3, r2
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	440b      	add	r3, r1
 800df7a:	3314      	adds	r3, #20
 800df7c:	2204      	movs	r2, #4
 800df7e:	701a      	strb	r2, [r3, #0]
 800df80:	e034      	b.n	800dfec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800df82:	4920      	ldr	r1, [pc, #128]	; (800e004 <etharp_tmr+0x14c>)
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	4613      	mov	r3, r2
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	4413      	add	r3, r2
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	440b      	add	r3, r1
 800df90:	3314      	adds	r3, #20
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b04      	cmp	r3, #4
 800df96:	d10a      	bne.n	800dfae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800df98:	491a      	ldr	r1, [pc, #104]	; (800e004 <etharp_tmr+0x14c>)
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	4613      	mov	r3, r2
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	4413      	add	r3, r2
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	440b      	add	r3, r1
 800dfa6:	3314      	adds	r3, #20
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	e01e      	b.n	800dfec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dfae:	4915      	ldr	r1, [pc, #84]	; (800e004 <etharp_tmr+0x14c>)
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	4413      	add	r3, r2
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	440b      	add	r3, r1
 800dfbc:	3314      	adds	r3, #20
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d113      	bne.n	800dfec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dfc4:	490f      	ldr	r1, [pc, #60]	; (800e004 <etharp_tmr+0x14c>)
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	440b      	add	r3, r1
 800dfd2:	3308      	adds	r3, #8
 800dfd4:	6818      	ldr	r0, [r3, #0]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	4413      	add	r3, r2
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	4a08      	ldr	r2, [pc, #32]	; (800e004 <etharp_tmr+0x14c>)
 800dfe2:	4413      	add	r3, r2
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f000 fe6e 	bl	800ecc8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	3301      	adds	r3, #1
 800dff0:	607b      	str	r3, [r7, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b09      	cmp	r3, #9
 800dff6:	f77f af65 	ble.w	800dec4 <etharp_tmr+0xc>
      }
    }
  }
}
 800dffa:	bf00      	nop
 800dffc:	bf00      	nop
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	200040dc 	.word	0x200040dc

0800e008 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	; 0x28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	460b      	mov	r3, r1
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e016:	230a      	movs	r3, #10
 800e018:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e01a:	230a      	movs	r3, #10
 800e01c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e01e:	230a      	movs	r3, #10
 800e020:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e026:	230a      	movs	r3, #10
 800e028:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	83bb      	strh	r3, [r7, #28]
 800e02e:	2300      	movs	r3, #0
 800e030:	837b      	strh	r3, [r7, #26]
 800e032:	2300      	movs	r3, #0
 800e034:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e036:	2300      	movs	r3, #0
 800e038:	843b      	strh	r3, [r7, #32]
 800e03a:	e0ae      	b.n	800e19a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e03c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e040:	49a6      	ldr	r1, [pc, #664]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e042:	4613      	mov	r3, r2
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	4413      	add	r3, r2
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	440b      	add	r3, r1
 800e04c:	3314      	adds	r3, #20
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e052:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e056:	2b0a      	cmp	r3, #10
 800e058:	d105      	bne.n	800e066 <etharp_find_entry+0x5e>
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d102      	bne.n	800e066 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e060:	8c3b      	ldrh	r3, [r7, #32]
 800e062:	847b      	strh	r3, [r7, #34]	; 0x22
 800e064:	e095      	b.n	800e192 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 8092 	beq.w	800e192 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e06e:	7dfb      	ldrb	r3, [r7, #23]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d009      	beq.n	800e088 <etharp_find_entry+0x80>
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d806      	bhi.n	800e088 <etharp_find_entry+0x80>
 800e07a:	4b99      	ldr	r3, [pc, #612]	; (800e2e0 <etharp_find_entry+0x2d8>)
 800e07c:	f240 1223 	movw	r2, #291	; 0x123
 800e080:	4998      	ldr	r1, [pc, #608]	; (800e2e4 <etharp_find_entry+0x2dc>)
 800e082:	4899      	ldr	r0, [pc, #612]	; (800e2e8 <etharp_find_entry+0x2e0>)
 800e084:	f002 fb04 	bl	8010690 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d020      	beq.n	800e0d0 <etharp_find_entry+0xc8>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6819      	ldr	r1, [r3, #0]
 800e092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e096:	4891      	ldr	r0, [pc, #580]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	4403      	add	r3, r0
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4299      	cmp	r1, r3
 800e0a8:	d112      	bne.n	800e0d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00c      	beq.n	800e0ca <etharp_find_entry+0xc2>
 800e0b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0b4:	4989      	ldr	r1, [pc, #548]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	4413      	add	r3, r2
 800e0bc:	00db      	lsls	r3, r3, #3
 800e0be:	440b      	add	r3, r1
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d102      	bne.n	800e0d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e0ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e0ce:	e100      	b.n	800e2d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d140      	bne.n	800e158 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e0d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0da:	4980      	ldr	r1, [pc, #512]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e0dc:	4613      	mov	r3, r2
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	4413      	add	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	440b      	add	r3, r1
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01a      	beq.n	800e122 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e0ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0f0:	497a      	ldr	r1, [pc, #488]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	4413      	add	r3, r2
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	440b      	add	r3, r1
 800e0fc:	3312      	adds	r3, #18
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	8bba      	ldrh	r2, [r7, #28]
 800e102:	429a      	cmp	r2, r3
 800e104:	d845      	bhi.n	800e192 <etharp_find_entry+0x18a>
            old_queue = i;
 800e106:	8c3b      	ldrh	r3, [r7, #32]
 800e108:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e10a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e10e:	4973      	ldr	r1, [pc, #460]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e110:	4613      	mov	r3, r2
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	4413      	add	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	440b      	add	r3, r1
 800e11a:	3312      	adds	r3, #18
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	83bb      	strh	r3, [r7, #28]
 800e120:	e037      	b.n	800e192 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e126:	496d      	ldr	r1, [pc, #436]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e128:	4613      	mov	r3, r2
 800e12a:	005b      	lsls	r3, r3, #1
 800e12c:	4413      	add	r3, r2
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	440b      	add	r3, r1
 800e132:	3312      	adds	r3, #18
 800e134:	881b      	ldrh	r3, [r3, #0]
 800e136:	8b7a      	ldrh	r2, [r7, #26]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d82a      	bhi.n	800e192 <etharp_find_entry+0x18a>
            old_pending = i;
 800e13c:	8c3b      	ldrh	r3, [r7, #32]
 800e13e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e144:	4965      	ldr	r1, [pc, #404]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e146:	4613      	mov	r3, r2
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	00db      	lsls	r3, r3, #3
 800e14e:	440b      	add	r3, r1
 800e150:	3312      	adds	r3, #18
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	837b      	strh	r3, [r7, #26]
 800e156:	e01c      	b.n	800e192 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e158:	7dfb      	ldrb	r3, [r7, #23]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d919      	bls.n	800e192 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e15e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e162:	495e      	ldr	r1, [pc, #376]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	00db      	lsls	r3, r3, #3
 800e16c:	440b      	add	r3, r1
 800e16e:	3312      	adds	r3, #18
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	8b3a      	ldrh	r2, [r7, #24]
 800e174:	429a      	cmp	r2, r3
 800e176:	d80c      	bhi.n	800e192 <etharp_find_entry+0x18a>
            old_stable = i;
 800e178:	8c3b      	ldrh	r3, [r7, #32]
 800e17a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e17c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e180:	4956      	ldr	r1, [pc, #344]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e182:	4613      	mov	r3, r2
 800e184:	005b      	lsls	r3, r3, #1
 800e186:	4413      	add	r3, r2
 800e188:	00db      	lsls	r3, r3, #3
 800e18a:	440b      	add	r3, r1
 800e18c:	3312      	adds	r3, #18
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e192:	8c3b      	ldrh	r3, [r7, #32]
 800e194:	3301      	adds	r3, #1
 800e196:	b29b      	uxth	r3, r3
 800e198:	843b      	strh	r3, [r7, #32]
 800e19a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e19e:	2b09      	cmp	r3, #9
 800e1a0:	f77f af4c 	ble.w	800e03c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e1a4:	7afb      	ldrb	r3, [r7, #11]
 800e1a6:	f003 0302 	and.w	r3, r3, #2
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d108      	bne.n	800e1c0 <etharp_find_entry+0x1b8>
 800e1ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e1b2:	2b0a      	cmp	r3, #10
 800e1b4:	d107      	bne.n	800e1c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e1b6:	7afb      	ldrb	r3, [r7, #11]
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c4:	e085      	b.n	800e2d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e1c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e1ca:	2b09      	cmp	r3, #9
 800e1cc:	dc02      	bgt.n	800e1d4 <etharp_find_entry+0x1cc>
    i = empty;
 800e1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1d0:	843b      	strh	r3, [r7, #32]
 800e1d2:	e039      	b.n	800e248 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e1d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e1d8:	2b09      	cmp	r3, #9
 800e1da:	dc14      	bgt.n	800e206 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e1e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1e4:	493d      	ldr	r1, [pc, #244]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	4413      	add	r3, r2
 800e1ec:	00db      	lsls	r3, r3, #3
 800e1ee:	440b      	add	r3, r1
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d018      	beq.n	800e228 <etharp_find_entry+0x220>
 800e1f6:	4b3a      	ldr	r3, [pc, #232]	; (800e2e0 <etharp_find_entry+0x2d8>)
 800e1f8:	f240 126d 	movw	r2, #365	; 0x16d
 800e1fc:	493b      	ldr	r1, [pc, #236]	; (800e2ec <etharp_find_entry+0x2e4>)
 800e1fe:	483a      	ldr	r0, [pc, #232]	; (800e2e8 <etharp_find_entry+0x2e0>)
 800e200:	f002 fa46 	bl	8010690 <iprintf>
 800e204:	e010      	b.n	800e228 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e206:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e20a:	2b09      	cmp	r3, #9
 800e20c:	dc02      	bgt.n	800e214 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e20e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e210:	843b      	strh	r3, [r7, #32]
 800e212:	e009      	b.n	800e228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e214:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e218:	2b09      	cmp	r3, #9
 800e21a:	dc02      	bgt.n	800e222 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e21c:	8bfb      	ldrh	r3, [r7, #30]
 800e21e:	843b      	strh	r3, [r7, #32]
 800e220:	e002      	b.n	800e228 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e222:	f04f 33ff 	mov.w	r3, #4294967295
 800e226:	e054      	b.n	800e2d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e228:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e22c:	2b09      	cmp	r3, #9
 800e22e:	dd06      	ble.n	800e23e <etharp_find_entry+0x236>
 800e230:	4b2b      	ldr	r3, [pc, #172]	; (800e2e0 <etharp_find_entry+0x2d8>)
 800e232:	f240 127f 	movw	r2, #383	; 0x17f
 800e236:	492e      	ldr	r1, [pc, #184]	; (800e2f0 <etharp_find_entry+0x2e8>)
 800e238:	482b      	ldr	r0, [pc, #172]	; (800e2e8 <etharp_find_entry+0x2e0>)
 800e23a:	f002 fa29 	bl	8010690 <iprintf>
    etharp_free_entry(i);
 800e23e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fe06 	bl	800de54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e248:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e24c:	2b09      	cmp	r3, #9
 800e24e:	dd06      	ble.n	800e25e <etharp_find_entry+0x256>
 800e250:	4b23      	ldr	r3, [pc, #140]	; (800e2e0 <etharp_find_entry+0x2d8>)
 800e252:	f240 1283 	movw	r2, #387	; 0x183
 800e256:	4926      	ldr	r1, [pc, #152]	; (800e2f0 <etharp_find_entry+0x2e8>)
 800e258:	4823      	ldr	r0, [pc, #140]	; (800e2e8 <etharp_find_entry+0x2e0>)
 800e25a:	f002 fa19 	bl	8010690 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e25e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e262:	491e      	ldr	r1, [pc, #120]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e264:	4613      	mov	r3, r2
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	4413      	add	r3, r2
 800e26a:	00db      	lsls	r3, r3, #3
 800e26c:	440b      	add	r3, r1
 800e26e:	3314      	adds	r3, #20
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d006      	beq.n	800e284 <etharp_find_entry+0x27c>
 800e276:	4b1a      	ldr	r3, [pc, #104]	; (800e2e0 <etharp_find_entry+0x2d8>)
 800e278:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e27c:	491d      	ldr	r1, [pc, #116]	; (800e2f4 <etharp_find_entry+0x2ec>)
 800e27e:	481a      	ldr	r0, [pc, #104]	; (800e2e8 <etharp_find_entry+0x2e0>)
 800e280:	f002 fa06 	bl	8010690 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00b      	beq.n	800e2a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e28a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6819      	ldr	r1, [r3, #0]
 800e292:	4812      	ldr	r0, [pc, #72]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e294:	4613      	mov	r3, r2
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	4413      	add	r3, r2
 800e29a:	00db      	lsls	r3, r3, #3
 800e29c:	4403      	add	r3, r0
 800e29e:	3304      	adds	r3, #4
 800e2a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e2a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2a6:	490d      	ldr	r1, [pc, #52]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	4413      	add	r3, r2
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	440b      	add	r3, r1
 800e2b2:	3312      	adds	r3, #18
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e2b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2bc:	4907      	ldr	r1, [pc, #28]	; (800e2dc <etharp_find_entry+0x2d4>)
 800e2be:	4613      	mov	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	4413      	add	r3, r2
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	440b      	add	r3, r1
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e2ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3728      	adds	r7, #40	; 0x28
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	200040dc 	.word	0x200040dc
 800e2e0:	08013b6c 	.word	0x08013b6c
 800e2e4:	08013ba4 	.word	0x08013ba4
 800e2e8:	08013be4 	.word	0x08013be4
 800e2ec:	08013c0c 	.word	0x08013c0c
 800e2f0:	08013c24 	.word	0x08013c24
 800e2f4:	08013c38 	.word	0x08013c38

0800e2f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e30c:	2b06      	cmp	r3, #6
 800e30e:	d006      	beq.n	800e31e <etharp_update_arp_entry+0x26>
 800e310:	4b48      	ldr	r3, [pc, #288]	; (800e434 <etharp_update_arp_entry+0x13c>)
 800e312:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e316:	4948      	ldr	r1, [pc, #288]	; (800e438 <etharp_update_arp_entry+0x140>)
 800e318:	4848      	ldr	r0, [pc, #288]	; (800e43c <etharp_update_arp_entry+0x144>)
 800e31a:	f002 f9b9 	bl	8010690 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d012      	beq.n	800e34a <etharp_update_arp_entry+0x52>
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00e      	beq.n	800e34a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68f9      	ldr	r1, [r7, #12]
 800e332:	4618      	mov	r0, r3
 800e334:	f001 f8fe 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800e338:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d105      	bne.n	800e34a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e346:	2be0      	cmp	r3, #224	; 0xe0
 800e348:	d102      	bne.n	800e350 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e34a:	f06f 030f 	mvn.w	r3, #15
 800e34e:	e06c      	b.n	800e42a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	4619      	mov	r1, r3
 800e356:	68b8      	ldr	r0, [r7, #8]
 800e358:	f7ff fe56 	bl	800e008 <etharp_find_entry>
 800e35c:	4603      	mov	r3, r0
 800e35e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e364:	2b00      	cmp	r3, #0
 800e366:	da02      	bge.n	800e36e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e368:	8afb      	ldrh	r3, [r7, #22]
 800e36a:	b25b      	sxtb	r3, r3
 800e36c:	e05d      	b.n	800e42a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e36e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e372:	4933      	ldr	r1, [pc, #204]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e374:	4613      	mov	r3, r2
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	4413      	add	r3, r2
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	440b      	add	r3, r1
 800e37e:	3314      	adds	r3, #20
 800e380:	2202      	movs	r2, #2
 800e382:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e388:	492d      	ldr	r1, [pc, #180]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e38a:	4613      	mov	r3, r2
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	4413      	add	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	440b      	add	r3, r1
 800e394:	3308      	adds	r3, #8
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e39a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	4413      	add	r3, r2
 800e3a4:	00db      	lsls	r3, r3, #3
 800e3a6:	3308      	adds	r3, #8
 800e3a8:	4a25      	ldr	r2, [pc, #148]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e3aa:	4413      	add	r3, r2
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	2206      	movs	r2, #6
 800e3b0:	6879      	ldr	r1, [r7, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f002 f956 	bl	8010664 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e3b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3bc:	4920      	ldr	r1, [pc, #128]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e3be:	4613      	mov	r3, r2
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	4413      	add	r3, r2
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	440b      	add	r3, r1
 800e3c8:	3312      	adds	r3, #18
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e3ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3d2:	491b      	ldr	r1, [pc, #108]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	00db      	lsls	r3, r3, #3
 800e3dc:	440b      	add	r3, r1
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d021      	beq.n	800e428 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e3e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3e8:	4915      	ldr	r1, [pc, #84]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	005b      	lsls	r3, r3, #1
 800e3ee:	4413      	add	r3, r2
 800e3f0:	00db      	lsls	r3, r3, #3
 800e3f2:	440b      	add	r3, r1
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e3f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3fc:	4910      	ldr	r1, [pc, #64]	; (800e440 <etharp_update_arp_entry+0x148>)
 800e3fe:	4613      	mov	r3, r2
 800e400:	005b      	lsls	r3, r3, #1
 800e402:	4413      	add	r3, r2
 800e404:	00db      	lsls	r3, r3, #3
 800e406:	440b      	add	r3, r1
 800e408:	2200      	movs	r2, #0
 800e40a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6939      	ldr	r1, [r7, #16]
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f001 ff91 	bl	8010344 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e422:	6938      	ldr	r0, [r7, #16]
 800e424:	f7f9 fdf0 	bl	8008008 <pbuf_free>
  }
  return ERR_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	08013b6c 	.word	0x08013b6c
 800e438:	08013c64 	.word	0x08013c64
 800e43c:	08013be4 	.word	0x08013be4
 800e440:	200040dc 	.word	0x200040dc

0800e444 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e44c:	2300      	movs	r3, #0
 800e44e:	60fb      	str	r3, [r7, #12]
 800e450:	e01e      	b.n	800e490 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e452:	4913      	ldr	r1, [pc, #76]	; (800e4a0 <etharp_cleanup_netif+0x5c>)
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	4613      	mov	r3, r2
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	4413      	add	r3, r2
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	440b      	add	r3, r1
 800e460:	3314      	adds	r3, #20
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e466:	7afb      	ldrb	r3, [r7, #11]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00e      	beq.n	800e48a <etharp_cleanup_netif+0x46>
 800e46c:	490c      	ldr	r1, [pc, #48]	; (800e4a0 <etharp_cleanup_netif+0x5c>)
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	4613      	mov	r3, r2
 800e472:	005b      	lsls	r3, r3, #1
 800e474:	4413      	add	r3, r2
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	440b      	add	r3, r1
 800e47a:	3308      	adds	r3, #8
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d102      	bne.n	800e48a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff fce5 	bl	800de54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3301      	adds	r3, #1
 800e48e:	60fb      	str	r3, [r7, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b09      	cmp	r3, #9
 800e494:	dddd      	ble.n	800e452 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e496:	bf00      	nop
 800e498:	bf00      	nop
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	200040dc 	.word	0x200040dc

0800e4a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e4a4:	b5b0      	push	{r4, r5, r7, lr}
 800e4a6:	b08a      	sub	sp, #40	; 0x28
 800e4a8:	af04      	add	r7, sp, #16
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d107      	bne.n	800e4c4 <etharp_input+0x20>
 800e4b4:	4b3d      	ldr	r3, [pc, #244]	; (800e5ac <etharp_input+0x108>)
 800e4b6:	f240 228a 	movw	r2, #650	; 0x28a
 800e4ba:	493d      	ldr	r1, [pc, #244]	; (800e5b0 <etharp_input+0x10c>)
 800e4bc:	483d      	ldr	r0, [pc, #244]	; (800e5b4 <etharp_input+0x110>)
 800e4be:	f002 f8e7 	bl	8010690 <iprintf>
 800e4c2:	e06f      	b.n	800e5a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4d4:	d10c      	bne.n	800e4f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e4da:	2b06      	cmp	r3, #6
 800e4dc:	d108      	bne.n	800e4f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e4e2:	2b04      	cmp	r3, #4
 800e4e4:	d104      	bne.n	800e4f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	885b      	ldrh	r3, [r3, #2]
 800e4ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e4ec:	2b08      	cmp	r3, #8
 800e4ee:	d003      	beq.n	800e4f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7f9 fd89 	bl	8008008 <pbuf_free>
    return;
 800e4f6:	e055      	b.n	800e5a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	330e      	adds	r3, #14
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	3318      	adds	r3, #24
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	3304      	adds	r3, #4
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <etharp_input+0x74>
    for_us = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	75fb      	strb	r3, [r7, #23]
 800e516:	e009      	b.n	800e52c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	3304      	adds	r3, #4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	429a      	cmp	r2, r3
 800e522:	bf0c      	ite	eq
 800e524:	2301      	moveq	r3, #1
 800e526:	2300      	movne	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	f103 0208 	add.w	r2, r3, #8
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <etharp_input+0x98>
 800e538:	2301      	movs	r3, #1
 800e53a:	e000      	b.n	800e53e <etharp_input+0x9a>
 800e53c:	2302      	movs	r3, #2
 800e53e:	f107 010c 	add.w	r1, r7, #12
 800e542:	6838      	ldr	r0, [r7, #0]
 800e544:	f7ff fed8 	bl	800e2f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	88db      	ldrh	r3, [r3, #6]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e552:	d003      	beq.n	800e55c <etharp_input+0xb8>
 800e554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e558:	d01e      	beq.n	800e598 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e55a:	e020      	b.n	800e59e <etharp_input+0xfa>
      if (for_us) {
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d01c      	beq.n	800e59c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e578:	693a      	ldr	r2, [r7, #16]
 800e57a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e57c:	2102      	movs	r1, #2
 800e57e:	9103      	str	r1, [sp, #12]
 800e580:	f107 010c 	add.w	r1, r7, #12
 800e584:	9102      	str	r1, [sp, #8]
 800e586:	9201      	str	r2, [sp, #4]
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	462b      	mov	r3, r5
 800e58c:	4622      	mov	r2, r4
 800e58e:	4601      	mov	r1, r0
 800e590:	6838      	ldr	r0, [r7, #0]
 800e592:	f000 faeb 	bl	800eb6c <etharp_raw>
      break;
 800e596:	e001      	b.n	800e59c <etharp_input+0xf8>
      break;
 800e598:	bf00      	nop
 800e59a:	e000      	b.n	800e59e <etharp_input+0xfa>
      break;
 800e59c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7f9 fd32 	bl	8008008 <pbuf_free>
}
 800e5a4:	3718      	adds	r7, #24
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	08013b6c 	.word	0x08013b6c
 800e5b0:	08013cbc 	.word	0x08013cbc
 800e5b4:	08013be4 	.word	0x08013be4

0800e5b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e5c6:	79fa      	ldrb	r2, [r7, #7]
 800e5c8:	4944      	ldr	r1, [pc, #272]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	005b      	lsls	r3, r3, #1
 800e5ce:	4413      	add	r3, r2
 800e5d0:	00db      	lsls	r3, r3, #3
 800e5d2:	440b      	add	r3, r1
 800e5d4:	3314      	adds	r3, #20
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d806      	bhi.n	800e5ea <etharp_output_to_arp_index+0x32>
 800e5dc:	4b40      	ldr	r3, [pc, #256]	; (800e6e0 <etharp_output_to_arp_index+0x128>)
 800e5de:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e5e2:	4940      	ldr	r1, [pc, #256]	; (800e6e4 <etharp_output_to_arp_index+0x12c>)
 800e5e4:	4840      	ldr	r0, [pc, #256]	; (800e6e8 <etharp_output_to_arp_index+0x130>)
 800e5e6:	f002 f853 	bl	8010690 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e5ea:	79fa      	ldrb	r2, [r7, #7]
 800e5ec:	493b      	ldr	r1, [pc, #236]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	005b      	lsls	r3, r3, #1
 800e5f2:	4413      	add	r3, r2
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	440b      	add	r3, r1
 800e5f8:	3314      	adds	r3, #20
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d153      	bne.n	800e6a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e600:	79fa      	ldrb	r2, [r7, #7]
 800e602:	4936      	ldr	r1, [pc, #216]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e604:	4613      	mov	r3, r2
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	4413      	add	r3, r2
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	440b      	add	r3, r1
 800e60e:	3312      	adds	r3, #18
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e616:	d919      	bls.n	800e64c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e618:	79fa      	ldrb	r2, [r7, #7]
 800e61a:	4613      	mov	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	4a2e      	ldr	r2, [pc, #184]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e624:	4413      	add	r3, r2
 800e626:	3304      	adds	r3, #4
 800e628:	4619      	mov	r1, r3
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 fb4c 	bl	800ecc8 <etharp_request>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d138      	bne.n	800e6a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e636:	79fa      	ldrb	r2, [r7, #7]
 800e638:	4928      	ldr	r1, [pc, #160]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e63a:	4613      	mov	r3, r2
 800e63c:	005b      	lsls	r3, r3, #1
 800e63e:	4413      	add	r3, r2
 800e640:	00db      	lsls	r3, r3, #3
 800e642:	440b      	add	r3, r1
 800e644:	3314      	adds	r3, #20
 800e646:	2203      	movs	r2, #3
 800e648:	701a      	strb	r2, [r3, #0]
 800e64a:	e02d      	b.n	800e6a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e64c:	79fa      	ldrb	r2, [r7, #7]
 800e64e:	4923      	ldr	r1, [pc, #140]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e650:	4613      	mov	r3, r2
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	4413      	add	r3, r2
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	440b      	add	r3, r1
 800e65a:	3312      	adds	r3, #18
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e662:	d321      	bcc.n	800e6a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e664:	79fa      	ldrb	r2, [r7, #7]
 800e666:	4613      	mov	r3, r2
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	4413      	add	r3, r2
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	4a1b      	ldr	r2, [pc, #108]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e670:	4413      	add	r3, r2
 800e672:	1d19      	adds	r1, r3, #4
 800e674:	79fa      	ldrb	r2, [r7, #7]
 800e676:	4613      	mov	r3, r2
 800e678:	005b      	lsls	r3, r3, #1
 800e67a:	4413      	add	r3, r2
 800e67c:	00db      	lsls	r3, r3, #3
 800e67e:	3308      	adds	r3, #8
 800e680:	4a16      	ldr	r2, [pc, #88]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e682:	4413      	add	r3, r2
 800e684:	3304      	adds	r3, #4
 800e686:	461a      	mov	r2, r3
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 fafb 	bl	800ec84 <etharp_request_dst>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d109      	bne.n	800e6a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e694:	79fa      	ldrb	r2, [r7, #7]
 800e696:	4911      	ldr	r1, [pc, #68]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e698:	4613      	mov	r3, r2
 800e69a:	005b      	lsls	r3, r3, #1
 800e69c:	4413      	add	r3, r2
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	440b      	add	r3, r1
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	2203      	movs	r2, #3
 800e6a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e6ae:	79fa      	ldrb	r2, [r7, #7]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	4413      	add	r3, r2
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	4a08      	ldr	r2, [pc, #32]	; (800e6dc <etharp_output_to_arp_index+0x124>)
 800e6bc:	4413      	add	r3, r2
 800e6be:	3304      	adds	r3, #4
 800e6c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6c4:	9200      	str	r2, [sp, #0]
 800e6c6:	460a      	mov	r2, r1
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f001 fe3a 	bl	8010344 <ethernet_output>
 800e6d0:	4603      	mov	r3, r0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	200040dc 	.word	0x200040dc
 800e6e0:	08013b6c 	.word	0x08013b6c
 800e6e4:	08013cdc 	.word	0x08013cdc
 800e6e8:	08013be4 	.word	0x08013be4

0800e6ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b08a      	sub	sp, #40	; 0x28
 800e6f0:	af02      	add	r7, sp, #8
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <etharp_output+0x24>
 800e702:	4b73      	ldr	r3, [pc, #460]	; (800e8d0 <etharp_output+0x1e4>)
 800e704:	f240 321e 	movw	r2, #798	; 0x31e
 800e708:	4972      	ldr	r1, [pc, #456]	; (800e8d4 <etharp_output+0x1e8>)
 800e70a:	4873      	ldr	r0, [pc, #460]	; (800e8d8 <etharp_output+0x1ec>)
 800e70c:	f001 ffc0 	bl	8010690 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d106      	bne.n	800e724 <etharp_output+0x38>
 800e716:	4b6e      	ldr	r3, [pc, #440]	; (800e8d0 <etharp_output+0x1e4>)
 800e718:	f240 321f 	movw	r2, #799	; 0x31f
 800e71c:	496f      	ldr	r1, [pc, #444]	; (800e8dc <etharp_output+0x1f0>)
 800e71e:	486e      	ldr	r0, [pc, #440]	; (800e8d8 <etharp_output+0x1ec>)
 800e720:	f001 ffb6 	bl	8010690 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <etharp_output+0x4c>
 800e72a:	4b69      	ldr	r3, [pc, #420]	; (800e8d0 <etharp_output+0x1e4>)
 800e72c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e730:	496b      	ldr	r1, [pc, #428]	; (800e8e0 <etharp_output+0x1f4>)
 800e732:	4869      	ldr	r0, [pc, #420]	; (800e8d8 <etharp_output+0x1ec>)
 800e734:	f001 ffac 	bl	8010690 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68f9      	ldr	r1, [r7, #12]
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 fef8 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e74a:	4b66      	ldr	r3, [pc, #408]	; (800e8e4 <etharp_output+0x1f8>)
 800e74c:	61fb      	str	r3, [r7, #28]
 800e74e:	e0af      	b.n	800e8b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e758:	2be0      	cmp	r3, #224	; 0xe0
 800e75a:	d118      	bne.n	800e78e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e75c:	2301      	movs	r3, #1
 800e75e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e760:	2300      	movs	r3, #0
 800e762:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e764:	235e      	movs	r3, #94	; 0x5e
 800e766:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3301      	adds	r3, #1
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e772:	b2db      	uxtb	r3, r3
 800e774:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	3302      	adds	r3, #2
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	3303      	adds	r3, #3
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e786:	f107 0310 	add.w	r3, r7, #16
 800e78a:	61fb      	str	r3, [r7, #28]
 800e78c:	e090      	b.n	800e8b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3304      	adds	r3, #4
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	405a      	eors	r2, r3
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	3308      	adds	r3, #8
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d012      	beq.n	800e7cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e7ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d00b      	beq.n	800e7cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	330c      	adds	r3, #12
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d003      	beq.n	800e7c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	61bb      	str	r3, [r7, #24]
 800e7c4:	e002      	b.n	800e7cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e7c6:	f06f 0303 	mvn.w	r3, #3
 800e7ca:	e07d      	b.n	800e8c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e7cc:	4b46      	ldr	r3, [pc, #280]	; (800e8e8 <etharp_output+0x1fc>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4a46      	ldr	r2, [pc, #280]	; (800e8ec <etharp_output+0x200>)
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	440b      	add	r3, r1
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	4413      	add	r3, r2
 800e7de:	3314      	adds	r3, #20
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d925      	bls.n	800e832 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e7e6:	4b40      	ldr	r3, [pc, #256]	; (800e8e8 <etharp_output+0x1fc>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4a3f      	ldr	r2, [pc, #252]	; (800e8ec <etharp_output+0x200>)
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	440b      	add	r3, r1
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	4413      	add	r3, r2
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d117      	bne.n	800e832 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	4b38      	ldr	r3, [pc, #224]	; (800e8e8 <etharp_output+0x1fc>)
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	4618      	mov	r0, r3
 800e80c:	4937      	ldr	r1, [pc, #220]	; (800e8ec <etharp_output+0x200>)
 800e80e:	4603      	mov	r3, r0
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	4403      	add	r3, r0
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	440b      	add	r3, r1
 800e818:	3304      	adds	r3, #4
 800e81a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d108      	bne.n	800e832 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e820:	4b31      	ldr	r3, [pc, #196]	; (800e8e8 <etharp_output+0x1fc>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	461a      	mov	r2, r3
 800e826:	68b9      	ldr	r1, [r7, #8]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff fec5 	bl	800e5b8 <etharp_output_to_arp_index>
 800e82e:	4603      	mov	r3, r0
 800e830:	e04a      	b.n	800e8c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e832:	2300      	movs	r3, #0
 800e834:	75fb      	strb	r3, [r7, #23]
 800e836:	e031      	b.n	800e89c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e838:	7dfa      	ldrb	r2, [r7, #23]
 800e83a:	492c      	ldr	r1, [pc, #176]	; (800e8ec <etharp_output+0x200>)
 800e83c:	4613      	mov	r3, r2
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	4413      	add	r3, r2
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	440b      	add	r3, r1
 800e846:	3314      	adds	r3, #20
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d923      	bls.n	800e896 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e84e:	7dfa      	ldrb	r2, [r7, #23]
 800e850:	4926      	ldr	r1, [pc, #152]	; (800e8ec <etharp_output+0x200>)
 800e852:	4613      	mov	r3, r2
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4413      	add	r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	440b      	add	r3, r1
 800e85c:	3308      	adds	r3, #8
 800e85e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	429a      	cmp	r2, r3
 800e864:	d117      	bne.n	800e896 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	6819      	ldr	r1, [r3, #0]
 800e86a:	7dfa      	ldrb	r2, [r7, #23]
 800e86c:	481f      	ldr	r0, [pc, #124]	; (800e8ec <etharp_output+0x200>)
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	4403      	add	r3, r0
 800e878:	3304      	adds	r3, #4
 800e87a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e87c:	4299      	cmp	r1, r3
 800e87e:	d10a      	bne.n	800e896 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e880:	4a19      	ldr	r2, [pc, #100]	; (800e8e8 <etharp_output+0x1fc>)
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e886:	7dfb      	ldrb	r3, [r7, #23]
 800e888:	461a      	mov	r2, r3
 800e88a:	68b9      	ldr	r1, [r7, #8]
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f7ff fe93 	bl	800e5b8 <etharp_output_to_arp_index>
 800e892:	4603      	mov	r3, r0
 800e894:	e018      	b.n	800e8c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	3301      	adds	r3, #1
 800e89a:	75fb      	strb	r3, [r7, #23]
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
 800e89e:	2b09      	cmp	r3, #9
 800e8a0:	d9ca      	bls.n	800e838 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	69b9      	ldr	r1, [r7, #24]
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f000 f822 	bl	800e8f0 <etharp_query>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	e00b      	b.n	800e8c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e8b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f001 fd3f 	bl	8010344 <ethernet_output>
 800e8c6:	4603      	mov	r3, r0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3720      	adds	r7, #32
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	08013b6c 	.word	0x08013b6c
 800e8d4:	08013cbc 	.word	0x08013cbc
 800e8d8:	08013be4 	.word	0x08013be4
 800e8dc:	08013d0c 	.word	0x08013d0c
 800e8e0:	08013cac 	.word	0x08013cac
 800e8e4:	08014354 	.word	0x08014354
 800e8e8:	200041cc 	.word	0x200041cc
 800e8ec:	200040dc 	.word	0x200040dc

0800e8f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08c      	sub	sp, #48	; 0x30
 800e8f4:	af02      	add	r7, sp, #8
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	3326      	adds	r3, #38	; 0x26
 800e900:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e902:	23ff      	movs	r3, #255	; 0xff
 800e904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68f9      	ldr	r1, [r7, #12]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 fe0e 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d10c      	bne.n	800e938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e926:	2be0      	cmp	r3, #224	; 0xe0
 800e928:	d006      	beq.n	800e938 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e938:	f06f 030f 	mvn.w	r3, #15
 800e93c:	e101      	b.n	800eb42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	2101      	movs	r1, #1
 800e942:	68b8      	ldr	r0, [r7, #8]
 800e944:	f7ff fb60 	bl	800e008 <etharp_find_entry>
 800e948:	4603      	mov	r3, r0
 800e94a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e94c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e950:	2b00      	cmp	r3, #0
 800e952:	da02      	bge.n	800e95a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e954:	8a7b      	ldrh	r3, [r7, #18]
 800e956:	b25b      	sxtb	r3, r3
 800e958:	e0f3      	b.n	800eb42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e95a:	8a7b      	ldrh	r3, [r7, #18]
 800e95c:	2b7e      	cmp	r3, #126	; 0x7e
 800e95e:	d906      	bls.n	800e96e <etharp_query+0x7e>
 800e960:	4b7a      	ldr	r3, [pc, #488]	; (800eb4c <etharp_query+0x25c>)
 800e962:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e966:	497a      	ldr	r1, [pc, #488]	; (800eb50 <etharp_query+0x260>)
 800e968:	487a      	ldr	r0, [pc, #488]	; (800eb54 <etharp_query+0x264>)
 800e96a:	f001 fe91 	bl	8010690 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e96e:	8a7b      	ldrh	r3, [r7, #18]
 800e970:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e972:	7c7a      	ldrb	r2, [r7, #17]
 800e974:	4978      	ldr	r1, [pc, #480]	; (800eb58 <etharp_query+0x268>)
 800e976:	4613      	mov	r3, r2
 800e978:	005b      	lsls	r3, r3, #1
 800e97a:	4413      	add	r3, r2
 800e97c:	00db      	lsls	r3, r3, #3
 800e97e:	440b      	add	r3, r1
 800e980:	3314      	adds	r3, #20
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d115      	bne.n	800e9b4 <etharp_query+0xc4>
    is_new_entry = 1;
 800e988:	2301      	movs	r3, #1
 800e98a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e98c:	7c7a      	ldrb	r2, [r7, #17]
 800e98e:	4972      	ldr	r1, [pc, #456]	; (800eb58 <etharp_query+0x268>)
 800e990:	4613      	mov	r3, r2
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	4413      	add	r3, r2
 800e996:	00db      	lsls	r3, r3, #3
 800e998:	440b      	add	r3, r1
 800e99a:	3314      	adds	r3, #20
 800e99c:	2201      	movs	r2, #1
 800e99e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e9a0:	7c7a      	ldrb	r2, [r7, #17]
 800e9a2:	496d      	ldr	r1, [pc, #436]	; (800eb58 <etharp_query+0x268>)
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	4413      	add	r3, r2
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	440b      	add	r3, r1
 800e9ae:	3308      	adds	r3, #8
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e9b4:	7c7a      	ldrb	r2, [r7, #17]
 800e9b6:	4968      	ldr	r1, [pc, #416]	; (800eb58 <etharp_query+0x268>)
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	4413      	add	r3, r2
 800e9be:	00db      	lsls	r3, r3, #3
 800e9c0:	440b      	add	r3, r1
 800e9c2:	3314      	adds	r3, #20
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d011      	beq.n	800e9ee <etharp_query+0xfe>
 800e9ca:	7c7a      	ldrb	r2, [r7, #17]
 800e9cc:	4962      	ldr	r1, [pc, #392]	; (800eb58 <etharp_query+0x268>)
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	005b      	lsls	r3, r3, #1
 800e9d2:	4413      	add	r3, r2
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	440b      	add	r3, r1
 800e9d8:	3314      	adds	r3, #20
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d806      	bhi.n	800e9ee <etharp_query+0xfe>
 800e9e0:	4b5a      	ldr	r3, [pc, #360]	; (800eb4c <etharp_query+0x25c>)
 800e9e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e9e6:	495d      	ldr	r1, [pc, #372]	; (800eb5c <etharp_query+0x26c>)
 800e9e8:	485a      	ldr	r0, [pc, #360]	; (800eb54 <etharp_query+0x264>)
 800e9ea:	f001 fe51 	bl	8010690 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <etharp_query+0x10a>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d10c      	bne.n	800ea14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f000 f963 	bl	800ecc8 <etharp_request>
 800ea02:	4603      	mov	r3, r0
 800ea04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <etharp_query+0x124>
      return result;
 800ea0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea12:	e096      	b.n	800eb42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <etharp_query+0x138>
 800ea1a:	4b4c      	ldr	r3, [pc, #304]	; (800eb4c <etharp_query+0x25c>)
 800ea1c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ea20:	494f      	ldr	r1, [pc, #316]	; (800eb60 <etharp_query+0x270>)
 800ea22:	484c      	ldr	r0, [pc, #304]	; (800eb54 <etharp_query+0x264>)
 800ea24:	f001 fe34 	bl	8010690 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ea28:	7c7a      	ldrb	r2, [r7, #17]
 800ea2a:	494b      	ldr	r1, [pc, #300]	; (800eb58 <etharp_query+0x268>)
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	4413      	add	r3, r2
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	440b      	add	r3, r1
 800ea36:	3314      	adds	r3, #20
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d917      	bls.n	800ea6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ea3e:	4a49      	ldr	r2, [pc, #292]	; (800eb64 <etharp_query+0x274>)
 800ea40:	7c7b      	ldrb	r3, [r7, #17]
 800ea42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ea44:	7c7a      	ldrb	r2, [r7, #17]
 800ea46:	4613      	mov	r3, r2
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	4413      	add	r3, r2
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	3308      	adds	r3, #8
 800ea50:	4a41      	ldr	r2, [pc, #260]	; (800eb58 <etharp_query+0x268>)
 800ea52:	4413      	add	r3, r2
 800ea54:	3304      	adds	r3, #4
 800ea56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea5a:	9200      	str	r2, [sp, #0]
 800ea5c:	697a      	ldr	r2, [r7, #20]
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f001 fc6f 	bl	8010344 <ethernet_output>
 800ea66:	4603      	mov	r3, r0
 800ea68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea6c:	e067      	b.n	800eb3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea6e:	7c7a      	ldrb	r2, [r7, #17]
 800ea70:	4939      	ldr	r1, [pc, #228]	; (800eb58 <etharp_query+0x268>)
 800ea72:	4613      	mov	r3, r2
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	4413      	add	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	440b      	add	r3, r1
 800ea7c:	3314      	adds	r3, #20
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d15c      	bne.n	800eb3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ea8c:	e01c      	b.n	800eac8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	895a      	ldrh	r2, [r3, #10]
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	891b      	ldrh	r3, [r3, #8]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d10a      	bne.n	800eab0 <etharp_query+0x1c0>
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d006      	beq.n	800eab0 <etharp_query+0x1c0>
 800eaa2:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <etharp_query+0x25c>)
 800eaa4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800eaa8:	492f      	ldr	r1, [pc, #188]	; (800eb68 <etharp_query+0x278>)
 800eaaa:	482a      	ldr	r0, [pc, #168]	; (800eb54 <etharp_query+0x264>)
 800eaac:	f001 fdf0 	bl	8010690 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	7b1b      	ldrb	r3, [r3, #12]
 800eab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <etharp_query+0x1d2>
        copy_needed = 1;
 800eabc:	2301      	movs	r3, #1
 800eabe:	61bb      	str	r3, [r7, #24]
        break;
 800eac0:	e005      	b.n	800eace <etharp_query+0x1de>
      }
      p = p->next;
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1df      	bne.n	800ea8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d007      	beq.n	800eae4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800eada:	200e      	movs	r0, #14
 800eadc:	f7f9 fcfc 	bl	80084d8 <pbuf_clone>
 800eae0:	61f8      	str	r0, [r7, #28]
 800eae2:	e004      	b.n	800eaee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800eae8:	69f8      	ldr	r0, [r7, #28]
 800eaea:	f7f9 fb33 	bl	8008154 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d021      	beq.n	800eb38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800eaf4:	7c7a      	ldrb	r2, [r7, #17]
 800eaf6:	4918      	ldr	r1, [pc, #96]	; (800eb58 <etharp_query+0x268>)
 800eaf8:	4613      	mov	r3, r2
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	4413      	add	r3, r2
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	440b      	add	r3, r1
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00a      	beq.n	800eb1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800eb08:	7c7a      	ldrb	r2, [r7, #17]
 800eb0a:	4913      	ldr	r1, [pc, #76]	; (800eb58 <etharp_query+0x268>)
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	4413      	add	r3, r2
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	440b      	add	r3, r1
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7f9 fa75 	bl	8008008 <pbuf_free>
      }
      arp_table[i].q = p;
 800eb1e:	7c7a      	ldrb	r2, [r7, #17]
 800eb20:	490d      	ldr	r1, [pc, #52]	; (800eb58 <etharp_query+0x268>)
 800eb22:	4613      	mov	r3, r2
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	4413      	add	r3, r2
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	440b      	add	r3, r1
 800eb2c:	69fa      	ldr	r2, [r7, #28]
 800eb2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800eb30:	2300      	movs	r3, #0
 800eb32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb36:	e002      	b.n	800eb3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800eb38:	23ff      	movs	r3, #255	; 0xff
 800eb3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800eb3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3728      	adds	r7, #40	; 0x28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	08013b6c 	.word	0x08013b6c
 800eb50:	08013d18 	.word	0x08013d18
 800eb54:	08013be4 	.word	0x08013be4
 800eb58:	200040dc 	.word	0x200040dc
 800eb5c:	08013d28 	.word	0x08013d28
 800eb60:	08013d0c 	.word	0x08013d0c
 800eb64:	200041cc 	.word	0x200041cc
 800eb68:	08013d50 	.word	0x08013d50

0800eb6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b08a      	sub	sp, #40	; 0x28
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <etharp_raw+0x26>
 800eb84:	4b3a      	ldr	r3, [pc, #232]	; (800ec70 <etharp_raw+0x104>)
 800eb86:	f240 4257 	movw	r2, #1111	; 0x457
 800eb8a:	493a      	ldr	r1, [pc, #232]	; (800ec74 <etharp_raw+0x108>)
 800eb8c:	483a      	ldr	r0, [pc, #232]	; (800ec78 <etharp_raw+0x10c>)
 800eb8e:	f001 fd7f 	bl	8010690 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800eb92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb96:	211c      	movs	r1, #28
 800eb98:	200e      	movs	r0, #14
 800eb9a:	f7f8 ff51 	bl	8007a40 <pbuf_alloc>
 800eb9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d102      	bne.n	800ebac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800eba6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebaa:	e05d      	b.n	800ec68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	895b      	ldrh	r3, [r3, #10]
 800ebb0:	2b1b      	cmp	r3, #27
 800ebb2:	d806      	bhi.n	800ebc2 <etharp_raw+0x56>
 800ebb4:	4b2e      	ldr	r3, [pc, #184]	; (800ec70 <etharp_raw+0x104>)
 800ebb6:	f240 4262 	movw	r2, #1122	; 0x462
 800ebba:	4930      	ldr	r1, [pc, #192]	; (800ec7c <etharp_raw+0x110>)
 800ebbc:	482e      	ldr	r0, [pc, #184]	; (800ec78 <etharp_raw+0x10c>)
 800ebbe:	f001 fd67 	bl	8010690 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ebc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f7 fe70 	bl	80068b0 <lwip_htons>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ebde:	2b06      	cmp	r3, #6
 800ebe0:	d006      	beq.n	800ebf0 <etharp_raw+0x84>
 800ebe2:	4b23      	ldr	r3, [pc, #140]	; (800ec70 <etharp_raw+0x104>)
 800ebe4:	f240 4269 	movw	r2, #1129	; 0x469
 800ebe8:	4925      	ldr	r1, [pc, #148]	; (800ec80 <etharp_raw+0x114>)
 800ebea:	4823      	ldr	r0, [pc, #140]	; (800ec78 <etharp_raw+0x10c>)
 800ebec:	f001 fd50 	bl	8010690 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	2206      	movs	r2, #6
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f001 fd33 	bl	8010664 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	3312      	adds	r3, #18
 800ec02:	2206      	movs	r2, #6
 800ec04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec06:	4618      	mov	r0, r3
 800ec08:	f001 fd2c 	bl	8010664 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	330e      	adds	r3, #14
 800ec10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec12:	6812      	ldr	r2, [r2, #0]
 800ec14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	3318      	adds	r3, #24
 800ec1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1c:	6812      	ldr	r2, [r2, #0]
 800ec1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	2200      	movs	r2, #0
 800ec24:	701a      	strb	r2, [r3, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f042 0201 	orr.w	r2, r2, #1
 800ec2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f042 0208 	orr.w	r2, r2, #8
 800ec36:	709a      	strb	r2, [r3, #2]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	2206      	movs	r2, #6
 800ec40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2204      	movs	r2, #4
 800ec46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ec48:	f640 0306 	movw	r3, #2054	; 0x806
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	69b9      	ldr	r1, [r7, #24]
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f001 fb75 	bl	8010344 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ec5a:	69b8      	ldr	r0, [r7, #24]
 800ec5c:	f7f9 f9d4 	bl	8008008 <pbuf_free>
  p = NULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ec64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3720      	adds	r7, #32
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	08013b6c 	.word	0x08013b6c
 800ec74:	08013cbc 	.word	0x08013cbc
 800ec78:	08013be4 	.word	0x08013be4
 800ec7c:	08013d6c 	.word	0x08013d6c
 800ec80:	08013da0 	.word	0x08013da0

0800ec84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b088      	sub	sp, #32
 800ec88:	af04      	add	r7, sp, #16
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eca0:	2201      	movs	r2, #1
 800eca2:	9203      	str	r2, [sp, #12]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	9202      	str	r2, [sp, #8]
 800eca8:	4a06      	ldr	r2, [pc, #24]	; (800ecc4 <etharp_request_dst+0x40>)
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4603      	mov	r3, r0
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f7ff ff5a 	bl	800eb6c <etharp_raw>
 800ecb8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801435c 	.word	0x0801435c

0800ecc8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ecd2:	4a05      	ldr	r2, [pc, #20]	; (800ece8 <etharp_request+0x20>)
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7ff ffd4 	bl	800ec84 <etharp_request_dst>
 800ecdc:	4603      	mov	r3, r0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08014354 	.word	0x08014354

0800ecec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b08e      	sub	sp, #56	; 0x38
 800ecf0:	af04      	add	r7, sp, #16
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ecf6:	4b79      	ldr	r3, [pc, #484]	; (800eedc <icmp_input+0x1f0>)
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ed0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed0e:	2b13      	cmp	r3, #19
 800ed10:	f240 80cd 	bls.w	800eeae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	895b      	ldrh	r3, [r3, #10]
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	f240 80ca 	bls.w	800eeb2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ed28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 80b7 	beq.w	800eea0 <icmp_input+0x1b4>
 800ed32:	2b08      	cmp	r3, #8
 800ed34:	f040 80b7 	bne.w	800eea6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ed38:	4b69      	ldr	r3, [pc, #420]	; (800eee0 <icmp_input+0x1f4>)
 800ed3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed3c:	4b67      	ldr	r3, [pc, #412]	; (800eedc <icmp_input+0x1f0>)
 800ed3e:	695b      	ldr	r3, [r3, #20]
 800ed40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed44:	2be0      	cmp	r3, #224	; 0xe0
 800ed46:	f000 80bb 	beq.w	800eec0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ed4a:	4b64      	ldr	r3, [pc, #400]	; (800eedc <icmp_input+0x1f0>)
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	4a63      	ldr	r2, [pc, #396]	; (800eedc <icmp_input+0x1f0>)
 800ed50:	6812      	ldr	r2, [r2, #0]
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 fbed 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f040 80b1 	bne.w	800eec4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	891b      	ldrh	r3, [r3, #8]
 800ed66:	2b07      	cmp	r3, #7
 800ed68:	f240 80a5 	bls.w	800eeb6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ed6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed6e:	330e      	adds	r3, #14
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7f9 f8b2 	bl	8007edc <pbuf_add_header>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d04b      	beq.n	800ee16 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	891a      	ldrh	r2, [r3, #8]
 800ed82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed84:	4413      	add	r3, r2
 800ed86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	891b      	ldrh	r3, [r3, #8]
 800ed8c:	8b7a      	ldrh	r2, [r7, #26]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	f0c0 809a 	bcc.w	800eec8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ed94:	8b7b      	ldrh	r3, [r7, #26]
 800ed96:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	200e      	movs	r0, #14
 800ed9e:	f7f8 fe4f 	bl	8007a40 <pbuf_alloc>
 800eda2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 8090 	beq.w	800eecc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	895b      	ldrh	r3, [r3, #10]
 800edb0:	461a      	mov	r2, r3
 800edb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edb4:	3308      	adds	r3, #8
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d203      	bcs.n	800edc2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f7f9 f924 	bl	8008008 <pbuf_free>
          goto icmperr;
 800edc0:	e085      	b.n	800eece <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800edc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edca:	4618      	mov	r0, r3
 800edcc:	f001 fc4a 	bl	8010664 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800edd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edd2:	4619      	mov	r1, r3
 800edd4:	6978      	ldr	r0, [r7, #20]
 800edd6:	f7f9 f891 	bl	8007efc <pbuf_remove_header>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d009      	beq.n	800edf4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ede0:	4b40      	ldr	r3, [pc, #256]	; (800eee4 <icmp_input+0x1f8>)
 800ede2:	22b6      	movs	r2, #182	; 0xb6
 800ede4:	4940      	ldr	r1, [pc, #256]	; (800eee8 <icmp_input+0x1fc>)
 800ede6:	4841      	ldr	r0, [pc, #260]	; (800eeec <icmp_input+0x200>)
 800ede8:	f001 fc52 	bl	8010690 <iprintf>
          pbuf_free(r);
 800edec:	6978      	ldr	r0, [r7, #20]
 800edee:	f7f9 f90b 	bl	8008008 <pbuf_free>
          goto icmperr;
 800edf2:	e06c      	b.n	800eece <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	6978      	ldr	r0, [r7, #20]
 800edf8:	f7f9 fa2a 	bl	8008250 <pbuf_copy>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ee02:	6978      	ldr	r0, [r7, #20]
 800ee04:	f7f9 f900 	bl	8008008 <pbuf_free>
          goto icmperr;
 800ee08:	e061      	b.n	800eece <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7f9 f8fc 	bl	8008008 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	607b      	str	r3, [r7, #4]
 800ee14:	e00f      	b.n	800ee36 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ee16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee18:	330e      	adds	r3, #14
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7f9 f86d 	bl	8007efc <pbuf_remove_header>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d006      	beq.n	800ee36 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ee28:	4b2e      	ldr	r3, [pc, #184]	; (800eee4 <icmp_input+0x1f8>)
 800ee2a:	22c7      	movs	r2, #199	; 0xc7
 800ee2c:	4930      	ldr	r1, [pc, #192]	; (800eef0 <icmp_input+0x204>)
 800ee2e:	482f      	ldr	r0, [pc, #188]	; (800eeec <icmp_input+0x200>)
 800ee30:	f001 fc2e 	bl	8010690 <iprintf>
          goto icmperr;
 800ee34:	e04b      	b.n	800eece <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ee3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7f9 f84b 	bl	8007edc <pbuf_add_header>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d12b      	bne.n	800eea4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ee5a:	4b20      	ldr	r3, [pc, #128]	; (800eedc <icmp_input+0x1f0>)
 800ee5c:	691a      	ldr	r2, [r3, #16]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	2200      	movs	r2, #0
 800ee66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	709a      	strb	r2, [r3, #2]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	22ff      	movs	r2, #255	; 0xff
 800ee76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	729a      	strb	r2, [r3, #10]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	9302      	str	r3, [sp, #8]
 800ee86:	2301      	movs	r3, #1
 800ee88:	9301      	str	r3, [sp, #4]
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	23ff      	movs	r3, #255	; 0xff
 800ee90:	2200      	movs	r2, #0
 800ee92:	69f9      	ldr	r1, [r7, #28]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fa75 	bl	800f384 <ip4_output_if>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ee9e:	e001      	b.n	800eea4 <icmp_input+0x1b8>
      break;
 800eea0:	bf00      	nop
 800eea2:	e000      	b.n	800eea6 <icmp_input+0x1ba>
      break;
 800eea4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7f9 f8ae 	bl	8008008 <pbuf_free>
  return;
 800eeac:	e013      	b.n	800eed6 <icmp_input+0x1ea>
    goto lenerr;
 800eeae:	bf00      	nop
 800eeb0:	e002      	b.n	800eeb8 <icmp_input+0x1cc>
    goto lenerr;
 800eeb2:	bf00      	nop
 800eeb4:	e000      	b.n	800eeb8 <icmp_input+0x1cc>
        goto lenerr;
 800eeb6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7f9 f8a5 	bl	8008008 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eebe:	e00a      	b.n	800eed6 <icmp_input+0x1ea>
        goto icmperr;
 800eec0:	bf00      	nop
 800eec2:	e004      	b.n	800eece <icmp_input+0x1e2>
        goto icmperr;
 800eec4:	bf00      	nop
 800eec6:	e002      	b.n	800eece <icmp_input+0x1e2>
          goto icmperr;
 800eec8:	bf00      	nop
 800eeca:	e000      	b.n	800eece <icmp_input+0x1e2>
          goto icmperr;
 800eecc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7f9 f89a 	bl	8008008 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eed4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800eed6:	3728      	adds	r7, #40	; 0x28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	20007328 	.word	0x20007328
 800eee0:	2000733c 	.word	0x2000733c
 800eee4:	08013de4 	.word	0x08013de4
 800eee8:	08013e1c 	.word	0x08013e1c
 800eeec:	08013e54 	.word	0x08013e54
 800eef0:	08013e7c 	.word	0x08013e7c

0800eef4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ef00:	78fb      	ldrb	r3, [r7, #3]
 800ef02:	461a      	mov	r2, r3
 800ef04:	2103      	movs	r1, #3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f814 	bl	800ef34 <icmp_send_response>
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	461a      	mov	r2, r3
 800ef24:	210b      	movs	r1, #11
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 f804 	bl	800ef34 <icmp_send_response>
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08c      	sub	sp, #48	; 0x30
 800ef38:	af04      	add	r7, sp, #16
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	70fb      	strb	r3, [r7, #3]
 800ef40:	4613      	mov	r3, r2
 800ef42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ef44:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef48:	2124      	movs	r1, #36	; 0x24
 800ef4a:	2022      	movs	r0, #34	; 0x22
 800ef4c:	f7f8 fd78 	bl	8007a40 <pbuf_alloc>
 800ef50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d04c      	beq.n	800eff2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	895b      	ldrh	r3, [r3, #10]
 800ef5c:	2b23      	cmp	r3, #35	; 0x23
 800ef5e:	d806      	bhi.n	800ef6e <icmp_send_response+0x3a>
 800ef60:	4b26      	ldr	r3, [pc, #152]	; (800effc <icmp_send_response+0xc8>)
 800ef62:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ef66:	4926      	ldr	r1, [pc, #152]	; (800f000 <icmp_send_response+0xcc>)
 800ef68:	4826      	ldr	r0, [pc, #152]	; (800f004 <icmp_send_response+0xd0>)
 800ef6a:	f001 fb91 	bl	8010690 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	78fa      	ldrb	r2, [r7, #3]
 800ef7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	78ba      	ldrb	r2, [r7, #2]
 800ef84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	711a      	strb	r2, [r3, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2200      	movs	r2, #0
 800ef94:	719a      	strb	r2, [r3, #6]
 800ef96:	2200      	movs	r2, #0
 800ef98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	f103 0008 	add.w	r0, r3, #8
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	221c      	movs	r2, #28
 800efa8:	4619      	mov	r1, r3
 800efaa:	f001 fb5b 	bl	8010664 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800efb4:	f107 030c 	add.w	r3, r7, #12
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 f825 	bl	800f008 <ip4_route>
 800efbe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d011      	beq.n	800efea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2200      	movs	r2, #0
 800efca:	709a      	strb	r2, [r3, #2]
 800efcc:	2200      	movs	r2, #0
 800efce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800efd0:	f107 020c 	add.w	r2, r7, #12
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	9302      	str	r3, [sp, #8]
 800efd8:	2301      	movs	r3, #1
 800efda:	9301      	str	r3, [sp, #4]
 800efdc:	2300      	movs	r3, #0
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	23ff      	movs	r3, #255	; 0xff
 800efe2:	2100      	movs	r1, #0
 800efe4:	69f8      	ldr	r0, [r7, #28]
 800efe6:	f000 f9cd 	bl	800f384 <ip4_output_if>
  }
  pbuf_free(q);
 800efea:	69f8      	ldr	r0, [r7, #28]
 800efec:	f7f9 f80c 	bl	8008008 <pbuf_free>
 800eff0:	e000      	b.n	800eff4 <icmp_send_response+0xc0>
    return;
 800eff2:	bf00      	nop
}
 800eff4:	3720      	adds	r7, #32
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	08013de4 	.word	0x08013de4
 800f000:	08013eb0 	.word	0x08013eb0
 800f004:	08013e54 	.word	0x08013e54

0800f008 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f010:	4b33      	ldr	r3, [pc, #204]	; (800f0e0 <ip4_route+0xd8>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	60fb      	str	r3, [r7, #12]
 800f016:	e036      	b.n	800f086 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f01e:	f003 0301 	and.w	r3, r3, #1
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d02b      	beq.n	800f080 <ip4_route+0x78>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f02e:	089b      	lsrs	r3, r3, #2
 800f030:	f003 0301 	and.w	r3, r3, #1
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d022      	beq.n	800f080 <ip4_route+0x78>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3304      	adds	r3, #4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d01d      	beq.n	800f080 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	405a      	eors	r2, r3
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	3308      	adds	r3, #8
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4013      	ands	r3, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	e038      	b.n	800f0d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f066:	f003 0302 	and.w	r3, r3, #2
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d108      	bne.n	800f080 <ip4_route+0x78>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	330c      	adds	r3, #12
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d101      	bne.n	800f080 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	e028      	b.n	800f0d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1c5      	bne.n	800f018 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f08c:	4b15      	ldr	r3, [pc, #84]	; (800f0e4 <ip4_route+0xdc>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d01a      	beq.n	800f0ca <ip4_route+0xc2>
 800f094:	4b13      	ldr	r3, [pc, #76]	; (800f0e4 <ip4_route+0xdc>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d012      	beq.n	800f0ca <ip4_route+0xc2>
 800f0a4:	4b0f      	ldr	r3, [pc, #60]	; (800f0e4 <ip4_route+0xdc>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0ac:	f003 0304 	and.w	r3, r3, #4
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00a      	beq.n	800f0ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f0b4:	4b0b      	ldr	r3, [pc, #44]	; (800f0e4 <ip4_route+0xdc>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d004      	beq.n	800f0ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	2b7f      	cmp	r3, #127	; 0x7f
 800f0c8:	d101      	bne.n	800f0ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	e001      	b.n	800f0d2 <ip4_route+0xca>
  }

  return netif_default;
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <ip4_route+0xdc>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	2000cbec 	.word	0x2000cbec
 800f0e4:	2000cbf0 	.word	0x2000cbf0

0800f0e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d016      	beq.n	800f12e <ip4_input_accept+0x46>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	3304      	adds	r3, #4
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d011      	beq.n	800f12e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f10a:	4b0b      	ldr	r3, [pc, #44]	; (800f138 <ip4_input_accept+0x50>)
 800f10c:	695a      	ldr	r2, [r3, #20]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	3304      	adds	r3, #4
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	429a      	cmp	r2, r3
 800f116:	d008      	beq.n	800f12a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f118:	4b07      	ldr	r3, [pc, #28]	; (800f138 <ip4_input_accept+0x50>)
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 fa08 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800f124:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20007328 	.word	0x20007328

0800f13c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	091b      	lsrs	r3, r3, #4
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b04      	cmp	r3, #4
 800f156:	d004      	beq.n	800f162 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7f8 ff55 	bl	8008008 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	e107      	b.n	800f372 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 030f 	and.w	r3, r3, #15
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	885b      	ldrh	r3, [r3, #2]
 800f176:	b29b      	uxth	r3, r3
 800f178:	4618      	mov	r0, r3
 800f17a:	f7f7 fb99 	bl	80068b0 <lwip_htons>
 800f17e:	4603      	mov	r3, r0
 800f180:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	891b      	ldrh	r3, [r3, #8]
 800f186:	89ba      	ldrh	r2, [r7, #12]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d204      	bcs.n	800f196 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f18c:	89bb      	ldrh	r3, [r7, #12]
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7f8 fdb3 	bl	8007cfc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	895b      	ldrh	r3, [r3, #10]
 800f19a:	89fa      	ldrh	r2, [r7, #14]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d807      	bhi.n	800f1b0 <ip4_input+0x74>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	891b      	ldrh	r3, [r3, #8]
 800f1a4:	89ba      	ldrh	r2, [r7, #12]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d802      	bhi.n	800f1b0 <ip4_input+0x74>
 800f1aa:	89fb      	ldrh	r3, [r7, #14]
 800f1ac:	2b13      	cmp	r3, #19
 800f1ae:	d804      	bhi.n	800f1ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7f8 ff29 	bl	8008008 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e0db      	b.n	800f372 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	4a6f      	ldr	r2, [pc, #444]	; (800f37c <ip4_input+0x240>)
 800f1c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	4a6d      	ldr	r2, [pc, #436]	; (800f37c <ip4_input+0x240>)
 800f1c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f1ca:	4b6c      	ldr	r3, [pc, #432]	; (800f37c <ip4_input+0x240>)
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1d2:	2be0      	cmp	r3, #224	; 0xe0
 800f1d4:	d112      	bne.n	800f1fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d007      	beq.n	800f1f6 <ip4_input+0xba>
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <ip4_input+0xba>
      netif = inp;
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	613b      	str	r3, [r7, #16]
 800f1f4:	e02a      	b.n	800f24c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	613b      	str	r3, [r7, #16]
 800f1fa:	e027      	b.n	800f24c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f1fc:	6838      	ldr	r0, [r7, #0]
 800f1fe:	f7ff ff73 	bl	800f0e8 <ip4_input_accept>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <ip4_input+0xd2>
      netif = inp;
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	613b      	str	r3, [r7, #16]
 800f20c:	e01e      	b.n	800f24c <ip4_input+0x110>
    } else {
      netif = NULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f212:	4b5a      	ldr	r3, [pc, #360]	; (800f37c <ip4_input+0x240>)
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b7f      	cmp	r3, #127	; 0x7f
 800f21a:	d017      	beq.n	800f24c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f21c:	4b58      	ldr	r3, [pc, #352]	; (800f380 <ip4_input+0x244>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	613b      	str	r3, [r7, #16]
 800f222:	e00e      	b.n	800f242 <ip4_input+0x106>
          if (netif == inp) {
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d006      	beq.n	800f23a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f22c:	6938      	ldr	r0, [r7, #16]
 800f22e:	f7ff ff5b 	bl	800f0e8 <ip4_input_accept>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d108      	bne.n	800f24a <ip4_input+0x10e>
 800f238:	e000      	b.n	800f23c <ip4_input+0x100>
            continue;
 800f23a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	613b      	str	r3, [r7, #16]
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1ed      	bne.n	800f224 <ip4_input+0xe8>
 800f248:	e000      	b.n	800f24c <ip4_input+0x110>
            break;
 800f24a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f24c:	4b4b      	ldr	r3, [pc, #300]	; (800f37c <ip4_input+0x240>)
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	6839      	ldr	r1, [r7, #0]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 f96e 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d105      	bne.n	800f26a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f25e:	4b47      	ldr	r3, [pc, #284]	; (800f37c <ip4_input+0x240>)
 800f260:	691b      	ldr	r3, [r3, #16]
 800f262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f266:	2be0      	cmp	r3, #224	; 0xe0
 800f268:	d104      	bne.n	800f274 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7f8 fecc 	bl	8008008 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	e07e      	b.n	800f372 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d104      	bne.n	800f284 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7f8 fec4 	bl	8008008 <pbuf_free>
    return ERR_OK;
 800f280:	2300      	movs	r3, #0
 800f282:	e076      	b.n	800f372 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	88db      	ldrh	r3, [r3, #6]
 800f288:	b29b      	uxth	r3, r3
 800f28a:	461a      	mov	r2, r3
 800f28c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f290:	4013      	ands	r3, r2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00b      	beq.n	800f2ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 fc92 	bl	800fbc0 <ip4_reass>
 800f29c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <ip4_input+0x16c>
      return ERR_OK;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e064      	b.n	800f372 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f2ae:	4a33      	ldr	r2, [pc, #204]	; (800f37c <ip4_input+0x240>)
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f2b4:	4a31      	ldr	r2, [pc, #196]	; (800f37c <ip4_input+0x240>)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f2ba:	4a30      	ldr	r2, [pc, #192]	; (800f37c <ip4_input+0x240>)
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	f003 030f 	and.w	r3, r3, #15
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	4b2a      	ldr	r3, [pc, #168]	; (800f37c <ip4_input+0x240>)
 800f2d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f2d4:	89fb      	ldrh	r3, [r7, #14]
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7f8 fe0f 	bl	8007efc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	7a5b      	ldrb	r3, [r3, #9]
 800f2e2:	2b11      	cmp	r3, #17
 800f2e4:	d006      	beq.n	800f2f4 <ip4_input+0x1b8>
 800f2e6:	2b11      	cmp	r3, #17
 800f2e8:	dc13      	bgt.n	800f312 <ip4_input+0x1d6>
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d00c      	beq.n	800f308 <ip4_input+0x1cc>
 800f2ee:	2b06      	cmp	r3, #6
 800f2f0:	d005      	beq.n	800f2fe <ip4_input+0x1c2>
 800f2f2:	e00e      	b.n	800f312 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7fe fc68 	bl	800dbcc <udp_input>
        break;
 800f2fc:	e026      	b.n	800f34c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f2fe:	6839      	ldr	r1, [r7, #0]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7fa fcb5 	bl	8009c70 <tcp_input>
        break;
 800f306:	e021      	b.n	800f34c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff fcee 	bl	800ecec <icmp_input>
        break;
 800f310:	e01c      	b.n	800f34c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f312:	4b1a      	ldr	r3, [pc, #104]	; (800f37c <ip4_input+0x240>)
 800f314:	695b      	ldr	r3, [r3, #20]
 800f316:	6939      	ldr	r1, [r7, #16]
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 f90b 	bl	800f534 <ip4_addr_isbroadcast_u32>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10f      	bne.n	800f344 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f324:	4b15      	ldr	r3, [pc, #84]	; (800f37c <ip4_input+0x240>)
 800f326:	695b      	ldr	r3, [r3, #20]
 800f328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f32c:	2be0      	cmp	r3, #224	; 0xe0
 800f32e:	d009      	beq.n	800f344 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7f8 fe53 	bl	8007fe2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f33c:	2102      	movs	r1, #2
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f7ff fdd8 	bl	800eef4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7f8 fe5f 	bl	8008008 <pbuf_free>
        break;
 800f34a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f34c:	4b0b      	ldr	r3, [pc, #44]	; (800f37c <ip4_input+0x240>)
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f352:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <ip4_input+0x240>)
 800f354:	2200      	movs	r2, #0
 800f356:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f358:	4b08      	ldr	r3, [pc, #32]	; (800f37c <ip4_input+0x240>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f35e:	4b07      	ldr	r3, [pc, #28]	; (800f37c <ip4_input+0x240>)
 800f360:	2200      	movs	r2, #0
 800f362:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f364:	4b05      	ldr	r3, [pc, #20]	; (800f37c <ip4_input+0x240>)
 800f366:	2200      	movs	r2, #0
 800f368:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f36a:	4b04      	ldr	r3, [pc, #16]	; (800f37c <ip4_input+0x240>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	20007328 	.word	0x20007328
 800f380:	2000cbec 	.word	0x2000cbec

0800f384 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08a      	sub	sp, #40	; 0x28
 800f388:	af04      	add	r7, sp, #16
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d003      	beq.n	800f3aa <ip4_output_if+0x26>
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d102      	bne.n	800f3b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f3b0:	78fa      	ldrb	r2, [r7, #3]
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	9302      	str	r3, [sp, #8]
 800f3b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	6979      	ldr	r1, [r7, #20]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f000 f805 	bl	800f3d8 <ip4_output_if_src>
 800f3ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	7b9b      	ldrb	r3, [r3, #14]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d006      	beq.n	800f3fc <ip4_output_if_src+0x24>
 800f3ee:	4b4b      	ldr	r3, [pc, #300]	; (800f51c <ip4_output_if_src+0x144>)
 800f3f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f3f4:	494a      	ldr	r1, [pc, #296]	; (800f520 <ip4_output_if_src+0x148>)
 800f3f6:	484b      	ldr	r0, [pc, #300]	; (800f524 <ip4_output_if_src+0x14c>)
 800f3f8:	f001 f94a 	bl	8010690 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d060      	beq.n	800f4c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f402:	2314      	movs	r3, #20
 800f404:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f406:	2114      	movs	r1, #20
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7f8 fd67 	bl	8007edc <pbuf_add_header>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f414:	f06f 0301 	mvn.w	r3, #1
 800f418:	e07c      	b.n	800f514 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	895b      	ldrh	r3, [r3, #10]
 800f424:	2b13      	cmp	r3, #19
 800f426:	d806      	bhi.n	800f436 <ip4_output_if_src+0x5e>
 800f428:	4b3c      	ldr	r3, [pc, #240]	; (800f51c <ip4_output_if_src+0x144>)
 800f42a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f42e:	493e      	ldr	r1, [pc, #248]	; (800f528 <ip4_output_if_src+0x150>)
 800f430:	483c      	ldr	r0, [pc, #240]	; (800f524 <ip4_output_if_src+0x14c>)
 800f432:	f001 f92d 	bl	8010690 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	78fa      	ldrb	r2, [r7, #3]
 800f43a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f442:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f44c:	8b7b      	ldrh	r3, [r7, #26]
 800f44e:	089b      	lsrs	r3, r3, #2
 800f450:	b29b      	uxth	r3, r3
 800f452:	b2db      	uxtb	r3, r3
 800f454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f458:	b2da      	uxtb	r2, r3
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f464:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	891b      	ldrh	r3, [r3, #8]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f7 fa20 	bl	80068b0 <lwip_htons>
 800f470:	4603      	mov	r3, r0
 800f472:	461a      	mov	r2, r3
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	2200      	movs	r2, #0
 800f47c:	719a      	strb	r2, [r3, #6]
 800f47e:	2200      	movs	r2, #0
 800f480:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f482:	4b2a      	ldr	r3, [pc, #168]	; (800f52c <ip4_output_if_src+0x154>)
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	4618      	mov	r0, r3
 800f488:	f7f7 fa12 	bl	80068b0 <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	461a      	mov	r2, r3
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f494:	4b25      	ldr	r3, [pc, #148]	; (800f52c <ip4_output_if_src+0x154>)
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	3301      	adds	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	4b23      	ldr	r3, [pc, #140]	; (800f52c <ip4_output_if_src+0x154>)
 800f49e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d104      	bne.n	800f4b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f4a6:	4b22      	ldr	r3, [pc, #136]	; (800f530 <ip4_output_if_src+0x158>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e003      	b.n	800f4b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	729a      	strb	r2, [r3, #10]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	72da      	strb	r2, [r3, #11]
 800f4c2:	e00f      	b.n	800f4e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	2b13      	cmp	r3, #19
 800f4ca:	d802      	bhi.n	800f4d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f4cc:	f06f 0301 	mvn.w	r3, #1
 800f4d0:	e020      	b.n	800f514 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	691b      	ldr	r3, [r3, #16]
 800f4dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f4de:	f107 0314 	add.w	r3, r7, #20
 800f4e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00c      	beq.n	800f506 <ip4_output_if_src+0x12e>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	891a      	ldrh	r2, [r3, #8]
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d906      	bls.n	800f506 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	f000 fd4d 	bl	800ff9c <ip4_frag>
 800f502:	4603      	mov	r3, r0
 800f504:	e006      	b.n	800f514 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	695b      	ldr	r3, [r3, #20]
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	68f9      	ldr	r1, [r7, #12]
 800f50e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f510:	4798      	blx	r3
 800f512:	4603      	mov	r3, r0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3720      	adds	r7, #32
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	08013edc 	.word	0x08013edc
 800f520:	08013f10 	.word	0x08013f10
 800f524:	08013f1c 	.word	0x08013f1c
 800f528:	08013f44 	.word	0x08013f44
 800f52c:	200041ce 	.word	0x200041ce
 800f530:	08014350 	.word	0x08014350

0800f534 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f548:	d002      	beq.n	800f550 <ip4_addr_isbroadcast_u32+0x1c>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f550:	2301      	movs	r3, #1
 800f552:	e02a      	b.n	800f5aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f55a:	f003 0302 	and.w	r3, r3, #2
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f562:	2300      	movs	r3, #0
 800f564:	e021      	b.n	800f5aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	3304      	adds	r3, #4
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d101      	bne.n	800f576 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f572:	2300      	movs	r3, #0
 800f574:	e019      	b.n	800f5aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	3304      	adds	r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	405a      	eors	r2, r3
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	3308      	adds	r3, #8
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4013      	ands	r3, r2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10d      	bne.n	800f5a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	3308      	adds	r3, #8
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	43da      	mvns	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	3308      	adds	r3, #8
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d101      	bne.n	800f5a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e000      	b.n	800f5aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f5a8:	2300      	movs	r3, #0
  }
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f5c2:	4b12      	ldr	r3, [pc, #72]	; (800f60c <ip_reass_tmr+0x54>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f5c8:	e018      	b.n	800f5fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	7fdb      	ldrb	r3, [r3, #31]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00b      	beq.n	800f5ea <ip_reass_tmr+0x32>
      r->timer--;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	7fdb      	ldrb	r3, [r3, #31]
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	60fb      	str	r3, [r7, #12]
 800f5e8:	e008      	b.n	800f5fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f5f4:	68b9      	ldr	r1, [r7, #8]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f80a 	bl	800f610 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1e3      	bne.n	800f5ca <ip_reass_tmr+0x12>
    }
  }
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	200041d0 	.word	0x200041d0

0800f610 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b088      	sub	sp, #32
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	429a      	cmp	r2, r3
 800f624:	d105      	bne.n	800f632 <ip_reass_free_complete_datagram+0x22>
 800f626:	4b45      	ldr	r3, [pc, #276]	; (800f73c <ip_reass_free_complete_datagram+0x12c>)
 800f628:	22ab      	movs	r2, #171	; 0xab
 800f62a:	4945      	ldr	r1, [pc, #276]	; (800f740 <ip_reass_free_complete_datagram+0x130>)
 800f62c:	4845      	ldr	r0, [pc, #276]	; (800f744 <ip_reass_free_complete_datagram+0x134>)
 800f62e:	f001 f82f 	bl	8010690 <iprintf>
  if (prev != NULL) {
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00a      	beq.n	800f64e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d005      	beq.n	800f64e <ip_reass_free_complete_datagram+0x3e>
 800f642:	4b3e      	ldr	r3, [pc, #248]	; (800f73c <ip_reass_free_complete_datagram+0x12c>)
 800f644:	22ad      	movs	r2, #173	; 0xad
 800f646:	4940      	ldr	r1, [pc, #256]	; (800f748 <ip_reass_free_complete_datagram+0x138>)
 800f648:	483e      	ldr	r0, [pc, #248]	; (800f744 <ip_reass_free_complete_datagram+0x134>)
 800f64a:	f001 f821 	bl	8010690 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	889b      	ldrh	r3, [r3, #4]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d12a      	bne.n	800f6b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	6858      	ldr	r0, [r3, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	3308      	adds	r3, #8
 800f676:	2214      	movs	r2, #20
 800f678:	4619      	mov	r1, r3
 800f67a:	f000 fff3 	bl	8010664 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f67e:	2101      	movs	r1, #1
 800f680:	69b8      	ldr	r0, [r7, #24]
 800f682:	f7ff fc47 	bl	800ef14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f686:	69b8      	ldr	r0, [r7, #24]
 800f688:	f7f8 fd4c 	bl	8008124 <pbuf_clen>
 800f68c:	4603      	mov	r3, r0
 800f68e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f690:	8bfa      	ldrh	r2, [r7, #30]
 800f692:	8a7b      	ldrh	r3, [r7, #18]
 800f694:	4413      	add	r3, r2
 800f696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f69a:	db05      	blt.n	800f6a8 <ip_reass_free_complete_datagram+0x98>
 800f69c:	4b27      	ldr	r3, [pc, #156]	; (800f73c <ip_reass_free_complete_datagram+0x12c>)
 800f69e:	22bc      	movs	r2, #188	; 0xbc
 800f6a0:	492a      	ldr	r1, [pc, #168]	; (800f74c <ip_reass_free_complete_datagram+0x13c>)
 800f6a2:	4828      	ldr	r0, [pc, #160]	; (800f744 <ip_reass_free_complete_datagram+0x134>)
 800f6a4:	f000 fff4 	bl	8010690 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6a8:	8bfa      	ldrh	r2, [r7, #30]
 800f6aa:	8a7b      	ldrh	r3, [r7, #18]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f6b0:	69b8      	ldr	r0, [r7, #24]
 800f6b2:	f7f8 fca9 	bl	8008008 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f6bc:	e01f      	b.n	800f6fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f7f8 fd28 	bl	8008124 <pbuf_clen>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f6d8:	8bfa      	ldrh	r2, [r7, #30]
 800f6da:	8a7b      	ldrh	r3, [r7, #18]
 800f6dc:	4413      	add	r3, r2
 800f6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6e2:	db05      	blt.n	800f6f0 <ip_reass_free_complete_datagram+0xe0>
 800f6e4:	4b15      	ldr	r3, [pc, #84]	; (800f73c <ip_reass_free_complete_datagram+0x12c>)
 800f6e6:	22cc      	movs	r2, #204	; 0xcc
 800f6e8:	4918      	ldr	r1, [pc, #96]	; (800f74c <ip_reass_free_complete_datagram+0x13c>)
 800f6ea:	4816      	ldr	r0, [pc, #88]	; (800f744 <ip_reass_free_complete_datagram+0x134>)
 800f6ec:	f000 ffd0 	bl	8010690 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f6f0:	8bfa      	ldrh	r2, [r7, #30]
 800f6f2:	8a7b      	ldrh	r3, [r7, #18]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f7f8 fc85 	bl	8008008 <pbuf_free>
  while (p != NULL) {
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1dc      	bne.n	800f6be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 f8c2 	bl	800f890 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f70c:	4b10      	ldr	r3, [pc, #64]	; (800f750 <ip_reass_free_complete_datagram+0x140>)
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	8bfa      	ldrh	r2, [r7, #30]
 800f712:	429a      	cmp	r2, r3
 800f714:	d905      	bls.n	800f722 <ip_reass_free_complete_datagram+0x112>
 800f716:	4b09      	ldr	r3, [pc, #36]	; (800f73c <ip_reass_free_complete_datagram+0x12c>)
 800f718:	22d2      	movs	r2, #210	; 0xd2
 800f71a:	490e      	ldr	r1, [pc, #56]	; (800f754 <ip_reass_free_complete_datagram+0x144>)
 800f71c:	4809      	ldr	r0, [pc, #36]	; (800f744 <ip_reass_free_complete_datagram+0x134>)
 800f71e:	f000 ffb7 	bl	8010690 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f722:	4b0b      	ldr	r3, [pc, #44]	; (800f750 <ip_reass_free_complete_datagram+0x140>)
 800f724:	881a      	ldrh	r2, [r3, #0]
 800f726:	8bfb      	ldrh	r3, [r7, #30]
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	4b08      	ldr	r3, [pc, #32]	; (800f750 <ip_reass_free_complete_datagram+0x140>)
 800f72e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f730:	8bfb      	ldrh	r3, [r7, #30]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3720      	adds	r7, #32
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	08013f74 	.word	0x08013f74
 800f740:	08013fb0 	.word	0x08013fb0
 800f744:	08013fbc 	.word	0x08013fbc
 800f748:	08013fe4 	.word	0x08013fe4
 800f74c:	08013ff8 	.word	0x08013ff8
 800f750:	200041d4 	.word	0x200041d4
 800f754:	08014018 	.word	0x08014018

0800f758 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08a      	sub	sp, #40	; 0x28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f762:	2300      	movs	r3, #0
 800f764:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f766:	2300      	movs	r3, #0
 800f768:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f76e:	2300      	movs	r3, #0
 800f770:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f776:	4b28      	ldr	r3, [pc, #160]	; (800f818 <ip_reass_remove_oldest_datagram+0xc0>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f77c:	e030      	b.n	800f7e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	695a      	ldr	r2, [r3, #20]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	429a      	cmp	r2, r3
 800f788:	d10c      	bne.n	800f7a4 <ip_reass_remove_oldest_datagram+0x4c>
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	699a      	ldr	r2, [r3, #24]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	429a      	cmp	r2, r3
 800f794:	d106      	bne.n	800f7a4 <ip_reass_remove_oldest_datagram+0x4c>
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	899a      	ldrh	r2, [r3, #12]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	889b      	ldrh	r3, [r3, #4]
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d014      	beq.n	800f7ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d104      	bne.n	800f7ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	61bb      	str	r3, [r7, #24]
 800f7b8:	e009      	b.n	800f7ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	7fda      	ldrb	r2, [r3, #31]
 800f7be:	6a3b      	ldr	r3, [r7, #32]
 800f7c0:	7fdb      	ldrb	r3, [r3, #31]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d803      	bhi.n	800f7ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d001      	beq.n	800f7da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1cb      	bne.n	800f77e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f7e6:	6a3b      	ldr	r3, [r7, #32]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d008      	beq.n	800f7fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f7ec:	69b9      	ldr	r1, [r7, #24]
 800f7ee:	6a38      	ldr	r0, [r7, #32]
 800f7f0:	f7ff ff0e 	bl	800f610 <ip_reass_free_complete_datagram>
 800f7f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	da02      	bge.n	800f80c <ip_reass_remove_oldest_datagram+0xb4>
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	dcac      	bgt.n	800f766 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f80c:	697b      	ldr	r3, [r7, #20]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3728      	adds	r7, #40	; 0x28
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	200041d0 	.word	0x200041d0

0800f81c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f826:	2004      	movs	r0, #4
 800f828:	f7f7 fcf8 	bl	800721c <memp_malloc>
 800f82c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d110      	bne.n	800f856 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff ff8e 	bl	800f758 <ip_reass_remove_oldest_datagram>
 800f83c:	4602      	mov	r2, r0
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	4293      	cmp	r3, r2
 800f842:	dc03      	bgt.n	800f84c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f844:	2004      	movs	r0, #4
 800f846:	f7f7 fce9 	bl	800721c <memp_malloc>
 800f84a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f852:	2300      	movs	r3, #0
 800f854:	e016      	b.n	800f884 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f856:	2220      	movs	r2, #32
 800f858:	2100      	movs	r1, #0
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f000 ff10 	bl	8010680 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	220f      	movs	r2, #15
 800f864:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <ip_reass_enqueue_new_datagram+0x70>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f86e:	4a07      	ldr	r2, [pc, #28]	; (800f88c <ip_reass_enqueue_new_datagram+0x70>)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	3308      	adds	r3, #8
 800f878:	2214      	movs	r2, #20
 800f87a:	6879      	ldr	r1, [r7, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fef1 	bl	8010664 <memcpy>
  return ipr;
 800f882:	68fb      	ldr	r3, [r7, #12]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	200041d0 	.word	0x200041d0

0800f890 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f89a:	4b10      	ldr	r3, [pc, #64]	; (800f8dc <ip_reass_dequeue_datagram+0x4c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d104      	bne.n	800f8ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	4a0c      	ldr	r2, [pc, #48]	; (800f8dc <ip_reass_dequeue_datagram+0x4c>)
 800f8aa:	6013      	str	r3, [r2, #0]
 800f8ac:	e00d      	b.n	800f8ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d106      	bne.n	800f8c2 <ip_reass_dequeue_datagram+0x32>
 800f8b4:	4b0a      	ldr	r3, [pc, #40]	; (800f8e0 <ip_reass_dequeue_datagram+0x50>)
 800f8b6:	f240 1245 	movw	r2, #325	; 0x145
 800f8ba:	490a      	ldr	r1, [pc, #40]	; (800f8e4 <ip_reass_dequeue_datagram+0x54>)
 800f8bc:	480a      	ldr	r0, [pc, #40]	; (800f8e8 <ip_reass_dequeue_datagram+0x58>)
 800f8be:	f000 fee7 	bl	8010690 <iprintf>
    prev->next = ipr->next;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	2004      	movs	r0, #4
 800f8ce:	f7f7 fcf7 	bl	80072c0 <memp_free>
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	200041d0 	.word	0x200041d0
 800f8e0:	08013f74 	.word	0x08013f74
 800f8e4:	0801403c 	.word	0x0801403c
 800f8e8:	08013fbc 	.word	0x08013fbc

0800f8ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08c      	sub	sp, #48	; 0x30
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	885b      	ldrh	r3, [r3, #2]
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7f6 ffcf 	bl	80068b0 <lwip_htons>
 800f912:	4603      	mov	r3, r0
 800f914:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	f003 030f 	and.w	r3, r3, #15
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f924:	7e7b      	ldrb	r3, [r7, #25]
 800f926:	b29b      	uxth	r3, r3
 800f928:	8b7a      	ldrh	r2, [r7, #26]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d202      	bcs.n	800f934 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f92e:	f04f 33ff 	mov.w	r3, #4294967295
 800f932:	e135      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f934:	7e7b      	ldrb	r3, [r7, #25]
 800f936:	b29b      	uxth	r3, r3
 800f938:	8b7a      	ldrh	r2, [r7, #26]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	88db      	ldrh	r3, [r3, #6]
 800f942:	b29b      	uxth	r3, r3
 800f944:	4618      	mov	r0, r3
 800f946:	f7f6 ffb3 	bl	80068b0 <lwip_htons>
 800f94a:	4603      	mov	r3, r0
 800f94c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f950:	b29b      	uxth	r3, r3
 800f952:	00db      	lsls	r3, r3, #3
 800f954:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	2200      	movs	r2, #0
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	2200      	movs	r2, #0
 800f964:	705a      	strb	r2, [r3, #1]
 800f966:	2200      	movs	r2, #0
 800f968:	709a      	strb	r2, [r3, #2]
 800f96a:	2200      	movs	r2, #0
 800f96c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f970:	8afa      	ldrh	r2, [r7, #22]
 800f972:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f974:	8afa      	ldrh	r2, [r7, #22]
 800f976:	8b7b      	ldrh	r3, [r7, #26]
 800f978:	4413      	add	r3, r2
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	88db      	ldrh	r3, [r3, #6]
 800f984:	b29b      	uxth	r3, r3
 800f986:	8afa      	ldrh	r2, [r7, #22]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d902      	bls.n	800f992 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f98c:	f04f 33ff 	mov.w	r3, #4294967295
 800f990:	e106      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	627b      	str	r3, [r7, #36]	; 0x24
 800f998:	e068      	b.n	800fa6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	889b      	ldrh	r3, [r3, #4]
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	889b      	ldrh	r3, [r3, #4]
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d235      	bcs.n	800fa1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d020      	beq.n	800f9fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9be:	889b      	ldrh	r3, [r3, #4]
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c4:	88db      	ldrh	r3, [r3, #6]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d307      	bcc.n	800f9dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ce:	88db      	ldrh	r3, [r3, #6]
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	889b      	ldrh	r3, [r3, #4]
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d902      	bls.n	800f9e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e0:	e0de      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	88db      	ldrh	r3, [r3, #6]
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	889b      	ldrh	r3, [r3, #4]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d03d      	beq.n	800fa74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f9fc:	e03a      	b.n	800fa74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa00:	88db      	ldrh	r3, [r3, #6]
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	889b      	ldrh	r3, [r3, #4]
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d902      	bls.n	800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fa12:	e0c5      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	605a      	str	r2, [r3, #4]
      break;
 800fa1a:	e02b      	b.n	800fa74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	889b      	ldrh	r3, [r3, #4]
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	889b      	ldrh	r3, [r3, #4]
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d102      	bne.n	800fa32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa30:	e0b6      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	889b      	ldrh	r3, [r3, #4]
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	88db      	ldrh	r3, [r3, #6]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d202      	bcs.n	800fa48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295
 800fa46:	e0ab      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d009      	beq.n	800fa62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	88db      	ldrh	r3, [r3, #6]
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	889b      	ldrh	r3, [r3, #4]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d001      	beq.n	800fa62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d193      	bne.n	800f99a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fa72:	e000      	b.n	800fa76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fa74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d12d      	bne.n	800fad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d01c      	beq.n	800fabc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	88db      	ldrh	r3, [r3, #6]
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	889b      	ldrh	r3, [r3, #4]
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d906      	bls.n	800faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fa92:	4b45      	ldr	r3, [pc, #276]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa94:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fa98:	4944      	ldr	r1, [pc, #272]	; (800fbac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fa9a:	4845      	ldr	r0, [pc, #276]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa9c:	f000 fdf8 	bl	8010690 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800faa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa8:	88db      	ldrh	r3, [r3, #6]
 800faaa:	b29a      	uxth	r2, r3
 800faac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faae:	889b      	ldrh	r3, [r3, #4]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d010      	beq.n	800fad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	623b      	str	r3, [r7, #32]
 800faba:	e00d      	b.n	800fad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fac4:	4b38      	ldr	r3, [pc, #224]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fac6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800faca:	493a      	ldr	r1, [pc, #232]	; (800fbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800facc:	4838      	ldr	r0, [pc, #224]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800face:	f000 fddf 	bl	8010690 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d105      	bne.n	800faea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	7f9b      	ldrb	r3, [r3, #30]
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d059      	beq.n	800fb9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800faea:	6a3b      	ldr	r3, [r7, #32]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d04f      	beq.n	800fb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d006      	beq.n	800fb06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	889b      	ldrh	r3, [r3, #4]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	623b      	str	r3, [r7, #32]
 800fb0a:	e041      	b.n	800fb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb16:	e012      	b.n	800fb3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	88db      	ldrh	r3, [r3, #6]
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	889b      	ldrh	r3, [r3, #4]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d002      	beq.n	800fb34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	623b      	str	r3, [r7, #32]
            break;
 800fb32:	e007      	b.n	800fb44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1e9      	bne.n	800fb18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d022      	beq.n	800fb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d106      	bne.n	800fb60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fb52:	4b15      	ldr	r3, [pc, #84]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb54:	f240 12df 	movw	r2, #479	; 0x1df
 800fb58:	4917      	ldr	r1, [pc, #92]	; (800fbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb5a:	4815      	ldr	r0, [pc, #84]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb5c:	f000 fd98 	bl	8010690 <iprintf>
          LWIP_ASSERT("sanity check",
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d106      	bne.n	800fb7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fb72:	4911      	ldr	r1, [pc, #68]	; (800fbb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb74:	480e      	ldr	r0, [pc, #56]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb76:	f000 fd8b 	bl	8010690 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d006      	beq.n	800fb90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fb82:	4b09      	ldr	r3, [pc, #36]	; (800fba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb84:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fb88:	490c      	ldr	r1, [pc, #48]	; (800fbbc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fb8a:	4809      	ldr	r0, [pc, #36]	; (800fbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb8c:	f000 fd80 	bl	8010690 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fb90:	6a3b      	ldr	r3, [r7, #32]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	bf14      	ite	ne
 800fb96:	2301      	movne	r3, #1
 800fb98:	2300      	moveq	r3, #0
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	e000      	b.n	800fba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3730      	adds	r7, #48	; 0x30
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	08013f74 	.word	0x08013f74
 800fbac:	08014058 	.word	0x08014058
 800fbb0:	08013fbc 	.word	0x08013fbc
 800fbb4:	08014078 	.word	0x08014078
 800fbb8:	080140b0 	.word	0x080140b0
 800fbbc:	080140c0 	.word	0x080140c0

0800fbc0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b08e      	sub	sp, #56	; 0x38
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	f003 030f 	and.w	r3, r3, #15
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b14      	cmp	r3, #20
 800fbde:	f040 8167 	bne.w	800feb0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe4:	88db      	ldrh	r3, [r3, #6]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7f6 fe61 	bl	80068b0 <lwip_htons>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	00db      	lsls	r3, r3, #3
 800fbf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfc:	885b      	ldrh	r3, [r3, #2]
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f6 fe55 	bl	80068b0 <lwip_htons>
 800fc06:	4603      	mov	r3, r0
 800fc08:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	f003 030f 	and.w	r3, r3, #15
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fc1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc22:	429a      	cmp	r2, r3
 800fc24:	f0c0 8146 	bcc.w	800feb4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fc28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f7f8 fa75 	bl	8008124 <pbuf_clen>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fc3e:	4b9f      	ldr	r3, [pc, #636]	; (800febc <ip4_reass+0x2fc>)
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	8c3b      	ldrh	r3, [r7, #32]
 800fc46:	4413      	add	r3, r2
 800fc48:	2b0a      	cmp	r3, #10
 800fc4a:	dd10      	ble.n	800fc6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc4c:	8c3b      	ldrh	r3, [r7, #32]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc52:	f7ff fd81 	bl	800f758 <ip_reass_remove_oldest_datagram>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f000 812d 	beq.w	800feb8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fc5e:	4b97      	ldr	r3, [pc, #604]	; (800febc <ip4_reass+0x2fc>)
 800fc60:	881b      	ldrh	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	8c3b      	ldrh	r3, [r7, #32]
 800fc66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc68:	2b0a      	cmp	r3, #10
 800fc6a:	f300 8125 	bgt.w	800feb8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc6e:	4b94      	ldr	r3, [pc, #592]	; (800fec0 <ip4_reass+0x300>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	633b      	str	r3, [r7, #48]	; 0x30
 800fc74:	e015      	b.n	800fca2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	695a      	ldr	r2, [r3, #20]
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d10c      	bne.n	800fc9c <ip4_reass+0xdc>
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	699a      	ldr	r2, [r3, #24]
 800fc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d106      	bne.n	800fc9c <ip4_reass+0xdc>
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	899a      	ldrh	r2, [r3, #12]
 800fc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc94:	889b      	ldrh	r3, [r3, #4]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d006      	beq.n	800fcaa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	633b      	str	r3, [r7, #48]	; 0x30
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1e6      	bne.n	800fc76 <ip4_reass+0xb6>
 800fca8:	e000      	b.n	800fcac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fcaa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d109      	bne.n	800fcc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fcb2:	8c3b      	ldrh	r3, [r7, #32]
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb8:	f7ff fdb0 	bl	800f81c <ip_reass_enqueue_new_datagram>
 800fcbc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d11c      	bne.n	800fcfe <ip4_reass+0x13e>
      goto nullreturn;
 800fcc4:	e109      	b.n	800feda <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc8:	88db      	ldrh	r3, [r3, #6]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7f6 fdef 	bl	80068b0 <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d110      	bne.n	800fcfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcde:	89db      	ldrh	r3, [r3, #14]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7f6 fde5 	bl	80068b0 <lwip_htons>
 800fce6:	4603      	mov	r3, r0
 800fce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d006      	beq.n	800fcfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	3308      	adds	r3, #8
 800fcf4:	2214      	movs	r2, #20
 800fcf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f000 fcb3 	bl	8010664 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd00:	88db      	ldrh	r3, [r3, #6]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	f003 0320 	and.w	r3, r3, #32
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	bf0c      	ite	eq
 800fd0c:	2301      	moveq	r3, #1
 800fd0e:	2300      	movne	r3, #0
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00e      	beq.n	800fd38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd1e:	4413      	add	r3, r2
 800fd20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fd22:	8b7a      	ldrh	r2, [r7, #26]
 800fd24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fd26:	429a      	cmp	r2, r3
 800fd28:	f0c0 80a0 	bcc.w	800fe6c <ip4_reass+0x2ac>
 800fd2c:	8b7b      	ldrh	r3, [r7, #26]
 800fd2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fd32:	4293      	cmp	r3, r2
 800fd34:	f200 809a 	bhi.w	800fe6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	6879      	ldr	r1, [r7, #4]
 800fd3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd3e:	f7ff fdd5 	bl	800f8ec <ip_reass_chain_frag_into_datagram_and_validate>
 800fd42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4a:	f000 8091 	beq.w	800fe70 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fd4e:	4b5b      	ldr	r3, [pc, #364]	; (800febc <ip4_reass+0x2fc>)
 800fd50:	881a      	ldrh	r2, [r3, #0]
 800fd52:	8c3b      	ldrh	r3, [r7, #32]
 800fd54:	4413      	add	r3, r2
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	4b58      	ldr	r3, [pc, #352]	; (800febc <ip4_reass+0x2fc>)
 800fd5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00d      	beq.n	800fd7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd66:	4413      	add	r3, r2
 800fd68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	8a7a      	ldrh	r2, [r7, #18]
 800fd6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	7f9b      	ldrb	r3, [r3, #30]
 800fd74:	f043 0301 	orr.w	r3, r3, #1
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d171      	bne.n	800fe68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	8b9b      	ldrh	r3, [r3, #28]
 800fd88:	3314      	adds	r3, #20
 800fd8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda0:	3308      	adds	r3, #8
 800fda2:	2214      	movs	r2, #20
 800fda4:	4619      	mov	r1, r3
 800fda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fda8:	f000 fc5c 	bl	8010664 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fdac:	8a3b      	ldrh	r3, [r7, #16]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7f6 fd7e 	bl	80068b0 <lwip_htons>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	719a      	strb	r2, [r3, #6]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc8:	2200      	movs	r2, #0
 800fdca:	729a      	strb	r2, [r3, #10]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fdd6:	e00d      	b.n	800fdf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fdde:	2114      	movs	r1, #20
 800fde0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fde2:	f7f8 f88b 	bl	8007efc <pbuf_remove_header>
      pbuf_cat(p, r);
 800fde6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7f8 f9db 	bl	80081a4 <pbuf_cat>
      r = iprh->next_pbuf;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1ee      	bne.n	800fdd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fdfa:	4b31      	ldr	r3, [pc, #196]	; (800fec0 <ip4_reass+0x300>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d102      	bne.n	800fe0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fe04:	2300      	movs	r3, #0
 800fe06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe08:	e010      	b.n	800fe2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe0a:	4b2d      	ldr	r3, [pc, #180]	; (800fec0 <ip4_reass+0x300>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe10:	e007      	b.n	800fe22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fe12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d006      	beq.n	800fe2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1f4      	bne.n	800fe12 <ip4_reass+0x252>
 800fe28:	e000      	b.n	800fe2c <ip4_reass+0x26c>
          break;
 800fe2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fe2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe30:	f7ff fd2e 	bl	800f890 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7f8 f975 	bl	8008124 <pbuf_clen>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fe3e:	4b1f      	ldr	r3, [pc, #124]	; (800febc <ip4_reass+0x2fc>)
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	8c3a      	ldrh	r2, [r7, #32]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d906      	bls.n	800fe56 <ip4_reass+0x296>
 800fe48:	4b1e      	ldr	r3, [pc, #120]	; (800fec4 <ip4_reass+0x304>)
 800fe4a:	f240 229b 	movw	r2, #667	; 0x29b
 800fe4e:	491e      	ldr	r1, [pc, #120]	; (800fec8 <ip4_reass+0x308>)
 800fe50:	481e      	ldr	r0, [pc, #120]	; (800fecc <ip4_reass+0x30c>)
 800fe52:	f000 fc1d 	bl	8010690 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fe56:	4b19      	ldr	r3, [pc, #100]	; (800febc <ip4_reass+0x2fc>)
 800fe58:	881a      	ldrh	r2, [r3, #0]
 800fe5a:	8c3b      	ldrh	r3, [r7, #32]
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	4b16      	ldr	r3, [pc, #88]	; (800febc <ip4_reass+0x2fc>)
 800fe62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	e03c      	b.n	800fee2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e03a      	b.n	800fee2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800fe6c:	bf00      	nop
 800fe6e:	e000      	b.n	800fe72 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fe70:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fe72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d106      	bne.n	800fe86 <ip4_reass+0x2c6>
 800fe78:	4b12      	ldr	r3, [pc, #72]	; (800fec4 <ip4_reass+0x304>)
 800fe7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fe7e:	4914      	ldr	r1, [pc, #80]	; (800fed0 <ip4_reass+0x310>)
 800fe80:	4812      	ldr	r0, [pc, #72]	; (800fecc <ip4_reass+0x30c>)
 800fe82:	f000 fc05 	bl	8010690 <iprintf>
  if (ipr->p == NULL) {
 800fe86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d124      	bne.n	800fed8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	; (800fec0 <ip4_reass+0x300>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d006      	beq.n	800fea6 <ip4_reass+0x2e6>
 800fe98:	4b0a      	ldr	r3, [pc, #40]	; (800fec4 <ip4_reass+0x304>)
 800fe9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fe9e:	490d      	ldr	r1, [pc, #52]	; (800fed4 <ip4_reass+0x314>)
 800fea0:	480a      	ldr	r0, [pc, #40]	; (800fecc <ip4_reass+0x30c>)
 800fea2:	f000 fbf5 	bl	8010690 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fea6:	2100      	movs	r1, #0
 800fea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feaa:	f7ff fcf1 	bl	800f890 <ip_reass_dequeue_datagram>
 800feae:	e014      	b.n	800feda <ip4_reass+0x31a>
    goto nullreturn;
 800feb0:	bf00      	nop
 800feb2:	e012      	b.n	800feda <ip4_reass+0x31a>
    goto nullreturn;
 800feb4:	bf00      	nop
 800feb6:	e010      	b.n	800feda <ip4_reass+0x31a>
      goto nullreturn;
 800feb8:	bf00      	nop
 800feba:	e00e      	b.n	800feda <ip4_reass+0x31a>
 800febc:	200041d4 	.word	0x200041d4
 800fec0:	200041d0 	.word	0x200041d0
 800fec4:	08013f74 	.word	0x08013f74
 800fec8:	080140e4 	.word	0x080140e4
 800fecc:	08013fbc 	.word	0x08013fbc
 800fed0:	08014100 	.word	0x08014100
 800fed4:	0801410c 	.word	0x0801410c
  }

nullreturn:
 800fed8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7f8 f894 	bl	8008008 <pbuf_free>
  return NULL;
 800fee0:	2300      	movs	r3, #0
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3738      	adds	r7, #56	; 0x38
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop

0800feec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fef0:	2005      	movs	r0, #5
 800fef2:	f7f7 f993 	bl	800721c <memp_malloc>
 800fef6:	4603      	mov	r3, r0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d106      	bne.n	800ff18 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ff0a:	4b07      	ldr	r3, [pc, #28]	; (800ff28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ff0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ff10:	4906      	ldr	r1, [pc, #24]	; (800ff2c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ff12:	4807      	ldr	r0, [pc, #28]	; (800ff30 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ff14:	f000 fbbc 	bl	8010690 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ff18:	6879      	ldr	r1, [r7, #4]
 800ff1a:	2005      	movs	r0, #5
 800ff1c:	f7f7 f9d0 	bl	80072c0 <memp_free>
}
 800ff20:	bf00      	nop
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	08013f74 	.word	0x08013f74
 800ff2c:	0801412c 	.word	0x0801412c
 800ff30:	08013fbc 	.word	0x08013fbc

0800ff34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <ipfrag_free_pbuf_custom+0x20>
 800ff46:	4b11      	ldr	r3, [pc, #68]	; (800ff8c <ipfrag_free_pbuf_custom+0x58>)
 800ff48:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ff4c:	4910      	ldr	r1, [pc, #64]	; (800ff90 <ipfrag_free_pbuf_custom+0x5c>)
 800ff4e:	4811      	ldr	r0, [pc, #68]	; (800ff94 <ipfrag_free_pbuf_custom+0x60>)
 800ff50:	f000 fb9e 	bl	8010690 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d006      	beq.n	800ff6a <ipfrag_free_pbuf_custom+0x36>
 800ff5c:	4b0b      	ldr	r3, [pc, #44]	; (800ff8c <ipfrag_free_pbuf_custom+0x58>)
 800ff5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ff62:	490d      	ldr	r1, [pc, #52]	; (800ff98 <ipfrag_free_pbuf_custom+0x64>)
 800ff64:	480b      	ldr	r0, [pc, #44]	; (800ff94 <ipfrag_free_pbuf_custom+0x60>)
 800ff66:	f000 fb93 	bl	8010690 <iprintf>
  if (pcr->original != NULL) {
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d004      	beq.n	800ff7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7f8 f846 	bl	8008008 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7ff ffbd 	bl	800fefc <ip_frag_free_pbuf_custom_ref>
}
 800ff82:	bf00      	nop
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	08013f74 	.word	0x08013f74
 800ff90:	08014138 	.word	0x08014138
 800ff94:	08013fbc 	.word	0x08013fbc
 800ff98:	08014144 	.word	0x08014144

0800ff9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b094      	sub	sp, #80	; 0x50
 800ffa0:	af02      	add	r7, sp, #8
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ffb2:	3b14      	subs	r3, #20
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da00      	bge.n	800ffba <ip4_frag+0x1e>
 800ffb8:	3307      	adds	r3, #7
 800ffba:	10db      	asrs	r3, r3, #3
 800ffbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ffbe:	2314      	movs	r3, #20
 800ffc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	f003 030f 	and.w	r3, r3, #15
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b14      	cmp	r3, #20
 800ffdc:	d002      	beq.n	800ffe4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ffde:	f06f 0305 	mvn.w	r3, #5
 800ffe2:	e110      	b.n	8010206 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	895b      	ldrh	r3, [r3, #10]
 800ffe8:	2b13      	cmp	r3, #19
 800ffea:	d809      	bhi.n	8010000 <ip4_frag+0x64>
 800ffec:	4b88      	ldr	r3, [pc, #544]	; (8010210 <ip4_frag+0x274>)
 800ffee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fff2:	4988      	ldr	r1, [pc, #544]	; (8010214 <ip4_frag+0x278>)
 800fff4:	4888      	ldr	r0, [pc, #544]	; (8010218 <ip4_frag+0x27c>)
 800fff6:	f000 fb4b 	bl	8010690 <iprintf>
 800fffa:	f06f 0305 	mvn.w	r3, #5
 800fffe:	e102      	b.n	8010206 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010002:	88db      	ldrh	r3, [r3, #6]
 8010004:	b29b      	uxth	r3, r3
 8010006:	4618      	mov	r0, r3
 8010008:	f7f6 fc52 	bl	80068b0 <lwip_htons>
 801000c:	4603      	mov	r3, r0
 801000e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801001a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801001c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010020:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	891b      	ldrh	r3, [r3, #8]
 8010026:	3b14      	subs	r3, #20
 8010028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801002c:	e0e1      	b.n	80101f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801002e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	b29b      	uxth	r3, r3
 8010034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010038:	4293      	cmp	r3, r2
 801003a:	bf28      	it	cs
 801003c:	4613      	movcs	r3, r2
 801003e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010040:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010044:	2114      	movs	r1, #20
 8010046:	200e      	movs	r0, #14
 8010048:	f7f7 fcfa 	bl	8007a40 <pbuf_alloc>
 801004c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 80d5 	beq.w	8010200 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	895b      	ldrh	r3, [r3, #10]
 801005a:	2b13      	cmp	r3, #19
 801005c:	d806      	bhi.n	801006c <ip4_frag+0xd0>
 801005e:	4b6c      	ldr	r3, [pc, #432]	; (8010210 <ip4_frag+0x274>)
 8010060:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010064:	496d      	ldr	r1, [pc, #436]	; (801021c <ip4_frag+0x280>)
 8010066:	486c      	ldr	r0, [pc, #432]	; (8010218 <ip4_frag+0x27c>)
 8010068:	f000 fb12 	bl	8010690 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	2214      	movs	r2, #20
 8010072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010074:	4618      	mov	r0, r3
 8010076:	f000 faf5 	bl	8010664 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010080:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010082:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010086:	e064      	b.n	8010152 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	895a      	ldrh	r2, [r3, #10]
 801008c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801008e:	1ad3      	subs	r3, r2, r3
 8010090:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	895b      	ldrh	r3, [r3, #10]
 8010096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010098:	429a      	cmp	r2, r3
 801009a:	d906      	bls.n	80100aa <ip4_frag+0x10e>
 801009c:	4b5c      	ldr	r3, [pc, #368]	; (8010210 <ip4_frag+0x274>)
 801009e:	f240 322d 	movw	r2, #813	; 0x32d
 80100a2:	495f      	ldr	r1, [pc, #380]	; (8010220 <ip4_frag+0x284>)
 80100a4:	485c      	ldr	r0, [pc, #368]	; (8010218 <ip4_frag+0x27c>)
 80100a6:	f000 faf3 	bl	8010690 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80100aa:	8bfa      	ldrh	r2, [r7, #30]
 80100ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80100b0:	4293      	cmp	r3, r2
 80100b2:	bf28      	it	cs
 80100b4:	4613      	movcs	r3, r2
 80100b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80100ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d105      	bne.n	80100ce <ip4_frag+0x132>
        poff = 0;
 80100c2:	2300      	movs	r3, #0
 80100c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]
        continue;
 80100cc:	e041      	b.n	8010152 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80100ce:	f7ff ff0d 	bl	800feec <ip_frag_alloc_pbuf_custom_ref>
 80100d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d103      	bne.n	80100e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80100da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100dc:	f7f7 ff94 	bl	8008008 <pbuf_free>
        goto memerr;
 80100e0:	e08f      	b.n	8010202 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80100e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80100e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80100ea:	4413      	add	r3, r2
 80100ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80100f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80100f4:	9201      	str	r2, [sp, #4]
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	4603      	mov	r3, r0
 80100fa:	2241      	movs	r2, #65	; 0x41
 80100fc:	2000      	movs	r0, #0
 80100fe:	f7f7 fdc9 	bl	8007c94 <pbuf_alloced_custom>
 8010102:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801010a:	69b8      	ldr	r0, [r7, #24]
 801010c:	f7ff fef6 	bl	800fefc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010112:	f7f7 ff79 	bl	8008008 <pbuf_free>
        goto memerr;
 8010116:	e074      	b.n	8010202 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f7f8 f81b 	bl	8008154 <pbuf_ref>
      pcr->original = p;
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	4a3f      	ldr	r2, [pc, #252]	; (8010224 <ip4_frag+0x288>)
 8010128:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801012a:	6979      	ldr	r1, [r7, #20]
 801012c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801012e:	f7f8 f839 	bl	80081a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010132:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010140:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <ip4_frag+0x1b6>
        poff = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010152:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010156:	2b00      	cmp	r3, #0
 8010158:	d196      	bne.n	8010088 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801015a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801015c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010160:	4413      	add	r3, r2
 8010162:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010168:	f1a3 0213 	sub.w	r2, r3, #19
 801016c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010170:	429a      	cmp	r2, r3
 8010172:	bfcc      	ite	gt
 8010174:	2301      	movgt	r3, #1
 8010176:	2300      	movle	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801017c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010184:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <ip4_frag+0x1f6>
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	2b00      	cmp	r3, #0
 8010190:	d003      	beq.n	801019a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010198:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801019a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801019c:	4618      	mov	r0, r3
 801019e:	f7f6 fb87 	bl	80068b0 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80101aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101ac:	3314      	adds	r3, #20
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7f6 fb7d 	bl	80068b0 <lwip_htons>
 80101b6:	4603      	mov	r3, r0
 80101b8:	461a      	mov	r2, r3
 80101ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	2200      	movs	r2, #0
 80101c2:	729a      	strb	r2, [r3, #10]
 80101c4:	2200      	movs	r2, #0
 80101c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	695b      	ldr	r3, [r3, #20]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101d0:	68b8      	ldr	r0, [r7, #8]
 80101d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80101d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101d6:	f7f7 ff17 	bl	8008008 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80101da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80101e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80101ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80101ec:	4413      	add	r3, r2
 80101ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80101f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f47f af19 	bne.w	801002e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80101fc:	2300      	movs	r3, #0
 80101fe:	e002      	b.n	8010206 <ip4_frag+0x26a>
      goto memerr;
 8010200:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010206:	4618      	mov	r0, r3
 8010208:	3748      	adds	r7, #72	; 0x48
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	08013f74 	.word	0x08013f74
 8010214:	08014150 	.word	0x08014150
 8010218:	08013fbc 	.word	0x08013fbc
 801021c:	0801416c 	.word	0x0801416c
 8010220:	0801418c 	.word	0x0801418c
 8010224:	0800ff35 	.word	0x0800ff35

08010228 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010232:	230e      	movs	r3, #14
 8010234:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	895b      	ldrh	r3, [r3, #10]
 801023a:	2b0e      	cmp	r3, #14
 801023c:	d96e      	bls.n	801031c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	7bdb      	ldrb	r3, [r3, #15]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d106      	bne.n	8010254 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801024c:	3301      	adds	r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	7b1a      	ldrb	r2, [r3, #12]
 801025e:	7b5b      	ldrb	r3, [r3, #13]
 8010260:	021b      	lsls	r3, r3, #8
 8010262:	4313      	orrs	r3, r2
 8010264:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b00      	cmp	r3, #0
 8010270:	d023      	beq.n	80102ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d10f      	bne.n	801029a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	785b      	ldrb	r3, [r3, #1]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d11b      	bne.n	80102ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010286:	2b5e      	cmp	r3, #94	; 0x5e
 8010288:	d117      	bne.n	80102ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	7b5b      	ldrb	r3, [r3, #13]
 801028e:	f043 0310 	orr.w	r3, r3, #16
 8010292:	b2da      	uxtb	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	735a      	strb	r2, [r3, #13]
 8010298:	e00f      	b.n	80102ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2206      	movs	r2, #6
 801029e:	4928      	ldr	r1, [pc, #160]	; (8010340 <ethernet_input+0x118>)
 80102a0:	4618      	mov	r0, r3
 80102a2:	f000 f9d1 	bl	8010648 <memcmp>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d106      	bne.n	80102ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	7b5b      	ldrb	r3, [r3, #13]
 80102b0:	f043 0308 	orr.w	r3, r3, #8
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80102ba:	89fb      	ldrh	r3, [r7, #14]
 80102bc:	2b08      	cmp	r3, #8
 80102be:	d003      	beq.n	80102c8 <ethernet_input+0xa0>
 80102c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80102c4:	d014      	beq.n	80102f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80102c6:	e032      	b.n	801032e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102ce:	f003 0308 	and.w	r3, r3, #8
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d024      	beq.n	8010320 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80102d6:	8afb      	ldrh	r3, [r7, #22]
 80102d8:	4619      	mov	r1, r3
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7f7 fe0e 	bl	8007efc <pbuf_remove_header>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d11e      	bne.n	8010324 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80102e6:	6839      	ldr	r1, [r7, #0]
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7fe ff27 	bl	800f13c <ip4_input>
      break;
 80102ee:	e013      	b.n	8010318 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80102f6:	f003 0308 	and.w	r3, r3, #8
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d014      	beq.n	8010328 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80102fe:	8afb      	ldrh	r3, [r7, #22]
 8010300:	4619      	mov	r1, r3
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7f7 fdfa 	bl	8007efc <pbuf_remove_header>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d10e      	bne.n	801032c <ethernet_input+0x104>
        etharp_input(p, netif);
 801030e:	6839      	ldr	r1, [r7, #0]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7fe f8c7 	bl	800e4a4 <etharp_input>
      break;
 8010316:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	e00c      	b.n	8010336 <ethernet_input+0x10e>
    goto free_and_return;
 801031c:	bf00      	nop
 801031e:	e006      	b.n	801032e <ethernet_input+0x106>
        goto free_and_return;
 8010320:	bf00      	nop
 8010322:	e004      	b.n	801032e <ethernet_input+0x106>
        goto free_and_return;
 8010324:	bf00      	nop
 8010326:	e002      	b.n	801032e <ethernet_input+0x106>
        goto free_and_return;
 8010328:	bf00      	nop
 801032a:	e000      	b.n	801032e <ethernet_input+0x106>
        goto free_and_return;
 801032c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7f7 fe6a 	bl	8008008 <pbuf_free>
  return ERR_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	08014354 	.word	0x08014354

08010344 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
 8010350:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010352:	8c3b      	ldrh	r3, [r7, #32]
 8010354:	4618      	mov	r0, r3
 8010356:	f7f6 faab 	bl	80068b0 <lwip_htons>
 801035a:	4603      	mov	r3, r0
 801035c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801035e:	210e      	movs	r1, #14
 8010360:	68b8      	ldr	r0, [r7, #8]
 8010362:	f7f7 fdbb 	bl	8007edc <pbuf_add_header>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d125      	bne.n	80103b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	8afa      	ldrh	r2, [r7, #22]
 8010376:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	2206      	movs	r2, #6
 801037c:	6839      	ldr	r1, [r7, #0]
 801037e:	4618      	mov	r0, r3
 8010380:	f000 f970 	bl	8010664 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	3306      	adds	r3, #6
 8010388:	2206      	movs	r2, #6
 801038a:	6879      	ldr	r1, [r7, #4]
 801038c:	4618      	mov	r0, r3
 801038e:	f000 f969 	bl	8010664 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010398:	2b06      	cmp	r3, #6
 801039a:	d006      	beq.n	80103aa <ethernet_output+0x66>
 801039c:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <ethernet_output+0x84>)
 801039e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80103a2:	490a      	ldr	r1, [pc, #40]	; (80103cc <ethernet_output+0x88>)
 80103a4:	480a      	ldr	r0, [pc, #40]	; (80103d0 <ethernet_output+0x8c>)
 80103a6:	f000 f973 	bl	8010690 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	699b      	ldr	r3, [r3, #24]
 80103ae:	68b9      	ldr	r1, [r7, #8]
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	4798      	blx	r3
 80103b4:	4603      	mov	r3, r0
 80103b6:	e002      	b.n	80103be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80103b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80103ba:	f06f 0301 	mvn.w	r3, #1
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3718      	adds	r7, #24
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	0801419c 	.word	0x0801419c
 80103cc:	080141d4 	.word	0x080141d4
 80103d0:	08014208 	.word	0x08014208

080103d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b086      	sub	sp, #24
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	60bb      	str	r3, [r7, #8]
 80103e2:	2304      	movs	r3, #4
 80103e4:	60fb      	str	r3, [r7, #12]
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80103ee:	f107 0308 	add.w	r3, r7, #8
 80103f2:	2100      	movs	r1, #0
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7f3 fb39 	bl	8003a6c <osMessageCreate>
 80103fa:	4602      	mov	r2, r0
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d102      	bne.n	801040e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8010408:	f04f 33ff 	mov.w	r3, #4294967295
 801040c:	e000      	b.n	8010410 <sys_mbox_new+0x3c>

  return ERR_OK;
 801040e:	2300      	movs	r3, #0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3718      	adds	r7, #24
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	6839      	ldr	r1, [r7, #0]
 8010428:	2200      	movs	r2, #0
 801042a:	4618      	mov	r0, r3
 801042c:	f7f3 fb46 	bl	8003abc <osMessagePut>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d102      	bne.n	801043c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8010436:	2300      	movs	r3, #0
 8010438:	73fb      	strb	r3, [r7, #15]
 801043a:	e001      	b.n	8010440 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801043c:	23ff      	movs	r3, #255	; 0xff
 801043e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b08c      	sub	sp, #48	; 0x30
 8010450:	af00      	add	r7, sp, #0
 8010452:	61f8      	str	r0, [r7, #28]
 8010454:	61b9      	str	r1, [r7, #24]
 8010456:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8010458:	f7f3 f97b 	bl	8003752 <osKernelSysTick>
 801045c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d017      	beq.n	8010494 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	6819      	ldr	r1, [r3, #0]
 8010468:	f107 0320 	add.w	r3, r7, #32
 801046c:	697a      	ldr	r2, [r7, #20]
 801046e:	4618      	mov	r0, r3
 8010470:	f7f3 fb64 	bl	8003b3c <osMessageGet>

    if(event.status == osEventMessage)
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	2b10      	cmp	r3, #16
 8010478:	d109      	bne.n	801048e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801047a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047c:	461a      	mov	r2, r3
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8010482:	f7f3 f966 	bl	8003752 <osKernelSysTick>
 8010486:	4602      	mov	r2, r0
 8010488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048a:	1ad3      	subs	r3, r2, r3
 801048c:	e019      	b.n	80104c2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801048e:	f04f 33ff 	mov.w	r3, #4294967295
 8010492:	e016      	b.n	80104c2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	6819      	ldr	r1, [r3, #0]
 8010498:	463b      	mov	r3, r7
 801049a:	f04f 32ff 	mov.w	r2, #4294967295
 801049e:	4618      	mov	r0, r3
 80104a0:	f7f3 fb4c 	bl	8003b3c <osMessageGet>
 80104a4:	f107 0320 	add.w	r3, r7, #32
 80104a8:	463a      	mov	r2, r7
 80104aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80104ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	461a      	mov	r2, r3
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80104b8:	f7f3 f94b 	bl	8003752 <osKernelSysTick>
 80104bc:	4602      	mov	r2, r0
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3730      	adds	r7, #48	; 0x30
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b083      	sub	sp, #12
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d101      	bne.n	80104de <sys_mbox_valid+0x14>
    return 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	e000      	b.n	80104e0 <sys_mbox_valid+0x16>
  else
    return 1;
 80104de:	2301      	movs	r3, #1
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80104f0:	4803      	ldr	r0, [pc, #12]	; (8010500 <sys_init+0x14>)
 80104f2:	f7f3 f99e 	bl	8003832 <osMutexCreate>
 80104f6:	4603      	mov	r3, r0
 80104f8:	4a02      	ldr	r2, [pc, #8]	; (8010504 <sys_init+0x18>)
 80104fa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80104fc:	bf00      	nop
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	08014364 	.word	0x08014364
 8010504:	2000cc1c 	.word	0x2000cc1c

08010508 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010510:	2300      	movs	r3, #0
 8010512:	60bb      	str	r3, [r7, #8]
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010518:	f107 0308 	add.w	r3, r7, #8
 801051c:	4618      	mov	r0, r3
 801051e:	f7f3 f988 	bl	8003832 <osMutexCreate>
 8010522:	4602      	mov	r2, r0
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d102      	bne.n	8010536 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010530:	f04f 33ff 	mov.w	r3, #4294967295
 8010534:	e000      	b.n	8010538 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f04f 31ff 	mov.w	r1, #4294967295
 8010550:	4618      	mov	r0, r3
 8010552:	f7f3 f987 	bl	8003864 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010556:	bf00      	nop
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b082      	sub	sp, #8
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4618      	mov	r0, r3
 801056c:	f7f3 f9c8 	bl	8003900 <osMutexRelease>
}
 8010570:	bf00      	nop
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b08c      	sub	sp, #48	; 0x30
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
 8010584:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010586:	f107 0314 	add.w	r3, r7, #20
 801058a:	2200      	movs	r2, #0
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	605a      	str	r2, [r3, #4]
 8010590:	609a      	str	r2, [r3, #8]
 8010592:	60da      	str	r2, [r3, #12]
 8010594:	611a      	str	r2, [r3, #16]
 8010596:	615a      	str	r2, [r3, #20]
 8010598:	619a      	str	r2, [r3, #24]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	617b      	str	r3, [r7, #20]
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	61bb      	str	r3, [r7, #24]
 80105a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a4:	b21b      	sxth	r3, r3
 80105a6:	83bb      	strh	r3, [r7, #28]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80105ac:	f107 0314 	add.w	r3, r7, #20
 80105b0:	6879      	ldr	r1, [r7, #4]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7f3 f8dd 	bl	8003772 <osThreadCreate>
 80105b8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3730      	adds	r7, #48	; 0x30
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80105c8:	4b04      	ldr	r3, [pc, #16]	; (80105dc <sys_arch_protect+0x18>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f04f 31ff 	mov.w	r1, #4294967295
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7f3 f947 	bl	8003864 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80105d6:	2301      	movs	r3, #1
}
 80105d8:	4618      	mov	r0, r3
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	2000cc1c 	.word	0x2000cc1c

080105e0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80105e8:	4b04      	ldr	r3, [pc, #16]	; (80105fc <sys_arch_unprotect+0x1c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f3 f987 	bl	8003900 <osMutexRelease>
}
 80105f2:	bf00      	nop
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	2000cc1c 	.word	0x2000cc1c

08010600 <__libc_init_array>:
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	4d0d      	ldr	r5, [pc, #52]	; (8010638 <__libc_init_array+0x38>)
 8010604:	4c0d      	ldr	r4, [pc, #52]	; (801063c <__libc_init_array+0x3c>)
 8010606:	1b64      	subs	r4, r4, r5
 8010608:	10a4      	asrs	r4, r4, #2
 801060a:	2600      	movs	r6, #0
 801060c:	42a6      	cmp	r6, r4
 801060e:	d109      	bne.n	8010624 <__libc_init_array+0x24>
 8010610:	4d0b      	ldr	r5, [pc, #44]	; (8010640 <__libc_init_array+0x40>)
 8010612:	4c0c      	ldr	r4, [pc, #48]	; (8010644 <__libc_init_array+0x44>)
 8010614:	f001 f856 	bl	80116c4 <_init>
 8010618:	1b64      	subs	r4, r4, r5
 801061a:	10a4      	asrs	r4, r4, #2
 801061c:	2600      	movs	r6, #0
 801061e:	42a6      	cmp	r6, r4
 8010620:	d105      	bne.n	801062e <__libc_init_array+0x2e>
 8010622:	bd70      	pop	{r4, r5, r6, pc}
 8010624:	f855 3b04 	ldr.w	r3, [r5], #4
 8010628:	4798      	blx	r3
 801062a:	3601      	adds	r6, #1
 801062c:	e7ee      	b.n	801060c <__libc_init_array+0xc>
 801062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010632:	4798      	blx	r3
 8010634:	3601      	adds	r6, #1
 8010636:	e7f2      	b.n	801061e <__libc_init_array+0x1e>
 8010638:	080144c0 	.word	0x080144c0
 801063c:	080144c0 	.word	0x080144c0
 8010640:	080144c0 	.word	0x080144c0
 8010644:	080144c4 	.word	0x080144c4

08010648 <memcmp>:
 8010648:	b530      	push	{r4, r5, lr}
 801064a:	3901      	subs	r1, #1
 801064c:	2400      	movs	r4, #0
 801064e:	42a2      	cmp	r2, r4
 8010650:	d101      	bne.n	8010656 <memcmp+0xe>
 8010652:	2000      	movs	r0, #0
 8010654:	e005      	b.n	8010662 <memcmp+0x1a>
 8010656:	5d03      	ldrb	r3, [r0, r4]
 8010658:	3401      	adds	r4, #1
 801065a:	5d0d      	ldrb	r5, [r1, r4]
 801065c:	42ab      	cmp	r3, r5
 801065e:	d0f6      	beq.n	801064e <memcmp+0x6>
 8010660:	1b58      	subs	r0, r3, r5
 8010662:	bd30      	pop	{r4, r5, pc}

08010664 <memcpy>:
 8010664:	440a      	add	r2, r1
 8010666:	4291      	cmp	r1, r2
 8010668:	f100 33ff 	add.w	r3, r0, #4294967295
 801066c:	d100      	bne.n	8010670 <memcpy+0xc>
 801066e:	4770      	bx	lr
 8010670:	b510      	push	{r4, lr}
 8010672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010676:	f803 4f01 	strb.w	r4, [r3, #1]!
 801067a:	4291      	cmp	r1, r2
 801067c:	d1f9      	bne.n	8010672 <memcpy+0xe>
 801067e:	bd10      	pop	{r4, pc}

08010680 <memset>:
 8010680:	4402      	add	r2, r0
 8010682:	4603      	mov	r3, r0
 8010684:	4293      	cmp	r3, r2
 8010686:	d100      	bne.n	801068a <memset+0xa>
 8010688:	4770      	bx	lr
 801068a:	f803 1b01 	strb.w	r1, [r3], #1
 801068e:	e7f9      	b.n	8010684 <memset+0x4>

08010690 <iprintf>:
 8010690:	b40f      	push	{r0, r1, r2, r3}
 8010692:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <iprintf+0x2c>)
 8010694:	b513      	push	{r0, r1, r4, lr}
 8010696:	681c      	ldr	r4, [r3, #0]
 8010698:	b124      	cbz	r4, 80106a4 <iprintf+0x14>
 801069a:	69a3      	ldr	r3, [r4, #24]
 801069c:	b913      	cbnz	r3, 80106a4 <iprintf+0x14>
 801069e:	4620      	mov	r0, r4
 80106a0:	f000 f8c4 	bl	801082c <__sinit>
 80106a4:	ab05      	add	r3, sp, #20
 80106a6:	9a04      	ldr	r2, [sp, #16]
 80106a8:	68a1      	ldr	r1, [r4, #8]
 80106aa:	9301      	str	r3, [sp, #4]
 80106ac:	4620      	mov	r0, r4
 80106ae:	f000 fa4b 	bl	8010b48 <_vfiprintf_r>
 80106b2:	b002      	add	sp, #8
 80106b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106b8:	b004      	add	sp, #16
 80106ba:	4770      	bx	lr
 80106bc:	2000001c 	.word	0x2000001c

080106c0 <rand>:
 80106c0:	4b17      	ldr	r3, [pc, #92]	; (8010720 <rand+0x60>)
 80106c2:	b510      	push	{r4, lr}
 80106c4:	681c      	ldr	r4, [r3, #0]
 80106c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106c8:	b9b3      	cbnz	r3, 80106f8 <rand+0x38>
 80106ca:	2018      	movs	r0, #24
 80106cc:	f000 f960 	bl	8010990 <malloc>
 80106d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80106d2:	b928      	cbnz	r0, 80106e0 <rand+0x20>
 80106d4:	4602      	mov	r2, r0
 80106d6:	4b13      	ldr	r3, [pc, #76]	; (8010724 <rand+0x64>)
 80106d8:	4813      	ldr	r0, [pc, #76]	; (8010728 <rand+0x68>)
 80106da:	214e      	movs	r1, #78	; 0x4e
 80106dc:	f000 f830 	bl	8010740 <__assert_func>
 80106e0:	4a12      	ldr	r2, [pc, #72]	; (801072c <rand+0x6c>)
 80106e2:	4b13      	ldr	r3, [pc, #76]	; (8010730 <rand+0x70>)
 80106e4:	e9c0 2300 	strd	r2, r3, [r0]
 80106e8:	4b12      	ldr	r3, [pc, #72]	; (8010734 <rand+0x74>)
 80106ea:	6083      	str	r3, [r0, #8]
 80106ec:	230b      	movs	r3, #11
 80106ee:	8183      	strh	r3, [r0, #12]
 80106f0:	2201      	movs	r2, #1
 80106f2:	2300      	movs	r3, #0
 80106f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80106f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80106fa:	480f      	ldr	r0, [pc, #60]	; (8010738 <rand+0x78>)
 80106fc:	690a      	ldr	r2, [r1, #16]
 80106fe:	694b      	ldr	r3, [r1, #20]
 8010700:	4c0e      	ldr	r4, [pc, #56]	; (801073c <rand+0x7c>)
 8010702:	4350      	muls	r0, r2
 8010704:	fb04 0003 	mla	r0, r4, r3, r0
 8010708:	fba2 3404 	umull	r3, r4, r2, r4
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	4404      	add	r4, r0
 8010710:	f144 0000 	adc.w	r0, r4, #0
 8010714:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8010718:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801071c:	bd10      	pop	{r4, pc}
 801071e:	bf00      	nop
 8010720:	2000001c 	.word	0x2000001c
 8010724:	08014370 	.word	0x08014370
 8010728:	08014387 	.word	0x08014387
 801072c:	abcd330e 	.word	0xabcd330e
 8010730:	e66d1234 	.word	0xe66d1234
 8010734:	0005deec 	.word	0x0005deec
 8010738:	5851f42d 	.word	0x5851f42d
 801073c:	4c957f2d 	.word	0x4c957f2d

08010740 <__assert_func>:
 8010740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010742:	4614      	mov	r4, r2
 8010744:	461a      	mov	r2, r3
 8010746:	4b09      	ldr	r3, [pc, #36]	; (801076c <__assert_func+0x2c>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4605      	mov	r5, r0
 801074c:	68d8      	ldr	r0, [r3, #12]
 801074e:	b14c      	cbz	r4, 8010764 <__assert_func+0x24>
 8010750:	4b07      	ldr	r3, [pc, #28]	; (8010770 <__assert_func+0x30>)
 8010752:	9100      	str	r1, [sp, #0]
 8010754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010758:	4906      	ldr	r1, [pc, #24]	; (8010774 <__assert_func+0x34>)
 801075a:	462b      	mov	r3, r5
 801075c:	f000 f8e4 	bl	8010928 <fiprintf>
 8010760:	f000 fddc 	bl	801131c <abort>
 8010764:	4b04      	ldr	r3, [pc, #16]	; (8010778 <__assert_func+0x38>)
 8010766:	461c      	mov	r4, r3
 8010768:	e7f3      	b.n	8010752 <__assert_func+0x12>
 801076a:	bf00      	nop
 801076c:	2000001c 	.word	0x2000001c
 8010770:	080143e6 	.word	0x080143e6
 8010774:	080143f3 	.word	0x080143f3
 8010778:	08014421 	.word	0x08014421

0801077c <std>:
 801077c:	2300      	movs	r3, #0
 801077e:	b510      	push	{r4, lr}
 8010780:	4604      	mov	r4, r0
 8010782:	e9c0 3300 	strd	r3, r3, [r0]
 8010786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801078a:	6083      	str	r3, [r0, #8]
 801078c:	8181      	strh	r1, [r0, #12]
 801078e:	6643      	str	r3, [r0, #100]	; 0x64
 8010790:	81c2      	strh	r2, [r0, #14]
 8010792:	6183      	str	r3, [r0, #24]
 8010794:	4619      	mov	r1, r3
 8010796:	2208      	movs	r2, #8
 8010798:	305c      	adds	r0, #92	; 0x5c
 801079a:	f7ff ff71 	bl	8010680 <memset>
 801079e:	4b05      	ldr	r3, [pc, #20]	; (80107b4 <std+0x38>)
 80107a0:	6263      	str	r3, [r4, #36]	; 0x24
 80107a2:	4b05      	ldr	r3, [pc, #20]	; (80107b8 <std+0x3c>)
 80107a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80107a6:	4b05      	ldr	r3, [pc, #20]	; (80107bc <std+0x40>)
 80107a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107aa:	4b05      	ldr	r3, [pc, #20]	; (80107c0 <std+0x44>)
 80107ac:	6224      	str	r4, [r4, #32]
 80107ae:	6323      	str	r3, [r4, #48]	; 0x30
 80107b0:	bd10      	pop	{r4, pc}
 80107b2:	bf00      	nop
 80107b4:	080110f1 	.word	0x080110f1
 80107b8:	08011113 	.word	0x08011113
 80107bc:	0801114b 	.word	0x0801114b
 80107c0:	0801116f 	.word	0x0801116f

080107c4 <_cleanup_r>:
 80107c4:	4901      	ldr	r1, [pc, #4]	; (80107cc <_cleanup_r+0x8>)
 80107c6:	f000 b8c1 	b.w	801094c <_fwalk_reent>
 80107ca:	bf00      	nop
 80107cc:	08011459 	.word	0x08011459

080107d0 <__sfmoreglue>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	1e4a      	subs	r2, r1, #1
 80107d4:	2568      	movs	r5, #104	; 0x68
 80107d6:	4355      	muls	r5, r2
 80107d8:	460e      	mov	r6, r1
 80107da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80107de:	f000 f92f 	bl	8010a40 <_malloc_r>
 80107e2:	4604      	mov	r4, r0
 80107e4:	b140      	cbz	r0, 80107f8 <__sfmoreglue+0x28>
 80107e6:	2100      	movs	r1, #0
 80107e8:	e9c0 1600 	strd	r1, r6, [r0]
 80107ec:	300c      	adds	r0, #12
 80107ee:	60a0      	str	r0, [r4, #8]
 80107f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107f4:	f7ff ff44 	bl	8010680 <memset>
 80107f8:	4620      	mov	r0, r4
 80107fa:	bd70      	pop	{r4, r5, r6, pc}

080107fc <__sfp_lock_acquire>:
 80107fc:	4801      	ldr	r0, [pc, #4]	; (8010804 <__sfp_lock_acquire+0x8>)
 80107fe:	f000 b8c5 	b.w	801098c <__retarget_lock_acquire_recursive>
 8010802:	bf00      	nop
 8010804:	2000cc28 	.word	0x2000cc28

08010808 <__sfp_lock_release>:
 8010808:	4801      	ldr	r0, [pc, #4]	; (8010810 <__sfp_lock_release+0x8>)
 801080a:	f000 b8c0 	b.w	801098e <__retarget_lock_release_recursive>
 801080e:	bf00      	nop
 8010810:	2000cc28 	.word	0x2000cc28

08010814 <__sinit_lock_acquire>:
 8010814:	4801      	ldr	r0, [pc, #4]	; (801081c <__sinit_lock_acquire+0x8>)
 8010816:	f000 b8b9 	b.w	801098c <__retarget_lock_acquire_recursive>
 801081a:	bf00      	nop
 801081c:	2000cc23 	.word	0x2000cc23

08010820 <__sinit_lock_release>:
 8010820:	4801      	ldr	r0, [pc, #4]	; (8010828 <__sinit_lock_release+0x8>)
 8010822:	f000 b8b4 	b.w	801098e <__retarget_lock_release_recursive>
 8010826:	bf00      	nop
 8010828:	2000cc23 	.word	0x2000cc23

0801082c <__sinit>:
 801082c:	b510      	push	{r4, lr}
 801082e:	4604      	mov	r4, r0
 8010830:	f7ff fff0 	bl	8010814 <__sinit_lock_acquire>
 8010834:	69a3      	ldr	r3, [r4, #24]
 8010836:	b11b      	cbz	r3, 8010840 <__sinit+0x14>
 8010838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801083c:	f7ff bff0 	b.w	8010820 <__sinit_lock_release>
 8010840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010844:	6523      	str	r3, [r4, #80]	; 0x50
 8010846:	4b13      	ldr	r3, [pc, #76]	; (8010894 <__sinit+0x68>)
 8010848:	4a13      	ldr	r2, [pc, #76]	; (8010898 <__sinit+0x6c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	62a2      	str	r2, [r4, #40]	; 0x28
 801084e:	42a3      	cmp	r3, r4
 8010850:	bf04      	itt	eq
 8010852:	2301      	moveq	r3, #1
 8010854:	61a3      	streq	r3, [r4, #24]
 8010856:	4620      	mov	r0, r4
 8010858:	f000 f820 	bl	801089c <__sfp>
 801085c:	6060      	str	r0, [r4, #4]
 801085e:	4620      	mov	r0, r4
 8010860:	f000 f81c 	bl	801089c <__sfp>
 8010864:	60a0      	str	r0, [r4, #8]
 8010866:	4620      	mov	r0, r4
 8010868:	f000 f818 	bl	801089c <__sfp>
 801086c:	2200      	movs	r2, #0
 801086e:	60e0      	str	r0, [r4, #12]
 8010870:	2104      	movs	r1, #4
 8010872:	6860      	ldr	r0, [r4, #4]
 8010874:	f7ff ff82 	bl	801077c <std>
 8010878:	68a0      	ldr	r0, [r4, #8]
 801087a:	2201      	movs	r2, #1
 801087c:	2109      	movs	r1, #9
 801087e:	f7ff ff7d 	bl	801077c <std>
 8010882:	68e0      	ldr	r0, [r4, #12]
 8010884:	2202      	movs	r2, #2
 8010886:	2112      	movs	r1, #18
 8010888:	f7ff ff78 	bl	801077c <std>
 801088c:	2301      	movs	r3, #1
 801088e:	61a3      	str	r3, [r4, #24]
 8010890:	e7d2      	b.n	8010838 <__sinit+0xc>
 8010892:	bf00      	nop
 8010894:	0801436c 	.word	0x0801436c
 8010898:	080107c5 	.word	0x080107c5

0801089c <__sfp>:
 801089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089e:	4607      	mov	r7, r0
 80108a0:	f7ff ffac 	bl	80107fc <__sfp_lock_acquire>
 80108a4:	4b1e      	ldr	r3, [pc, #120]	; (8010920 <__sfp+0x84>)
 80108a6:	681e      	ldr	r6, [r3, #0]
 80108a8:	69b3      	ldr	r3, [r6, #24]
 80108aa:	b913      	cbnz	r3, 80108b2 <__sfp+0x16>
 80108ac:	4630      	mov	r0, r6
 80108ae:	f7ff ffbd 	bl	801082c <__sinit>
 80108b2:	3648      	adds	r6, #72	; 0x48
 80108b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	d503      	bpl.n	80108c4 <__sfp+0x28>
 80108bc:	6833      	ldr	r3, [r6, #0]
 80108be:	b30b      	cbz	r3, 8010904 <__sfp+0x68>
 80108c0:	6836      	ldr	r6, [r6, #0]
 80108c2:	e7f7      	b.n	80108b4 <__sfp+0x18>
 80108c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80108c8:	b9d5      	cbnz	r5, 8010900 <__sfp+0x64>
 80108ca:	4b16      	ldr	r3, [pc, #88]	; (8010924 <__sfp+0x88>)
 80108cc:	60e3      	str	r3, [r4, #12]
 80108ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80108d2:	6665      	str	r5, [r4, #100]	; 0x64
 80108d4:	f000 f859 	bl	801098a <__retarget_lock_init_recursive>
 80108d8:	f7ff ff96 	bl	8010808 <__sfp_lock_release>
 80108dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80108e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80108e4:	6025      	str	r5, [r4, #0]
 80108e6:	61a5      	str	r5, [r4, #24]
 80108e8:	2208      	movs	r2, #8
 80108ea:	4629      	mov	r1, r5
 80108ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80108f0:	f7ff fec6 	bl	8010680 <memset>
 80108f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80108f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80108fc:	4620      	mov	r0, r4
 80108fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010900:	3468      	adds	r4, #104	; 0x68
 8010902:	e7d9      	b.n	80108b8 <__sfp+0x1c>
 8010904:	2104      	movs	r1, #4
 8010906:	4638      	mov	r0, r7
 8010908:	f7ff ff62 	bl	80107d0 <__sfmoreglue>
 801090c:	4604      	mov	r4, r0
 801090e:	6030      	str	r0, [r6, #0]
 8010910:	2800      	cmp	r0, #0
 8010912:	d1d5      	bne.n	80108c0 <__sfp+0x24>
 8010914:	f7ff ff78 	bl	8010808 <__sfp_lock_release>
 8010918:	230c      	movs	r3, #12
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	e7ee      	b.n	80108fc <__sfp+0x60>
 801091e:	bf00      	nop
 8010920:	0801436c 	.word	0x0801436c
 8010924:	ffff0001 	.word	0xffff0001

08010928 <fiprintf>:
 8010928:	b40e      	push	{r1, r2, r3}
 801092a:	b503      	push	{r0, r1, lr}
 801092c:	4601      	mov	r1, r0
 801092e:	ab03      	add	r3, sp, #12
 8010930:	4805      	ldr	r0, [pc, #20]	; (8010948 <fiprintf+0x20>)
 8010932:	f853 2b04 	ldr.w	r2, [r3], #4
 8010936:	6800      	ldr	r0, [r0, #0]
 8010938:	9301      	str	r3, [sp, #4]
 801093a:	f000 f905 	bl	8010b48 <_vfiprintf_r>
 801093e:	b002      	add	sp, #8
 8010940:	f85d eb04 	ldr.w	lr, [sp], #4
 8010944:	b003      	add	sp, #12
 8010946:	4770      	bx	lr
 8010948:	2000001c 	.word	0x2000001c

0801094c <_fwalk_reent>:
 801094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010950:	4606      	mov	r6, r0
 8010952:	4688      	mov	r8, r1
 8010954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010958:	2700      	movs	r7, #0
 801095a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801095e:	f1b9 0901 	subs.w	r9, r9, #1
 8010962:	d505      	bpl.n	8010970 <_fwalk_reent+0x24>
 8010964:	6824      	ldr	r4, [r4, #0]
 8010966:	2c00      	cmp	r4, #0
 8010968:	d1f7      	bne.n	801095a <_fwalk_reent+0xe>
 801096a:	4638      	mov	r0, r7
 801096c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010970:	89ab      	ldrh	r3, [r5, #12]
 8010972:	2b01      	cmp	r3, #1
 8010974:	d907      	bls.n	8010986 <_fwalk_reent+0x3a>
 8010976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801097a:	3301      	adds	r3, #1
 801097c:	d003      	beq.n	8010986 <_fwalk_reent+0x3a>
 801097e:	4629      	mov	r1, r5
 8010980:	4630      	mov	r0, r6
 8010982:	47c0      	blx	r8
 8010984:	4307      	orrs	r7, r0
 8010986:	3568      	adds	r5, #104	; 0x68
 8010988:	e7e9      	b.n	801095e <_fwalk_reent+0x12>

0801098a <__retarget_lock_init_recursive>:
 801098a:	4770      	bx	lr

0801098c <__retarget_lock_acquire_recursive>:
 801098c:	4770      	bx	lr

0801098e <__retarget_lock_release_recursive>:
 801098e:	4770      	bx	lr

08010990 <malloc>:
 8010990:	4b02      	ldr	r3, [pc, #8]	; (801099c <malloc+0xc>)
 8010992:	4601      	mov	r1, r0
 8010994:	6818      	ldr	r0, [r3, #0]
 8010996:	f000 b853 	b.w	8010a40 <_malloc_r>
 801099a:	bf00      	nop
 801099c:	2000001c 	.word	0x2000001c

080109a0 <_free_r>:
 80109a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109a2:	2900      	cmp	r1, #0
 80109a4:	d048      	beq.n	8010a38 <_free_r+0x98>
 80109a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109aa:	9001      	str	r0, [sp, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f1a1 0404 	sub.w	r4, r1, #4
 80109b2:	bfb8      	it	lt
 80109b4:	18e4      	addlt	r4, r4, r3
 80109b6:	f000 fe01 	bl	80115bc <__malloc_lock>
 80109ba:	4a20      	ldr	r2, [pc, #128]	; (8010a3c <_free_r+0x9c>)
 80109bc:	9801      	ldr	r0, [sp, #4]
 80109be:	6813      	ldr	r3, [r2, #0]
 80109c0:	4615      	mov	r5, r2
 80109c2:	b933      	cbnz	r3, 80109d2 <_free_r+0x32>
 80109c4:	6063      	str	r3, [r4, #4]
 80109c6:	6014      	str	r4, [r2, #0]
 80109c8:	b003      	add	sp, #12
 80109ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109ce:	f000 bdfb 	b.w	80115c8 <__malloc_unlock>
 80109d2:	42a3      	cmp	r3, r4
 80109d4:	d90b      	bls.n	80109ee <_free_r+0x4e>
 80109d6:	6821      	ldr	r1, [r4, #0]
 80109d8:	1862      	adds	r2, r4, r1
 80109da:	4293      	cmp	r3, r2
 80109dc:	bf04      	itt	eq
 80109de:	681a      	ldreq	r2, [r3, #0]
 80109e0:	685b      	ldreq	r3, [r3, #4]
 80109e2:	6063      	str	r3, [r4, #4]
 80109e4:	bf04      	itt	eq
 80109e6:	1852      	addeq	r2, r2, r1
 80109e8:	6022      	streq	r2, [r4, #0]
 80109ea:	602c      	str	r4, [r5, #0]
 80109ec:	e7ec      	b.n	80109c8 <_free_r+0x28>
 80109ee:	461a      	mov	r2, r3
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	b10b      	cbz	r3, 80109f8 <_free_r+0x58>
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	d9fa      	bls.n	80109ee <_free_r+0x4e>
 80109f8:	6811      	ldr	r1, [r2, #0]
 80109fa:	1855      	adds	r5, r2, r1
 80109fc:	42a5      	cmp	r5, r4
 80109fe:	d10b      	bne.n	8010a18 <_free_r+0x78>
 8010a00:	6824      	ldr	r4, [r4, #0]
 8010a02:	4421      	add	r1, r4
 8010a04:	1854      	adds	r4, r2, r1
 8010a06:	42a3      	cmp	r3, r4
 8010a08:	6011      	str	r1, [r2, #0]
 8010a0a:	d1dd      	bne.n	80109c8 <_free_r+0x28>
 8010a0c:	681c      	ldr	r4, [r3, #0]
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	6053      	str	r3, [r2, #4]
 8010a12:	4421      	add	r1, r4
 8010a14:	6011      	str	r1, [r2, #0]
 8010a16:	e7d7      	b.n	80109c8 <_free_r+0x28>
 8010a18:	d902      	bls.n	8010a20 <_free_r+0x80>
 8010a1a:	230c      	movs	r3, #12
 8010a1c:	6003      	str	r3, [r0, #0]
 8010a1e:	e7d3      	b.n	80109c8 <_free_r+0x28>
 8010a20:	6825      	ldr	r5, [r4, #0]
 8010a22:	1961      	adds	r1, r4, r5
 8010a24:	428b      	cmp	r3, r1
 8010a26:	bf04      	itt	eq
 8010a28:	6819      	ldreq	r1, [r3, #0]
 8010a2a:	685b      	ldreq	r3, [r3, #4]
 8010a2c:	6063      	str	r3, [r4, #4]
 8010a2e:	bf04      	itt	eq
 8010a30:	1949      	addeq	r1, r1, r5
 8010a32:	6021      	streq	r1, [r4, #0]
 8010a34:	6054      	str	r4, [r2, #4]
 8010a36:	e7c7      	b.n	80109c8 <_free_r+0x28>
 8010a38:	b003      	add	sp, #12
 8010a3a:	bd30      	pop	{r4, r5, pc}
 8010a3c:	200041d8 	.word	0x200041d8

08010a40 <_malloc_r>:
 8010a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a42:	1ccd      	adds	r5, r1, #3
 8010a44:	f025 0503 	bic.w	r5, r5, #3
 8010a48:	3508      	adds	r5, #8
 8010a4a:	2d0c      	cmp	r5, #12
 8010a4c:	bf38      	it	cc
 8010a4e:	250c      	movcc	r5, #12
 8010a50:	2d00      	cmp	r5, #0
 8010a52:	4606      	mov	r6, r0
 8010a54:	db01      	blt.n	8010a5a <_malloc_r+0x1a>
 8010a56:	42a9      	cmp	r1, r5
 8010a58:	d903      	bls.n	8010a62 <_malloc_r+0x22>
 8010a5a:	230c      	movs	r3, #12
 8010a5c:	6033      	str	r3, [r6, #0]
 8010a5e:	2000      	movs	r0, #0
 8010a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a62:	f000 fdab 	bl	80115bc <__malloc_lock>
 8010a66:	4921      	ldr	r1, [pc, #132]	; (8010aec <_malloc_r+0xac>)
 8010a68:	680a      	ldr	r2, [r1, #0]
 8010a6a:	4614      	mov	r4, r2
 8010a6c:	b99c      	cbnz	r4, 8010a96 <_malloc_r+0x56>
 8010a6e:	4f20      	ldr	r7, [pc, #128]	; (8010af0 <_malloc_r+0xb0>)
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	b923      	cbnz	r3, 8010a7e <_malloc_r+0x3e>
 8010a74:	4621      	mov	r1, r4
 8010a76:	4630      	mov	r0, r6
 8010a78:	f000 fb2a 	bl	80110d0 <_sbrk_r>
 8010a7c:	6038      	str	r0, [r7, #0]
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4630      	mov	r0, r6
 8010a82:	f000 fb25 	bl	80110d0 <_sbrk_r>
 8010a86:	1c43      	adds	r3, r0, #1
 8010a88:	d123      	bne.n	8010ad2 <_malloc_r+0x92>
 8010a8a:	230c      	movs	r3, #12
 8010a8c:	6033      	str	r3, [r6, #0]
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f000 fd9a 	bl	80115c8 <__malloc_unlock>
 8010a94:	e7e3      	b.n	8010a5e <_malloc_r+0x1e>
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	1b5b      	subs	r3, r3, r5
 8010a9a:	d417      	bmi.n	8010acc <_malloc_r+0x8c>
 8010a9c:	2b0b      	cmp	r3, #11
 8010a9e:	d903      	bls.n	8010aa8 <_malloc_r+0x68>
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	441c      	add	r4, r3
 8010aa4:	6025      	str	r5, [r4, #0]
 8010aa6:	e004      	b.n	8010ab2 <_malloc_r+0x72>
 8010aa8:	6863      	ldr	r3, [r4, #4]
 8010aaa:	42a2      	cmp	r2, r4
 8010aac:	bf0c      	ite	eq
 8010aae:	600b      	streq	r3, [r1, #0]
 8010ab0:	6053      	strne	r3, [r2, #4]
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f000 fd88 	bl	80115c8 <__malloc_unlock>
 8010ab8:	f104 000b 	add.w	r0, r4, #11
 8010abc:	1d23      	adds	r3, r4, #4
 8010abe:	f020 0007 	bic.w	r0, r0, #7
 8010ac2:	1ac2      	subs	r2, r0, r3
 8010ac4:	d0cc      	beq.n	8010a60 <_malloc_r+0x20>
 8010ac6:	1a1b      	subs	r3, r3, r0
 8010ac8:	50a3      	str	r3, [r4, r2]
 8010aca:	e7c9      	b.n	8010a60 <_malloc_r+0x20>
 8010acc:	4622      	mov	r2, r4
 8010ace:	6864      	ldr	r4, [r4, #4]
 8010ad0:	e7cc      	b.n	8010a6c <_malloc_r+0x2c>
 8010ad2:	1cc4      	adds	r4, r0, #3
 8010ad4:	f024 0403 	bic.w	r4, r4, #3
 8010ad8:	42a0      	cmp	r0, r4
 8010ada:	d0e3      	beq.n	8010aa4 <_malloc_r+0x64>
 8010adc:	1a21      	subs	r1, r4, r0
 8010ade:	4630      	mov	r0, r6
 8010ae0:	f000 faf6 	bl	80110d0 <_sbrk_r>
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	d1dd      	bne.n	8010aa4 <_malloc_r+0x64>
 8010ae8:	e7cf      	b.n	8010a8a <_malloc_r+0x4a>
 8010aea:	bf00      	nop
 8010aec:	200041d8 	.word	0x200041d8
 8010af0:	200041dc 	.word	0x200041dc

08010af4 <__sfputc_r>:
 8010af4:	6893      	ldr	r3, [r2, #8]
 8010af6:	3b01      	subs	r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	b410      	push	{r4}
 8010afc:	6093      	str	r3, [r2, #8]
 8010afe:	da08      	bge.n	8010b12 <__sfputc_r+0x1e>
 8010b00:	6994      	ldr	r4, [r2, #24]
 8010b02:	42a3      	cmp	r3, r4
 8010b04:	db01      	blt.n	8010b0a <__sfputc_r+0x16>
 8010b06:	290a      	cmp	r1, #10
 8010b08:	d103      	bne.n	8010b12 <__sfputc_r+0x1e>
 8010b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b0e:	f000 bb33 	b.w	8011178 <__swbuf_r>
 8010b12:	6813      	ldr	r3, [r2, #0]
 8010b14:	1c58      	adds	r0, r3, #1
 8010b16:	6010      	str	r0, [r2, #0]
 8010b18:	7019      	strb	r1, [r3, #0]
 8010b1a:	4608      	mov	r0, r1
 8010b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <__sfputs_r>:
 8010b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b24:	4606      	mov	r6, r0
 8010b26:	460f      	mov	r7, r1
 8010b28:	4614      	mov	r4, r2
 8010b2a:	18d5      	adds	r5, r2, r3
 8010b2c:	42ac      	cmp	r4, r5
 8010b2e:	d101      	bne.n	8010b34 <__sfputs_r+0x12>
 8010b30:	2000      	movs	r0, #0
 8010b32:	e007      	b.n	8010b44 <__sfputs_r+0x22>
 8010b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b38:	463a      	mov	r2, r7
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f7ff ffda 	bl	8010af4 <__sfputc_r>
 8010b40:	1c43      	adds	r3, r0, #1
 8010b42:	d1f3      	bne.n	8010b2c <__sfputs_r+0xa>
 8010b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b48 <_vfiprintf_r>:
 8010b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b4c:	460d      	mov	r5, r1
 8010b4e:	b09d      	sub	sp, #116	; 0x74
 8010b50:	4614      	mov	r4, r2
 8010b52:	4698      	mov	r8, r3
 8010b54:	4606      	mov	r6, r0
 8010b56:	b118      	cbz	r0, 8010b60 <_vfiprintf_r+0x18>
 8010b58:	6983      	ldr	r3, [r0, #24]
 8010b5a:	b90b      	cbnz	r3, 8010b60 <_vfiprintf_r+0x18>
 8010b5c:	f7ff fe66 	bl	801082c <__sinit>
 8010b60:	4b89      	ldr	r3, [pc, #548]	; (8010d88 <_vfiprintf_r+0x240>)
 8010b62:	429d      	cmp	r5, r3
 8010b64:	d11b      	bne.n	8010b9e <_vfiprintf_r+0x56>
 8010b66:	6875      	ldr	r5, [r6, #4]
 8010b68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b6a:	07d9      	lsls	r1, r3, #31
 8010b6c:	d405      	bmi.n	8010b7a <_vfiprintf_r+0x32>
 8010b6e:	89ab      	ldrh	r3, [r5, #12]
 8010b70:	059a      	lsls	r2, r3, #22
 8010b72:	d402      	bmi.n	8010b7a <_vfiprintf_r+0x32>
 8010b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b76:	f7ff ff09 	bl	801098c <__retarget_lock_acquire_recursive>
 8010b7a:	89ab      	ldrh	r3, [r5, #12]
 8010b7c:	071b      	lsls	r3, r3, #28
 8010b7e:	d501      	bpl.n	8010b84 <_vfiprintf_r+0x3c>
 8010b80:	692b      	ldr	r3, [r5, #16]
 8010b82:	b9eb      	cbnz	r3, 8010bc0 <_vfiprintf_r+0x78>
 8010b84:	4629      	mov	r1, r5
 8010b86:	4630      	mov	r0, r6
 8010b88:	f000 fb5a 	bl	8011240 <__swsetup_r>
 8010b8c:	b1c0      	cbz	r0, 8010bc0 <_vfiprintf_r+0x78>
 8010b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b90:	07dc      	lsls	r4, r3, #31
 8010b92:	d50e      	bpl.n	8010bb2 <_vfiprintf_r+0x6a>
 8010b94:	f04f 30ff 	mov.w	r0, #4294967295
 8010b98:	b01d      	add	sp, #116	; 0x74
 8010b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b9e:	4b7b      	ldr	r3, [pc, #492]	; (8010d8c <_vfiprintf_r+0x244>)
 8010ba0:	429d      	cmp	r5, r3
 8010ba2:	d101      	bne.n	8010ba8 <_vfiprintf_r+0x60>
 8010ba4:	68b5      	ldr	r5, [r6, #8]
 8010ba6:	e7df      	b.n	8010b68 <_vfiprintf_r+0x20>
 8010ba8:	4b79      	ldr	r3, [pc, #484]	; (8010d90 <_vfiprintf_r+0x248>)
 8010baa:	429d      	cmp	r5, r3
 8010bac:	bf08      	it	eq
 8010bae:	68f5      	ldreq	r5, [r6, #12]
 8010bb0:	e7da      	b.n	8010b68 <_vfiprintf_r+0x20>
 8010bb2:	89ab      	ldrh	r3, [r5, #12]
 8010bb4:	0598      	lsls	r0, r3, #22
 8010bb6:	d4ed      	bmi.n	8010b94 <_vfiprintf_r+0x4c>
 8010bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bba:	f7ff fee8 	bl	801098e <__retarget_lock_release_recursive>
 8010bbe:	e7e9      	b.n	8010b94 <_vfiprintf_r+0x4c>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010bc4:	2320      	movs	r3, #32
 8010bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bce:	2330      	movs	r3, #48	; 0x30
 8010bd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010d94 <_vfiprintf_r+0x24c>
 8010bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bd8:	f04f 0901 	mov.w	r9, #1
 8010bdc:	4623      	mov	r3, r4
 8010bde:	469a      	mov	sl, r3
 8010be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010be4:	b10a      	cbz	r2, 8010bea <_vfiprintf_r+0xa2>
 8010be6:	2a25      	cmp	r2, #37	; 0x25
 8010be8:	d1f9      	bne.n	8010bde <_vfiprintf_r+0x96>
 8010bea:	ebba 0b04 	subs.w	fp, sl, r4
 8010bee:	d00b      	beq.n	8010c08 <_vfiprintf_r+0xc0>
 8010bf0:	465b      	mov	r3, fp
 8010bf2:	4622      	mov	r2, r4
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f7ff ff93 	bl	8010b22 <__sfputs_r>
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	f000 80aa 	beq.w	8010d56 <_vfiprintf_r+0x20e>
 8010c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c04:	445a      	add	r2, fp
 8010c06:	9209      	str	r2, [sp, #36]	; 0x24
 8010c08:	f89a 3000 	ldrb.w	r3, [sl]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f000 80a2 	beq.w	8010d56 <_vfiprintf_r+0x20e>
 8010c12:	2300      	movs	r3, #0
 8010c14:	f04f 32ff 	mov.w	r2, #4294967295
 8010c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c1c:	f10a 0a01 	add.w	sl, sl, #1
 8010c20:	9304      	str	r3, [sp, #16]
 8010c22:	9307      	str	r3, [sp, #28]
 8010c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c28:	931a      	str	r3, [sp, #104]	; 0x68
 8010c2a:	4654      	mov	r4, sl
 8010c2c:	2205      	movs	r2, #5
 8010c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c32:	4858      	ldr	r0, [pc, #352]	; (8010d94 <_vfiprintf_r+0x24c>)
 8010c34:	f7ef faec 	bl	8000210 <memchr>
 8010c38:	9a04      	ldr	r2, [sp, #16]
 8010c3a:	b9d8      	cbnz	r0, 8010c74 <_vfiprintf_r+0x12c>
 8010c3c:	06d1      	lsls	r1, r2, #27
 8010c3e:	bf44      	itt	mi
 8010c40:	2320      	movmi	r3, #32
 8010c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c46:	0713      	lsls	r3, r2, #28
 8010c48:	bf44      	itt	mi
 8010c4a:	232b      	movmi	r3, #43	; 0x2b
 8010c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c50:	f89a 3000 	ldrb.w	r3, [sl]
 8010c54:	2b2a      	cmp	r3, #42	; 0x2a
 8010c56:	d015      	beq.n	8010c84 <_vfiprintf_r+0x13c>
 8010c58:	9a07      	ldr	r2, [sp, #28]
 8010c5a:	4654      	mov	r4, sl
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f04f 0c0a 	mov.w	ip, #10
 8010c62:	4621      	mov	r1, r4
 8010c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c68:	3b30      	subs	r3, #48	; 0x30
 8010c6a:	2b09      	cmp	r3, #9
 8010c6c:	d94e      	bls.n	8010d0c <_vfiprintf_r+0x1c4>
 8010c6e:	b1b0      	cbz	r0, 8010c9e <_vfiprintf_r+0x156>
 8010c70:	9207      	str	r2, [sp, #28]
 8010c72:	e014      	b.n	8010c9e <_vfiprintf_r+0x156>
 8010c74:	eba0 0308 	sub.w	r3, r0, r8
 8010c78:	fa09 f303 	lsl.w	r3, r9, r3
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	9304      	str	r3, [sp, #16]
 8010c80:	46a2      	mov	sl, r4
 8010c82:	e7d2      	b.n	8010c2a <_vfiprintf_r+0xe2>
 8010c84:	9b03      	ldr	r3, [sp, #12]
 8010c86:	1d19      	adds	r1, r3, #4
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	9103      	str	r1, [sp, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	bfbb      	ittet	lt
 8010c90:	425b      	neglt	r3, r3
 8010c92:	f042 0202 	orrlt.w	r2, r2, #2
 8010c96:	9307      	strge	r3, [sp, #28]
 8010c98:	9307      	strlt	r3, [sp, #28]
 8010c9a:	bfb8      	it	lt
 8010c9c:	9204      	strlt	r2, [sp, #16]
 8010c9e:	7823      	ldrb	r3, [r4, #0]
 8010ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ca2:	d10c      	bne.n	8010cbe <_vfiprintf_r+0x176>
 8010ca4:	7863      	ldrb	r3, [r4, #1]
 8010ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ca8:	d135      	bne.n	8010d16 <_vfiprintf_r+0x1ce>
 8010caa:	9b03      	ldr	r3, [sp, #12]
 8010cac:	1d1a      	adds	r2, r3, #4
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	9203      	str	r2, [sp, #12]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	bfb8      	it	lt
 8010cb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cba:	3402      	adds	r4, #2
 8010cbc:	9305      	str	r3, [sp, #20]
 8010cbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010da4 <_vfiprintf_r+0x25c>
 8010cc2:	7821      	ldrb	r1, [r4, #0]
 8010cc4:	2203      	movs	r2, #3
 8010cc6:	4650      	mov	r0, sl
 8010cc8:	f7ef faa2 	bl	8000210 <memchr>
 8010ccc:	b140      	cbz	r0, 8010ce0 <_vfiprintf_r+0x198>
 8010cce:	2340      	movs	r3, #64	; 0x40
 8010cd0:	eba0 000a 	sub.w	r0, r0, sl
 8010cd4:	fa03 f000 	lsl.w	r0, r3, r0
 8010cd8:	9b04      	ldr	r3, [sp, #16]
 8010cda:	4303      	orrs	r3, r0
 8010cdc:	3401      	adds	r4, #1
 8010cde:	9304      	str	r3, [sp, #16]
 8010ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce4:	482c      	ldr	r0, [pc, #176]	; (8010d98 <_vfiprintf_r+0x250>)
 8010ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cea:	2206      	movs	r2, #6
 8010cec:	f7ef fa90 	bl	8000210 <memchr>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d03f      	beq.n	8010d74 <_vfiprintf_r+0x22c>
 8010cf4:	4b29      	ldr	r3, [pc, #164]	; (8010d9c <_vfiprintf_r+0x254>)
 8010cf6:	bb1b      	cbnz	r3, 8010d40 <_vfiprintf_r+0x1f8>
 8010cf8:	9b03      	ldr	r3, [sp, #12]
 8010cfa:	3307      	adds	r3, #7
 8010cfc:	f023 0307 	bic.w	r3, r3, #7
 8010d00:	3308      	adds	r3, #8
 8010d02:	9303      	str	r3, [sp, #12]
 8010d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d06:	443b      	add	r3, r7
 8010d08:	9309      	str	r3, [sp, #36]	; 0x24
 8010d0a:	e767      	b.n	8010bdc <_vfiprintf_r+0x94>
 8010d0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d10:	460c      	mov	r4, r1
 8010d12:	2001      	movs	r0, #1
 8010d14:	e7a5      	b.n	8010c62 <_vfiprintf_r+0x11a>
 8010d16:	2300      	movs	r3, #0
 8010d18:	3401      	adds	r4, #1
 8010d1a:	9305      	str	r3, [sp, #20]
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	f04f 0c0a 	mov.w	ip, #10
 8010d22:	4620      	mov	r0, r4
 8010d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d28:	3a30      	subs	r2, #48	; 0x30
 8010d2a:	2a09      	cmp	r2, #9
 8010d2c:	d903      	bls.n	8010d36 <_vfiprintf_r+0x1ee>
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d0c5      	beq.n	8010cbe <_vfiprintf_r+0x176>
 8010d32:	9105      	str	r1, [sp, #20]
 8010d34:	e7c3      	b.n	8010cbe <_vfiprintf_r+0x176>
 8010d36:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	e7f0      	b.n	8010d22 <_vfiprintf_r+0x1da>
 8010d40:	ab03      	add	r3, sp, #12
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	462a      	mov	r2, r5
 8010d46:	4b16      	ldr	r3, [pc, #88]	; (8010da0 <_vfiprintf_r+0x258>)
 8010d48:	a904      	add	r1, sp, #16
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f3af 8000 	nop.w
 8010d50:	4607      	mov	r7, r0
 8010d52:	1c78      	adds	r0, r7, #1
 8010d54:	d1d6      	bne.n	8010d04 <_vfiprintf_r+0x1bc>
 8010d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d58:	07d9      	lsls	r1, r3, #31
 8010d5a:	d405      	bmi.n	8010d68 <_vfiprintf_r+0x220>
 8010d5c:	89ab      	ldrh	r3, [r5, #12]
 8010d5e:	059a      	lsls	r2, r3, #22
 8010d60:	d402      	bmi.n	8010d68 <_vfiprintf_r+0x220>
 8010d62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d64:	f7ff fe13 	bl	801098e <__retarget_lock_release_recursive>
 8010d68:	89ab      	ldrh	r3, [r5, #12]
 8010d6a:	065b      	lsls	r3, r3, #25
 8010d6c:	f53f af12 	bmi.w	8010b94 <_vfiprintf_r+0x4c>
 8010d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d72:	e711      	b.n	8010b98 <_vfiprintf_r+0x50>
 8010d74:	ab03      	add	r3, sp, #12
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	462a      	mov	r2, r5
 8010d7a:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <_vfiprintf_r+0x258>)
 8010d7c:	a904      	add	r1, sp, #16
 8010d7e:	4630      	mov	r0, r6
 8010d80:	f000 f880 	bl	8010e84 <_printf_i>
 8010d84:	e7e4      	b.n	8010d50 <_vfiprintf_r+0x208>
 8010d86:	bf00      	nop
 8010d88:	08014444 	.word	0x08014444
 8010d8c:	08014464 	.word	0x08014464
 8010d90:	08014424 	.word	0x08014424
 8010d94:	08014484 	.word	0x08014484
 8010d98:	0801448e 	.word	0x0801448e
 8010d9c:	00000000 	.word	0x00000000
 8010da0:	08010b23 	.word	0x08010b23
 8010da4:	0801448a 	.word	0x0801448a

08010da8 <_printf_common>:
 8010da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dac:	4616      	mov	r6, r2
 8010dae:	4699      	mov	r9, r3
 8010db0:	688a      	ldr	r2, [r1, #8]
 8010db2:	690b      	ldr	r3, [r1, #16]
 8010db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010db8:	4293      	cmp	r3, r2
 8010dba:	bfb8      	it	lt
 8010dbc:	4613      	movlt	r3, r2
 8010dbe:	6033      	str	r3, [r6, #0]
 8010dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010dc4:	4607      	mov	r7, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	b10a      	cbz	r2, 8010dce <_printf_common+0x26>
 8010dca:	3301      	adds	r3, #1
 8010dcc:	6033      	str	r3, [r6, #0]
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	0699      	lsls	r1, r3, #26
 8010dd2:	bf42      	ittt	mi
 8010dd4:	6833      	ldrmi	r3, [r6, #0]
 8010dd6:	3302      	addmi	r3, #2
 8010dd8:	6033      	strmi	r3, [r6, #0]
 8010dda:	6825      	ldr	r5, [r4, #0]
 8010ddc:	f015 0506 	ands.w	r5, r5, #6
 8010de0:	d106      	bne.n	8010df0 <_printf_common+0x48>
 8010de2:	f104 0a19 	add.w	sl, r4, #25
 8010de6:	68e3      	ldr	r3, [r4, #12]
 8010de8:	6832      	ldr	r2, [r6, #0]
 8010dea:	1a9b      	subs	r3, r3, r2
 8010dec:	42ab      	cmp	r3, r5
 8010dee:	dc26      	bgt.n	8010e3e <_printf_common+0x96>
 8010df0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010df4:	1e13      	subs	r3, r2, #0
 8010df6:	6822      	ldr	r2, [r4, #0]
 8010df8:	bf18      	it	ne
 8010dfa:	2301      	movne	r3, #1
 8010dfc:	0692      	lsls	r2, r2, #26
 8010dfe:	d42b      	bmi.n	8010e58 <_printf_common+0xb0>
 8010e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e04:	4649      	mov	r1, r9
 8010e06:	4638      	mov	r0, r7
 8010e08:	47c0      	blx	r8
 8010e0a:	3001      	adds	r0, #1
 8010e0c:	d01e      	beq.n	8010e4c <_printf_common+0xa4>
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	68e5      	ldr	r5, [r4, #12]
 8010e12:	6832      	ldr	r2, [r6, #0]
 8010e14:	f003 0306 	and.w	r3, r3, #6
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	bf08      	it	eq
 8010e1c:	1aad      	subeq	r5, r5, r2
 8010e1e:	68a3      	ldr	r3, [r4, #8]
 8010e20:	6922      	ldr	r2, [r4, #16]
 8010e22:	bf0c      	ite	eq
 8010e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e28:	2500      	movne	r5, #0
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	bfc4      	itt	gt
 8010e2e:	1a9b      	subgt	r3, r3, r2
 8010e30:	18ed      	addgt	r5, r5, r3
 8010e32:	2600      	movs	r6, #0
 8010e34:	341a      	adds	r4, #26
 8010e36:	42b5      	cmp	r5, r6
 8010e38:	d11a      	bne.n	8010e70 <_printf_common+0xc8>
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	e008      	b.n	8010e50 <_printf_common+0xa8>
 8010e3e:	2301      	movs	r3, #1
 8010e40:	4652      	mov	r2, sl
 8010e42:	4649      	mov	r1, r9
 8010e44:	4638      	mov	r0, r7
 8010e46:	47c0      	blx	r8
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d103      	bne.n	8010e54 <_printf_common+0xac>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e54:	3501      	adds	r5, #1
 8010e56:	e7c6      	b.n	8010de6 <_printf_common+0x3e>
 8010e58:	18e1      	adds	r1, r4, r3
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	2030      	movs	r0, #48	; 0x30
 8010e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e62:	4422      	add	r2, r4
 8010e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e6c:	3302      	adds	r3, #2
 8010e6e:	e7c7      	b.n	8010e00 <_printf_common+0x58>
 8010e70:	2301      	movs	r3, #1
 8010e72:	4622      	mov	r2, r4
 8010e74:	4649      	mov	r1, r9
 8010e76:	4638      	mov	r0, r7
 8010e78:	47c0      	blx	r8
 8010e7a:	3001      	adds	r0, #1
 8010e7c:	d0e6      	beq.n	8010e4c <_printf_common+0xa4>
 8010e7e:	3601      	adds	r6, #1
 8010e80:	e7d9      	b.n	8010e36 <_printf_common+0x8e>
	...

08010e84 <_printf_i>:
 8010e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e88:	460c      	mov	r4, r1
 8010e8a:	4691      	mov	r9, r2
 8010e8c:	7e27      	ldrb	r7, [r4, #24]
 8010e8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e90:	2f78      	cmp	r7, #120	; 0x78
 8010e92:	4680      	mov	r8, r0
 8010e94:	469a      	mov	sl, r3
 8010e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e9a:	d807      	bhi.n	8010eac <_printf_i+0x28>
 8010e9c:	2f62      	cmp	r7, #98	; 0x62
 8010e9e:	d80a      	bhi.n	8010eb6 <_printf_i+0x32>
 8010ea0:	2f00      	cmp	r7, #0
 8010ea2:	f000 80d8 	beq.w	8011056 <_printf_i+0x1d2>
 8010ea6:	2f58      	cmp	r7, #88	; 0x58
 8010ea8:	f000 80a3 	beq.w	8010ff2 <_printf_i+0x16e>
 8010eac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010eb4:	e03a      	b.n	8010f2c <_printf_i+0xa8>
 8010eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010eba:	2b15      	cmp	r3, #21
 8010ebc:	d8f6      	bhi.n	8010eac <_printf_i+0x28>
 8010ebe:	a001      	add	r0, pc, #4	; (adr r0, 8010ec4 <_printf_i+0x40>)
 8010ec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010ec4:	08010f1d 	.word	0x08010f1d
 8010ec8:	08010f31 	.word	0x08010f31
 8010ecc:	08010ead 	.word	0x08010ead
 8010ed0:	08010ead 	.word	0x08010ead
 8010ed4:	08010ead 	.word	0x08010ead
 8010ed8:	08010ead 	.word	0x08010ead
 8010edc:	08010f31 	.word	0x08010f31
 8010ee0:	08010ead 	.word	0x08010ead
 8010ee4:	08010ead 	.word	0x08010ead
 8010ee8:	08010ead 	.word	0x08010ead
 8010eec:	08010ead 	.word	0x08010ead
 8010ef0:	0801103d 	.word	0x0801103d
 8010ef4:	08010f61 	.word	0x08010f61
 8010ef8:	0801101f 	.word	0x0801101f
 8010efc:	08010ead 	.word	0x08010ead
 8010f00:	08010ead 	.word	0x08010ead
 8010f04:	0801105f 	.word	0x0801105f
 8010f08:	08010ead 	.word	0x08010ead
 8010f0c:	08010f61 	.word	0x08010f61
 8010f10:	08010ead 	.word	0x08010ead
 8010f14:	08010ead 	.word	0x08010ead
 8010f18:	08011027 	.word	0x08011027
 8010f1c:	680b      	ldr	r3, [r1, #0]
 8010f1e:	1d1a      	adds	r2, r3, #4
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	600a      	str	r2, [r1, #0]
 8010f24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e0a3      	b.n	8011078 <_printf_i+0x1f4>
 8010f30:	6825      	ldr	r5, [r4, #0]
 8010f32:	6808      	ldr	r0, [r1, #0]
 8010f34:	062e      	lsls	r6, r5, #24
 8010f36:	f100 0304 	add.w	r3, r0, #4
 8010f3a:	d50a      	bpl.n	8010f52 <_printf_i+0xce>
 8010f3c:	6805      	ldr	r5, [r0, #0]
 8010f3e:	600b      	str	r3, [r1, #0]
 8010f40:	2d00      	cmp	r5, #0
 8010f42:	da03      	bge.n	8010f4c <_printf_i+0xc8>
 8010f44:	232d      	movs	r3, #45	; 0x2d
 8010f46:	426d      	negs	r5, r5
 8010f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f4c:	485e      	ldr	r0, [pc, #376]	; (80110c8 <_printf_i+0x244>)
 8010f4e:	230a      	movs	r3, #10
 8010f50:	e019      	b.n	8010f86 <_printf_i+0x102>
 8010f52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010f56:	6805      	ldr	r5, [r0, #0]
 8010f58:	600b      	str	r3, [r1, #0]
 8010f5a:	bf18      	it	ne
 8010f5c:	b22d      	sxthne	r5, r5
 8010f5e:	e7ef      	b.n	8010f40 <_printf_i+0xbc>
 8010f60:	680b      	ldr	r3, [r1, #0]
 8010f62:	6825      	ldr	r5, [r4, #0]
 8010f64:	1d18      	adds	r0, r3, #4
 8010f66:	6008      	str	r0, [r1, #0]
 8010f68:	0628      	lsls	r0, r5, #24
 8010f6a:	d501      	bpl.n	8010f70 <_printf_i+0xec>
 8010f6c:	681d      	ldr	r5, [r3, #0]
 8010f6e:	e002      	b.n	8010f76 <_printf_i+0xf2>
 8010f70:	0669      	lsls	r1, r5, #25
 8010f72:	d5fb      	bpl.n	8010f6c <_printf_i+0xe8>
 8010f74:	881d      	ldrh	r5, [r3, #0]
 8010f76:	4854      	ldr	r0, [pc, #336]	; (80110c8 <_printf_i+0x244>)
 8010f78:	2f6f      	cmp	r7, #111	; 0x6f
 8010f7a:	bf0c      	ite	eq
 8010f7c:	2308      	moveq	r3, #8
 8010f7e:	230a      	movne	r3, #10
 8010f80:	2100      	movs	r1, #0
 8010f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f86:	6866      	ldr	r6, [r4, #4]
 8010f88:	60a6      	str	r6, [r4, #8]
 8010f8a:	2e00      	cmp	r6, #0
 8010f8c:	bfa2      	ittt	ge
 8010f8e:	6821      	ldrge	r1, [r4, #0]
 8010f90:	f021 0104 	bicge.w	r1, r1, #4
 8010f94:	6021      	strge	r1, [r4, #0]
 8010f96:	b90d      	cbnz	r5, 8010f9c <_printf_i+0x118>
 8010f98:	2e00      	cmp	r6, #0
 8010f9a:	d04d      	beq.n	8011038 <_printf_i+0x1b4>
 8010f9c:	4616      	mov	r6, r2
 8010f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8010fa6:	5dc7      	ldrb	r7, [r0, r7]
 8010fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fac:	462f      	mov	r7, r5
 8010fae:	42bb      	cmp	r3, r7
 8010fb0:	460d      	mov	r5, r1
 8010fb2:	d9f4      	bls.n	8010f9e <_printf_i+0x11a>
 8010fb4:	2b08      	cmp	r3, #8
 8010fb6:	d10b      	bne.n	8010fd0 <_printf_i+0x14c>
 8010fb8:	6823      	ldr	r3, [r4, #0]
 8010fba:	07df      	lsls	r7, r3, #31
 8010fbc:	d508      	bpl.n	8010fd0 <_printf_i+0x14c>
 8010fbe:	6923      	ldr	r3, [r4, #16]
 8010fc0:	6861      	ldr	r1, [r4, #4]
 8010fc2:	4299      	cmp	r1, r3
 8010fc4:	bfde      	ittt	le
 8010fc6:	2330      	movle	r3, #48	; 0x30
 8010fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010fd0:	1b92      	subs	r2, r2, r6
 8010fd2:	6122      	str	r2, [r4, #16]
 8010fd4:	f8cd a000 	str.w	sl, [sp]
 8010fd8:	464b      	mov	r3, r9
 8010fda:	aa03      	add	r2, sp, #12
 8010fdc:	4621      	mov	r1, r4
 8010fde:	4640      	mov	r0, r8
 8010fe0:	f7ff fee2 	bl	8010da8 <_printf_common>
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	d14c      	bne.n	8011082 <_printf_i+0x1fe>
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	b004      	add	sp, #16
 8010fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ff2:	4835      	ldr	r0, [pc, #212]	; (80110c8 <_printf_i+0x244>)
 8010ff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	680e      	ldr	r6, [r1, #0]
 8010ffc:	061f      	lsls	r7, r3, #24
 8010ffe:	f856 5b04 	ldr.w	r5, [r6], #4
 8011002:	600e      	str	r6, [r1, #0]
 8011004:	d514      	bpl.n	8011030 <_printf_i+0x1ac>
 8011006:	07d9      	lsls	r1, r3, #31
 8011008:	bf44      	itt	mi
 801100a:	f043 0320 	orrmi.w	r3, r3, #32
 801100e:	6023      	strmi	r3, [r4, #0]
 8011010:	b91d      	cbnz	r5, 801101a <_printf_i+0x196>
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	f023 0320 	bic.w	r3, r3, #32
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	2310      	movs	r3, #16
 801101c:	e7b0      	b.n	8010f80 <_printf_i+0xfc>
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	f043 0320 	orr.w	r3, r3, #32
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	2378      	movs	r3, #120	; 0x78
 8011028:	4828      	ldr	r0, [pc, #160]	; (80110cc <_printf_i+0x248>)
 801102a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801102e:	e7e3      	b.n	8010ff8 <_printf_i+0x174>
 8011030:	065e      	lsls	r6, r3, #25
 8011032:	bf48      	it	mi
 8011034:	b2ad      	uxthmi	r5, r5
 8011036:	e7e6      	b.n	8011006 <_printf_i+0x182>
 8011038:	4616      	mov	r6, r2
 801103a:	e7bb      	b.n	8010fb4 <_printf_i+0x130>
 801103c:	680b      	ldr	r3, [r1, #0]
 801103e:	6826      	ldr	r6, [r4, #0]
 8011040:	6960      	ldr	r0, [r4, #20]
 8011042:	1d1d      	adds	r5, r3, #4
 8011044:	600d      	str	r5, [r1, #0]
 8011046:	0635      	lsls	r5, r6, #24
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	d501      	bpl.n	8011050 <_printf_i+0x1cc>
 801104c:	6018      	str	r0, [r3, #0]
 801104e:	e002      	b.n	8011056 <_printf_i+0x1d2>
 8011050:	0671      	lsls	r1, r6, #25
 8011052:	d5fb      	bpl.n	801104c <_printf_i+0x1c8>
 8011054:	8018      	strh	r0, [r3, #0]
 8011056:	2300      	movs	r3, #0
 8011058:	6123      	str	r3, [r4, #16]
 801105a:	4616      	mov	r6, r2
 801105c:	e7ba      	b.n	8010fd4 <_printf_i+0x150>
 801105e:	680b      	ldr	r3, [r1, #0]
 8011060:	1d1a      	adds	r2, r3, #4
 8011062:	600a      	str	r2, [r1, #0]
 8011064:	681e      	ldr	r6, [r3, #0]
 8011066:	6862      	ldr	r2, [r4, #4]
 8011068:	2100      	movs	r1, #0
 801106a:	4630      	mov	r0, r6
 801106c:	f7ef f8d0 	bl	8000210 <memchr>
 8011070:	b108      	cbz	r0, 8011076 <_printf_i+0x1f2>
 8011072:	1b80      	subs	r0, r0, r6
 8011074:	6060      	str	r0, [r4, #4]
 8011076:	6863      	ldr	r3, [r4, #4]
 8011078:	6123      	str	r3, [r4, #16]
 801107a:	2300      	movs	r3, #0
 801107c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011080:	e7a8      	b.n	8010fd4 <_printf_i+0x150>
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	4632      	mov	r2, r6
 8011086:	4649      	mov	r1, r9
 8011088:	4640      	mov	r0, r8
 801108a:	47d0      	blx	sl
 801108c:	3001      	adds	r0, #1
 801108e:	d0ab      	beq.n	8010fe8 <_printf_i+0x164>
 8011090:	6823      	ldr	r3, [r4, #0]
 8011092:	079b      	lsls	r3, r3, #30
 8011094:	d413      	bmi.n	80110be <_printf_i+0x23a>
 8011096:	68e0      	ldr	r0, [r4, #12]
 8011098:	9b03      	ldr	r3, [sp, #12]
 801109a:	4298      	cmp	r0, r3
 801109c:	bfb8      	it	lt
 801109e:	4618      	movlt	r0, r3
 80110a0:	e7a4      	b.n	8010fec <_printf_i+0x168>
 80110a2:	2301      	movs	r3, #1
 80110a4:	4632      	mov	r2, r6
 80110a6:	4649      	mov	r1, r9
 80110a8:	4640      	mov	r0, r8
 80110aa:	47d0      	blx	sl
 80110ac:	3001      	adds	r0, #1
 80110ae:	d09b      	beq.n	8010fe8 <_printf_i+0x164>
 80110b0:	3501      	adds	r5, #1
 80110b2:	68e3      	ldr	r3, [r4, #12]
 80110b4:	9903      	ldr	r1, [sp, #12]
 80110b6:	1a5b      	subs	r3, r3, r1
 80110b8:	42ab      	cmp	r3, r5
 80110ba:	dcf2      	bgt.n	80110a2 <_printf_i+0x21e>
 80110bc:	e7eb      	b.n	8011096 <_printf_i+0x212>
 80110be:	2500      	movs	r5, #0
 80110c0:	f104 0619 	add.w	r6, r4, #25
 80110c4:	e7f5      	b.n	80110b2 <_printf_i+0x22e>
 80110c6:	bf00      	nop
 80110c8:	08014495 	.word	0x08014495
 80110cc:	080144a6 	.word	0x080144a6

080110d0 <_sbrk_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d06      	ldr	r5, [pc, #24]	; (80110ec <_sbrk_r+0x1c>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	f7ef fc44 	bl	8000968 <_sbrk>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	d102      	bne.n	80110ea <_sbrk_r+0x1a>
 80110e4:	682b      	ldr	r3, [r5, #0]
 80110e6:	b103      	cbz	r3, 80110ea <_sbrk_r+0x1a>
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	bd38      	pop	{r3, r4, r5, pc}
 80110ec:	2000cc18 	.word	0x2000cc18

080110f0 <__sread>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	460c      	mov	r4, r1
 80110f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110f8:	f000 fa6c 	bl	80115d4 <_read_r>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	bfab      	itete	ge
 8011100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011102:	89a3      	ldrhlt	r3, [r4, #12]
 8011104:	181b      	addge	r3, r3, r0
 8011106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801110a:	bfac      	ite	ge
 801110c:	6563      	strge	r3, [r4, #84]	; 0x54
 801110e:	81a3      	strhlt	r3, [r4, #12]
 8011110:	bd10      	pop	{r4, pc}

08011112 <__swrite>:
 8011112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011116:	461f      	mov	r7, r3
 8011118:	898b      	ldrh	r3, [r1, #12]
 801111a:	05db      	lsls	r3, r3, #23
 801111c:	4605      	mov	r5, r0
 801111e:	460c      	mov	r4, r1
 8011120:	4616      	mov	r6, r2
 8011122:	d505      	bpl.n	8011130 <__swrite+0x1e>
 8011124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011128:	2302      	movs	r3, #2
 801112a:	2200      	movs	r2, #0
 801112c:	f000 f9d0 	bl	80114d0 <_lseek_r>
 8011130:	89a3      	ldrh	r3, [r4, #12]
 8011132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801113a:	81a3      	strh	r3, [r4, #12]
 801113c:	4632      	mov	r2, r6
 801113e:	463b      	mov	r3, r7
 8011140:	4628      	mov	r0, r5
 8011142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011146:	f000 b869 	b.w	801121c <_write_r>

0801114a <__sseek>:
 801114a:	b510      	push	{r4, lr}
 801114c:	460c      	mov	r4, r1
 801114e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011152:	f000 f9bd 	bl	80114d0 <_lseek_r>
 8011156:	1c43      	adds	r3, r0, #1
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	bf15      	itete	ne
 801115c:	6560      	strne	r0, [r4, #84]	; 0x54
 801115e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011166:	81a3      	strheq	r3, [r4, #12]
 8011168:	bf18      	it	ne
 801116a:	81a3      	strhne	r3, [r4, #12]
 801116c:	bd10      	pop	{r4, pc}

0801116e <__sclose>:
 801116e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011172:	f000 b8db 	b.w	801132c <_close_r>
	...

08011178 <__swbuf_r>:
 8011178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117a:	460e      	mov	r6, r1
 801117c:	4614      	mov	r4, r2
 801117e:	4605      	mov	r5, r0
 8011180:	b118      	cbz	r0, 801118a <__swbuf_r+0x12>
 8011182:	6983      	ldr	r3, [r0, #24]
 8011184:	b90b      	cbnz	r3, 801118a <__swbuf_r+0x12>
 8011186:	f7ff fb51 	bl	801082c <__sinit>
 801118a:	4b21      	ldr	r3, [pc, #132]	; (8011210 <__swbuf_r+0x98>)
 801118c:	429c      	cmp	r4, r3
 801118e:	d12b      	bne.n	80111e8 <__swbuf_r+0x70>
 8011190:	686c      	ldr	r4, [r5, #4]
 8011192:	69a3      	ldr	r3, [r4, #24]
 8011194:	60a3      	str	r3, [r4, #8]
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	071a      	lsls	r2, r3, #28
 801119a:	d52f      	bpl.n	80111fc <__swbuf_r+0x84>
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	b36b      	cbz	r3, 80111fc <__swbuf_r+0x84>
 80111a0:	6923      	ldr	r3, [r4, #16]
 80111a2:	6820      	ldr	r0, [r4, #0]
 80111a4:	1ac0      	subs	r0, r0, r3
 80111a6:	6963      	ldr	r3, [r4, #20]
 80111a8:	b2f6      	uxtb	r6, r6
 80111aa:	4283      	cmp	r3, r0
 80111ac:	4637      	mov	r7, r6
 80111ae:	dc04      	bgt.n	80111ba <__swbuf_r+0x42>
 80111b0:	4621      	mov	r1, r4
 80111b2:	4628      	mov	r0, r5
 80111b4:	f000 f950 	bl	8011458 <_fflush_r>
 80111b8:	bb30      	cbnz	r0, 8011208 <__swbuf_r+0x90>
 80111ba:	68a3      	ldr	r3, [r4, #8]
 80111bc:	3b01      	subs	r3, #1
 80111be:	60a3      	str	r3, [r4, #8]
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	1c5a      	adds	r2, r3, #1
 80111c4:	6022      	str	r2, [r4, #0]
 80111c6:	701e      	strb	r6, [r3, #0]
 80111c8:	6963      	ldr	r3, [r4, #20]
 80111ca:	3001      	adds	r0, #1
 80111cc:	4283      	cmp	r3, r0
 80111ce:	d004      	beq.n	80111da <__swbuf_r+0x62>
 80111d0:	89a3      	ldrh	r3, [r4, #12]
 80111d2:	07db      	lsls	r3, r3, #31
 80111d4:	d506      	bpl.n	80111e4 <__swbuf_r+0x6c>
 80111d6:	2e0a      	cmp	r6, #10
 80111d8:	d104      	bne.n	80111e4 <__swbuf_r+0x6c>
 80111da:	4621      	mov	r1, r4
 80111dc:	4628      	mov	r0, r5
 80111de:	f000 f93b 	bl	8011458 <_fflush_r>
 80111e2:	b988      	cbnz	r0, 8011208 <__swbuf_r+0x90>
 80111e4:	4638      	mov	r0, r7
 80111e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111e8:	4b0a      	ldr	r3, [pc, #40]	; (8011214 <__swbuf_r+0x9c>)
 80111ea:	429c      	cmp	r4, r3
 80111ec:	d101      	bne.n	80111f2 <__swbuf_r+0x7a>
 80111ee:	68ac      	ldr	r4, [r5, #8]
 80111f0:	e7cf      	b.n	8011192 <__swbuf_r+0x1a>
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <__swbuf_r+0xa0>)
 80111f4:	429c      	cmp	r4, r3
 80111f6:	bf08      	it	eq
 80111f8:	68ec      	ldreq	r4, [r5, #12]
 80111fa:	e7ca      	b.n	8011192 <__swbuf_r+0x1a>
 80111fc:	4621      	mov	r1, r4
 80111fe:	4628      	mov	r0, r5
 8011200:	f000 f81e 	bl	8011240 <__swsetup_r>
 8011204:	2800      	cmp	r0, #0
 8011206:	d0cb      	beq.n	80111a0 <__swbuf_r+0x28>
 8011208:	f04f 37ff 	mov.w	r7, #4294967295
 801120c:	e7ea      	b.n	80111e4 <__swbuf_r+0x6c>
 801120e:	bf00      	nop
 8011210:	08014444 	.word	0x08014444
 8011214:	08014464 	.word	0x08014464
 8011218:	08014424 	.word	0x08014424

0801121c <_write_r>:
 801121c:	b538      	push	{r3, r4, r5, lr}
 801121e:	4d07      	ldr	r5, [pc, #28]	; (801123c <_write_r+0x20>)
 8011220:	4604      	mov	r4, r0
 8011222:	4608      	mov	r0, r1
 8011224:	4611      	mov	r1, r2
 8011226:	2200      	movs	r2, #0
 8011228:	602a      	str	r2, [r5, #0]
 801122a:	461a      	mov	r2, r3
 801122c:	f7ef fb4b 	bl	80008c6 <_write>
 8011230:	1c43      	adds	r3, r0, #1
 8011232:	d102      	bne.n	801123a <_write_r+0x1e>
 8011234:	682b      	ldr	r3, [r5, #0]
 8011236:	b103      	cbz	r3, 801123a <_write_r+0x1e>
 8011238:	6023      	str	r3, [r4, #0]
 801123a:	bd38      	pop	{r3, r4, r5, pc}
 801123c:	2000cc18 	.word	0x2000cc18

08011240 <__swsetup_r>:
 8011240:	4b32      	ldr	r3, [pc, #200]	; (801130c <__swsetup_r+0xcc>)
 8011242:	b570      	push	{r4, r5, r6, lr}
 8011244:	681d      	ldr	r5, [r3, #0]
 8011246:	4606      	mov	r6, r0
 8011248:	460c      	mov	r4, r1
 801124a:	b125      	cbz	r5, 8011256 <__swsetup_r+0x16>
 801124c:	69ab      	ldr	r3, [r5, #24]
 801124e:	b913      	cbnz	r3, 8011256 <__swsetup_r+0x16>
 8011250:	4628      	mov	r0, r5
 8011252:	f7ff faeb 	bl	801082c <__sinit>
 8011256:	4b2e      	ldr	r3, [pc, #184]	; (8011310 <__swsetup_r+0xd0>)
 8011258:	429c      	cmp	r4, r3
 801125a:	d10f      	bne.n	801127c <__swsetup_r+0x3c>
 801125c:	686c      	ldr	r4, [r5, #4]
 801125e:	89a3      	ldrh	r3, [r4, #12]
 8011260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011264:	0719      	lsls	r1, r3, #28
 8011266:	d42c      	bmi.n	80112c2 <__swsetup_r+0x82>
 8011268:	06dd      	lsls	r5, r3, #27
 801126a:	d411      	bmi.n	8011290 <__swsetup_r+0x50>
 801126c:	2309      	movs	r3, #9
 801126e:	6033      	str	r3, [r6, #0]
 8011270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	f04f 30ff 	mov.w	r0, #4294967295
 801127a:	e03e      	b.n	80112fa <__swsetup_r+0xba>
 801127c:	4b25      	ldr	r3, [pc, #148]	; (8011314 <__swsetup_r+0xd4>)
 801127e:	429c      	cmp	r4, r3
 8011280:	d101      	bne.n	8011286 <__swsetup_r+0x46>
 8011282:	68ac      	ldr	r4, [r5, #8]
 8011284:	e7eb      	b.n	801125e <__swsetup_r+0x1e>
 8011286:	4b24      	ldr	r3, [pc, #144]	; (8011318 <__swsetup_r+0xd8>)
 8011288:	429c      	cmp	r4, r3
 801128a:	bf08      	it	eq
 801128c:	68ec      	ldreq	r4, [r5, #12]
 801128e:	e7e6      	b.n	801125e <__swsetup_r+0x1e>
 8011290:	0758      	lsls	r0, r3, #29
 8011292:	d512      	bpl.n	80112ba <__swsetup_r+0x7a>
 8011294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011296:	b141      	cbz	r1, 80112aa <__swsetup_r+0x6a>
 8011298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801129c:	4299      	cmp	r1, r3
 801129e:	d002      	beq.n	80112a6 <__swsetup_r+0x66>
 80112a0:	4630      	mov	r0, r6
 80112a2:	f7ff fb7d 	bl	80109a0 <_free_r>
 80112a6:	2300      	movs	r3, #0
 80112a8:	6363      	str	r3, [r4, #52]	; 0x34
 80112aa:	89a3      	ldrh	r3, [r4, #12]
 80112ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112b0:	81a3      	strh	r3, [r4, #12]
 80112b2:	2300      	movs	r3, #0
 80112b4:	6063      	str	r3, [r4, #4]
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	89a3      	ldrh	r3, [r4, #12]
 80112bc:	f043 0308 	orr.w	r3, r3, #8
 80112c0:	81a3      	strh	r3, [r4, #12]
 80112c2:	6923      	ldr	r3, [r4, #16]
 80112c4:	b94b      	cbnz	r3, 80112da <__swsetup_r+0x9a>
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112d0:	d003      	beq.n	80112da <__swsetup_r+0x9a>
 80112d2:	4621      	mov	r1, r4
 80112d4:	4630      	mov	r0, r6
 80112d6:	f000 f931 	bl	801153c <__smakebuf_r>
 80112da:	89a0      	ldrh	r0, [r4, #12]
 80112dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112e0:	f010 0301 	ands.w	r3, r0, #1
 80112e4:	d00a      	beq.n	80112fc <__swsetup_r+0xbc>
 80112e6:	2300      	movs	r3, #0
 80112e8:	60a3      	str	r3, [r4, #8]
 80112ea:	6963      	ldr	r3, [r4, #20]
 80112ec:	425b      	negs	r3, r3
 80112ee:	61a3      	str	r3, [r4, #24]
 80112f0:	6923      	ldr	r3, [r4, #16]
 80112f2:	b943      	cbnz	r3, 8011306 <__swsetup_r+0xc6>
 80112f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112f8:	d1ba      	bne.n	8011270 <__swsetup_r+0x30>
 80112fa:	bd70      	pop	{r4, r5, r6, pc}
 80112fc:	0781      	lsls	r1, r0, #30
 80112fe:	bf58      	it	pl
 8011300:	6963      	ldrpl	r3, [r4, #20]
 8011302:	60a3      	str	r3, [r4, #8]
 8011304:	e7f4      	b.n	80112f0 <__swsetup_r+0xb0>
 8011306:	2000      	movs	r0, #0
 8011308:	e7f7      	b.n	80112fa <__swsetup_r+0xba>
 801130a:	bf00      	nop
 801130c:	2000001c 	.word	0x2000001c
 8011310:	08014444 	.word	0x08014444
 8011314:	08014464 	.word	0x08014464
 8011318:	08014424 	.word	0x08014424

0801131c <abort>:
 801131c:	b508      	push	{r3, lr}
 801131e:	2006      	movs	r0, #6
 8011320:	f000 f992 	bl	8011648 <raise>
 8011324:	2001      	movs	r0, #1
 8011326:	f7ef faa7 	bl	8000878 <_exit>
	...

0801132c <_close_r>:
 801132c:	b538      	push	{r3, r4, r5, lr}
 801132e:	4d06      	ldr	r5, [pc, #24]	; (8011348 <_close_r+0x1c>)
 8011330:	2300      	movs	r3, #0
 8011332:	4604      	mov	r4, r0
 8011334:	4608      	mov	r0, r1
 8011336:	602b      	str	r3, [r5, #0]
 8011338:	f7ef fae1 	bl	80008fe <_close>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_close_r+0x1a>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_close_r+0x1a>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	2000cc18 	.word	0x2000cc18

0801134c <__sflush_r>:
 801134c:	898a      	ldrh	r2, [r1, #12]
 801134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011352:	4605      	mov	r5, r0
 8011354:	0710      	lsls	r0, r2, #28
 8011356:	460c      	mov	r4, r1
 8011358:	d458      	bmi.n	801140c <__sflush_r+0xc0>
 801135a:	684b      	ldr	r3, [r1, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	dc05      	bgt.n	801136c <__sflush_r+0x20>
 8011360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011362:	2b00      	cmp	r3, #0
 8011364:	dc02      	bgt.n	801136c <__sflush_r+0x20>
 8011366:	2000      	movs	r0, #0
 8011368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801136e:	2e00      	cmp	r6, #0
 8011370:	d0f9      	beq.n	8011366 <__sflush_r+0x1a>
 8011372:	2300      	movs	r3, #0
 8011374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011378:	682f      	ldr	r7, [r5, #0]
 801137a:	602b      	str	r3, [r5, #0]
 801137c:	d032      	beq.n	80113e4 <__sflush_r+0x98>
 801137e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011380:	89a3      	ldrh	r3, [r4, #12]
 8011382:	075a      	lsls	r2, r3, #29
 8011384:	d505      	bpl.n	8011392 <__sflush_r+0x46>
 8011386:	6863      	ldr	r3, [r4, #4]
 8011388:	1ac0      	subs	r0, r0, r3
 801138a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801138c:	b10b      	cbz	r3, 8011392 <__sflush_r+0x46>
 801138e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011390:	1ac0      	subs	r0, r0, r3
 8011392:	2300      	movs	r3, #0
 8011394:	4602      	mov	r2, r0
 8011396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011398:	6a21      	ldr	r1, [r4, #32]
 801139a:	4628      	mov	r0, r5
 801139c:	47b0      	blx	r6
 801139e:	1c43      	adds	r3, r0, #1
 80113a0:	89a3      	ldrh	r3, [r4, #12]
 80113a2:	d106      	bne.n	80113b2 <__sflush_r+0x66>
 80113a4:	6829      	ldr	r1, [r5, #0]
 80113a6:	291d      	cmp	r1, #29
 80113a8:	d82c      	bhi.n	8011404 <__sflush_r+0xb8>
 80113aa:	4a2a      	ldr	r2, [pc, #168]	; (8011454 <__sflush_r+0x108>)
 80113ac:	40ca      	lsrs	r2, r1
 80113ae:	07d6      	lsls	r6, r2, #31
 80113b0:	d528      	bpl.n	8011404 <__sflush_r+0xb8>
 80113b2:	2200      	movs	r2, #0
 80113b4:	6062      	str	r2, [r4, #4]
 80113b6:	04d9      	lsls	r1, r3, #19
 80113b8:	6922      	ldr	r2, [r4, #16]
 80113ba:	6022      	str	r2, [r4, #0]
 80113bc:	d504      	bpl.n	80113c8 <__sflush_r+0x7c>
 80113be:	1c42      	adds	r2, r0, #1
 80113c0:	d101      	bne.n	80113c6 <__sflush_r+0x7a>
 80113c2:	682b      	ldr	r3, [r5, #0]
 80113c4:	b903      	cbnz	r3, 80113c8 <__sflush_r+0x7c>
 80113c6:	6560      	str	r0, [r4, #84]	; 0x54
 80113c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ca:	602f      	str	r7, [r5, #0]
 80113cc:	2900      	cmp	r1, #0
 80113ce:	d0ca      	beq.n	8011366 <__sflush_r+0x1a>
 80113d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113d4:	4299      	cmp	r1, r3
 80113d6:	d002      	beq.n	80113de <__sflush_r+0x92>
 80113d8:	4628      	mov	r0, r5
 80113da:	f7ff fae1 	bl	80109a0 <_free_r>
 80113de:	2000      	movs	r0, #0
 80113e0:	6360      	str	r0, [r4, #52]	; 0x34
 80113e2:	e7c1      	b.n	8011368 <__sflush_r+0x1c>
 80113e4:	6a21      	ldr	r1, [r4, #32]
 80113e6:	2301      	movs	r3, #1
 80113e8:	4628      	mov	r0, r5
 80113ea:	47b0      	blx	r6
 80113ec:	1c41      	adds	r1, r0, #1
 80113ee:	d1c7      	bne.n	8011380 <__sflush_r+0x34>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d0c4      	beq.n	8011380 <__sflush_r+0x34>
 80113f6:	2b1d      	cmp	r3, #29
 80113f8:	d001      	beq.n	80113fe <__sflush_r+0xb2>
 80113fa:	2b16      	cmp	r3, #22
 80113fc:	d101      	bne.n	8011402 <__sflush_r+0xb6>
 80113fe:	602f      	str	r7, [r5, #0]
 8011400:	e7b1      	b.n	8011366 <__sflush_r+0x1a>
 8011402:	89a3      	ldrh	r3, [r4, #12]
 8011404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011408:	81a3      	strh	r3, [r4, #12]
 801140a:	e7ad      	b.n	8011368 <__sflush_r+0x1c>
 801140c:	690f      	ldr	r7, [r1, #16]
 801140e:	2f00      	cmp	r7, #0
 8011410:	d0a9      	beq.n	8011366 <__sflush_r+0x1a>
 8011412:	0793      	lsls	r3, r2, #30
 8011414:	680e      	ldr	r6, [r1, #0]
 8011416:	bf08      	it	eq
 8011418:	694b      	ldreq	r3, [r1, #20]
 801141a:	600f      	str	r7, [r1, #0]
 801141c:	bf18      	it	ne
 801141e:	2300      	movne	r3, #0
 8011420:	eba6 0807 	sub.w	r8, r6, r7
 8011424:	608b      	str	r3, [r1, #8]
 8011426:	f1b8 0f00 	cmp.w	r8, #0
 801142a:	dd9c      	ble.n	8011366 <__sflush_r+0x1a>
 801142c:	6a21      	ldr	r1, [r4, #32]
 801142e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011430:	4643      	mov	r3, r8
 8011432:	463a      	mov	r2, r7
 8011434:	4628      	mov	r0, r5
 8011436:	47b0      	blx	r6
 8011438:	2800      	cmp	r0, #0
 801143a:	dc06      	bgt.n	801144a <__sflush_r+0xfe>
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011442:	81a3      	strh	r3, [r4, #12]
 8011444:	f04f 30ff 	mov.w	r0, #4294967295
 8011448:	e78e      	b.n	8011368 <__sflush_r+0x1c>
 801144a:	4407      	add	r7, r0
 801144c:	eba8 0800 	sub.w	r8, r8, r0
 8011450:	e7e9      	b.n	8011426 <__sflush_r+0xda>
 8011452:	bf00      	nop
 8011454:	20400001 	.word	0x20400001

08011458 <_fflush_r>:
 8011458:	b538      	push	{r3, r4, r5, lr}
 801145a:	690b      	ldr	r3, [r1, #16]
 801145c:	4605      	mov	r5, r0
 801145e:	460c      	mov	r4, r1
 8011460:	b913      	cbnz	r3, 8011468 <_fflush_r+0x10>
 8011462:	2500      	movs	r5, #0
 8011464:	4628      	mov	r0, r5
 8011466:	bd38      	pop	{r3, r4, r5, pc}
 8011468:	b118      	cbz	r0, 8011472 <_fflush_r+0x1a>
 801146a:	6983      	ldr	r3, [r0, #24]
 801146c:	b90b      	cbnz	r3, 8011472 <_fflush_r+0x1a>
 801146e:	f7ff f9dd 	bl	801082c <__sinit>
 8011472:	4b14      	ldr	r3, [pc, #80]	; (80114c4 <_fflush_r+0x6c>)
 8011474:	429c      	cmp	r4, r3
 8011476:	d11b      	bne.n	80114b0 <_fflush_r+0x58>
 8011478:	686c      	ldr	r4, [r5, #4]
 801147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d0ef      	beq.n	8011462 <_fflush_r+0xa>
 8011482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011484:	07d0      	lsls	r0, r2, #31
 8011486:	d404      	bmi.n	8011492 <_fflush_r+0x3a>
 8011488:	0599      	lsls	r1, r3, #22
 801148a:	d402      	bmi.n	8011492 <_fflush_r+0x3a>
 801148c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801148e:	f7ff fa7d 	bl	801098c <__retarget_lock_acquire_recursive>
 8011492:	4628      	mov	r0, r5
 8011494:	4621      	mov	r1, r4
 8011496:	f7ff ff59 	bl	801134c <__sflush_r>
 801149a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801149c:	07da      	lsls	r2, r3, #31
 801149e:	4605      	mov	r5, r0
 80114a0:	d4e0      	bmi.n	8011464 <_fflush_r+0xc>
 80114a2:	89a3      	ldrh	r3, [r4, #12]
 80114a4:	059b      	lsls	r3, r3, #22
 80114a6:	d4dd      	bmi.n	8011464 <_fflush_r+0xc>
 80114a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114aa:	f7ff fa70 	bl	801098e <__retarget_lock_release_recursive>
 80114ae:	e7d9      	b.n	8011464 <_fflush_r+0xc>
 80114b0:	4b05      	ldr	r3, [pc, #20]	; (80114c8 <_fflush_r+0x70>)
 80114b2:	429c      	cmp	r4, r3
 80114b4:	d101      	bne.n	80114ba <_fflush_r+0x62>
 80114b6:	68ac      	ldr	r4, [r5, #8]
 80114b8:	e7df      	b.n	801147a <_fflush_r+0x22>
 80114ba:	4b04      	ldr	r3, [pc, #16]	; (80114cc <_fflush_r+0x74>)
 80114bc:	429c      	cmp	r4, r3
 80114be:	bf08      	it	eq
 80114c0:	68ec      	ldreq	r4, [r5, #12]
 80114c2:	e7da      	b.n	801147a <_fflush_r+0x22>
 80114c4:	08014444 	.word	0x08014444
 80114c8:	08014464 	.word	0x08014464
 80114cc:	08014424 	.word	0x08014424

080114d0 <_lseek_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	4d07      	ldr	r5, [pc, #28]	; (80114f0 <_lseek_r+0x20>)
 80114d4:	4604      	mov	r4, r0
 80114d6:	4608      	mov	r0, r1
 80114d8:	4611      	mov	r1, r2
 80114da:	2200      	movs	r2, #0
 80114dc:	602a      	str	r2, [r5, #0]
 80114de:	461a      	mov	r2, r3
 80114e0:	f7ef fa34 	bl	800094c <_lseek>
 80114e4:	1c43      	adds	r3, r0, #1
 80114e6:	d102      	bne.n	80114ee <_lseek_r+0x1e>
 80114e8:	682b      	ldr	r3, [r5, #0]
 80114ea:	b103      	cbz	r3, 80114ee <_lseek_r+0x1e>
 80114ec:	6023      	str	r3, [r4, #0]
 80114ee:	bd38      	pop	{r3, r4, r5, pc}
 80114f0:	2000cc18 	.word	0x2000cc18

080114f4 <__swhatbuf_r>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	460e      	mov	r6, r1
 80114f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114fc:	2900      	cmp	r1, #0
 80114fe:	b096      	sub	sp, #88	; 0x58
 8011500:	4614      	mov	r4, r2
 8011502:	461d      	mov	r5, r3
 8011504:	da07      	bge.n	8011516 <__swhatbuf_r+0x22>
 8011506:	2300      	movs	r3, #0
 8011508:	602b      	str	r3, [r5, #0]
 801150a:	89b3      	ldrh	r3, [r6, #12]
 801150c:	061a      	lsls	r2, r3, #24
 801150e:	d410      	bmi.n	8011532 <__swhatbuf_r+0x3e>
 8011510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011514:	e00e      	b.n	8011534 <__swhatbuf_r+0x40>
 8011516:	466a      	mov	r2, sp
 8011518:	f000 f8b2 	bl	8011680 <_fstat_r>
 801151c:	2800      	cmp	r0, #0
 801151e:	dbf2      	blt.n	8011506 <__swhatbuf_r+0x12>
 8011520:	9a01      	ldr	r2, [sp, #4]
 8011522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801152a:	425a      	negs	r2, r3
 801152c:	415a      	adcs	r2, r3
 801152e:	602a      	str	r2, [r5, #0]
 8011530:	e7ee      	b.n	8011510 <__swhatbuf_r+0x1c>
 8011532:	2340      	movs	r3, #64	; 0x40
 8011534:	2000      	movs	r0, #0
 8011536:	6023      	str	r3, [r4, #0]
 8011538:	b016      	add	sp, #88	; 0x58
 801153a:	bd70      	pop	{r4, r5, r6, pc}

0801153c <__smakebuf_r>:
 801153c:	898b      	ldrh	r3, [r1, #12]
 801153e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011540:	079d      	lsls	r5, r3, #30
 8011542:	4606      	mov	r6, r0
 8011544:	460c      	mov	r4, r1
 8011546:	d507      	bpl.n	8011558 <__smakebuf_r+0x1c>
 8011548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801154c:	6023      	str	r3, [r4, #0]
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	2301      	movs	r3, #1
 8011552:	6163      	str	r3, [r4, #20]
 8011554:	b002      	add	sp, #8
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	ab01      	add	r3, sp, #4
 801155a:	466a      	mov	r2, sp
 801155c:	f7ff ffca 	bl	80114f4 <__swhatbuf_r>
 8011560:	9900      	ldr	r1, [sp, #0]
 8011562:	4605      	mov	r5, r0
 8011564:	4630      	mov	r0, r6
 8011566:	f7ff fa6b 	bl	8010a40 <_malloc_r>
 801156a:	b948      	cbnz	r0, 8011580 <__smakebuf_r+0x44>
 801156c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011570:	059a      	lsls	r2, r3, #22
 8011572:	d4ef      	bmi.n	8011554 <__smakebuf_r+0x18>
 8011574:	f023 0303 	bic.w	r3, r3, #3
 8011578:	f043 0302 	orr.w	r3, r3, #2
 801157c:	81a3      	strh	r3, [r4, #12]
 801157e:	e7e3      	b.n	8011548 <__smakebuf_r+0xc>
 8011580:	4b0d      	ldr	r3, [pc, #52]	; (80115b8 <__smakebuf_r+0x7c>)
 8011582:	62b3      	str	r3, [r6, #40]	; 0x28
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	6020      	str	r0, [r4, #0]
 8011588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801158c:	81a3      	strh	r3, [r4, #12]
 801158e:	9b00      	ldr	r3, [sp, #0]
 8011590:	6163      	str	r3, [r4, #20]
 8011592:	9b01      	ldr	r3, [sp, #4]
 8011594:	6120      	str	r0, [r4, #16]
 8011596:	b15b      	cbz	r3, 80115b0 <__smakebuf_r+0x74>
 8011598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801159c:	4630      	mov	r0, r6
 801159e:	f000 f881 	bl	80116a4 <_isatty_r>
 80115a2:	b128      	cbz	r0, 80115b0 <__smakebuf_r+0x74>
 80115a4:	89a3      	ldrh	r3, [r4, #12]
 80115a6:	f023 0303 	bic.w	r3, r3, #3
 80115aa:	f043 0301 	orr.w	r3, r3, #1
 80115ae:	81a3      	strh	r3, [r4, #12]
 80115b0:	89a0      	ldrh	r0, [r4, #12]
 80115b2:	4305      	orrs	r5, r0
 80115b4:	81a5      	strh	r5, [r4, #12]
 80115b6:	e7cd      	b.n	8011554 <__smakebuf_r+0x18>
 80115b8:	080107c5 	.word	0x080107c5

080115bc <__malloc_lock>:
 80115bc:	4801      	ldr	r0, [pc, #4]	; (80115c4 <__malloc_lock+0x8>)
 80115be:	f7ff b9e5 	b.w	801098c <__retarget_lock_acquire_recursive>
 80115c2:	bf00      	nop
 80115c4:	2000cc24 	.word	0x2000cc24

080115c8 <__malloc_unlock>:
 80115c8:	4801      	ldr	r0, [pc, #4]	; (80115d0 <__malloc_unlock+0x8>)
 80115ca:	f7ff b9e0 	b.w	801098e <__retarget_lock_release_recursive>
 80115ce:	bf00      	nop
 80115d0:	2000cc24 	.word	0x2000cc24

080115d4 <_read_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d07      	ldr	r5, [pc, #28]	; (80115f4 <_read_r+0x20>)
 80115d8:	4604      	mov	r4, r0
 80115da:	4608      	mov	r0, r1
 80115dc:	4611      	mov	r1, r2
 80115de:	2200      	movs	r2, #0
 80115e0:	602a      	str	r2, [r5, #0]
 80115e2:	461a      	mov	r2, r3
 80115e4:	f7ef f952 	bl	800088c <_read>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d102      	bne.n	80115f2 <_read_r+0x1e>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	b103      	cbz	r3, 80115f2 <_read_r+0x1e>
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	2000cc18 	.word	0x2000cc18

080115f8 <_raise_r>:
 80115f8:	291f      	cmp	r1, #31
 80115fa:	b538      	push	{r3, r4, r5, lr}
 80115fc:	4604      	mov	r4, r0
 80115fe:	460d      	mov	r5, r1
 8011600:	d904      	bls.n	801160c <_raise_r+0x14>
 8011602:	2316      	movs	r3, #22
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801160e:	b112      	cbz	r2, 8011616 <_raise_r+0x1e>
 8011610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011614:	b94b      	cbnz	r3, 801162a <_raise_r+0x32>
 8011616:	4620      	mov	r0, r4
 8011618:	f000 f830 	bl	801167c <_getpid_r>
 801161c:	462a      	mov	r2, r5
 801161e:	4601      	mov	r1, r0
 8011620:	4620      	mov	r0, r4
 8011622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011626:	f000 b817 	b.w	8011658 <_kill_r>
 801162a:	2b01      	cmp	r3, #1
 801162c:	d00a      	beq.n	8011644 <_raise_r+0x4c>
 801162e:	1c59      	adds	r1, r3, #1
 8011630:	d103      	bne.n	801163a <_raise_r+0x42>
 8011632:	2316      	movs	r3, #22
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	2001      	movs	r0, #1
 8011638:	e7e7      	b.n	801160a <_raise_r+0x12>
 801163a:	2400      	movs	r4, #0
 801163c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011640:	4628      	mov	r0, r5
 8011642:	4798      	blx	r3
 8011644:	2000      	movs	r0, #0
 8011646:	e7e0      	b.n	801160a <_raise_r+0x12>

08011648 <raise>:
 8011648:	4b02      	ldr	r3, [pc, #8]	; (8011654 <raise+0xc>)
 801164a:	4601      	mov	r1, r0
 801164c:	6818      	ldr	r0, [r3, #0]
 801164e:	f7ff bfd3 	b.w	80115f8 <_raise_r>
 8011652:	bf00      	nop
 8011654:	2000001c 	.word	0x2000001c

08011658 <_kill_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4d07      	ldr	r5, [pc, #28]	; (8011678 <_kill_r+0x20>)
 801165c:	2300      	movs	r3, #0
 801165e:	4604      	mov	r4, r0
 8011660:	4608      	mov	r0, r1
 8011662:	4611      	mov	r1, r2
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f7ef f8f5 	bl	8000854 <_kill>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	d102      	bne.n	8011674 <_kill_r+0x1c>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	b103      	cbz	r3, 8011674 <_kill_r+0x1c>
 8011672:	6023      	str	r3, [r4, #0]
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	2000cc18 	.word	0x2000cc18

0801167c <_getpid_r>:
 801167c:	f7ef b8e1 	b.w	8000842 <_getpid>

08011680 <_fstat_r>:
 8011680:	b538      	push	{r3, r4, r5, lr}
 8011682:	4d07      	ldr	r5, [pc, #28]	; (80116a0 <_fstat_r+0x20>)
 8011684:	2300      	movs	r3, #0
 8011686:	4604      	mov	r4, r0
 8011688:	4608      	mov	r0, r1
 801168a:	4611      	mov	r1, r2
 801168c:	602b      	str	r3, [r5, #0]
 801168e:	f7ef f942 	bl	8000916 <_fstat>
 8011692:	1c43      	adds	r3, r0, #1
 8011694:	d102      	bne.n	801169c <_fstat_r+0x1c>
 8011696:	682b      	ldr	r3, [r5, #0]
 8011698:	b103      	cbz	r3, 801169c <_fstat_r+0x1c>
 801169a:	6023      	str	r3, [r4, #0]
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	bf00      	nop
 80116a0:	2000cc18 	.word	0x2000cc18

080116a4 <_isatty_r>:
 80116a4:	b538      	push	{r3, r4, r5, lr}
 80116a6:	4d06      	ldr	r5, [pc, #24]	; (80116c0 <_isatty_r+0x1c>)
 80116a8:	2300      	movs	r3, #0
 80116aa:	4604      	mov	r4, r0
 80116ac:	4608      	mov	r0, r1
 80116ae:	602b      	str	r3, [r5, #0]
 80116b0:	f7ef f941 	bl	8000936 <_isatty>
 80116b4:	1c43      	adds	r3, r0, #1
 80116b6:	d102      	bne.n	80116be <_isatty_r+0x1a>
 80116b8:	682b      	ldr	r3, [r5, #0]
 80116ba:	b103      	cbz	r3, 80116be <_isatty_r+0x1a>
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	bd38      	pop	{r3, r4, r5, pc}
 80116c0:	2000cc18 	.word	0x2000cc18

080116c4 <_init>:
 80116c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c6:	bf00      	nop
 80116c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ca:	bc08      	pop	{r3}
 80116cc:	469e      	mov	lr, r3
 80116ce:	4770      	bx	lr

080116d0 <_fini>:
 80116d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d2:	bf00      	nop
 80116d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116d6:	bc08      	pop	{r3}
 80116d8:	469e      	mov	lr, r3
 80116da:	4770      	bx	lr
