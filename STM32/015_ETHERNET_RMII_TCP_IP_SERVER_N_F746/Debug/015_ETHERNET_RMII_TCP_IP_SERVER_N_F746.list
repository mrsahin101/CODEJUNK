
015_ETHERNET_RMII_TCP_IP_SERVER_N_F746.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f374  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c84  0800f544  0800f544  0001f544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121c8  080121c8  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080121c8  080121c8  000221c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121d0  080121d0  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121d0  080121d0  000221d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121d4  080121d4  000221d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080121d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a10  20000078  08012250  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008a88  08012250  00038a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002adf4  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005555  00000000  00000000  0005ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000603f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  000614a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030bfa  00000000  00000000  000624b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffc8  00000000  00000000  000930b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa9a8  00000000  00000000  000b307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ada22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a24  00000000  00000000  001ada78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f52c 	.word	0x0800f52c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f52c 	.word	0x0800f52c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005bc:	f3bf 8f4f 	dsb	sy
}
 80005c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c2:	f3bf 8f6f 	isb	sy
}
 80005c6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <SCB_EnableICache+0x48>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005d0:	f3bf 8f4f 	dsb	sy
}
 80005d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d6:	f3bf 8f6f 	isb	sy
}
 80005da:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SCB_EnableICache+0x48>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <SCB_EnableICache+0x48>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SCB_EnableDCache+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000612:	f3bf 8f4f 	dsb	sy
}
 8000616:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <SCB_EnableDCache+0x84>)
 800061a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	0b5b      	lsrs	r3, r3, #13
 8000624:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000628:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000632:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	015a      	lsls	r2, r3, #5
 8000638:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800063c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000642:	4911      	ldr	r1, [pc, #68]	; (8000688 <SCB_EnableDCache+0x84>)
 8000644:	4313      	orrs	r3, r2
 8000646:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	60ba      	str	r2, [r7, #8]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1ef      	bne.n	8000634 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	60fa      	str	r2, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1e5      	bne.n	800062a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065e:	f3bf 8f4f 	dsb	sy
}
 8000662:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SCB_EnableDCache+0x84>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <SCB_EnableDCache+0x84>)
 800066a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000670:	f3bf 8f4f 	dsb	sy
}
 8000674:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000690:	f000 f8ca 	bl	8000828 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000694:	f7ff ff90 	bl	80005b8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000698:	f7ff ffb4 	bl	8000604 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fca8 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f80e 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f878 	bl	8000798 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006a8:	f002 fe0c 	bl	80032c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 80006ac:	f000 fa1a 	bl	8000ae4 <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <main+0x30>)
 80006b2:	f003 f9f1 	bl	8003a98 <ethernetif_input>
	  sys_check_timeouts();
 80006b6:	f00b f975 	bl	800b9a4 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006ba:	e7f9      	b.n	80006b0 <main+0x24>
 80006bc:	20000220 	.word	0x20000220

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00d fef6 	bl	800e4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <SystemClock_Config+0xd0>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xd4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemClock_Config+0xd4>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000728:	2304      	movs	r3, #4
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800072c:	23d8      	movs	r3, #216	; 0xd8
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f943 	bl	80029c8 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000748:	f000 f89c 	bl	8000884 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f002 f8ec 	bl	8002928 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 f895 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fbc9 	bl	8002f10 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000784:	f000 f87e 	bl	8000884 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_GPIO_Init+0x8c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_GPIO_Init+0x8c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <MX_GPIO_Init+0x8c>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_GPIO_Init+0x8c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

}
 8000816:	bf00      	nop
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800083a:	f000 fd49 	bl	80012d0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800083e:	2301      	movs	r3, #1
 8000840:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000842:	2300      	movs	r3, #0
 8000844:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MPU_Config+0x58>)
 8000848:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800084a:	230d      	movs	r3, #13
 800084c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800084e:	2300      	movs	r3, #0
 8000850:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000852:	2301      	movs	r3, #1
 8000854:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000856:	2303      	movs	r3, #3
 8000858:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086a:	463b      	mov	r3, r7
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fd67 	bl	8001340 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000872:	2004      	movs	r0, #4
 8000874:	f000 fd44 	bl	8001300 <HAL_MPU_Enable>

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20010000 	.word	0x20010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 fbaa 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_kill>:

int _kill(int pid, int sig)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <_kill+0x20>)
 8000948:	2216      	movs	r2, #22
 800094a:	601a      	str	r2, [r3, #0]
	return -1;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20008a78 	.word	0x20008a78

08000960 <_exit>:

void _exit (int status)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffe5 	bl	800093c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000972:	e7fe      	b.n	8000972 <_exit+0x12>

08000974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
	}

return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
	}
	return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	return -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_isatty>:

int _isatty(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d205      	bcs.n	8000a8c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <_sbrk+0x6c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	371c      	adds	r7, #28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	20050000 	.word	0x20050000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	20008a88 	.word	0x20008a88
 8000abc:	20008a78 	.word	0x20008a78

08000ac0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000aea:	f006 f9ad 	bl	8006e48 <tcp_new>
 8000aee:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 4, 10);
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <tcp_server_init+0x50>)
 8000af2:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 14000);
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f005 f8ff 	bl	8005d00 <tcp_bind>
 8000b02:	4603      	mov	r3, r0
 8000b04:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000b06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d109      	bne.n	8000b22 <tcp_server_init+0x3e>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f005 f9ad 	bl	8005e70 <tcp_listen_with_backlog>
 8000b16:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <tcp_server_init+0x54>)
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f006 fa14 	bl	8006f48 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000b20:	e003      	b.n	8000b2a <tcp_server_init+0x46>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000b22:	68f9      	ldr	r1, [r7, #12]
 8000b24:	2001      	movs	r0, #1
 8000b26:	f003 fd35 	bl	8004594 <memp_free>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0a04a8c0 	.word	0x0a04a8c0
 8000b38:	08000b3d 	.word	0x08000b3d

08000b3c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f005 ff89 	bl	8006a64 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000b52:	200c      	movs	r0, #12
 8000b54:	f003 fb64 	bl	8004220 <mem_malloc>
 8000b58:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01f      	beq.n	8000ba0 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	68b8      	ldr	r0, [r7, #8]
 8000b7c:	f006 f96c 	bl	8006e58 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000b80:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <tcp_server_accept+0x7c>)
 8000b82:	68b8      	ldr	r0, [r7, #8]
 8000b84:	f006 f97a 	bl	8006e7c <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <tcp_server_accept+0x80>)
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	f006 f9ba 	bl	8006f04 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	490b      	ldr	r1, [pc, #44]	; (8000bc0 <tcp_server_accept+0x84>)
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	f006 f9ef 	bl	8006f78 <tcp_poll>

    ret_err = ERR_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	e005      	b.n	8000bac <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	f000 f959 	bl	8000e5a <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000ba8:	23ff      	movs	r3, #255	; 0xff
 8000baa:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08000bc5 	.word	0x08000bc5
 8000bbc:	08000ce1 	.word	0x08000ce1
 8000bc0:	08000d05 	.word	0x08000d05

08000bc4 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <tcp_server_recv+0x20>
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <tcp_server_recv+0x10c>)
 8000bda:	22c3      	movs	r2, #195	; 0xc3
 8000bdc:	493d      	ldr	r1, [pc, #244]	; (8000cd4 <tcp_server_recv+0x110>)
 8000bde:	483e      	ldr	r0, [pc, #248]	; (8000cd8 <tcp_server_recv+0x114>)
 8000be0:	f00d fc76 	bl	800e4d0 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d116      	bne.n	8000c1c <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000bfc:	69b9      	ldr	r1, [r7, #24]
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f000 f92b 	bl	8000e5a <tcp_server_connection_close>
 8000c04:	e007      	b.n	8000c16 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000c06:	4935      	ldr	r1, [pc, #212]	; (8000cdc <tcp_server_recv+0x118>)
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f006 f959 	bl	8006ec0 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000c0e:	69b9      	ldr	r1, [r7, #24]
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f000 f8cf 	bl	8000db4 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	77fb      	strb	r3, [r7, #31]
 8000c1a:	e053      	b.n	8000cc4 <tcp_server_recv+0x100>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f004 fac1 	bl	80051b8 <pbuf_free>
    }
    ret_err = err;
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	77fb      	strb	r3, [r7, #31]
 8000c3a:	e043      	b.n	8000cc4 <tcp_server_recv+0x100>
  }
  else if(es->state == ES_ACCEPTED)
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d110      	bne.n	8000c66 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2202      	movs	r2, #2
 8000c48:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000c50:	4922      	ldr	r1, [pc, #136]	; (8000cdc <tcp_server_recv+0x118>)
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f006 f934 	bl	8006ec0 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000c58:	69b9      	ldr	r1, [r7, #24]
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f000 f924 	bl	8000ea8 <tcp_server_handle>

    ret_err = ERR_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	77fb      	strb	r3, [r7, #31]
 8000c64:	e02e      	b.n	8000cc4 <tcp_server_recv+0x100>
  }
  else if (es->state == ES_RECEIVED)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d115      	bne.n	8000c9a <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d107      	bne.n	8000c86 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000c7c:	69b9      	ldr	r1, [r7, #24]
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f000 f912 	bl	8000ea8 <tcp_server_handle>
 8000c84:	e006      	b.n	8000c94 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f004 fbaa 	bl	80053e8 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	77fb      	strb	r3, [r7, #31]
 8000c98:	e014      	b.n	8000cc4 <tcp_server_recv+0x100>
  }
  else if(es->state == ES_CLOSING)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d108      	bne.n	8000cb4 <tcp_server_recv+0xf0>
  {
    /* odd case, remote side closing twice, trash data */
    //tcp_recved(tpcb, p->tot_len);
    es->p = NULL;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f004 fa85 	bl	80051b8 <pbuf_free>
    ret_err = ERR_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	77fb      	strb	r3, [r7, #31]
 8000cb2:	e007      	b.n	8000cc4 <tcp_server_recv+0x100>
  }
  else
  {
    /* unknown es->state, trash data  */
    //tcp_recved(tpcb, p->tot_len);
    es->p = NULL;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f004 fa7c 	bl	80051b8 <pbuf_free>
    ret_err = ERR_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	0800f544 	.word	0x0800f544
 8000cd4:	0800f560 	.word	0x0800f560
 8000cd8:	0800f56c 	.word	0x0800f56c
 8000cdc:	08000d65 	.word	0x08000d65

08000ce0 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f003 f92c 	bl	8003f54 <mem_free>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d017      	beq.n	8000d48 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8000d20:	490f      	ldr	r1, [pc, #60]	; (8000d60 <tcp_server_poll+0x5c>)
 8000d22:	6838      	ldr	r0, [r7, #0]
 8000d24:	f006 f8cc 	bl	8006ec0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6838      	ldr	r0, [r7, #0]
 8000d2c:	f000 f842 	bl	8000db4 <tcp_server_send>
 8000d30:	e007      	b.n	8000d42 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d103      	bne.n	8000d42 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 f88c 	bl	8000e5a <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e004      	b.n	8000d52 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f004 ffcd 	bl	8005ce8 <tcp_abort>
    ret_err = ERR_ABRT;
 8000d4e:	23f3      	movs	r3, #243	; 0xf3
 8000d50:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08000d65 	.word	0x08000d65

08000d64 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d008      	beq.n	8000d96 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8000d84:	490a      	ldr	r1, [pc, #40]	; (8000db0 <tcp_server_sent+0x4c>)
 8000d86:	68b8      	ldr	r0, [r7, #8]
 8000d88:	f006 f89a 	bl	8006ec0 <tcp_sent>
    tcp_server_send(tpcb, es);
 8000d8c:	6979      	ldr	r1, [r7, #20]
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f000 f810 	bl	8000db4 <tcp_server_send>
 8000d94:	e007      	b.n	8000da6 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d103      	bne.n	8000da6 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8000d9e:	6979      	ldr	r1, [r7, #20]
 8000da0:	68b8      	ldr	r0, [r7, #8]
 8000da2:	f000 f85a 	bl	8000e5a <tcp_server_connection_close>
  }
  return ERR_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08000d65 	.word	0x08000d65

08000db4 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000dc2:	e036      	b.n	8000e32 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6859      	ldr	r1, [r3, #4]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	895a      	ldrh	r2, [r3, #10]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f008 ff7d 	bl	8009cd4 <tcp_write>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d11d      	bne.n	8000e22 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	895b      	ldrh	r3, [r3, #10]
 8000dea:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 fa79 	bl	80052f8 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000e06:	6938      	ldr	r0, [r7, #16]
 8000e08:	f004 f9d6 	bl	80051b8 <pbuf_free>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f7      	beq.n	8000e06 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000e16:	89fb      	ldrh	r3, [r7, #14]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f005 f93e 	bl	800609c <tcp_recved>
 8000e20:	e007      	b.n	8000e32 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2a:	d102      	bne.n	8000e32 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10b      	bne.n	8000e52 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	895a      	ldrh	r2, [r3, #10]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d9b8      	bls.n	8000dc4 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f005 fff6 	bl	8006e58 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f006 f826 	bl	8006ec0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f006 f800 	bl	8006e7c <tcp_recv>
  tcp_err(tpcb, NULL);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f006 f840 	bl	8006f04 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f006 f875 	bl	8006f78 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f003 f85d 	bl	8003f54 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f004 fe3a 	bl	8005b14 <tcp_close>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b0a0      	sub	sp, #128	; 0x80
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8b1b      	ldrh	r3, [r3, #24]
 8000ec0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000ec4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00c fb19 	bl	800d500 <ip4addr_ntoa>
 8000ece:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed6:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ede:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ee6:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2264      	movs	r2, #100	; 0x64
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00d fae5 	bl	800e4c0 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	891b      	ldrh	r3, [r3, #8]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00d fb39 	bl	800e580 <strncpy>
	strcat (buf, "+ Merhaba!. Ben\n");
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f97c 	bl	8000210 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4413      	add	r3, r2
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <tcp_server_handle+0xf0>)
 8000f24:	461d      	mov	r5, r3
 8000f26:	4614      	mov	r4, r2
 8000f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2a:	6028      	str	r0, [r5, #0]
 8000f2c:	6069      	str	r1, [r5, #4]
 8000f2e:	60aa      	str	r2, [r5, #8]
 8000f30:	60eb      	str	r3, [r5, #12]
 8000f32:	7823      	ldrb	r3, [r4, #0]
 8000f34:	742b      	strb	r3, [r5, #16]


	esTx->p->payload = (void *)buf;
 8000f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	891a      	ldrh	r2, [r3, #8]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	895b      	ldrh	r3, [r3, #10]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29c      	uxth	r4, r3
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f95b 	bl	8000210 <strlen>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4422      	add	r2, r4
 8000f64:	b292      	uxth	r2, r2
 8000f66:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f94f 	bl	8000210 <strlen>
 8000f72:	4602      	mov	r2, r0
 8000f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	b292      	uxth	r2, r2
 8000f7a:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8000f7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff18 	bl	8000db4 <tcp_server_send>

	pbuf_free(es->p);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 f915 	bl	80051b8 <pbuf_free>

}
 8000f8e:	bf00      	nop
 8000f90:	3780      	adds	r7, #128	; 0x80
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800f594 	.word	0x0800f594

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff fd7b 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f00d fa39 	bl	800e440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fb5d 	bl	800068c <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fe0:	080121d8 	.word	0x080121d8
  ldr r2, =_sbss
 8000fe4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fe8:	20008a88 	.word	0x20008a88

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f931 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fc40 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f93b 	bl	80012b6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f911 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000254 	.word	0x20000254

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000254 	.word	0x20000254

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	4313      	orrs	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	05fa0000 	.word	0x05fa0000

0800114c <__NVIC_GetPriorityGrouping>:
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff47 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5c 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012d4:	f3bf 8f5f 	dmb	sy
}
 80012d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_MPU_Disable+0x28>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_MPU_Disable+0x28>)
 80012e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_MPU_Disable+0x2c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00
 80012fc:	e000ed90 	.word	0xe000ed90

08001300 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_MPU_Enable+0x38>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_MPU_Enable+0x3c>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_MPU_Enable+0x3c>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800131e:	f3bf 8f4f 	dsb	sy
}
 8001322:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001324:	f3bf 8f6f 	isb	sy
}
 8001328:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed90 	.word	0xe000ed90
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	785a      	ldrb	r2, [r3, #1]
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_MPU_ConfigRegion+0x84>)
 800134e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d029      	beq.n	80013ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001358:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_MPU_ConfigRegion+0x84>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7b1b      	ldrb	r3, [r3, #12]
 8001364:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7adb      	ldrb	r3, [r3, #11]
 800136a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800136c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7a9b      	ldrb	r3, [r3, #10]
 8001372:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001374:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7b5b      	ldrb	r3, [r3, #13]
 800137a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800137c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7b9b      	ldrb	r3, [r3, #14]
 8001382:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001384:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7bdb      	ldrb	r3, [r3, #15]
 800138a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800138c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a5b      	ldrb	r3, [r3, #9]
 8001392:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001394:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7a1b      	ldrb	r3, [r3, #8]
 800139a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800139c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013aa:	e005      	b.n	80013b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_MPU_ConfigRegion+0x84>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_MPU_ConfigRegion+0x84>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed90 	.word	0xe000ed90

080013c8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80013d8:	4ba9      	ldr	r3, [pc, #676]	; (8001680 <HAL_ETH_Init+0x2b8>)
 80013da:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e181      	b.n	80016f2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f002 f890 	bl	8003528 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001408:	4b9e      	ldr	r3, [pc, #632]	; (8001684 <HAL_ETH_Init+0x2bc>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	4a9d      	ldr	r2, [pc, #628]	; (8001684 <HAL_ETH_Init+0x2bc>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001412:	6453      	str	r3, [r2, #68]	; 0x44
 8001414:	4b9b      	ldr	r3, [pc, #620]	; (8001684 <HAL_ETH_Init+0x2bc>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001420:	4b99      	ldr	r3, [pc, #612]	; (8001688 <HAL_ETH_Init+0x2c0>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_ETH_Init+0x2c0>)
 8001426:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800142a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800142c:	4b96      	ldr	r3, [pc, #600]	; (8001688 <HAL_ETH_Init+0x2c0>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4994      	ldr	r1, [pc, #592]	; (8001688 <HAL_ETH_Init+0x2c0>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001450:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001452:	f7ff fe27 	bl	80010a4 <HAL_GetTick>
 8001456:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001458:	e011      	b.n	800147e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800145a:	f7ff fe23 	bl	80010a4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001468:	d909      	bls.n	800147e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e139      	b.n	80016f2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e4      	bne.n	800145a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f023 031c 	bic.w	r3, r3, #28
 800149e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014a0:	f001 ff04 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80014a4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <HAL_ETH_Init+0x2c4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d908      	bls.n	80014c0 <HAL_ETH_Init+0xf8>
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a77      	ldr	r2, [pc, #476]	; (8001690 <HAL_ETH_Init+0x2c8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d804      	bhi.n	80014c0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e027      	b.n	8001510 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4a73      	ldr	r2, [pc, #460]	; (8001690 <HAL_ETH_Init+0x2c8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d908      	bls.n	80014da <HAL_ETH_Init+0x112>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4a6d      	ldr	r2, [pc, #436]	; (8001680 <HAL_ETH_Init+0x2b8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d204      	bcs.n	80014da <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f043 030c 	orr.w	r3, r3, #12
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	e01a      	b.n	8001510 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4a68      	ldr	r2, [pc, #416]	; (8001680 <HAL_ETH_Init+0x2b8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d303      	bcc.n	80014ea <HAL_ETH_Init+0x122>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4a6b      	ldr	r2, [pc, #428]	; (8001694 <HAL_ETH_Init+0x2cc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d911      	bls.n	800150e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4a69      	ldr	r2, [pc, #420]	; (8001694 <HAL_ETH_Init+0x2cc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d908      	bls.n	8001504 <HAL_ETH_Init+0x13c>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_ETH_Init+0x2d0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d804      	bhi.n	8001504 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e005      	b.n	8001510 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	e000      	b.n	8001510 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800150e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001518:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800151c:	2100      	movs	r1, #0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fb98 	bl	8001c54 <HAL_ETH_WritePHYRegister>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fd4d 	bl	8001fd0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0d7      	b.n	80016f2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001542:	20ff      	movs	r0, #255	; 0xff
 8001544:	f7ff fdba 	bl	80010bc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a5 	beq.w	800169c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001552:	f7ff fda7 	bl	80010a4 <HAL_GetTick>
 8001556:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	461a      	mov	r2, r3
 800155e:	2101      	movs	r1, #1
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb0f 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001566:	f7ff fd9d 	bl	80010a4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d90f      	bls.n	8001598 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fd26 	bl	8001fd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0ac      	b.n	80016f2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0da      	beq.n	8001558 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a6:	2100      	movs	r1, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fb53 	bl	8001c54 <HAL_ETH_WritePHYRegister>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fd08 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015c8:	2301      	movs	r3, #1
 80015ca:	e092      	b.n	80016f2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fd6a 	bl	80010a4 <HAL_GetTick>
 80015d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	461a      	mov	r2, r3
 80015d8:	2101      	movs	r1, #1
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fad2 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015e0:	f7ff fd60 	bl	80010a4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d90f      	bls.n	8001612 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fce9 	bl	8001fd0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e06f      	b.n	80016f2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0da      	beq.n	80015d2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	461a      	mov	r2, r3
 8001622:	2110      	movs	r1, #16
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 faad 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fcca 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001644:	2301      	movs	r3, #1
 8001646:	e054      	b.n	80016f2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	e002      	b.n	8001662 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	e035      	b.n	80016e0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e030      	b.n	80016e0 <HAL_ETH_Init+0x318>
 800167e:	bf00      	nop
 8001680:	03938700 	.word	0x03938700
 8001684:	40023800 	.word	0x40023800
 8001688:	40013800 	.word	0x40013800
 800168c:	01312cff 	.word	0x01312cff
 8001690:	02160ebf 	.word	0x02160ebf
 8001694:	05f5e0ff 	.word	0x05f5e0ff
 8001698:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 facd 	bl	8001c54 <HAL_ETH_WritePHYRegister>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00b      	beq.n	80016d8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fc82 	bl	8001fd0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00c      	b.n	80016f2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016d8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016dc:	f7ff fcee 	bl	80010bc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fc74 	bl	8001fd0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop

080016fc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ETH_DMATxDescListInit+0x20>
 8001718:	2302      	movs	r3, #2
 800171a:	e052      	b.n	80017c2 <HAL_ETH_DMATxDescListInit+0xc6>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e030      	b.n	800179a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	4413      	add	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001748:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	461a      	mov	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	d208      	bcs.n	800178e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	015b      	lsls	r3, r3, #5
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4413      	add	r3, r2
 8001786:	461a      	mov	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	e002      	b.n	8001794 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3ca      	bcc.n	8001738 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f241 0310 	movw	r3, #4112	; 0x1010
 80017ac:	440b      	add	r3, r1
 80017ae:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ETH_DMARxDescListInit+0x20>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e056      	b.n	800189c <HAL_ETH_DMARxDescListInit+0xce>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e034      	b.n	8001874 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800181a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001822:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	461a      	mov	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	d208      	bcs.n	8001868 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	015b      	lsls	r3, r3, #5
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	e002      	b.n	800186e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3c6      	bcc.n	800180a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	f241 030c 	movw	r3, #4108	; 0x100c
 8001886:	440b      	add	r3, r1
 8001888:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ETH_TransmitFrame+0x24>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0cd      	b.n	8001a68 <HAL_ETH_TransmitFrame+0x1c0>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0b8      	b.n	8001a68 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da09      	bge.n	8001914 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2212      	movs	r2, #18
 8001904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0a9      	b.n	8001a68 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800191a:	4293      	cmp	r3, r2
 800191c:	d915      	bls.n	800194a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4a54      	ldr	r2, [pc, #336]	; (8001a74 <HAL_ETH_TransmitFrame+0x1cc>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <HAL_ETH_TransmitFrame+0x1cc>)
 800192e:	fba3 1302 	umull	r1, r3, r3, r2
 8001932:	0a9b      	lsrs	r3, r3, #10
 8001934:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e001      	b.n	800194e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d11c      	bne.n	800198e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001962:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800196e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800197e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
 800198c:	e04b      	b.n	8001a26 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e044      	b.n	8001a1e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d107      	bne.n	80019ba <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019b8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019c2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d116      	bne.n	80019fc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019dc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_ETH_TransmitFrame+0x1d0>)
 80019e2:	fb02 f203 	mul.w	r2, r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019ee:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019fa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a0a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3b6      	bcc.n	8001994 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00d      	beq.n	8001a56 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a42:	4413      	add	r3, r2
 8001a44:	2204      	movs	r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a50:	4413      	add	r3, r2
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	ac02b00b 	.word	0xac02b00b
 8001a78:	fffffa0c 	.word	0xfffffa0c

08001a7c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ETH_GetReceivedFrame+0x1a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e070      	b.n	8001b78 <HAL_ETH_GetReceivedFrame+0xfc>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db5a      	blt.n	8001b66 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d030      	beq.n	8001b20 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d103      	bne.n	8001ad8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001aec:	3b04      	subs	r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e02b      	b.n	8001b78 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b4e:	e00a      	b.n	8001b66 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b82      	cmp	r3, #130	; 0x82
 8001ba4:	d101      	bne.n	8001baa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e050      	b.n	8001c4c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2282      	movs	r2, #130	; 0x82
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 031c 	and.w	r3, r3, #28
 8001bc0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8a1b      	ldrh	r3, [r3, #16]
 8001bc6:	02db      	lsls	r3, r3, #11
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bd0:	897b      	ldrh	r3, [r7, #10]
 8001bd2:	019b      	lsls	r3, r3, #6
 8001bd4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf6:	f7ff fa55 	bl	80010a4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bfc:	e015      	b.n	8001c2a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bfe:	f7ff fa51 	bl	80010a4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d309      	bcc.n	8001c22 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e014      	b.n	8001c4c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e4      	bne.n	8001bfe <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	607a      	str	r2, [r7, #4]
 8001c60:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b42      	cmp	r3, #66	; 0x42
 8001c74:	d101      	bne.n	8001c7a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
 8001c78:	e04e      	b.n	8001d18 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2242      	movs	r2, #66	; 0x42
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 031c 	and.w	r3, r3, #28
 8001c90:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8a1b      	ldrh	r3, [r3, #16]
 8001c96:	02db      	lsls	r3, r3, #11
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	019b      	lsls	r3, r3, #6
 8001ca4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd0:	f7ff f9e8 	bl	80010a4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd6:	e015      	b.n	8001d04 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cd8:	f7ff f9e4 	bl	80010a4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d309      	bcc.n	8001cfc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e00d      	b.n	8001d18 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e4      	bne.n	8001cd8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ETH_Start+0x16>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e01f      	b.n	8001d76 <HAL_ETH_Start+0x56>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fb44 	bl	80023d4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb7b 	bl	8002448 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fc12 	bl	800257c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fbaf 	bl	80024bc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fbdc 	bl	800251c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_ETH_Stop+0x16>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e01f      	b.n	8001dd4 <HAL_ETH_Stop+0x56>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fba1 	bl	80024ec <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fbce 	bl	800254c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fb66 	bl	8002482 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fbe0 	bl	800257c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fb26 	bl	800240e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_ETH_ConfigMAC+0x1c>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0e4      	b.n	8001fc2 <HAL_ETH_ConfigMAC+0x1e6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80b1 	beq.w	8001f72 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_ETH_ConfigMAC+0x1f0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e28:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e2e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e34:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e3a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e40:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e46:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e4c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e52:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e58:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e5e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e64:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e6a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f91a 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e98:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e9e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ea4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001eaa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001eb0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001ec2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ec4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff f8f4 	bl	80010bc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ee4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eee:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f0c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f12:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f18:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f1e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f24:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff f8bd 	bl	80010bc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff f8aa 	bl	80010bc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	61da      	str	r2, [r3, #28]
 8001f70:	e01e      	b.n	8001fb0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f80:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff f88a 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	ff20810f 	.word	0xff20810f

08001fd0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0b0      	sub	sp, #192	; 0xc0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	663b      	str	r3, [r7, #96]	; 0x60
 800201c:	e001      	b.n	8002022 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202c:	2300      	movs	r3, #0
 800202e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800203c:	2340      	movs	r3, #64	; 0x40
 800203e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a8:	4bab      	ldr	r3, [pc, #684]	; (8002358 <ETH_MACDMAConfig+0x388>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f7fe ffd9 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002112:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002114:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002118:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800211a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800211c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002122:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002128:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800212a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800212e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002134:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002138:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002140:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002142:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe ffb4 	bl	80010bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002166:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002170:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002184:	4013      	ands	r3, r2
 8002186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800218a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002194:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800219a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800219c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021ac:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7fe ff75 	bl	80010bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7fe ff60 	bl	80010bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002204:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800220a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002218:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800222a:	2304      	movs	r3, #4
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800223a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800224a:	2300      	movs	r3, #0
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800224e:	2300      	movs	r3, #0
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f241 0318 	movw	r3, #4120	; 0x1018
 800225a:	4413      	add	r3, r2
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <ETH_MACDMAConfig+0x38c>)
 8002268:	4013      	ands	r3, r2
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800226e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002270:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002272:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002274:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002276:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002278:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800227a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800227c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800227e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002280:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002282:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002284:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002286:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800228a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800228e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f241 0318 	movw	r3, #4120	; 0x1018
 80022a2:	4413      	add	r3, r2
 80022a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe fefe 	bl	80010bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022c8:	4413      	add	r3, r2
 80022ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80022ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe fed7 	bl	80010bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10d      	bne.n	8002340 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	f241 031c 	movw	r3, #4124	; 0x101c
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <ETH_MACDMAConfig+0x390>)
 8002336:	431a      	orrs	r2, r3
 8002338:	f241 031c 	movw	r3, #4124	; 0x101c
 800233c:	440b      	add	r3, r1
 800233e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	461a      	mov	r2, r3
 8002346:	2100      	movs	r1, #0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f80b 	bl	8002364 <ETH_MACAddressConfig>
}
 800234e:	bf00      	nop
 8002350:	37c0      	adds	r7, #192	; 0xc0
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	ff20810f 	.word	0xff20810f
 800235c:	f8de3f23 	.word	0xf8de3f23
 8002360:	00010040 	.word	0x00010040

08002364 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3305      	adds	r3, #5
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	3204      	adds	r2, #4
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <ETH_MACAddressConfig+0x68>)
 8002386:	4413      	add	r3, r2
 8002388:	461a      	mov	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3303      	adds	r3, #3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	061a      	lsls	r2, r3, #24
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3302      	adds	r3, #2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3301      	adds	r3, #1
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	4313      	orrs	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <ETH_MACAddressConfig+0x6c>)
 80023b6:	4413      	add	r3, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	6013      	str	r3, [r2, #0]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40028040 	.word	0x40028040
 80023d0:	40028044 	.word	0x40028044

080023d4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0208 	orr.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe fe5f 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002432:	2001      	movs	r0, #1
 8002434:	f7fe fe42 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0204 	orr.w	r2, r2, #4
 8002462:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe fe25 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0204 	bic.w	r2, r2, #4
 800249c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fe08 	bl	80010bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024cc:	4413      	add	r3, r2
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6811      	ldr	r1, [r2, #0]
 80024d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024dc:	440b      	add	r3, r1
 80024de:	601a      	str	r2, [r3, #0]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024fc:	4413      	add	r3, r2
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6811      	ldr	r1, [r2, #0]
 8002504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002508:	f241 0318 	movw	r3, #4120	; 0x1018
 800250c:	440b      	add	r3, r1
 800250e:	601a      	str	r2, [r3, #0]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f241 0318 	movw	r3, #4120	; 0x1018
 800252c:	4413      	add	r3, r2
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	f241 0318 	movw	r3, #4120	; 0x1018
 800253c:	440b      	add	r3, r1
 800253e:	601a      	str	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f241 0318 	movw	r3, #4120	; 0x1018
 800255c:	4413      	add	r3, r2
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6811      	ldr	r1, [r2, #0]
 8002564:	f023 0202 	bic.w	r2, r3, #2
 8002568:	f241 0318 	movw	r3, #4120	; 0x1018
 800256c:	440b      	add	r3, r1
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800259c:	f241 0318 	movw	r3, #4120	; 0x1018
 80025a0:	440b      	add	r3, r1
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80025ac:	4413      	add	r3, r2
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe fd82 	bl	80010bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f241 0318 	movw	r3, #4120	; 0x1018
 80025c2:	440b      	add	r3, r1
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e175      	b.n	80028dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8164 	bne.w	80028d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x56>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80be 	beq.w	80028d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <HAL_GPIO_Init+0x324>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_GPIO_Init+0x324>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002772:	4a61      	ldr	r2, [pc, #388]	; (80028f8 <HAL_GPIO_Init+0x328>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_GPIO_Init+0x32c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d037      	beq.n	800280e <HAL_GPIO_Init+0x23e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_GPIO_Init+0x330>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_GPIO_Init+0x23a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x334>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02b      	beq.n	8002806 <HAL_GPIO_Init+0x236>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a55      	ldr	r2, [pc, #340]	; (8002908 <HAL_GPIO_Init+0x338>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d025      	beq.n	8002802 <HAL_GPIO_Init+0x232>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a54      	ldr	r2, [pc, #336]	; (800290c <HAL_GPIO_Init+0x33c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <HAL_GPIO_Init+0x22e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a53      	ldr	r2, [pc, #332]	; (8002910 <HAL_GPIO_Init+0x340>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d019      	beq.n	80027fa <HAL_GPIO_Init+0x22a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_GPIO_Init+0x344>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_GPIO_Init+0x348>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00d      	beq.n	80027f2 <HAL_GPIO_Init+0x222>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a50      	ldr	r2, [pc, #320]	; (800291c <HAL_GPIO_Init+0x34c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x21e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_GPIO_Init+0x350>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_GPIO_Init+0x21a>
 80027e6:	2309      	movs	r3, #9
 80027e8:	e012      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027ea:	230a      	movs	r3, #10
 80027ec:	e010      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027ee:	2308      	movs	r3, #8
 80027f0:	e00e      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e00c      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027f6:	2306      	movs	r3, #6
 80027f8:	e00a      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027fa:	2305      	movs	r3, #5
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x240>
 80027fe:	2304      	movs	r3, #4
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x240>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x240>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x240>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x240>
 800280e:	2300      	movs	r3, #0
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f002 0203 	and.w	r2, r2, #3
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	; (80028f8 <HAL_GPIO_Init+0x328>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_GPIO_Init+0x354>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002852:	4a34      	ldr	r2, [pc, #208]	; (8002924 <HAL_GPIO_Init+0x354>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_GPIO_Init+0x354>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800287c:	4a29      	ldr	r2, [pc, #164]	; (8002924 <HAL_GPIO_Init+0x354>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_GPIO_Init+0x354>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_GPIO_Init+0x354>)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_GPIO_Init+0x354>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_GPIO_Init+0x354>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	f67f ae86 	bls.w	80025f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40021400 	.word	0x40021400
 8002914:	40021800 	.word	0x40021800
 8002918:	40021c00 	.word	0x40021c00
 800291c:	40022000 	.word	0x40022000
 8002920:	40022400 	.word	0x40022400
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002956:	f7fe fba5 	bl	80010a4 <HAL_GetTick>
 800295a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800295c:	e009      	b.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800295e:	f7fe fba1 	bl	80010a4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296c:	d901      	bls.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e022      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d1ee      	bne.n	800295e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fe fb8a 	bl	80010a4 <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fe fb86 	bl	80010a4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e291      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ec:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f8:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
 8002a04:	4b90      	ldr	r3, [pc, #576]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x130>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d168      	bne.n	8002af8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e26b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x7a>
 8002a34:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a83      	ldr	r2, [pc, #524]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x9c>
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7b      	ldr	r2, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b6c      	ldr	r3, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fafc 	bl	80010a4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fe faf8 	bl	80010a4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e21f      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fae8 	bl	80010a4 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fae4 	bl	80010a4 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e20b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x110>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d069      	beq.n	8002bda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1df      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	493d      	ldr	r1, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e040      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fa9a 	bl	80010a4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fa96 	bl	80010a4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1bd      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4929      	ldr	r1, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fa76 	bl	80010a4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fa72 	bl	80010a4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e199      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d038      	beq.n	8002c58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fa53 	bl	80010a4 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe fa4f 	bl	80010a4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e176      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x23a>
 8002c20:	e01a      	b.n	8002c58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fa39 	bl	80010a4 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe fa35 	bl	80010a4 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d903      	bls.n	8002c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e15c      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
 8002c48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b91      	ldr	r3, [pc, #580]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ee      	bne.n	8002c36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a4 	beq.w	8002dae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a87      	ldr	r2, [pc, #540]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f9fd 	bl	80010a4 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe f9f9 	bl	80010a4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e120      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x31a>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x33c>
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b67      	ldr	r3, [pc, #412]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x35e>
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a60      	ldr	r2, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5a      	ldr	r2, [pc, #360]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe f9ad 	bl	80010a4 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe f9a9 	bl	80010a4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ce      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x386>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe f997 	bl	80010a4 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f993 	bl	80010a4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a4 	beq.w	8002f00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d06b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d149      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f964 	bl	80010a4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f960 	bl	80010a4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f934 	bl	80010a4 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f930 	bl	80010a4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e057      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x478>
 8002e5e:	e04f      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f91a 	bl	80010a4 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe f916 	bl	80010a4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e03d      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4ac>
 8002e92:	e035      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fe f84e 	bl	80010a4 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe f84a 	bl	80010a4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd ffaa 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08011f88 	.word	0x08011f88
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	2300      	movs	r3, #0
 80030fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003100:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 800310c:	2b08      	cmp	r3, #8
 800310e:	f200 80bd 	bhi.w	800328c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x3a>
 800311a:	e0b7      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800311e:	60bb      	str	r3, [r7, #8]
      break;
 8003120:	e0b7      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003122:	4b61      	ldr	r3, [pc, #388]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003124:	60bb      	str	r3, [r7, #8]
      break;
 8003126:	e0b4      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003130:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003132:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04d      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	461a      	mov	r2, r3
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	ea02 0800 	and.w	r8, r2, r0
 8003156:	ea03 0901 	and.w	r9, r3, r1
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	014b      	lsls	r3, r1, #5
 8003168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800316c:	0142      	lsls	r2, r0, #5
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	ebb0 0008 	subs.w	r0, r0, r8
 8003176:	eb61 0109 	sbc.w	r1, r1, r9
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	018b      	lsls	r3, r1, #6
 8003184:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003188:	0182      	lsls	r2, r0, #6
 800318a:	1a12      	subs	r2, r2, r0
 800318c:	eb63 0301 	sbc.w	r3, r3, r1
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	00d9      	lsls	r1, r3, #3
 800319a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800319e:	00d0      	lsls	r0, r2, #3
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	eb12 0208 	adds.w	r2, r2, r8
 80031a8:	eb43 0309 	adc.w	r3, r3, r9
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0259      	lsls	r1, r3, #9
 80031b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031ba:	0250      	lsls	r0, r2, #9
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f7fd f878 	bl	80002c0 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e04a      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	461a      	mov	r2, r3
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	ea02 0400 	and.w	r4, r2, r0
 80031f2:	ea03 0501 	and.w	r5, r3, r1
 80031f6:	4620      	mov	r0, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	014b      	lsls	r3, r1, #5
 8003204:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003208:	0142      	lsls	r2, r0, #5
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	1b00      	subs	r0, r0, r4
 8003210:	eb61 0105 	sbc.w	r1, r1, r5
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	018b      	lsls	r3, r1, #6
 800321e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003222:	0182      	lsls	r2, r0, #6
 8003224:	1a12      	subs	r2, r2, r0
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	00d9      	lsls	r1, r3, #3
 8003234:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003238:	00d0      	lsls	r0, r2, #3
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	1912      	adds	r2, r2, r4
 8003240:	eb45 0303 	adc.w	r3, r5, r3
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	0299      	lsls	r1, r3, #10
 800324e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003252:	0290      	lsls	r0, r2, #10
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	f7fd f82c 	bl	80002c0 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	60bb      	str	r3, [r7, #8]
      break;
 800328a:	e002      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800328e:	60bb      	str	r3, [r7, #8]
      break;
 8003290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003292:	68bb      	ldr	r3, [r7, #8]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	007a1200 	.word	0x007a1200

080032ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80032ca:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <MX_LWIP_Init+0x23c>)
 80032cc:	22c0      	movs	r2, #192	; 0xc0
 80032ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80032d0:	4b8b      	ldr	r3, [pc, #556]	; (8003500 <MX_LWIP_Init+0x23c>)
 80032d2:	22a8      	movs	r2, #168	; 0xa8
 80032d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 80032d6:	4b8a      	ldr	r3, [pc, #552]	; (8003500 <MX_LWIP_Init+0x23c>)
 80032d8:	2204      	movs	r2, #4
 80032da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80032dc:	4b88      	ldr	r3, [pc, #544]	; (8003500 <MX_LWIP_Init+0x23c>)
 80032de:	220a      	movs	r2, #10
 80032e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <MX_LWIP_Init+0x240>)
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80032e8:	4b86      	ldr	r3, [pc, #536]	; (8003504 <MX_LWIP_Init+0x240>)
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <MX_LWIP_Init+0x240>)
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <MX_LWIP_Init+0x240>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80032fa:	4b83      	ldr	r3, [pc, #524]	; (8003508 <MX_LWIP_Init+0x244>)
 80032fc:	22c0      	movs	r2, #192	; 0xc0
 80032fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003300:	4b81      	ldr	r3, [pc, #516]	; (8003508 <MX_LWIP_Init+0x244>)
 8003302:	22a8      	movs	r2, #168	; 0xa8
 8003304:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 4;
 8003306:	4b80      	ldr	r3, [pc, #512]	; (8003508 <MX_LWIP_Init+0x244>)
 8003308:	2204      	movs	r2, #4
 800330a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800330c:	4b7e      	ldr	r3, [pc, #504]	; (8003508 <MX_LWIP_Init+0x244>)
 800330e:	2201      	movs	r2, #1
 8003310:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003312:	f000 fccb 	bl	8003cac <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	4b78      	ldr	r3, [pc, #480]	; (8003500 <MX_LWIP_Init+0x23c>)
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003326:	789b      	ldrb	r3, [r3, #2]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	4313      	orrs	r3, r2
 800332c:	4a74      	ldr	r2, [pc, #464]	; (8003500 <MX_LWIP_Init+0x23c>)
 800332e:	78d2      	ldrb	r2, [r2, #3]
 8003330:	4313      	orrs	r3, r2
 8003332:	061a      	lsls	r2, r3, #24
 8003334:	4b72      	ldr	r3, [pc, #456]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	0619      	lsls	r1, r3, #24
 800333a:	4b71      	ldr	r3, [pc, #452]	; (8003500 <MX_LWIP_Init+0x23c>)
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	4319      	orrs	r1, r3
 8003342:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003344:	789b      	ldrb	r3, [r3, #2]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	430b      	orrs	r3, r1
 800334a:	496d      	ldr	r1, [pc, #436]	; (8003500 <MX_LWIP_Init+0x23c>)
 800334c:	78c9      	ldrb	r1, [r1, #3]
 800334e:	430b      	orrs	r3, r1
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003356:	431a      	orrs	r2, r3
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <MX_LWIP_Init+0x23c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	0619      	lsls	r1, r3, #24
 800335e:	4b68      	ldr	r3, [pc, #416]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	4319      	orrs	r1, r3
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003368:	789b      	ldrb	r3, [r3, #2]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	430b      	orrs	r3, r1
 800336e:	4964      	ldr	r1, [pc, #400]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003370:	78c9      	ldrb	r1, [r1, #3]
 8003372:	430b      	orrs	r3, r1
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800337a:	431a      	orrs	r2, r3
 800337c:	4b60      	ldr	r3, [pc, #384]	; (8003500 <MX_LWIP_Init+0x23c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0619      	lsls	r1, r3, #24
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	4319      	orrs	r1, r3
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <MX_LWIP_Init+0x23c>)
 800338c:	789b      	ldrb	r3, [r3, #2]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	430b      	orrs	r3, r1
 8003392:	495b      	ldr	r1, [pc, #364]	; (8003500 <MX_LWIP_Init+0x23c>)
 8003394:	78c9      	ldrb	r1, [r1, #3]
 8003396:	430b      	orrs	r3, r1
 8003398:	0e1b      	lsrs	r3, r3, #24
 800339a:	4313      	orrs	r3, r2
 800339c:	4a5b      	ldr	r2, [pc, #364]	; (800350c <MX_LWIP_Init+0x248>)
 800339e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80033a0:	4b58      	ldr	r3, [pc, #352]	; (8003504 <MX_LWIP_Init+0x240>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	061a      	lsls	r2, r3, #24
 80033a6:	4b57      	ldr	r3, [pc, #348]	; (8003504 <MX_LWIP_Init+0x240>)
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	4b55      	ldr	r3, [pc, #340]	; (8003504 <MX_LWIP_Init+0x240>)
 80033b0:	789b      	ldrb	r3, [r3, #2]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	4313      	orrs	r3, r2
 80033b6:	4a53      	ldr	r2, [pc, #332]	; (8003504 <MX_LWIP_Init+0x240>)
 80033b8:	78d2      	ldrb	r2, [r2, #3]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	061a      	lsls	r2, r3, #24
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <MX_LWIP_Init+0x240>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0619      	lsls	r1, r3, #24
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <MX_LWIP_Init+0x240>)
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	4319      	orrs	r1, r3
 80033cc:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <MX_LWIP_Init+0x240>)
 80033ce:	789b      	ldrb	r3, [r3, #2]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	430b      	orrs	r3, r1
 80033d4:	494b      	ldr	r1, [pc, #300]	; (8003504 <MX_LWIP_Init+0x240>)
 80033d6:	78c9      	ldrb	r1, [r1, #3]
 80033d8:	430b      	orrs	r3, r1
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033e0:	431a      	orrs	r2, r3
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <MX_LWIP_Init+0x240>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	0619      	lsls	r1, r3, #24
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <MX_LWIP_Init+0x240>)
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	4319      	orrs	r1, r3
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <MX_LWIP_Init+0x240>)
 80033f2:	789b      	ldrb	r3, [r3, #2]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	430b      	orrs	r3, r1
 80033f8:	4942      	ldr	r1, [pc, #264]	; (8003504 <MX_LWIP_Init+0x240>)
 80033fa:	78c9      	ldrb	r1, [r1, #3]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003404:	431a      	orrs	r2, r3
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <MX_LWIP_Init+0x240>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	0619      	lsls	r1, r3, #24
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <MX_LWIP_Init+0x240>)
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	4319      	orrs	r1, r3
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <MX_LWIP_Init+0x240>)
 8003416:	789b      	ldrb	r3, [r3, #2]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	430b      	orrs	r3, r1
 800341c:	4939      	ldr	r1, [pc, #228]	; (8003504 <MX_LWIP_Init+0x240>)
 800341e:	78c9      	ldrb	r1, [r1, #3]
 8003420:	430b      	orrs	r3, r1
 8003422:	0e1b      	lsrs	r3, r3, #24
 8003424:	4313      	orrs	r3, r2
 8003426:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <MX_LWIP_Init+0x24c>)
 8003428:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <MX_LWIP_Init+0x244>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	061a      	lsls	r2, r3, #24
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <MX_LWIP_Init+0x244>)
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	431a      	orrs	r2, r3
 8003438:	4b33      	ldr	r3, [pc, #204]	; (8003508 <MX_LWIP_Init+0x244>)
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	4313      	orrs	r3, r2
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <MX_LWIP_Init+0x244>)
 8003442:	78d2      	ldrb	r2, [r2, #3]
 8003444:	4313      	orrs	r3, r2
 8003446:	061a      	lsls	r2, r3, #24
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <MX_LWIP_Init+0x244>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	0619      	lsls	r1, r3, #24
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <MX_LWIP_Init+0x244>)
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	4319      	orrs	r1, r3
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <MX_LWIP_Init+0x244>)
 8003458:	789b      	ldrb	r3, [r3, #2]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	430b      	orrs	r3, r1
 800345e:	492a      	ldr	r1, [pc, #168]	; (8003508 <MX_LWIP_Init+0x244>)
 8003460:	78c9      	ldrb	r1, [r1, #3]
 8003462:	430b      	orrs	r3, r1
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800346a:	431a      	orrs	r2, r3
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <MX_LWIP_Init+0x244>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	0619      	lsls	r1, r3, #24
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <MX_LWIP_Init+0x244>)
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	4319      	orrs	r1, r3
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <MX_LWIP_Init+0x244>)
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	430b      	orrs	r3, r1
 8003482:	4921      	ldr	r1, [pc, #132]	; (8003508 <MX_LWIP_Init+0x244>)
 8003484:	78c9      	ldrb	r1, [r1, #3]
 8003486:	430b      	orrs	r3, r1
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800348e:	431a      	orrs	r2, r3
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <MX_LWIP_Init+0x244>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	0619      	lsls	r1, r3, #24
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <MX_LWIP_Init+0x244>)
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	4319      	orrs	r1, r3
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <MX_LWIP_Init+0x244>)
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	430b      	orrs	r3, r1
 80034a6:	4918      	ldr	r1, [pc, #96]	; (8003508 <MX_LWIP_Init+0x244>)
 80034a8:	78c9      	ldrb	r1, [r1, #3]
 80034aa:	430b      	orrs	r3, r1
 80034ac:	0e1b      	lsrs	r3, r3, #24
 80034ae:	4313      	orrs	r3, r2
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <MX_LWIP_Init+0x250>)
 80034b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <MX_LWIP_Init+0x254>)
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	4b18      	ldr	r3, [pc, #96]	; (800351c <MX_LWIP_Init+0x258>)
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <MX_LWIP_Init+0x250>)
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <MX_LWIP_Init+0x24c>)
 80034c4:	4911      	ldr	r1, [pc, #68]	; (800350c <MX_LWIP_Init+0x248>)
 80034c6:	4816      	ldr	r0, [pc, #88]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034c8:	f001 f896 	bl	80045f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80034cc:	4814      	ldr	r0, [pc, #80]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034ce:	f001 fa45 	bl	800495c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80034e4:	480e      	ldr	r0, [pc, #56]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034e6:	f001 fa49 	bl	800497c <netif_set_up>
 80034ea:	e002      	b.n	80034f2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80034ec:	480c      	ldr	r0, [pc, #48]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034ee:	f001 fab1 	bl	8004a54 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80034f2:	490c      	ldr	r1, [pc, #48]	; (8003524 <MX_LWIP_Init+0x260>)
 80034f4:	480a      	ldr	r0, [pc, #40]	; (8003520 <MX_LWIP_Init+0x25c>)
 80034f6:	f001 fadf 	bl	8004ab8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000264 	.word	0x20000264
 8003504:	20000260 	.word	0x20000260
 8003508:	20000258 	.word	0x20000258
 800350c:	2000025c 	.word	0x2000025c
 8003510:	20000268 	.word	0x20000268
 8003514:	2000026c 	.word	0x2000026c
 8003518:	0800e295 	.word	0x0800e295
 800351c:	08003ad9 	.word	0x08003ad9
 8003520:	20000220 	.word	0x20000220
 8003524:	08003b45 	.word	0x08003b45

08003528 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_ETH_MspInit+0x158>)
 8003546:	4293      	cmp	r3, r2
 8003548:	f040 8096 	bne.w	8003678 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 8003552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800356a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356e:	6313      	str	r3, [r2, #48]	; 0x30
 8003570:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4a40      	ldr	r2, [pc, #256]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 8003582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
 8003588:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	4a3a      	ldr	r2, [pc, #232]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6313      	str	r3, [r2, #48]	; 0x30
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6313      	str	r3, [r2, #48]	; 0x30
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a2e      	ldr	r2, [pc, #184]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	6313      	str	r3, [r2, #48]	; 0x30
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4a28      	ldr	r2, [pc, #160]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e6:	6313      	str	r3, [r2, #48]	; 0x30
 80035e8:	4b26      	ldr	r3, [pc, #152]	; (8003684 <HAL_ETH_MspInit+0x15c>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80035f4:	2332      	movs	r3, #50	; 0x32
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003604:	230b      	movs	r3, #11
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360c:	4619      	mov	r1, r3
 800360e:	481e      	ldr	r0, [pc, #120]	; (8003688 <HAL_ETH_MspInit+0x160>)
 8003610:	f7fe ffde 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003614:	2386      	movs	r3, #134	; 0x86
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003624:	230b      	movs	r3, #11
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	4619      	mov	r1, r3
 800362e:	4817      	ldr	r0, [pc, #92]	; (800368c <HAL_ETH_MspInit+0x164>)
 8003630:	f7fe ffce 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003646:	230b      	movs	r3, #11
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364e:	4619      	mov	r1, r3
 8003650:	480f      	ldr	r0, [pc, #60]	; (8003690 <HAL_ETH_MspInit+0x168>)
 8003652:	f7fe ffbd 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003656:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003664:	2303      	movs	r3, #3
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003668:	230b      	movs	r3, #11
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800366c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003670:	4619      	mov	r1, r3
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <HAL_ETH_MspInit+0x16c>)
 8003674:	f7fe ffac 	bl	80025d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3738      	adds	r7, #56	; 0x38
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40028000 	.word	0x40028000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020800 	.word	0x40020800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40021800 	.word	0x40021800

08003698 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80036a4:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <low_level_init+0x144>)
 80036a6:	4a4e      	ldr	r2, [pc, #312]	; (80037e0 <low_level_init+0x148>)
 80036a8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <low_level_init+0x144>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <low_level_init+0x144>)
 80036b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036b6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80036b8:	4b48      	ldr	r3, [pc, #288]	; (80037dc <low_level_init+0x144>)
 80036ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036be:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <low_level_init+0x144>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80036c6:	2300      	movs	r3, #0
 80036c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80036ce:	23e1      	movs	r3, #225	; 0xe1
 80036d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80036d2:	2300      	movs	r3, #0
 80036d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x02;
 80036da:	2302      	movs	r3, #2
 80036dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <low_level_init+0x144>)
 80036e0:	f107 0308 	add.w	r3, r7, #8
 80036e4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <low_level_init+0x144>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <low_level_init+0x144>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80036f2:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <low_level_init+0x144>)
 80036f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80036f8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80036fa:	4838      	ldr	r0, [pc, #224]	; (80037dc <low_level_init+0x144>)
 80036fc:	f7fd fe64 	bl	80013c8 <HAL_ETH_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	b2da      	uxtb	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800371c:	2304      	movs	r3, #4
 800371e:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <low_level_init+0x14c>)
 8003720:	4931      	ldr	r1, [pc, #196]	; (80037e8 <low_level_init+0x150>)
 8003722:	482e      	ldr	r0, [pc, #184]	; (80037dc <low_level_init+0x144>)
 8003724:	f7fd ffea 	bl	80016fc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003728:	2304      	movs	r3, #4
 800372a:	4a30      	ldr	r2, [pc, #192]	; (80037ec <low_level_init+0x154>)
 800372c:	4930      	ldr	r1, [pc, #192]	; (80037f0 <low_level_init+0x158>)
 800372e:	482b      	ldr	r0, [pc, #172]	; (80037dc <low_level_init+0x144>)
 8003730:	f7fe f84d 	bl	80017ce <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2206      	movs	r2, #6
 8003738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <low_level_init+0x144>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <low_level_init+0x144>)
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	785a      	ldrb	r2, [r3, #1]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <low_level_init+0x144>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	789a      	ldrb	r2, [r3, #2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <low_level_init+0x144>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	78da      	ldrb	r2, [r3, #3]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <low_level_init+0x144>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	791a      	ldrb	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <low_level_init+0x144>)
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	795a      	ldrb	r2, [r3, #5]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800378a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003792:	f043 030a 	orr.w	r3, r3, #10
 8003796:	b2da      	uxtb	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800379e:	480f      	ldr	r0, [pc, #60]	; (80037dc <low_level_init+0x144>)
 80037a0:	f7fe fabe 	bl	8001d20 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	461a      	mov	r2, r3
 80037aa:	211d      	movs	r1, #29
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <low_level_init+0x144>)
 80037ae:	f7fe f9e9 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f043 030b 	orr.w	r3, r3, #11
 80037b8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	461a      	mov	r2, r3
 80037be:	211d      	movs	r1, #29
 80037c0:	4806      	ldr	r0, [pc, #24]	; (80037dc <low_level_init+0x144>)
 80037c2:	f7fe fa47 	bl	8001c54 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	461a      	mov	r2, r3
 80037cc:	211d      	movs	r1, #29
 80037ce:	4803      	ldr	r0, [pc, #12]	; (80037dc <low_level_init+0x144>)
 80037d0:	f7fe f9d8 	bl	8001b84 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80037d4:	bf00      	nop
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20001b40 	.word	0x20001b40
 80037e0:	40028000 	.word	0x40028000
 80037e4:	20001b88 	.word	0x20001b88
 80037e8:	20000270 	.word	0x20000270
 80037ec:	200002f0 	.word	0x200002f0
 80037f0:	20001ac0 	.word	0x20001ac0

080037f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80037fe:	4b4b      	ldr	r3, [pc, #300]	; (800392c <low_level_output+0x138>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003816:	4b45      	ldr	r3, [pc, #276]	; (800392c <low_level_output+0x138>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	e05a      	b.n	80038dc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da03      	bge.n	8003836 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800382e:	23f8      	movs	r3, #248	; 0xf8
 8003830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003834:	e05c      	b.n	80038f0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	895b      	ldrh	r3, [r3, #10]
 800383a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003840:	e02f      	b.n	80038a2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	18d0      	adds	r0, r2, r3
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	18d1      	adds	r1, r2, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	461a      	mov	r2, r3
 800385a:	f00a fe23 	bl	800e4a4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da03      	bge.n	8003874 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800386c:	23f8      	movs	r3, #248	; 0xf8
 800386e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003872:	e03d      	b.n	80038f0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003884:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003890:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800389c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d8c8      	bhi.n	8003842 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	18d0      	adds	r0, r2, r3
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4619      	mov	r1, r3
 80038c2:	f00a fdef 	bl	800e4a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1a1      	bne.n	8003826 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	4811      	ldr	r0, [pc, #68]	; (800392c <low_level_output+0x138>)
 80038e6:	f7fd ffdf 	bl	80018a8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <low_level_output+0x138>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	f241 0314 	movw	r3, #4116	; 0x1014
 80038f8:	4413      	add	r3, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <low_level_output+0x138>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f241 0314 	movw	r3, #4116	; 0x1014
 800390c:	4413      	add	r3, r2
 800390e:	2220      	movs	r2, #32
 8003910:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <low_level_output+0x138>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	f241 0304 	movw	r3, #4100	; 0x1004
 800391a:	4413      	add	r3, r2
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20001b40 	.word	0x20001b40

08003930 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003954:	484f      	ldr	r0, [pc, #316]	; (8003a94 <low_level_input+0x164>)
 8003956:	f7fe f891 	bl	8001a7c <HAL_ETH_GetReceivedFrame>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <low_level_input+0x34>

    return NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	e092      	b.n	8003a8a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <low_level_input+0x164>)
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800396a:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <low_level_input+0x164>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800397c:	4619      	mov	r1, r3
 800397e:	2000      	movs	r0, #0
 8003980:	f001 f936 	bl	8004bf0 <pbuf_alloc>
 8003984:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04b      	beq.n	8003a24 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <low_level_input+0x164>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	e040      	b.n	8003a1e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	895b      	ldrh	r3, [r3, #10]
 80039a0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80039a6:	e021      	b.n	80039ec <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	18d0      	adds	r0, r2, r3
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	18d1      	adds	r1, r2, r3
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	f00a fd70 	bl	800e4a4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4413      	add	r3, r2
 80039d6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80039da:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80039e6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d8d6      	bhi.n	80039a8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	18d0      	adds	r0, r2, r3
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f00a fd4a 	bl	800e4a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4413      	add	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1bb      	bne.n	800399c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <low_level_input+0x164>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e00b      	b.n	8003a48 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3301      	adds	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <low_level_input+0x164>)
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3ee      	bcc.n	8003a30 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <low_level_input+0x164>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <low_level_input+0x164>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a60:	4413      	add	r3, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <low_level_input+0x164>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a74:	4413      	add	r3, r2
 8003a76:	2280      	movs	r2, #128	; 0x80
 8003a78:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <low_level_input+0x164>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	f241 0308 	movw	r3, #4104	; 0x1008
 8003a82:	4413      	add	r3, r2
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3730      	adds	r7, #48	; 0x30
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20001b40 	.word	0x20001b40

08003a98 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff45 	bl	8003930 <low_level_input>
 8003aa6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d010      	beq.n	8003ad0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	4798      	blx	r3
 8003ab8:	4603      	mov	r3, r0
 8003aba:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003abc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f001 fb77 	bl	80051b8 <pbuf_free>
    p = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e000      	b.n	8003ad2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003ad0:	bf00      	nop
  }
}
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <ethernetif_init+0x1c>
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <ethernetif_init+0x48>)
 8003ae8:	f240 2212 	movw	r2, #530	; 0x212
 8003aec:	490d      	ldr	r1, [pc, #52]	; (8003b24 <ethernetif_init+0x4c>)
 8003aee:	480e      	ldr	r0, [pc, #56]	; (8003b28 <ethernetif_init+0x50>)
 8003af0:	f00a fcee 	bl	800e4d0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2273      	movs	r2, #115	; 0x73
 8003af8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2274      	movs	r2, #116	; 0x74
 8003b00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <ethernetif_init+0x54>)
 8003b08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <ethernetif_init+0x58>)
 8003b0e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fdc1 	bl	8003698 <low_level_init>

  return ERR_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0800f5a8 	.word	0x0800f5a8
 8003b24:	0800f5c4 	.word	0x0800f5c4
 8003b28:	0800f5d4 	.word	0x0800f5d4
 8003b2c:	0800c635 	.word	0x0800c635
 8003b30:	080037f5 	.word	0x080037f5

08003b34 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b38:	f7fd fab4 	bl	80010a4 <HAL_GetTick>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d05d      	beq.n	8003c22 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03f      	beq.n	8003bee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003b6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b72:	2100      	movs	r1, #0
 8003b74:	4830      	ldr	r0, [pc, #192]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003b76:	f7fe f86d 	bl	8001c54 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fa93 	bl	80010a4 <HAL_GetTick>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	461a      	mov	r2, r3
 8003b88:	2101      	movs	r1, #1
 8003b8a:	482b      	ldr	r0, [pc, #172]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003b8c:	f7fd fffa 	bl	8001b84 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003b90:	f7fd fa88 	bl	80010a4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9e:	d828      	bhi.n	8003bf2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0eb      	beq.n	8003b82 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2110      	movs	r1, #16
 8003bb2:	4821      	ldr	r0, [pc, #132]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bb4:	f7fd ffe6 	bl	8001b84 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	e002      	b.n	8003bd2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003bdc:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	e016      	b.n	8003c12 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e011      	b.n	8003c12 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <ethernetif_update_config+0xb0>
          goto error;
 8003bf2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	480a      	ldr	r0, [pc, #40]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003c0e:	f7fe f821 	bl	8001c54 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003c12:	2100      	movs	r1, #0
 8003c14:	4808      	ldr	r0, [pc, #32]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003c16:	f7fe f8e1 	bl	8001ddc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003c1c:	f7fe f880 	bl	8001d20 <HAL_ETH_Start>
 8003c20:	e002      	b.n	8003c28 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003c22:	4805      	ldr	r0, [pc, #20]	; (8003c38 <ethernetif_update_config+0xf4>)
 8003c24:	f7fe f8ab 	bl	8001d7e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f807 	bl	8003c3c <ethernetif_notify_conn_changed>
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20001b40 	.word	0x20001b40

08003c3c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b21b      	sxth	r3, r3
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	b29b      	uxth	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	061a      	lsls	r2, r3, #24
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0e1b      	lsrs	r3, r3, #24
 8003c9e:	4313      	orrs	r3, r2
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003cb6:	f000 f8d5 	bl	8003e64 <mem_init>
  memp_init();
 8003cba:	f000 fbdb 	bl	8004474 <memp_init>
  pbuf_init();
  netif_init();
 8003cbe:	f000 fc93 	bl	80045e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003cc2:	f007 feb1 	bl	800ba28 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003cc6:	f001 fd15 	bl	80056f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003cca:	f007 fe23 	bl	800b914 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <ptr_to_mem+0x20>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	4413      	add	r3, r2
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000098 	.word	0x20000098

08003cfc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <mem_to_ptr+0x20>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000098 	.word	0x20000098

08003d20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <plug_holes+0x120>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d206      	bcs.n	8003d40 <plug_holes+0x20>
 8003d32:	4b44      	ldr	r3, [pc, #272]	; (8003e44 <plug_holes+0x124>)
 8003d34:	f240 12df 	movw	r2, #479	; 0x1df
 8003d38:	4943      	ldr	r1, [pc, #268]	; (8003e48 <plug_holes+0x128>)
 8003d3a:	4844      	ldr	r0, [pc, #272]	; (8003e4c <plug_holes+0x12c>)
 8003d3c:	f00a fbc8 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <plug_holes+0x130>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d306      	bcc.n	8003d58 <plug_holes+0x38>
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <plug_holes+0x124>)
 8003d4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003d50:	4940      	ldr	r1, [pc, #256]	; (8003e54 <plug_holes+0x134>)
 8003d52:	483e      	ldr	r0, [pc, #248]	; (8003e4c <plug_holes+0x12c>)
 8003d54:	f00a fbbc 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	791b      	ldrb	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <plug_holes+0x4e>
 8003d60:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <plug_holes+0x124>)
 8003d62:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003d66:	493c      	ldr	r1, [pc, #240]	; (8003e58 <plug_holes+0x138>)
 8003d68:	4838      	ldr	r0, [pc, #224]	; (8003e4c <plug_holes+0x12c>)
 8003d6a:	f00a fbb1 	bl	800e4d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d76:	d906      	bls.n	8003d86 <plug_holes+0x66>
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <plug_holes+0x124>)
 8003d7a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003d7e:	4937      	ldr	r1, [pc, #220]	; (8003e5c <plug_holes+0x13c>)
 8003d80:	4832      	ldr	r0, [pc, #200]	; (8003e4c <plug_holes+0x12c>)
 8003d82:	f00a fba5 	bl	800e4d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ffa4 	bl	8003cd8 <ptr_to_mem>
 8003d90:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d024      	beq.n	8003de4 <plug_holes+0xc4>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	791b      	ldrb	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d120      	bne.n	8003de4 <plug_holes+0xc4>
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <plug_holes+0x130>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d01b      	beq.n	8003de4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <plug_holes+0x140>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d102      	bne.n	8003dbc <plug_holes+0x9c>
      lfree = mem;
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <plug_holes+0x140>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003dcc:	d00a      	beq.n	8003de4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff80 	bl	8003cd8 <ptr_to_mem>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff8e 	bl	8003cfc <mem_to_ptr>
 8003de0:	4603      	mov	r3, r0
 8003de2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	885b      	ldrh	r3, [r3, #2]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff75 	bl	8003cd8 <ptr_to_mem>
 8003dee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d01f      	beq.n	8003e38 <plug_holes+0x118>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	791b      	ldrb	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11b      	bne.n	8003e38 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <plug_holes+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d102      	bne.n	8003e10 <plug_holes+0xf0>
      lfree = pmem;
 8003e0a:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <plug_holes+0x140>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e20:	d00a      	beq.n	8003e38 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff56 	bl	8003cd8 <ptr_to_mem>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f7ff ff64 	bl	8003cfc <mem_to_ptr>
 8003e34:	4603      	mov	r3, r0
 8003e36:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	20000098 	.word	0x20000098
 8003e44:	0800f5fc 	.word	0x0800f5fc
 8003e48:	0800f62c 	.word	0x0800f62c
 8003e4c:	0800f644 	.word	0x0800f644
 8003e50:	2000009c 	.word	0x2000009c
 8003e54:	0800f66c 	.word	0x0800f66c
 8003e58:	0800f688 	.word	0x0800f688
 8003e5c:	0800f6a4 	.word	0x0800f6a4
 8003e60:	200000a0 	.word	0x200000a0

08003e64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <mem_init+0x68>)
 8003e6c:	3303      	adds	r3, #3
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <mem_init+0x6c>)
 8003e76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <mem_init+0x6c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003e84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003e92:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003e96:	f7ff ff1f 	bl	8003cd8 <ptr_to_mem>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <mem_init+0x70>)
 8003e9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <mem_init+0x70>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <mem_init+0x70>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003eb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <mem_init+0x70>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003eba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <mem_init+0x6c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <mem_init+0x74>)
 8003ec2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20003370 	.word	0x20003370
 8003ed0:	20000098 	.word	0x20000098
 8003ed4:	2000009c 	.word	0x2000009c
 8003ed8:	200000a0 	.word	0x200000a0

08003edc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff09 	bl	8003cfc <mem_to_ptr>
 8003eea:	4603      	mov	r3, r0
 8003eec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fef0 	bl	8003cd8 <ptr_to_mem>
 8003ef8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	885b      	ldrh	r3, [r3, #2]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff feea 	bl	8003cd8 <ptr_to_mem>
 8003f04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f0e:	d818      	bhi.n	8003f42 <mem_link_valid+0x66>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	885b      	ldrh	r3, [r3, #2]
 8003f14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f18:	d813      	bhi.n	8003f42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003f1e:	8afa      	ldrh	r2, [r7, #22]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d004      	beq.n	8003f2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	8afa      	ldrh	r2, [r7, #22]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d109      	bne.n	8003f42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <mem_link_valid+0x74>)
 8003f30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d006      	beq.n	8003f46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	885b      	ldrh	r3, [r3, #2]
 8003f3c:	8afa      	ldrh	r2, [r7, #22]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <mem_link_valid+0x6a>
    return 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <mem_link_valid+0x6c>
  }
  return 1;
 8003f46:	2301      	movs	r3, #1
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2000009c 	.word	0x2000009c

08003f54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d04c      	beq.n	8003ffc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <mem_free+0xb0>)
 8003f6e:	f240 2273 	movw	r2, #627	; 0x273
 8003f72:	4925      	ldr	r1, [pc, #148]	; (8004008 <mem_free+0xb4>)
 8003f74:	4825      	ldr	r0, [pc, #148]	; (800400c <mem_free+0xb8>)
 8003f76:	f00a faab 	bl	800e4d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003f7a:	e040      	b.n	8003ffe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3b08      	subs	r3, #8
 8003f80:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003f82:	4b23      	ldr	r3, [pc, #140]	; (8004010 <mem_free+0xbc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d306      	bcc.n	8003f9a <mem_free+0x46>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 020c 	add.w	r2, r3, #12
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <mem_free+0xc0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d907      	bls.n	8003faa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <mem_free+0xb0>)
 8003f9c:	f240 227f 	movw	r2, #639	; 0x27f
 8003fa0:	491d      	ldr	r1, [pc, #116]	; (8004018 <mem_free+0xc4>)
 8003fa2:	481a      	ldr	r0, [pc, #104]	; (800400c <mem_free+0xb8>)
 8003fa4:	f00a fa94 	bl	800e4d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003fa8:	e029      	b.n	8003ffe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	791b      	ldrb	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <mem_free+0xb0>)
 8003fb4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003fb8:	4918      	ldr	r1, [pc, #96]	; (800401c <mem_free+0xc8>)
 8003fba:	4814      	ldr	r0, [pc, #80]	; (800400c <mem_free+0xb8>)
 8003fbc:	f00a fa88 	bl	800e4d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003fc0:	e01d      	b.n	8003ffe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff ff8a 	bl	8003edc <mem_link_valid>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d107      	bne.n	8003fde <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <mem_free+0xb0>)
 8003fd0:	f240 2295 	movw	r2, #661	; 0x295
 8003fd4:	4912      	ldr	r1, [pc, #72]	; (8004020 <mem_free+0xcc>)
 8003fd6:	480d      	ldr	r0, [pc, #52]	; (800400c <mem_free+0xb8>)
 8003fd8:	f00a fa7a 	bl	800e4d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003fdc:	e00f      	b.n	8003ffe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <mem_free+0xd0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d202      	bcs.n	8003ff4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <mem_free+0xd0>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fe93 	bl	8003d20 <plug_holes>
 8003ffa:	e000      	b.n	8003ffe <mem_free+0xaa>
    return;
 8003ffc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0800f5fc 	.word	0x0800f5fc
 8004008:	0800f6d0 	.word	0x0800f6d0
 800400c:	0800f644 	.word	0x0800f644
 8004010:	20000098 	.word	0x20000098
 8004014:	2000009c 	.word	0x2000009c
 8004018:	0800f6f4 	.word	0x0800f6f4
 800401c:	0800f710 	.word	0x0800f710
 8004020:	0800f738 	.word	0x0800f738
 8004024:	200000a0 	.word	0x200000a0

08004028 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	3303      	adds	r3, #3
 8004038:	b29b      	uxth	r3, r3
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004040:	8bfb      	ldrh	r3, [r7, #30]
 8004042:	2b0b      	cmp	r3, #11
 8004044:	d801      	bhi.n	800404a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004046:	230c      	movs	r3, #12
 8004048:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800404a:	8bfb      	ldrh	r3, [r7, #30]
 800404c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004050:	d803      	bhi.n	800405a <mem_trim+0x32>
 8004052:	8bfa      	ldrh	r2, [r7, #30]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	429a      	cmp	r2, r3
 8004058:	d201      	bcs.n	800405e <mem_trim+0x36>
    return NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	e0cc      	b.n	80041f8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800405e:	4b68      	ldr	r3, [pc, #416]	; (8004200 <mem_trim+0x1d8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d304      	bcc.n	8004072 <mem_trim+0x4a>
 8004068:	4b66      	ldr	r3, [pc, #408]	; (8004204 <mem_trim+0x1dc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d306      	bcc.n	8004080 <mem_trim+0x58>
 8004072:	4b65      	ldr	r3, [pc, #404]	; (8004208 <mem_trim+0x1e0>)
 8004074:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004078:	4964      	ldr	r1, [pc, #400]	; (800420c <mem_trim+0x1e4>)
 800407a:	4865      	ldr	r0, [pc, #404]	; (8004210 <mem_trim+0x1e8>)
 800407c:	f00a fa28 	bl	800e4d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004080:	4b5f      	ldr	r3, [pc, #380]	; (8004200 <mem_trim+0x1d8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d304      	bcc.n	8004094 <mem_trim+0x6c>
 800408a:	4b5e      	ldr	r3, [pc, #376]	; (8004204 <mem_trim+0x1dc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d301      	bcc.n	8004098 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	e0af      	b.n	80041f8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b08      	subs	r3, #8
 800409c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f7ff fe2c 	bl	8003cfc <mem_to_ptr>
 80040a4:	4603      	mov	r3, r0
 80040a6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	8afb      	ldrh	r3, [r7, #22]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b08      	subs	r3, #8
 80040b4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80040b6:	8bfa      	ldrh	r2, [r7, #30]
 80040b8:	8abb      	ldrh	r3, [r7, #20]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d906      	bls.n	80040cc <mem_trim+0xa4>
 80040be:	4b52      	ldr	r3, [pc, #328]	; (8004208 <mem_trim+0x1e0>)
 80040c0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80040c4:	4953      	ldr	r1, [pc, #332]	; (8004214 <mem_trim+0x1ec>)
 80040c6:	4852      	ldr	r0, [pc, #328]	; (8004210 <mem_trim+0x1e8>)
 80040c8:	f00a fa02 	bl	800e4d0 <iprintf>
  if (newsize > size) {
 80040cc:	8bfa      	ldrh	r2, [r7, #30]
 80040ce:	8abb      	ldrh	r3, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d901      	bls.n	80040d8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e08f      	b.n	80041f8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80040d8:	8bfa      	ldrh	r2, [r7, #30]
 80040da:	8abb      	ldrh	r3, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d101      	bne.n	80040e4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	e089      	b.n	80041f8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fdf5 	bl	8003cd8 <ptr_to_mem>
 80040ee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	791b      	ldrb	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d13f      	bne.n	8004178 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004100:	d106      	bne.n	8004110 <mem_trim+0xe8>
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <mem_trim+0x1e0>)
 8004104:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004108:	4943      	ldr	r1, [pc, #268]	; (8004218 <mem_trim+0x1f0>)
 800410a:	4841      	ldr	r0, [pc, #260]	; (8004210 <mem_trim+0x1e8>)
 800410c:	f00a f9e0 	bl	800e4d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004116:	8afa      	ldrh	r2, [r7, #22]
 8004118:	8bfb      	ldrh	r3, [r7, #30]
 800411a:	4413      	add	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	3308      	adds	r3, #8
 8004120:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004122:	4b3e      	ldr	r3, [pc, #248]	; (800421c <mem_trim+0x1f4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	429a      	cmp	r2, r3
 800412a:	d106      	bne.n	800413a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fdd2 	bl	8003cd8 <ptr_to_mem>
 8004134:	4603      	mov	r3, r0
 8004136:	4a39      	ldr	r2, [pc, #228]	; (800421c <mem_trim+0x1f4>)
 8004138:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800413a:	89fb      	ldrh	r3, [r7, #14]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fdcb 	bl	8003cd8 <ptr_to_mem>
 8004142:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	2200      	movs	r2, #0
 8004148:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	89ba      	ldrh	r2, [r7, #12]
 800414e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	8afa      	ldrh	r2, [r7, #22]
 8004154:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	89fa      	ldrh	r2, [r7, #14]
 800415a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004164:	d047      	beq.n	80041f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fdb4 	bl	8003cd8 <ptr_to_mem>
 8004170:	4602      	mov	r2, r0
 8004172:	89fb      	ldrh	r3, [r7, #14]
 8004174:	8053      	strh	r3, [r2, #2]
 8004176:	e03e      	b.n	80041f6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004178:	8bfb      	ldrh	r3, [r7, #30]
 800417a:	f103 0214 	add.w	r2, r3, #20
 800417e:	8abb      	ldrh	r3, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	d838      	bhi.n	80041f6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004184:	8afa      	ldrh	r2, [r7, #22]
 8004186:	8bfb      	ldrh	r3, [r7, #30]
 8004188:	4413      	add	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	3308      	adds	r3, #8
 800418e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004198:	d106      	bne.n	80041a8 <mem_trim+0x180>
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <mem_trim+0x1e0>)
 800419c:	f240 3216 	movw	r2, #790	; 0x316
 80041a0:	491d      	ldr	r1, [pc, #116]	; (8004218 <mem_trim+0x1f0>)
 80041a2:	481b      	ldr	r0, [pc, #108]	; (8004210 <mem_trim+0x1e8>)
 80041a4:	f00a f994 	bl	800e4d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fd94 	bl	8003cd8 <ptr_to_mem>
 80041b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <mem_trim+0x1f4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d202      	bcs.n	80041c2 <mem_trim+0x19a>
      lfree = mem2;
 80041bc:	4a17      	ldr	r2, [pc, #92]	; (800421c <mem_trim+0x1f4>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2200      	movs	r2, #0
 80041c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	8afa      	ldrh	r2, [r7, #22]
 80041d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	89fa      	ldrh	r2, [r7, #14]
 80041da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041e4:	d007      	beq.n	80041f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fd74 	bl	8003cd8 <ptr_to_mem>
 80041f0:	4602      	mov	r2, r0
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80041f6:	687b      	ldr	r3, [r7, #4]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000098 	.word	0x20000098
 8004204:	2000009c 	.word	0x2000009c
 8004208:	0800f5fc 	.word	0x0800f5fc
 800420c:	0800f76c 	.word	0x0800f76c
 8004210:	0800f644 	.word	0x0800f644
 8004214:	0800f784 	.word	0x0800f784
 8004218:	0800f7a4 	.word	0x0800f7a4
 800421c:	200000a0 	.word	0x200000a0

08004220 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <mem_malloc+0x14>
    return NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	e0d9      	b.n	80043e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	3303      	adds	r3, #3
 8004238:	b29b      	uxth	r3, r3
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004240:	8bbb      	ldrh	r3, [r7, #28]
 8004242:	2b0b      	cmp	r3, #11
 8004244:	d801      	bhi.n	800424a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004246:	230c      	movs	r3, #12
 8004248:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800424a:	8bbb      	ldrh	r3, [r7, #28]
 800424c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004250:	d803      	bhi.n	800425a <mem_malloc+0x3a>
 8004252:	8bba      	ldrh	r2, [r7, #28]
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	429a      	cmp	r2, r3
 8004258:	d201      	bcs.n	800425e <mem_malloc+0x3e>
    return NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	e0c4      	b.n	80043e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800425e:	4b64      	ldr	r3, [pc, #400]	; (80043f0 <mem_malloc+0x1d0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd4a 	bl	8003cfc <mem_to_ptr>
 8004268:	4603      	mov	r3, r0
 800426a:	83fb      	strh	r3, [r7, #30]
 800426c:	e0b4      	b.n	80043d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800426e:	8bfb      	ldrh	r3, [r7, #30]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fd31 	bl	8003cd8 <ptr_to_mem>
 8004276:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	791b      	ldrb	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 80a4 	bne.w	80043ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f1a3 0208 	sub.w	r2, r3, #8
 8004290:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004292:	429a      	cmp	r2, r3
 8004294:	f0c0 8099 	bcc.w	80043ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	8bfb      	ldrh	r3, [r7, #30]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f1a3 0208 	sub.w	r2, r3, #8
 80042a6:	8bbb      	ldrh	r3, [r7, #28]
 80042a8:	3314      	adds	r3, #20
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d333      	bcc.n	8004316 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80042ae:	8bfa      	ldrh	r2, [r7, #30]
 80042b0:	8bbb      	ldrh	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3308      	adds	r3, #8
 80042b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80042ba:	8a7b      	ldrh	r3, [r7, #18]
 80042bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042c0:	d106      	bne.n	80042d0 <mem_malloc+0xb0>
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <mem_malloc+0x1d4>)
 80042c4:	f240 3287 	movw	r2, #903	; 0x387
 80042c8:	494b      	ldr	r1, [pc, #300]	; (80043f8 <mem_malloc+0x1d8>)
 80042ca:	484c      	ldr	r0, [pc, #304]	; (80043fc <mem_malloc+0x1dc>)
 80042cc:	f00a f900 	bl	800e4d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd00 	bl	8003cd8 <ptr_to_mem>
 80042d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8bfa      	ldrh	r2, [r7, #30]
 80042ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	8a7a      	ldrh	r2, [r7, #18]
 80042f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2201      	movs	r2, #1
 80042f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004302:	d00b      	beq.n	800431c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fce5 	bl	8003cd8 <ptr_to_mem>
 800430e:	4602      	mov	r2, r0
 8004310:	8a7b      	ldrh	r3, [r7, #18]
 8004312:	8053      	strh	r3, [r2, #2]
 8004314:	e002      	b.n	800431c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2201      	movs	r2, #1
 800431a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800431c:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <mem_malloc+0x1d0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d127      	bne.n	8004376 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004326:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <mem_malloc+0x1d0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800432c:	e005      	b.n	800433a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fcd0 	bl	8003cd8 <ptr_to_mem>
 8004338:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <mem_malloc+0x12c>
 8004342:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <mem_malloc+0x1e0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	429a      	cmp	r2, r3
 800434a:	d1f0      	bne.n	800432e <mem_malloc+0x10e>
          }
          lfree = cur;
 800434c:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <mem_malloc+0x1d0>)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <mem_malloc+0x1d0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <mem_malloc+0x1e0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d00b      	beq.n	8004376 <mem_malloc+0x156>
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <mem_malloc+0x1d0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <mem_malloc+0x156>
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <mem_malloc+0x1d4>)
 800436a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800436e:	4925      	ldr	r1, [pc, #148]	; (8004404 <mem_malloc+0x1e4>)
 8004370:	4822      	ldr	r0, [pc, #136]	; (80043fc <mem_malloc+0x1dc>)
 8004372:	f00a f8ad 	bl	800e4d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004376:	8bba      	ldrh	r2, [r7, #28]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	3308      	adds	r3, #8
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <mem_malloc+0x1e0>)
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	4293      	cmp	r3, r2
 8004384:	d906      	bls.n	8004394 <mem_malloc+0x174>
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <mem_malloc+0x1d4>)
 8004388:	f240 32b9 	movw	r2, #953	; 0x3b9
 800438c:	491e      	ldr	r1, [pc, #120]	; (8004408 <mem_malloc+0x1e8>)
 800438e:	481b      	ldr	r0, [pc, #108]	; (80043fc <mem_malloc+0x1dc>)
 8004390:	f00a f89e 	bl	800e4d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <mem_malloc+0x18c>
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <mem_malloc+0x1d4>)
 80043a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80043a4:	4919      	ldr	r1, [pc, #100]	; (800440c <mem_malloc+0x1ec>)
 80043a6:	4815      	ldr	r0, [pc, #84]	; (80043fc <mem_malloc+0x1dc>)
 80043a8:	f00a f892 	bl	800e4d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <mem_malloc+0x1a4>
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <mem_malloc+0x1d4>)
 80043b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80043bc:	4914      	ldr	r1, [pc, #80]	; (8004410 <mem_malloc+0x1f0>)
 80043be:	480f      	ldr	r0, [pc, #60]	; (80043fc <mem_malloc+0x1dc>)
 80043c0:	f00a f886 	bl	800e4d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3308      	adds	r3, #8
 80043c8:	e00e      	b.n	80043e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80043ca:	8bfb      	ldrh	r3, [r7, #30]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fc83 	bl	8003cd8 <ptr_to_mem>
 80043d2:	4603      	mov	r3, r0
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80043d8:	8bfa      	ldrh	r2, [r7, #30]
 80043da:	8bbb      	ldrh	r3, [r7, #28]
 80043dc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f4ff af44 	bcc.w	800426e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200000a0 	.word	0x200000a0
 80043f4:	0800f5fc 	.word	0x0800f5fc
 80043f8:	0800f7a4 	.word	0x0800f7a4
 80043fc:	0800f644 	.word	0x0800f644
 8004400:	2000009c 	.word	0x2000009c
 8004404:	0800f7b8 	.word	0x0800f7b8
 8004408:	0800f7d4 	.word	0x0800f7d4
 800440c:	0800f804 	.word	0x0800f804
 8004410:	0800f834 	.word	0x0800f834

08004414 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	3303      	adds	r3, #3
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e011      	b.n	800445a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	885b      	ldrh	r3, [r3, #2]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4293      	cmp	r3, r2
 8004464:	dbe7      	blt.n	8004436 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800447a:	2300      	movs	r3, #0
 800447c:	80fb      	strh	r3, [r7, #6]
 800447e:	e009      	b.n	8004494 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <memp_init+0x30>)
 8004484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff ffc3 	bl	8004414 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	3301      	adds	r3, #1
 8004492:	80fb      	strh	r3, [r7, #6]
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d9f2      	bls.n	8004480 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08012004 	.word	0x08012004

080044a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d012      	beq.n	80044e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <do_memp_malloc_pool+0x38>
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <do_memp_malloc_pool+0x48>)
 80044d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80044d8:	4906      	ldr	r1, [pc, #24]	; (80044f4 <do_memp_malloc_pool+0x4c>)
 80044da:	4807      	ldr	r0, [pc, #28]	; (80044f8 <do_memp_malloc_pool+0x50>)
 80044dc:	f009 fff8 	bl	800e4d0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	e000      	b.n	80044e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	0800f858 	.word	0x0800f858
 80044f4:	0800f888 	.word	0x0800f888
 80044f8:	0800f8ac 	.word	0x0800f8ac

080044fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d908      	bls.n	800451e <memp_malloc+0x22>
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <memp_malloc+0x3c>)
 800450e:	f240 1257 	movw	r2, #343	; 0x157
 8004512:	490a      	ldr	r1, [pc, #40]	; (800453c <memp_malloc+0x40>)
 8004514:	480a      	ldr	r0, [pc, #40]	; (8004540 <memp_malloc+0x44>)
 8004516:	f009 ffdb 	bl	800e4d0 <iprintf>
 800451a:	2300      	movs	r3, #0
 800451c:	e008      	b.n	8004530 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <memp_malloc+0x48>)
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ffbe 	bl	80044a8 <do_memp_malloc_pool>
 800452c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	0800f858 	.word	0x0800f858
 800453c:	0800f8e8 	.word	0x0800f8e8
 8004540:	0800f8ac 	.word	0x0800f8ac
 8004544:	08012004 	.word	0x08012004

08004548 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <do_memp_free_pool+0x22>
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <do_memp_free_pool+0x40>)
 800455e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <do_memp_free_pool+0x44>)
 8004564:	480a      	ldr	r0, [pc, #40]	; (8004590 <do_memp_free_pool+0x48>)
 8004566:	f009 ffb3 	bl	800e4d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	0800f858 	.word	0x0800f858
 800458c:	0800f908 	.word	0x0800f908
 8004590:	0800f8ac 	.word	0x0800f8ac

08004594 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d907      	bls.n	80045b6 <memp_free+0x22>
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <memp_free+0x44>)
 80045a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80045ac:	490b      	ldr	r1, [pc, #44]	; (80045dc <memp_free+0x48>)
 80045ae:	480c      	ldr	r0, [pc, #48]	; (80045e0 <memp_free+0x4c>)
 80045b0:	f009 ff8e 	bl	800e4d0 <iprintf>
 80045b4:	e00c      	b.n	80045d0 <memp_free+0x3c>

  if (mem == NULL) {
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <memp_free+0x50>)
 80045c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ffbe 	bl	8004548 <do_memp_free_pool>
 80045cc:	e000      	b.n	80045d0 <memp_free+0x3c>
    return;
 80045ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	0800f858 	.word	0x0800f858
 80045dc:	0800f928 	.word	0x0800f928
 80045e0:	0800f8ac 	.word	0x0800f8ac
 80045e4:	08012004 	.word	0x08012004

080045e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <netif_add+0x26>
 800460c:	4b57      	ldr	r3, [pc, #348]	; (800476c <netif_add+0x174>)
 800460e:	f240 1227 	movw	r2, #295	; 0x127
 8004612:	4957      	ldr	r1, [pc, #348]	; (8004770 <netif_add+0x178>)
 8004614:	4857      	ldr	r0, [pc, #348]	; (8004774 <netif_add+0x17c>)
 8004616:	f009 ff5b 	bl	800e4d0 <iprintf>
 800461a:	2300      	movs	r3, #0
 800461c:	e0a2      	b.n	8004764 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <netif_add+0x3e>
 8004624:	4b51      	ldr	r3, [pc, #324]	; (800476c <netif_add+0x174>)
 8004626:	f44f 7294 	mov.w	r2, #296	; 0x128
 800462a:	4953      	ldr	r1, [pc, #332]	; (8004778 <netif_add+0x180>)
 800462c:	4851      	ldr	r0, [pc, #324]	; (8004774 <netif_add+0x17c>)
 800462e:	f009 ff4f 	bl	800e4d0 <iprintf>
 8004632:	2300      	movs	r3, #0
 8004634:	e096      	b.n	8004764 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800463c:	4b4f      	ldr	r3, [pc, #316]	; (800477c <netif_add+0x184>)
 800463e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004646:	4b4d      	ldr	r3, [pc, #308]	; (800477c <netif_add+0x184>)
 8004648:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004650:	4b4a      	ldr	r3, [pc, #296]	; (800477c <netif_add+0x184>)
 8004652:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a45      	ldr	r2, [pc, #276]	; (8004780 <netif_add+0x188>)
 800466a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <netif_add+0x18c>)
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004694:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f913 	bl	80048c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	4798      	blx	r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <netif_add+0xba>
    return NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e058      	b.n	8004764 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046b8:	2bff      	cmp	r3, #255	; 0xff
 80046ba:	d103      	bne.n	80046c4 <netif_add+0xcc>
        netif->num = 0;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80046c8:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <netif_add+0x190>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e02b      	b.n	8004728 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d106      	bne.n	80046e6 <netif_add+0xee>
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <netif_add+0x174>)
 80046da:	f240 128b 	movw	r2, #395	; 0x18b
 80046de:	492b      	ldr	r1, [pc, #172]	; (800478c <netif_add+0x194>)
 80046e0:	4824      	ldr	r0, [pc, #144]	; (8004774 <netif_add+0x17c>)
 80046e2:	f009 fef5 	bl	800e4d0 <iprintf>
        num_netifs++;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3301      	adds	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2bff      	cmp	r3, #255	; 0xff
 80046f0:	dd06      	ble.n	8004700 <netif_add+0x108>
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <netif_add+0x174>)
 80046f4:	f240 128d 	movw	r2, #397	; 0x18d
 80046f8:	4925      	ldr	r1, [pc, #148]	; (8004790 <netif_add+0x198>)
 80046fa:	481e      	ldr	r0, [pc, #120]	; (8004774 <netif_add+0x17c>)
 80046fc:	f009 fee8 	bl	800e4d0 <iprintf>
        if (netif2->num == netif->num) {
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800470c:	429a      	cmp	r2, r3
 800470e:	d108      	bne.n	8004722 <netif_add+0x12a>
          netif->num++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004720:	e005      	b.n	800472e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1d0      	bne.n	80046d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1be      	bne.n	80046b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800473a:	2bfe      	cmp	r3, #254	; 0xfe
 800473c:	d103      	bne.n	8004746 <netif_add+0x14e>
    netif_num = 0;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <netif_add+0x18c>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e006      	b.n	8004754 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800474c:	3301      	adds	r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <netif_add+0x18c>)
 8004752:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <netif_add+0x190>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <netif_add+0x190>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	0800f944 	.word	0x0800f944
 8004770:	0800f9d8 	.word	0x0800f9d8
 8004774:	0800f994 	.word	0x0800f994
 8004778:	0800f9f4 	.word	0x0800f9f4
 800477c:	08012068 	.word	0x08012068
 8004780:	08004adb 	.word	0x08004adb
 8004784:	200000c8 	.word	0x200000c8
 8004788:	20008a4c 	.word	0x20008a4c
 800478c:	0800fa18 	.word	0x0800fa18
 8004790:	0800fa2c 	.word	0x0800fa2c

08004794 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f002 fd8f 	bl	80072c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f007 fac7 	bl	800bd3c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <netif_do_set_ipaddr+0x20>
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <netif_do_set_ipaddr+0x88>)
 80047cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80047d0:	491c      	ldr	r1, [pc, #112]	; (8004844 <netif_do_set_ipaddr+0x8c>)
 80047d2:	481d      	ldr	r0, [pc, #116]	; (8004848 <netif_do_set_ipaddr+0x90>)
 80047d4:	f009 fe7c 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <netif_do_set_ipaddr+0x34>
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <netif_do_set_ipaddr+0x88>)
 80047e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80047e4:	4917      	ldr	r1, [pc, #92]	; (8004844 <netif_do_set_ipaddr+0x8c>)
 80047e6:	4818      	ldr	r0, [pc, #96]	; (8004848 <netif_do_set_ipaddr+0x90>)
 80047e8:	f009 fe72 	bl	800e4d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3304      	adds	r3, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d01c      	beq.n	8004834 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3304      	adds	r3, #4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffbf 	bl	8004794 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <netif_do_set_ipaddr+0x6a>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	e000      	b.n	8004824 <netif_do_set_ipaddr+0x6c>
 8004822:	2300      	movs	r3, #0
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004828:	2101      	movs	r1, #1
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f8d2 	bl	80049d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0800f944 	.word	0x0800f944
 8004844:	0800fa5c 	.word	0x0800fa5c
 8004848:	0800f994 	.word	0x0800f994

0800484c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3308      	adds	r3, #8
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d00a      	beq.n	800487c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <netif_do_set_netmask+0x26>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	e000      	b.n	8004874 <netif_do_set_netmask+0x28>
 8004872:	2300      	movs	r3, #0
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	330c      	adds	r3, #12
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d00a      	beq.n	80048ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <netif_do_set_gw+0x26>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	e000      	b.n	80048b2 <netif_do_set_gw+0x28>
 80048b0:	2300      	movs	r3, #0
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <netif_set_addr+0x90>)
 80048e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <netif_set_addr+0x90>)
 80048f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <netif_set_addr+0x90>)
 80048fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <netif_set_addr+0x42>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <netif_set_addr+0x46>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <netif_set_addr+0x48>
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d006      	beq.n	8004926 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	461a      	mov	r2, r3
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff ff49 	bl	80047b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff ff8e 	bl	800484c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff ffa8 	bl	800488a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	461a      	mov	r2, r3
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ff35 	bl	80047b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800494e:	bf00      	nop
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	08012068 	.word	0x08012068

0800495c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <netif_set_default+0x1c>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20008a50 	.word	0x20008a50

0800497c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d107      	bne.n	800499a <netif_set_up+0x1e>
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <netif_set_up+0x4c>)
 800498c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <netif_set_up+0x50>)
 8004992:	480f      	ldr	r0, [pc, #60]	; (80049d0 <netif_set_up+0x54>)
 8004994:	f009 fd9c 	bl	800e4d0 <iprintf>
 8004998:	e013      	b.n	80049c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10c      	bne.n	80049c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80049ba:	2103      	movs	r1, #3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f809 	bl	80049d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	0800f944 	.word	0x0800f944
 80049cc:	0800facc 	.word	0x0800facc
 80049d0:	0800f994 	.word	0x0800f994

080049d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <netif_issue_reports+0x20>
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <netif_issue_reports+0x74>)
 80049e8:	f240 326d 	movw	r2, #877	; 0x36d
 80049ec:	4917      	ldr	r1, [pc, #92]	; (8004a4c <netif_issue_reports+0x78>)
 80049ee:	4818      	ldr	r0, [pc, #96]	; (8004a50 <netif_issue_reports+0x7c>)
 80049f0:	f009 fd6e 	bl	800e4d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01e      	beq.n	8004a40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d017      	beq.n	8004a40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d013      	beq.n	8004a42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f008 f8e9 	bl	800cc10 <etharp_request>
 8004a3e:	e000      	b.n	8004a42 <netif_issue_reports+0x6e>
    return;
 8004a40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	0800f944 	.word	0x0800f944
 8004a4c:	0800fae8 	.word	0x0800fae8
 8004a50:	0800f994 	.word	0x0800f994

08004a54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <netif_set_down+0x1e>
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <netif_set_down+0x58>)
 8004a64:	f240 329b 	movw	r2, #923	; 0x39b
 8004a68:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <netif_set_down+0x5c>)
 8004a6a:	4812      	ldr	r0, [pc, #72]	; (8004ab4 <netif_set_down+0x60>)
 8004a6c:	f009 fd30 	bl	800e4d0 <iprintf>
 8004a70:	e019      	b.n	8004aa6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f007 fc73 	bl	800c38c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	0800f944 	.word	0x0800f944
 8004ab0:	0800fb0c 	.word	0x0800fb0c
 8004ab4:	0800f994 	.word	0x0800f994

08004ab8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	61da      	str	r2, [r3, #28]
  }
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004ae6:	f06f 030b 	mvn.w	r3, #11
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <netif_get_by_index+0x48>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e00c      	b.n	8004b2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	79fa      	ldrb	r2, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d101      	bne.n	8004b24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e006      	b.n	8004b32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ef      	bne.n	8004b10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20008a4c 	.word	0x20008a4c

08004b44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <pbuf_free_ooseq+0x38>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <pbuf_free_ooseq+0x3c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e00a      	b.n	8004b6e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f002 fbed 	bl	8007340 <tcp_free_ooseq>
      return;
 8004b66:	e005      	b.n	8004b74 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f1      	bne.n	8004b58 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20008a54 	.word	0x20008a54
 8004b80:	20008a5c 	.word	0x20008a5c

08004b84 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <pbuf_pool_is_empty+0x14>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20008a54 	.word	0x20008a54

08004b9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	460b      	mov	r3, r1
 8004bac:	80fb      	strh	r3, [r7, #6]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	88ba      	ldrh	r2, [r7, #4]
 8004bc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004bca:	8b3b      	ldrh	r3, [r7, #24]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	7f3a      	ldrb	r2, [r7, #28]
 8004bd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	73da      	strb	r2, [r3, #15]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	80bb      	strh	r3, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004c0c:	d07f      	beq.n	8004d0e <pbuf_alloc+0x11e>
 8004c0e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004c12:	f300 80c8 	bgt.w	8004da6 <pbuf_alloc+0x1b6>
 8004c16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004c1a:	d010      	beq.n	8004c3e <pbuf_alloc+0x4e>
 8004c1c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004c20:	f300 80c1 	bgt.w	8004da6 <pbuf_alloc+0x1b6>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <pbuf_alloc+0x3e>
 8004c28:	2b41      	cmp	r3, #65	; 0x41
 8004c2a:	f040 80bc 	bne.w	8004da6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	88bb      	ldrh	r3, [r7, #4]
 8004c32:	4619      	mov	r1, r3
 8004c34:	2000      	movs	r0, #0
 8004c36:	f000 f8d1 	bl	8004ddc <pbuf_alloc_reference>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004c3c:	e0bd      	b.n	8004dba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004c46:	88bb      	ldrh	r3, [r7, #4]
 8004c48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004c4a:	2008      	movs	r0, #8
 8004c4c:	f7ff fc56 	bl	80044fc <memp_malloc>
 8004c50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004c58:	f7ff ff94 	bl	8004b84 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c64:	f000 faa8 	bl	80051b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e0a7      	b.n	8004dbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c6e:	3303      	adds	r3, #3
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8b7a      	ldrh	r2, [r7, #26]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bf28      	it	cs
 8004c84:	4613      	movcs	r3, r2
 8004c86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3303      	adds	r3, #3
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	4618      	mov	r0, r3
 8004c98:	89f9      	ldrh	r1, [r7, #14]
 8004c9a:	8b7a      	ldrh	r2, [r7, #26]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6938      	ldr	r0, [r7, #16]
 8004caa:	f7ff ff77 	bl	8004b9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <pbuf_alloc+0xd8>
 8004cba:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <pbuf_alloc+0x1d4>)
 8004cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cc0:	4941      	ldr	r1, [pc, #260]	; (8004dc8 <pbuf_alloc+0x1d8>)
 8004cc2:	4842      	ldr	r0, [pc, #264]	; (8004dcc <pbuf_alloc+0x1dc>)
 8004cc4:	f009 fc04 	bl	800e4d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cca:	3303      	adds	r3, #3
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004cd4:	d106      	bne.n	8004ce4 <pbuf_alloc+0xf4>
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <pbuf_alloc+0x1d4>)
 8004cd8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004cdc:	493c      	ldr	r1, [pc, #240]	; (8004dd0 <pbuf_alloc+0x1e0>)
 8004cde:	483b      	ldr	r0, [pc, #236]	; (8004dcc <pbuf_alloc+0x1dc>)
 8004ce0:	f009 fbf6 	bl	800e4d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	e002      	b.n	8004cf6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004cfa:	8b7a      	ldrh	r2, [r7, #26]
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d19e      	bne.n	8004c4a <pbuf_alloc+0x5a>
      break;
 8004d0c:	e055      	b.n	8004dba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004d0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d10:	3303      	adds	r3, #3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f023 0303 	bic.w	r3, r3, #3
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	88bb      	ldrh	r3, [r7, #4]
 8004d1c:	3303      	adds	r3, #3
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f023 0303 	bic.w	r3, r3, #3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004d2a:	8b3b      	ldrh	r3, [r7, #24]
 8004d2c:	3310      	adds	r3, #16
 8004d2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004d30:	8b3a      	ldrh	r2, [r7, #24]
 8004d32:	88bb      	ldrh	r3, [r7, #4]
 8004d34:	3303      	adds	r3, #3
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d306      	bcc.n	8004d4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004d3e:	8afa      	ldrh	r2, [r7, #22]
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	3303      	adds	r3, #3
 8004d44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d201      	bcs.n	8004d50 <pbuf_alloc+0x160>
        return NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e035      	b.n	8004dbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004d50:	8afb      	ldrh	r3, [r7, #22]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fa64 	bl	8004220 <mem_malloc>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <pbuf_alloc+0x174>
        return NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e02b      	b.n	8004dbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d66:	3310      	adds	r3, #16
 8004d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3303      	adds	r3, #3
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	4618      	mov	r0, r3
 8004d74:	88b9      	ldrh	r1, [r7, #4]
 8004d76:	88ba      	ldrh	r2, [r7, #4]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	4601      	mov	r1, r0
 8004d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d86:	f7ff ff09 	bl	8004b9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d010      	beq.n	8004db8 <pbuf_alloc+0x1c8>
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <pbuf_alloc+0x1d4>)
 8004d98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004d9c:	490d      	ldr	r1, [pc, #52]	; (8004dd4 <pbuf_alloc+0x1e4>)
 8004d9e:	480b      	ldr	r0, [pc, #44]	; (8004dcc <pbuf_alloc+0x1dc>)
 8004da0:	f009 fb96 	bl	800e4d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004da4:	e008      	b.n	8004db8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <pbuf_alloc+0x1d4>)
 8004da8:	f240 1227 	movw	r2, #295	; 0x127
 8004dac:	490a      	ldr	r1, [pc, #40]	; (8004dd8 <pbuf_alloc+0x1e8>)
 8004dae:	4807      	ldr	r0, [pc, #28]	; (8004dcc <pbuf_alloc+0x1dc>)
 8004db0:	f009 fb8e 	bl	800e4d0 <iprintf>
      return NULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e001      	b.n	8004dbc <pbuf_alloc+0x1cc>
      break;
 8004db8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	0800fb74 	.word	0x0800fb74
 8004dc8:	0800fba4 	.word	0x0800fba4
 8004dcc:	0800fbd4 	.word	0x0800fbd4
 8004dd0:	0800fbfc 	.word	0x0800fbfc
 8004dd4:	0800fc30 	.word	0x0800fc30
 8004dd8:	0800fc5c 	.word	0x0800fc5c

08004ddc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
 8004de8:	4613      	mov	r3, r2
 8004dea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004dec:	883b      	ldrh	r3, [r7, #0]
 8004dee:	2b41      	cmp	r3, #65	; 0x41
 8004df0:	d009      	beq.n	8004e06 <pbuf_alloc_reference+0x2a>
 8004df2:	883b      	ldrh	r3, [r7, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d006      	beq.n	8004e06 <pbuf_alloc_reference+0x2a>
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <pbuf_alloc_reference+0x5c>)
 8004dfa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004dfe:	490f      	ldr	r1, [pc, #60]	; (8004e3c <pbuf_alloc_reference+0x60>)
 8004e00:	480f      	ldr	r0, [pc, #60]	; (8004e40 <pbuf_alloc_reference+0x64>)
 8004e02:	f009 fb65 	bl	800e4d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004e06:	2007      	movs	r0, #7
 8004e08:	f7ff fb78 	bl	80044fc <memp_malloc>
 8004e0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e00b      	b.n	8004e30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004e18:	8879      	ldrh	r1, [r7, #2]
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	883b      	ldrh	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	460b      	mov	r3, r1
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff feb7 	bl	8004b9c <pbuf_init_alloced_pbuf>
  return p;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	0800fb74 	.word	0x0800fb74
 8004e3c:	0800fc78 	.word	0x0800fc78
 8004e40:	0800fbd4 	.word	0x0800fbd4

08004e44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	460b      	mov	r3, r1
 8004e52:	81bb      	strh	r3, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004e5c:	8a7b      	ldrh	r3, [r7, #18]
 8004e5e:	3303      	adds	r3, #3
 8004e60:	f023 0203 	bic.w	r2, r3, #3
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	441a      	add	r2, r3
 8004e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d901      	bls.n	8004e72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e018      	b.n	8004ea4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004e78:	8a7b      	ldrh	r3, [r7, #18]
 8004e7a:	3303      	adds	r3, #3
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	4413      	add	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e001      	b.n	8004e8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	89b9      	ldrh	r1, [r7, #12]
 8004e90:	89ba      	ldrh	r2, [r7, #12]
 8004e92:	2302      	movs	r3, #2
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	897b      	ldrh	r3, [r7, #10]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	f7ff fe7d 	bl	8004b9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004ea2:	687b      	ldr	r3, [r7, #4]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <pbuf_realloc+0x20>
 8004ebe:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <pbuf_realloc+0xfc>)
 8004ec0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004ec4:	4939      	ldr	r1, [pc, #228]	; (8004fac <pbuf_realloc+0x100>)
 8004ec6:	483a      	ldr	r0, [pc, #232]	; (8004fb0 <pbuf_realloc+0x104>)
 8004ec8:	f009 fb02 	bl	800e4d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	891b      	ldrh	r3, [r3, #8]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d263      	bcs.n	8004f9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	891a      	ldrh	r2, [r3, #8]
 8004eda:	887b      	ldrh	r3, [r7, #2]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004ee0:	887b      	ldrh	r3, [r7, #2]
 8004ee2:	817b      	strh	r3, [r7, #10]
  q = p;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004ee8:	e018      	b.n	8004f1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	895b      	ldrh	r3, [r3, #10]
 8004eee:	897a      	ldrh	r2, [r7, #10]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	891a      	ldrh	r2, [r3, #8]
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <pbuf_realloc+0x70>
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <pbuf_realloc+0xfc>)
 8004f10:	f240 12af 	movw	r2, #431	; 0x1af
 8004f14:	4927      	ldr	r1, [pc, #156]	; (8004fb4 <pbuf_realloc+0x108>)
 8004f16:	4826      	ldr	r0, [pc, #152]	; (8004fb0 <pbuf_realloc+0x104>)
 8004f18:	f009 fada 	bl	800e4d0 <iprintf>
  while (rem_len > q->len) {
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	897a      	ldrh	r2, [r7, #10]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d8e1      	bhi.n	8004eea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	7b1b      	ldrb	r3, [r3, #12]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d121      	bne.n	8004f76 <pbuf_realloc+0xca>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	895b      	ldrh	r3, [r3, #10]
 8004f36:	897a      	ldrh	r2, [r7, #10]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d01c      	beq.n	8004f76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	7b5b      	ldrb	r3, [r3, #13]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d116      	bne.n	8004f76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	4413      	add	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff f864 	bl	8004028 <mem_trim>
 8004f60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <pbuf_realloc+0xca>
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <pbuf_realloc+0xfc>)
 8004f6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004f6e:	4912      	ldr	r1, [pc, #72]	; (8004fb8 <pbuf_realloc+0x10c>)
 8004f70:	480f      	ldr	r0, [pc, #60]	; (8004fb0 <pbuf_realloc+0x104>)
 8004f72:	f009 faad 	bl	800e4d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	897a      	ldrh	r2, [r7, #10]
 8004f7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	895a      	ldrh	r2, [r3, #10]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f911 	bl	80051b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e000      	b.n	8004fa0 <pbuf_realloc+0xf4>
    return;
 8004f9e:	bf00      	nop

}
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	0800fb74 	.word	0x0800fb74
 8004fac:	0800fc8c 	.word	0x0800fc8c
 8004fb0:	0800fbd4 	.word	0x0800fbd4
 8004fb4:	0800fca4 	.word	0x0800fca4
 8004fb8:	0800fcbc 	.word	0x0800fcbc

08004fbc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <pbuf_add_header_impl+0x22>
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <pbuf_add_header_impl+0xc4>)
 8004fd2:	f240 12df 	movw	r2, #479	; 0x1df
 8004fd6:	492b      	ldr	r1, [pc, #172]	; (8005084 <pbuf_add_header_impl+0xc8>)
 8004fd8:	482b      	ldr	r0, [pc, #172]	; (8005088 <pbuf_add_header_impl+0xcc>)
 8004fda:	f009 fa79 	bl	800e4d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <pbuf_add_header_impl+0x30>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d301      	bcc.n	8004ff0 <pbuf_add_header_impl+0x34>
    return 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e043      	b.n	8005078 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <pbuf_add_header_impl+0x3e>
    return 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e03e      	b.n	8005078 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	891a      	ldrh	r2, [r3, #8]
 8005002:	8a7b      	ldrh	r3, [r7, #18]
 8005004:	4413      	add	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	8a7a      	ldrh	r2, [r7, #18]
 800500a:	429a      	cmp	r2, r3
 800500c:	d901      	bls.n	8005012 <pbuf_add_header_impl+0x56>
    return 1;
 800500e:	2301      	movs	r3, #1
 8005010:	e032      	b.n	8005078 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	7b1b      	ldrb	r3, [r3, #12]
 8005016:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005018:	8a3b      	ldrh	r3, [r7, #16]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	425b      	negs	r3, r3
 800502a:	4413      	add	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3310      	adds	r3, #16
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	429a      	cmp	r2, r3
 8005036:	d20d      	bcs.n	8005054 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005038:	2301      	movs	r3, #1
 800503a:	e01d      	b.n	8005078 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	425b      	negs	r3, r3
 800504a:	4413      	add	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	e001      	b.n	8005054 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005050:	2301      	movs	r3, #1
 8005052:	e011      	b.n	8005078 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	895a      	ldrh	r2, [r3, #10]
 800505e:	8a7b      	ldrh	r3, [r7, #18]
 8005060:	4413      	add	r3, r2
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	891a      	ldrh	r2, [r3, #8]
 800506c:	8a7b      	ldrh	r3, [r7, #18]
 800506e:	4413      	add	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	811a      	strh	r2, [r3, #8]


  return 0;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	0800fb74 	.word	0x0800fb74
 8005084:	0800fcd8 	.word	0x0800fcd8
 8005088:	0800fbd4 	.word	0x0800fbd4

0800508c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	6839      	ldr	r1, [r7, #0]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff ff8e 	bl	8004fbc <pbuf_add_header_impl>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <pbuf_remove_header+0x1e>
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <pbuf_remove_header+0x94>)
 80050be:	f240 224b 	movw	r2, #587	; 0x24b
 80050c2:	4920      	ldr	r1, [pc, #128]	; (8005144 <pbuf_remove_header+0x98>)
 80050c4:	4820      	ldr	r0, [pc, #128]	; (8005148 <pbuf_remove_header+0x9c>)
 80050c6:	f009 fa03 	bl	800e4d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <pbuf_remove_header+0x2c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d301      	bcc.n	80050dc <pbuf_remove_header+0x30>
    return 1;
 80050d8:	2301      	movs	r3, #1
 80050da:	e02c      	b.n	8005136 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <pbuf_remove_header+0x3a>
    return 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e027      	b.n	8005136 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	895b      	ldrh	r3, [r3, #10]
 80050ee:	89fa      	ldrh	r2, [r7, #14]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d908      	bls.n	8005106 <pbuf_remove_header+0x5a>
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <pbuf_remove_header+0x94>)
 80050f6:	f240 2255 	movw	r2, #597	; 0x255
 80050fa:	4914      	ldr	r1, [pc, #80]	; (800514c <pbuf_remove_header+0xa0>)
 80050fc:	4812      	ldr	r0, [pc, #72]	; (8005148 <pbuf_remove_header+0x9c>)
 80050fe:	f009 f9e7 	bl	800e4d0 <iprintf>
 8005102:	2301      	movs	r3, #1
 8005104:	e017      	b.n	8005136 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	895a      	ldrh	r2, [r3, #10]
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	891a      	ldrh	r2, [r3, #8]
 800512a:	89fb      	ldrh	r3, [r7, #14]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	0800fb74 	.word	0x0800fb74
 8005144:	0800fcd8 	.word	0x0800fcd8
 8005148:	0800fbd4 	.word	0x0800fbd4
 800514c:	0800fce4 	.word	0x0800fce4

08005150 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
 800515c:	4613      	mov	r3, r2
 800515e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005164:	2b00      	cmp	r3, #0
 8005166:	da08      	bge.n	800517a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800516c:	425b      	negs	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff ff9b 	bl	80050ac <pbuf_remove_header>
 8005176:	4603      	mov	r3, r0
 8005178:	e007      	b.n	800518a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800517a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800517e:	787a      	ldrb	r2, [r7, #1]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ff1a 	bl	8004fbc <pbuf_add_header_impl>
 8005188:	4603      	mov	r3, r0
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800519e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051a2:	2201      	movs	r2, #1
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ffd2 	bl	8005150 <pbuf_header_impl>
 80051ac:	4603      	mov	r3, r0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <pbuf_free+0x22>
 80051cc:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <pbuf_free+0xf8>)
 80051ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80051d2:	4938      	ldr	r1, [pc, #224]	; (80052b4 <pbuf_free+0xfc>)
 80051d4:	4838      	ldr	r0, [pc, #224]	; (80052b8 <pbuf_free+0x100>)
 80051d6:	f009 f97b 	bl	800e4d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	e063      	b.n	80052a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80051e2:	e05c      	b.n	800529e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7b9b      	ldrb	r3, [r3, #14]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <pbuf_free+0x42>
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <pbuf_free+0xf8>)
 80051ee:	f240 22f1 	movw	r2, #753	; 0x2f1
 80051f2:	4932      	ldr	r1, [pc, #200]	; (80052bc <pbuf_free+0x104>)
 80051f4:	4830      	ldr	r0, [pc, #192]	; (80052b8 <pbuf_free+0x100>)
 80051f6:	f009 f96b 	bl	800e4d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7b9b      	ldrb	r3, [r3, #14]
 80051fe:	3b01      	subs	r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	739a      	strb	r2, [r3, #14]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7b9b      	ldrb	r3, [r3, #14]
 800520a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800520c:	7dbb      	ldrb	r3, [r7, #22]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d143      	bne.n	800529a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7b1b      	ldrb	r3, [r3, #12]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7b5b      	ldrb	r3, [r3, #13]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d011      	beq.n	8005252 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <pbuf_free+0x90>
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <pbuf_free+0xf8>)
 800523c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005240:	491f      	ldr	r1, [pc, #124]	; (80052c0 <pbuf_free+0x108>)
 8005242:	481d      	ldr	r0, [pc, #116]	; (80052b8 <pbuf_free+0x100>)
 8005244:	f009 f944 	bl	800e4d0 <iprintf>
        pc->custom_free_function(p);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
 8005250:	e01d      	b.n	800528e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d104      	bne.n	8005262 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	2008      	movs	r0, #8
 800525c:	f7ff f99a 	bl	8004594 <memp_free>
 8005260:	e015      	b.n	800528e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d104      	bne.n	8005272 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	2007      	movs	r0, #7
 800526c:	f7ff f992 	bl	8004594 <memp_free>
 8005270:	e00d      	b.n	800528e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <pbuf_free+0xc8>
          mem_free(p);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fe fe6b 	bl	8003f54 <mem_free>
 800527e:	e006      	b.n	800528e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <pbuf_free+0xf8>)
 8005282:	f240 320f 	movw	r2, #783	; 0x30f
 8005286:	490f      	ldr	r1, [pc, #60]	; (80052c4 <pbuf_free+0x10c>)
 8005288:	480b      	ldr	r0, [pc, #44]	; (80052b8 <pbuf_free+0x100>)
 800528a:	f009 f921 	bl	800e4d0 <iprintf>
        }
      }
      count++;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	3301      	adds	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	e001      	b.n	800529e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d19f      	bne.n	80051e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	0800fb74 	.word	0x0800fb74
 80052b4:	0800fcd8 	.word	0x0800fcd8
 80052b8:	0800fbd4 	.word	0x0800fbd4
 80052bc:	0800fd04 	.word	0x0800fd04
 80052c0:	0800fd1c 	.word	0x0800fd1c
 80052c4:	0800fd40 	.word	0x0800fd40

080052c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80052d4:	e005      	b.n	80052e2 <pbuf_clen+0x1a>
    ++len;
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	3301      	adds	r3, #1
 80052da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f6      	bne.n	80052d6 <pbuf_clen+0xe>
  }
  return len;
 80052e8:	89fb      	ldrh	r3, [r7, #14]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d010      	beq.n	8005328 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7b9b      	ldrb	r3, [r3, #14]
 800530a:	3301      	adds	r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7b9b      	ldrb	r3, [r3, #14]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <pbuf_ref+0x30>
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <pbuf_ref+0x38>)
 800531c:	f240 3242 	movw	r2, #834	; 0x342
 8005320:	4904      	ldr	r1, [pc, #16]	; (8005334 <pbuf_ref+0x3c>)
 8005322:	4805      	ldr	r0, [pc, #20]	; (8005338 <pbuf_ref+0x40>)
 8005324:	f009 f8d4 	bl	800e4d0 <iprintf>
  }
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	0800fb74 	.word	0x0800fb74
 8005334:	0800fd54 	.word	0x0800fd54
 8005338:	0800fbd4 	.word	0x0800fbd4

0800533c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <pbuf_cat+0x16>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <pbuf_cat+0x26>
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <pbuf_cat+0x98>)
 8005354:	f240 3259 	movw	r2, #857	; 0x359
 8005358:	491f      	ldr	r1, [pc, #124]	; (80053d8 <pbuf_cat+0x9c>)
 800535a:	4820      	ldr	r0, [pc, #128]	; (80053dc <pbuf_cat+0xa0>)
 800535c:	f009 f8b8 	bl	800e4d0 <iprintf>
 8005360:	e034      	b.n	80053cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e00a      	b.n	800537e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	891a      	ldrh	r2, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	891b      	ldrh	r3, [r3, #8]
 8005370:	4413      	add	r3, r2
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	891a      	ldrh	r2, [r3, #8]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	895b      	ldrh	r3, [r3, #10]
 800538e:	429a      	cmp	r2, r3
 8005390:	d006      	beq.n	80053a0 <pbuf_cat+0x64>
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <pbuf_cat+0x98>)
 8005394:	f240 3262 	movw	r2, #866	; 0x362
 8005398:	4911      	ldr	r1, [pc, #68]	; (80053e0 <pbuf_cat+0xa4>)
 800539a:	4810      	ldr	r0, [pc, #64]	; (80053dc <pbuf_cat+0xa0>)
 800539c:	f009 f898 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <pbuf_cat+0x7a>
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <pbuf_cat+0x98>)
 80053aa:	f240 3263 	movw	r2, #867	; 0x363
 80053ae:	490d      	ldr	r1, [pc, #52]	; (80053e4 <pbuf_cat+0xa8>)
 80053b0:	480a      	ldr	r0, [pc, #40]	; (80053dc <pbuf_cat+0xa0>)
 80053b2:	f009 f88d 	bl	800e4d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	891a      	ldrh	r2, [r3, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	891b      	ldrh	r3, [r3, #8]
 80053be:	4413      	add	r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	0800fb74 	.word	0x0800fb74
 80053d8:	0800fd68 	.word	0x0800fd68
 80053dc:	0800fbd4 	.word	0x0800fbd4
 80053e0:	0800fda0 	.word	0x0800fda0
 80053e4:	0800fdd0 	.word	0x0800fdd0

080053e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ffa1 	bl	800533c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80053fa:	6838      	ldr	r0, [r7, #0]
 80053fc:	f7ff ff7c 	bl	80052f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <pbuf_copy+0x2a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <pbuf_copy+0x2a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	891a      	ldrh	r2, [r3, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	891b      	ldrh	r3, [r3, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	d209      	bcs.n	8005446 <pbuf_copy+0x3e>
 8005432:	4b57      	ldr	r3, [pc, #348]	; (8005590 <pbuf_copy+0x188>)
 8005434:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005438:	4956      	ldr	r1, [pc, #344]	; (8005594 <pbuf_copy+0x18c>)
 800543a:	4857      	ldr	r0, [pc, #348]	; (8005598 <pbuf_copy+0x190>)
 800543c:	f009 f848 	bl	800e4d0 <iprintf>
 8005440:	f06f 030f 	mvn.w	r3, #15
 8005444:	e09f      	b.n	8005586 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	895b      	ldrh	r3, [r3, #10]
 800544a:	461a      	mov	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	895b      	ldrh	r3, [r3, #10]
 8005454:	4619      	mov	r1, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1acb      	subs	r3, r1, r3
 800545a:	429a      	cmp	r2, r3
 800545c:	d306      	bcc.n	800546c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	895b      	ldrh	r3, [r3, #10]
 8005462:	461a      	mov	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e005      	b.n	8005478 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	895b      	ldrh	r3, [r3, #10]
 8005470:	461a      	mov	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	18d0      	adds	r0, r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4619      	mov	r1, r3
 800548c:	f009 f80a 	bl	800e4a4 <memcpy>
    offset_to += len;
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	895b      	ldrh	r3, [r3, #10]
 80054a4:	461a      	mov	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d906      	bls.n	80054ba <pbuf_copy+0xb2>
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <pbuf_copy+0x188>)
 80054ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 80054b2:	493a      	ldr	r1, [pc, #232]	; (800559c <pbuf_copy+0x194>)
 80054b4:	4838      	ldr	r0, [pc, #224]	; (8005598 <pbuf_copy+0x190>)
 80054b6:	f009 f80b 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	895b      	ldrh	r3, [r3, #10]
 80054be:	461a      	mov	r2, r3
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d906      	bls.n	80054d4 <pbuf_copy+0xcc>
 80054c6:	4b32      	ldr	r3, [pc, #200]	; (8005590 <pbuf_copy+0x188>)
 80054c8:	f240 32da 	movw	r2, #986	; 0x3da
 80054cc:	4934      	ldr	r1, [pc, #208]	; (80055a0 <pbuf_copy+0x198>)
 80054ce:	4832      	ldr	r0, [pc, #200]	; (8005598 <pbuf_copy+0x190>)
 80054d0:	f008 fffe 	bl	800e4d0 <iprintf>
    if (offset_from >= p_from->len) {
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	895b      	ldrh	r3, [r3, #10]
 80054d8:	461a      	mov	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4293      	cmp	r3, r2
 80054de:	d304      	bcc.n	80054ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	895b      	ldrh	r3, [r3, #10]
 80054ee:	461a      	mov	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d114      	bne.n	8005520 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <pbuf_copy+0x118>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <pbuf_copy+0x118>
 800550c:	4b20      	ldr	r3, [pc, #128]	; (8005590 <pbuf_copy+0x188>)
 800550e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005512:	4924      	ldr	r1, [pc, #144]	; (80055a4 <pbuf_copy+0x19c>)
 8005514:	4820      	ldr	r0, [pc, #128]	; (8005598 <pbuf_copy+0x190>)
 8005516:	f008 ffdb 	bl	800e4d0 <iprintf>
 800551a:	f06f 030f 	mvn.w	r3, #15
 800551e:	e032      	b.n	8005586 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <pbuf_copy+0x146>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	895a      	ldrh	r2, [r3, #10]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	891b      	ldrh	r3, [r3, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d10d      	bne.n	800554e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <pbuf_copy+0x146>
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <pbuf_copy+0x188>)
 800553c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005540:	4919      	ldr	r1, [pc, #100]	; (80055a8 <pbuf_copy+0x1a0>)
 8005542:	4815      	ldr	r0, [pc, #84]	; (8005598 <pbuf_copy+0x190>)
 8005544:	f008 ffc4 	bl	800e4d0 <iprintf>
 8005548:	f06f 0305 	mvn.w	r3, #5
 800554c:	e01b      	b.n	8005586 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <pbuf_copy+0x174>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	895a      	ldrh	r2, [r3, #10]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	891b      	ldrh	r3, [r3, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d10d      	bne.n	800557c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <pbuf_copy+0x174>
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <pbuf_copy+0x188>)
 800556a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800556e:	490e      	ldr	r1, [pc, #56]	; (80055a8 <pbuf_copy+0x1a0>)
 8005570:	4809      	ldr	r0, [pc, #36]	; (8005598 <pbuf_copy+0x190>)
 8005572:	f008 ffad 	bl	800e4d0 <iprintf>
 8005576:	f06f 0305 	mvn.w	r3, #5
 800557a:	e004      	b.n	8005586 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f47f af61 	bne.w	8005446 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	0800fb74 	.word	0x0800fb74
 8005594:	0800fe1c 	.word	0x0800fe1c
 8005598:	0800fbd4 	.word	0x0800fbd4
 800559c:	0800fe4c 	.word	0x0800fe4c
 80055a0:	0800fe64 	.word	0x0800fe64
 80055a4:	0800fe80 	.word	0x0800fe80
 80055a8:	0800fe90 	.word	0x0800fe90

080055ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	460b      	mov	r3, r1
 80055bc:	80fb      	strh	r3, [r7, #6]
 80055be:	4613      	mov	r3, r2
 80055c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <pbuf_copy_partial+0x36>
 80055d0:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <pbuf_copy_partial+0xd4>)
 80055d2:	f240 420a 	movw	r2, #1034	; 0x40a
 80055d6:	492b      	ldr	r1, [pc, #172]	; (8005684 <pbuf_copy_partial+0xd8>)
 80055d8:	482b      	ldr	r0, [pc, #172]	; (8005688 <pbuf_copy_partial+0xdc>)
 80055da:	f008 ff79 	bl	800e4d0 <iprintf>
 80055de:	2300      	movs	r3, #0
 80055e0:	e04a      	b.n	8005678 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <pbuf_copy_partial+0x4e>
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <pbuf_copy_partial+0xd4>)
 80055ea:	f240 420b 	movw	r2, #1035	; 0x40b
 80055ee:	4927      	ldr	r1, [pc, #156]	; (800568c <pbuf_copy_partial+0xe0>)
 80055f0:	4825      	ldr	r0, [pc, #148]	; (8005688 <pbuf_copy_partial+0xdc>)
 80055f2:	f008 ff6d 	bl	800e4d0 <iprintf>
 80055f6:	2300      	movs	r3, #0
 80055f8:	e03e      	b.n	8005678 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e034      	b.n	800566a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005600:	88bb      	ldrh	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <pbuf_copy_partial+0x70>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	895b      	ldrh	r3, [r3, #10]
 800560a:	88ba      	ldrh	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d305      	bcc.n	800561c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	895b      	ldrh	r3, [r3, #10]
 8005614:	88ba      	ldrh	r2, [r7, #4]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	80bb      	strh	r3, [r7, #4]
 800561a:	e023      	b.n	8005664 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	895a      	ldrh	r2, [r3, #10]
 8005620:	88bb      	ldrh	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005626:	8b3a      	ldrh	r2, [r7, #24]
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	429a      	cmp	r2, r3
 800562c:	d901      	bls.n	8005632 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005632:	8b7b      	ldrh	r3, [r7, #26]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	18d0      	adds	r0, r2, r3
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	88bb      	ldrh	r3, [r7, #4]
 800563e:	4413      	add	r3, r2
 8005640:	8b3a      	ldrh	r2, [r7, #24]
 8005642:	4619      	mov	r1, r3
 8005644:	f008 ff2e 	bl	800e4a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005648:	8afa      	ldrh	r2, [r7, #22]
 800564a:	8b3b      	ldrh	r3, [r7, #24]
 800564c:	4413      	add	r3, r2
 800564e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005650:	8b7a      	ldrh	r2, [r7, #26]
 8005652:	8b3b      	ldrh	r3, [r7, #24]
 8005654:	4413      	add	r3, r2
 8005656:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	8b3b      	ldrh	r3, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <pbuf_copy_partial+0xca>
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1c4      	bne.n	8005600 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005676:	8afb      	ldrh	r3, [r7, #22]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	0800fb74 	.word	0x0800fb74
 8005684:	0800febc 	.word	0x0800febc
 8005688:	0800fbd4 	.word	0x0800fbd4
 800568c:	0800fedc 	.word	0x0800fedc

08005690 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	603a      	str	r2, [r7, #0]
 800569a:	71fb      	strb	r3, [r7, #7]
 800569c:	460b      	mov	r3, r1
 800569e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	8919      	ldrh	r1, [r3, #8]
 80056a4:	88ba      	ldrh	r2, [r7, #4]
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff faa1 	bl	8004bf0 <pbuf_alloc>
 80056ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <pbuf_clone+0x2a>
    return NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e011      	b.n	80056de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fea3 	bl	8005408 <pbuf_copy>
 80056c2:	4603      	mov	r3, r0
 80056c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80056c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <pbuf_clone+0x4c>
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <pbuf_clone+0x58>)
 80056d0:	f240 5224 	movw	r2, #1316	; 0x524
 80056d4:	4905      	ldr	r1, [pc, #20]	; (80056ec <pbuf_clone+0x5c>)
 80056d6:	4806      	ldr	r0, [pc, #24]	; (80056f0 <pbuf_clone+0x60>)
 80056d8:	f008 fefa 	bl	800e4d0 <iprintf>
  return q;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	0800fb74 	.word	0x0800fb74
 80056ec:	0800ffe8 	.word	0x0800ffe8
 80056f0:	0800fbd4 	.word	0x0800fbd4

080056f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80056f8:	f008 ff02 	bl	800e500 <rand>
 80056fc:	4603      	mov	r3, r0
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005704:	b29b      	uxth	r3, r3
 8005706:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800570a:	b29a      	uxth	r2, r3
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <tcp_init+0x20>)
 800570e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005710:	bf00      	nop
 8005712:	bd80      	pop	{r7, pc}
 8005714:	2000000a 	.word	0x2000000a

08005718 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	7d1b      	ldrb	r3, [r3, #20]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d105      	bne.n	8005734 <tcp_free+0x1c>
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <tcp_free+0x2c>)
 800572a:	22d4      	movs	r2, #212	; 0xd4
 800572c:	4906      	ldr	r1, [pc, #24]	; (8005748 <tcp_free+0x30>)
 800572e:	4807      	ldr	r0, [pc, #28]	; (800574c <tcp_free+0x34>)
 8005730:	f008 fece 	bl	800e4d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	2001      	movs	r0, #1
 8005738:	f7fe ff2c 	bl	8004594 <memp_free>
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08010074 	.word	0x08010074
 8005748:	080100a4 	.word	0x080100a4
 800574c:	080100b8 	.word	0x080100b8

08005750 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7d1b      	ldrb	r3, [r3, #20]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <tcp_free_listen+0x1c>
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <tcp_free_listen+0x2c>)
 8005762:	22df      	movs	r2, #223	; 0xdf
 8005764:	4906      	ldr	r1, [pc, #24]	; (8005780 <tcp_free_listen+0x30>)
 8005766:	4807      	ldr	r0, [pc, #28]	; (8005784 <tcp_free_listen+0x34>)
 8005768:	f008 feb2 	bl	800e4d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	2002      	movs	r0, #2
 8005770:	f7fe ff10 	bl	8004594 <memp_free>
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	08010074 	.word	0x08010074
 8005780:	080100e0 	.word	0x080100e0
 8005784:	080100b8 	.word	0x080100b8

08005788 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800578c:	f001 f85c 	bl	8006848 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <tcp_tmr+0x28>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <tcp_tmr+0x28>)
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <tcp_tmr+0x28>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80057a8:	f000 fd0e 	bl	80061c8 <tcp_slowtmr>
  }
}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200000c9 	.word	0x200000c9

080057b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <tcp_remove_listener+0x1c>
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <tcp_remove_listener+0x48>)
 80057c6:	22ff      	movs	r2, #255	; 0xff
 80057c8:	490d      	ldr	r1, [pc, #52]	; (8005800 <tcp_remove_listener+0x4c>)
 80057ca:	480e      	ldr	r0, [pc, #56]	; (8005804 <tcp_remove_listener+0x50>)
 80057cc:	f008 fe80 	bl	800e4d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e00a      	b.n	80057ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d102      	bne.n	80057e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <tcp_remove_listener+0x22>
    }
  }
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08010074 	.word	0x08010074
 8005800:	080100fc 	.word	0x080100fc
 8005804:	080100b8 	.word	0x080100b8

08005808 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <tcp_listen_closed+0x1c>
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <tcp_listen_closed+0x60>)
 8005818:	f240 1211 	movw	r2, #273	; 0x111
 800581c:	4913      	ldr	r1, [pc, #76]	; (800586c <tcp_listen_closed+0x64>)
 800581e:	4814      	ldr	r0, [pc, #80]	; (8005870 <tcp_listen_closed+0x68>)
 8005820:	f008 fe56 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7d1b      	ldrb	r3, [r3, #20]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d006      	beq.n	800583a <tcp_listen_closed+0x32>
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <tcp_listen_closed+0x60>)
 800582e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005832:	4910      	ldr	r1, [pc, #64]	; (8005874 <tcp_listen_closed+0x6c>)
 8005834:	480e      	ldr	r0, [pc, #56]	; (8005870 <tcp_listen_closed+0x68>)
 8005836:	f008 fe4b 	bl	800e4d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800583a:	2301      	movs	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e00b      	b.n	8005858 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <tcp_listen_closed+0x70>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ffb1 	bl	80057b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d9f0      	bls.n	8005840 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08010074 	.word	0x08010074
 800586c:	08010124 	.word	0x08010124
 8005870:	080100b8 	.word	0x080100b8
 8005874:	08010130 	.word	0x08010130
 8005878:	08012040 	.word	0x08012040

0800587c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800587c:	b5b0      	push	{r4, r5, r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af04      	add	r7, sp, #16
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <tcp_close_shutdown+0x20>
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <tcp_close_shutdown+0x1a0>)
 8005890:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005894:	4962      	ldr	r1, [pc, #392]	; (8005a20 <tcp_close_shutdown+0x1a4>)
 8005896:	4863      	ldr	r0, [pc, #396]	; (8005a24 <tcp_close_shutdown+0x1a8>)
 8005898:	f008 fe1a 	bl	800e4d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d066      	beq.n	8005970 <tcp_close_shutdown+0xf4>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7d1b      	ldrb	r3, [r3, #20]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d003      	beq.n	80058b2 <tcp_close_shutdown+0x36>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7d1b      	ldrb	r3, [r3, #20]
 80058ae:	2b07      	cmp	r3, #7
 80058b0:	d15e      	bne.n	8005970 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <tcp_close_shutdown+0x48>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80058c2:	d055      	beq.n	8005970 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8b5b      	ldrh	r3, [r3, #26]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <tcp_close_shutdown+0x62>
 80058d0:	4b52      	ldr	r3, [pc, #328]	; (8005a1c <tcp_close_shutdown+0x1a0>)
 80058d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80058d6:	4954      	ldr	r1, [pc, #336]	; (8005a28 <tcp_close_shutdown+0x1ac>)
 80058d8:	4852      	ldr	r0, [pc, #328]	; (8005a24 <tcp_close_shutdown+0x1a8>)
 80058da:	f008 fdf9 	bl	800e4d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80058e6:	687d      	ldr	r5, [r7, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	8ad2      	ldrh	r2, [r2, #22]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	8b09      	ldrh	r1, [r1, #24]
 80058f4:	9102      	str	r1, [sp, #8]
 80058f6:	9201      	str	r2, [sp, #4]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	462b      	mov	r3, r5
 80058fc:	4622      	mov	r2, r4
 80058fe:	4601      	mov	r1, r0
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f005 fd85 	bl	800b410 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fb66 	bl	8006fd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800590c:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <tcp_close_shutdown+0x1b0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d105      	bne.n	8005922 <tcp_close_shutdown+0xa6>
 8005916:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <tcp_close_shutdown+0x1b0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <tcp_close_shutdown+0x1b0>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e013      	b.n	800594a <tcp_close_shutdown+0xce>
 8005922:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <tcp_close_shutdown+0x1b0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e00c      	b.n	8005944 <tcp_close_shutdown+0xc8>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d104      	bne.n	800593e <tcp_close_shutdown+0xc2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	60da      	str	r2, [r3, #12]
 800593c:	e005      	b.n	800594a <tcp_close_shutdown+0xce>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ef      	bne.n	800592a <tcp_close_shutdown+0xae>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	60da      	str	r2, [r3, #12]
 8005950:	4b37      	ldr	r3, [pc, #220]	; (8005a30 <tcp_close_shutdown+0x1b4>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <tcp_close_shutdown+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d102      	bne.n	8005966 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005960:	f003 fffa 	bl	8009958 <tcp_trigger_input_pcb_close>
 8005964:	e002      	b.n	800596c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff fed6 	bl	8005718 <tcp_free>
      }
      return ERR_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e050      	b.n	8005a12 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7d1b      	ldrb	r3, [r3, #20]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d03b      	beq.n	80059f0 <tcp_close_shutdown+0x174>
 8005978:	2b02      	cmp	r3, #2
 800597a:	dc44      	bgt.n	8005a06 <tcp_close_shutdown+0x18a>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <tcp_close_shutdown+0x10a>
 8005980:	2b01      	cmp	r3, #1
 8005982:	d02a      	beq.n	80059da <tcp_close_shutdown+0x15e>
 8005984:	e03f      	b.n	8005a06 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8adb      	ldrh	r3, [r3, #22]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d021      	beq.n	80059d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800598e:	4b2a      	ldr	r3, [pc, #168]	; (8005a38 <tcp_close_shutdown+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d105      	bne.n	80059a4 <tcp_close_shutdown+0x128>
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <tcp_close_shutdown+0x1bc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <tcp_close_shutdown+0x1bc>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e013      	b.n	80059cc <tcp_close_shutdown+0x150>
 80059a4:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <tcp_close_shutdown+0x1bc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	e00c      	b.n	80059c6 <tcp_close_shutdown+0x14a>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d104      	bne.n	80059c0 <tcp_close_shutdown+0x144>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	e005      	b.n	80059cc <tcp_close_shutdown+0x150>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ef      	bne.n	80059ac <tcp_close_shutdown+0x130>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fea0 	bl	8005718 <tcp_free>
      break;
 80059d8:	e01a      	b.n	8005a10 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff ff14 	bl	8005808 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4816      	ldr	r0, [pc, #88]	; (8005a3c <tcp_close_shutdown+0x1c0>)
 80059e4:	f001 fb48 	bl	8007078 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff feb1 	bl	8005750 <tcp_free_listen>
      break;
 80059ee:	e00f      	b.n	8005a10 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	480e      	ldr	r0, [pc, #56]	; (8005a2c <tcp_close_shutdown+0x1b0>)
 80059f4:	f001 fb40 	bl	8007078 <tcp_pcb_remove>
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <tcp_close_shutdown+0x1b4>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fe8a 	bl	8005718 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005a04:	e004      	b.n	8005a10 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f81a 	bl	8005a40 <tcp_close_shutdown_fin>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	e000      	b.n	8005a12 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08010074 	.word	0x08010074
 8005a20:	08010148 	.word	0x08010148
 8005a24:	080100b8 	.word	0x080100b8
 8005a28:	08010168 	.word	0x08010168
 8005a2c:	20008a5c 	.word	0x20008a5c
 8005a30:	20008a58 	.word	0x20008a58
 8005a34:	20008a70 	.word	0x20008a70
 8005a38:	20008a68 	.word	0x20008a68
 8005a3c:	20008a64 	.word	0x20008a64

08005a40 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <tcp_close_shutdown_fin+0x1c>
 8005a4e:	4b2e      	ldr	r3, [pc, #184]	; (8005b08 <tcp_close_shutdown_fin+0xc8>)
 8005a50:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005a54:	492d      	ldr	r1, [pc, #180]	; (8005b0c <tcp_close_shutdown_fin+0xcc>)
 8005a56:	482e      	ldr	r0, [pc, #184]	; (8005b10 <tcp_close_shutdown_fin+0xd0>)
 8005a58:	f008 fd3a 	bl	800e4d0 <iprintf>

  switch (pcb->state) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7d1b      	ldrb	r3, [r3, #20]
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	d020      	beq.n	8005aa6 <tcp_close_shutdown_fin+0x66>
 8005a64:	2b07      	cmp	r3, #7
 8005a66:	dc2b      	bgt.n	8005ac0 <tcp_close_shutdown_fin+0x80>
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d002      	beq.n	8005a72 <tcp_close_shutdown_fin+0x32>
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d00d      	beq.n	8005a8c <tcp_close_shutdown_fin+0x4c>
 8005a70:	e026      	b.n	8005ac0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f004 fdda 	bl	800a62c <tcp_send_fin>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11f      	bne.n	8005ac4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2205      	movs	r2, #5
 8005a88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005a8a:	e01b      	b.n	8005ac4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f004 fdcd 	bl	800a62c <tcp_send_fin>
 8005a92:	4603      	mov	r3, r0
 8005a94:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005aa4:	e010      	b.n	8005ac8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f004 fdc0 	bl	800a62c <tcp_send_fin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2209      	movs	r2, #9
 8005abc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005abe:	e005      	b.n	8005acc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e01c      	b.n	8005afe <tcp_close_shutdown_fin+0xbe>
      break;
 8005ac4:	bf00      	nop
 8005ac6:	e002      	b.n	8005ace <tcp_close_shutdown_fin+0x8e>
      break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <tcp_close_shutdown_fin+0x8e>
      break;
 8005acc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f004 fee6 	bl	800a8a8 <tcp_output>
 8005adc:	e00d      	b.n	8005afa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d108      	bne.n	8005afa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8b5b      	ldrh	r3, [r3, #26]
 8005aec:	f043 0308 	orr.w	r3, r3, #8
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e001      	b.n	8005afe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	08010074 	.word	0x08010074
 8005b0c:	08010124 	.word	0x08010124
 8005b10:	080100b8 	.word	0x080100b8

08005b14 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <tcp_close+0x22>
 8005b22:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <tcp_close+0x4c>)
 8005b24:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005b28:	490e      	ldr	r1, [pc, #56]	; (8005b64 <tcp_close+0x50>)
 8005b2a:	480f      	ldr	r0, [pc, #60]	; (8005b68 <tcp_close+0x54>)
 8005b2c:	f008 fcd0 	bl	800e4d0 <iprintf>
 8005b30:	f06f 030f 	mvn.w	r3, #15
 8005b34:	e00f      	b.n	8005b56 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7d1b      	ldrb	r3, [r3, #20]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d006      	beq.n	8005b4c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8b5b      	ldrh	r3, [r3, #26]
 8005b42:	f043 0310 	orr.w	r3, r3, #16
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fe94 	bl	800587c <tcp_close_shutdown>
 8005b54:	4603      	mov	r3, r0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	08010074 	.word	0x08010074
 8005b64:	08010184 	.word	0x08010184
 8005b68:	080100b8 	.word	0x080100b8

08005b6c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af04      	add	r7, sp, #16
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <tcp_abandon+0x20>
 8005b7c:	4b52      	ldr	r3, [pc, #328]	; (8005cc8 <tcp_abandon+0x15c>)
 8005b7e:	f240 223d 	movw	r2, #573	; 0x23d
 8005b82:	4952      	ldr	r1, [pc, #328]	; (8005ccc <tcp_abandon+0x160>)
 8005b84:	4852      	ldr	r0, [pc, #328]	; (8005cd0 <tcp_abandon+0x164>)
 8005b86:	f008 fca3 	bl	800e4d0 <iprintf>
 8005b8a:	e099      	b.n	8005cc0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	7d1b      	ldrb	r3, [r3, #20]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d106      	bne.n	8005ba2 <tcp_abandon+0x36>
 8005b94:	4b4c      	ldr	r3, [pc, #304]	; (8005cc8 <tcp_abandon+0x15c>)
 8005b96:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005b9a:	494e      	ldr	r1, [pc, #312]	; (8005cd4 <tcp_abandon+0x168>)
 8005b9c:	484c      	ldr	r0, [pc, #304]	; (8005cd0 <tcp_abandon+0x164>)
 8005b9e:	f008 fc97 	bl	800e4d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	7d1b      	ldrb	r3, [r3, #20]
 8005ba6:	2b0a      	cmp	r3, #10
 8005ba8:	d107      	bne.n	8005bba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	484a      	ldr	r0, [pc, #296]	; (8005cd8 <tcp_abandon+0x16c>)
 8005bae:	f001 fa63 	bl	8007078 <tcp_pcb_remove>
    tcp_free(pcb);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fdb0 	bl	8005718 <tcp_free>
 8005bb8:	e082      	b.n	8005cc0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	7d1b      	ldrb	r3, [r3, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d126      	bne.n	8005c32 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8adb      	ldrh	r3, [r3, #22]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02e      	beq.n	8005c4a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005bec:	4b3b      	ldr	r3, [pc, #236]	; (8005cdc <tcp_abandon+0x170>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d105      	bne.n	8005c02 <tcp_abandon+0x96>
 8005bf6:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <tcp_abandon+0x170>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a37      	ldr	r2, [pc, #220]	; (8005cdc <tcp_abandon+0x170>)
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e013      	b.n	8005c2a <tcp_abandon+0xbe>
 8005c02:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <tcp_abandon+0x170>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e00c      	b.n	8005c24 <tcp_abandon+0xb8>
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d104      	bne.n	8005c1e <tcp_abandon+0xb2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e005      	b.n	8005c2a <tcp_abandon+0xbe>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <tcp_abandon+0x9e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e00b      	b.n	8005c4a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8adb      	ldrh	r3, [r3, #22]
 8005c3a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4828      	ldr	r0, [pc, #160]	; (8005ce0 <tcp_abandon+0x174>)
 8005c40:	f001 fa1a 	bl	8007078 <tcp_pcb_remove>
 8005c44:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <tcp_abandon+0x178>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fed6 	bl	8006a08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fecd 	bl	8006a08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fec4 	bl	8006a08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00e      	beq.n	8005ca4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	8b12      	ldrh	r2, [r2, #24]
 8005c90:	9202      	str	r2, [sp, #8]
 8005c92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c94:	9201      	str	r2, [sp, #4]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f005 fbb6 	bl	800b410 <tcp_rst>
    }
    last_state = pcb->state;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7d1b      	ldrb	r3, [r3, #20]
 8005ca8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fd34 	bl	8005718 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <tcp_abandon+0x154>
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f06f 010c 	mvn.w	r1, #12
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	4798      	blx	r3
  }
}
 8005cc0:	3728      	adds	r7, #40	; 0x28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08010074 	.word	0x08010074
 8005ccc:	080101b8 	.word	0x080101b8
 8005cd0:	080100b8 	.word	0x080100b8
 8005cd4:	080101d4 	.word	0x080101d4
 8005cd8:	20008a6c 	.word	0x20008a6c
 8005cdc:	20008a68 	.word	0x20008a68
 8005ce0:	20008a5c 	.word	0x20008a5c
 8005ce4:	20008a58 	.word	0x20008a58

08005ce8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff3a 	bl	8005b6c <tcp_abandon>
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005d0e:	2304      	movs	r3, #4
 8005d10:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005d18:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <tcp_bind+0x114>)
 8005d1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <tcp_bind+0x36>
 8005d22:	4b3d      	ldr	r3, [pc, #244]	; (8005e18 <tcp_bind+0x118>)
 8005d24:	f240 22a9 	movw	r2, #681	; 0x2a9
 8005d28:	493c      	ldr	r1, [pc, #240]	; (8005e1c <tcp_bind+0x11c>)
 8005d2a:	483d      	ldr	r0, [pc, #244]	; (8005e20 <tcp_bind+0x120>)
 8005d2c:	f008 fbd0 	bl	800e4d0 <iprintf>
 8005d30:	f06f 030f 	mvn.w	r3, #15
 8005d34:	e06a      	b.n	8005e0c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	7d1b      	ldrb	r3, [r3, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <tcp_bind+0x52>
 8005d3e:	4b36      	ldr	r3, [pc, #216]	; (8005e18 <tcp_bind+0x118>)
 8005d40:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005d44:	4937      	ldr	r1, [pc, #220]	; (8005e24 <tcp_bind+0x124>)
 8005d46:	4836      	ldr	r0, [pc, #216]	; (8005e20 <tcp_bind+0x120>)
 8005d48:	f008 fbc2 	bl	800e4d0 <iprintf>
 8005d4c:	f06f 0305 	mvn.w	r3, #5
 8005d50:	e05c      	b.n	8005e0c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <tcp_bind+0x6c>
    port = tcp_new_port();
 8005d58:	f000 f9f0 	bl	800613c <tcp_new_port>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d135      	bne.n	8005dd2 <tcp_bind+0xd2>
      return ERR_BUF;
 8005d66:	f06f 0301 	mvn.w	r3, #1
 8005d6a:	e04f      	b.n	8005e0c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	e02b      	b.n	8005dca <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005d72:	4a2d      	ldr	r2, [pc, #180]	; (8005e28 <tcp_bind+0x128>)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	e01e      	b.n	8005dbe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	8adb      	ldrh	r3, [r3, #22]
 8005d84:	88fa      	ldrh	r2, [r7, #6]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d116      	bne.n	8005db8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005d8a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <tcp_bind+0xb2>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d102      	bne.n	8005db8 <tcp_bind+0xb8>
              return ERR_USE;
 8005db2:	f06f 0307 	mvn.w	r3, #7
 8005db6:	e029      	b.n	8005e0c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1dd      	bne.n	8005d80 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	dbcf      	blt.n	8005d72 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <tcp_bind+0xf2>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <tcp_bind+0xec>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	e000      	b.n	8005dee <tcp_bind+0xee>
 8005dec:	2300      	movs	r3, #0
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	88fa      	ldrh	r2, [r7, #6]
 8005df6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <tcp_bind+0x12c>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <tcp_bind+0x12c>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f005 fcc5 	bl	800b794 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08012068 	.word	0x08012068
 8005e18:	08010074 	.word	0x08010074
 8005e1c:	08010208 	.word	0x08010208
 8005e20:	080100b8 	.word	0x080100b8
 8005e24:	08010220 	.word	0x08010220
 8005e28:	08012040 	.word	0x08012040
 8005e2c:	20008a68 	.word	0x20008a68

08005e30 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <tcp_accept_null+0x22>
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <tcp_accept_null+0x34>)
 8005e46:	f240 320f 	movw	r2, #783	; 0x30f
 8005e4a:	4907      	ldr	r1, [pc, #28]	; (8005e68 <tcp_accept_null+0x38>)
 8005e4c:	4807      	ldr	r0, [pc, #28]	; (8005e6c <tcp_accept_null+0x3c>)
 8005e4e:	f008 fb3f 	bl	800e4d0 <iprintf>

  tcp_abort(pcb);
 8005e52:	68b8      	ldr	r0, [r7, #8]
 8005e54:	f7ff ff48 	bl	8005ce8 <tcp_abort>

  return ERR_ABRT;
 8005e58:	f06f 030c 	mvn.w	r3, #12
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	08010074 	.word	0x08010074
 8005e68:	08010248 	.word	0x08010248
 8005e6c:	080100b8 	.word	0x080100b8

08005e70 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f806 	bl	8005e94 <tcp_listen_with_backlog_and_err>
 8005e88:	4603      	mov	r3, r0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <tcp_listen_with_backlog_and_err+0x2c>
 8005eac:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <tcp_listen_with_backlog_and_err+0x138>)
 8005eae:	f240 3259 	movw	r2, #857	; 0x359
 8005eb2:	4947      	ldr	r1, [pc, #284]	; (8005fd0 <tcp_listen_with_backlog_and_err+0x13c>)
 8005eb4:	4847      	ldr	r0, [pc, #284]	; (8005fd4 <tcp_listen_with_backlog_and_err+0x140>)
 8005eb6:	f008 fb0b 	bl	800e4d0 <iprintf>
 8005eba:	23f0      	movs	r3, #240	; 0xf0
 8005ebc:	76fb      	strb	r3, [r7, #27]
 8005ebe:	e079      	b.n	8005fb4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7d1b      	ldrb	r3, [r3, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <tcp_listen_with_backlog_and_err+0x48>
 8005ec8:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <tcp_listen_with_backlog_and_err+0x138>)
 8005eca:	f240 325a 	movw	r2, #858	; 0x35a
 8005ece:	4942      	ldr	r1, [pc, #264]	; (8005fd8 <tcp_listen_with_backlog_and_err+0x144>)
 8005ed0:	4840      	ldr	r0, [pc, #256]	; (8005fd4 <tcp_listen_with_backlog_and_err+0x140>)
 8005ed2:	f008 fafd 	bl	800e4d0 <iprintf>
 8005ed6:	23f1      	movs	r3, #241	; 0xf1
 8005ed8:	76fb      	strb	r3, [r7, #27]
 8005eda:	e06b      	b.n	8005fb4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	7d1b      	ldrb	r3, [r3, #20]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d104      	bne.n	8005eee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005ee8:	23f7      	movs	r3, #247	; 0xf7
 8005eea:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005eec:	e062      	b.n	8005fb4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005eee:	2002      	movs	r0, #2
 8005ef0:	f7fe fb04 	bl	80044fc <memp_malloc>
 8005ef4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005efc:	23ff      	movs	r3, #255	; 0xff
 8005efe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005f00:	e058      	b.n	8005fb4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8ada      	ldrh	r2, [r3, #22]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2201      	movs	r2, #1
 8005f16:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7d5a      	ldrb	r2, [r3, #21]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	7a5a      	ldrb	r2, [r3, #9]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7ada      	ldrb	r2, [r3, #11]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	7a9a      	ldrb	r2, [r3, #10]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8adb      	ldrh	r3, [r3, #22]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d021      	beq.n	8005f92 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <tcp_listen_with_backlog_and_err+0x148>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d105      	bne.n	8005f64 <tcp_listen_with_backlog_and_err+0xd0>
 8005f58:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <tcp_listen_with_backlog_and_err+0x148>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <tcp_listen_with_backlog_and_err+0x148>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e013      	b.n	8005f8c <tcp_listen_with_backlog_and_err+0xf8>
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <tcp_listen_with_backlog_and_err+0x148>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e00c      	b.n	8005f86 <tcp_listen_with_backlog_and_err+0xf2>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d104      	bne.n	8005f80 <tcp_listen_with_backlog_and_err+0xec>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	e005      	b.n	8005f8c <tcp_listen_with_backlog_and_err+0xf8>
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ef      	bne.n	8005f6c <tcp_listen_with_backlog_and_err+0xd8>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fbc0 	bl	8005718 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <tcp_listen_with_backlog_and_err+0x14c>)
 8005f9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <tcp_listen_with_backlog_and_err+0x150>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <tcp_listen_with_backlog_and_err+0x150>)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	f005 fbf2 	bl	800b794 <tcp_timer_needed>
  res = ERR_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7efa      	ldrb	r2, [r7, #27]
 8005fbe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08010074 	.word	0x08010074
 8005fd0:	08010268 	.word	0x08010268
 8005fd4:	080100b8 	.word	0x080100b8
 8005fd8:	08010298 	.word	0x08010298
 8005fdc:	20008a68 	.word	0x20008a68
 8005fe0:	08005e31 	.word	0x08005e31
 8005fe4:	20008a64 	.word	0x20008a64

08005fe8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <tcp_update_rcv_ann_wnd+0x1c>
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <tcp_update_rcv_ann_wnd+0xa4>)
 8005ff8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005ffc:	4924      	ldr	r1, [pc, #144]	; (8006090 <tcp_update_rcv_ann_wnd+0xa8>)
 8005ffe:	4825      	ldr	r0, [pc, #148]	; (8006094 <tcp_update_rcv_ann_wnd+0xac>)
 8006000:	f008 fa66 	bl	800e4d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006018:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800601c:	bf28      	it	cs
 800601e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006022:	b292      	uxth	r2, r2
 8006024:	4413      	add	r3, r2
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	db08      	blt.n	8006040 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	e020      	b.n	8006082 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd03      	ble.n	8006056 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006054:	e014      	b.n	8006080 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006068:	d306      	bcc.n	8006078 <tcp_update_rcv_ann_wnd+0x90>
 800606a:	4b08      	ldr	r3, [pc, #32]	; (800608c <tcp_update_rcv_ann_wnd+0xa4>)
 800606c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006070:	4909      	ldr	r1, [pc, #36]	; (8006098 <tcp_update_rcv_ann_wnd+0xb0>)
 8006072:	4808      	ldr	r0, [pc, #32]	; (8006094 <tcp_update_rcv_ann_wnd+0xac>)
 8006074:	f008 fa2c 	bl	800e4d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006080:	2300      	movs	r3, #0
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	08010074 	.word	0x08010074
 8006090:	080102d0 	.word	0x080102d0
 8006094:	080100b8 	.word	0x080100b8
 8006098:	080102f4 	.word	0x080102f4

0800609c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <tcp_recved+0x22>
 80060ae:	4b1f      	ldr	r3, [pc, #124]	; (800612c <tcp_recved+0x90>)
 80060b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80060b4:	491e      	ldr	r1, [pc, #120]	; (8006130 <tcp_recved+0x94>)
 80060b6:	481f      	ldr	r0, [pc, #124]	; (8006134 <tcp_recved+0x98>)
 80060b8:	f008 fa0a 	bl	800e4d0 <iprintf>
 80060bc:	e032      	b.n	8006124 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7d1b      	ldrb	r3, [r3, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d106      	bne.n	80060d4 <tcp_recved+0x38>
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <tcp_recved+0x90>)
 80060c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80060cc:	491a      	ldr	r1, [pc, #104]	; (8006138 <tcp_recved+0x9c>)
 80060ce:	4819      	ldr	r0, [pc, #100]	; (8006134 <tcp_recved+0x98>)
 80060d0:	f008 f9fe 	bl	800e4d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060d8:	887b      	ldrh	r3, [r7, #2]
 80060da:	4413      	add	r3, r2
 80060dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060e4:	d804      	bhi.n	80060f0 <tcp_recved+0x54>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ea:	89fa      	ldrh	r2, [r7, #14]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d204      	bcs.n	80060fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80060f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80060f8:	e002      	b.n	8006100 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	89fa      	ldrh	r2, [r7, #14]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff71 	bl	8005fe8 <tcp_update_rcv_ann_wnd>
 8006106:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800610e:	d309      	bcc.n	8006124 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8b5b      	ldrh	r3, [r3, #26]
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f004 fbc2 	bl	800a8a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08010074 	.word	0x08010074
 8006130:	08010310 	.word	0x08010310
 8006134:	080100b8 	.word	0x080100b8
 8006138:	08010328 	.word	0x08010328

0800613c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006146:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <tcp_new_port+0x84>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <tcp_new_port+0x84>)
 8006150:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <tcp_new_port+0x84>)
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800615a:	4293      	cmp	r3, r2
 800615c:	d103      	bne.n	8006166 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <tcp_new_port+0x84>)
 8006160:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006164:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006166:	2300      	movs	r3, #0
 8006168:	71fb      	strb	r3, [r7, #7]
 800616a:	e01e      	b.n	80061aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <tcp_new_port+0x88>)
 8006170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	e011      	b.n	800619e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	8ada      	ldrh	r2, [r3, #22]
 800617e:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <tcp_new_port+0x84>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d108      	bne.n	8006198 <tcp_new_port+0x5c>
        n++;
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	3301      	adds	r3, #1
 800618a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800618c:	88bb      	ldrh	r3, [r7, #4]
 800618e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006192:	d3d8      	bcc.n	8006146 <tcp_new_port+0xa>
          return 0;
 8006194:	2300      	movs	r3, #0
 8006196:	e00d      	b.n	80061b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ea      	bne.n	800617a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	3301      	adds	r3, #1
 80061a8:	71fb      	strb	r3, [r7, #7]
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d9dd      	bls.n	800616c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80061b0:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <tcp_new_port+0x84>)
 80061b2:	881b      	ldrh	r3, [r3, #0]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	2000000a 	.word	0x2000000a
 80061c4:	08012040 	.word	0x08012040

080061c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b090      	sub	sp, #64	; 0x40
 80061cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80061d4:	4b94      	ldr	r3, [pc, #592]	; (8006428 <tcp_slowtmr+0x260>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	4a93      	ldr	r2, [pc, #588]	; (8006428 <tcp_slowtmr+0x260>)
 80061dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80061de:	4b93      	ldr	r3, [pc, #588]	; (800642c <tcp_slowtmr+0x264>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	4b91      	ldr	r3, [pc, #580]	; (800642c <tcp_slowtmr+0x264>)
 80061e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80061ee:	4b90      	ldr	r3, [pc, #576]	; (8006430 <tcp_slowtmr+0x268>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80061f4:	e29d      	b.n	8006732 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	7d1b      	ldrb	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <tcp_slowtmr+0x44>
 80061fe:	4b8d      	ldr	r3, [pc, #564]	; (8006434 <tcp_slowtmr+0x26c>)
 8006200:	f240 42be 	movw	r2, #1214	; 0x4be
 8006204:	498c      	ldr	r1, [pc, #560]	; (8006438 <tcp_slowtmr+0x270>)
 8006206:	488d      	ldr	r0, [pc, #564]	; (800643c <tcp_slowtmr+0x274>)
 8006208:	f008 f962 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	7d1b      	ldrb	r3, [r3, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <tcp_slowtmr+0x5a>
 8006214:	4b87      	ldr	r3, [pc, #540]	; (8006434 <tcp_slowtmr+0x26c>)
 8006216:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800621a:	4989      	ldr	r1, [pc, #548]	; (8006440 <tcp_slowtmr+0x278>)
 800621c:	4887      	ldr	r0, [pc, #540]	; (800643c <tcp_slowtmr+0x274>)
 800621e:	f008 f957 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	7d1b      	ldrb	r3, [r3, #20]
 8006226:	2b0a      	cmp	r3, #10
 8006228:	d106      	bne.n	8006238 <tcp_slowtmr+0x70>
 800622a:	4b82      	ldr	r3, [pc, #520]	; (8006434 <tcp_slowtmr+0x26c>)
 800622c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006230:	4984      	ldr	r1, [pc, #528]	; (8006444 <tcp_slowtmr+0x27c>)
 8006232:	4882      	ldr	r0, [pc, #520]	; (800643c <tcp_slowtmr+0x274>)
 8006234:	f008 f94c 	bl	800e4d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	7f9a      	ldrb	r2, [r3, #30]
 800623c:	4b7b      	ldr	r3, [pc, #492]	; (800642c <tcp_slowtmr+0x264>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d105      	bne.n	8006250 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800624e:	e270      	b.n	8006732 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006250:	4b76      	ldr	r3, [pc, #472]	; (800642c <tcp_slowtmr+0x264>)
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	7d1b      	ldrb	r3, [r3, #20]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d10a      	bne.n	8006282 <tcp_slowtmr+0xba>
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006272:	2b05      	cmp	r3, #5
 8006274:	d905      	bls.n	8006282 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800627a:	3301      	adds	r3, #1
 800627c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006280:	e11e      	b.n	80064c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006288:	2b0b      	cmp	r3, #11
 800628a:	d905      	bls.n	8006298 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800628c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006290:	3301      	adds	r3, #1
 8006292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006296:	e113      	b.n	80064c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d075      	beq.n	800638e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <tcp_slowtmr+0xf0>
 80062aa:	4b62      	ldr	r3, [pc, #392]	; (8006434 <tcp_slowtmr+0x26c>)
 80062ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80062b0:	4965      	ldr	r1, [pc, #404]	; (8006448 <tcp_slowtmr+0x280>)
 80062b2:	4862      	ldr	r0, [pc, #392]	; (800643c <tcp_slowtmr+0x274>)
 80062b4:	f008 f90c 	bl	800e4d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <tcp_slowtmr+0x106>
 80062c0:	4b5c      	ldr	r3, [pc, #368]	; (8006434 <tcp_slowtmr+0x26c>)
 80062c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80062c6:	4961      	ldr	r1, [pc, #388]	; (800644c <tcp_slowtmr+0x284>)
 80062c8:	485c      	ldr	r0, [pc, #368]	; (800643c <tcp_slowtmr+0x274>)
 80062ca:	f008 f901 	bl	800e4d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80062d4:	2b0b      	cmp	r3, #11
 80062d6:	d905      	bls.n	80062e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80062d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062dc:	3301      	adds	r3, #1
 80062de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062e2:	e0ed      	b.n	80064c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4a58      	ldr	r2, [pc, #352]	; (8006450 <tcp_slowtmr+0x288>)
 80062ee:	5cd3      	ldrb	r3, [r2, r3]
 80062f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80062f8:	7c7a      	ldrb	r2, [r7, #17]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d907      	bls.n	800630e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006304:	3301      	adds	r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006314:	7c7a      	ldrb	r2, [r7, #17]
 8006316:	429a      	cmp	r2, r3
 8006318:	f200 80d2 	bhi.w	80064c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800631c:	2301      	movs	r3, #1
 800631e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800632a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800632c:	f005 f964 	bl	800b5f8 <tcp_zero_window_probe>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d014      	beq.n	8006360 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006336:	2300      	movs	r3, #0
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	e011      	b.n	8006360 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006342:	4619      	mov	r1, r3
 8006344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006346:	f004 f829 	bl	800a39c <tcp_split_unsent_seg>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d107      	bne.n	8006360 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006352:	f004 faa9 	bl	800a8a8 <tcp_output>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80ac 	beq.w	80064c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006376:	2b06      	cmp	r3, #6
 8006378:	f200 80a2 	bhi.w	80064c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006382:	3301      	adds	r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800638c:	e098      	b.n	80064c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006394:	2b00      	cmp	r3, #0
 8006396:	db0f      	blt.n	80063b8 <tcp_slowtmr+0x1f0>
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800639e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d008      	beq.n	80063b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	b21a      	sxth	r2, r3
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80063c4:	429a      	cmp	r2, r3
 80063c6:	db7b      	blt.n	80064c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80063c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ca:	f004 fd5f 	bl	800ae8c <tcp_rexmit_rto_prepare>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <tcp_slowtmr+0x21c>
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d171      	bne.n	80064c0 <tcp_slowtmr+0x2f8>
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d06d      	beq.n	80064c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	7d1b      	ldrb	r3, [r3, #20]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d03a      	beq.n	8006462 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f2:	2b0c      	cmp	r3, #12
 80063f4:	bf28      	it	cs
 80063f6:	230c      	movcs	r3, #12
 80063f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006400:	10db      	asrs	r3, r3, #3
 8006402:	b21b      	sxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800640c:	4413      	add	r3, r2
 800640e:	7efa      	ldrb	r2, [r7, #27]
 8006410:	4910      	ldr	r1, [pc, #64]	; (8006454 <tcp_slowtmr+0x28c>)
 8006412:	5c8a      	ldrb	r2, [r1, r2]
 8006414:	4093      	lsls	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800641e:	4293      	cmp	r3, r2
 8006420:	dc1a      	bgt.n	8006458 <tcp_slowtmr+0x290>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	b21a      	sxth	r2, r3
 8006426:	e019      	b.n	800645c <tcp_slowtmr+0x294>
 8006428:	20008a60 	.word	0x20008a60
 800642c:	200000ca 	.word	0x200000ca
 8006430:	20008a5c 	.word	0x20008a5c
 8006434:	08010074 	.word	0x08010074
 8006438:	080103b8 	.word	0x080103b8
 800643c:	080100b8 	.word	0x080100b8
 8006440:	080103e4 	.word	0x080103e4
 8006444:	08010410 	.word	0x08010410
 8006448:	08010440 	.word	0x08010440
 800644c:	08010474 	.word	0x08010474
 8006450:	08012038 	.word	0x08012038
 8006454:	08012028 	.word	0x08012028
 8006458:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2200      	movs	r2, #0
 8006466:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006474:	4293      	cmp	r3, r2
 8006476:	bf28      	it	cs
 8006478:	4613      	movcs	r3, r2
 800647a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800647c:	8a7b      	ldrh	r3, [r7, #18]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	429a      	cmp	r2, r3
 8006498:	d206      	bcs.n	80064a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80064ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064bc:	f004 fd56 	bl	800af6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	7d1b      	ldrb	r3, [r3, #20]
 80064c4:	2b06      	cmp	r3, #6
 80064c6:	d111      	bne.n	80064ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	8b5b      	ldrh	r3, [r3, #26]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80064d4:	4b9c      	ldr	r3, [pc, #624]	; (8006748 <tcp_slowtmr+0x580>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b28      	cmp	r3, #40	; 0x28
 80064e0:	d904      	bls.n	80064ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80064e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e6:	3301      	adds	r3, #1
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	7a5b      	ldrb	r3, [r3, #9]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d04a      	beq.n	800658e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d003      	beq.n	8006508 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006504:	2b07      	cmp	r3, #7
 8006506:	d142      	bne.n	800658e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006508:	4b8f      	ldr	r3, [pc, #572]	; (8006748 <tcp_slowtmr+0x580>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006518:	4b8c      	ldr	r3, [pc, #560]	; (800674c <tcp_slowtmr+0x584>)
 800651a:	440b      	add	r3, r1
 800651c:	498c      	ldr	r1, [pc, #560]	; (8006750 <tcp_slowtmr+0x588>)
 800651e:	fba1 1303 	umull	r1, r3, r1, r3
 8006522:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006524:	429a      	cmp	r2, r3
 8006526:	d90a      	bls.n	800653e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652c:	3301      	adds	r3, #1
 800652e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006536:	3301      	adds	r3, #1
 8006538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800653c:	e027      	b.n	800658e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800653e:	4b82      	ldr	r3, [pc, #520]	; (8006748 <tcp_slowtmr+0x580>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006554:	4618      	mov	r0, r3
 8006556:	4b7f      	ldr	r3, [pc, #508]	; (8006754 <tcp_slowtmr+0x58c>)
 8006558:	fb03 f300 	mul.w	r3, r3, r0
 800655c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800655e:	497c      	ldr	r1, [pc, #496]	; (8006750 <tcp_slowtmr+0x588>)
 8006560:	fba1 1303 	umull	r1, r3, r1, r3
 8006564:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006566:	429a      	cmp	r2, r3
 8006568:	d911      	bls.n	800658e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800656a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800656c:	f005 f804 	bl	800b578 <tcp_keepalive>
 8006570:	4603      	mov	r3, r0
 8006572:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006576:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006584:	3301      	adds	r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006596:	4b6c      	ldr	r3, [pc, #432]	; (8006748 <tcp_slowtmr+0x580>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80065a6:	4619      	mov	r1, r3
 80065a8:	460b      	mov	r3, r1
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	440b      	add	r3, r1
 80065ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d302      	bcc.n	80065ba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80065b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b6:	f000 fec3 	bl	8007340 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	7d1b      	ldrb	r3, [r3, #20]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d10b      	bne.n	80065da <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065c2:	4b61      	ldr	r3, [pc, #388]	; (8006748 <tcp_slowtmr+0x580>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b28      	cmp	r3, #40	; 0x28
 80065ce:	d904      	bls.n	80065da <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80065d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d4:	3301      	adds	r3, #1
 80065d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d10b      	bne.n	80065fa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80065e2:	4b59      	ldr	r3, [pc, #356]	; (8006748 <tcp_slowtmr+0x580>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2bf0      	cmp	r3, #240	; 0xf0
 80065ee:	d904      	bls.n	80065fa <tcp_slowtmr+0x432>
        ++pcb_remove;
 80065f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f4:	3301      	adds	r3, #1
 80065f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80065fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d060      	beq.n	80066c4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800660a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800660c:	f000 fce4 	bl	8006fd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d010      	beq.n	8006638 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006616:	4b50      	ldr	r3, [pc, #320]	; (8006758 <tcp_slowtmr+0x590>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661c:	429a      	cmp	r2, r3
 800661e:	d106      	bne.n	800662e <tcp_slowtmr+0x466>
 8006620:	4b4e      	ldr	r3, [pc, #312]	; (800675c <tcp_slowtmr+0x594>)
 8006622:	f240 526d 	movw	r2, #1389	; 0x56d
 8006626:	494e      	ldr	r1, [pc, #312]	; (8006760 <tcp_slowtmr+0x598>)
 8006628:	484e      	ldr	r0, [pc, #312]	; (8006764 <tcp_slowtmr+0x59c>)
 800662a:	f007 ff51 	bl	800e4d0 <iprintf>
        prev->next = pcb->next;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e00f      	b.n	8006658 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006638:	4b47      	ldr	r3, [pc, #284]	; (8006758 <tcp_slowtmr+0x590>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800663e:	429a      	cmp	r2, r3
 8006640:	d006      	beq.n	8006650 <tcp_slowtmr+0x488>
 8006642:	4b46      	ldr	r3, [pc, #280]	; (800675c <tcp_slowtmr+0x594>)
 8006644:	f240 5271 	movw	r2, #1393	; 0x571
 8006648:	4947      	ldr	r1, [pc, #284]	; (8006768 <tcp_slowtmr+0x5a0>)
 800664a:	4846      	ldr	r0, [pc, #280]	; (8006764 <tcp_slowtmr+0x59c>)
 800664c:	f007 ff40 	bl	800e4d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4a40      	ldr	r2, [pc, #256]	; (8006758 <tcp_slowtmr+0x590>)
 8006656:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006658:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800665c:	2b00      	cmp	r3, #0
 800665e:	d013      	beq.n	8006688 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006668:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	3304      	adds	r3, #4
 800666e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006670:	8ad2      	ldrh	r2, [r2, #22]
 8006672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006674:	8b09      	ldrh	r1, [r1, #24]
 8006676:	9102      	str	r1, [sp, #8]
 8006678:	9201      	str	r2, [sp, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	462b      	mov	r3, r5
 800667e:	4622      	mov	r2, r4
 8006680:	4601      	mov	r1, r0
 8006682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006684:	f004 fec4 	bl	800b410 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	7d1b      	ldrb	r3, [r3, #20]
 8006692:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800669e:	6838      	ldr	r0, [r7, #0]
 80066a0:	f7ff f83a 	bl	8005718 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80066a4:	4b31      	ldr	r3, [pc, #196]	; (800676c <tcp_slowtmr+0x5a4>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <tcp_slowtmr+0x4f2>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f06f 010c 	mvn.w	r1, #12
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80066ba:	4b2c      	ldr	r3, [pc, #176]	; (800676c <tcp_slowtmr+0x5a4>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d037      	beq.n	8006732 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80066c2:	e592      	b.n	80061ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	7f1b      	ldrb	r3, [r3, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	7f1a      	ldrb	r2, [r3, #28]
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	7f5b      	ldrb	r3, [r3, #29]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d325      	bcc.n	8006732 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80066ec:	4b1f      	ldr	r3, [pc, #124]	; (800676c <tcp_slowtmr+0x5a4>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <tcp_slowtmr+0x54c>
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006704:	6912      	ldr	r2, [r2, #16]
 8006706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006712:	e002      	b.n	800671a <tcp_slowtmr+0x552>
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <tcp_slowtmr+0x5a4>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d000      	beq.n	8006724 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006722:	e562      	b.n	80061ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006724:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800672c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672e:	f004 f8bb 	bl	800a8a8 <tcp_output>
  while (pcb != NULL) {
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f47f ad5e 	bne.w	80061f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <tcp_slowtmr+0x5a8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006744:	e069      	b.n	800681a <tcp_slowtmr+0x652>
 8006746:	bf00      	nop
 8006748:	20008a60 	.word	0x20008a60
 800674c:	000a4cb8 	.word	0x000a4cb8
 8006750:	10624dd3 	.word	0x10624dd3
 8006754:	000124f8 	.word	0x000124f8
 8006758:	20008a5c 	.word	0x20008a5c
 800675c:	08010074 	.word	0x08010074
 8006760:	080104ac 	.word	0x080104ac
 8006764:	080100b8 	.word	0x080100b8
 8006768:	080104d8 	.word	0x080104d8
 800676c:	20008a58 	.word	0x20008a58
 8006770:	20008a6c 	.word	0x20008a6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	7d1b      	ldrb	r3, [r3, #20]
 8006778:	2b0a      	cmp	r3, #10
 800677a:	d006      	beq.n	800678a <tcp_slowtmr+0x5c2>
 800677c:	4b2b      	ldr	r3, [pc, #172]	; (800682c <tcp_slowtmr+0x664>)
 800677e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006782:	492b      	ldr	r1, [pc, #172]	; (8006830 <tcp_slowtmr+0x668>)
 8006784:	482b      	ldr	r0, [pc, #172]	; (8006834 <tcp_slowtmr+0x66c>)
 8006786:	f007 fea3 	bl	800e4d0 <iprintf>
    pcb_remove = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006790:	4b29      	ldr	r3, [pc, #164]	; (8006838 <tcp_slowtmr+0x670>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2bf0      	cmp	r3, #240	; 0xf0
 800679c:	d904      	bls.n	80067a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800679e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a2:	3301      	adds	r3, #1
 80067a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80067a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d02f      	beq.n	8006810 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80067b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067b2:	f000 fc11 	bl	8006fd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80067bc:	4b1f      	ldr	r3, [pc, #124]	; (800683c <tcp_slowtmr+0x674>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d106      	bne.n	80067d4 <tcp_slowtmr+0x60c>
 80067c6:	4b19      	ldr	r3, [pc, #100]	; (800682c <tcp_slowtmr+0x664>)
 80067c8:	f240 52af 	movw	r2, #1455	; 0x5af
 80067cc:	491c      	ldr	r1, [pc, #112]	; (8006840 <tcp_slowtmr+0x678>)
 80067ce:	4819      	ldr	r0, [pc, #100]	; (8006834 <tcp_slowtmr+0x66c>)
 80067d0:	f007 fe7e 	bl	800e4d0 <iprintf>
        prev->next = pcb->next;
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	60da      	str	r2, [r3, #12]
 80067dc:	e00f      	b.n	80067fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80067de:	4b17      	ldr	r3, [pc, #92]	; (800683c <tcp_slowtmr+0x674>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d006      	beq.n	80067f6 <tcp_slowtmr+0x62e>
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <tcp_slowtmr+0x664>)
 80067ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80067ee:	4915      	ldr	r1, [pc, #84]	; (8006844 <tcp_slowtmr+0x67c>)
 80067f0:	4810      	ldr	r0, [pc, #64]	; (8006834 <tcp_slowtmr+0x66c>)
 80067f2:	f007 fe6d 	bl	800e4d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <tcp_slowtmr+0x674>)
 80067fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006808:	69f8      	ldr	r0, [r7, #28]
 800680a:	f7fe ff85 	bl	8005718 <tcp_free>
 800680e:	e004      	b.n	800681a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1a9      	bne.n	8006774 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	3730      	adds	r7, #48	; 0x30
 8006826:	46bd      	mov	sp, r7
 8006828:	bdb0      	pop	{r4, r5, r7, pc}
 800682a:	bf00      	nop
 800682c:	08010074 	.word	0x08010074
 8006830:	08010504 	.word	0x08010504
 8006834:	080100b8 	.word	0x080100b8
 8006838:	20008a60 	.word	0x20008a60
 800683c:	20008a6c 	.word	0x20008a6c
 8006840:	08010534 	.word	0x08010534
 8006844:	0801055c 	.word	0x0801055c

08006848 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800684e:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <tcp_fasttmr+0xbc>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <tcp_fasttmr+0xbc>)
 8006858:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800685a:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <tcp_fasttmr+0xc0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006860:	e048      	b.n	80068f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7f9a      	ldrb	r2, [r3, #30]
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <tcp_fasttmr+0xbc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d03f      	beq.n	80068ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <tcp_fasttmr+0xbc>)
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8b5b      	ldrh	r3, [r3, #26]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8b5b      	ldrh	r3, [r3, #26]
 8006886:	f043 0302 	orr.w	r3, r3, #2
 800688a:	b29a      	uxth	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f004 f809 	bl	800a8a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8b5b      	ldrh	r3, [r3, #26]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	b29a      	uxth	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8b5b      	ldrh	r3, [r3, #26]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8b5b      	ldrh	r3, [r3, #26]
 80068b4:	f023 0308 	bic.w	r3, r3, #8
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff f8be 	bl	8005a40 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <tcp_fasttmr+0xc4>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f819 	bl	8006910 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <tcp_fasttmr+0xc4>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d000      	beq.n	80068e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80068e6:	e7b8      	b.n	800685a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e002      	b.n	80068f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1b3      	bne.n	8006862 <tcp_fasttmr+0x1a>
    }
  }
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	200000ca 	.word	0x200000ca
 8006908:	20008a5c 	.word	0x20008a5c
 800690c:	20008a58 	.word	0x20008a58

08006910 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <tcp_process_refused_data+0x22>
 800691e:	4b37      	ldr	r3, [pc, #220]	; (80069fc <tcp_process_refused_data+0xec>)
 8006920:	f240 6209 	movw	r2, #1545	; 0x609
 8006924:	4936      	ldr	r1, [pc, #216]	; (8006a00 <tcp_process_refused_data+0xf0>)
 8006926:	4837      	ldr	r0, [pc, #220]	; (8006a04 <tcp_process_refused_data+0xf4>)
 8006928:	f007 fdd2 	bl	800e4d0 <iprintf>
 800692c:	f06f 030f 	mvn.w	r3, #15
 8006930:	e060      	b.n	80069f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006936:	7b5b      	ldrb	r3, [r3, #13]
 8006938:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <tcp_process_refused_data+0x58>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6918      	ldr	r0, [r3, #16]
 800695a:	2300      	movs	r3, #0
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	47a0      	blx	r4
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
 8006966:	e007      	b.n	8006978 <tcp_process_refused_data+0x68>
 8006968:	2300      	movs	r3, #0
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	2000      	movs	r0, #0
 8006970:	f000 f8c2 	bl	8006af8 <tcp_recv_null>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d12a      	bne.n	80069d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d033      	beq.n	80069f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006992:	d005      	beq.n	80069a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006998:	3301      	adds	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <tcp_process_refused_data+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6918      	ldr	r0, [r3, #16]
 80069b4:	2300      	movs	r3, #0
 80069b6:	2200      	movs	r2, #0
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	47a0      	blx	r4
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
 80069c0:	e001      	b.n	80069c6 <tcp_process_refused_data+0xb6>
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80069c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ca:	f113 0f0d 	cmn.w	r3, #13
 80069ce:	d110      	bne.n	80069f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80069d0:	f06f 030c 	mvn.w	r3, #12
 80069d4:	e00e      	b.n	80069f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80069d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069da:	f113 0f0d 	cmn.w	r3, #13
 80069de:	d102      	bne.n	80069e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80069e0:	f06f 030c 	mvn.w	r3, #12
 80069e4:	e006      	b.n	80069f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80069ec:	f06f 0304 	mvn.w	r3, #4
 80069f0:	e000      	b.n	80069f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd90      	pop	{r4, r7, pc}
 80069fc:	08010074 	.word	0x08010074
 8006a00:	08010584 	.word	0x08010584
 8006a04:	080100b8 	.word	0x080100b8

08006a08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006a10:	e007      	b.n	8006a22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f80a 	bl	8006a32 <tcp_seg_free>
    seg = next;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f4      	bne.n	8006a12 <tcp_segs_free+0xa>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe fbb3 	bl	80051b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	2003      	movs	r0, #3
 8006a56:	f7fd fd9d 	bl	8004594 <memp_free>
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <tcp_setprio+0x22>
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <tcp_setprio+0x30>)
 8006a78:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006a7c:	4906      	ldr	r1, [pc, #24]	; (8006a98 <tcp_setprio+0x34>)
 8006a7e:	4807      	ldr	r0, [pc, #28]	; (8006a9c <tcp_setprio+0x38>)
 8006a80:	f007 fd26 	bl	800e4d0 <iprintf>
 8006a84:	e002      	b.n	8006a8c <tcp_setprio+0x28>

  pcb->prio = prio;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	755a      	strb	r2, [r3, #21]
}
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	08010074 	.word	0x08010074
 8006a98:	080105ac 	.word	0x080105ac
 8006a9c:	080100b8 	.word	0x080100b8

08006aa0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <tcp_seg_copy+0x1c>
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <tcp_seg_copy+0x4c>)
 8006ab0:	f240 6282 	movw	r2, #1666	; 0x682
 8006ab4:	490e      	ldr	r1, [pc, #56]	; (8006af0 <tcp_seg_copy+0x50>)
 8006ab6:	480f      	ldr	r0, [pc, #60]	; (8006af4 <tcp_seg_copy+0x54>)
 8006ab8:	f007 fd0a 	bl	800e4d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006abc:	2003      	movs	r0, #3
 8006abe:	f7fd fd1d 	bl	80044fc <memp_malloc>
 8006ac2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <tcp_seg_copy+0x2e>
    return NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e00a      	b.n	8006ae4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006ace:	2210      	movs	r2, #16
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f007 fce6 	bl	800e4a4 <memcpy>
  pbuf_ref(cseg->p);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fc0b 	bl	80052f8 <pbuf_ref>
  return cseg;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	08010074 	.word	0x08010074
 8006af0:	080105c8 	.word	0x080105c8
 8006af4:	080100b8 	.word	0x080100b8

08006af8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <tcp_recv_null+0x28>
 8006b0c:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <tcp_recv_null+0x60>)
 8006b0e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006b12:	4912      	ldr	r1, [pc, #72]	; (8006b5c <tcp_recv_null+0x64>)
 8006b14:	4812      	ldr	r0, [pc, #72]	; (8006b60 <tcp_recv_null+0x68>)
 8006b16:	f007 fcdb 	bl	800e4d0 <iprintf>
 8006b1a:	f06f 030f 	mvn.w	r3, #15
 8006b1e:	e016      	b.n	8006b4e <tcp_recv_null+0x56>

  if (p != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	891b      	ldrh	r3, [r3, #8]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68b8      	ldr	r0, [r7, #8]
 8006b2e:	f7ff fab5 	bl	800609c <tcp_recved>
    pbuf_free(p);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fe fb40 	bl	80051b8 <pbuf_free>
 8006b38:	e008      	b.n	8006b4c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006b42:	68b8      	ldr	r0, [r7, #8]
 8006b44:	f7fe ffe6 	bl	8005b14 <tcp_close>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	e000      	b.n	8006b4e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	08010074 	.word	0x08010074
 8006b5c:	080105e4 	.word	0x080105e4
 8006b60:	080100b8 	.word	0x080100b8

08006b64 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	db01      	blt.n	8006b7a <tcp_kill_prio+0x16>
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	e000      	b.n	8006b7c <tcp_kill_prio+0x18>
 8006b7a:	237f      	movs	r3, #127	; 0x7f
 8006b7c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d034      	beq.n	8006bee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <tcp_kill_prio+0x94>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e01f      	b.n	8006bda <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	7d5b      	ldrb	r3, [r3, #21]
 8006b9e:	7afa      	ldrb	r2, [r7, #11]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d80c      	bhi.n	8006bbe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006ba8:	7afa      	ldrb	r2, [r7, #11]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d112      	bne.n	8006bd4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <tcp_kill_prio+0x98>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d80a      	bhi.n	8006bd4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <tcp_kill_prio+0x98>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	7d5b      	ldrb	r3, [r3, #21]
 8006bd2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1dc      	bne.n	8006b9a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7ff f87e 	bl	8005ce8 <tcp_abort>
 8006bec:	e000      	b.n	8006bf0 <tcp_kill_prio+0x8c>
    return;
 8006bee:	bf00      	nop
  }
}
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20008a5c 	.word	0x20008a5c
 8006bfc:	20008a60 	.word	0x20008a60

08006c00 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d009      	beq.n	8006c24 <tcp_kill_state+0x24>
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d006      	beq.n	8006c24 <tcp_kill_state+0x24>
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <tcp_kill_state+0x80>)
 8006c18:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006c1c:	4919      	ldr	r1, [pc, #100]	; (8006c84 <tcp_kill_state+0x84>)
 8006c1e:	481a      	ldr	r0, [pc, #104]	; (8006c88 <tcp_kill_state+0x88>)
 8006c20:	f007 fc56 	bl	800e4d0 <iprintf>

  inactivity = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <tcp_kill_state+0x8c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e017      	b.n	8006c64 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	7d1b      	ldrb	r3, [r3, #20]
 8006c38:	79fa      	ldrb	r2, [r7, #7]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d10f      	bne.n	8006c5e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <tcp_kill_state+0x90>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d807      	bhi.n	8006c5e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <tcp_kill_state+0x90>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e4      	bne.n	8006c34 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006c70:	2100      	movs	r1, #0
 8006c72:	6938      	ldr	r0, [r7, #16]
 8006c74:	f7fe ff7a 	bl	8005b6c <tcp_abandon>
  }
}
 8006c78:	bf00      	nop
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	08010074 	.word	0x08010074
 8006c84:	08010600 	.word	0x08010600
 8006c88:	080100b8 	.word	0x080100b8
 8006c8c:	20008a5c 	.word	0x20008a5c
 8006c90:	20008a60 	.word	0x20008a60

08006c94 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <tcp_kill_timewait+0x58>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e012      	b.n	8006cd0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <tcp_kill_timewait+0x5c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d807      	bhi.n	8006cca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <tcp_kill_timewait+0x5c>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e9      	bne.n	8006caa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006cdc:	68b8      	ldr	r0, [r7, #8]
 8006cde:	f7ff f803 	bl	8005ce8 <tcp_abort>
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20008a6c 	.word	0x20008a6c
 8006cf0:	20008a60 	.word	0x20008a60

08006cf4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <tcp_handle_closepend+0x48>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006d00:	e014      	b.n	8006d2c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8b5b      	ldrh	r3, [r3, #26]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8b5b      	ldrh	r3, [r3, #26]
 8006d18:	f023 0308 	bic.w	r3, r3, #8
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe fe8c 	bl	8005a40 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e7      	bne.n	8006d02 <tcp_handle_closepend+0xe>
  }
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20008a5c 	.word	0x20008a5c

08006d40 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	f7fd fbd6 	bl	80044fc <memp_malloc>
 8006d50:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d126      	bne.n	8006da6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006d58:	f7ff ffcc 	bl	8006cf4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006d5c:	f7ff ff9a 	bl	8006c94 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d60:	2001      	movs	r0, #1
 8006d62:	f7fd fbcb 	bl	80044fc <memp_malloc>
 8006d66:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11b      	bne.n	8006da6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006d6e:	2009      	movs	r0, #9
 8006d70:	f7ff ff46 	bl	8006c00 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d74:	2001      	movs	r0, #1
 8006d76:	f7fd fbc1 	bl	80044fc <memp_malloc>
 8006d7a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d111      	bne.n	8006da6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006d82:	2008      	movs	r0, #8
 8006d84:	f7ff ff3c 	bl	8006c00 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f7fd fbb7 	bl	80044fc <memp_malloc>
 8006d8e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fee3 	bl	8006b64 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d9e:	2001      	movs	r0, #1
 8006da0:	f7fd fbac 	bl	80044fc <memp_malloc>
 8006da4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d03f      	beq.n	8006e2c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006dac:	229c      	movs	r2, #156	; 0x9c
 8006dae:	2100      	movs	r1, #0
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f007 fb85 	bl	800e4c0 <memset>
    pcb->prio = prio;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006dc2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	22ff      	movs	r2, #255	; 0xff
 8006dda:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006de2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2206      	movs	r2, #6
 8006de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2206      	movs	r2, #6
 8006df0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006df8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <tcp_alloc+0xf8>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <tcp_alloc+0xfc>)
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006e18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <tcp_alloc+0x100>)
 8006e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <tcp_alloc+0x104>)
 8006e28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20008a60 	.word	0x20008a60
 8006e3c:	200000ca 	.word	0x200000ca
 8006e40:	08006af9 	.word	0x08006af9
 8006e44:	006ddd00 	.word	0x006ddd00

08006e48 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006e4c:	2040      	movs	r0, #64	; 0x40
 8006e4e:	f7ff ff77 	bl	8006d40 <tcp_alloc>
 8006e52:	4603      	mov	r3, r0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	611a      	str	r2, [r3, #16]
  }
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7d1b      	ldrb	r3, [r3, #20]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d106      	bne.n	8006ea2 <tcp_recv+0x26>
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <tcp_recv+0x38>)
 8006e96:	f240 72df 	movw	r2, #2015	; 0x7df
 8006e9a:	4907      	ldr	r1, [pc, #28]	; (8006eb8 <tcp_recv+0x3c>)
 8006e9c:	4807      	ldr	r0, [pc, #28]	; (8006ebc <tcp_recv+0x40>)
 8006e9e:	f007 fb17 	bl	800e4d0 <iprintf>
    pcb->recv = recv;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	08010074 	.word	0x08010074
 8006eb8:	08010610 	.word	0x08010610
 8006ebc:	080100b8 	.word	0x080100b8

08006ec0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7d1b      	ldrb	r3, [r3, #20]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d106      	bne.n	8006ee6 <tcp_sent+0x26>
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <tcp_sent+0x38>)
 8006eda:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8006ede:	4907      	ldr	r1, [pc, #28]	; (8006efc <tcp_sent+0x3c>)
 8006ee0:	4807      	ldr	r0, [pc, #28]	; (8006f00 <tcp_sent+0x40>)
 8006ee2:	f007 faf5 	bl	800e4d0 <iprintf>
    pcb->sent = sent;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	08010074 	.word	0x08010074
 8006efc:	08010638 	.word	0x08010638
 8006f00:	080100b8 	.word	0x080100b8

08006f04 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7d1b      	ldrb	r3, [r3, #20]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d106      	bne.n	8006f2a <tcp_err+0x26>
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <tcp_err+0x38>)
 8006f1e:	f640 020d 	movw	r2, #2061	; 0x80d
 8006f22:	4907      	ldr	r1, [pc, #28]	; (8006f40 <tcp_err+0x3c>)
 8006f24:	4807      	ldr	r0, [pc, #28]	; (8006f44 <tcp_err+0x40>)
 8006f26:	f007 fad3 	bl	800e4d0 <iprintf>
    pcb->errf = err;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08010074 	.word	0x08010074
 8006f40:	08010660 	.word	0x08010660
 8006f44:	080100b8 	.word	0x080100b8

08006f48 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <tcp_accept+0x22>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7d1b      	ldrb	r3, [r3, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d104      	bne.n	8006f6a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	619a      	str	r2, [r3, #24]
  }
}
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <tcp_poll+0x24>
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <tcp_poll+0x50>)
 8006f8e:	f640 023d 	movw	r2, #2109	; 0x83d
 8006f92:	490e      	ldr	r1, [pc, #56]	; (8006fcc <tcp_poll+0x54>)
 8006f94:	480e      	ldr	r0, [pc, #56]	; (8006fd0 <tcp_poll+0x58>)
 8006f96:	f007 fa9b 	bl	800e4d0 <iprintf>
 8006f9a:	e011      	b.n	8006fc0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7d1b      	ldrb	r3, [r3, #20]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d106      	bne.n	8006fb2 <tcp_poll+0x3a>
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <tcp_poll+0x50>)
 8006fa6:	f640 023e 	movw	r2, #2110	; 0x83e
 8006faa:	490a      	ldr	r1, [pc, #40]	; (8006fd4 <tcp_poll+0x5c>)
 8006fac:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <tcp_poll+0x58>)
 8006fae:	f007 fa8f 	bl	800e4d0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	775a      	strb	r2, [r3, #29]
}
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08010074 	.word	0x08010074
 8006fcc:	08010688 	.word	0x08010688
 8006fd0:	080100b8 	.word	0x080100b8
 8006fd4:	080106a0 	.word	0x080106a0

08006fd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <tcp_pcb_purge+0x1e>
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <tcp_pcb_purge+0x94>)
 8006fe8:	f640 0251 	movw	r2, #2129	; 0x851
 8006fec:	4920      	ldr	r1, [pc, #128]	; (8007070 <tcp_pcb_purge+0x98>)
 8006fee:	4821      	ldr	r0, [pc, #132]	; (8007074 <tcp_pcb_purge+0x9c>)
 8006ff0:	f007 fa6e 	bl	800e4d0 <iprintf>
 8006ff4:	e037      	b.n	8007066 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7d1b      	ldrb	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d033      	beq.n	8007066 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007002:	2b0a      	cmp	r3, #10
 8007004:	d02f      	beq.n	8007066 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800700a:	2b01      	cmp	r3, #1
 800700c:	d02b      	beq.n	8007066 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe f8cc 	bl	80051b8 <pbuf_free>
      pcb->refused_data = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f986 	bl	8007340 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fce1 	bl	8006a08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fcdc 	bl	8006a08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	66da      	str	r2, [r3, #108]	; 0x6c
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	08010074 	.word	0x08010074
 8007070:	080106c0 	.word	0x080106c0
 8007074:	080100b8 	.word	0x080100b8

08007078 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <tcp_pcb_remove+0x1e>
 8007088:	4b3e      	ldr	r3, [pc, #248]	; (8007184 <tcp_pcb_remove+0x10c>)
 800708a:	f640 0283 	movw	r2, #2179	; 0x883
 800708e:	493e      	ldr	r1, [pc, #248]	; (8007188 <tcp_pcb_remove+0x110>)
 8007090:	483e      	ldr	r0, [pc, #248]	; (800718c <tcp_pcb_remove+0x114>)
 8007092:	f007 fa1d 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <tcp_pcb_remove+0x32>
 800709c:	4b39      	ldr	r3, [pc, #228]	; (8007184 <tcp_pcb_remove+0x10c>)
 800709e:	f640 0284 	movw	r2, #2180	; 0x884
 80070a2:	493b      	ldr	r1, [pc, #236]	; (8007190 <tcp_pcb_remove+0x118>)
 80070a4:	4839      	ldr	r0, [pc, #228]	; (800718c <tcp_pcb_remove+0x114>)
 80070a6:	f007 fa13 	bl	800e4d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d105      	bne.n	80070c0 <tcp_pcb_remove+0x48>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e013      	b.n	80070e8 <tcp_pcb_remove+0x70>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e00c      	b.n	80070e2 <tcp_pcb_remove+0x6a>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d104      	bne.n	80070dc <tcp_pcb_remove+0x64>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	e005      	b.n	80070e8 <tcp_pcb_remove+0x70>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ef      	bne.n	80070c8 <tcp_pcb_remove+0x50>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80070ee:	6838      	ldr	r0, [r7, #0]
 80070f0:	f7ff ff72 	bl	8006fd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	7d1b      	ldrb	r3, [r3, #20]
 80070f8:	2b0a      	cmp	r3, #10
 80070fa:	d013      	beq.n	8007124 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007100:	2b01      	cmp	r3, #1
 8007102:	d00f      	beq.n	8007124 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	8b5b      	ldrh	r3, [r3, #26]
 8007108:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	8b5b      	ldrh	r3, [r3, #26]
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	b29a      	uxth	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f003 fbc2 	bl	800a8a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	7d1b      	ldrb	r3, [r3, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d020      	beq.n	800716e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <tcp_pcb_remove+0xca>
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <tcp_pcb_remove+0x10c>)
 8007136:	f640 0293 	movw	r2, #2195	; 0x893
 800713a:	4916      	ldr	r1, [pc, #88]	; (8007194 <tcp_pcb_remove+0x11c>)
 800713c:	4813      	ldr	r0, [pc, #76]	; (800718c <tcp_pcb_remove+0x114>)
 800713e:	f007 f9c7 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <tcp_pcb_remove+0xe0>
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <tcp_pcb_remove+0x10c>)
 800714c:	f640 0294 	movw	r2, #2196	; 0x894
 8007150:	4911      	ldr	r1, [pc, #68]	; (8007198 <tcp_pcb_remove+0x120>)
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <tcp_pcb_remove+0x114>)
 8007154:	f007 f9bc 	bl	800e4d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <tcp_pcb_remove+0xf6>
 8007160:	4b08      	ldr	r3, [pc, #32]	; (8007184 <tcp_pcb_remove+0x10c>)
 8007162:	f640 0296 	movw	r2, #2198	; 0x896
 8007166:	490d      	ldr	r1, [pc, #52]	; (800719c <tcp_pcb_remove+0x124>)
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <tcp_pcb_remove+0x114>)
 800716a:	f007 f9b1 	bl	800e4d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2200      	movs	r2, #0
 8007172:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08010074 	.word	0x08010074
 8007188:	080106dc 	.word	0x080106dc
 800718c:	080100b8 	.word	0x080100b8
 8007190:	080106f8 	.word	0x080106f8
 8007194:	08010718 	.word	0x08010718
 8007198:	08010730 	.word	0x08010730
 800719c:	0801074c 	.word	0x0801074c

080071a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <tcp_next_iss+0x1c>
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <tcp_next_iss+0x38>)
 80071b0:	f640 02af 	movw	r2, #2223	; 0x8af
 80071b4:	4909      	ldr	r1, [pc, #36]	; (80071dc <tcp_next_iss+0x3c>)
 80071b6:	480a      	ldr	r0, [pc, #40]	; (80071e0 <tcp_next_iss+0x40>)
 80071b8:	f007 f98a 	bl	800e4d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80071bc:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <tcp_next_iss+0x44>)
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <tcp_next_iss+0x48>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	4a07      	ldr	r2, [pc, #28]	; (80071e4 <tcp_next_iss+0x44>)
 80071c8:	6013      	str	r3, [r2, #0]
  return iss;
 80071ca:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <tcp_next_iss+0x44>)
 80071cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	08010074 	.word	0x08010074
 80071dc:	08010764 	.word	0x08010764
 80071e0:	080100b8 	.word	0x080100b8
 80071e4:	2000000c 	.word	0x2000000c
 80071e8:	20008a60 	.word	0x20008a60

080071ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <tcp_eff_send_mss_netif+0x22>
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <tcp_eff_send_mss_netif+0x68>)
 8007202:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007206:	4914      	ldr	r1, [pc, #80]	; (8007258 <tcp_eff_send_mss_netif+0x6c>)
 8007208:	4814      	ldr	r0, [pc, #80]	; (800725c <tcp_eff_send_mss_netif+0x70>)
 800720a:	f007 f961 	bl	800e4d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	e019      	b.n	800724c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800721c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800721e:	8afb      	ldrh	r3, [r7, #22]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d012      	beq.n	800724a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007224:	2328      	movs	r3, #40	; 0x28
 8007226:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007228:	8afa      	ldrh	r2, [r7, #22]
 800722a:	8abb      	ldrh	r3, [r7, #20]
 800722c:	429a      	cmp	r2, r3
 800722e:	d904      	bls.n	800723a <tcp_eff_send_mss_netif+0x4e>
 8007230:	8afa      	ldrh	r2, [r7, #22]
 8007232:	8abb      	ldrh	r3, [r7, #20]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	e000      	b.n	800723c <tcp_eff_send_mss_netif+0x50>
 800723a:	2300      	movs	r3, #0
 800723c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800723e:	8a7a      	ldrh	r2, [r7, #18]
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	4293      	cmp	r3, r2
 8007244:	bf28      	it	cs
 8007246:	4613      	movcs	r3, r2
 8007248:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800724a:	89fb      	ldrh	r3, [r7, #14]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	08010074 	.word	0x08010074
 8007258:	08010780 	.word	0x08010780
 800725c:	080100b8 	.word	0x080100b8

08007260 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d119      	bne.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007276:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800727a:	4910      	ldr	r1, [pc, #64]	; (80072bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800727c:	4810      	ldr	r0, [pc, #64]	; (80072c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800727e:	f007 f927 	bl	800e4d0 <iprintf>

  while (pcb != NULL) {
 8007282:	e011      	b.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d108      	bne.n	80072a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7fe fd26 	bl	8005ce8 <tcp_abort>
      pcb = next;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	e002      	b.n	80072a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ea      	bne.n	8007284 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08010074 	.word	0x08010074
 80072bc:	080107a8 	.word	0x080107a8
 80072c0:	080100b8 	.word	0x080100b8

080072c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02a      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d026      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80072dc:	4b15      	ldr	r3, [pc, #84]	; (8007334 <tcp_netif_ip_addr_changed+0x70>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ffbc 	bl	8007260 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80072e8:	4b13      	ldr	r3, [pc, #76]	; (8007338 <tcp_netif_ip_addr_changed+0x74>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff ffb6 	bl	8007260 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d013      	beq.n	800732a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007302:	4b0e      	ldr	r3, [pc, #56]	; (800733c <tcp_netif_ip_addr_changed+0x78>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e00c      	b.n	8007324 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d103      	bne.n	800731e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1ef      	bne.n	800730a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20008a5c 	.word	0x20008a5c
 8007338:	20008a68 	.word	0x20008a68
 800733c:	20008a64 	.word	0x20008a64

08007340 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fb57 	bl	8006a08 <tcp_segs_free>
    pcb->ooseq = NULL;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b08d      	sub	sp, #52	; 0x34
 800736c:	af04      	add	r7, sp, #16
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <tcp_input+0x1c>
 8007378:	4b9b      	ldr	r3, [pc, #620]	; (80075e8 <tcp_input+0x280>)
 800737a:	2283      	movs	r2, #131	; 0x83
 800737c:	499b      	ldr	r1, [pc, #620]	; (80075ec <tcp_input+0x284>)
 800737e:	489c      	ldr	r0, [pc, #624]	; (80075f0 <tcp_input+0x288>)
 8007380:	f007 f8a6 	bl	800e4d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a9a      	ldr	r2, [pc, #616]	; (80075f4 <tcp_input+0x28c>)
 800738a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	895b      	ldrh	r3, [r3, #10]
 8007390:	2b13      	cmp	r3, #19
 8007392:	f240 83c4 	bls.w	8007b1e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007396:	4b98      	ldr	r3, [pc, #608]	; (80075f8 <tcp_input+0x290>)
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	4a97      	ldr	r2, [pc, #604]	; (80075f8 <tcp_input+0x290>)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f006 f86b 	bl	800d47c <ip4_addr_isbroadcast_u32>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 83ba 	bne.w	8007b22 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80073ae:	4b92      	ldr	r3, [pc, #584]	; (80075f8 <tcp_input+0x290>)
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80073b6:	2be0      	cmp	r3, #224	; 0xe0
 80073b8:	f000 83b3 	beq.w	8007b22 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80073bc:	4b8d      	ldr	r3, [pc, #564]	; (80075f4 <tcp_input+0x28c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	899b      	ldrh	r3, [r3, #12]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fc fc43 	bl	8003c50 <lwip_htons>
 80073ca:	4603      	mov	r3, r0
 80073cc:	0b1b      	lsrs	r3, r3, #12
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80073d6:	7cbb      	ldrb	r3, [r7, #18]
 80073d8:	2b13      	cmp	r3, #19
 80073da:	f240 83a4 	bls.w	8007b26 <tcp_input+0x7be>
 80073de:	7cbb      	ldrb	r3, [r7, #18]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	891b      	ldrh	r3, [r3, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f200 839d 	bhi.w	8007b26 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80073ec:	7cbb      	ldrb	r3, [r7, #18]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b14      	subs	r3, #20
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	4b81      	ldr	r3, [pc, #516]	; (80075fc <tcp_input+0x294>)
 80073f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80073f8:	4b81      	ldr	r3, [pc, #516]	; (8007600 <tcp_input+0x298>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	895a      	ldrh	r2, [r3, #10]
 8007402:	7cbb      	ldrb	r3, [r7, #18]
 8007404:	b29b      	uxth	r3, r3
 8007406:	429a      	cmp	r2, r3
 8007408:	d309      	bcc.n	800741e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800740a:	4b7c      	ldr	r3, [pc, #496]	; (80075fc <tcp_input+0x294>)
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	4b7d      	ldr	r3, [pc, #500]	; (8007604 <tcp_input+0x29c>)
 8007410:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007412:	7cbb      	ldrb	r3, [r7, #18]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fd fe48 	bl	80050ac <pbuf_remove_header>
 800741c:	e04e      	b.n	80074bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d105      	bne.n	8007432 <tcp_input+0xca>
 8007426:	4b70      	ldr	r3, [pc, #448]	; (80075e8 <tcp_input+0x280>)
 8007428:	22c2      	movs	r2, #194	; 0xc2
 800742a:	4977      	ldr	r1, [pc, #476]	; (8007608 <tcp_input+0x2a0>)
 800742c:	4870      	ldr	r0, [pc, #448]	; (80075f0 <tcp_input+0x288>)
 800742e:	f007 f84f 	bl	800e4d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007432:	2114      	movs	r1, #20
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fd fe39 	bl	80050ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	895a      	ldrh	r2, [r3, #10]
 800743e:	4b71      	ldr	r3, [pc, #452]	; (8007604 <tcp_input+0x29c>)
 8007440:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007442:	4b6e      	ldr	r3, [pc, #440]	; (80075fc <tcp_input+0x294>)
 8007444:	881a      	ldrh	r2, [r3, #0]
 8007446:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <tcp_input+0x29c>)
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800744e:	4b6d      	ldr	r3, [pc, #436]	; (8007604 <tcp_input+0x29c>)
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fd fe29 	bl	80050ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	895b      	ldrh	r3, [r3, #10]
 8007460:	8a3a      	ldrh	r2, [r7, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	f200 8361 	bhi.w	8007b2a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4a64      	ldr	r2, [pc, #400]	; (8007600 <tcp_input+0x298>)
 8007470:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	8a3a      	ldrh	r2, [r7, #16]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fd fe16 	bl	80050ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	891a      	ldrh	r2, [r3, #8]
 8007484:	8a3b      	ldrh	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	895b      	ldrh	r3, [r3, #10]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <tcp_input+0x13a>
 8007496:	4b54      	ldr	r3, [pc, #336]	; (80075e8 <tcp_input+0x280>)
 8007498:	22df      	movs	r2, #223	; 0xdf
 800749a:	495c      	ldr	r1, [pc, #368]	; (800760c <tcp_input+0x2a4>)
 800749c:	4854      	ldr	r0, [pc, #336]	; (80075f0 <tcp_input+0x288>)
 800749e:	f007 f817 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	891a      	ldrh	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	891b      	ldrh	r3, [r3, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d005      	beq.n	80074bc <tcp_input+0x154>
 80074b0:	4b4d      	ldr	r3, [pc, #308]	; (80075e8 <tcp_input+0x280>)
 80074b2:	22e0      	movs	r2, #224	; 0xe0
 80074b4:	4956      	ldr	r1, [pc, #344]	; (8007610 <tcp_input+0x2a8>)
 80074b6:	484e      	ldr	r0, [pc, #312]	; (80075f0 <tcp_input+0x288>)
 80074b8:	f007 f80a 	bl	800e4d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80074bc:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <tcp_input+0x28c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4a4b      	ldr	r2, [pc, #300]	; (80075f4 <tcp_input+0x28c>)
 80074c6:	6814      	ldr	r4, [r2, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fc fbc1 	bl	8003c50 <lwip_htons>
 80074ce:	4603      	mov	r3, r0
 80074d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80074d2:	4b48      	ldr	r3, [pc, #288]	; (80075f4 <tcp_input+0x28c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4a46      	ldr	r2, [pc, #280]	; (80075f4 <tcp_input+0x28c>)
 80074dc:	6814      	ldr	r4, [r2, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fc fbb6 	bl	8003c50 <lwip_htons>
 80074e4:	4603      	mov	r3, r0
 80074e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <tcp_input+0x28c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4a41      	ldr	r2, [pc, #260]	; (80075f4 <tcp_input+0x28c>)
 80074f0:	6814      	ldr	r4, [r2, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fc fbc1 	bl	8003c7a <lwip_htonl>
 80074f8:	4603      	mov	r3, r0
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	4a45      	ldr	r2, [pc, #276]	; (8007614 <tcp_input+0x2ac>)
 8007500:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007502:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <tcp_input+0x28c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a3a      	ldr	r2, [pc, #232]	; (80075f4 <tcp_input+0x28c>)
 800750a:	6814      	ldr	r4, [r2, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fc fbb4 	bl	8003c7a <lwip_htonl>
 8007512:	4603      	mov	r3, r0
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <tcp_input+0x2b0>)
 800751a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800751c:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <tcp_input+0x28c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	89db      	ldrh	r3, [r3, #14]
 8007522:	b29b      	uxth	r3, r3
 8007524:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <tcp_input+0x28c>)
 8007526:	6814      	ldr	r4, [r2, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc fb91 	bl	8003c50 <lwip_htons>
 800752e:	4603      	mov	r3, r0
 8007530:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007532:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <tcp_input+0x28c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	899b      	ldrh	r3, [r3, #12]
 8007538:	b29b      	uxth	r3, r3
 800753a:	4618      	mov	r0, r3
 800753c:	f7fc fb88 	bl	8003c50 <lwip_htons>
 8007540:	4603      	mov	r3, r0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <tcp_input+0x2b4>)
 800754c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	891a      	ldrh	r2, [r3, #8]
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <tcp_input+0x2b8>)
 8007554:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007556:	4b31      	ldr	r3, [pc, #196]	; (800761c <tcp_input+0x2b4>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <tcp_input+0x214>
    tcplen++;
 8007562:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <tcp_input+0x2b8>)
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <tcp_input+0x2b8>)
 800756c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	891a      	ldrh	r2, [r3, #8]
 8007572:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <tcp_input+0x2b8>)
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	f200 82d9 	bhi.w	8007b2e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <tcp_input+0x2bc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e09d      	b.n	80076c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	7d1b      	ldrb	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d105      	bne.n	800759c <tcp_input+0x234>
 8007590:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <tcp_input+0x280>)
 8007592:	22fb      	movs	r2, #251	; 0xfb
 8007594:	4924      	ldr	r1, [pc, #144]	; (8007628 <tcp_input+0x2c0>)
 8007596:	4816      	ldr	r0, [pc, #88]	; (80075f0 <tcp_input+0x288>)
 8007598:	f006 ff9a 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	7d1b      	ldrb	r3, [r3, #20]
 80075a0:	2b0a      	cmp	r3, #10
 80075a2:	d105      	bne.n	80075b0 <tcp_input+0x248>
 80075a4:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <tcp_input+0x280>)
 80075a6:	22fc      	movs	r2, #252	; 0xfc
 80075a8:	4920      	ldr	r1, [pc, #128]	; (800762c <tcp_input+0x2c4>)
 80075aa:	4811      	ldr	r0, [pc, #68]	; (80075f0 <tcp_input+0x288>)
 80075ac:	f006 ff90 	bl	800e4d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	7d1b      	ldrb	r3, [r3, #20]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d105      	bne.n	80075c4 <tcp_input+0x25c>
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <tcp_input+0x280>)
 80075ba:	22fd      	movs	r2, #253	; 0xfd
 80075bc:	491c      	ldr	r1, [pc, #112]	; (8007630 <tcp_input+0x2c8>)
 80075be:	480c      	ldr	r0, [pc, #48]	; (80075f0 <tcp_input+0x288>)
 80075c0:	f006 ff86 	bl	800e4d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	7a1b      	ldrb	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d033      	beq.n	8007634 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	7a1a      	ldrb	r2, [r3, #8]
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <tcp_input+0x290>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d8:	3301      	adds	r3, #1
 80075da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80075dc:	429a      	cmp	r2, r3
 80075de:	d029      	beq.n	8007634 <tcp_input+0x2cc>
      prev = pcb;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	61bb      	str	r3, [r7, #24]
      continue;
 80075e4:	e06b      	b.n	80076be <tcp_input+0x356>
 80075e6:	bf00      	nop
 80075e8:	080107dc 	.word	0x080107dc
 80075ec:	08010810 	.word	0x08010810
 80075f0:	08010828 	.word	0x08010828
 80075f4:	200000dc 	.word	0x200000dc
 80075f8:	20003358 	.word	0x20003358
 80075fc:	200000e0 	.word	0x200000e0
 8007600:	200000e4 	.word	0x200000e4
 8007604:	200000e2 	.word	0x200000e2
 8007608:	08010850 	.word	0x08010850
 800760c:	08010860 	.word	0x08010860
 8007610:	0801086c 	.word	0x0801086c
 8007614:	200000ec 	.word	0x200000ec
 8007618:	200000f0 	.word	0x200000f0
 800761c:	200000f8 	.word	0x200000f8
 8007620:	200000f6 	.word	0x200000f6
 8007624:	20008a5c 	.word	0x20008a5c
 8007628:	0801088c 	.word	0x0801088c
 800762c:	080108b4 	.word	0x080108b4
 8007630:	080108e0 	.word	0x080108e0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	8b1a      	ldrh	r2, [r3, #24]
 8007638:	4b94      	ldr	r3, [pc, #592]	; (800788c <tcp_input+0x524>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	429a      	cmp	r2, r3
 8007642:	d13a      	bne.n	80076ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	8ada      	ldrh	r2, [r3, #22]
 8007648:	4b90      	ldr	r3, [pc, #576]	; (800788c <tcp_input+0x524>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007650:	429a      	cmp	r2, r3
 8007652:	d132      	bne.n	80076ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	4b8d      	ldr	r3, [pc, #564]	; (8007890 <tcp_input+0x528>)
 800765a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800765c:	429a      	cmp	r2, r3
 800765e:	d12c      	bne.n	80076ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b8a      	ldr	r3, [pc, #552]	; (8007890 <tcp_input+0x528>)
 8007666:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007668:	429a      	cmp	r2, r3
 800766a:	d126      	bne.n	80076ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	429a      	cmp	r2, r3
 8007674:	d106      	bne.n	8007684 <tcp_input+0x31c>
 8007676:	4b87      	ldr	r3, [pc, #540]	; (8007894 <tcp_input+0x52c>)
 8007678:	f240 120d 	movw	r2, #269	; 0x10d
 800767c:	4986      	ldr	r1, [pc, #536]	; (8007898 <tcp_input+0x530>)
 800767e:	4887      	ldr	r0, [pc, #540]	; (800789c <tcp_input+0x534>)
 8007680:	f006 ff26 	bl	800e4d0 <iprintf>
      if (prev != NULL) {
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007692:	4b83      	ldr	r3, [pc, #524]	; (80078a0 <tcp_input+0x538>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800769a:	4a81      	ldr	r2, [pc, #516]	; (80078a0 <tcp_input+0x538>)
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d111      	bne.n	80076ce <tcp_input+0x366>
 80076aa:	4b7a      	ldr	r3, [pc, #488]	; (8007894 <tcp_input+0x52c>)
 80076ac:	f240 1215 	movw	r2, #277	; 0x115
 80076b0:	497c      	ldr	r1, [pc, #496]	; (80078a4 <tcp_input+0x53c>)
 80076b2:	487a      	ldr	r0, [pc, #488]	; (800789c <tcp_input+0x534>)
 80076b4:	f006 ff0c 	bl	800e4d0 <iprintf>
      break;
 80076b8:	e009      	b.n	80076ce <tcp_input+0x366>
    }
    prev = pcb;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f47f af5e 	bne.w	8007588 <tcp_input+0x220>
 80076cc:	e000      	b.n	80076d0 <tcp_input+0x368>
      break;
 80076ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f040 8095 	bne.w	8007802 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076d8:	4b73      	ldr	r3, [pc, #460]	; (80078a8 <tcp_input+0x540>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e03f      	b.n	8007760 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	7d1b      	ldrb	r3, [r3, #20]
 80076e4:	2b0a      	cmp	r3, #10
 80076e6:	d006      	beq.n	80076f6 <tcp_input+0x38e>
 80076e8:	4b6a      	ldr	r3, [pc, #424]	; (8007894 <tcp_input+0x52c>)
 80076ea:	f240 121f 	movw	r2, #287	; 0x11f
 80076ee:	496f      	ldr	r1, [pc, #444]	; (80078ac <tcp_input+0x544>)
 80076f0:	486a      	ldr	r0, [pc, #424]	; (800789c <tcp_input+0x534>)
 80076f2:	f006 feed 	bl	800e4d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	7a1a      	ldrb	r2, [r3, #8]
 8007702:	4b63      	ldr	r3, [pc, #396]	; (8007890 <tcp_input+0x528>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800770a:	3301      	adds	r3, #1
 800770c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800770e:	429a      	cmp	r2, r3
 8007710:	d122      	bne.n	8007758 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	8b1a      	ldrh	r2, [r3, #24]
 8007716:	4b5d      	ldr	r3, [pc, #372]	; (800788c <tcp_input+0x524>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	429a      	cmp	r2, r3
 8007720:	d11b      	bne.n	800775a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	8ada      	ldrh	r2, [r3, #22]
 8007726:	4b59      	ldr	r3, [pc, #356]	; (800788c <tcp_input+0x524>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800772e:	429a      	cmp	r2, r3
 8007730:	d113      	bne.n	800775a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	4b56      	ldr	r3, [pc, #344]	; (8007890 <tcp_input+0x528>)
 8007738:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800773a:	429a      	cmp	r2, r3
 800773c:	d10d      	bne.n	800775a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b53      	ldr	r3, [pc, #332]	; (8007890 <tcp_input+0x528>)
 8007744:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007746:	429a      	cmp	r2, r3
 8007748:	d107      	bne.n	800775a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800774a:	69f8      	ldr	r0, [r7, #28]
 800774c:	f000 fb54 	bl	8007df8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fd fd31 	bl	80051b8 <pbuf_free>
        return;
 8007756:	e1f0      	b.n	8007b3a <tcp_input+0x7d2>
        continue;
 8007758:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1bc      	bne.n	80076e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800776a:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <tcp_input+0x548>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e02a      	b.n	80077c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	7a1a      	ldrb	r2, [r3, #8]
 800777e:	4b44      	ldr	r3, [pc, #272]	; (8007890 <tcp_input+0x528>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007786:	3301      	adds	r3, #1
 8007788:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800778a:	429a      	cmp	r2, r3
 800778c:	d002      	beq.n	8007794 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	61bb      	str	r3, [r7, #24]
        continue;
 8007792:	e016      	b.n	80077c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	8ada      	ldrh	r2, [r3, #22]
 8007798:	4b3c      	ldr	r3, [pc, #240]	; (800788c <tcp_input+0x524>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d10c      	bne.n	80077be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b39      	ldr	r3, [pc, #228]	; (8007890 <tcp_input+0x528>)
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d00f      	beq.n	80077d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <tcp_input+0x46a>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1d1      	bne.n	8007772 <tcp_input+0x40a>
 80077ce:	e000      	b.n	80077d2 <tcp_input+0x46a>
            break;
 80077d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d014      	beq.n	8007802 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80077e6:	4b32      	ldr	r3, [pc, #200]	; (80078b0 <tcp_input+0x548>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80077ee:	4a30      	ldr	r2, [pc, #192]	; (80078b0 <tcp_input+0x548>)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80077f4:	6978      	ldr	r0, [r7, #20]
 80077f6:	f000 fa01 	bl	8007bfc <tcp_listen_input>
      }
      pbuf_free(p);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fd fcdc 	bl	80051b8 <pbuf_free>
      return;
 8007800:	e19b      	b.n	8007b3a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8160 	beq.w	8007aca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800780a:	4b2a      	ldr	r3, [pc, #168]	; (80078b4 <tcp_input+0x54c>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	891a      	ldrh	r2, [r3, #8]
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <tcp_input+0x54c>)
 8007816:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007818:	4a26      	ldr	r2, [pc, #152]	; (80078b4 <tcp_input+0x54c>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <tcp_input+0x524>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <tcp_input+0x54c>)
 8007824:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007826:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <tcp_input+0x550>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800782c:	4b23      	ldr	r3, [pc, #140]	; (80078bc <tcp_input+0x554>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <tcp_input+0x558>)
 8007834:	2200      	movs	r2, #0
 8007836:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007838:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <tcp_input+0x55c>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b00      	cmp	r3, #0
 8007842:	d006      	beq.n	8007852 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7b5b      	ldrb	r3, [r3, #13]
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	2b00      	cmp	r3, #0
 8007858:	d038      	beq.n	80078cc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800785a:	69f8      	ldr	r0, [r7, #28]
 800785c:	f7ff f858 	bl	8006910 <tcp_process_refused_data>
 8007860:	4603      	mov	r3, r0
 8007862:	f113 0f0d 	cmn.w	r3, #13
 8007866:	d007      	beq.n	8007878 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02d      	beq.n	80078cc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007870:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <tcp_input+0x560>)
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d029      	beq.n	80078cc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8104 	bne.w	8007a8a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007882:	69f8      	ldr	r0, [r7, #28]
 8007884:	f003 fe16 	bl	800b4b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007888:	e0ff      	b.n	8007a8a <tcp_input+0x722>
 800788a:	bf00      	nop
 800788c:	200000dc 	.word	0x200000dc
 8007890:	20003358 	.word	0x20003358
 8007894:	080107dc 	.word	0x080107dc
 8007898:	08010908 	.word	0x08010908
 800789c:	08010828 	.word	0x08010828
 80078a0:	20008a5c 	.word	0x20008a5c
 80078a4:	08010934 	.word	0x08010934
 80078a8:	20008a6c 	.word	0x20008a6c
 80078ac:	08010960 	.word	0x08010960
 80078b0:	20008a64 	.word	0x20008a64
 80078b4:	200000cc 	.word	0x200000cc
 80078b8:	200000fc 	.word	0x200000fc
 80078bc:	200000f9 	.word	0x200000f9
 80078c0:	200000f4 	.word	0x200000f4
 80078c4:	200000f8 	.word	0x200000f8
 80078c8:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 80078cc:	4a9c      	ldr	r2, [pc, #624]	; (8007b40 <tcp_input+0x7d8>)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f000 fb0a 	bl	8007eec <tcp_process>
 80078d8:	4603      	mov	r3, r0
 80078da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80078dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078e0:	f113 0f0d 	cmn.w	r3, #13
 80078e4:	f000 80d3 	beq.w	8007a8e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80078e8:	4b96      	ldr	r3, [pc, #600]	; (8007b44 <tcp_input+0x7dc>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d015      	beq.n	8007920 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <tcp_input+0x5a8>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	6912      	ldr	r2, [r2, #16]
 8007908:	f06f 010d 	mvn.w	r1, #13
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	488d      	ldr	r0, [pc, #564]	; (8007b48 <tcp_input+0x7e0>)
 8007914:	f7ff fbb0 	bl	8007078 <tcp_pcb_remove>
        tcp_free(pcb);
 8007918:	69f8      	ldr	r0, [r7, #28]
 800791a:	f7fd fefd 	bl	8005718 <tcp_free>
 800791e:	e0c1      	b.n	8007aa4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007924:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <tcp_input+0x7e4>)
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01d      	beq.n	8007968 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800792c:	4b87      	ldr	r3, [pc, #540]	; (8007b4c <tcp_input+0x7e4>)
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <tcp_input+0x5ea>
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	6910      	ldr	r0, [r2, #16]
 8007946:	89fa      	ldrh	r2, [r7, #14]
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	74fb      	strb	r3, [r7, #19]
 8007950:	e001      	b.n	8007956 <tcp_input+0x5ee>
 8007952:	2300      	movs	r3, #0
 8007954:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007956:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800795a:	f113 0f0d 	cmn.w	r3, #13
 800795e:	f000 8098 	beq.w	8007a92 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007962:	4b7a      	ldr	r3, [pc, #488]	; (8007b4c <tcp_input+0x7e4>)
 8007964:	2200      	movs	r2, #0
 8007966:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007968:	69f8      	ldr	r0, [r7, #28]
 800796a:	f000 f907 	bl	8007b7c <tcp_input_delayed_close>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 8090 	bne.w	8007a96 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007976:	4b76      	ldr	r3, [pc, #472]	; (8007b50 <tcp_input+0x7e8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d041      	beq.n	8007a02 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007982:	2b00      	cmp	r3, #0
 8007984:	d006      	beq.n	8007994 <tcp_input+0x62c>
 8007986:	4b73      	ldr	r3, [pc, #460]	; (8007b54 <tcp_input+0x7ec>)
 8007988:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800798c:	4972      	ldr	r1, [pc, #456]	; (8007b58 <tcp_input+0x7f0>)
 800798e:	4873      	ldr	r0, [pc, #460]	; (8007b5c <tcp_input+0x7f4>)
 8007990:	f006 fd9e 	bl	800e4d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	8b5b      	ldrh	r3, [r3, #26]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80079a0:	4b6b      	ldr	r3, [pc, #428]	; (8007b50 <tcp_input+0x7e8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd fc07 	bl	80051b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80079aa:	69f8      	ldr	r0, [r7, #28]
 80079ac:	f7fe f99c 	bl	8005ce8 <tcp_abort>
            goto aborted;
 80079b0:	e078      	b.n	8007aa4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <tcp_input+0x66e>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	6918      	ldr	r0, [r3, #16]
 80079c6:	4b62      	ldr	r3, [pc, #392]	; (8007b50 <tcp_input+0x7e8>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	47a0      	blx	r4
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
 80079d4:	e008      	b.n	80079e8 <tcp_input+0x680>
 80079d6:	4b5e      	ldr	r3, [pc, #376]	; (8007b50 <tcp_input+0x7e8>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	2000      	movs	r0, #0
 80079e0:	f7ff f88a 	bl	8006af8 <tcp_recv_null>
 80079e4:	4603      	mov	r3, r0
 80079e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80079e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079ec:	f113 0f0d 	cmn.w	r3, #13
 80079f0:	d053      	beq.n	8007a9a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80079f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80079fa:	4b55      	ldr	r3, [pc, #340]	; (8007b50 <tcp_input+0x7e8>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007a02:	4b50      	ldr	r3, [pc, #320]	; (8007b44 <tcp_input+0x7dc>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d030      	beq.n	8007a70 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1a:	7b5a      	ldrb	r2, [r3, #13]
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a20:	f042 0220 	orr.w	r2, r2, #32
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	735a      	strb	r2, [r3, #13]
 8007a28:	e022      	b.n	8007a70 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a32:	d005      	beq.n	8007a40 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	3301      	adds	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <tcp_input+0x6fa>
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	6918      	ldr	r0, [r3, #16]
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	47a0      	blx	r4
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	74fb      	strb	r3, [r7, #19]
 8007a60:	e001      	b.n	8007a66 <tcp_input+0x6fe>
 8007a62:	2300      	movs	r3, #0
 8007a64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007a66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a6a:	f113 0f0d 	cmn.w	r3, #13
 8007a6e:	d016      	beq.n	8007a9e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007a70:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <tcp_input+0x7d8>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007a76:	69f8      	ldr	r0, [r7, #28]
 8007a78:	f000 f880 	bl	8007b7c <tcp_input_delayed_close>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10f      	bne.n	8007aa2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007a82:	69f8      	ldr	r0, [r7, #28]
 8007a84:	f002 ff10 	bl	800a8a8 <tcp_output>
 8007a88:	e00c      	b.n	8007aa4 <tcp_input+0x73c>
        goto aborted;
 8007a8a:	bf00      	nop
 8007a8c:	e00a      	b.n	8007aa4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007a8e:	bf00      	nop
 8007a90:	e008      	b.n	8007aa4 <tcp_input+0x73c>
              goto aborted;
 8007a92:	bf00      	nop
 8007a94:	e006      	b.n	8007aa4 <tcp_input+0x73c>
          goto aborted;
 8007a96:	bf00      	nop
 8007a98:	e004      	b.n	8007aa4 <tcp_input+0x73c>
            goto aborted;
 8007a9a:	bf00      	nop
 8007a9c:	e002      	b.n	8007aa4 <tcp_input+0x73c>
              goto aborted;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <tcp_input+0x73c>
          goto aborted;
 8007aa2:	bf00      	nop
    tcp_input_pcb = NULL;
 8007aa4:	4b26      	ldr	r3, [pc, #152]	; (8007b40 <tcp_input+0x7d8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007aaa:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <tcp_input+0x7e8>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007ab0:	4b2b      	ldr	r3, [pc, #172]	; (8007b60 <tcp_input+0x7f8>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03f      	beq.n	8007b38 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007ab8:	4b29      	ldr	r3, [pc, #164]	; (8007b60 <tcp_input+0x7f8>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd fb7b 	bl	80051b8 <pbuf_free>
      inseg.p = NULL;
 8007ac2:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <tcp_input+0x7f8>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007ac8:	e036      	b.n	8007b38 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007aca:	4b26      	ldr	r3, [pc, #152]	; (8007b64 <tcp_input+0x7fc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	899b      	ldrh	r3, [r3, #12]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fc f8bc 	bl	8003c50 <lwip_htons>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d118      	bne.n	8007b16 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <tcp_input+0x800>)
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <tcp_input+0x804>)
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <tcp_input+0x808>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af4:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <tcp_input+0x7fc>)
 8007af6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007afc:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <tcp_input+0x7fc>)
 8007afe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b00:	8812      	ldrh	r2, [r2, #0]
 8007b02:	b292      	uxth	r2, r2
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <tcp_input+0x80c>)
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <tcp_input+0x810>)
 8007b0e:	4602      	mov	r2, r0
 8007b10:	2000      	movs	r0, #0
 8007b12:	f003 fc7d 	bl	800b410 <tcp_rst>
    pbuf_free(p);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fd fb4e 	bl	80051b8 <pbuf_free>
  return;
 8007b1c:	e00c      	b.n	8007b38 <tcp_input+0x7d0>
    goto dropped;
 8007b1e:	bf00      	nop
 8007b20:	e006      	b.n	8007b30 <tcp_input+0x7c8>
    goto dropped;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <tcp_input+0x7c8>
    goto dropped;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <tcp_input+0x7c8>
      goto dropped;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <tcp_input+0x7c8>
      goto dropped;
 8007b2e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fd fb41 	bl	80051b8 <pbuf_free>
 8007b36:	e000      	b.n	8007b3a <tcp_input+0x7d2>
  return;
 8007b38:	bf00      	nop
}
 8007b3a:	3724      	adds	r7, #36	; 0x24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd90      	pop	{r4, r7, pc}
 8007b40:	20008a70 	.word	0x20008a70
 8007b44:	200000f9 	.word	0x200000f9
 8007b48:	20008a5c 	.word	0x20008a5c
 8007b4c:	200000f4 	.word	0x200000f4
 8007b50:	200000fc 	.word	0x200000fc
 8007b54:	080107dc 	.word	0x080107dc
 8007b58:	08010990 	.word	0x08010990
 8007b5c:	08010828 	.word	0x08010828
 8007b60:	200000cc 	.word	0x200000cc
 8007b64:	200000dc 	.word	0x200000dc
 8007b68:	200000f0 	.word	0x200000f0
 8007b6c:	200000f6 	.word	0x200000f6
 8007b70:	200000ec 	.word	0x200000ec
 8007b74:	20003368 	.word	0x20003368
 8007b78:	2000336c 	.word	0x2000336c

08007b7c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <tcp_input_delayed_close+0x1c>
 8007b8a:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <tcp_input_delayed_close+0x6c>)
 8007b8c:	f240 225a 	movw	r2, #602	; 0x25a
 8007b90:	4916      	ldr	r1, [pc, #88]	; (8007bec <tcp_input_delayed_close+0x70>)
 8007b92:	4817      	ldr	r0, [pc, #92]	; (8007bf0 <tcp_input_delayed_close+0x74>)
 8007b94:	f006 fc9c 	bl	800e4d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007b98:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <tcp_input_delayed_close+0x78>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01c      	beq.n	8007bde <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10d      	bne.n	8007bcc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <tcp_input_delayed_close+0x50>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6912      	ldr	r2, [r2, #16]
 8007bc4:	f06f 010e 	mvn.w	r1, #14
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	480a      	ldr	r0, [pc, #40]	; (8007bf8 <tcp_input_delayed_close+0x7c>)
 8007bd0:	f7ff fa52 	bl	8007078 <tcp_pcb_remove>
    tcp_free(pcb);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fd fd9f 	bl	8005718 <tcp_free>
    return 1;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	080107dc 	.word	0x080107dc
 8007bec:	080109ac 	.word	0x080109ac
 8007bf0:	08010828 	.word	0x08010828
 8007bf4:	200000f9 	.word	0x200000f9
 8007bf8:	20008a5c 	.word	0x20008a5c

08007bfc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b08b      	sub	sp, #44	; 0x2c
 8007c00:	af04      	add	r7, sp, #16
 8007c02:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007c04:	4b6f      	ldr	r3, [pc, #444]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 80d2 	bne.w	8007db6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <tcp_listen_input+0x2a>
 8007c18:	4b6b      	ldr	r3, [pc, #428]	; (8007dc8 <tcp_listen_input+0x1cc>)
 8007c1a:	f240 2281 	movw	r2, #641	; 0x281
 8007c1e:	496b      	ldr	r1, [pc, #428]	; (8007dcc <tcp_listen_input+0x1d0>)
 8007c20:	486b      	ldr	r0, [pc, #428]	; (8007dd0 <tcp_listen_input+0x1d4>)
 8007c22:	f006 fc55 	bl	800e4d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007c26:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c32:	4b68      	ldr	r3, [pc, #416]	; (8007dd4 <tcp_listen_input+0x1d8>)
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <tcp_listen_input+0x1dc>)
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4b67      	ldr	r3, [pc, #412]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c42:	4b67      	ldr	r3, [pc, #412]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c46:	885b      	ldrh	r3, [r3, #2]
 8007c48:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c4a:	4a65      	ldr	r2, [pc, #404]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007c4c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c4e:	8812      	ldrh	r2, [r2, #0]
 8007c50:	b292      	uxth	r2, r2
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	4b63      	ldr	r3, [pc, #396]	; (8007de4 <tcp_listen_input+0x1e8>)
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4b63      	ldr	r3, [pc, #396]	; (8007de8 <tcp_listen_input+0x1ec>)
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f003 fbd6 	bl	800b410 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007c64:	e0a9      	b.n	8007dba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007c66:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <tcp_listen_input+0x1c8>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80a3 	beq.w	8007dba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7d5b      	ldrb	r3, [r3, #21]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f861 	bl	8006d40 <tcp_alloc>
 8007c7e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d111      	bne.n	8007caa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <tcp_listen_input+0xa8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6910      	ldr	r0, [r2, #16]
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73bb      	strb	r3, [r7, #14]
      return;
 8007ca2:	e08b      	b.n	8007dbc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ca4:	23f0      	movs	r3, #240	; 0xf0
 8007ca6:	73bb      	strb	r3, [r7, #14]
      return;
 8007ca8:	e088      	b.n	8007dbc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007caa:	4b50      	ldr	r3, [pc, #320]	; (8007dec <tcp_listen_input+0x1f0>)
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007cb2:	4b4e      	ldr	r3, [pc, #312]	; (8007dec <tcp_listen_input+0x1f0>)
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8ada      	ldrh	r2, [r3, #22]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007cc2:	4b47      	ldr	r3, [pc, #284]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007cd4:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007ce6:	6978      	ldr	r0, [r7, #20]
 8007ce8:	f7ff fa5a 	bl	80071a0 <tcp_next_iss>
 8007cec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d06:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <tcp_listen_input+0x1e0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7a1a      	ldrb	r2, [r3, #8]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007d34:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <tcp_listen_input+0x1f4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	60da      	str	r2, [r3, #12]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	; (8007df0 <tcp_listen_input+0x1f4>)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	f003 fd27 	bl	800b794 <tcp_timer_needed>
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <tcp_listen_input+0x1f8>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007d4c:	6978      	ldr	r0, [r7, #20]
 8007d4e:	f001 fd8d 	bl	800986c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007d52:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <tcp_listen_input+0x1e4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	89db      	ldrh	r3, [r3, #14]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f005 f8eb 	bl	800cf50 <ip4_route>
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	461a      	mov	r2, r3
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff fa32 	bl	80071ec <tcp_eff_send_mss_netif>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007d90:	2112      	movs	r1, #18
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f002 fc9a 	bl	800a6cc <tcp_enqueue_flags>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007da4:	2100      	movs	r1, #0
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f7fd fee0 	bl	8005b6c <tcp_abandon>
      return;
 8007dac:	e006      	b.n	8007dbc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007dae:	6978      	ldr	r0, [r7, #20]
 8007db0:	f002 fd7a 	bl	800a8a8 <tcp_output>
  return;
 8007db4:	e001      	b.n	8007dba <tcp_listen_input+0x1be>
    return;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <tcp_listen_input+0x1c0>
  return;
 8007dba:	bf00      	nop
}
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200000f8 	.word	0x200000f8
 8007dc8:	080107dc 	.word	0x080107dc
 8007dcc:	080109d4 	.word	0x080109d4
 8007dd0:	08010828 	.word	0x08010828
 8007dd4:	200000f0 	.word	0x200000f0
 8007dd8:	200000f6 	.word	0x200000f6
 8007ddc:	200000ec 	.word	0x200000ec
 8007de0:	200000dc 	.word	0x200000dc
 8007de4:	20003368 	.word	0x20003368
 8007de8:	2000336c 	.word	0x2000336c
 8007dec:	20003358 	.word	0x20003358
 8007df0:	20008a5c 	.word	0x20008a5c
 8007df4:	20008a58 	.word	0x20008a58

08007df8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af04      	add	r7, sp, #16
 8007dfe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007e00:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f003 0304 	and.w	r3, r3, #4
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d153      	bne.n	8007eb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <tcp_timewait_input+0x28>
 8007e12:	4b2c      	ldr	r3, [pc, #176]	; (8007ec4 <tcp_timewait_input+0xcc>)
 8007e14:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007e18:	492b      	ldr	r1, [pc, #172]	; (8007ec8 <tcp_timewait_input+0xd0>)
 8007e1a:	482c      	ldr	r0, [pc, #176]	; (8007ecc <tcp_timewait_input+0xd4>)
 8007e1c:	f006 fb58 	bl	800e4d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007e20:	4b27      	ldr	r3, [pc, #156]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02a      	beq.n	8007e82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e2c:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db2d      	blt.n	8007e96 <tcp_timewait_input+0x9e>
 8007e3a:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007e46:	440b      	add	r3, r1
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dc23      	bgt.n	8007e96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e4e:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <tcp_timewait_input+0xdc>)
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	4b21      	ldr	r3, [pc, #132]	; (8007ed8 <tcp_timewait_input+0xe0>)
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <tcp_timewait_input+0xd8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <tcp_timewait_input+0xe4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e66:	4a1d      	ldr	r2, [pc, #116]	; (8007edc <tcp_timewait_input+0xe4>)
 8007e68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	b292      	uxth	r2, r2
 8007e6e:	9202      	str	r2, [sp, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <tcp_timewait_input+0xe8>)
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <tcp_timewait_input+0xec>)
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f003 fac8 	bl	800b410 <tcp_rst>
      return;
 8007e80:	e01b      	b.n	8007eba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <tcp_timewait_input+0xc8>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007e8e:	4b16      	ldr	r3, [pc, #88]	; (8007ee8 <tcp_timewait_input+0xf0>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <tcp_timewait_input+0xe0>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8b5b      	ldrh	r3, [r3, #26]
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f002 fcfb 	bl	800a8a8 <tcp_output>
  }
  return;
 8007eb2:	e001      	b.n	8007eb8 <tcp_timewait_input+0xc0>
    return;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <tcp_timewait_input+0xc2>
  return;
 8007eb8:	bf00      	nop
}
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200000f8 	.word	0x200000f8
 8007ec4:	080107dc 	.word	0x080107dc
 8007ec8:	080109f4 	.word	0x080109f4
 8007ecc:	08010828 	.word	0x08010828
 8007ed0:	200000ec 	.word	0x200000ec
 8007ed4:	200000f0 	.word	0x200000f0
 8007ed8:	200000f6 	.word	0x200000f6
 8007edc:	200000dc 	.word	0x200000dc
 8007ee0:	20003368 	.word	0x20003368
 8007ee4:	2000336c 	.word	0x2000336c
 8007ee8:	20008a60 	.word	0x20008a60

08007eec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b08d      	sub	sp, #52	; 0x34
 8007ef0:	af04      	add	r7, sp, #16
 8007ef2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <tcp_process+0x24>
 8007f02:	4ba5      	ldr	r3, [pc, #660]	; (8008198 <tcp_process+0x2ac>)
 8007f04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007f08:	49a4      	ldr	r1, [pc, #656]	; (800819c <tcp_process+0x2b0>)
 8007f0a:	48a5      	ldr	r0, [pc, #660]	; (80081a0 <tcp_process+0x2b4>)
 8007f0c:	f006 fae0 	bl	800e4d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007f10:	4ba4      	ldr	r3, [pc, #656]	; (80081a4 <tcp_process+0x2b8>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d04e      	beq.n	8007fba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d108      	bne.n	8007f36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f28:	4b9f      	ldr	r3, [pc, #636]	; (80081a8 <tcp_process+0x2bc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d123      	bne.n	8007f78 <tcp_process+0x8c>
        acceptable = 1;
 8007f30:	2301      	movs	r3, #1
 8007f32:	76fb      	strb	r3, [r7, #27]
 8007f34:	e020      	b.n	8007f78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3a:	4b9c      	ldr	r3, [pc, #624]	; (80081ac <tcp_process+0x2c0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d102      	bne.n	8007f48 <tcp_process+0x5c>
        acceptable = 1;
 8007f42:	2301      	movs	r3, #1
 8007f44:	76fb      	strb	r3, [r7, #27]
 8007f46:	e017      	b.n	8007f78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007f48:	4b98      	ldr	r3, [pc, #608]	; (80081ac <tcp_process+0x2c0>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	db10      	blt.n	8007f78 <tcp_process+0x8c>
 8007f56:	4b95      	ldr	r3, [pc, #596]	; (80081ac <tcp_process+0x2c0>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f62:	440b      	add	r3, r1
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dc06      	bgt.n	8007f78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8b5b      	ldrh	r3, [r3, #26]
 8007f6e:	f043 0302 	orr.w	r3, r3, #2
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007f78:	7efb      	ldrb	r3, [r7, #27]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01b      	beq.n	8007fb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7d1b      	ldrb	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <tcp_process+0xa8>
 8007f86:	4b84      	ldr	r3, [pc, #528]	; (8008198 <tcp_process+0x2ac>)
 8007f88:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007f8c:	4988      	ldr	r1, [pc, #544]	; (80081b0 <tcp_process+0x2c4>)
 8007f8e:	4884      	ldr	r0, [pc, #528]	; (80081a0 <tcp_process+0x2b4>)
 8007f90:	f006 fa9e 	bl	800e4d0 <iprintf>
      recv_flags |= TF_RESET;
 8007f94:	4b87      	ldr	r3, [pc, #540]	; (80081b4 <tcp_process+0x2c8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	4b85      	ldr	r3, [pc, #532]	; (80081b4 <tcp_process+0x2c8>)
 8007fa0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	8b5b      	ldrh	r3, [r3, #26]
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007fb0:	f06f 030d 	mvn.w	r3, #13
 8007fb4:	e37a      	b.n	80086ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e378      	b.n	80086ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007fba:	4b7a      	ldr	r3, [pc, #488]	; (80081a4 <tcp_process+0x2b8>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d010      	beq.n	8007fe8 <tcp_process+0xfc>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7d1b      	ldrb	r3, [r3, #20]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d00c      	beq.n	8007fe8 <tcp_process+0xfc>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d008      	beq.n	8007fe8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8b5b      	ldrh	r3, [r3, #26]
 8007fda:	f043 0302 	orr.w	r3, r3, #2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e361      	b.n	80086ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8b5b      	ldrh	r3, [r3, #26]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ff4:	4b70      	ldr	r3, [pc, #448]	; (80081b8 <tcp_process+0x2cc>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fc2d 	bl	800986c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7d1b      	ldrb	r3, [r3, #20]
 8008016:	3b02      	subs	r3, #2
 8008018:	2b07      	cmp	r3, #7
 800801a:	f200 8337 	bhi.w	800868c <tcp_process+0x7a0>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <tcp_process+0x138>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008045 	.word	0x08008045
 8008028:	08008275 	.word	0x08008275
 800802c:	080083ed 	.word	0x080083ed
 8008030:	08008417 	.word	0x08008417
 8008034:	0800853b 	.word	0x0800853b
 8008038:	080083ed 	.word	0x080083ed
 800803c:	080085c7 	.word	0x080085c7
 8008040:	08008657 	.word	0x08008657
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008044:	4b57      	ldr	r3, [pc, #348]	; (80081a4 <tcp_process+0x2b8>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80e4 	beq.w	800821a <tcp_process+0x32e>
 8008052:	4b54      	ldr	r3, [pc, #336]	; (80081a4 <tcp_process+0x2b8>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80dd 	beq.w	800821a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	4b50      	ldr	r3, [pc, #320]	; (80081a8 <tcp_process+0x2bc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	f040 80d5 	bne.w	800821a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008070:	4b4e      	ldr	r3, [pc, #312]	; (80081ac <tcp_process+0x2c0>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008082:	4b49      	ldr	r3, [pc, #292]	; (80081a8 <tcp_process+0x2bc>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800808a:	4b4c      	ldr	r3, [pc, #304]	; (80081bc <tcp_process+0x2d0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	89db      	ldrh	r3, [r3, #14]
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80080a4:	4b41      	ldr	r3, [pc, #260]	; (80081ac <tcp_process+0x2c0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2204      	movs	r2, #4
 80080b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f004 ff47 	bl	800cf50 <ip4_route>
 80080c2:	4601      	mov	r1, r0
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3304      	adds	r3, #4
 80080c8:	461a      	mov	r2, r3
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff f88e 	bl	80071ec <tcp_eff_send_mss_netif>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080dc:	009a      	lsls	r2, r3, #2
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	f241 111c 	movw	r1, #4380	; 0x111c
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf38      	it	cc
 80080ec:	460b      	movcc	r3, r1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d204      	bcs.n	80080fc <tcp_process+0x210>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	e00d      	b.n	8008118 <tcp_process+0x22c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	f241 121c 	movw	r2, #4380	; 0x111c
 8008106:	4293      	cmp	r3, r2
 8008108:	d904      	bls.n	8008114 <tcp_process+0x228>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	e001      	b.n	8008118 <tcp_process+0x22c>
 8008114:	f241 131c 	movw	r3, #4380	; 0x111c
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <tcp_process+0x24a>
 8008128:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <tcp_process+0x2ac>)
 800812a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800812e:	4924      	ldr	r1, [pc, #144]	; (80081c0 <tcp_process+0x2d4>)
 8008130:	481b      	ldr	r0, [pc, #108]	; (80081a0 <tcp_process+0x2b4>)
 8008132:	f006 f9cd 	bl	800e4d0 <iprintf>
        --pcb->snd_queuelen;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800813c:	3b01      	subs	r3, #1
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d111      	bne.n	8008176 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008156:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <tcp_process+0x280>
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <tcp_process+0x2ac>)
 8008160:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008164:	4917      	ldr	r1, [pc, #92]	; (80081c4 <tcp_process+0x2d8>)
 8008166:	480e      	ldr	r0, [pc, #56]	; (80081a0 <tcp_process+0x2b4>)
 8008168:	f006 f9b2 	bl	800e4d0 <iprintf>
          pcb->unsent = rseg->next;
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	66da      	str	r2, [r3, #108]	; 0x6c
 8008174:	e003      	b.n	800817e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800817e:	69f8      	ldr	r0, [r7, #28]
 8008180:	f7fe fc57 	bl	8006a32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11d      	bne.n	80081c8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008192:	861a      	strh	r2, [r3, #48]	; 0x30
 8008194:	e01f      	b.n	80081d6 <tcp_process+0x2ea>
 8008196:	bf00      	nop
 8008198:	080107dc 	.word	0x080107dc
 800819c:	08010a14 	.word	0x08010a14
 80081a0:	08010828 	.word	0x08010828
 80081a4:	200000f8 	.word	0x200000f8
 80081a8:	200000f0 	.word	0x200000f0
 80081ac:	200000ec 	.word	0x200000ec
 80081b0:	08010a30 	.word	0x08010a30
 80081b4:	200000f9 	.word	0x200000f9
 80081b8:	20008a60 	.word	0x20008a60
 80081bc:	200000dc 	.word	0x200000dc
 80081c0:	08010a50 	.word	0x08010a50
 80081c4:	08010a68 	.word	0x08010a68
        } else {
          pcb->rtime = 0;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <tcp_process+0x30a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6910      	ldr	r0, [r2, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	76bb      	strb	r3, [r7, #26]
 80081f4:	e001      	b.n	80081fa <tcp_process+0x30e>
 80081f6:	2300      	movs	r3, #0
 80081f8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80081fa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081fe:	f113 0f0d 	cmn.w	r3, #13
 8008202:	d102      	bne.n	800820a <tcp_process+0x31e>
          return ERR_ABRT;
 8008204:	f06f 030c 	mvn.w	r3, #12
 8008208:	e250      	b.n	80086ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8b5b      	ldrh	r3, [r3, #26]
 800820e:	f043 0302 	orr.w	r3, r3, #2
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008218:	e23a      	b.n	8008690 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800821a:	4b9d      	ldr	r3, [pc, #628]	; (8008490 <tcp_process+0x5a4>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8234 	beq.w	8008690 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008228:	4b9a      	ldr	r3, [pc, #616]	; (8008494 <tcp_process+0x5a8>)
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	4b9a      	ldr	r3, [pc, #616]	; (8008498 <tcp_process+0x5ac>)
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	4b9a      	ldr	r3, [pc, #616]	; (800849c <tcp_process+0x5b0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008238:	4b99      	ldr	r3, [pc, #612]	; (80084a0 <tcp_process+0x5b4>)
 800823a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008240:	4a97      	ldr	r2, [pc, #604]	; (80084a0 <tcp_process+0x5b4>)
 8008242:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008244:	8812      	ldrh	r2, [r2, #0]
 8008246:	b292      	uxth	r2, r2
 8008248:	9202      	str	r2, [sp, #8]
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	4b95      	ldr	r3, [pc, #596]	; (80084a4 <tcp_process+0x5b8>)
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4b95      	ldr	r3, [pc, #596]	; (80084a8 <tcp_process+0x5bc>)
 8008252:	4602      	mov	r2, r0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f003 f8db 	bl	800b410 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008260:	2b05      	cmp	r3, #5
 8008262:	f200 8215 	bhi.w	8008690 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f002 fea5 	bl	800afbc <tcp_rexmit_rto>
      break;
 8008272:	e20d      	b.n	8008690 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008274:	4b86      	ldr	r3, [pc, #536]	; (8008490 <tcp_process+0x5a4>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80a1 	beq.w	80083c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008282:	4b84      	ldr	r3, [pc, #528]	; (8008494 <tcp_process+0x5a8>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	db7e      	blt.n	8008390 <tcp_process+0x4a4>
 8008292:	4b80      	ldr	r3, [pc, #512]	; (8008494 <tcp_process+0x5a8>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc77      	bgt.n	8008390 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2204      	movs	r2, #4
 80082a4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80082ae:	23fa      	movs	r3, #250	; 0xfa
 80082b0:	76bb      	strb	r3, [r7, #26]
 80082b2:	e01d      	b.n	80082f0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <tcp_process+0x3e0>
 80082be:	4b7b      	ldr	r3, [pc, #492]	; (80084ac <tcp_process+0x5c0>)
 80082c0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80082c4:	497a      	ldr	r1, [pc, #488]	; (80084b0 <tcp_process+0x5c4>)
 80082c6:	487b      	ldr	r0, [pc, #492]	; (80084b4 <tcp_process+0x5c8>)
 80082c8:	f006 f902 	bl	800e4d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <tcp_process+0x400>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6910      	ldr	r0, [r2, #16]
 80082e0:	2200      	movs	r2, #0
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	76bb      	strb	r3, [r7, #26]
 80082ea:	e001      	b.n	80082f0 <tcp_process+0x404>
 80082ec:	23f0      	movs	r3, #240	; 0xf0
 80082ee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80082f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80082f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082fc:	f113 0f0d 	cmn.w	r3, #13
 8008300:	d002      	beq.n	8008308 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fd fcf0 	bl	8005ce8 <tcp_abort>
            }
            return ERR_ABRT;
 8008308:	f06f 030c 	mvn.w	r3, #12
 800830c:	e1ce      	b.n	80086ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fae0 	bl	80088d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008314:	4b68      	ldr	r3, [pc, #416]	; (80084b8 <tcp_process+0x5cc>)
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <tcp_process+0x43c>
            recv_acked--;
 800831c:	4b66      	ldr	r3, [pc, #408]	; (80084b8 <tcp_process+0x5cc>)
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <tcp_process+0x5cc>)
 8008326:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800832c:	009a      	lsls	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	f241 111c 	movw	r1, #4380	; 0x111c
 8008338:	428b      	cmp	r3, r1
 800833a:	bf38      	it	cc
 800833c:	460b      	movcc	r3, r1
 800833e:	429a      	cmp	r2, r3
 8008340:	d204      	bcs.n	800834c <tcp_process+0x460>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	b29b      	uxth	r3, r3
 800834a:	e00d      	b.n	8008368 <tcp_process+0x47c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	f241 121c 	movw	r2, #4380	; 0x111c
 8008356:	4293      	cmp	r3, r2
 8008358:	d904      	bls.n	8008364 <tcp_process+0x478>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	e001      	b.n	8008368 <tcp_process+0x47c>
 8008364:	f241 131c 	movw	r3, #4380	; 0x111c
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800836e:	4b53      	ldr	r3, [pc, #332]	; (80084bc <tcp_process+0x5d0>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d037      	beq.n	80083ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	8b5b      	ldrh	r3, [r3, #26]
 800837e:	f043 0302 	orr.w	r3, r3, #2
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2207      	movs	r2, #7
 800838c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800838e:	e02c      	b.n	80083ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008390:	4b40      	ldr	r3, [pc, #256]	; (8008494 <tcp_process+0x5a8>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	4b40      	ldr	r3, [pc, #256]	; (8008498 <tcp_process+0x5ac>)
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	4b40      	ldr	r3, [pc, #256]	; (800849c <tcp_process+0x5b0>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083a0:	4b3f      	ldr	r3, [pc, #252]	; (80084a0 <tcp_process+0x5b4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083a4:	885b      	ldrh	r3, [r3, #2]
 80083a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083a8:	4a3d      	ldr	r2, [pc, #244]	; (80084a0 <tcp_process+0x5b4>)
 80083aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ac:	8812      	ldrh	r2, [r2, #0]
 80083ae:	b292      	uxth	r2, r2
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <tcp_process+0x5b8>)
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <tcp_process+0x5bc>)
 80083ba:	4602      	mov	r2, r0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f003 f827 	bl	800b410 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80083c2:	e167      	b.n	8008694 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <tcp_process+0x5a4>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8161 	beq.w	8008694 <tcp_process+0x7a8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	1e5a      	subs	r2, r3, #1
 80083d8:	4b30      	ldr	r3, [pc, #192]	; (800849c <tcp_process+0x5b0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	f040 8159 	bne.w	8008694 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f002 fe0c 	bl	800b000 <tcp_rexmit>
      break;
 80083e8:	e154      	b.n	8008694 <tcp_process+0x7a8>
 80083ea:	e153      	b.n	8008694 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa71 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083f2:	4b32      	ldr	r3, [pc, #200]	; (80084bc <tcp_process+0x5d0>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 814c 	beq.w	8008698 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8b5b      	ldrh	r3, [r3, #26]
 8008404:	f043 0302 	orr.w	r3, r3, #2
 8008408:	b29a      	uxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2207      	movs	r2, #7
 8008412:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008414:	e140      	b.n	8008698 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa5c 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800841c:	4b27      	ldr	r3, [pc, #156]	; (80084bc <tcp_process+0x5d0>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0320 	and.w	r3, r3, #32
 8008424:	2b00      	cmp	r3, #0
 8008426:	d071      	beq.n	800850c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <tcp_process+0x5a4>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d060      	beq.n	80084f6 <tcp_process+0x60a>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <tcp_process+0x5a8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d15a      	bne.n	80084f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008444:	2b00      	cmp	r3, #0
 8008446:	d156      	bne.n	80084f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8b5b      	ldrh	r3, [r3, #26]
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fe fdbe 	bl	8006fd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <tcp_process+0x5d4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d105      	bne.n	8008472 <tcp_process+0x586>
 8008466:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <tcp_process+0x5d4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <tcp_process+0x5d4>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e02e      	b.n	80084d0 <tcp_process+0x5e4>
 8008472:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <tcp_process+0x5d4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e027      	b.n	80084ca <tcp_process+0x5de>
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d11f      	bne.n	80084c4 <tcp_process+0x5d8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	60da      	str	r2, [r3, #12]
 800848c:	e020      	b.n	80084d0 <tcp_process+0x5e4>
 800848e:	bf00      	nop
 8008490:	200000f8 	.word	0x200000f8
 8008494:	200000f0 	.word	0x200000f0
 8008498:	200000f6 	.word	0x200000f6
 800849c:	200000ec 	.word	0x200000ec
 80084a0:	200000dc 	.word	0x200000dc
 80084a4:	20003368 	.word	0x20003368
 80084a8:	2000336c 	.word	0x2000336c
 80084ac:	080107dc 	.word	0x080107dc
 80084b0:	08010a7c 	.word	0x08010a7c
 80084b4:	08010828 	.word	0x08010828
 80084b8:	200000f4 	.word	0x200000f4
 80084bc:	200000f9 	.word	0x200000f9
 80084c0:	20008a5c 	.word	0x20008a5c
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1d4      	bne.n	800847a <tcp_process+0x58e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	4b77      	ldr	r3, [pc, #476]	; (80086b4 <tcp_process+0x7c8>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	220a      	movs	r2, #10
 80084e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80084e2:	4b75      	ldr	r3, [pc, #468]	; (80086b8 <tcp_process+0x7cc>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	4a73      	ldr	r2, [pc, #460]	; (80086b8 <tcp_process+0x7cc>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	f003 f950 	bl	800b794 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80084f4:	e0d2      	b.n	800869c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8b5b      	ldrh	r3, [r3, #26]
 80084fa:	f043 0302 	orr.w	r3, r3, #2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2208      	movs	r2, #8
 8008508:	751a      	strb	r2, [r3, #20]
      break;
 800850a:	e0c7      	b.n	800869c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800850c:	4b6b      	ldr	r3, [pc, #428]	; (80086bc <tcp_process+0x7d0>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80c1 	beq.w	800869c <tcp_process+0x7b0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800851e:	4b68      	ldr	r3, [pc, #416]	; (80086c0 <tcp_process+0x7d4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	f040 80ba 	bne.w	800869c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 80b5 	bne.w	800869c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2206      	movs	r2, #6
 8008536:	751a      	strb	r2, [r3, #20]
      break;
 8008538:	e0b0      	b.n	800869c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f9ca 	bl	80088d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008540:	4b60      	ldr	r3, [pc, #384]	; (80086c4 <tcp_process+0x7d8>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80a9 	beq.w	80086a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	8b5b      	ldrh	r3, [r3, #26]
 8008552:	f043 0302 	orr.w	r3, r3, #2
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fe fd3b 	bl	8006fd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008562:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <tcp_process+0x7dc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	429a      	cmp	r2, r3
 800856a:	d105      	bne.n	8008578 <tcp_process+0x68c>
 800856c:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <tcp_process+0x7dc>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	4a55      	ldr	r2, [pc, #340]	; (80086c8 <tcp_process+0x7dc>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e013      	b.n	80085a0 <tcp_process+0x6b4>
 8008578:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <tcp_process+0x7dc>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	e00c      	b.n	800859a <tcp_process+0x6ae>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d104      	bne.n	8008594 <tcp_process+0x6a8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	60da      	str	r2, [r3, #12]
 8008592:	e005      	b.n	80085a0 <tcp_process+0x6b4>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1ef      	bne.n	8008580 <tcp_process+0x694>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	4b43      	ldr	r3, [pc, #268]	; (80086b4 <tcp_process+0x7c8>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	220a      	movs	r2, #10
 80085b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80085b2:	4b41      	ldr	r3, [pc, #260]	; (80086b8 <tcp_process+0x7cc>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <tcp_process+0x7cc>)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	f003 f8e8 	bl	800b794 <tcp_timer_needed>
      }
      break;
 80085c4:	e06c      	b.n	80086a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f984 	bl	80088d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80085cc:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <tcp_process+0x7d0>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d065      	beq.n	80086a4 <tcp_process+0x7b8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085dc:	4b38      	ldr	r3, [pc, #224]	; (80086c0 <tcp_process+0x7d4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d15f      	bne.n	80086a4 <tcp_process+0x7b8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d15b      	bne.n	80086a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe fcf3 	bl	8006fd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085f2:	4b35      	ldr	r3, [pc, #212]	; (80086c8 <tcp_process+0x7dc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d105      	bne.n	8008608 <tcp_process+0x71c>
 80085fc:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <tcp_process+0x7dc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	4a31      	ldr	r2, [pc, #196]	; (80086c8 <tcp_process+0x7dc>)
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e013      	b.n	8008630 <tcp_process+0x744>
 8008608:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <tcp_process+0x7dc>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	e00c      	b.n	800862a <tcp_process+0x73e>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d104      	bne.n	8008624 <tcp_process+0x738>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	e005      	b.n	8008630 <tcp_process+0x744>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ef      	bne.n	8008610 <tcp_process+0x724>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <tcp_process+0x7c8>)
 8008638:	2201      	movs	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220a      	movs	r2, #10
 8008640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008642:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <tcp_process+0x7cc>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	4a1b      	ldr	r2, [pc, #108]	; (80086b8 <tcp_process+0x7cc>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f003 f8a0 	bl	800b794 <tcp_timer_needed>
      }
      break;
 8008654:	e026      	b.n	80086a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f93c 	bl	80088d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800865c:	4b17      	ldr	r3, [pc, #92]	; (80086bc <tcp_process+0x7d0>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01f      	beq.n	80086a8 <tcp_process+0x7bc>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <tcp_process+0x7d4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d119      	bne.n	80086a8 <tcp_process+0x7bc>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d115      	bne.n	80086a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <tcp_process+0x7d8>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f043 0310 	orr.w	r3, r3, #16
 8008684:	b2da      	uxtb	r2, r3
 8008686:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <tcp_process+0x7d8>)
 8008688:	701a      	strb	r2, [r3, #0]
      }
      break;
 800868a:	e00d      	b.n	80086a8 <tcp_process+0x7bc>
    default:
      break;
 800868c:	bf00      	nop
 800868e:	e00c      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008690:	bf00      	nop
 8008692:	e00a      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008694:	bf00      	nop
 8008696:	e008      	b.n	80086aa <tcp_process+0x7be>
      break;
 8008698:	bf00      	nop
 800869a:	e006      	b.n	80086aa <tcp_process+0x7be>
      break;
 800869c:	bf00      	nop
 800869e:	e004      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a0:	bf00      	nop
 80086a2:	e002      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a4:	bf00      	nop
 80086a6:	e000      	b.n	80086aa <tcp_process+0x7be>
      break;
 80086a8:	bf00      	nop
  }
  return ERR_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3724      	adds	r7, #36	; 0x24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd90      	pop	{r4, r7, pc}
 80086b4:	20008a58 	.word	0x20008a58
 80086b8:	20008a6c 	.word	0x20008a6c
 80086bc:	200000f8 	.word	0x200000f8
 80086c0:	200000f0 	.word	0x200000f0
 80086c4:	200000f9 	.word	0x200000f9
 80086c8:	20008a5c 	.word	0x20008a5c

080086cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <tcp_oos_insert_segment+0x1e>
 80086dc:	4b3b      	ldr	r3, [pc, #236]	; (80087cc <tcp_oos_insert_segment+0x100>)
 80086de:	f240 421f 	movw	r2, #1055	; 0x41f
 80086e2:	493b      	ldr	r1, [pc, #236]	; (80087d0 <tcp_oos_insert_segment+0x104>)
 80086e4:	483b      	ldr	r0, [pc, #236]	; (80087d4 <tcp_oos_insert_segment+0x108>)
 80086e6:	f005 fef3 	bl	800e4d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	899b      	ldrh	r3, [r3, #12]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fb faac 	bl	8003c50 <lwip_htons>
 80086f8:	4603      	mov	r3, r0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d028      	beq.n	8008756 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f7fe f97f 	bl	8006a08 <tcp_segs_free>
    next = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	e056      	b.n	80087be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	899b      	ldrh	r3, [r3, #12]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4618      	mov	r0, r3
 800871a:	f7fb fa99 	bl	8003c50 <lwip_htons>
 800871e:	4603      	mov	r3, r0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	899b      	ldrh	r3, [r3, #12]
 8008730:	b29c      	uxth	r4, r3
 8008732:	2001      	movs	r0, #1
 8008734:	f7fb fa8c 	bl	8003c50 <lwip_htons>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4322      	orrs	r2, r4
 8008742:	b292      	uxth	r2, r2
 8008744:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7fe f96e 	bl	8006a32 <tcp_seg_free>
    while (next &&
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	891b      	ldrh	r3, [r3, #8]
 8008760:	461a      	mov	r2, r3
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	441a      	add	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	8909      	ldrh	r1, [r1, #8]
 8008772:	440b      	add	r3, r1
 8008774:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008776:	2b00      	cmp	r3, #0
 8008778:	daca      	bge.n	8008710 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01e      	beq.n	80087be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	891b      	ldrh	r3, [r3, #8]
 8008784:	461a      	mov	r2, r3
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	441a      	add	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd12      	ble.n	80087be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <tcp_oos_insert_segment+0x10c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	891b      	ldrh	r3, [r3, #8]
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fc fb77 	bl	8004eac <pbuf_realloc>
    }
  }
  cseg->next = next;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd90      	pop	{r4, r7, pc}
 80087cc:	080107dc 	.word	0x080107dc
 80087d0:	08010a9c 	.word	0x08010a9c
 80087d4:	08010828 	.word	0x08010828
 80087d8:	200000ec 	.word	0x200000ec

080087dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80087ea:	e03e      	b.n	800886a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fc fd64 	bl	80052c8 <pbuf_clen>
 8008800:	4603      	mov	r3, r0
 8008802:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800880a:	8a7a      	ldrh	r2, [r7, #18]
 800880c:	429a      	cmp	r2, r3
 800880e:	d906      	bls.n	800881e <tcp_free_acked_segments+0x42>
 8008810:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <tcp_free_acked_segments+0xe0>)
 8008812:	f240 4257 	movw	r2, #1111	; 0x457
 8008816:	492a      	ldr	r1, [pc, #168]	; (80088c0 <tcp_free_acked_segments+0xe4>)
 8008818:	482a      	ldr	r0, [pc, #168]	; (80088c4 <tcp_free_acked_segments+0xe8>)
 800881a:	f005 fe59 	bl	800e4d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008824:	8a7b      	ldrh	r3, [r7, #18]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	891a      	ldrh	r2, [r3, #8]
 8008834:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <tcp_free_acked_segments+0xec>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	4413      	add	r3, r2
 800883a:	b29a      	uxth	r2, r3
 800883c:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <tcp_free_acked_segments+0xec>)
 800883e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f7fe f8f6 	bl	8006a32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <tcp_free_acked_segments+0x8e>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <tcp_free_acked_segments+0x8e>
 800885c:	4b17      	ldr	r3, [pc, #92]	; (80088bc <tcp_free_acked_segments+0xe0>)
 800885e:	f240 4261 	movw	r2, #1121	; 0x461
 8008862:	491a      	ldr	r1, [pc, #104]	; (80088cc <tcp_free_acked_segments+0xf0>)
 8008864:	4817      	ldr	r0, [pc, #92]	; (80088c4 <tcp_free_acked_segments+0xe8>)
 8008866:	f005 fe33 	bl	800e4d0 <iprintf>
  while (seg_list != NULL &&
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d020      	beq.n	80088b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4618      	mov	r0, r3
 8008878:	f7fb f9ff 	bl	8003c7a <lwip_htonl>
 800887c:	4604      	mov	r4, r0
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	891b      	ldrh	r3, [r3, #8]
 8008882:	461d      	mov	r5, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	b29b      	uxth	r3, r3
 800888c:	4618      	mov	r0, r3
 800888e:	f7fb f9df 	bl	8003c50 <lwip_htons>
 8008892:	4603      	mov	r3, r0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <tcp_free_acked_segments+0xc6>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <tcp_free_acked_segments+0xc8>
 80088a2:	2300      	movs	r3, #0
 80088a4:	442b      	add	r3, r5
 80088a6:	18e2      	adds	r2, r4, r3
 80088a8:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <tcp_free_acked_segments+0xf4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd9c      	ble.n	80087ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80088b2:	68bb      	ldr	r3, [r7, #8]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bdb0      	pop	{r4, r5, r7, pc}
 80088bc:	080107dc 	.word	0x080107dc
 80088c0:	08010ac4 	.word	0x08010ac4
 80088c4:	08010828 	.word	0x08010828
 80088c8:	200000f4 	.word	0x200000f4
 80088cc:	08010aec 	.word	0x08010aec
 80088d0:	200000f0 	.word	0x200000f0

080088d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80088d4:	b5b0      	push	{r4, r5, r7, lr}
 80088d6:	b094      	sub	sp, #80	; 0x50
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <tcp_receive+0x20>
 80088e6:	4ba6      	ldr	r3, [pc, #664]	; (8008b80 <tcp_receive+0x2ac>)
 80088e8:	f240 427b 	movw	r2, #1147	; 0x47b
 80088ec:	49a5      	ldr	r1, [pc, #660]	; (8008b84 <tcp_receive+0x2b0>)
 80088ee:	48a6      	ldr	r0, [pc, #664]	; (8008b88 <tcp_receive+0x2b4>)
 80088f0:	f005 fdee 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7d1b      	ldrb	r3, [r3, #20]
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d806      	bhi.n	800890a <tcp_receive+0x36>
 80088fc:	4ba0      	ldr	r3, [pc, #640]	; (8008b80 <tcp_receive+0x2ac>)
 80088fe:	f240 427c 	movw	r2, #1148	; 0x47c
 8008902:	49a2      	ldr	r1, [pc, #648]	; (8008b8c <tcp_receive+0x2b8>)
 8008904:	48a0      	ldr	r0, [pc, #640]	; (8008b88 <tcp_receive+0x2b4>)
 8008906:	f005 fde3 	bl	800e4d0 <iprintf>

  if (flags & TCP_ACK) {
 800890a:	4ba1      	ldr	r3, [pc, #644]	; (8008b90 <tcp_receive+0x2bc>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0310 	and.w	r3, r3, #16
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8263 	beq.w	8008dde <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	4413      	add	r3, r2
 8008926:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800892c:	4b99      	ldr	r3, [pc, #612]	; (8008b94 <tcp_receive+0x2c0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	db1b      	blt.n	800896e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800893a:	4b96      	ldr	r3, [pc, #600]	; (8008b94 <tcp_receive+0x2c0>)
 800893c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d106      	bne.n	8008950 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008946:	4b94      	ldr	r3, [pc, #592]	; (8008b98 <tcp_receive+0x2c4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	db0e      	blt.n	800896e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008954:	4b90      	ldr	r3, [pc, #576]	; (8008b98 <tcp_receive+0x2c4>)
 8008956:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008958:	429a      	cmp	r2, r3
 800895a:	d125      	bne.n	80089a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800895c:	4b8f      	ldr	r3, [pc, #572]	; (8008b9c <tcp_receive+0x2c8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	89db      	ldrh	r3, [r3, #14]
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800896a:	429a      	cmp	r2, r3
 800896c:	d91c      	bls.n	80089a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800896e:	4b8b      	ldr	r3, [pc, #556]	; (8008b9c <tcp_receive+0x2c8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	89db      	ldrh	r3, [r3, #14]
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008988:	429a      	cmp	r2, r3
 800898a:	d205      	bcs.n	8008998 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008998:	4b7e      	ldr	r3, [pc, #504]	; (8008b94 <tcp_receive+0x2c0>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80089a0:	4b7d      	ldr	r3, [pc, #500]	; (8008b98 <tcp_receive+0x2c4>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80089a8:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <tcp_receive+0x2c4>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dc58      	bgt.n	8008a68 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80089b6:	4b7a      	ldr	r3, [pc, #488]	; (8008ba0 <tcp_receive+0x2cc>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d14b      	bne.n	8008a56 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80089c8:	4413      	add	r3, r2
 80089ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d142      	bne.n	8008a56 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	db3d      	blt.n	8008a56 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089de:	4b6e      	ldr	r3, [pc, #440]	; (8008b98 <tcp_receive+0x2c4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d137      	bne.n	8008a56 <tcp_receive+0x182>
              found_dupack = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089f0:	2bff      	cmp	r3, #255	; 0xff
 80089f2:	d007      	beq.n	8008a04 <tcp_receive+0x130>
                ++pcb->dupacks;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089fa:	3301      	adds	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d91b      	bls.n	8008a46 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a18:	4413      	add	r3, r2
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d30a      	bcc.n	8008a3c <tcp_receive+0x168>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a30:	4413      	add	r3, r2
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008a3a:	e004      	b.n	8008a46 <tcp_receive+0x172>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d902      	bls.n	8008a56 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f002 fb41 	bl	800b0d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 8160 	bne.w	8008d1e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a66:	e15a      	b.n	8008d1e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008a68:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <tcp_receive+0x2c4>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f2c0 814d 	blt.w	8008d14 <tcp_receive+0x440>
 8008a7a:	4b47      	ldr	r3, [pc, #284]	; (8008b98 <tcp_receive+0x2c4>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f300 8145 	bgt.w	8008d14 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8b5b      	ldrh	r3, [r3, #26]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d010      	beq.n	8008ab8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8b5b      	ldrh	r3, [r3, #26]
 8008a9a:	f023 0304 	bic.w	r3, r3, #4
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ac6:	10db      	asrs	r3, r3, #3
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	b21a      	sxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008ae0:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <tcp_receive+0x2c4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <tcp_receive+0x2c4>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7d1b      	ldrb	r3, [r3, #20]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	f240 8096 	bls.w	8008c36 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d244      	bcs.n	8008ba4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8b5b      	ldrh	r3, [r3, #26]
 8008b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <tcp_receive+0x256>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e000      	b.n	8008b2c <tcp_receive+0x258>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008b30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b3a:	fb12 f303 	smulbb	r3, r2, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bf28      	it	cs
 8008b46:	4613      	movcs	r3, r2
 8008b48:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b52:	4413      	add	r3, r2
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d309      	bcc.n	8008b74 <tcp_receive+0x2a0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b68:	4413      	add	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b72:	e060      	b.n	8008c36 <tcp_receive+0x362>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b7e:	e05a      	b.n	8008c36 <tcp_receive+0x362>
 8008b80:	080107dc 	.word	0x080107dc
 8008b84:	08010b0c 	.word	0x08010b0c
 8008b88:	08010828 	.word	0x08010828
 8008b8c:	08010b28 	.word	0x08010b28
 8008b90:	200000f8 	.word	0x200000f8
 8008b94:	200000ec 	.word	0x200000ec
 8008b98:	200000f0 	.word	0x200000f0
 8008b9c:	200000dc 	.word	0x200000dc
 8008ba0:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bac:	4413      	add	r3, r2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d309      	bcc.n	8008bce <tcp_receive+0x2fa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bc2:	4413      	add	r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008bcc:	e004      	b.n	8008bd8 <tcp_receive+0x304>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d326      	bcc.n	8008c36 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d30a      	bcc.n	8008c2c <tcp_receive+0x358>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c20:	4413      	add	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008c2a:	e004      	b.n	8008c36 <tcp_receive+0x362>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3e:	4a98      	ldr	r2, [pc, #608]	; (8008ea0 <tcp_receive+0x5cc>)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fdcb 	bl	80087dc <tcp_free_acked_segments>
 8008c46:	4602      	mov	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a93      	ldr	r2, [pc, #588]	; (8008ea4 <tcp_receive+0x5d0>)
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff fdc0 	bl	80087dc <tcp_free_acked_segments>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c70:	861a      	strh	r2, [r3, #48]	; 0x30
 8008c72:	e002      	b.n	8008c7a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008c96:	4b84      	ldr	r3, [pc, #528]	; (8008ea8 <tcp_receive+0x5d4>)
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8b5b      	ldrh	r3, [r3, #26]
 8008ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d035      	beq.n	8008d1c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d118      	bne.n	8008cea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00c      	beq.n	8008cda <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fa ffd4 	bl	8003c7a <lwip_htonl>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc20      	bgt.n	8008d1c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8b5b      	ldrh	r3, [r3, #26]
 8008cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ce8:	e018      	b.n	8008d1c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fa ffbf 	bl	8003c7a <lwip_htonl>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	1ae3      	subs	r3, r4, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dc0b      	bgt.n	8008d1c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8b5b      	ldrh	r3, [r3, #26]
 8008d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d12:	e003      	b.n	8008d1c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 fbcd 	bl	800b4b4 <tcp_send_empty_ack>
 8008d1a:	e000      	b.n	8008d1e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d1c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d05b      	beq.n	8008dde <tcp_receive+0x50a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2a:	4b60      	ldr	r3, [pc, #384]	; (8008eac <tcp_receive+0x5d8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	da54      	bge.n	8008dde <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008d34:	4b5e      	ldr	r3, [pc, #376]	; (8008eb0 <tcp_receive+0x5dc>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008d48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d52:	10db      	asrs	r3, r3, #3
 8008d54:	b21b      	sxth	r3, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d6c:	4413      	add	r3, r2
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	b21a      	sxth	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008d76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da05      	bge.n	8008d8a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d82:	425b      	negs	r3, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008d8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d94:	109b      	asrs	r3, r3, #2
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008dae:	4413      	add	r3, r2
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b21a      	sxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dbe:	10db      	asrs	r3, r3, #3
 8008dc0:	b21b      	sxth	r3, r3
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	4413      	add	r3, r2
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	b21a      	sxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008dde:	4b35      	ldr	r3, [pc, #212]	; (8008eb4 <tcp_receive+0x5e0>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 84e1 	beq.w	80097aa <tcp_receive+0xed6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	7d1b      	ldrb	r3, [r3, #20]
 8008dec:	2b06      	cmp	r3, #6
 8008dee:	f200 84dc 	bhi.w	80097aa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df6:	4b30      	ldr	r3, [pc, #192]	; (8008eb8 <tcp_receive+0x5e4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f2c0 808e 	blt.w	8008f20 <tcp_receive+0x64c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e08:	4b2a      	ldr	r3, [pc, #168]	; (8008eb4 <tcp_receive+0x5e0>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <tcp_receive+0x5e4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	440b      	add	r3, r1
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	3301      	adds	r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f300 8081 	bgt.w	8008f20 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e1e:	4b27      	ldr	r3, [pc, #156]	; (8008ebc <tcp_receive+0x5e8>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e28:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <tcp_receive+0x5e4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <tcp_receive+0x5e8>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <tcp_receive+0x572>
 8008e38:	4b21      	ldr	r3, [pc, #132]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e3a:	f240 5294 	movw	r2, #1428	; 0x594
 8008e3e:	4921      	ldr	r1, [pc, #132]	; (8008ec4 <tcp_receive+0x5f0>)
 8008e40:	4821      	ldr	r0, [pc, #132]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e42:	f005 fb45 	bl	800e4d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d906      	bls.n	8008e5e <tcp_receive+0x58a>
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e52:	f240 5295 	movw	r2, #1429	; 0x595
 8008e56:	491d      	ldr	r1, [pc, #116]	; (8008ecc <tcp_receive+0x5f8>)
 8008e58:	481b      	ldr	r0, [pc, #108]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e5a:	f005 fb39 	bl	800e4d0 <iprintf>
      off = (u16_t)off32;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e64:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <tcp_receive+0x5e8>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	891b      	ldrh	r3, [r3, #8]
 8008e6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d906      	bls.n	8008e80 <tcp_receive+0x5ac>
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <tcp_receive+0x5ec>)
 8008e74:	f240 5297 	movw	r2, #1431	; 0x597
 8008e78:	4915      	ldr	r1, [pc, #84]	; (8008ed0 <tcp_receive+0x5fc>)
 8008e7a:	4813      	ldr	r0, [pc, #76]	; (8008ec8 <tcp_receive+0x5f4>)
 8008e7c:	f005 fb28 	bl	800e4d0 <iprintf>
      inseg.len -= off;
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <tcp_receive+0x5e8>)
 8008e82:	891a      	ldrh	r2, [r3, #8]
 8008e84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <tcp_receive+0x5e8>)
 8008e8e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <tcp_receive+0x5e8>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	891a      	ldrh	r2, [r3, #8]
 8008e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008e9e:	e029      	b.n	8008ef4 <tcp_receive+0x620>
 8008ea0:	08010b44 	.word	0x08010b44
 8008ea4:	08010b4c 	.word	0x08010b4c
 8008ea8:	200000f4 	.word	0x200000f4
 8008eac:	200000f0 	.word	0x200000f0
 8008eb0:	20008a60 	.word	0x20008a60
 8008eb4:	200000f6 	.word	0x200000f6
 8008eb8:	200000ec 	.word	0x200000ec
 8008ebc:	200000cc 	.word	0x200000cc
 8008ec0:	080107dc 	.word	0x080107dc
 8008ec4:	08010b54 	.word	0x08010b54
 8008ec8:	08010828 	.word	0x08010828
 8008ecc:	08010b64 	.word	0x08010b64
 8008ed0:	08010b74 	.word	0x08010b74
        off -= p->len;
 8008ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed6:	895b      	ldrh	r3, [r3, #10]
 8008ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008ee6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eea:	2200      	movs	r2, #0
 8008eec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef6:	895b      	ldrh	r3, [r3, #10]
 8008ef8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d8e9      	bhi.n	8008ed4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f04:	4619      	mov	r1, r3
 8008f06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f08:	f7fc f8d0 	bl	80050ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	4a91      	ldr	r2, [pc, #580]	; (8009158 <tcp_receive+0x884>)
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4b91      	ldr	r3, [pc, #580]	; (800915c <tcp_receive+0x888>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4a8f      	ldr	r2, [pc, #572]	; (8009158 <tcp_receive+0x884>)
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f1e:	e00d      	b.n	8008f3c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f20:	4b8d      	ldr	r3, [pc, #564]	; (8009158 <tcp_receive+0x884>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da06      	bge.n	8008f3c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8b5b      	ldrh	r3, [r3, #26]
 8008f32:	f043 0302 	orr.w	r3, r3, #2
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f3c:	4b86      	ldr	r3, [pc, #536]	; (8009158 <tcp_receive+0x884>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f2c0 842a 	blt.w	80097a0 <tcp_receive+0xecc>
 8008f4c:	4b82      	ldr	r3, [pc, #520]	; (8009158 <tcp_receive+0x884>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f58:	440b      	add	r3, r1
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f300 841e 	bgt.w	80097a0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f68:	4b7b      	ldr	r3, [pc, #492]	; (8009158 <tcp_receive+0x884>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	f040 829a 	bne.w	80094a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008f72:	4b7a      	ldr	r3, [pc, #488]	; (800915c <tcp_receive+0x888>)
 8008f74:	891c      	ldrh	r4, [r3, #8]
 8008f76:	4b79      	ldr	r3, [pc, #484]	; (800915c <tcp_receive+0x888>)
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fa fe66 	bl	8003c50 <lwip_htons>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <tcp_receive+0x6c0>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <tcp_receive+0x6c2>
 8008f94:	2300      	movs	r3, #0
 8008f96:	4423      	add	r3, r4
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	4b71      	ldr	r3, [pc, #452]	; (8009160 <tcp_receive+0x88c>)
 8008f9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fa2:	4b6f      	ldr	r3, [pc, #444]	; (8009160 <tcp_receive+0x88c>)
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d275      	bcs.n	8009096 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008faa:	4b6c      	ldr	r3, [pc, #432]	; (800915c <tcp_receive+0x888>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fa fe4c 	bl	8003c50 <lwip_htons>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01f      	beq.n	8009004 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008fc4:	4b65      	ldr	r3, [pc, #404]	; (800915c <tcp_receive+0x888>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fd2:	b21c      	sxth	r4, r3
 8008fd4:	4b61      	ldr	r3, [pc, #388]	; (800915c <tcp_receive+0x888>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fa fe37 	bl	8003c50 <lwip_htons>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fa fe2e 	bl	8003c50 <lwip_htons>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b21b      	sxth	r3, r3
 8008ff8:	4323      	orrs	r3, r4
 8008ffa:	b21a      	sxth	r2, r3
 8008ffc:	4b57      	ldr	r3, [pc, #348]	; (800915c <tcp_receive+0x888>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	b292      	uxth	r2, r2
 8009002:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009008:	4b54      	ldr	r3, [pc, #336]	; (800915c <tcp_receive+0x888>)
 800900a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800900c:	4b53      	ldr	r3, [pc, #332]	; (800915c <tcp_receive+0x888>)
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	899b      	ldrh	r3, [r3, #12]
 8009012:	b29b      	uxth	r3, r3
 8009014:	4618      	mov	r0, r3
 8009016:	f7fa fe1b 	bl	8003c50 <lwip_htons>
 800901a:	4603      	mov	r3, r0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <tcp_receive+0x75e>
            inseg.len -= 1;
 8009026:	4b4d      	ldr	r3, [pc, #308]	; (800915c <tcp_receive+0x888>)
 8009028:	891b      	ldrh	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	4b4b      	ldr	r3, [pc, #300]	; (800915c <tcp_receive+0x888>)
 8009030:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009032:	4b4a      	ldr	r3, [pc, #296]	; (800915c <tcp_receive+0x888>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4a49      	ldr	r2, [pc, #292]	; (800915c <tcp_receive+0x888>)
 8009038:	8912      	ldrh	r2, [r2, #8]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7fb ff35 	bl	8004eac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009042:	4b46      	ldr	r3, [pc, #280]	; (800915c <tcp_receive+0x888>)
 8009044:	891c      	ldrh	r4, [r3, #8]
 8009046:	4b45      	ldr	r3, [pc, #276]	; (800915c <tcp_receive+0x888>)
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	899b      	ldrh	r3, [r3, #12]
 800904c:	b29b      	uxth	r3, r3
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa fdfe 	bl	8003c50 <lwip_htons>
 8009054:	4603      	mov	r3, r0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <tcp_receive+0x790>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <tcp_receive+0x792>
 8009064:	2300      	movs	r3, #0
 8009066:	4423      	add	r3, r4
 8009068:	b29a      	uxth	r2, r3
 800906a:	4b3d      	ldr	r3, [pc, #244]	; (8009160 <tcp_receive+0x88c>)
 800906c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800906e:	4b3c      	ldr	r3, [pc, #240]	; (8009160 <tcp_receive+0x88c>)
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	4b38      	ldr	r3, [pc, #224]	; (8009158 <tcp_receive+0x884>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	441a      	add	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009082:	440b      	add	r3, r1
 8009084:	429a      	cmp	r2, r3
 8009086:	d006      	beq.n	8009096 <tcp_receive+0x7c2>
 8009088:	4b36      	ldr	r3, [pc, #216]	; (8009164 <tcp_receive+0x890>)
 800908a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800908e:	4936      	ldr	r1, [pc, #216]	; (8009168 <tcp_receive+0x894>)
 8009090:	4836      	ldr	r0, [pc, #216]	; (800916c <tcp_receive+0x898>)
 8009092:	f005 fa1d 	bl	800e4d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80e7 	beq.w	800926e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80090a0:	4b2e      	ldr	r3, [pc, #184]	; (800915c <tcp_receive+0x888>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fa fdd1 	bl	8003c50 <lwip_htons>
 80090ae:	4603      	mov	r3, r0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d010      	beq.n	80090dc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80090ba:	e00a      	b.n	80090d2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f7fd fcb0 	bl	8006a32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f0      	bne.n	80090bc <tcp_receive+0x7e8>
 80090da:	e0c8      	b.n	800926e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80090e2:	e052      	b.n	800918a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fa fdaf 	bl	8003c50 <lwip_htons>
 80090f2:	4603      	mov	r3, r0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03d      	beq.n	800917a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80090fe:	4b17      	ldr	r3, [pc, #92]	; (800915c <tcp_receive+0x888>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	899b      	ldrh	r3, [r3, #12]
 8009104:	b29b      	uxth	r3, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f7fa fda2 	bl	8003c50 <lwip_htons>
 800910c:	4603      	mov	r3, r0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009114:	2b00      	cmp	r3, #0
 8009116:	d130      	bne.n	800917a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009118:	4b10      	ldr	r3, [pc, #64]	; (800915c <tcp_receive+0x888>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	899b      	ldrh	r3, [r3, #12]
 800911e:	b29c      	uxth	r4, r3
 8009120:	2001      	movs	r0, #1
 8009122:	f7fa fd95 	bl	8003c50 <lwip_htons>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <tcp_receive+0x888>)
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	4322      	orrs	r2, r4
 8009130:	b292      	uxth	r2, r2
 8009132:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <tcp_receive+0x888>)
 8009136:	891c      	ldrh	r4, [r3, #8]
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <tcp_receive+0x888>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	b29b      	uxth	r3, r3
 8009140:	4618      	mov	r0, r3
 8009142:	f7fa fd85 	bl	8003c50 <lwip_htons>
 8009146:	4603      	mov	r3, r0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00e      	beq.n	8009170 <tcp_receive+0x89c>
 8009152:	2301      	movs	r3, #1
 8009154:	e00d      	b.n	8009172 <tcp_receive+0x89e>
 8009156:	bf00      	nop
 8009158:	200000ec 	.word	0x200000ec
 800915c:	200000cc 	.word	0x200000cc
 8009160:	200000f6 	.word	0x200000f6
 8009164:	080107dc 	.word	0x080107dc
 8009168:	08010b84 	.word	0x08010b84
 800916c:	08010828 	.word	0x08010828
 8009170:	2300      	movs	r3, #0
 8009172:	4423      	add	r3, r4
 8009174:	b29a      	uxth	r2, r3
 8009176:	4b98      	ldr	r3, [pc, #608]	; (80093d8 <tcp_receive+0xb04>)
 8009178:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009184:	6938      	ldr	r0, [r7, #16]
 8009186:	f7fd fc54 	bl	8006a32 <tcp_seg_free>
            while (next &&
 800918a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009190:	4b91      	ldr	r3, [pc, #580]	; (80093d8 <tcp_receive+0xb04>)
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b91      	ldr	r3, [pc, #580]	; (80093dc <tcp_receive+0xb08>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	441a      	add	r2, r3
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091a4:	8909      	ldrh	r1, [r1, #8]
 80091a6:	440b      	add	r3, r1
 80091a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da9a      	bge.n	80090e4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80091ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d059      	beq.n	8009268 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80091b4:	4b88      	ldr	r3, [pc, #544]	; (80093d8 <tcp_receive+0xb04>)
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	4b88      	ldr	r3, [pc, #544]	; (80093dc <tcp_receive+0xb08>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	441a      	add	r2, r3
 80091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd4d      	ble.n	8009268 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80091cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	4b81      	ldr	r3, [pc, #516]	; (80093dc <tcp_receive+0xb08>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	b29a      	uxth	r2, r3
 80091de:	4b80      	ldr	r3, [pc, #512]	; (80093e0 <tcp_receive+0xb0c>)
 80091e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091e2:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <tcp_receive+0xb0c>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	899b      	ldrh	r3, [r3, #12]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fa fd30 	bl	8003c50 <lwip_htons>
 80091f0:	4603      	mov	r3, r0
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <tcp_receive+0x934>
                inseg.len -= 1;
 80091fc:	4b78      	ldr	r3, [pc, #480]	; (80093e0 <tcp_receive+0xb0c>)
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	3b01      	subs	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	4b76      	ldr	r3, [pc, #472]	; (80093e0 <tcp_receive+0xb0c>)
 8009206:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009208:	4b75      	ldr	r3, [pc, #468]	; (80093e0 <tcp_receive+0xb0c>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4a74      	ldr	r2, [pc, #464]	; (80093e0 <tcp_receive+0xb0c>)
 800920e:	8912      	ldrh	r2, [r2, #8]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f7fb fe4a 	bl	8004eac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009218:	4b71      	ldr	r3, [pc, #452]	; (80093e0 <tcp_receive+0xb0c>)
 800921a:	891c      	ldrh	r4, [r3, #8]
 800921c:	4b70      	ldr	r3, [pc, #448]	; (80093e0 <tcp_receive+0xb0c>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	899b      	ldrh	r3, [r3, #12]
 8009222:	b29b      	uxth	r3, r3
 8009224:	4618      	mov	r0, r3
 8009226:	f7fa fd13 	bl	8003c50 <lwip_htons>
 800922a:	4603      	mov	r3, r0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <tcp_receive+0x966>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <tcp_receive+0x968>
 800923a:	2300      	movs	r3, #0
 800923c:	4423      	add	r3, r4
 800923e:	b29a      	uxth	r2, r3
 8009240:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <tcp_receive+0xb04>)
 8009242:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009244:	4b64      	ldr	r3, [pc, #400]	; (80093d8 <tcp_receive+0xb04>)
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	4b64      	ldr	r3, [pc, #400]	; (80093dc <tcp_receive+0xb08>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	441a      	add	r2, r3
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d006      	beq.n	8009268 <tcp_receive+0x994>
 800925a:	4b62      	ldr	r3, [pc, #392]	; (80093e4 <tcp_receive+0xb10>)
 800925c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009260:	4961      	ldr	r1, [pc, #388]	; (80093e8 <tcp_receive+0xb14>)
 8009262:	4862      	ldr	r0, [pc, #392]	; (80093ec <tcp_receive+0xb18>)
 8009264:	f005 f934 	bl	800e4d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800926c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800926e:	4b5a      	ldr	r3, [pc, #360]	; (80093d8 <tcp_receive+0xb04>)
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <tcp_receive+0xb08>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	441a      	add	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009282:	4b55      	ldr	r3, [pc, #340]	; (80093d8 <tcp_receive+0xb04>)
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d206      	bcs.n	8009298 <tcp_receive+0x9c4>
 800928a:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <tcp_receive+0xb10>)
 800928c:	f240 6207 	movw	r2, #1543	; 0x607
 8009290:	4957      	ldr	r1, [pc, #348]	; (80093f0 <tcp_receive+0xb1c>)
 8009292:	4856      	ldr	r0, [pc, #344]	; (80093ec <tcp_receive+0xb18>)
 8009294:	f005 f91c 	bl	800e4d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800929c:	4b4e      	ldr	r3, [pc, #312]	; (80093d8 <tcp_receive+0xb04>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fc fe9d 	bl	8005fe8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80092ae:	4b4c      	ldr	r3, [pc, #304]	; (80093e0 <tcp_receive+0xb0c>)
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	891b      	ldrh	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80092b8:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <tcp_receive+0xb0c>)
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4a4d      	ldr	r2, [pc, #308]	; (80093f4 <tcp_receive+0xb20>)
 80092be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80092c0:	4b47      	ldr	r3, [pc, #284]	; (80093e0 <tcp_receive+0xb0c>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80092c6:	4b46      	ldr	r3, [pc, #280]	; (80093e0 <tcp_receive+0xb0c>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	899b      	ldrh	r3, [r3, #12]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fa fcbe 	bl	8003c50 <lwip_htons>
 80092d4:	4603      	mov	r3, r0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80b8 	beq.w	8009452 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80092e2:	4b45      	ldr	r3, [pc, #276]	; (80093f8 <tcp_receive+0xb24>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	4b42      	ldr	r3, [pc, #264]	; (80093f8 <tcp_receive+0xb24>)
 80092ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80092f0:	e0af      	b.n	8009452 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <tcp_receive+0xb08>)
 8009302:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	891b      	ldrh	r3, [r3, #8]
 8009308:	461c      	mov	r4, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	899b      	ldrh	r3, [r3, #12]
 8009310:	b29b      	uxth	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	f7fa fc9c 	bl	8003c50 <lwip_htons>
 8009318:	4603      	mov	r3, r0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <tcp_receive+0xa54>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <tcp_receive+0xa56>
 8009328:	2300      	movs	r3, #0
 800932a:	191a      	adds	r2, r3, r4
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	441a      	add	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933a:	461c      	mov	r4, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	891b      	ldrh	r3, [r3, #8]
 8009340:	461d      	mov	r5, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	899b      	ldrh	r3, [r3, #12]
 8009348:	b29b      	uxth	r3, r3
 800934a:	4618      	mov	r0, r3
 800934c:	f7fa fc80 	bl	8003c50 <lwip_htons>
 8009350:	4603      	mov	r3, r0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <tcp_receive+0xa8c>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <tcp_receive+0xa8e>
 8009360:	2300      	movs	r3, #0
 8009362:	442b      	add	r3, r5
 8009364:	429c      	cmp	r4, r3
 8009366:	d206      	bcs.n	8009376 <tcp_receive+0xaa2>
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <tcp_receive+0xb10>)
 800936a:	f240 622b 	movw	r2, #1579	; 0x62b
 800936e:	4923      	ldr	r1, [pc, #140]	; (80093fc <tcp_receive+0xb28>)
 8009370:	481e      	ldr	r0, [pc, #120]	; (80093ec <tcp_receive+0xb18>)
 8009372:	f005 f8ad 	bl	800e4d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	891b      	ldrh	r3, [r3, #8]
 800937a:	461c      	mov	r4, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	899b      	ldrh	r3, [r3, #12]
 8009382:	b29b      	uxth	r3, r3
 8009384:	4618      	mov	r0, r3
 8009386:	f7fa fc63 	bl	8003c50 <lwip_htons>
 800938a:	4603      	mov	r3, r0
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <tcp_receive+0xac6>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <tcp_receive+0xac8>
 800939a:	2300      	movs	r3, #0
 800939c:	1919      	adds	r1, r3, r4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093a2:	b28b      	uxth	r3, r1
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7fc fe1b 	bl	8005fe8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	891b      	ldrh	r3, [r3, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d028      	beq.n	800940e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <tcp_receive+0xb20>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01d      	beq.n	8009400 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <tcp_receive+0xb20>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fb ffb4 	bl	800533c <pbuf_cat>
 80093d4:	e018      	b.n	8009408 <tcp_receive+0xb34>
 80093d6:	bf00      	nop
 80093d8:	200000f6 	.word	0x200000f6
 80093dc:	200000ec 	.word	0x200000ec
 80093e0:	200000cc 	.word	0x200000cc
 80093e4:	080107dc 	.word	0x080107dc
 80093e8:	08010bbc 	.word	0x08010bbc
 80093ec:	08010828 	.word	0x08010828
 80093f0:	08010bf8 	.word	0x08010bf8
 80093f4:	200000fc 	.word	0x200000fc
 80093f8:	200000f9 	.word	0x200000f9
 80093fc:	08010c18 	.word	0x08010c18
            } else {
              recv_data = cseg->p;
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4a70      	ldr	r2, [pc, #448]	; (80095c8 <tcp_receive+0xcf4>)
 8009406:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	899b      	ldrh	r3, [r3, #12]
 8009414:	b29b      	uxth	r3, r3
 8009416:	4618      	mov	r0, r3
 8009418:	f7fa fc1a 	bl	8003c50 <lwip_htons>
 800941c:	4603      	mov	r3, r0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00d      	beq.n	8009444 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009428:	4b68      	ldr	r3, [pc, #416]	; (80095cc <tcp_receive+0xcf8>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f043 0320 	orr.w	r3, r3, #32
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b66      	ldr	r3, [pc, #408]	; (80095cc <tcp_receive+0xcf8>)
 8009434:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7d1b      	ldrb	r3, [r3, #20]
 800943a:	2b04      	cmp	r3, #4
 800943c:	d102      	bne.n	8009444 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2207      	movs	r2, #7
 8009442:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800944c:	68b8      	ldr	r0, [r7, #8]
 800944e:	f7fd faf0 	bl	8006a32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009466:	429a      	cmp	r2, r3
 8009468:	f43f af43 	beq.w	80092f2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	8b5b      	ldrh	r3, [r3, #26]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00e      	beq.n	8009496 <tcp_receive+0xbc2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	8b5b      	ldrh	r3, [r3, #26]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	835a      	strh	r2, [r3, #26]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8b5b      	ldrh	r3, [r3, #26]
 800948a:	f043 0302 	orr.w	r3, r3, #2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009494:	e188      	b.n	80097a8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	8b5b      	ldrh	r3, [r3, #26]
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80094a4:	e180      	b.n	80097a8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80094ae:	4848      	ldr	r0, [pc, #288]	; (80095d0 <tcp_receive+0xcfc>)
 80094b0:	f7fd faf6 	bl	8006aa0 <tcp_seg_copy>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	675a      	str	r2, [r3, #116]	; 0x74
 80094ba:	e16d      	b.n	8009798 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80094bc:	2300      	movs	r3, #0
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c6:	e157      	b.n	8009778 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <tcp_receive+0xd00>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d11d      	bne.n	8009512 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80094d6:	4b3e      	ldr	r3, [pc, #248]	; (80095d0 <tcp_receive+0xcfc>)
 80094d8:	891a      	ldrh	r2, [r3, #8]
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	891b      	ldrh	r3, [r3, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	f240 814f 	bls.w	8009782 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80094e4:	483a      	ldr	r0, [pc, #232]	; (80095d0 <tcp_receive+0xcfc>)
 80094e6:	f7fd fadb 	bl	8006aa0 <tcp_seg_copy>
 80094ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8149 	beq.w	8009786 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e002      	b.n	8009508 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff f8de 	bl	80086cc <tcp_oos_insert_segment>
                }
                break;
 8009510:	e139      	b.n	8009786 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d117      	bne.n	8009548 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009518:	4b2e      	ldr	r3, [pc, #184]	; (80095d4 <tcp_receive+0xd00>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	da57      	bge.n	80095d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009528:	4829      	ldr	r0, [pc, #164]	; (80095d0 <tcp_receive+0xcfc>)
 800952a:	f7fd fab9 	bl	8006aa0 <tcp_seg_copy>
 800952e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8129 	beq.w	800978a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800953e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009540:	69b8      	ldr	r0, [r7, #24]
 8009542:	f7ff f8c3 	bl	80086cc <tcp_oos_insert_segment>
                  }
                  break;
 8009546:	e120      	b.n	800978a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009548:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <tcp_receive+0xd00>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	db3e      	blt.n	80095d8 <tcp_receive+0xd04>
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <tcp_receive+0xd00>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	3301      	adds	r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	dc35      	bgt.n	80095d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800956c:	4818      	ldr	r0, [pc, #96]	; (80095d0 <tcp_receive+0xcfc>)
 800956e:	f7fd fa97 	bl	8006aa0 <tcp_seg_copy>
 8009572:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8109 	beq.w	800978e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009584:	8912      	ldrh	r2, [r2, #8]
 8009586:	441a      	add	r2, r3
 8009588:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <tcp_receive+0xd00>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd12      	ble.n	80095b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <tcp_receive+0xd00>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	b29a      	uxth	r2, r3
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	891b      	ldrh	r3, [r3, #8]
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fb fc7a 	bl	8004eac <pbuf_realloc>
                    }
                    prev->next = cseg;
 80095b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80095be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095c0:	69f8      	ldr	r0, [r7, #28]
 80095c2:	f7ff f883 	bl	80086cc <tcp_oos_insert_segment>
                  }
                  break;
 80095c6:	e0e2      	b.n	800978e <tcp_receive+0xeba>
 80095c8:	200000fc 	.word	0x200000fc
 80095cc:	200000f9 	.word	0x200000f9
 80095d0:	200000cc 	.word	0x200000cc
 80095d4:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f040 80c6 	bne.w	8009772 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80095e6:	4b80      	ldr	r3, [pc, #512]	; (80097e8 <tcp_receive+0xf14>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f340 80bd 	ble.w	8009772 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	899b      	ldrh	r3, [r3, #12]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	4618      	mov	r0, r3
 8009602:	f7fa fb25 	bl	8003c50 <lwip_htons>
 8009606:	4603      	mov	r3, r0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 80bf 	bne.w	8009792 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009614:	4875      	ldr	r0, [pc, #468]	; (80097ec <tcp_receive+0xf18>)
 8009616:	f7fd fa43 	bl	8006aa0 <tcp_seg_copy>
 800961a:	4602      	mov	r2, r0
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80b6 	beq.w	8009796 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009632:	8912      	ldrh	r2, [r2, #8]
 8009634:	441a      	add	r2, r3
 8009636:	4b6c      	ldr	r3, [pc, #432]	; (80097e8 <tcp_receive+0xf14>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd12      	ble.n	8009666 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009640:	4b69      	ldr	r3, [pc, #420]	; (80097e8 <tcp_receive+0xf14>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	b29b      	uxth	r3, r3
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	b29a      	uxth	r2, r3
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	891b      	ldrh	r3, [r3, #8]
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fb fc23 	bl	8004eac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <tcp_receive+0xf1c>)
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	4b5e      	ldr	r3, [pc, #376]	; (80097e8 <tcp_receive+0xf14>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	441a      	add	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800967a:	440b      	add	r3, r1
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	f340 8089 	ble.w	8009796 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	899b      	ldrh	r3, [r3, #12]
 800968c:	b29b      	uxth	r3, r3
 800968e:	4618      	mov	r0, r3
 8009690:	f7fa fade 	bl	8003c50 <lwip_htons>
 8009694:	4603      	mov	r3, r0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d022      	beq.n	80096e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b21b      	sxth	r3, r3
 80096ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096b0:	b21c      	sxth	r4, r3
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	899b      	ldrh	r3, [r3, #12]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fa fac7 	bl	8003c50 <lwip_htons>
 80096c2:	4603      	mov	r3, r0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fa fabe 	bl	8003c50 <lwip_htons>
 80096d4:	4603      	mov	r3, r0
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	4323      	orrs	r3, r4
 80096da:	b21a      	sxth	r2, r3
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	b292      	uxth	r2, r2
 80096e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f0:	4413      	add	r3, r2
 80096f2:	b299      	uxth	r1, r3
 80096f4:	4b3c      	ldr	r3, [pc, #240]	; (80097e8 <tcp_receive+0xf14>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1a8a      	subs	r2, r1, r2
 8009700:	b292      	uxth	r2, r2
 8009702:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fb fbca 	bl	8004eac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	891c      	ldrh	r4, [r3, #8]
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	899b      	ldrh	r3, [r3, #12]
 8009726:	b29b      	uxth	r3, r3
 8009728:	4618      	mov	r0, r3
 800972a:	f7fa fa91 	bl	8003c50 <lwip_htons>
 800972e:	4603      	mov	r3, r0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <tcp_receive+0xe6a>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <tcp_receive+0xe6c>
 800973e:	2300      	movs	r3, #0
 8009740:	4423      	add	r3, r4
 8009742:	b29a      	uxth	r2, r3
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <tcp_receive+0xf1c>)
 8009746:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <tcp_receive+0xf1c>)
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	4b26      	ldr	r3, [pc, #152]	; (80097e8 <tcp_receive+0xf14>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	441a      	add	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800975c:	440b      	add	r3, r1
 800975e:	429a      	cmp	r2, r3
 8009760:	d019      	beq.n	8009796 <tcp_receive+0xec2>
 8009762:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <tcp_receive+0xf20>)
 8009764:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009768:	4923      	ldr	r1, [pc, #140]	; (80097f8 <tcp_receive+0xf24>)
 800976a:	4824      	ldr	r0, [pc, #144]	; (80097fc <tcp_receive+0xf28>)
 800976c:	f004 feb0 	bl	800e4d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009770:	e011      	b.n	8009796 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	63bb      	str	r3, [r7, #56]	; 0x38
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f aea4 	bne.w	80094c8 <tcp_receive+0xbf4>
 8009780:	e00a      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009782:	bf00      	nop
 8009784:	e008      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009786:	bf00      	nop
 8009788:	e006      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 800978a:	bf00      	nop
 800978c:	e004      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 800978e:	bf00      	nop
 8009790:	e002      	b.n	8009798 <tcp_receive+0xec4>
                  break;
 8009792:	bf00      	nop
 8009794:	e000      	b.n	8009798 <tcp_receive+0xec4>
                break;
 8009796:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fe8b 	bl	800b4b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800979e:	e003      	b.n	80097a8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fe87 	bl	800b4b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097a6:	e01a      	b.n	80097de <tcp_receive+0xf0a>
 80097a8:	e019      	b.n	80097de <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80097aa:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <tcp_receive+0xf14>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	db0a      	blt.n	80097ce <tcp_receive+0xefa>
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <tcp_receive+0xf14>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097c4:	440b      	add	r3, r1
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	3301      	adds	r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dd07      	ble.n	80097de <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8b5b      	ldrh	r3, [r3, #26]
 80097d2:	f043 0302 	orr.w	r3, r3, #2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80097dc:	e7ff      	b.n	80097de <tcp_receive+0xf0a>
 80097de:	bf00      	nop
 80097e0:	3750      	adds	r7, #80	; 0x50
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bdb0      	pop	{r4, r5, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200000ec 	.word	0x200000ec
 80097ec:	200000cc 	.word	0x200000cc
 80097f0:	200000f6 	.word	0x200000f6
 80097f4:	080107dc 	.word	0x080107dc
 80097f8:	08010b84 	.word	0x08010b84
 80097fc:	08010828 	.word	0x08010828

08009800 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009806:	4b15      	ldr	r3, [pc, #84]	; (800985c <tcp_get_next_optbyte+0x5c>)
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	b291      	uxth	r1, r2
 800980e:	4a13      	ldr	r2, [pc, #76]	; (800985c <tcp_get_next_optbyte+0x5c>)
 8009810:	8011      	strh	r1, [r2, #0]
 8009812:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009814:	4b12      	ldr	r3, [pc, #72]	; (8009860 <tcp_get_next_optbyte+0x60>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <tcp_get_next_optbyte+0x26>
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <tcp_get_next_optbyte+0x64>)
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	429a      	cmp	r2, r3
 8009824:	d208      	bcs.n	8009838 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <tcp_get_next_optbyte+0x68>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3314      	adds	r3, #20
 800982c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800982e:	88fb      	ldrh	r3, [r7, #6]
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4413      	add	r3, r2
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	e00b      	b.n	8009850 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	b2da      	uxtb	r2, r3
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <tcp_get_next_optbyte+0x64>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <tcp_get_next_optbyte+0x60>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	797b      	ldrb	r3, [r7, #5]
 800984c:	4413      	add	r3, r2
 800984e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	200000e8 	.word	0x200000e8
 8009860:	200000e4 	.word	0x200000e4
 8009864:	200000e2 	.word	0x200000e2
 8009868:	200000dc 	.word	0x200000dc

0800986c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <tcp_parseopt+0x1c>
 800987a:	4b32      	ldr	r3, [pc, #200]	; (8009944 <tcp_parseopt+0xd8>)
 800987c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009880:	4931      	ldr	r1, [pc, #196]	; (8009948 <tcp_parseopt+0xdc>)
 8009882:	4832      	ldr	r0, [pc, #200]	; (800994c <tcp_parseopt+0xe0>)
 8009884:	f004 fe24 	bl	800e4d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009888:	4b31      	ldr	r3, [pc, #196]	; (8009950 <tcp_parseopt+0xe4>)
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d055      	beq.n	800993c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009890:	4b30      	ldr	r3, [pc, #192]	; (8009954 <tcp_parseopt+0xe8>)
 8009892:	2200      	movs	r2, #0
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	e045      	b.n	8009924 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009898:	f7ff ffb2 	bl	8009800 <tcp_get_next_optbyte>
 800989c:	4603      	mov	r3, r0
 800989e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d006      	beq.n	80098b4 <tcp_parseopt+0x48>
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	dc2b      	bgt.n	8009902 <tcp_parseopt+0x96>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d041      	beq.n	8009932 <tcp_parseopt+0xc6>
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d127      	bne.n	8009902 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80098b2:	e037      	b.n	8009924 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80098b4:	f7ff ffa4 	bl	8009800 <tcp_get_next_optbyte>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d13b      	bne.n	8009936 <tcp_parseopt+0xca>
 80098be:	4b25      	ldr	r3, [pc, #148]	; (8009954 <tcp_parseopt+0xe8>)
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	4a22      	ldr	r2, [pc, #136]	; (8009950 <tcp_parseopt+0xe4>)
 80098c6:	8812      	ldrh	r2, [r2, #0]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	da34      	bge.n	8009936 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80098cc:	f7ff ff98 	bl	8009800 <tcp_get_next_optbyte>
 80098d0:	4603      	mov	r3, r0
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80098d8:	f7ff ff92 	bl	8009800 <tcp_get_next_optbyte>
 80098dc:	4603      	mov	r3, r0
 80098de:	b29a      	uxth	r2, r3
 80098e0:	89bb      	ldrh	r3, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80098e6:	89bb      	ldrh	r3, [r7, #12]
 80098e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80098ec:	d804      	bhi.n	80098f8 <tcp_parseopt+0x8c>
 80098ee:	89bb      	ldrh	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <tcp_parseopt+0x8c>
 80098f4:	89ba      	ldrh	r2, [r7, #12]
 80098f6:	e001      	b.n	80098fc <tcp_parseopt+0x90>
 80098f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009900:	e010      	b.n	8009924 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009902:	f7ff ff7d 	bl	8009800 <tcp_get_next_optbyte>
 8009906:	4603      	mov	r3, r0
 8009908:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d914      	bls.n	800993a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	b29a      	uxth	r2, r3
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <tcp_parseopt+0xe8>)
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	4413      	add	r3, r2
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b02      	subs	r3, #2
 800991e:	b29a      	uxth	r2, r3
 8009920:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <tcp_parseopt+0xe8>)
 8009922:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <tcp_parseopt+0xe8>)
 8009926:	881a      	ldrh	r2, [r3, #0]
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <tcp_parseopt+0xe4>)
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3b3      	bcc.n	8009898 <tcp_parseopt+0x2c>
 8009930:	e004      	b.n	800993c <tcp_parseopt+0xd0>
          return;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <tcp_parseopt+0xd0>
            return;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <tcp_parseopt+0xd0>
            return;
 800993a:	bf00      	nop
      }
    }
  }
}
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	080107dc 	.word	0x080107dc
 8009948:	08010c40 	.word	0x08010c40
 800994c:	08010828 	.word	0x08010828
 8009950:	200000e0 	.word	0x200000e0
 8009954:	200000e8 	.word	0x200000e8

08009958 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <tcp_trigger_input_pcb_close+0x1c>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f043 0310 	orr.w	r3, r3, #16
 8009964:	b2da      	uxtb	r2, r3
 8009966:	4b03      	ldr	r3, [pc, #12]	; (8009974 <tcp_trigger_input_pcb_close+0x1c>)
 8009968:	701a      	strb	r2, [r3, #0]
}
 800996a:	bf00      	nop
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	200000f9 	.word	0x200000f9

08009978 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <tcp_route+0x28>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	7a1b      	ldrb	r3, [r3, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	7a1b      	ldrb	r3, [r3, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f7fb f8ae 	bl	8004af8 <netif_get_by_index>
 800999c:	4603      	mov	r3, r0
 800999e:	e003      	b.n	80099a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f003 fad5 	bl	800cf50 <ip4_route>
 80099a6:	4603      	mov	r3, r0
  }
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	4613      	mov	r3, r2
 80099be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d105      	bne.n	80099d2 <tcp_create_segment+0x22>
 80099c6:	4b44      	ldr	r3, [pc, #272]	; (8009ad8 <tcp_create_segment+0x128>)
 80099c8:	22a3      	movs	r2, #163	; 0xa3
 80099ca:	4944      	ldr	r1, [pc, #272]	; (8009adc <tcp_create_segment+0x12c>)
 80099cc:	4844      	ldr	r0, [pc, #272]	; (8009ae0 <tcp_create_segment+0x130>)
 80099ce:	f004 fd7f 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d105      	bne.n	80099e4 <tcp_create_segment+0x34>
 80099d8:	4b3f      	ldr	r3, [pc, #252]	; (8009ad8 <tcp_create_segment+0x128>)
 80099da:	22a4      	movs	r2, #164	; 0xa4
 80099dc:	4941      	ldr	r1, [pc, #260]	; (8009ae4 <tcp_create_segment+0x134>)
 80099de:	4840      	ldr	r0, [pc, #256]	; (8009ae0 <tcp_create_segment+0x130>)
 80099e0:	f004 fd76 	bl	800e4d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80099e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0304 	and.w	r3, r3, #4
 80099f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80099f2:	2003      	movs	r0, #3
 80099f4:	f7fa fd82 	bl	80044fc <memp_malloc>
 80099f8:	6138      	str	r0, [r7, #16]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009a00:	68b8      	ldr	r0, [r7, #8]
 8009a02:	f7fb fbd9 	bl	80051b8 <pbuf_free>
    return NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e061      	b.n	8009ace <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009a10:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	891a      	ldrh	r2, [r3, #8]
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d205      	bcs.n	8009a36 <tcp_create_segment+0x86>
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	; (8009ad8 <tcp_create_segment+0x128>)
 8009a2c:	22b0      	movs	r2, #176	; 0xb0
 8009a2e:	492e      	ldr	r1, [pc, #184]	; (8009ae8 <tcp_create_segment+0x138>)
 8009a30:	482b      	ldr	r0, [pc, #172]	; (8009ae0 <tcp_create_segment+0x130>)
 8009a32:	f004 fd4d 	bl	800e4d0 <iprintf>
  seg->len = p->tot_len - optlen;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	891a      	ldrh	r2, [r3, #8]
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009a46:	2114      	movs	r1, #20
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f7fb fb1f 	bl	800508c <pbuf_add_header>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009a54:	6938      	ldr	r0, [r7, #16]
 8009a56:	f7fc ffec 	bl	8006a32 <tcp_seg_free>
    return NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e037      	b.n	8009ace <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8ada      	ldrh	r2, [r3, #22]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	68dc      	ldr	r4, [r3, #12]
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fa f8ed 	bl	8003c50 <lwip_htons>
 8009a76:	4603      	mov	r3, r0
 8009a78:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8b1a      	ldrh	r2, [r3, #24]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	68dc      	ldr	r4, [r3, #12]
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fa f8e4 	bl	8003c50 <lwip_htons>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	68dc      	ldr	r4, [r3, #12]
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f7fa f8f2 	bl	8003c7a <lwip_htonl>
 8009a96:	4603      	mov	r3, r0
 8009a98:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	089b      	lsrs	r3, r3, #2
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3305      	adds	r3, #5
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	031b      	lsls	r3, r3, #12
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	68dc      	ldr	r4, [r3, #12]
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fa f8ca 	bl	8003c50 <lwip_htons>
 8009abc:	4603      	mov	r3, r0
 8009abe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	749a      	strb	r2, [r3, #18]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	74da      	strb	r2, [r3, #19]
  return seg;
 8009acc:	693b      	ldr	r3, [r7, #16]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd90      	pop	{r4, r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	08010c5c 	.word	0x08010c5c
 8009adc:	08010c90 	.word	0x08010c90
 8009ae0:	08010cb0 	.word	0x08010cb0
 8009ae4:	08010cd8 	.word	0x08010cd8
 8009ae8:	08010cfc 	.word	0x08010cfc

08009aec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
 8009af8:	460b      	mov	r3, r1
 8009afa:	81bb      	strh	r3, [r7, #12]
 8009afc:	4613      	mov	r3, r2
 8009afe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009b00:	89bb      	ldrh	r3, [r7, #12]
 8009b02:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <tcp_pbuf_prealloc+0x2a>
 8009b0a:	4b30      	ldr	r3, [pc, #192]	; (8009bcc <tcp_pbuf_prealloc+0xe0>)
 8009b0c:	22e8      	movs	r2, #232	; 0xe8
 8009b0e:	4930      	ldr	r1, [pc, #192]	; (8009bd0 <tcp_pbuf_prealloc+0xe4>)
 8009b10:	4830      	ldr	r0, [pc, #192]	; (8009bd4 <tcp_pbuf_prealloc+0xe8>)
 8009b12:	f004 fcdd 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d105      	bne.n	8009b28 <tcp_pbuf_prealloc+0x3c>
 8009b1c:	4b2b      	ldr	r3, [pc, #172]	; (8009bcc <tcp_pbuf_prealloc+0xe0>)
 8009b1e:	22e9      	movs	r2, #233	; 0xe9
 8009b20:	492d      	ldr	r1, [pc, #180]	; (8009bd8 <tcp_pbuf_prealloc+0xec>)
 8009b22:	482c      	ldr	r0, [pc, #176]	; (8009bd4 <tcp_pbuf_prealloc+0xe8>)
 8009b24:	f004 fcd4 	bl	800e4d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009b28:	89ba      	ldrh	r2, [r7, #12]
 8009b2a:	897b      	ldrh	r3, [r7, #10]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d221      	bcs.n	8009b74 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d111      	bne.n	8009b60 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	8b5b      	ldrh	r3, [r3, #26]
 8009b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d115      	bne.n	8009b74 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d103      	bne.n	8009b60 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009b60:	89bb      	ldrh	r3, [r7, #12]
 8009b62:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009b66:	f023 0203 	bic.w	r2, r3, #3
 8009b6a:	897b      	ldrh	r3, [r7, #10]
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	bf28      	it	cs
 8009b70:	4613      	movcs	r3, r2
 8009b72:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009b74:	8af9      	ldrh	r1, [r7, #22]
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fb f837 	bl	8004bf0 <pbuf_alloc>
 8009b82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e019      	b.n	8009bc2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d006      	beq.n	8009ba4 <tcp_pbuf_prealloc+0xb8>
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <tcp_pbuf_prealloc+0xe0>)
 8009b98:	f240 120b 	movw	r2, #267	; 0x10b
 8009b9c:	490f      	ldr	r1, [pc, #60]	; (8009bdc <tcp_pbuf_prealloc+0xf0>)
 8009b9e:	480d      	ldr	r0, [pc, #52]	; (8009bd4 <tcp_pbuf_prealloc+0xe8>)
 8009ba0:	f004 fc96 	bl	800e4d0 <iprintf>
  *oversize = p->len - length;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	895a      	ldrh	r2, [r3, #10]
 8009ba8:	89bb      	ldrh	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	89ba      	ldrh	r2, [r7, #12]
 8009bb6:	811a      	strh	r2, [r3, #8]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	891a      	ldrh	r2, [r3, #8]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	815a      	strh	r2, [r3, #10]
  return p;
 8009bc0:	693b      	ldr	r3, [r7, #16]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	08010c5c 	.word	0x08010c5c
 8009bd0:	08010d14 	.word	0x08010d14
 8009bd4:	08010cb0 	.word	0x08010cb0
 8009bd8:	08010d38 	.word	0x08010d38
 8009bdc:	08010d58 	.word	0x08010d58

08009be0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <tcp_write_checks+0x20>
 8009bf2:	4b33      	ldr	r3, [pc, #204]	; (8009cc0 <tcp_write_checks+0xe0>)
 8009bf4:	f240 1233 	movw	r2, #307	; 0x133
 8009bf8:	4932      	ldr	r1, [pc, #200]	; (8009cc4 <tcp_write_checks+0xe4>)
 8009bfa:	4833      	ldr	r0, [pc, #204]	; (8009cc8 <tcp_write_checks+0xe8>)
 8009bfc:	f004 fc68 	bl	800e4d0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7d1b      	ldrb	r3, [r3, #20]
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d00e      	beq.n	8009c26 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009c0c:	2b07      	cmp	r3, #7
 8009c0e:	d00a      	beq.n	8009c26 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d006      	beq.n	8009c26 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d002      	beq.n	8009c26 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009c20:	f06f 030a 	mvn.w	r3, #10
 8009c24:	e048      	b.n	8009cb8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8009c26:	887b      	ldrh	r3, [r7, #2]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <tcp_write_checks+0x50>
    return ERR_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e043      	b.n	8009cb8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c36:	887a      	ldrh	r2, [r7, #2]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d909      	bls.n	8009c50 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	8b5b      	ldrh	r3, [r3, #26]
 8009c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	e033      	b.n	8009cb8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c56:	2b08      	cmp	r3, #8
 8009c58:	d909      	bls.n	8009c6e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8b5b      	ldrh	r3, [r3, #26]
 8009c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	e024      	b.n	8009cb8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11a      	bne.n	8009cb6 <tcp_write_checks+0xd6>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d116      	bne.n	8009cb6 <tcp_write_checks+0xd6>
 8009c88:	4b0d      	ldr	r3, [pc, #52]	; (8009cc0 <tcp_write_checks+0xe0>)
 8009c8a:	f240 1255 	movw	r2, #341	; 0x155
 8009c8e:	490f      	ldr	r1, [pc, #60]	; (8009ccc <tcp_write_checks+0xec>)
 8009c90:	480d      	ldr	r0, [pc, #52]	; (8009cc8 <tcp_write_checks+0xe8>)
 8009c92:	f004 fc1d 	bl	800e4d0 <iprintf>
 8009c96:	e00e      	b.n	8009cb6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <tcp_write_checks+0xc8>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <tcp_write_checks+0xd6>
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <tcp_write_checks+0xe0>)
 8009caa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8009cae:	4908      	ldr	r1, [pc, #32]	; (8009cd0 <tcp_write_checks+0xf0>)
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <tcp_write_checks+0xe8>)
 8009cb2:	f004 fc0d 	bl	800e4d0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08010c5c 	.word	0x08010c5c
 8009cc4:	08010d6c 	.word	0x08010d6c
 8009cc8:	08010cb0 	.word	0x08010cb0
 8009ccc:	08010d8c 	.word	0x08010d8c
 8009cd0:	08010dc8 	.word	0x08010dc8

08009cd4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b09b      	sub	sp, #108	; 0x6c
 8009cd8:	af04      	add	r7, sp, #16
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4611      	mov	r1, r2
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	80fb      	strh	r3, [r7, #6]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <tcp_write+0x5c>
 8009d1c:	4ba4      	ldr	r3, [pc, #656]	; (8009fb0 <tcp_write+0x2dc>)
 8009d1e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009d22:	49a4      	ldr	r1, [pc, #656]	; (8009fb4 <tcp_write+0x2e0>)
 8009d24:	48a4      	ldr	r0, [pc, #656]	; (8009fb8 <tcp_write+0x2e4>)
 8009d26:	f004 fbd3 	bl	800e4d0 <iprintf>
 8009d2a:	f06f 030f 	mvn.w	r3, #15
 8009d2e:	e32a      	b.n	800a386 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d36:	085b      	lsrs	r3, r3, #1
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	bf28      	it	cs
 8009d42:	4613      	movcs	r3, r2
 8009d44:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <tcp_write+0x7e>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d50:	e000      	b.n	8009d54 <tcp_write+0x80>
 8009d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d54:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d109      	bne.n	8009d70 <tcp_write+0x9c>
 8009d5c:	4b94      	ldr	r3, [pc, #592]	; (8009fb0 <tcp_write+0x2dc>)
 8009d5e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8009d62:	4996      	ldr	r1, [pc, #600]	; (8009fbc <tcp_write+0x2e8>)
 8009d64:	4894      	ldr	r0, [pc, #592]	; (8009fb8 <tcp_write+0x2e4>)
 8009d66:	f004 fbb3 	bl	800e4d0 <iprintf>
 8009d6a:	f06f 030f 	mvn.w	r3, #15
 8009d6e:	e30a      	b.n	800a386 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	4619      	mov	r1, r3
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff ff33 	bl	8009be0 <tcp_write_checks>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009d80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <tcp_write+0xba>
    return err;
 8009d88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009d8c:	e2fb      	b.n	800a386 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80f6 	beq.w	8009f94 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dac:	653b      	str	r3, [r7, #80]	; 0x50
 8009dae:	e002      	b.n	8009db6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1f8      	bne.n	8009db0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc0:	7a9b      	ldrb	r3, [r3, #10]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f003 0304 	and.w	r3, r3, #4
 8009dca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009dcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd0:	891b      	ldrh	r3, [r3, #8]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	8c3b      	ldrh	r3, [r7, #32]
 8009dd6:	440b      	add	r3, r1
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	da06      	bge.n	8009dea <tcp_write+0x116>
 8009ddc:	4b74      	ldr	r3, [pc, #464]	; (8009fb0 <tcp_write+0x2dc>)
 8009dde:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009de2:	4977      	ldr	r1, [pc, #476]	; (8009fc0 <tcp_write+0x2ec>)
 8009de4:	4874      	ldr	r0, [pc, #464]	; (8009fb8 <tcp_write+0x2e4>)
 8009de6:	f004 fb73 	bl	800e4d0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dec:	891a      	ldrh	r2, [r3, #8]
 8009dee:	8c3b      	ldrh	r3, [r7, #32]
 8009df0:	4413      	add	r3, r2
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e00:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009e02:	8a7b      	ldrh	r3, [r7, #18]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d026      	beq.n	8009e56 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009e08:	8a7b      	ldrh	r3, [r7, #18]
 8009e0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d206      	bcs.n	8009e1e <tcp_write+0x14a>
 8009e10:	4b67      	ldr	r3, [pc, #412]	; (8009fb0 <tcp_write+0x2dc>)
 8009e12:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009e16:	496b      	ldr	r1, [pc, #428]	; (8009fc4 <tcp_write+0x2f0>)
 8009e18:	4867      	ldr	r0, [pc, #412]	; (8009fb8 <tcp_write+0x2e4>)
 8009e1a:	f004 fb59 	bl	800e4d0 <iprintf>
      seg = last_unsent;
 8009e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e20:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009e22:	8a7b      	ldrh	r3, [r7, #18]
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bf28      	it	cs
 8009e2a:	4613      	movcs	r3, r2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009e30:	4293      	cmp	r3, r2
 8009e32:	bf28      	it	cs
 8009e34:	4613      	movcs	r3, r2
 8009e36:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009e38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e3e:	4413      	add	r3, r2
 8009e40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009e44:	8a7a      	ldrh	r2, [r7, #18]
 8009e46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009e4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009e50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009e56:	8a7b      	ldrh	r3, [r7, #18]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <tcp_write+0x1a0>
 8009e5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d006      	beq.n	8009e74 <tcp_write+0x1a0>
 8009e66:	4b52      	ldr	r3, [pc, #328]	; (8009fb0 <tcp_write+0x2dc>)
 8009e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e6c:	4956      	ldr	r1, [pc, #344]	; (8009fc8 <tcp_write+0x2f4>)
 8009e6e:	4852      	ldr	r0, [pc, #328]	; (8009fb8 <tcp_write+0x2e4>)
 8009e70:	f004 fb2e 	bl	800e4d0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009e74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	f080 8167 	bcs.w	800a14e <tcp_write+0x47a>
 8009e80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 8163 	beq.w	800a14e <tcp_write+0x47a>
 8009e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8a:	891b      	ldrh	r3, [r3, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 815e 	beq.w	800a14e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009e92:	88fa      	ldrh	r2, [r7, #6]
 8009e94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e98:	1ad2      	subs	r2, r2, r3
 8009e9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfa8      	it	ge
 8009ea0:	4613      	movge	r3, r2
 8009ea2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009ea8:	797b      	ldrb	r3, [r7, #5]
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d027      	beq.n	8009f02 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009eb2:	f107 0012 	add.w	r0, r7, #18
 8009eb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009eb8:	8bf9      	ldrh	r1, [r7, #30]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	9302      	str	r3, [sp, #8]
 8009ebe:	797b      	ldrb	r3, [r7, #5]
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f7ff fe0f 	bl	8009aec <tcp_pbuf_prealloc>
 8009ece:	6578      	str	r0, [r7, #84]	; 0x54
 8009ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8225 	beq.w	800a322 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eda:	6858      	ldr	r0, [r3, #4]
 8009edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	8bfa      	ldrh	r2, [r7, #30]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	f004 fadc 	bl	800e4a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009eec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009eee:	f7fb f9eb 	bl	80052c8 <pbuf_clen>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009efa:	4413      	add	r3, r2
 8009efc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009f00:	e041      	b.n	8009f86 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
 8009f08:	e002      	b.n	8009f10 <tcp_write+0x23c>
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f8      	bne.n	8009f0a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1a:	7b1b      	ldrb	r3, [r3, #12]
 8009f1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d115      	bne.n	8009f50 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f2a:	8952      	ldrh	r2, [r2, #10]
 8009f2c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d10d      	bne.n	8009f50 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d006      	beq.n	8009f4a <tcp_write+0x276>
 8009f3c:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <tcp_write+0x2dc>)
 8009f3e:	f240 2231 	movw	r2, #561	; 0x231
 8009f42:	4922      	ldr	r1, [pc, #136]	; (8009fcc <tcp_write+0x2f8>)
 8009f44:	481c      	ldr	r0, [pc, #112]	; (8009fb8 <tcp_write+0x2e4>)
 8009f46:	f004 fac3 	bl	800e4d0 <iprintf>
          extendlen = seglen;
 8009f4a:	8bfb      	ldrh	r3, [r7, #30]
 8009f4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009f4e:	e01a      	b.n	8009f86 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009f50:	8bfb      	ldrh	r3, [r7, #30]
 8009f52:	2201      	movs	r2, #1
 8009f54:	4619      	mov	r1, r3
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7fa fe4a 	bl	8004bf0 <pbuf_alloc>
 8009f5c:	6578      	str	r0, [r7, #84]	; 0x54
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 81e0 	beq.w	800a326 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8009f66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	441a      	add	r2, r3
 8009f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f70:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009f72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f74:	f7fb f9a8 	bl	80052c8 <pbuf_clen>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009f80:	4413      	add	r3, r2
 8009f82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009f86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f8a:	8bfb      	ldrh	r3, [r7, #30]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009f92:	e0dc      	b.n	800a14e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80d7 	beq.w	800a14e <tcp_write+0x47a>
 8009fa0:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <tcp_write+0x2dc>)
 8009fa2:	f240 224a 	movw	r2, #586	; 0x24a
 8009fa6:	490a      	ldr	r1, [pc, #40]	; (8009fd0 <tcp_write+0x2fc>)
 8009fa8:	4803      	ldr	r0, [pc, #12]	; (8009fb8 <tcp_write+0x2e4>)
 8009faa:	f004 fa91 	bl	800e4d0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009fae:	e0ce      	b.n	800a14e <tcp_write+0x47a>
 8009fb0:	08010c5c 	.word	0x08010c5c
 8009fb4:	08010dfc 	.word	0x08010dfc
 8009fb8:	08010cb0 	.word	0x08010cb0
 8009fbc:	08010e14 	.word	0x08010e14
 8009fc0:	08010e48 	.word	0x08010e48
 8009fc4:	08010e60 	.word	0x08010e60
 8009fc8:	08010e80 	.word	0x08010e80
 8009fcc:	08010ea0 	.word	0x08010ea0
 8009fd0:	08010ecc 	.word	0x08010ecc
    struct pbuf *p;
    u16_t left = len - pos;
 8009fd4:	88fa      	ldrh	r2, [r7, #6]
 8009fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8009fde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009fea:	8b7a      	ldrh	r2, [r7, #26]
 8009fec:	8bbb      	ldrh	r3, [r7, #28]
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bf28      	it	cs
 8009ff2:	4613      	movcs	r3, r2
 8009ff4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009ff6:	797b      	ldrb	r3, [r7, #5]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d036      	beq.n	800a06e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a000:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a004:	b29a      	uxth	r2, r3
 800a006:	8b3b      	ldrh	r3, [r7, #24]
 800a008:	4413      	add	r3, r2
 800a00a:	b299      	uxth	r1, r3
 800a00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bf0c      	ite	eq
 800a012:	2301      	moveq	r3, #1
 800a014:	2300      	movne	r3, #0
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f107 0012 	add.w	r0, r7, #18
 800a01c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	797b      	ldrb	r3, [r7, #5]
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	4603      	mov	r3, r0
 800a02a:	2036      	movs	r0, #54	; 0x36
 800a02c:	f7ff fd5e 	bl	8009aec <tcp_pbuf_prealloc>
 800a030:	6338      	str	r0, [r7, #48]	; 0x30
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8178 	beq.w	800a32a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	895b      	ldrh	r3, [r3, #10]
 800a03e:	8b3a      	ldrh	r2, [r7, #24]
 800a040:	429a      	cmp	r2, r3
 800a042:	d906      	bls.n	800a052 <tcp_write+0x37e>
 800a044:	4b8c      	ldr	r3, [pc, #560]	; (800a278 <tcp_write+0x5a4>)
 800a046:	f240 2266 	movw	r2, #614	; 0x266
 800a04a:	498c      	ldr	r1, [pc, #560]	; (800a27c <tcp_write+0x5a8>)
 800a04c:	488c      	ldr	r0, [pc, #560]	; (800a280 <tcp_write+0x5ac>)
 800a04e:	f004 fa3f 	bl	800e4d0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a05a:	18d0      	adds	r0, r2, r3
 800a05c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	4413      	add	r3, r2
 800a064:	8b3a      	ldrh	r2, [r7, #24]
 800a066:	4619      	mov	r1, r3
 800a068:	f004 fa1c 	bl	800e4a4 <memcpy>
 800a06c:	e02f      	b.n	800a0ce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a06e:	8a7b      	ldrh	r3, [r7, #18]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <tcp_write+0x3ae>
 800a074:	4b80      	ldr	r3, [pc, #512]	; (800a278 <tcp_write+0x5a4>)
 800a076:	f240 2271 	movw	r2, #625	; 0x271
 800a07a:	4982      	ldr	r1, [pc, #520]	; (800a284 <tcp_write+0x5b0>)
 800a07c:	4880      	ldr	r0, [pc, #512]	; (800a280 <tcp_write+0x5ac>)
 800a07e:	f004 fa27 	bl	800e4d0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a082:	8b3b      	ldrh	r3, [r7, #24]
 800a084:	2201      	movs	r2, #1
 800a086:	4619      	mov	r1, r3
 800a088:	2036      	movs	r0, #54	; 0x36
 800a08a:	f7fa fdb1 	bl	8004bf0 <pbuf_alloc>
 800a08e:	6178      	str	r0, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 814b 	beq.w	800a32e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a098:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	441a      	add	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a0a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	2036      	movs	r0, #54	; 0x36
 800a0b2:	f7fa fd9d 	bl	8004bf0 <pbuf_alloc>
 800a0b6:	6338      	str	r0, [r7, #48]	; 0x30
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d103      	bne.n	800a0c6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a0be:	6978      	ldr	r0, [r7, #20]
 800a0c0:	f7fb f87a 	bl	80051b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a0c4:	e136      	b.n	800a334 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a0c6:	6979      	ldr	r1, [r7, #20]
 800a0c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ca:	f7fb f937 	bl	800533c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0d0:	f7fb f8fa 	bl	80052c8 <pbuf_clen>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0dc:	4413      	add	r3, r2
 800a0de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a0e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0e6:	2b09      	cmp	r3, #9
 800a0e8:	d903      	bls.n	800a0f2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a0ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ec:	f7fb f864 	bl	80051b8 <pbuf_free>
      goto memerr;
 800a0f0:	e120      	b.n	800a334 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0fa:	441a      	add	r2, r3
 800a0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4613      	mov	r3, r2
 800a104:	2200      	movs	r2, #0
 800a106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f7ff fc51 	bl	80099b0 <tcp_create_segment>
 800a10e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 810d 	beq.w	800a332 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d102      	bne.n	800a124 <tcp_write+0x450>
      queue = seg;
 800a11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a120:	647b      	str	r3, [r7, #68]	; 0x44
 800a122:	e00c      	b.n	800a13e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <tcp_write+0x464>
 800a12a:	4b53      	ldr	r3, [pc, #332]	; (800a278 <tcp_write+0x5a4>)
 800a12c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a130:	4955      	ldr	r1, [pc, #340]	; (800a288 <tcp_write+0x5b4>)
 800a132:	4853      	ldr	r0, [pc, #332]	; (800a280 <tcp_write+0x5ac>)
 800a134:	f004 f9cc 	bl	800e4d0 <iprintf>
      prev_seg->next = seg;
 800a138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a13a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a13c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a140:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a146:	8b3b      	ldrh	r3, [r7, #24]
 800a148:	4413      	add	r3, r2
 800a14a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a14e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a152:	88fb      	ldrh	r3, [r7, #6]
 800a154:	429a      	cmp	r2, r3
 800a156:	f4ff af3d 	bcc.w	8009fd4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a15a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d02c      	beq.n	800a1ba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a166:	e01e      	b.n	800a1a6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	891a      	ldrh	r2, [r3, #8]
 800a16c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a16e:	4413      	add	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d110      	bne.n	800a1a0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a184:	8952      	ldrh	r2, [r2, #10]
 800a186:	4413      	add	r3, r2
 800a188:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f004 f989 	bl	800e4a4 <memcpy>
        p->len += oversize_used;
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	895a      	ldrh	r2, [r3, #10]
 800a196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a198:	4413      	add	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1dd      	bne.n	800a168 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a1ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ae:	891a      	ldrh	r2, [r3, #8]
 800a1b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a1b2:	4413      	add	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a1ba:	8a7a      	ldrh	r2, [r7, #18]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d018      	beq.n	800a1fa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d106      	bne.n	800a1dc <tcp_write+0x508>
 800a1ce:	4b2a      	ldr	r3, [pc, #168]	; (800a278 <tcp_write+0x5a4>)
 800a1d0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a1d4:	492d      	ldr	r1, [pc, #180]	; (800a28c <tcp_write+0x5b8>)
 800a1d6:	482a      	ldr	r0, [pc, #168]	; (800a280 <tcp_write+0x5ac>)
 800a1d8:	f004 f97a 	bl	800e4d0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fb f8aa 	bl	800533c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ea:	891a      	ldrh	r2, [r3, #8]
 800a1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ee:	891b      	ldrh	r3, [r3, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f6:	811a      	strh	r2, [r3, #8]
 800a1f8:	e037      	b.n	800a26a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a1fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d034      	beq.n	800a26a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <tcp_write+0x53a>
 800a206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <tcp_write+0x548>
 800a20e:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <tcp_write+0x5a4>)
 800a210:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a214:	491e      	ldr	r1, [pc, #120]	; (800a290 <tcp_write+0x5bc>)
 800a216:	481a      	ldr	r0, [pc, #104]	; (800a280 <tcp_write+0x5ac>)
 800a218:	f004 f95a 	bl	800e4d0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	62bb      	str	r3, [r7, #40]	; 0x28
 800a222:	e009      	b.n	800a238 <tcp_write+0x564>
      p->tot_len += extendlen;
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	891a      	ldrh	r2, [r3, #8]
 800a228:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a22a:	4413      	add	r3, r2
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f1      	bne.n	800a224 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	891a      	ldrh	r2, [r3, #8]
 800a244:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a246:	4413      	add	r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	895a      	ldrh	r2, [r3, #10]
 800a252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a254:	4413      	add	r3, r2
 800a256:	b29a      	uxth	r2, r3
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a25e:	891a      	ldrh	r2, [r3, #8]
 800a260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a262:	4413      	add	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a268:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d111      	bne.n	800a294 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a274:	66da      	str	r2, [r3, #108]	; 0x6c
 800a276:	e010      	b.n	800a29a <tcp_write+0x5c6>
 800a278:	08010c5c 	.word	0x08010c5c
 800a27c:	08010efc 	.word	0x08010efc
 800a280:	08010cb0 	.word	0x08010cb0
 800a284:	08010f3c 	.word	0x08010f3c
 800a288:	08010f4c 	.word	0x08010f4c
 800a28c:	08010f60 	.word	0x08010f60
 800a290:	08010f98 	.word	0x08010f98
  } else {
    last_unsent->next = queue;
 800a294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a298:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	441a      	add	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a2be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00e      	beq.n	800a2ea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <tcp_write+0x616>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <tcp_write+0x616>
 800a2dc:	4b2c      	ldr	r3, [pc, #176]	; (800a390 <tcp_write+0x6bc>)
 800a2de:	f240 3212 	movw	r2, #786	; 0x312
 800a2e2:	492c      	ldr	r1, [pc, #176]	; (800a394 <tcp_write+0x6c0>)
 800a2e4:	482c      	ldr	r0, [pc, #176]	; (800a398 <tcp_write+0x6c4>)
 800a2e6:	f004 f8f3 	bl	800e4d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d016      	beq.n	800a31e <tcp_write+0x64a>
 800a2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d012      	beq.n	800a31e <tcp_write+0x64a>
 800a2f8:	797b      	ldrb	r3, [r7, #5]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10d      	bne.n	800a31e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	899b      	ldrh	r3, [r3, #12]
 800a308:	b29c      	uxth	r4, r3
 800a30a:	2008      	movs	r0, #8
 800a30c:	f7f9 fca0 	bl	8003c50 <lwip_htons>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	4322      	orrs	r2, r4
 800a31a:	b292      	uxth	r2, r2
 800a31c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e031      	b.n	800a386 <tcp_write+0x6b2>
          goto memerr;
 800a322:	bf00      	nop
 800a324:	e006      	b.n	800a334 <tcp_write+0x660>
            goto memerr;
 800a326:	bf00      	nop
 800a328:	e004      	b.n	800a334 <tcp_write+0x660>
        goto memerr;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <tcp_write+0x660>
        goto memerr;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <tcp_write+0x660>
      goto memerr;
 800a332:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8b5b      	ldrh	r3, [r3, #26]
 800a338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a348:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a34a:	f7fa ff35 	bl	80051b8 <pbuf_free>
  }
  if (queue != NULL) {
 800a34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <tcp_write+0x686>
    tcp_segs_free(queue);
 800a354:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a356:	f7fc fb57 	bl	8006a08 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <tcp_write+0x6ae>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <tcp_write+0x6ae>
 800a374:	4b06      	ldr	r3, [pc, #24]	; (800a390 <tcp_write+0x6bc>)
 800a376:	f240 3227 	movw	r2, #807	; 0x327
 800a37a:	4906      	ldr	r1, [pc, #24]	; (800a394 <tcp_write+0x6c0>)
 800a37c:	4806      	ldr	r0, [pc, #24]	; (800a398 <tcp_write+0x6c4>)
 800a37e:	f004 f8a7 	bl	800e4d0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a382:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a386:	4618      	mov	r0, r3
 800a388:	375c      	adds	r7, #92	; 0x5c
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd90      	pop	{r4, r7, pc}
 800a38e:	bf00      	nop
 800a390:	08010c5c 	.word	0x08010c5c
 800a394:	08010fd0 	.word	0x08010fd0
 800a398:	08010cb0 	.word	0x08010cb0

0800a39c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b08b      	sub	sp, #44	; 0x2c
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <tcp_split_unsent_seg+0x2c>
 800a3ba:	4b95      	ldr	r3, [pc, #596]	; (800a610 <tcp_split_unsent_seg+0x274>)
 800a3bc:	f240 324b 	movw	r2, #843	; 0x34b
 800a3c0:	4994      	ldr	r1, [pc, #592]	; (800a614 <tcp_split_unsent_seg+0x278>)
 800a3c2:	4895      	ldr	r0, [pc, #596]	; (800a618 <tcp_split_unsent_seg+0x27c>)
 800a3c4:	f004 f884 	bl	800e4d0 <iprintf>

  useg = pcb->unsent;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d8:	e116      	b.n	800a608 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a3da:	887b      	ldrh	r3, [r7, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d109      	bne.n	800a3f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a3e0:	4b8b      	ldr	r3, [pc, #556]	; (800a610 <tcp_split_unsent_seg+0x274>)
 800a3e2:	f240 3253 	movw	r2, #851	; 0x353
 800a3e6:	498d      	ldr	r1, [pc, #564]	; (800a61c <tcp_split_unsent_seg+0x280>)
 800a3e8:	488b      	ldr	r0, [pc, #556]	; (800a618 <tcp_split_unsent_seg+0x27c>)
 800a3ea:	f004 f871 	bl	800e4d0 <iprintf>
    return ERR_VAL;
 800a3ee:	f06f 0305 	mvn.w	r3, #5
 800a3f2:	e109      	b.n	800a608 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	891b      	ldrh	r3, [r3, #8]
 800a3f8:	887a      	ldrh	r2, [r7, #2]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d301      	bcc.n	800a402 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e102      	b.n	800a608 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a406:	887a      	ldrh	r2, [r7, #2]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d906      	bls.n	800a41a <tcp_split_unsent_seg+0x7e>
 800a40c:	4b80      	ldr	r3, [pc, #512]	; (800a610 <tcp_split_unsent_seg+0x274>)
 800a40e:	f240 325b 	movw	r2, #859	; 0x35b
 800a412:	4983      	ldr	r1, [pc, #524]	; (800a620 <tcp_split_unsent_seg+0x284>)
 800a414:	4880      	ldr	r0, [pc, #512]	; (800a618 <tcp_split_unsent_seg+0x27c>)
 800a416:	f004 f85b 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	891b      	ldrh	r3, [r3, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <tcp_split_unsent_seg+0x94>
 800a422:	4b7b      	ldr	r3, [pc, #492]	; (800a610 <tcp_split_unsent_seg+0x274>)
 800a424:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a428:	497e      	ldr	r1, [pc, #504]	; (800a624 <tcp_split_unsent_seg+0x288>)
 800a42a:	487b      	ldr	r0, [pc, #492]	; (800a618 <tcp_split_unsent_seg+0x27c>)
 800a42c:	f004 f850 	bl	800e4d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	7a9b      	ldrb	r3, [r3, #10]
 800a434:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	891a      	ldrh	r2, [r3, #8]
 800a446:	887b      	ldrh	r3, [r7, #2]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	b29a      	uxth	r2, r3
 800a450:	89bb      	ldrh	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	b29b      	uxth	r3, r3
 800a456:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a45a:	4619      	mov	r1, r3
 800a45c:	2036      	movs	r0, #54	; 0x36
 800a45e:	f7fa fbc7 	bl	8004bf0 <pbuf_alloc>
 800a462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 80b7 	beq.w	800a5da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	891a      	ldrh	r2, [r3, #8]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	891b      	ldrh	r3, [r3, #8]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	b29a      	uxth	r2, r3
 800a47a:	887b      	ldrh	r3, [r7, #2]
 800a47c:	4413      	add	r3, r2
 800a47e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	6858      	ldr	r0, [r3, #4]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	18d1      	adds	r1, r2, r3
 800a48c:	897b      	ldrh	r3, [r7, #10]
 800a48e:	89ba      	ldrh	r2, [r7, #12]
 800a490:	f7fb f88c 	bl	80055ac <pbuf_copy_partial>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	89bb      	ldrh	r3, [r7, #12]
 800a49a:	4293      	cmp	r3, r2
 800a49c:	f040 809f 	bne.w	800a5de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	899b      	ldrh	r3, [r3, #12]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7f9 fbd1 	bl	8003c50 <lwip_htons>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a4bc:	7efb      	ldrb	r3, [r7, #27]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d007      	beq.n	800a4d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a4c6:	7efb      	ldrb	r3, [r7, #27]
 800a4c8:	f023 0308 	bic.w	r3, r3, #8
 800a4cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a4ce:	7ebb      	ldrb	r3, [r7, #26]
 800a4d0:	f043 0308 	orr.w	r3, r3, #8
 800a4d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a4d6:	7efb      	ldrb	r3, [r7, #27]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d007      	beq.n	800a4f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a4e0:	7efb      	ldrb	r3, [r7, #27]
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a4e8:	7ebb      	ldrb	r3, [r7, #26]
 800a4ea:	f043 0301 	orr.w	r3, r3, #1
 800a4ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f9 fbbf 	bl	8003c7a <lwip_htonl>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	887b      	ldrh	r3, [r7, #2]
 800a500:	18d1      	adds	r1, r2, r3
 800a502:	7eba      	ldrb	r2, [r7, #26]
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	460b      	mov	r3, r1
 800a50a:	6939      	ldr	r1, [r7, #16]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fa4f 	bl	80099b0 <tcp_create_segment>
 800a512:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d063      	beq.n	800a5e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fa fed2 	bl	80052c8 <pbuf_clen>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	6858      	ldr	r0, [r3, #4]
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	891a      	ldrh	r2, [r3, #8]
 800a542:	89bb      	ldrh	r3, [r7, #12]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	b29b      	uxth	r3, r3
 800a548:	4619      	mov	r1, r3
 800a54a:	f7fa fcaf 	bl	8004eac <pbuf_realloc>
  useg->len -= remainder;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	891a      	ldrh	r2, [r3, #8]
 800a552:	89bb      	ldrh	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	b29a      	uxth	r2, r3
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	899b      	ldrh	r3, [r3, #12]
 800a562:	b29c      	uxth	r4, r3
 800a564:	7efb      	ldrb	r3, [r7, #27]
 800a566:	b29b      	uxth	r3, r3
 800a568:	4618      	mov	r0, r3
 800a56a:	f7f9 fb71 	bl	8003c50 <lwip_htons>
 800a56e:	4603      	mov	r3, r0
 800a570:	461a      	mov	r2, r3
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	4322      	orrs	r2, r4
 800a578:	b292      	uxth	r2, r2
 800a57a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	4618      	mov	r0, r3
 800a582:	f7fa fea1 	bl	80052c8 <pbuf_clen>
 800a586:	4603      	mov	r3, r0
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a590:	4413      	add	r3, r2
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fa fe92 	bl	80052c8 <pbuf_clen>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5ae:	4413      	add	r3, r2
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e016      	b.n	800a608 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a5da:	bf00      	nop
 800a5dc:	e002      	b.n	800a5e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a5e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <tcp_split_unsent_seg+0x25c>
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <tcp_split_unsent_seg+0x274>)
 800a5ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a5f0:	490d      	ldr	r1, [pc, #52]	; (800a628 <tcp_split_unsent_seg+0x28c>)
 800a5f2:	4809      	ldr	r0, [pc, #36]	; (800a618 <tcp_split_unsent_seg+0x27c>)
 800a5f4:	f003 ff6c 	bl	800e4d0 <iprintf>
  if (p != NULL) {
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a5fe:	6938      	ldr	r0, [r7, #16]
 800a600:	f7fa fdda 	bl	80051b8 <pbuf_free>
  }

  return ERR_MEM;
 800a604:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3724      	adds	r7, #36	; 0x24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd90      	pop	{r4, r7, pc}
 800a610:	08010c5c 	.word	0x08010c5c
 800a614:	08010ff0 	.word	0x08010ff0
 800a618:	08010cb0 	.word	0x08010cb0
 800a61c:	08011014 	.word	0x08011014
 800a620:	08011038 	.word	0x08011038
 800a624:	08011048 	.word	0x08011048
 800a628:	08011058 	.word	0x08011058

0800a62c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <tcp_send_fin+0x1c>
 800a63a:	4b21      	ldr	r3, [pc, #132]	; (800a6c0 <tcp_send_fin+0x94>)
 800a63c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a640:	4920      	ldr	r1, [pc, #128]	; (800a6c4 <tcp_send_fin+0x98>)
 800a642:	4821      	ldr	r0, [pc, #132]	; (800a6c8 <tcp_send_fin+0x9c>)
 800a644:	f003 ff44 	bl	800e4d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d02e      	beq.n	800a6ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	e002      	b.n	800a65e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1f8      	bne.n	800a658 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	899b      	ldrh	r3, [r3, #12]
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f9 faee 	bl	8003c50 <lwip_htons>
 800a674:	4603      	mov	r3, r0
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d116      	bne.n	800a6ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	899b      	ldrh	r3, [r3, #12]
 800a686:	b29c      	uxth	r4, r3
 800a688:	2001      	movs	r0, #1
 800a68a:	f7f9 fae1 	bl	8003c50 <lwip_htons>
 800a68e:	4603      	mov	r3, r0
 800a690:	461a      	mov	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	4322      	orrs	r2, r4
 800a698:	b292      	uxth	r2, r2
 800a69a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	8b5b      	ldrh	r3, [r3, #26]
 800a6a0:	f043 0320 	orr.w	r3, r3, #32
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e004      	b.n	800a6b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f80b 	bl	800a6cc <tcp_enqueue_flags>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd90      	pop	{r4, r7, pc}
 800a6c0:	08010c5c 	.word	0x08010c5c
 800a6c4:	08011064 	.word	0x08011064
 800a6c8:	08010cb0 	.word	0x08010cb0

0800a6cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08a      	sub	sp, #40	; 0x28
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <tcp_enqueue_flags+0x2c>
 800a6ea:	4b67      	ldr	r3, [pc, #412]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a6ec:	f240 4211 	movw	r2, #1041	; 0x411
 800a6f0:	4966      	ldr	r1, [pc, #408]	; (800a88c <tcp_enqueue_flags+0x1c0>)
 800a6f2:	4867      	ldr	r0, [pc, #412]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a6f4:	f003 feec 	bl	800e4d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <tcp_enqueue_flags+0x40>
 800a6fe:	4b62      	ldr	r3, [pc, #392]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a700:	f240 4213 	movw	r2, #1043	; 0x413
 800a704:	4963      	ldr	r1, [pc, #396]	; (800a894 <tcp_enqueue_flags+0x1c8>)
 800a706:	4862      	ldr	r0, [pc, #392]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a708:	f003 fee2 	bl	800e4d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a716:	2301      	movs	r3, #1
 800a718:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a71a:	7ffb      	ldrb	r3, [r7, #31]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a72e:	4619      	mov	r1, r3
 800a730:	2036      	movs	r0, #54	; 0x36
 800a732:	f7fa fa5d 	bl	8004bf0 <pbuf_alloc>
 800a736:	6138      	str	r0, [r7, #16]
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8b5b      	ldrh	r3, [r3, #26]
 800a742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a74c:	f04f 33ff 	mov.w	r3, #4294967295
 800a750:	e095      	b.n	800a87e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	895a      	ldrh	r2, [r3, #10]
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d206      	bcs.n	800a76c <tcp_enqueue_flags+0xa0>
 800a75e:	4b4a      	ldr	r3, [pc, #296]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a760:	f240 4239 	movw	r2, #1081	; 0x439
 800a764:	494c      	ldr	r1, [pc, #304]	; (800a898 <tcp_enqueue_flags+0x1cc>)
 800a766:	484a      	ldr	r0, [pc, #296]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a768:	f003 feb2 	bl	800e4d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a770:	78fa      	ldrb	r2, [r7, #3]
 800a772:	7ffb      	ldrb	r3, [r7, #31]
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	460b      	mov	r3, r1
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff f918 	bl	80099b0 <tcp_create_segment>
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d109      	bne.n	800a79c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8b5b      	ldrh	r3, [r3, #26]
 800a78c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a790:	b29a      	uxth	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a796:	f04f 33ff 	mov.w	r3, #4294967295
 800a79a:	e070      	b.n	800a87e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <tcp_enqueue_flags+0xea>
 800a7a8:	4b37      	ldr	r3, [pc, #220]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a7aa:	f240 4242 	movw	r2, #1090	; 0x442
 800a7ae:	493b      	ldr	r1, [pc, #236]	; (800a89c <tcp_enqueue_flags+0x1d0>)
 800a7b0:	4837      	ldr	r0, [pc, #220]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a7b2:	f003 fe8d 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	891b      	ldrh	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d006      	beq.n	800a7cc <tcp_enqueue_flags+0x100>
 800a7be:	4b32      	ldr	r3, [pc, #200]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a7c0:	f240 4243 	movw	r2, #1091	; 0x443
 800a7c4:	4936      	ldr	r1, [pc, #216]	; (800a8a0 <tcp_enqueue_flags+0x1d4>)
 800a7c6:	4832      	ldr	r0, [pc, #200]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a7c8:	f003 fe82 	bl	800e4d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a7da:	e00d      	b.n	800a7f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e002      	b.n	800a7ea <tcp_enqueue_flags+0x11e>
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	61bb      	str	r3, [r7, #24]
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1f8      	bne.n	800a7e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <tcp_enqueue_flags+0x148>
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b00      	cmp	r3, #0
 800a826:	d006      	beq.n	800a836 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	8b5b      	ldrh	r3, [r3, #26]
 800a82c:	f043 0320 	orr.w	r3, r3, #32
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fa fd44 	bl	80052c8 <pbuf_clen>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a84a:	4413      	add	r3, r2
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00e      	beq.n	800a87c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10a      	bne.n	800a87c <tcp_enqueue_flags+0x1b0>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <tcp_enqueue_flags+0x1b0>
 800a86e:	4b06      	ldr	r3, [pc, #24]	; (800a888 <tcp_enqueue_flags+0x1bc>)
 800a870:	f240 4265 	movw	r2, #1125	; 0x465
 800a874:	490b      	ldr	r1, [pc, #44]	; (800a8a4 <tcp_enqueue_flags+0x1d8>)
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <tcp_enqueue_flags+0x1c4>)
 800a878:	f003 fe2a 	bl	800e4d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08010c5c 	.word	0x08010c5c
 800a88c:	08011080 	.word	0x08011080
 800a890:	08010cb0 	.word	0x08010cb0
 800a894:	080110d8 	.word	0x080110d8
 800a898:	080110f8 	.word	0x080110f8
 800a89c:	08011134 	.word	0x08011134
 800a8a0:	0801114c 	.word	0x0801114c
 800a8a4:	08011178 	.word	0x08011178

0800a8a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08a      	sub	sp, #40	; 0x28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <tcp_output+0x1c>
 800a8b6:	4b9e      	ldr	r3, [pc, #632]	; (800ab30 <tcp_output+0x288>)
 800a8b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a8bc:	499d      	ldr	r1, [pc, #628]	; (800ab34 <tcp_output+0x28c>)
 800a8be:	489e      	ldr	r0, [pc, #632]	; (800ab38 <tcp_output+0x290>)
 800a8c0:	f003 fe06 	bl	800e4d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d106      	bne.n	800a8da <tcp_output+0x32>
 800a8cc:	4b98      	ldr	r3, [pc, #608]	; (800ab30 <tcp_output+0x288>)
 800a8ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a8d2:	499a      	ldr	r1, [pc, #616]	; (800ab3c <tcp_output+0x294>)
 800a8d4:	4898      	ldr	r0, [pc, #608]	; (800ab38 <tcp_output+0x290>)
 800a8d6:	f003 fdfb 	bl	800e4d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a8da:	4b99      	ldr	r3, [pc, #612]	; (800ab40 <tcp_output+0x298>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d101      	bne.n	800a8e8 <tcp_output+0x40>
    return ERR_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e1ce      	b.n	800ac86 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	bf28      	it	cs
 800a8f8:	4613      	movcs	r3, r2
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a902:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10b      	bne.n	800a922 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	8b5b      	ldrh	r3, [r3, #26]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 81aa 	beq.w	800ac6c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fdcb 	bl	800b4b4 <tcp_send_empty_ack>
 800a91e:	4603      	mov	r3, r0
 800a920:	e1b1      	b.n	800ac86 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3304      	adds	r3, #4
 800a928:	461a      	mov	r2, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff f824 	bl	8009978 <tcp_route>
 800a930:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <tcp_output+0x96>
    return ERR_RTE;
 800a938:	f06f 0303 	mvn.w	r3, #3
 800a93c:	e1a3      	b.n	800ac86 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d003      	beq.n	800a94c <tcp_output+0xa4>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d111      	bne.n	800a970 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <tcp_output+0xb0>
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	3304      	adds	r3, #4
 800a956:	e000      	b.n	800a95a <tcp_output+0xb2>
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <tcp_output+0xc0>
      return ERR_RTE;
 800a962:	f06f 0303 	mvn.w	r3, #3
 800a966:	e18e      	b.n	800ac86 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	4618      	mov	r0, r3
 800a978:	f7f9 f97f 	bl	8003c7a <lwip_htonl>
 800a97c:	4602      	mov	r2, r0
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a986:	8912      	ldrh	r2, [r2, #8]
 800a988:	4413      	add	r3, r2
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d227      	bcs.n	800a9e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a996:	461a      	mov	r2, r3
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d114      	bne.n	800a9c8 <tcp_output+0x120>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d110      	bne.n	800a9c8 <tcp_output+0x120>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	8b5b      	ldrh	r3, [r3, #26]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 814d 	beq.w	800ac70 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fd6c 	bl	800b4b4 <tcp_send_empty_ack>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	e152      	b.n	800ac86 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 811c 	beq.w	800ac2e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a9f6:	e002      	b.n	800a9fe <tcp_output+0x156>
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	623b      	str	r3, [r7, #32]
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f8      	bne.n	800a9f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aa06:	e112      	b.n	800ac2e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	899b      	ldrh	r3, [r3, #12]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7f9 f91d 	bl	8003c50 <lwip_htons>
 800aa16:	4603      	mov	r3, r0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0304 	and.w	r3, r3, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <tcp_output+0x188>
 800aa22:	4b43      	ldr	r3, [pc, #268]	; (800ab30 <tcp_output+0x288>)
 800aa24:	f240 5236 	movw	r2, #1334	; 0x536
 800aa28:	4946      	ldr	r1, [pc, #280]	; (800ab44 <tcp_output+0x29c>)
 800aa2a:	4843      	ldr	r0, [pc, #268]	; (800ab38 <tcp_output+0x290>)
 800aa2c:	f003 fd50 	bl	800e4d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d01f      	beq.n	800aa78 <tcp_output+0x1d0>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	8b5b      	ldrh	r3, [r3, #26]
 800aa3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d119      	bne.n	800aa78 <tcp_output+0x1d0>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <tcp_output+0x1bc>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d110      	bne.n	800aa78 <tcp_output+0x1d0>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5a:	891a      	ldrh	r2, [r3, #8]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d209      	bcs.n	800aa78 <tcp_output+0x1d0>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d004      	beq.n	800aa78 <tcp_output+0x1d0>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d901      	bls.n	800aa7c <tcp_output+0x1d4>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e000      	b.n	800aa7e <tcp_output+0x1d6>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8b5b      	ldrh	r3, [r3, #26]
 800aa86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80e4 	beq.w	800ac58 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	7d1b      	ldrb	r3, [r3, #20]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d00d      	beq.n	800aab4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	899b      	ldrh	r3, [r3, #12]
 800aa9e:	b29c      	uxth	r4, r3
 800aaa0:	2010      	movs	r0, #16
 800aaa2:	f7f9 f8d5 	bl	8003c50 <lwip_htons>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	4322      	orrs	r2, r4
 800aab0:	b292      	uxth	r2, r2
 800aab2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaba:	f000 f909 	bl	800acd0 <tcp_output_segment>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d009      	beq.n	800aade <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8b5b      	ldrh	r3, [r3, #26]
 800aace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	835a      	strh	r2, [r3, #26]
      return err;
 800aad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aadc:	e0d3      	b.n	800ac86 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7d1b      	ldrb	r3, [r3, #20]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d006      	beq.n	800aafc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7f9 f8b9 	bl	8003c7a <lwip_htonl>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	891b      	ldrh	r3, [r3, #8]
 800ab0e:	461d      	mov	r5, r3
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7f9 f899 	bl	8003c50 <lwip_htons>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00e      	beq.n	800ab48 <tcp_output+0x2a0>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e00d      	b.n	800ab4a <tcp_output+0x2a2>
 800ab2e:	bf00      	nop
 800ab30:	08010c5c 	.word	0x08010c5c
 800ab34:	080111a0 	.word	0x080111a0
 800ab38:	08010cb0 	.word	0x08010cb0
 800ab3c:	080111b8 	.word	0x080111b8
 800ab40:	20008a70 	.word	0x20008a70
 800ab44:	080111e0 	.word	0x080111e0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	442b      	add	r3, r5
 800ab4c:	4423      	add	r3, r4
 800ab4e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da02      	bge.n	800ab62 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	891b      	ldrh	r3, [r3, #8]
 800ab66:	461c      	mov	r4, r3
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	899b      	ldrh	r3, [r3, #12]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7f9 f86d 	bl	8003c50 <lwip_htons>
 800ab76:	4603      	mov	r3, r0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <tcp_output+0x2de>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <tcp_output+0x2e0>
 800ab86:	2300      	movs	r3, #0
 800ab88:	4423      	add	r3, r4
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d049      	beq.n	800ac22 <tcp_output+0x37a>
      seg->next = NULL;
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	2200      	movs	r2, #0
 800ab92:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d105      	bne.n	800aba8 <tcp_output+0x300>
        pcb->unacked = seg;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	623b      	str	r3, [r7, #32]
 800aba6:	e03f      	b.n	800ac28 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f9 f863 	bl	8003c7a <lwip_htonl>
 800abb4:	4604      	mov	r4, r0
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7f9 f85c 	bl	8003c7a <lwip_htonl>
 800abc2:	4603      	mov	r3, r0
 800abc4:	1ae3      	subs	r3, r4, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	da24      	bge.n	800ac14 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3370      	adds	r3, #112	; 0x70
 800abce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abd0:	e002      	b.n	800abd8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d011      	beq.n	800ac04 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f9 f846 	bl	8003c7a <lwip_htonl>
 800abee:	4604      	mov	r4, r0
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f9 f83f 	bl	8003c7a <lwip_htonl>
 800abfc:	4603      	mov	r3, r0
 800abfe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dbe6      	blt.n	800abd2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	e009      	b.n	800ac28 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac18:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	623b      	str	r3, [r7, #32]
 800ac20:	e002      	b.n	800ac28 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac24:	f7fb ff05 	bl	8006a32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d012      	beq.n	800ac5a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f9 f81d 	bl	8003c7a <lwip_htonl>
 800ac40:	4602      	mov	r2, r0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	8912      	ldrh	r2, [r2, #8]
 800ac4c:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	f4bf aed9 	bcs.w	800aa08 <tcp_output+0x160>
 800ac56:	e000      	b.n	800ac5a <tcp_output+0x3b2>
      break;
 800ac58:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d108      	bne.n	800ac74 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ac6a:	e004      	b.n	800ac76 <tcp_output+0x3ce>
    goto output_done;
 800ac6c:	bf00      	nop
 800ac6e:	e002      	b.n	800ac76 <tcp_output+0x3ce>
    goto output_done;
 800ac70:	bf00      	nop
 800ac72:	e000      	b.n	800ac76 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ac74:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8b5b      	ldrh	r3, [r3, #26]
 800ac7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3728      	adds	r7, #40	; 0x28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac8e:	bf00      	nop

0800ac90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <tcp_output_segment_busy+0x1c>
 800ac9e:	4b09      	ldr	r3, [pc, #36]	; (800acc4 <tcp_output_segment_busy+0x34>)
 800aca0:	f240 529a 	movw	r2, #1434	; 0x59a
 800aca4:	4908      	ldr	r1, [pc, #32]	; (800acc8 <tcp_output_segment_busy+0x38>)
 800aca6:	4809      	ldr	r0, [pc, #36]	; (800accc <tcp_output_segment_busy+0x3c>)
 800aca8:	f003 fc12 	bl	800e4d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	7b9b      	ldrb	r3, [r3, #14]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d001      	beq.n	800acba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	08010c5c 	.word	0x08010c5c
 800acc8:	080111f8 	.word	0x080111f8
 800accc:	08010cb0 	.word	0x08010cb0

0800acd0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800acd0:	b5b0      	push	{r4, r5, r7, lr}
 800acd2:	b08c      	sub	sp, #48	; 0x30
 800acd4:	af04      	add	r7, sp, #16
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <tcp_output_segment+0x20>
 800ace2:	4b63      	ldr	r3, [pc, #396]	; (800ae70 <tcp_output_segment+0x1a0>)
 800ace4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ace8:	4962      	ldr	r1, [pc, #392]	; (800ae74 <tcp_output_segment+0x1a4>)
 800acea:	4863      	ldr	r0, [pc, #396]	; (800ae78 <tcp_output_segment+0x1a8>)
 800acec:	f003 fbf0 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <tcp_output_segment+0x34>
 800acf6:	4b5e      	ldr	r3, [pc, #376]	; (800ae70 <tcp_output_segment+0x1a0>)
 800acf8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800acfc:	495f      	ldr	r1, [pc, #380]	; (800ae7c <tcp_output_segment+0x1ac>)
 800acfe:	485e      	ldr	r0, [pc, #376]	; (800ae78 <tcp_output_segment+0x1a8>)
 800ad00:	f003 fbe6 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <tcp_output_segment+0x48>
 800ad0a:	4b59      	ldr	r3, [pc, #356]	; (800ae70 <tcp_output_segment+0x1a0>)
 800ad0c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ad10:	495b      	ldr	r1, [pc, #364]	; (800ae80 <tcp_output_segment+0x1b0>)
 800ad12:	4859      	ldr	r0, [pc, #356]	; (800ae78 <tcp_output_segment+0x1a8>)
 800ad14:	f003 fbdc 	bl	800e4d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ffb9 	bl	800ac90 <tcp_output_segment_busy>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e09f      	b.n	800ae68 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	68dc      	ldr	r4, [r3, #12]
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7f8 ffa2 	bl	8003c7a <lwip_htonl>
 800ad36:	4603      	mov	r3, r0
 800ad38:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	68dc      	ldr	r4, [r3, #12]
 800ad42:	4610      	mov	r0, r2
 800ad44:	f7f8 ff84 	bl	8003c50 <lwip_htons>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad54:	441a      	add	r2, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	3314      	adds	r3, #20
 800ad60:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	7a9b      	ldrb	r3, [r3, #10]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d015      	beq.n	800ad9a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	3304      	adds	r3, #4
 800ad72:	461a      	mov	r2, r3
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ad7a:	f7fc fa37 	bl	80071ec <tcp_eff_send_mss_netif>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ad82:	8b7b      	ldrh	r3, [r7, #26]
 800ad84:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f8 ff76 	bl	8003c7a <lwip_htonl>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	3304      	adds	r3, #4
 800ad98:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	da02      	bge.n	800adaa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10c      	bne.n	800adcc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800adb2:	4b34      	ldr	r3, [pc, #208]	; (800ae84 <tcp_output_segment+0x1b4>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f8 ff5a 	bl	8003c7a <lwip_htonl>
 800adc6:	4602      	mov	r2, r0
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	8959      	ldrh	r1, [r3, #10]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	8b3a      	ldrh	r2, [r7, #24]
 800ade6:	1a8a      	subs	r2, r1, r2
 800ade8:	b292      	uxth	r2, r2
 800adea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	8919      	ldrh	r1, [r3, #8]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	8b3a      	ldrh	r2, [r7, #24]
 800adf8:	1a8a      	subs	r2, r1, r2
 800adfa:	b292      	uxth	r2, r2
 800adfc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	68d2      	ldr	r2, [r2, #12]
 800ae06:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	741a      	strb	r2, [r3, #16]
 800ae10:	2200      	movs	r2, #0
 800ae12:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f103 0214 	add.w	r2, r3, #20
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	7a9b      	ldrb	r3, [r3, #10]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	4413      	add	r3, r2
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d006      	beq.n	800ae3c <tcp_output_segment+0x16c>
 800ae2e:	4b10      	ldr	r3, [pc, #64]	; (800ae70 <tcp_output_segment+0x1a0>)
 800ae30:	f240 621c 	movw	r2, #1564	; 0x61c
 800ae34:	4914      	ldr	r1, [pc, #80]	; (800ae88 <tcp_output_segment+0x1b8>)
 800ae36:	4810      	ldr	r0, [pc, #64]	; (800ae78 <tcp_output_segment+0x1a8>)
 800ae38:	f003 fb4a 	bl	800e4d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6858      	ldr	r0, [r3, #4]
 800ae40:	68b9      	ldr	r1, [r7, #8]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	1d1c      	adds	r4, r3, #4
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	7add      	ldrb	r5, [r3, #11]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	7a9b      	ldrb	r3, [r3, #10]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	9202      	str	r2, [sp, #8]
 800ae52:	2206      	movs	r2, #6
 800ae54:	9201      	str	r2, [sp, #4]
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	462b      	mov	r3, r5
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	f002 fa36 	bl	800d2cc <ip4_output_if>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ae64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3720      	adds	r7, #32
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae70:	08010c5c 	.word	0x08010c5c
 800ae74:	08011220 	.word	0x08011220
 800ae78:	08010cb0 	.word	0x08010cb0
 800ae7c:	08011240 	.word	0x08011240
 800ae80:	08011260 	.word	0x08011260
 800ae84:	20008a60 	.word	0x20008a60
 800ae88:	08011284 	.word	0x08011284

0800ae8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ae8c:	b5b0      	push	{r4, r5, r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <tcp_rexmit_rto_prepare+0x1c>
 800ae9a:	4b31      	ldr	r3, [pc, #196]	; (800af60 <tcp_rexmit_rto_prepare+0xd4>)
 800ae9c:	f240 6263 	movw	r2, #1635	; 0x663
 800aea0:	4930      	ldr	r1, [pc, #192]	; (800af64 <tcp_rexmit_rto_prepare+0xd8>)
 800aea2:	4831      	ldr	r0, [pc, #196]	; (800af68 <tcp_rexmit_rto_prepare+0xdc>)
 800aea4:	f003 fb14 	bl	800e4d0 <iprintf>

  if (pcb->unacked == NULL) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aeb0:	f06f 0305 	mvn.w	r3, #5
 800aeb4:	e050      	b.n	800af58 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	e00b      	b.n	800aed6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff fee6 	bl	800ac90 <tcp_output_segment_busy>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800aeca:	f06f 0305 	mvn.w	r3, #5
 800aece:	e043      	b.n	800af58 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1ef      	bne.n	800aebe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fed6 	bl	800ac90 <tcp_output_segment_busy>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800aeea:	f06f 0305 	mvn.w	r3, #5
 800aeee:	e033      	b.n	800af58 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	8b5b      	ldrh	r3, [r3, #26]
 800af0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af0e:	b29a      	uxth	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f8 fead 	bl	8003c7a <lwip_htonl>
 800af20:	4604      	mov	r4, r0
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	891b      	ldrh	r3, [r3, #8]
 800af26:	461d      	mov	r5, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4618      	mov	r0, r3
 800af32:	f7f8 fe8d 	bl	8003c50 <lwip_htons>
 800af36:	4603      	mov	r3, r0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <tcp_rexmit_rto_prepare+0xba>
 800af42:	2301      	movs	r3, #1
 800af44:	e000      	b.n	800af48 <tcp_rexmit_rto_prepare+0xbc>
 800af46:	2300      	movs	r3, #0
 800af48:	442b      	add	r3, r5
 800af4a:	18e2      	adds	r2, r4, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bdb0      	pop	{r4, r5, r7, pc}
 800af60:	08010c5c 	.word	0x08010c5c
 800af64:	08011298 	.word	0x08011298
 800af68:	08010cb0 	.word	0x08010cb0

0800af6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <tcp_rexmit_rto_commit+0x1c>
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <tcp_rexmit_rto_commit+0x44>)
 800af7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800af80:	490c      	ldr	r1, [pc, #48]	; (800afb4 <tcp_rexmit_rto_commit+0x48>)
 800af82:	480d      	ldr	r0, [pc, #52]	; (800afb8 <tcp_rexmit_rto_commit+0x4c>)
 800af84:	f003 faa4 	bl	800e4d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af8e:	2bff      	cmp	r3, #255	; 0xff
 800af90:	d007      	beq.n	800afa2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af98:	3301      	adds	r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fc80 	bl	800a8a8 <tcp_output>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	08010c5c 	.word	0x08010c5c
 800afb4:	080112bc 	.word	0x080112bc
 800afb8:	08010cb0 	.word	0x08010cb0

0800afbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <tcp_rexmit_rto+0x1c>
 800afca:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <tcp_rexmit_rto+0x38>)
 800afcc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800afd0:	4909      	ldr	r1, [pc, #36]	; (800aff8 <tcp_rexmit_rto+0x3c>)
 800afd2:	480a      	ldr	r0, [pc, #40]	; (800affc <tcp_rexmit_rto+0x40>)
 800afd4:	f003 fa7c 	bl	800e4d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff ff57 	bl	800ae8c <tcp_rexmit_rto_prepare>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ffc1 	bl	800af6c <tcp_rexmit_rto_commit>
  }
}
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	08010c5c 	.word	0x08010c5c
 800aff8:	080112e0 	.word	0x080112e0
 800affc:	08010cb0 	.word	0x08010cb0

0800b000 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b000:	b590      	push	{r4, r7, lr}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <tcp_rexmit+0x1c>
 800b00e:	4b2f      	ldr	r3, [pc, #188]	; (800b0cc <tcp_rexmit+0xcc>)
 800b010:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b014:	492e      	ldr	r1, [pc, #184]	; (800b0d0 <tcp_rexmit+0xd0>)
 800b016:	482f      	ldr	r0, [pc, #188]	; (800b0d4 <tcp_rexmit+0xd4>)
 800b018:	f003 fa5a 	bl	800e4d0 <iprintf>

  if (pcb->unacked == NULL) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b024:	f06f 0305 	mvn.w	r3, #5
 800b028:	e04c      	b.n	800b0c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b030:	68b8      	ldr	r0, [r7, #8]
 800b032:	f7ff fe2d 	bl	800ac90 <tcp_output_segment_busy>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b03c:	f06f 0305 	mvn.w	r3, #5
 800b040:	e040      	b.n	800b0c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	336c      	adds	r3, #108	; 0x6c
 800b04e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b050:	e002      	b.n	800b058 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d011      	beq.n	800b084 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f8 fe06 	bl	8003c7a <lwip_htonl>
 800b06e:	4604      	mov	r4, r0
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	4618      	mov	r0, r3
 800b078:	f7f8 fdff 	bl	8003c7a <lwip_htonl>
 800b07c:	4603      	mov	r3, r0
 800b07e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b080:	2b00      	cmp	r3, #0
 800b082:	dbe6      	blt.n	800b052 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d103      	bne.n	800b0a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0a8:	2bff      	cmp	r3, #255	; 0xff
 800b0aa:	d007      	beq.n	800b0bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd90      	pop	{r4, r7, pc}
 800b0cc:	08010c5c 	.word	0x08010c5c
 800b0d0:	080112fc 	.word	0x080112fc
 800b0d4:	08010cb0 	.word	0x08010cb0

0800b0d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d106      	bne.n	800b0f4 <tcp_rexmit_fast+0x1c>
 800b0e6:	4b2a      	ldr	r3, [pc, #168]	; (800b190 <tcp_rexmit_fast+0xb8>)
 800b0e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b0ec:	4929      	ldr	r1, [pc, #164]	; (800b194 <tcp_rexmit_fast+0xbc>)
 800b0ee:	482a      	ldr	r0, [pc, #168]	; (800b198 <tcp_rexmit_fast+0xc0>)
 800b0f0:	f003 f9ee 	bl	800e4d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d045      	beq.n	800b188 <tcp_rexmit_fast+0xb0>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	8b5b      	ldrh	r3, [r3, #26]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	d13f      	bne.n	800b188 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff ff79 	bl	800b000 <tcp_rexmit>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d139      	bne.n	800b188 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b120:	4293      	cmp	r3, r2
 800b122:	bf28      	it	cs
 800b124:	4613      	movcs	r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	da00      	bge.n	800b12e <tcp_rexmit_fast+0x56>
 800b12c:	3301      	adds	r3, #1
 800b12e:	105b      	asrs	r3, r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	429a      	cmp	r2, r3
 800b148:	d206      	bcs.n	800b158 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b162:	4619      	mov	r1, r3
 800b164:	0049      	lsls	r1, r1, #1
 800b166:	440b      	add	r3, r1
 800b168:	b29b      	uxth	r3, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	8b5b      	ldrh	r3, [r3, #26]
 800b178:	f043 0304 	orr.w	r3, r3, #4
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	08010c5c 	.word	0x08010c5c
 800b194:	08011314 	.word	0x08011314
 800b198:	08010cb0 	.word	0x08010cb0

0800b19c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	607b      	str	r3, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	817b      	strh	r3, [r7, #10]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b1ae:	897a      	ldrh	r2, [r7, #10]
 800b1b0:	893b      	ldrh	r3, [r7, #8]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3314      	adds	r3, #20
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1be:	4619      	mov	r1, r3
 800b1c0:	2022      	movs	r0, #34	; 0x22
 800b1c2:	f7f9 fd15 	bl	8004bf0 <pbuf_alloc>
 800b1c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d04d      	beq.n	800b26a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b1ce:	897b      	ldrh	r3, [r7, #10]
 800b1d0:	3313      	adds	r3, #19
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	8952      	ldrh	r2, [r2, #10]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	db06      	blt.n	800b1e8 <tcp_output_alloc_header_common+0x4c>
 800b1da:	4b26      	ldr	r3, [pc, #152]	; (800b274 <tcp_output_alloc_header_common+0xd8>)
 800b1dc:	f240 7223 	movw	r2, #1827	; 0x723
 800b1e0:	4925      	ldr	r1, [pc, #148]	; (800b278 <tcp_output_alloc_header_common+0xdc>)
 800b1e2:	4826      	ldr	r0, [pc, #152]	; (800b27c <tcp_output_alloc_header_common+0xe0>)
 800b1e4:	f003 f974 	bl	800e4d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b1ee:	8c3b      	ldrh	r3, [r7, #32]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7f8 fd2d 	bl	8003c50 <lwip_htons>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b200:	4618      	mov	r0, r3
 800b202:	f7f8 fd25 	bl	8003c50 <lwip_htons>
 800b206:	4603      	mov	r3, r0
 800b208:	461a      	mov	r2, r3
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7f8 fd30 	bl	8003c7a <lwip_htonl>
 800b21a:	4602      	mov	r2, r0
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b220:	897b      	ldrh	r3, [r7, #10]
 800b222:	089b      	lsrs	r3, r3, #2
 800b224:	b29b      	uxth	r3, r3
 800b226:	3305      	adds	r3, #5
 800b228:	b29b      	uxth	r3, r3
 800b22a:	031b      	lsls	r3, r3, #12
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b232:	b29b      	uxth	r3, r3
 800b234:	4313      	orrs	r3, r2
 800b236:	b29b      	uxth	r3, r3
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f8 fd09 	bl	8003c50 <lwip_htons>
 800b23e:	4603      	mov	r3, r0
 800b240:	461a      	mov	r2, r3
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b248:	4618      	mov	r0, r3
 800b24a:	f7f8 fd01 	bl	8003c50 <lwip_htons>
 800b24e:	4603      	mov	r3, r0
 800b250:	461a      	mov	r2, r3
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2200      	movs	r2, #0
 800b25a:	741a      	strb	r2, [r3, #16]
 800b25c:	2200      	movs	r2, #0
 800b25e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	2200      	movs	r2, #0
 800b264:	749a      	strb	r2, [r3, #18]
 800b266:	2200      	movs	r2, #0
 800b268:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b26a:	697b      	ldr	r3, [r7, #20]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08010c5c 	.word	0x08010c5c
 800b278:	08011334 	.word	0x08011334
 800b27c:	08010cb0 	.word	0x08010cb0

0800b280 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b280:	b5b0      	push	{r4, r5, r7, lr}
 800b282:	b08a      	sub	sp, #40	; 0x28
 800b284:	af04      	add	r7, sp, #16
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	460b      	mov	r3, r1
 800b28c:	817b      	strh	r3, [r7, #10]
 800b28e:	4613      	mov	r3, r2
 800b290:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <tcp_output_alloc_header+0x26>
 800b298:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <tcp_output_alloc_header+0x70>)
 800b29a:	f240 7242 	movw	r2, #1858	; 0x742
 800b29e:	4915      	ldr	r1, [pc, #84]	; (800b2f4 <tcp_output_alloc_header+0x74>)
 800b2a0:	4815      	ldr	r0, [pc, #84]	; (800b2f8 <tcp_output_alloc_header+0x78>)
 800b2a2:	f003 f915 	bl	800e4d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8adb      	ldrh	r3, [r3, #22]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	8b12      	ldrh	r2, [r2, #24]
 800b2b2:	68f9      	ldr	r1, [r7, #12]
 800b2b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b2b6:	893d      	ldrh	r5, [r7, #8]
 800b2b8:	897c      	ldrh	r4, [r7, #10]
 800b2ba:	9103      	str	r1, [sp, #12]
 800b2bc:	2110      	movs	r1, #16
 800b2be:	9102      	str	r1, [sp, #8]
 800b2c0:	9201      	str	r2, [sp, #4]
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	462a      	mov	r2, r5
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f7ff ff67 	bl	800b19c <tcp_output_alloc_header_common>
 800b2ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d006      	beq.n	800b2e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b2de:	441a      	add	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b2e4:	697b      	ldr	r3, [r7, #20]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	08010c5c 	.word	0x08010c5c
 800b2f4:	08011364 	.word	0x08011364
 800b2f8:	08010cb0 	.word	0x08010cb0

0800b2fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	4611      	mov	r1, r2
 800b308:	461a      	mov	r2, r3
 800b30a:	460b      	mov	r3, r1
 800b30c:	71fb      	strb	r3, [r7, #7]
 800b30e:	4613      	mov	r3, r2
 800b310:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d106      	bne.n	800b32a <tcp_output_fill_options+0x2e>
 800b31c:	4b13      	ldr	r3, [pc, #76]	; (800b36c <tcp_output_fill_options+0x70>)
 800b31e:	f240 7256 	movw	r2, #1878	; 0x756
 800b322:	4913      	ldr	r1, [pc, #76]	; (800b370 <tcp_output_fill_options+0x74>)
 800b324:	4813      	ldr	r0, [pc, #76]	; (800b374 <tcp_output_fill_options+0x78>)
 800b326:	f003 f8d3 	bl	800e4d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	3314      	adds	r3, #20
 800b334:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	f103 0214 	add.w	r2, r3, #20
 800b33c:	8bfb      	ldrh	r3, [r7, #30]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4619      	mov	r1, r3
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	440b      	add	r3, r1
 800b34c:	4413      	add	r3, r2
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	429a      	cmp	r2, r3
 800b352:	d006      	beq.n	800b362 <tcp_output_fill_options+0x66>
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <tcp_output_fill_options+0x70>)
 800b356:	f240 7275 	movw	r2, #1909	; 0x775
 800b35a:	4907      	ldr	r1, [pc, #28]	; (800b378 <tcp_output_fill_options+0x7c>)
 800b35c:	4805      	ldr	r0, [pc, #20]	; (800b374 <tcp_output_fill_options+0x78>)
 800b35e:	f003 f8b7 	bl	800e4d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b362:	bf00      	nop
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	08010c5c 	.word	0x08010c5c
 800b370:	0801138c 	.word	0x0801138c
 800b374:	08010cb0 	.word	0x08010cb0
 800b378:	08011284 	.word	0x08011284

0800b37c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08a      	sub	sp, #40	; 0x28
 800b380:	af04      	add	r7, sp, #16
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <tcp_output_control_segment+0x22>
 800b390:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <tcp_output_control_segment+0x88>)
 800b392:	f240 7287 	movw	r2, #1927	; 0x787
 800b396:	491c      	ldr	r1, [pc, #112]	; (800b408 <tcp_output_control_segment+0x8c>)
 800b398:	481c      	ldr	r0, [pc, #112]	; (800b40c <tcp_output_control_segment+0x90>)
 800b39a:	f003 f899 	bl	800e4d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7fe fae8 	bl	8009978 <tcp_route>
 800b3a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b3b0:	23fc      	movs	r3, #252	; 0xfc
 800b3b2:	75fb      	strb	r3, [r7, #23]
 800b3b4:	e01c      	b.n	800b3f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d006      	beq.n	800b3ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	7adb      	ldrb	r3, [r3, #11]
 800b3c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	7a9b      	ldrb	r3, [r3, #10]
 800b3c6:	757b      	strb	r3, [r7, #21]
 800b3c8:	e003      	b.n	800b3d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b3ca:	23ff      	movs	r3, #255	; 0xff
 800b3cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b3d2:	7dba      	ldrb	r2, [r7, #22]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	2306      	movs	r3, #6
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	7d7b      	ldrb	r3, [r7, #21]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	68b8      	ldr	r0, [r7, #8]
 800b3e8:	f001 ff70 	bl	800d2cc <ip4_output_if>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	f7f9 fee1 	bl	80051b8 <pbuf_free>
  return err;
 800b3f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	08010c5c 	.word	0x08010c5c
 800b408:	080113b4 	.word	0x080113b4
 800b40c:	08010cb0 	.word	0x08010cb0

0800b410 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b410:	b590      	push	{r4, r7, lr}
 800b412:	b08b      	sub	sp, #44	; 0x2c
 800b414:	af04      	add	r7, sp, #16
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <tcp_rst+0x22>
 800b424:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <tcp_rst+0x94>)
 800b426:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b42a:	491f      	ldr	r1, [pc, #124]	; (800b4a8 <tcp_rst+0x98>)
 800b42c:	481f      	ldr	r0, [pc, #124]	; (800b4ac <tcp_rst+0x9c>)
 800b42e:	f003 f84f 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b434:	2b00      	cmp	r3, #0
 800b436:	d106      	bne.n	800b446 <tcp_rst+0x36>
 800b438:	4b1a      	ldr	r3, [pc, #104]	; (800b4a4 <tcp_rst+0x94>)
 800b43a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b43e:	491c      	ldr	r1, [pc, #112]	; (800b4b0 <tcp_rst+0xa0>)
 800b440:	481a      	ldr	r0, [pc, #104]	; (800b4ac <tcp_rst+0x9c>)
 800b442:	f003 f845 	bl	800e4d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b446:	2300      	movs	r3, #0
 800b448:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b44a:	f246 0308 	movw	r3, #24584	; 0x6008
 800b44e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	b29c      	uxth	r4, r3
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	f7f8 fc10 	bl	8003c7a <lwip_htonl>
 800b45a:	4602      	mov	r2, r0
 800b45c:	8abb      	ldrh	r3, [r7, #20]
 800b45e:	9303      	str	r3, [sp, #12]
 800b460:	2314      	movs	r3, #20
 800b462:	9302      	str	r3, [sp, #8]
 800b464:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b466:	9301      	str	r3, [sp, #4]
 800b468:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	4613      	mov	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	4621      	mov	r1, r4
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fe92 	bl	800b19c <tcp_output_alloc_header_common>
 800b478:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00c      	beq.n	800b49a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	2200      	movs	r2, #0
 800b484:	6939      	ldr	r1, [r7, #16]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff ff38 	bl	800b2fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	6939      	ldr	r1, [r7, #16]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff ff72 	bl	800b37c <tcp_output_control_segment>
 800b498:	e000      	b.n	800b49c <tcp_rst+0x8c>
    return;
 800b49a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd90      	pop	{r4, r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	08010c5c 	.word	0x08010c5c
 800b4a8:	080113e0 	.word	0x080113e0
 800b4ac:	08010cb0 	.word	0x08010cb0
 800b4b0:	080113fc 	.word	0x080113fc

0800b4b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <tcp_send_empty_ack+0x24>
 800b4ca:	4b28      	ldr	r3, [pc, #160]	; (800b56c <tcp_send_empty_ack+0xb8>)
 800b4cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b4d0:	4927      	ldr	r1, [pc, #156]	; (800b570 <tcp_send_empty_ack+0xbc>)
 800b4d2:	4828      	ldr	r0, [pc, #160]	; (800b574 <tcp_send_empty_ack+0xc0>)
 800b4d4:	f002 fffc 	bl	800e4d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	f003 0304 	and.w	r3, r3, #4
 800b4e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b4e4:	7d7b      	ldrb	r3, [r7, #21]
 800b4e6:	b29c      	uxth	r4, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7f8 fbc4 	bl	8003c7a <lwip_htonl>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff fec1 	bl	800b280 <tcp_output_alloc_header>
 800b4fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	8b5b      	ldrh	r3, [r3, #26]
 800b50a:	f043 0303 	orr.w	r3, r3, #3
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b514:	f06f 0301 	mvn.w	r3, #1
 800b518:	e023      	b.n	800b562 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b51a:	7dbb      	ldrb	r3, [r7, #22]
 800b51c:	7dfa      	ldrb	r2, [r7, #23]
 800b51e:	6939      	ldr	r1, [r7, #16]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff feeb 	bl	800b2fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3304      	adds	r3, #4
 800b52c:	6939      	ldr	r1, [r7, #16]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff ff24 	bl	800b37c <tcp_output_control_segment>
 800b534:	4603      	mov	r3, r0
 800b536:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8b5b      	ldrh	r3, [r3, #26]
 800b544:	f043 0303 	orr.w	r3, r3, #3
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	835a      	strh	r2, [r3, #26]
 800b54e:	e006      	b.n	800b55e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	8b5b      	ldrh	r3, [r3, #26]
 800b554:	f023 0303 	bic.w	r3, r3, #3
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	371c      	adds	r7, #28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd90      	pop	{r4, r7, pc}
 800b56a:	bf00      	nop
 800b56c:	08010c5c 	.word	0x08010c5c
 800b570:	08011418 	.word	0x08011418
 800b574:	08010cb0 	.word	0x08010cb0

0800b578 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b578:	b590      	push	{r4, r7, lr}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d106      	bne.n	800b598 <tcp_keepalive+0x20>
 800b58a:	4b18      	ldr	r3, [pc, #96]	; (800b5ec <tcp_keepalive+0x74>)
 800b58c:	f640 0224 	movw	r2, #2084	; 0x824
 800b590:	4917      	ldr	r1, [pc, #92]	; (800b5f0 <tcp_keepalive+0x78>)
 800b592:	4818      	ldr	r0, [pc, #96]	; (800b5f4 <tcp_keepalive+0x7c>)
 800b594:	f002 ff9c 	bl	800e4d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	b29c      	uxth	r4, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f8 fb69 	bl	8003c7a <lwip_htonl>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fe66 	bl	800b280 <tcp_output_alloc_header>
 800b5b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	e010      	b.n	800b5e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	6939      	ldr	r1, [r7, #16]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff fe97 	bl	800b2fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	6939      	ldr	r1, [r7, #16]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff fed0 	bl	800b37c <tcp_output_control_segment>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd90      	pop	{r4, r7, pc}
 800b5ec:	08010c5c 	.word	0x08010c5c
 800b5f0:	08011438 	.word	0x08011438
 800b5f4:	08010cb0 	.word	0x08010cb0

0800b5f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b08b      	sub	sp, #44	; 0x2c
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b600:	2300      	movs	r3, #0
 800b602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <tcp_zero_window_probe+0x22>
 800b60c:	4b4c      	ldr	r3, [pc, #304]	; (800b740 <tcp_zero_window_probe+0x148>)
 800b60e:	f640 024f 	movw	r2, #2127	; 0x84f
 800b612:	494c      	ldr	r1, [pc, #304]	; (800b744 <tcp_zero_window_probe+0x14c>)
 800b614:	484c      	ldr	r0, [pc, #304]	; (800b748 <tcp_zero_window_probe+0x150>)
 800b616:	f002 ff5b 	bl	800e4d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b61e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e086      	b.n	800b738 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b630:	2bff      	cmp	r3, #255	; 0xff
 800b632:	d007      	beq.n	800b644 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b63a:	3301      	adds	r3, #1
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	899b      	ldrh	r3, [r3, #12]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7f8 faff 	bl	8003c50 <lwip_htons>
 800b652:	4603      	mov	r3, r0
 800b654:	b2db      	uxtb	r3, r3
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <tcp_zero_window_probe+0x72>
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	891b      	ldrh	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <tcp_zero_window_probe+0x72>
 800b666:	2301      	movs	r3, #1
 800b668:	e000      	b.n	800b66c <tcp_zero_window_probe+0x74>
 800b66a:	2300      	movs	r3, #0
 800b66c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b66e:	7ffb      	ldrb	r3, [r7, #31]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bf0c      	ite	eq
 800b674:	2301      	moveq	r3, #1
 800b676:	2300      	movne	r3, #0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b680:	b299      	uxth	r1, r3
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	8bba      	ldrh	r2, [r7, #28]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff fdf8 	bl	800b280 <tcp_output_alloc_header>
 800b690:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b698:	f04f 33ff 	mov.w	r3, #4294967295
 800b69c:	e04c      	b.n	800b738 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b6a4:	7ffb      	ldrb	r3, [r7, #31]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d011      	beq.n	800b6ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	899b      	ldrh	r3, [r3, #12]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	b21b      	sxth	r3, r3
 800b6b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6b6:	b21c      	sxth	r4, r3
 800b6b8:	2011      	movs	r0, #17
 800b6ba:	f7f8 fac9 	bl	8003c50 <lwip_htons>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	b21b      	sxth	r3, r3
 800b6c2:	4323      	orrs	r3, r4
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	819a      	strh	r2, [r3, #12]
 800b6cc:	e010      	b.n	800b6f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	3314      	adds	r3, #20
 800b6d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	6858      	ldr	r0, [r3, #4]
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	891a      	ldrh	r2, [r3, #8]
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	891b      	ldrh	r3, [r3, #8]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	6939      	ldr	r1, [r7, #16]
 800b6ec:	f7f9 ff5e 	bl	80055ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7f8 fabf 	bl	8003c7a <lwip_htonl>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	3301      	adds	r3, #1
 800b700:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	da02      	bge.n	800b714 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b718:	2200      	movs	r2, #0
 800b71a:	69b9      	ldr	r1, [r7, #24]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff fded 	bl	800b2fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	69b9      	ldr	r1, [r7, #24]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fe26 	bl	800b37c <tcp_output_control_segment>
 800b730:	4603      	mov	r3, r0
 800b732:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b734:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	372c      	adds	r7, #44	; 0x2c
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd90      	pop	{r4, r7, pc}
 800b740:	08010c5c 	.word	0x08010c5c
 800b744:	08011454 	.word	0x08011454
 800b748:	08010cb0 	.word	0x08010cb0

0800b74c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b754:	f7fa f818 	bl	8005788 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <tcpip_tcp_timer+0x38>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <tcpip_tcp_timer+0x1c>
 800b760:	4b09      	ldr	r3, [pc, #36]	; (800b788 <tcpip_tcp_timer+0x3c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b768:	2200      	movs	r2, #0
 800b76a:	4908      	ldr	r1, [pc, #32]	; (800b78c <tcpip_tcp_timer+0x40>)
 800b76c:	20fa      	movs	r0, #250	; 0xfa
 800b76e:	f000 f8f3 	bl	800b958 <sys_timeout>
 800b772:	e003      	b.n	800b77c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b774:	4b06      	ldr	r3, [pc, #24]	; (800b790 <tcpip_tcp_timer+0x44>)
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
  }
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20008a5c 	.word	0x20008a5c
 800b788:	20008a6c 	.word	0x20008a6c
 800b78c:	0800b74d 	.word	0x0800b74d
 800b790:	20000108 	.word	0x20000108

0800b794 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <tcp_timer_needed+0x30>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10f      	bne.n	800b7c0 <tcp_timer_needed+0x2c>
 800b7a0:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <tcp_timer_needed+0x34>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d103      	bne.n	800b7b0 <tcp_timer_needed+0x1c>
 800b7a8:	4b08      	ldr	r3, [pc, #32]	; (800b7cc <tcp_timer_needed+0x38>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <tcp_timer_needed+0x30>)
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4905      	ldr	r1, [pc, #20]	; (800b7d0 <tcp_timer_needed+0x3c>)
 800b7ba:	20fa      	movs	r0, #250	; 0xfa
 800b7bc:	f000 f8cc 	bl	800b958 <sys_timeout>
  }
}
 800b7c0:	bf00      	nop
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000108 	.word	0x20000108
 800b7c8:	20008a5c 	.word	0x20008a5c
 800b7cc:	20008a6c 	.word	0x20008a6c
 800b7d0:	0800b74d 	.word	0x0800b74d

0800b7d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b7e0:	2006      	movs	r0, #6
 800b7e2:	f7f8 fe8b 	bl	80044fc <memp_malloc>
 800b7e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d151      	bne.n	800b898 <sys_timeout_abs+0xc4>
 800b7f4:	4b2a      	ldr	r3, [pc, #168]	; (800b8a0 <sys_timeout_abs+0xcc>)
 800b7f6:	22be      	movs	r2, #190	; 0xbe
 800b7f8:	492a      	ldr	r1, [pc, #168]	; (800b8a4 <sys_timeout_abs+0xd0>)
 800b7fa:	482b      	ldr	r0, [pc, #172]	; (800b8a8 <sys_timeout_abs+0xd4>)
 800b7fc:	f002 fe68 	bl	800e4d0 <iprintf>
    return;
 800b800:	e04a      	b.n	800b898 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b81a:	4b24      	ldr	r3, [pc, #144]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d103      	bne.n	800b82a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b822:	4a22      	ldr	r2, [pc, #136]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6013      	str	r3, [r2, #0]
    return;
 800b828:	e037      	b.n	800b89a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4b1f      	ldr	r3, [pc, #124]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	0fdb      	lsrs	r3, r3, #31
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d007      	beq.n	800b852 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b842:	4b1a      	ldr	r3, [pc, #104]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b84a:	4a18      	ldr	r2, [pc, #96]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	e023      	b.n	800b89a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b852:	4b16      	ldr	r3, [pc, #88]	; (800b8ac <sys_timeout_abs+0xd8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e01a      	b.n	800b890 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <sys_timeout_abs+0xa6>
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	0fdb      	lsrs	r3, r3, #31
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d007      	beq.n	800b88a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	601a      	str	r2, [r3, #0]
        break;
 800b888:	e007      	b.n	800b89a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e1      	bne.n	800b85a <sys_timeout_abs+0x86>
 800b896:	e000      	b.n	800b89a <sys_timeout_abs+0xc6>
    return;
 800b898:	bf00      	nop
      }
    }
  }
}
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	08011478 	.word	0x08011478
 800b8a4:	080114ac 	.word	0x080114ac
 800b8a8:	080114ec 	.word	0x080114ec
 800b8ac:	20000100 	.word	0x20000100

0800b8b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4798      	blx	r3

  now = sys_now();
 800b8c2:	f7f8 f937 	bl	8003b34 <sys_now>
 800b8c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <lwip_cyclic_timer+0x5c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	0fdb      	lsrs	r3, r3, #31
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d009      	beq.n	800b8fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	4907      	ldr	r1, [pc, #28]	; (800b910 <lwip_cyclic_timer+0x60>)
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ff6e 	bl	800b7d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b8f8:	e004      	b.n	800b904 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	4904      	ldr	r1, [pc, #16]	; (800b910 <lwip_cyclic_timer+0x60>)
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f7ff ff68 	bl	800b7d4 <sys_timeout_abs>
}
 800b904:	bf00      	nop
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20000104 	.word	0x20000104
 800b910:	0800b8b1 	.word	0x0800b8b1

0800b914 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b91a:	2301      	movs	r3, #1
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	e00e      	b.n	800b93e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b920:	4a0b      	ldr	r2, [pc, #44]	; (800b950 <sys_timeouts_init+0x3c>)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	4a08      	ldr	r2, [pc, #32]	; (800b950 <sys_timeouts_init+0x3c>)
 800b92e:	4413      	add	r3, r2
 800b930:	461a      	mov	r2, r3
 800b932:	4908      	ldr	r1, [pc, #32]	; (800b954 <sys_timeouts_init+0x40>)
 800b934:	f000 f810 	bl	800b958 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3301      	adds	r3, #1
 800b93c:	607b      	str	r3, [r7, #4]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d9ed      	bls.n	800b920 <sys_timeouts_init+0xc>
  }
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	08012050 	.word	0x08012050
 800b954:	0800b8b1 	.word	0x0800b8b1

0800b958 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b96a:	d306      	bcc.n	800b97a <sys_timeout+0x22>
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <sys_timeout+0x40>)
 800b96e:	f240 1229 	movw	r2, #297	; 0x129
 800b972:	490a      	ldr	r1, [pc, #40]	; (800b99c <sys_timeout+0x44>)
 800b974:	480a      	ldr	r0, [pc, #40]	; (800b9a0 <sys_timeout+0x48>)
 800b976:	f002 fdab 	bl	800e4d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b97a:	f7f8 f8db 	bl	8003b34 <sys_now>
 800b97e:	4602      	mov	r2, r0
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	6978      	ldr	r0, [r7, #20]
 800b98c:	f7ff ff22 	bl	800b7d4 <sys_timeout_abs>
#endif
}
 800b990:	bf00      	nop
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	08011478 	.word	0x08011478
 800b99c:	08011514 	.word	0x08011514
 800b9a0:	080114ec 	.word	0x080114ec

0800b9a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b9aa:	f7f8 f8c3 	bl	8003b34 <sys_now>
 800b9ae:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <sys_check_timeouts+0x78>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <sys_check_timeouts+0x1a>
 800b9ba:	f7f9 f8c3 	bl	8004b44 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b9be:	4b18      	ldr	r3, [pc, #96]	; (800ba20 <sys_check_timeouts+0x7c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d022      	beq.n	800ba10 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	0fdb      	lsrs	r3, r3, #31
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d11a      	bne.n	800ba14 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a0f      	ldr	r2, [pc, #60]	; (800ba20 <sys_check_timeouts+0x7c>)
 800b9e4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	4a0b      	ldr	r2, [pc, #44]	; (800ba24 <sys_check_timeouts+0x80>)
 800b9f8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	2006      	movs	r0, #6
 800b9fe:	f7f8 fdc9 	bl	8004594 <memp_free>
    if (handler != NULL) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d0d3      	beq.n	800b9b0 <sys_check_timeouts+0xc>
      handler(arg);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6838      	ldr	r0, [r7, #0]
 800ba0c:	4798      	blx	r3
  do {
 800ba0e:	e7cf      	b.n	800b9b0 <sys_check_timeouts+0xc>
      return;
 800ba10:	bf00      	nop
 800ba12:	e000      	b.n	800ba16 <sys_check_timeouts+0x72>
      return;
 800ba14:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20008a54 	.word	0x20008a54
 800ba20:	20000100 	.word	0x20000100
 800ba24:	20000104 	.word	0x20000104

0800ba28 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba2c:	f002 fd68 	bl	800e500 <rand>
 800ba30:	4603      	mov	r3, r0
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	4b01      	ldr	r3, [pc, #4]	; (800ba48 <udp_init+0x20>)
 800ba42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba44:	bf00      	nop
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	20000010 	.word	0x20000010

0800ba4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <udp_input_local_match+0x20>
 800ba60:	4b27      	ldr	r3, [pc, #156]	; (800bb00 <udp_input_local_match+0xb4>)
 800ba62:	2287      	movs	r2, #135	; 0x87
 800ba64:	4927      	ldr	r1, [pc, #156]	; (800bb04 <udp_input_local_match+0xb8>)
 800ba66:	4828      	ldr	r0, [pc, #160]	; (800bb08 <udp_input_local_match+0xbc>)
 800ba68:	f002 fd32 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d105      	bne.n	800ba7e <udp_input_local_match+0x32>
 800ba72:	4b23      	ldr	r3, [pc, #140]	; (800bb00 <udp_input_local_match+0xb4>)
 800ba74:	2288      	movs	r2, #136	; 0x88
 800ba76:	4925      	ldr	r1, [pc, #148]	; (800bb0c <udp_input_local_match+0xc0>)
 800ba78:	4823      	ldr	r0, [pc, #140]	; (800bb08 <udp_input_local_match+0xbc>)
 800ba7a:	f002 fd29 	bl	800e4d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	7a1b      	ldrb	r3, [r3, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00b      	beq.n	800ba9e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	7a1a      	ldrb	r2, [r3, #8]
 800ba8a:	4b21      	ldr	r3, [pc, #132]	; (800bb10 <udp_input_local_match+0xc4>)
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba92:	3301      	adds	r3, #1
 800ba94:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d001      	beq.n	800ba9e <udp_input_local_match+0x52>
    return 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e02b      	b.n	800baf6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d018      	beq.n	800bad6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d013      	beq.n	800bad2 <udp_input_local_match+0x86>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00f      	beq.n	800bad2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <udp_input_local_match+0xc4>)
 800bab4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d00a      	beq.n	800bad2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <udp_input_local_match+0xc4>)
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	405a      	eors	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3308      	adds	r3, #8
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d110      	bne.n	800baf4 <udp_input_local_match+0xa8>
          return 1;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e00f      	b.n	800baf6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d009      	beq.n	800baf0 <udp_input_local_match+0xa4>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <udp_input_local_match+0xa4>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <udp_input_local_match+0xc4>)
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	429a      	cmp	r2, r3
 800baee:	d101      	bne.n	800baf4 <udp_input_local_match+0xa8>
        return 1;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e000      	b.n	800baf6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	08011560 	.word	0x08011560
 800bb04:	08011590 	.word	0x08011590
 800bb08:	080115b4 	.word	0x080115b4
 800bb0c:	080115dc 	.word	0x080115dc
 800bb10:	20003358 	.word	0x20003358

0800bb14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b08d      	sub	sp, #52	; 0x34
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d105      	bne.n	800bb34 <udp_input+0x20>
 800bb28:	4b7c      	ldr	r3, [pc, #496]	; (800bd1c <udp_input+0x208>)
 800bb2a:	22cf      	movs	r2, #207	; 0xcf
 800bb2c:	497c      	ldr	r1, [pc, #496]	; (800bd20 <udp_input+0x20c>)
 800bb2e:	487d      	ldr	r0, [pc, #500]	; (800bd24 <udp_input+0x210>)
 800bb30:	f002 fcce 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <udp_input+0x32>
 800bb3a:	4b78      	ldr	r3, [pc, #480]	; (800bd1c <udp_input+0x208>)
 800bb3c:	22d0      	movs	r2, #208	; 0xd0
 800bb3e:	497a      	ldr	r1, [pc, #488]	; (800bd28 <udp_input+0x214>)
 800bb40:	4878      	ldr	r0, [pc, #480]	; (800bd24 <udp_input+0x210>)
 800bb42:	f002 fcc5 	bl	800e4d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	895b      	ldrh	r3, [r3, #10]
 800bb4a:	2b07      	cmp	r3, #7
 800bb4c:	d803      	bhi.n	800bb56 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7f9 fb32 	bl	80051b8 <pbuf_free>
    goto end;
 800bb54:	e0de      	b.n	800bd14 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb5c:	4b73      	ldr	r3, [pc, #460]	; (800bd2c <udp_input+0x218>)
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	4a72      	ldr	r2, [pc, #456]	; (800bd2c <udp_input+0x218>)
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	4611      	mov	r1, r2
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 fc88 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f8 f86a 	bl	8003c50 <lwip_htons>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	885b      	ldrh	r3, [r3, #2]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f8 f862 	bl	8003c50 <lwip_htons>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb9c:	4b64      	ldr	r3, [pc, #400]	; (800bd30 <udp_input+0x21c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
 800bba2:	e054      	b.n	800bc4e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	8a5b      	ldrh	r3, [r3, #18]
 800bba8:	89fa      	ldrh	r2, [r7, #14]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d14a      	bne.n	800bc44 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bbae:	7cfb      	ldrb	r3, [r7, #19]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb6:	f7ff ff49 	bl	800ba4c <udp_input_local_match>
 800bbba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d041      	beq.n	800bc44 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	7c1b      	ldrb	r3, [r3, #16]
 800bbc4:	f003 0304 	and.w	r3, r3, #4
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d11d      	bne.n	800bc08 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	61fb      	str	r3, [r7, #28]
 800bbd6:	e017      	b.n	800bc08 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bbd8:	7cfb      	ldrb	r3, [r7, #19]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d014      	beq.n	800bc08 <udp_input+0xf4>
 800bbde:	4b53      	ldr	r3, [pc, #332]	; (800bd2c <udp_input+0x218>)
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d10f      	bne.n	800bc08 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d008      	beq.n	800bc08 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d101      	bne.n	800bc08 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	8a9b      	ldrh	r3, [r3, #20]
 800bc0c:	8a3a      	ldrh	r2, [r7, #16]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d118      	bne.n	800bc44 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	4b43      	ldr	r3, [pc, #268]	; (800bd2c <udp_input+0x218>)
 800bc20:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d10e      	bne.n	800bc44 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d014      	beq.n	800bc56 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc34:	4b3e      	ldr	r3, [pc, #248]	; (800bd30 <udp_input+0x21c>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc3c:	4a3c      	ldr	r2, [pc, #240]	; (800bd30 <udp_input+0x21c>)
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc42:	e008      	b.n	800bc56 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1a7      	bne.n	800bba4 <udp_input+0x90>
 800bc54:	e000      	b.n	800bc58 <udp_input+0x144>
        break;
 800bc56:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <udp_input+0x15a>
    for_us = 1;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	76fb      	strb	r3, [r7, #27]
 800bc6c:	e00a      	b.n	800bc84 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	3304      	adds	r3, #4
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	4b2d      	ldr	r3, [pc, #180]	; (800bd2c <udp_input+0x218>)
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	bf0c      	ite	eq
 800bc7c:	2301      	moveq	r3, #1
 800bc7e:	2300      	movne	r3, #0
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bc84:	7efb      	ldrb	r3, [r7, #27]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d041      	beq.n	800bd0e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bc8a:	2108      	movs	r1, #8
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7f9 fa0d 	bl	80050ac <pbuf_remove_header>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00a      	beq.n	800bcae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bc98:	4b20      	ldr	r3, [pc, #128]	; (800bd1c <udp_input+0x208>)
 800bc9a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bc9e:	4925      	ldr	r1, [pc, #148]	; (800bd34 <udp_input+0x220>)
 800bca0:	4820      	ldr	r0, [pc, #128]	; (800bd24 <udp_input+0x210>)
 800bca2:	f002 fc15 	bl	800e4d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7f9 fa86 	bl	80051b8 <pbuf_free>
      goto end;
 800bcac:	e032      	b.n	800bd14 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d012      	beq.n	800bcda <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	699c      	ldr	r4, [r3, #24]
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	69d8      	ldr	r0, [r3, #28]
 800bcc4:	8a3b      	ldrh	r3, [r7, #16]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	; (800bd38 <udp_input+0x224>)
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bcd0:	e021      	b.n	800bd16 <udp_input+0x202>
        pbuf_free(p);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f9 fa70 	bl	80051b8 <pbuf_free>
        goto end;
 800bcd8:	e01c      	b.n	800bd14 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bcda:	7cfb      	ldrb	r3, [r7, #19]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d112      	bne.n	800bd06 <udp_input+0x1f2>
 800bce0:	4b12      	ldr	r3, [pc, #72]	; (800bd2c <udp_input+0x218>)
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bce8:	2be0      	cmp	r3, #224	; 0xe0
 800bcea:	d00c      	beq.n	800bd06 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <udp_input+0x218>)
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	b21b      	sxth	r3, r3
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7f9 fa4a 	bl	8005192 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bcfe:	2103      	movs	r1, #3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f001 f89b 	bl	800ce3c <icmp_dest_unreach>
      pbuf_free(p);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7f9 fa56 	bl	80051b8 <pbuf_free>
  return;
 800bd0c:	e003      	b.n	800bd16 <udp_input+0x202>
    pbuf_free(p);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7f9 fa52 	bl	80051b8 <pbuf_free>
  return;
 800bd14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd16:	372c      	adds	r7, #44	; 0x2c
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	08011560 	.word	0x08011560
 800bd20:	08011604 	.word	0x08011604
 800bd24:	080115b4 	.word	0x080115b4
 800bd28:	0801161c 	.word	0x0801161c
 800bd2c:	20003358 	.word	0x20003358
 800bd30:	20008a74 	.word	0x20008a74
 800bd34:	08011638 	.word	0x08011638
 800bd38:	20003368 	.word	0x20003368

0800bd3c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01e      	beq.n	800bd8a <udp_netif_ip_addr_changed+0x4e>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d01a      	beq.n	800bd8a <udp_netif_ip_addr_changed+0x4e>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d017      	beq.n	800bd8a <udp_netif_ip_addr_changed+0x4e>
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d013      	beq.n	800bd8a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd62:	4b0d      	ldr	r3, [pc, #52]	; (800bd98 <udp_netif_ip_addr_changed+0x5c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	e00c      	b.n	800bd84 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d103      	bne.n	800bd7e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1ef      	bne.n	800bd6a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bd8a:	bf00      	nop
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20008a74 	.word	0x20008a74

0800bd9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bda4:	4915      	ldr	r1, [pc, #84]	; (800bdfc <etharp_free_entry+0x60>)
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	4413      	add	r3, r2
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	440b      	add	r3, r1
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d013      	beq.n	800bde0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bdb8:	4910      	ldr	r1, [pc, #64]	; (800bdfc <etharp_free_entry+0x60>)
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	4413      	add	r3, r2
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	440b      	add	r3, r1
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f9 f9f5 	bl	80051b8 <pbuf_free>
    arp_table[i].q = NULL;
 800bdce:	490b      	ldr	r1, [pc, #44]	; (800bdfc <etharp_free_entry+0x60>)
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	4413      	add	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	440b      	add	r3, r1
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bde0:	4906      	ldr	r1, [pc, #24]	; (800bdfc <etharp_free_entry+0x60>)
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4613      	mov	r3, r2
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	4413      	add	r3, r2
 800bdea:	00db      	lsls	r3, r3, #3
 800bdec:	440b      	add	r3, r1
 800bdee:	3314      	adds	r3, #20
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	2000010c 	.word	0x2000010c

0800be00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be06:	2300      	movs	r3, #0
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	e096      	b.n	800bf3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800be0c:	494f      	ldr	r1, [pc, #316]	; (800bf4c <etharp_tmr+0x14c>)
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	4613      	mov	r3, r2
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	440b      	add	r3, r1
 800be1a:	3314      	adds	r3, #20
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 8086 	beq.w	800bf34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800be28:	4948      	ldr	r1, [pc, #288]	; (800bf4c <etharp_tmr+0x14c>)
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	4613      	mov	r3, r2
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	4413      	add	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	440b      	add	r3, r1
 800be36:	3312      	adds	r3, #18
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	3301      	adds	r3, #1
 800be3c:	b298      	uxth	r0, r3
 800be3e:	4943      	ldr	r1, [pc, #268]	; (800bf4c <etharp_tmr+0x14c>)
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	440b      	add	r3, r1
 800be4c:	3312      	adds	r3, #18
 800be4e:	4602      	mov	r2, r0
 800be50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be52:	493e      	ldr	r1, [pc, #248]	; (800bf4c <etharp_tmr+0x14c>)
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	005b      	lsls	r3, r3, #1
 800be5a:	4413      	add	r3, r2
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	440b      	add	r3, r1
 800be60:	3312      	adds	r3, #18
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800be68:	d215      	bcs.n	800be96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be6a:	4938      	ldr	r1, [pc, #224]	; (800bf4c <etharp_tmr+0x14c>)
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4613      	mov	r3, r2
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	4413      	add	r3, r2
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	440b      	add	r3, r1
 800be78:	3314      	adds	r3, #20
 800be7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d10e      	bne.n	800be9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800be80:	4932      	ldr	r1, [pc, #200]	; (800bf4c <etharp_tmr+0x14c>)
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	4613      	mov	r3, r2
 800be86:	005b      	lsls	r3, r3, #1
 800be88:	4413      	add	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	440b      	add	r3, r1
 800be8e:	3312      	adds	r3, #18
 800be90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be92:	2b04      	cmp	r3, #4
 800be94:	d903      	bls.n	800be9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff ff80 	bl	800bd9c <etharp_free_entry>
 800be9c:	e04a      	b.n	800bf34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800be9e:	492b      	ldr	r1, [pc, #172]	; (800bf4c <etharp_tmr+0x14c>)
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	440b      	add	r3, r1
 800beac:	3314      	adds	r3, #20
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d10a      	bne.n	800beca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800beb4:	4925      	ldr	r1, [pc, #148]	; (800bf4c <etharp_tmr+0x14c>)
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	440b      	add	r3, r1
 800bec2:	3314      	adds	r3, #20
 800bec4:	2204      	movs	r2, #4
 800bec6:	701a      	strb	r2, [r3, #0]
 800bec8:	e034      	b.n	800bf34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800beca:	4920      	ldr	r1, [pc, #128]	; (800bf4c <etharp_tmr+0x14c>)
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	4613      	mov	r3, r2
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	4413      	add	r3, r2
 800bed4:	00db      	lsls	r3, r3, #3
 800bed6:	440b      	add	r3, r1
 800bed8:	3314      	adds	r3, #20
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d10a      	bne.n	800bef6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bee0:	491a      	ldr	r1, [pc, #104]	; (800bf4c <etharp_tmr+0x14c>)
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	4613      	mov	r3, r2
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	4413      	add	r3, r2
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	440b      	add	r3, r1
 800beee:	3314      	adds	r3, #20
 800bef0:	2202      	movs	r2, #2
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	e01e      	b.n	800bf34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bef6:	4915      	ldr	r1, [pc, #84]	; (800bf4c <etharp_tmr+0x14c>)
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	4413      	add	r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	440b      	add	r3, r1
 800bf04:	3314      	adds	r3, #20
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d113      	bne.n	800bf34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bf0c:	490f      	ldr	r1, [pc, #60]	; (800bf4c <etharp_tmr+0x14c>)
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	440b      	add	r3, r1
 800bf1a:	3308      	adds	r3, #8
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	4613      	mov	r3, r2
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	4413      	add	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	4a08      	ldr	r2, [pc, #32]	; (800bf4c <etharp_tmr+0x14c>)
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	f000 fe6e 	bl	800cc10 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3301      	adds	r3, #1
 800bf38:	607b      	str	r3, [r7, #4]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b09      	cmp	r3, #9
 800bf3e:	f77f af65 	ble.w	800be0c <etharp_tmr+0xc>
      }
    }
  }
}
 800bf42:	bf00      	nop
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	2000010c 	.word	0x2000010c

0800bf50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08a      	sub	sp, #40	; 0x28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bf5e:	230a      	movs	r3, #10
 800bf60:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf62:	230a      	movs	r3, #10
 800bf64:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bf66:	230a      	movs	r3, #10
 800bf68:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bf6e:	230a      	movs	r3, #10
 800bf70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	83bb      	strh	r3, [r7, #28]
 800bf76:	2300      	movs	r3, #0
 800bf78:	837b      	strh	r3, [r7, #26]
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf7e:	2300      	movs	r3, #0
 800bf80:	843b      	strh	r3, [r7, #32]
 800bf82:	e0ae      	b.n	800c0e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bf84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf88:	49a6      	ldr	r1, [pc, #664]	; (800c224 <etharp_find_entry+0x2d4>)
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	4413      	add	r3, r2
 800bf90:	00db      	lsls	r3, r3, #3
 800bf92:	440b      	add	r3, r1
 800bf94:	3314      	adds	r3, #20
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bf9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf9e:	2b0a      	cmp	r3, #10
 800bfa0:	d105      	bne.n	800bfae <etharp_find_entry+0x5e>
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bfa8:	8c3b      	ldrh	r3, [r7, #32]
 800bfaa:	847b      	strh	r3, [r7, #34]	; 0x22
 800bfac:	e095      	b.n	800c0da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 8092 	beq.w	800c0da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d009      	beq.n	800bfd0 <etharp_find_entry+0x80>
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d806      	bhi.n	800bfd0 <etharp_find_entry+0x80>
 800bfc2:	4b99      	ldr	r3, [pc, #612]	; (800c228 <etharp_find_entry+0x2d8>)
 800bfc4:	f240 1223 	movw	r2, #291	; 0x123
 800bfc8:	4998      	ldr	r1, [pc, #608]	; (800c22c <etharp_find_entry+0x2dc>)
 800bfca:	4899      	ldr	r0, [pc, #612]	; (800c230 <etharp_find_entry+0x2e0>)
 800bfcc:	f002 fa80 	bl	800e4d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d020      	beq.n	800c018 <etharp_find_entry+0xc8>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6819      	ldr	r1, [r3, #0]
 800bfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfde:	4891      	ldr	r0, [pc, #580]	; (800c224 <etharp_find_entry+0x2d4>)
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	4403      	add	r3, r0
 800bfea:	3304      	adds	r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4299      	cmp	r1, r3
 800bff0:	d112      	bne.n	800c018 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00c      	beq.n	800c012 <etharp_find_entry+0xc2>
 800bff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bffc:	4989      	ldr	r1, [pc, #548]	; (800c224 <etharp_find_entry+0x2d4>)
 800bffe:	4613      	mov	r3, r2
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4413      	add	r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	440b      	add	r3, r1
 800c008:	3308      	adds	r3, #8
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d102      	bne.n	800c018 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c012:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c016:	e100      	b.n	800c21a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c018:	7dfb      	ldrb	r3, [r7, #23]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d140      	bne.n	800c0a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c01e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c022:	4980      	ldr	r1, [pc, #512]	; (800c224 <etharp_find_entry+0x2d4>)
 800c024:	4613      	mov	r3, r2
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	4413      	add	r3, r2
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	440b      	add	r3, r1
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d01a      	beq.n	800c06a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c038:	497a      	ldr	r1, [pc, #488]	; (800c224 <etharp_find_entry+0x2d4>)
 800c03a:	4613      	mov	r3, r2
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	4413      	add	r3, r2
 800c040:	00db      	lsls	r3, r3, #3
 800c042:	440b      	add	r3, r1
 800c044:	3312      	adds	r3, #18
 800c046:	881b      	ldrh	r3, [r3, #0]
 800c048:	8bba      	ldrh	r2, [r7, #28]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d845      	bhi.n	800c0da <etharp_find_entry+0x18a>
            old_queue = i;
 800c04e:	8c3b      	ldrh	r3, [r7, #32]
 800c050:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c056:	4973      	ldr	r1, [pc, #460]	; (800c224 <etharp_find_entry+0x2d4>)
 800c058:	4613      	mov	r3, r2
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	4413      	add	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	440b      	add	r3, r1
 800c062:	3312      	adds	r3, #18
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	83bb      	strh	r3, [r7, #28]
 800c068:	e037      	b.n	800c0da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c06a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c06e:	496d      	ldr	r1, [pc, #436]	; (800c224 <etharp_find_entry+0x2d4>)
 800c070:	4613      	mov	r3, r2
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	4413      	add	r3, r2
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	440b      	add	r3, r1
 800c07a:	3312      	adds	r3, #18
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	8b7a      	ldrh	r2, [r7, #26]
 800c080:	429a      	cmp	r2, r3
 800c082:	d82a      	bhi.n	800c0da <etharp_find_entry+0x18a>
            old_pending = i;
 800c084:	8c3b      	ldrh	r3, [r7, #32]
 800c086:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c08c:	4965      	ldr	r1, [pc, #404]	; (800c224 <etharp_find_entry+0x2d4>)
 800c08e:	4613      	mov	r3, r2
 800c090:	005b      	lsls	r3, r3, #1
 800c092:	4413      	add	r3, r2
 800c094:	00db      	lsls	r3, r3, #3
 800c096:	440b      	add	r3, r1
 800c098:	3312      	adds	r3, #18
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	837b      	strh	r3, [r7, #26]
 800c09e:	e01c      	b.n	800c0da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d919      	bls.n	800c0da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c0a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0aa:	495e      	ldr	r1, [pc, #376]	; (800c224 <etharp_find_entry+0x2d4>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3312      	adds	r3, #18
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	8b3a      	ldrh	r2, [r7, #24]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d80c      	bhi.n	800c0da <etharp_find_entry+0x18a>
            old_stable = i;
 800c0c0:	8c3b      	ldrh	r3, [r7, #32]
 800c0c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0c8:	4956      	ldr	r1, [pc, #344]	; (800c224 <etharp_find_entry+0x2d4>)
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	4413      	add	r3, r2
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3312      	adds	r3, #18
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0da:	8c3b      	ldrh	r3, [r7, #32]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	843b      	strh	r3, [r7, #32]
 800c0e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c0e6:	2b09      	cmp	r3, #9
 800c0e8:	f77f af4c 	ble.w	800bf84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c0ec:	7afb      	ldrb	r3, [r7, #11]
 800c0ee:	f003 0302 	and.w	r3, r3, #2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d108      	bne.n	800c108 <etharp_find_entry+0x1b8>
 800c0f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c0fa:	2b0a      	cmp	r3, #10
 800c0fc:	d107      	bne.n	800c10e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c108:	f04f 33ff 	mov.w	r3, #4294967295
 800c10c:	e085      	b.n	800c21a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c10e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c112:	2b09      	cmp	r3, #9
 800c114:	dc02      	bgt.n	800c11c <etharp_find_entry+0x1cc>
    i = empty;
 800c116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c118:	843b      	strh	r3, [r7, #32]
 800c11a:	e039      	b.n	800c190 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c11c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c120:	2b09      	cmp	r3, #9
 800c122:	dc14      	bgt.n	800c14e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c126:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c12c:	493d      	ldr	r1, [pc, #244]	; (800c224 <etharp_find_entry+0x2d4>)
 800c12e:	4613      	mov	r3, r2
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	4413      	add	r3, r2
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	440b      	add	r3, r1
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d018      	beq.n	800c170 <etharp_find_entry+0x220>
 800c13e:	4b3a      	ldr	r3, [pc, #232]	; (800c228 <etharp_find_entry+0x2d8>)
 800c140:	f240 126d 	movw	r2, #365	; 0x16d
 800c144:	493b      	ldr	r1, [pc, #236]	; (800c234 <etharp_find_entry+0x2e4>)
 800c146:	483a      	ldr	r0, [pc, #232]	; (800c230 <etharp_find_entry+0x2e0>)
 800c148:	f002 f9c2 	bl	800e4d0 <iprintf>
 800c14c:	e010      	b.n	800c170 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c14e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c152:	2b09      	cmp	r3, #9
 800c154:	dc02      	bgt.n	800c15c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c158:	843b      	strh	r3, [r7, #32]
 800c15a:	e009      	b.n	800c170 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c15c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c160:	2b09      	cmp	r3, #9
 800c162:	dc02      	bgt.n	800c16a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c164:	8bfb      	ldrh	r3, [r7, #30]
 800c166:	843b      	strh	r3, [r7, #32]
 800c168:	e002      	b.n	800c170 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c16a:	f04f 33ff 	mov.w	r3, #4294967295
 800c16e:	e054      	b.n	800c21a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c170:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c174:	2b09      	cmp	r3, #9
 800c176:	dd06      	ble.n	800c186 <etharp_find_entry+0x236>
 800c178:	4b2b      	ldr	r3, [pc, #172]	; (800c228 <etharp_find_entry+0x2d8>)
 800c17a:	f240 127f 	movw	r2, #383	; 0x17f
 800c17e:	492e      	ldr	r1, [pc, #184]	; (800c238 <etharp_find_entry+0x2e8>)
 800c180:	482b      	ldr	r0, [pc, #172]	; (800c230 <etharp_find_entry+0x2e0>)
 800c182:	f002 f9a5 	bl	800e4d0 <iprintf>
    etharp_free_entry(i);
 800c186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff fe06 	bl	800bd9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c190:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c194:	2b09      	cmp	r3, #9
 800c196:	dd06      	ble.n	800c1a6 <etharp_find_entry+0x256>
 800c198:	4b23      	ldr	r3, [pc, #140]	; (800c228 <etharp_find_entry+0x2d8>)
 800c19a:	f240 1283 	movw	r2, #387	; 0x183
 800c19e:	4926      	ldr	r1, [pc, #152]	; (800c238 <etharp_find_entry+0x2e8>)
 800c1a0:	4823      	ldr	r0, [pc, #140]	; (800c230 <etharp_find_entry+0x2e0>)
 800c1a2:	f002 f995 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c1a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1aa:	491e      	ldr	r1, [pc, #120]	; (800c224 <etharp_find_entry+0x2d4>)
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	4413      	add	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	440b      	add	r3, r1
 800c1b6:	3314      	adds	r3, #20
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d006      	beq.n	800c1cc <etharp_find_entry+0x27c>
 800c1be:	4b1a      	ldr	r3, [pc, #104]	; (800c228 <etharp_find_entry+0x2d8>)
 800c1c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c1c4:	491d      	ldr	r1, [pc, #116]	; (800c23c <etharp_find_entry+0x2ec>)
 800c1c6:	481a      	ldr	r0, [pc, #104]	; (800c230 <etharp_find_entry+0x2e0>)
 800c1c8:	f002 f982 	bl	800e4d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c1d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	4812      	ldr	r0, [pc, #72]	; (800c224 <etharp_find_entry+0x2d4>)
 800c1dc:	4613      	mov	r3, r2
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	4413      	add	r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	4403      	add	r3, r0
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c1ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1ee:	490d      	ldr	r1, [pc, #52]	; (800c224 <etharp_find_entry+0x2d4>)
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	440b      	add	r3, r1
 800c1fa:	3312      	adds	r3, #18
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c204:	4907      	ldr	r1, [pc, #28]	; (800c224 <etharp_find_entry+0x2d4>)
 800c206:	4613      	mov	r3, r2
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	4413      	add	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	440b      	add	r3, r1
 800c210:	3308      	adds	r3, #8
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c216:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3728      	adds	r7, #40	; 0x28
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	2000010c 	.word	0x2000010c
 800c228:	080118c4 	.word	0x080118c4
 800c22c:	080118fc 	.word	0x080118fc
 800c230:	0801193c 	.word	0x0801193c
 800c234:	08011964 	.word	0x08011964
 800c238:	0801197c 	.word	0x0801197c
 800c23c:	08011990 	.word	0x08011990

0800c240 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c254:	2b06      	cmp	r3, #6
 800c256:	d006      	beq.n	800c266 <etharp_update_arp_entry+0x26>
 800c258:	4b48      	ldr	r3, [pc, #288]	; (800c37c <etharp_update_arp_entry+0x13c>)
 800c25a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c25e:	4948      	ldr	r1, [pc, #288]	; (800c380 <etharp_update_arp_entry+0x140>)
 800c260:	4848      	ldr	r0, [pc, #288]	; (800c384 <etharp_update_arp_entry+0x144>)
 800c262:	f002 f935 	bl	800e4d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d012      	beq.n	800c292 <etharp_update_arp_entry+0x52>
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00e      	beq.n	800c292 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68f9      	ldr	r1, [r7, #12]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f001 f8fe 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800c280:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c28e:	2be0      	cmp	r3, #224	; 0xe0
 800c290:	d102      	bne.n	800c298 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c292:	f06f 030f 	mvn.w	r3, #15
 800c296:	e06c      	b.n	800c372 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c298:	78fb      	ldrb	r3, [r7, #3]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	4619      	mov	r1, r3
 800c29e:	68b8      	ldr	r0, [r7, #8]
 800c2a0:	f7ff fe56 	bl	800bf50 <etharp_find_entry>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c2a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	da02      	bge.n	800c2b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c2b0:	8afb      	ldrh	r3, [r7, #22]
 800c2b2:	b25b      	sxtb	r3, r3
 800c2b4:	e05d      	b.n	800c372 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c2b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2ba:	4933      	ldr	r1, [pc, #204]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c2bc:	4613      	mov	r3, r2
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	4413      	add	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	440b      	add	r3, r1
 800c2c6:	3314      	adds	r3, #20
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c2cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2d0:	492d      	ldr	r1, [pc, #180]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4413      	add	r3, r2
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	440b      	add	r3, r1
 800c2dc:	3308      	adds	r3, #8
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c2e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	4a25      	ldr	r2, [pc, #148]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	2206      	movs	r2, #6
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f002 f8d2 	bl	800e4a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c304:	4920      	ldr	r1, [pc, #128]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3312      	adds	r3, #18
 800c312:	2200      	movs	r2, #0
 800c314:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c316:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c31a:	491b      	ldr	r1, [pc, #108]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c31c:	4613      	mov	r3, r2
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	4413      	add	r3, r2
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	440b      	add	r3, r1
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d021      	beq.n	800c370 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c32c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c330:	4915      	ldr	r1, [pc, #84]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c332:	4613      	mov	r3, r2
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	4413      	add	r3, r2
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	440b      	add	r3, r1
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c340:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c344:	4910      	ldr	r1, [pc, #64]	; (800c388 <etharp_update_arp_entry+0x148>)
 800c346:	4613      	mov	r3, r2
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	4413      	add	r3, r2
 800c34c:	00db      	lsls	r3, r3, #3
 800c34e:	440b      	add	r3, r1
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c35a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c35e:	9300      	str	r3, [sp, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6939      	ldr	r1, [r7, #16]
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f002 f823 	bl	800e3b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c36a:	6938      	ldr	r0, [r7, #16]
 800c36c:	f7f8 ff24 	bl	80051b8 <pbuf_free>
  }
  return ERR_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	080118c4 	.word	0x080118c4
 800c380:	080119bc 	.word	0x080119bc
 800c384:	0801193c 	.word	0x0801193c
 800c388:	2000010c 	.word	0x2000010c

0800c38c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c394:	2300      	movs	r3, #0
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	e01e      	b.n	800c3d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c39a:	4913      	ldr	r1, [pc, #76]	; (800c3e8 <etharp_cleanup_netif+0x5c>)
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	4413      	add	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3314      	adds	r3, #20
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c3ae:	7afb      	ldrb	r3, [r7, #11]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00e      	beq.n	800c3d2 <etharp_cleanup_netif+0x46>
 800c3b4:	490c      	ldr	r1, [pc, #48]	; (800c3e8 <etharp_cleanup_netif+0x5c>)
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	4413      	add	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	440b      	add	r3, r1
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d102      	bne.n	800c3d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f7ff fce5 	bl	800bd9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2b09      	cmp	r3, #9
 800c3dc:	dddd      	ble.n	800c39a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c3de:	bf00      	nop
 800c3e0:	bf00      	nop
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	2000010c 	.word	0x2000010c

0800c3ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c3ec:	b5b0      	push	{r4, r5, r7, lr}
 800c3ee:	b08a      	sub	sp, #40	; 0x28
 800c3f0:	af04      	add	r7, sp, #16
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d107      	bne.n	800c40c <etharp_input+0x20>
 800c3fc:	4b3d      	ldr	r3, [pc, #244]	; (800c4f4 <etharp_input+0x108>)
 800c3fe:	f240 228a 	movw	r2, #650	; 0x28a
 800c402:	493d      	ldr	r1, [pc, #244]	; (800c4f8 <etharp_input+0x10c>)
 800c404:	483d      	ldr	r0, [pc, #244]	; (800c4fc <etharp_input+0x110>)
 800c406:	f002 f863 	bl	800e4d0 <iprintf>
 800c40a:	e06f      	b.n	800c4ec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	b29b      	uxth	r3, r3
 800c418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41c:	d10c      	bne.n	800c438 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c422:	2b06      	cmp	r3, #6
 800c424:	d108      	bne.n	800c438 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c42a:	2b04      	cmp	r3, #4
 800c42c:	d104      	bne.n	800c438 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	885b      	ldrh	r3, [r3, #2]
 800c432:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c434:	2b08      	cmp	r3, #8
 800c436:	d003      	beq.n	800c440 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7f8 febd 	bl	80051b8 <pbuf_free>
    return;
 800c43e:	e055      	b.n	800c4ec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	330e      	adds	r3, #14
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	3318      	adds	r3, #24
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	3304      	adds	r3, #4
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <etharp_input+0x74>
    for_us = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75fb      	strb	r3, [r7, #23]
 800c45e:	e009      	b.n	800c474 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	3304      	adds	r3, #4
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	bf0c      	ite	eq
 800c46c:	2301      	moveq	r3, #1
 800c46e:	2300      	movne	r3, #0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f103 0208 	add.w	r2, r3, #8
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <etharp_input+0x98>
 800c480:	2301      	movs	r3, #1
 800c482:	e000      	b.n	800c486 <etharp_input+0x9a>
 800c484:	2302      	movs	r3, #2
 800c486:	f107 010c 	add.w	r1, r7, #12
 800c48a:	6838      	ldr	r0, [r7, #0]
 800c48c:	f7ff fed8 	bl	800c240 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	88db      	ldrh	r3, [r3, #6]
 800c494:	b29b      	uxth	r3, r3
 800c496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49a:	d003      	beq.n	800c4a4 <etharp_input+0xb8>
 800c49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4a0:	d01e      	beq.n	800c4e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c4a2:	e020      	b.n	800c4e6 <etharp_input+0xfa>
      if (for_us) {
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01c      	beq.n	800c4e4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	9103      	str	r1, [sp, #12]
 800c4c8:	f107 010c 	add.w	r1, r7, #12
 800c4cc:	9102      	str	r1, [sp, #8]
 800c4ce:	9201      	str	r2, [sp, #4]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	6838      	ldr	r0, [r7, #0]
 800c4da:	f000 faeb 	bl	800cab4 <etharp_raw>
      break;
 800c4de:	e001      	b.n	800c4e4 <etharp_input+0xf8>
      break;
 800c4e0:	bf00      	nop
 800c4e2:	e000      	b.n	800c4e6 <etharp_input+0xfa>
      break;
 800c4e4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7f8 fe66 	bl	80051b8 <pbuf_free>
}
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	080118c4 	.word	0x080118c4
 800c4f8:	08011a14 	.word	0x08011a14
 800c4fc:	0801193c 	.word	0x0801193c

0800c500 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c50e:	79fa      	ldrb	r2, [r7, #7]
 800c510:	4944      	ldr	r1, [pc, #272]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c512:	4613      	mov	r3, r2
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4413      	add	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	440b      	add	r3, r1
 800c51c:	3314      	adds	r3, #20
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d806      	bhi.n	800c532 <etharp_output_to_arp_index+0x32>
 800c524:	4b40      	ldr	r3, [pc, #256]	; (800c628 <etharp_output_to_arp_index+0x128>)
 800c526:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c52a:	4940      	ldr	r1, [pc, #256]	; (800c62c <etharp_output_to_arp_index+0x12c>)
 800c52c:	4840      	ldr	r0, [pc, #256]	; (800c630 <etharp_output_to_arp_index+0x130>)
 800c52e:	f001 ffcf 	bl	800e4d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c532:	79fa      	ldrb	r2, [r7, #7]
 800c534:	493b      	ldr	r1, [pc, #236]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c536:	4613      	mov	r3, r2
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	3314      	adds	r3, #20
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b02      	cmp	r3, #2
 800c546:	d153      	bne.n	800c5f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c548:	79fa      	ldrb	r2, [r7, #7]
 800c54a:	4936      	ldr	r1, [pc, #216]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c54c:	4613      	mov	r3, r2
 800c54e:	005b      	lsls	r3, r3, #1
 800c550:	4413      	add	r3, r2
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	440b      	add	r3, r1
 800c556:	3312      	adds	r3, #18
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c55e:	d919      	bls.n	800c594 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c560:	79fa      	ldrb	r2, [r7, #7]
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	4a2e      	ldr	r2, [pc, #184]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c56c:	4413      	add	r3, r2
 800c56e:	3304      	adds	r3, #4
 800c570:	4619      	mov	r1, r3
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f000 fb4c 	bl	800cc10 <etharp_request>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d138      	bne.n	800c5f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c57e:	79fa      	ldrb	r2, [r7, #7]
 800c580:	4928      	ldr	r1, [pc, #160]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c582:	4613      	mov	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4413      	add	r3, r2
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	440b      	add	r3, r1
 800c58c:	3314      	adds	r3, #20
 800c58e:	2203      	movs	r2, #3
 800c590:	701a      	strb	r2, [r3, #0]
 800c592:	e02d      	b.n	800c5f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c594:	79fa      	ldrb	r2, [r7, #7]
 800c596:	4923      	ldr	r1, [pc, #140]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	440b      	add	r3, r1
 800c5a2:	3312      	adds	r3, #18
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c5aa:	d321      	bcc.n	800c5f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c5ac:	79fa      	ldrb	r2, [r7, #7]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	4a1b      	ldr	r2, [pc, #108]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c5b8:	4413      	add	r3, r2
 800c5ba:	1d19      	adds	r1, r3, #4
 800c5bc:	79fa      	ldrb	r2, [r7, #7]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	4413      	add	r3, r2
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	4a16      	ldr	r2, [pc, #88]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c5ca:	4413      	add	r3, r2
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fafb 	bl	800cbcc <etharp_request_dst>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d109      	bne.n	800c5f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c5dc:	79fa      	ldrb	r2, [r7, #7]
 800c5de:	4911      	ldr	r1, [pc, #68]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	4413      	add	r3, r2
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	440b      	add	r3, r1
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	2203      	movs	r2, #3
 800c5ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c5f6:	79fa      	ldrb	r2, [r7, #7]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	3308      	adds	r3, #8
 800c602:	4a08      	ldr	r2, [pc, #32]	; (800c624 <etharp_output_to_arp_index+0x124>)
 800c604:	4413      	add	r3, r2
 800c606:	3304      	adds	r3, #4
 800c608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c60c:	9200      	str	r2, [sp, #0]
 800c60e:	460a      	mov	r2, r1
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f001 fecc 	bl	800e3b0 <ethernet_output>
 800c618:	4603      	mov	r3, r0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	2000010c 	.word	0x2000010c
 800c628:	080118c4 	.word	0x080118c4
 800c62c:	08011a34 	.word	0x08011a34
 800c630:	0801193c 	.word	0x0801193c

0800c634 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08a      	sub	sp, #40	; 0x28
 800c638:	af02      	add	r7, sp, #8
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <etharp_output+0x24>
 800c64a:	4b73      	ldr	r3, [pc, #460]	; (800c818 <etharp_output+0x1e4>)
 800c64c:	f240 321e 	movw	r2, #798	; 0x31e
 800c650:	4972      	ldr	r1, [pc, #456]	; (800c81c <etharp_output+0x1e8>)
 800c652:	4873      	ldr	r0, [pc, #460]	; (800c820 <etharp_output+0x1ec>)
 800c654:	f001 ff3c 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <etharp_output+0x38>
 800c65e:	4b6e      	ldr	r3, [pc, #440]	; (800c818 <etharp_output+0x1e4>)
 800c660:	f240 321f 	movw	r2, #799	; 0x31f
 800c664:	496f      	ldr	r1, [pc, #444]	; (800c824 <etharp_output+0x1f0>)
 800c666:	486e      	ldr	r0, [pc, #440]	; (800c820 <etharp_output+0x1ec>)
 800c668:	f001 ff32 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d106      	bne.n	800c680 <etharp_output+0x4c>
 800c672:	4b69      	ldr	r3, [pc, #420]	; (800c818 <etharp_output+0x1e4>)
 800c674:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c678:	496b      	ldr	r1, [pc, #428]	; (800c828 <etharp_output+0x1f4>)
 800c67a:	4869      	ldr	r0, [pc, #420]	; (800c820 <etharp_output+0x1ec>)
 800c67c:	f001 ff28 	bl	800e4d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68f9      	ldr	r1, [r7, #12]
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fef8 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c692:	4b66      	ldr	r3, [pc, #408]	; (800c82c <etharp_output+0x1f8>)
 800c694:	61fb      	str	r3, [r7, #28]
 800c696:	e0af      	b.n	800c7f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6a0:	2be0      	cmp	r3, #224	; 0xe0
 800c6a2:	d118      	bne.n	800c6d6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c6ac:	235e      	movs	r3, #94	; 0x5e
 800c6ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3302      	adds	r3, #2
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3303      	adds	r3, #3
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c6ce:	f107 0310 	add.w	r3, r7, #16
 800c6d2:	61fb      	str	r3, [r7, #28]
 800c6d4:	e090      	b.n	800c7f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	405a      	eors	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d012      	beq.n	800c714 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c6f4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00b      	beq.n	800c714 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	330c      	adds	r3, #12
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	330c      	adds	r3, #12
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	e002      	b.n	800c714 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c70e:	f06f 0303 	mvn.w	r3, #3
 800c712:	e07d      	b.n	800c810 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c714:	4b46      	ldr	r3, [pc, #280]	; (800c830 <etharp_output+0x1fc>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	4619      	mov	r1, r3
 800c71a:	4a46      	ldr	r2, [pc, #280]	; (800c834 <etharp_output+0x200>)
 800c71c:	460b      	mov	r3, r1
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	440b      	add	r3, r1
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	4413      	add	r3, r2
 800c726:	3314      	adds	r3, #20
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d925      	bls.n	800c77a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c72e:	4b40      	ldr	r3, [pc, #256]	; (800c830 <etharp_output+0x1fc>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	4619      	mov	r1, r3
 800c734:	4a3f      	ldr	r2, [pc, #252]	; (800c834 <etharp_output+0x200>)
 800c736:	460b      	mov	r3, r1
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	440b      	add	r3, r1
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	4413      	add	r3, r2
 800c740:	3308      	adds	r3, #8
 800c742:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	429a      	cmp	r2, r3
 800c748:	d117      	bne.n	800c77a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	4b38      	ldr	r3, [pc, #224]	; (800c830 <etharp_output+0x1fc>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	4618      	mov	r0, r3
 800c754:	4937      	ldr	r1, [pc, #220]	; (800c834 <etharp_output+0x200>)
 800c756:	4603      	mov	r3, r0
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	4403      	add	r3, r0
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	440b      	add	r3, r1
 800c760:	3304      	adds	r3, #4
 800c762:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c764:	429a      	cmp	r2, r3
 800c766:	d108      	bne.n	800c77a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c768:	4b31      	ldr	r3, [pc, #196]	; (800c830 <etharp_output+0x1fc>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	461a      	mov	r2, r3
 800c76e:	68b9      	ldr	r1, [r7, #8]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff fec5 	bl	800c500 <etharp_output_to_arp_index>
 800c776:	4603      	mov	r3, r0
 800c778:	e04a      	b.n	800c810 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c77a:	2300      	movs	r3, #0
 800c77c:	75fb      	strb	r3, [r7, #23]
 800c77e:	e031      	b.n	800c7e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c780:	7dfa      	ldrb	r2, [r7, #23]
 800c782:	492c      	ldr	r1, [pc, #176]	; (800c834 <etharp_output+0x200>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3314      	adds	r3, #20
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d923      	bls.n	800c7de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c796:	7dfa      	ldrb	r2, [r7, #23]
 800c798:	4926      	ldr	r1, [pc, #152]	; (800c834 <etharp_output+0x200>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d117      	bne.n	800c7de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	6819      	ldr	r1, [r3, #0]
 800c7b2:	7dfa      	ldrb	r2, [r7, #23]
 800c7b4:	481f      	ldr	r0, [pc, #124]	; (800c834 <etharp_output+0x200>)
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	4413      	add	r3, r2
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	4403      	add	r3, r0
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c7c4:	4299      	cmp	r1, r3
 800c7c6:	d10a      	bne.n	800c7de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c7c8:	4a19      	ldr	r2, [pc, #100]	; (800c830 <etharp_output+0x1fc>)
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68b9      	ldr	r1, [r7, #8]
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7ff fe93 	bl	800c500 <etharp_output_to_arp_index>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	e018      	b.n	800c810 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b09      	cmp	r3, #9
 800c7e8:	d9ca      	bls.n	800c780 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	69b9      	ldr	r1, [r7, #24]
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 f822 	bl	800c838 <etharp_query>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	e00b      	b.n	800c810 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c7fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f001 fdd1 	bl	800e3b0 <ethernet_output>
 800c80e:	4603      	mov	r3, r0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3720      	adds	r7, #32
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	080118c4 	.word	0x080118c4
 800c81c:	08011a14 	.word	0x08011a14
 800c820:	0801193c 	.word	0x0801193c
 800c824:	08011a64 	.word	0x08011a64
 800c828:	08011a04 	.word	0x08011a04
 800c82c:	0801206c 	.word	0x0801206c
 800c830:	200001fc 	.word	0x200001fc
 800c834:	2000010c 	.word	0x2000010c

0800c838 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08c      	sub	sp, #48	; 0x30
 800c83c:	af02      	add	r7, sp, #8
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3326      	adds	r3, #38	; 0x26
 800c848:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c84a:	23ff      	movs	r3, #255	; 0xff
 800c84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68f9      	ldr	r1, [r7, #12]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fe0e 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10c      	bne.n	800c880 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c86e:	2be0      	cmp	r3, #224	; 0xe0
 800c870:	d006      	beq.n	800c880 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d102      	bne.n	800c886 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c880:	f06f 030f 	mvn.w	r3, #15
 800c884:	e101      	b.n	800ca8a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	2101      	movs	r1, #1
 800c88a:	68b8      	ldr	r0, [r7, #8]
 800c88c:	f7ff fb60 	bl	800bf50 <etharp_find_entry>
 800c890:	4603      	mov	r3, r0
 800c892:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	da02      	bge.n	800c8a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c89c:	8a7b      	ldrh	r3, [r7, #18]
 800c89e:	b25b      	sxtb	r3, r3
 800c8a0:	e0f3      	b.n	800ca8a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c8a2:	8a7b      	ldrh	r3, [r7, #18]
 800c8a4:	2b7e      	cmp	r3, #126	; 0x7e
 800c8a6:	d906      	bls.n	800c8b6 <etharp_query+0x7e>
 800c8a8:	4b7a      	ldr	r3, [pc, #488]	; (800ca94 <etharp_query+0x25c>)
 800c8aa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c8ae:	497a      	ldr	r1, [pc, #488]	; (800ca98 <etharp_query+0x260>)
 800c8b0:	487a      	ldr	r0, [pc, #488]	; (800ca9c <etharp_query+0x264>)
 800c8b2:	f001 fe0d 	bl	800e4d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c8b6:	8a7b      	ldrh	r3, [r7, #18]
 800c8b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c8ba:	7c7a      	ldrb	r2, [r7, #17]
 800c8bc:	4978      	ldr	r1, [pc, #480]	; (800caa0 <etharp_query+0x268>)
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	440b      	add	r3, r1
 800c8c8:	3314      	adds	r3, #20
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d115      	bne.n	800c8fc <etharp_query+0xc4>
    is_new_entry = 1;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c8d4:	7c7a      	ldrb	r2, [r7, #17]
 800c8d6:	4972      	ldr	r1, [pc, #456]	; (800caa0 <etharp_query+0x268>)
 800c8d8:	4613      	mov	r3, r2
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	4413      	add	r3, r2
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	440b      	add	r3, r1
 800c8e2:	3314      	adds	r3, #20
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c8e8:	7c7a      	ldrb	r2, [r7, #17]
 800c8ea:	496d      	ldr	r1, [pc, #436]	; (800caa0 <etharp_query+0x268>)
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c8fc:	7c7a      	ldrb	r2, [r7, #17]
 800c8fe:	4968      	ldr	r1, [pc, #416]	; (800caa0 <etharp_query+0x268>)
 800c900:	4613      	mov	r3, r2
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	4413      	add	r3, r2
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	440b      	add	r3, r1
 800c90a:	3314      	adds	r3, #20
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d011      	beq.n	800c936 <etharp_query+0xfe>
 800c912:	7c7a      	ldrb	r2, [r7, #17]
 800c914:	4962      	ldr	r1, [pc, #392]	; (800caa0 <etharp_query+0x268>)
 800c916:	4613      	mov	r3, r2
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	4413      	add	r3, r2
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	440b      	add	r3, r1
 800c920:	3314      	adds	r3, #20
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d806      	bhi.n	800c936 <etharp_query+0xfe>
 800c928:	4b5a      	ldr	r3, [pc, #360]	; (800ca94 <etharp_query+0x25c>)
 800c92a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c92e:	495d      	ldr	r1, [pc, #372]	; (800caa4 <etharp_query+0x26c>)
 800c930:	485a      	ldr	r0, [pc, #360]	; (800ca9c <etharp_query+0x264>)
 800c932:	f001 fdcd 	bl	800e4d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <etharp_query+0x10a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10c      	bne.n	800c95c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f963 	bl	800cc10 <etharp_request>
 800c94a:	4603      	mov	r3, r0
 800c94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d102      	bne.n	800c95c <etharp_query+0x124>
      return result;
 800c956:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c95a:	e096      	b.n	800ca8a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <etharp_query+0x138>
 800c962:	4b4c      	ldr	r3, [pc, #304]	; (800ca94 <etharp_query+0x25c>)
 800c964:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c968:	494f      	ldr	r1, [pc, #316]	; (800caa8 <etharp_query+0x270>)
 800c96a:	484c      	ldr	r0, [pc, #304]	; (800ca9c <etharp_query+0x264>)
 800c96c:	f001 fdb0 	bl	800e4d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c970:	7c7a      	ldrb	r2, [r7, #17]
 800c972:	494b      	ldr	r1, [pc, #300]	; (800caa0 <etharp_query+0x268>)
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	440b      	add	r3, r1
 800c97e:	3314      	adds	r3, #20
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d917      	bls.n	800c9b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c986:	4a49      	ldr	r2, [pc, #292]	; (800caac <etharp_query+0x274>)
 800c988:	7c7b      	ldrb	r3, [r7, #17]
 800c98a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c98c:	7c7a      	ldrb	r2, [r7, #17]
 800c98e:	4613      	mov	r3, r2
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	4413      	add	r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	3308      	adds	r3, #8
 800c998:	4a41      	ldr	r2, [pc, #260]	; (800caa0 <etharp_query+0x268>)
 800c99a:	4413      	add	r3, r2
 800c99c:	3304      	adds	r3, #4
 800c99e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9a2:	9200      	str	r2, [sp, #0]
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f001 fd01 	bl	800e3b0 <ethernet_output>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9b4:	e067      	b.n	800ca86 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c9b6:	7c7a      	ldrb	r2, [r7, #17]
 800c9b8:	4939      	ldr	r1, [pc, #228]	; (800caa0 <etharp_query+0x268>)
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	005b      	lsls	r3, r3, #1
 800c9be:	4413      	add	r3, r2
 800c9c0:	00db      	lsls	r3, r3, #3
 800c9c2:	440b      	add	r3, r1
 800c9c4:	3314      	adds	r3, #20
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d15c      	bne.n	800ca86 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c9d4:	e01c      	b.n	800ca10 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	895a      	ldrh	r2, [r3, #10]
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	891b      	ldrh	r3, [r3, #8]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d10a      	bne.n	800c9f8 <etharp_query+0x1c0>
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <etharp_query+0x1c0>
 800c9ea:	4b2a      	ldr	r3, [pc, #168]	; (800ca94 <etharp_query+0x25c>)
 800c9ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c9f0:	492f      	ldr	r1, [pc, #188]	; (800cab0 <etharp_query+0x278>)
 800c9f2:	482a      	ldr	r0, [pc, #168]	; (800ca9c <etharp_query+0x264>)
 800c9f4:	f001 fd6c 	bl	800e4d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	7b1b      	ldrb	r3, [r3, #12]
 800c9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <etharp_query+0x1d2>
        copy_needed = 1;
 800ca04:	2301      	movs	r3, #1
 800ca06:	61bb      	str	r3, [r7, #24]
        break;
 800ca08:	e005      	b.n	800ca16 <etharp_query+0x1de>
      }
      p = p->next;
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1df      	bne.n	800c9d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d007      	beq.n	800ca2c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ca22:	200e      	movs	r0, #14
 800ca24:	f7f8 fe34 	bl	8005690 <pbuf_clone>
 800ca28:	61f8      	str	r0, [r7, #28]
 800ca2a:	e004      	b.n	800ca36 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ca30:	69f8      	ldr	r0, [r7, #28]
 800ca32:	f7f8 fc61 	bl	80052f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d021      	beq.n	800ca80 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ca3c:	7c7a      	ldrb	r2, [r7, #17]
 800ca3e:	4918      	ldr	r1, [pc, #96]	; (800caa0 <etharp_query+0x268>)
 800ca40:	4613      	mov	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	4413      	add	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	440b      	add	r3, r1
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00a      	beq.n	800ca66 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ca50:	7c7a      	ldrb	r2, [r7, #17]
 800ca52:	4913      	ldr	r1, [pc, #76]	; (800caa0 <etharp_query+0x268>)
 800ca54:	4613      	mov	r3, r2
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	440b      	add	r3, r1
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7f8 fba9 	bl	80051b8 <pbuf_free>
      }
      arp_table[i].q = p;
 800ca66:	7c7a      	ldrb	r2, [r7, #17]
 800ca68:	490d      	ldr	r1, [pc, #52]	; (800caa0 <etharp_query+0x268>)
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	005b      	lsls	r3, r3, #1
 800ca6e:	4413      	add	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	440b      	add	r3, r1
 800ca74:	69fa      	ldr	r2, [r7, #28]
 800ca76:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca7e:	e002      	b.n	800ca86 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ca80:	23ff      	movs	r3, #255	; 0xff
 800ca82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ca86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3728      	adds	r7, #40	; 0x28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	080118c4 	.word	0x080118c4
 800ca98:	08011a70 	.word	0x08011a70
 800ca9c:	0801193c 	.word	0x0801193c
 800caa0:	2000010c 	.word	0x2000010c
 800caa4:	08011a80 	.word	0x08011a80
 800caa8:	08011a64 	.word	0x08011a64
 800caac:	200001fc 	.word	0x200001fc
 800cab0:	08011aa8 	.word	0x08011aa8

0800cab4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08a      	sub	sp, #40	; 0x28
 800cab8:	af02      	add	r7, sp, #8
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d106      	bne.n	800cada <etharp_raw+0x26>
 800cacc:	4b3a      	ldr	r3, [pc, #232]	; (800cbb8 <etharp_raw+0x104>)
 800cace:	f240 4257 	movw	r2, #1111	; 0x457
 800cad2:	493a      	ldr	r1, [pc, #232]	; (800cbbc <etharp_raw+0x108>)
 800cad4:	483a      	ldr	r0, [pc, #232]	; (800cbc0 <etharp_raw+0x10c>)
 800cad6:	f001 fcfb 	bl	800e4d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cada:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cade:	211c      	movs	r1, #28
 800cae0:	200e      	movs	r0, #14
 800cae2:	f7f8 f885 	bl	8004bf0 <pbuf_alloc>
 800cae6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d102      	bne.n	800caf4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800caee:	f04f 33ff 	mov.w	r3, #4294967295
 800caf2:	e05d      	b.n	800cbb0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	895b      	ldrh	r3, [r3, #10]
 800caf8:	2b1b      	cmp	r3, #27
 800cafa:	d806      	bhi.n	800cb0a <etharp_raw+0x56>
 800cafc:	4b2e      	ldr	r3, [pc, #184]	; (800cbb8 <etharp_raw+0x104>)
 800cafe:	f240 4262 	movw	r2, #1122	; 0x462
 800cb02:	4930      	ldr	r1, [pc, #192]	; (800cbc4 <etharp_raw+0x110>)
 800cb04:	482e      	ldr	r0, [pc, #184]	; (800cbc0 <etharp_raw+0x10c>)
 800cb06:	f001 fce3 	bl	800e4d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cb10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f7 f89c 	bl	8003c50 <lwip_htons>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb26:	2b06      	cmp	r3, #6
 800cb28:	d006      	beq.n	800cb38 <etharp_raw+0x84>
 800cb2a:	4b23      	ldr	r3, [pc, #140]	; (800cbb8 <etharp_raw+0x104>)
 800cb2c:	f240 4269 	movw	r2, #1129	; 0x469
 800cb30:	4925      	ldr	r1, [pc, #148]	; (800cbc8 <etharp_raw+0x114>)
 800cb32:	4823      	ldr	r0, [pc, #140]	; (800cbc0 <etharp_raw+0x10c>)
 800cb34:	f001 fccc 	bl	800e4d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	2206      	movs	r2, #6
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f001 fcaf 	bl	800e4a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3312      	adds	r3, #18
 800cb4a:	2206      	movs	r2, #6
 800cb4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 fca8 	bl	800e4a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	330e      	adds	r3, #14
 800cb58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb5a:	6812      	ldr	r2, [r2, #0]
 800cb5c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	3318      	adds	r3, #24
 800cb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb64:	6812      	ldr	r2, [r2, #0]
 800cb66:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	701a      	strb	r2, [r3, #0]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f042 0201 	orr.w	r2, r2, #1
 800cb74:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f042 0208 	orr.w	r2, r2, #8
 800cb7e:	709a      	strb	r2, [r3, #2]
 800cb80:	2200      	movs	r2, #0
 800cb82:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2206      	movs	r2, #6
 800cb88:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2204      	movs	r2, #4
 800cb8e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cb90:	f640 0306 	movw	r3, #2054	; 0x806
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	69b9      	ldr	r1, [r7, #24]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f001 fc07 	bl	800e3b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cba2:	69b8      	ldr	r0, [r7, #24]
 800cba4:	f7f8 fb08 	bl	80051b8 <pbuf_free>
  p = NULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cbac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3720      	adds	r7, #32
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	080118c4 	.word	0x080118c4
 800cbbc:	08011a14 	.word	0x08011a14
 800cbc0:	0801193c 	.word	0x0801193c
 800cbc4:	08011ac4 	.word	0x08011ac4
 800cbc8:	08011af8 	.word	0x08011af8

0800cbcc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af04      	add	r7, sp, #16
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbe8:	2201      	movs	r2, #1
 800cbea:	9203      	str	r2, [sp, #12]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	9202      	str	r2, [sp, #8]
 800cbf0:	4a06      	ldr	r2, [pc, #24]	; (800cc0c <etharp_request_dst+0x40>)
 800cbf2:	9201      	str	r2, [sp, #4]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff ff5a 	bl	800cab4 <etharp_raw>
 800cc00:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	08012074 	.word	0x08012074

0800cc10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cc1a:	4a05      	ldr	r2, [pc, #20]	; (800cc30 <etharp_request+0x20>)
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff ffd4 	bl	800cbcc <etharp_request_dst>
 800cc24:	4603      	mov	r3, r0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	0801206c 	.word	0x0801206c

0800cc34 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08e      	sub	sp, #56	; 0x38
 800cc38:	af04      	add	r7, sp, #16
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cc3e:	4b79      	ldr	r3, [pc, #484]	; (800ce24 <icmp_input+0x1f0>)
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f003 030f 	and.w	r3, r3, #15
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc56:	2b13      	cmp	r3, #19
 800cc58:	f240 80cd 	bls.w	800cdf6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	895b      	ldrh	r3, [r3, #10]
 800cc60:	2b03      	cmp	r3, #3
 800cc62:	f240 80ca 	bls.w	800cdfa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cc70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80b7 	beq.w	800cde8 <icmp_input+0x1b4>
 800cc7a:	2b08      	cmp	r3, #8
 800cc7c:	f040 80b7 	bne.w	800cdee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cc80:	4b69      	ldr	r3, [pc, #420]	; (800ce28 <icmp_input+0x1f4>)
 800cc82:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cc84:	4b67      	ldr	r3, [pc, #412]	; (800ce24 <icmp_input+0x1f0>)
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc8c:	2be0      	cmp	r3, #224	; 0xe0
 800cc8e:	f000 80bb 	beq.w	800ce08 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cc92:	4b64      	ldr	r3, [pc, #400]	; (800ce24 <icmp_input+0x1f0>)
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	4a63      	ldr	r2, [pc, #396]	; (800ce24 <icmp_input+0x1f0>)
 800cc98:	6812      	ldr	r2, [r2, #0]
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 fbed 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f040 80b1 	bne.w	800ce0c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	891b      	ldrh	r3, [r3, #8]
 800ccae:	2b07      	cmp	r3, #7
 800ccb0:	f240 80a5 	bls.w	800cdfe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ccb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccb6:	330e      	adds	r3, #14
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f8 f9e6 	bl	800508c <pbuf_add_header>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d04b      	beq.n	800cd5e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	891a      	ldrh	r2, [r3, #8]
 800ccca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cccc:	4413      	add	r3, r2
 800ccce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	891b      	ldrh	r3, [r3, #8]
 800ccd4:	8b7a      	ldrh	r2, [r7, #26]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	f0c0 809a 	bcc.w	800ce10 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ccdc:	8b7b      	ldrh	r3, [r7, #26]
 800ccde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cce2:	4619      	mov	r1, r3
 800cce4:	200e      	movs	r0, #14
 800cce6:	f7f7 ff83 	bl	8004bf0 <pbuf_alloc>
 800ccea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 8090 	beq.w	800ce14 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	895b      	ldrh	r3, [r3, #10]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d203      	bcs.n	800cd0a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f7f8 fa58 	bl	80051b8 <pbuf_free>
          goto icmperr;
 800cd08:	e085      	b.n	800ce16 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd12:	4618      	mov	r0, r3
 800cd14:	f001 fbc6 	bl	800e4a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6978      	ldr	r0, [r7, #20]
 800cd1e:	f7f8 f9c5 	bl	80050ac <pbuf_remove_header>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cd28:	4b40      	ldr	r3, [pc, #256]	; (800ce2c <icmp_input+0x1f8>)
 800cd2a:	22b6      	movs	r2, #182	; 0xb6
 800cd2c:	4940      	ldr	r1, [pc, #256]	; (800ce30 <icmp_input+0x1fc>)
 800cd2e:	4841      	ldr	r0, [pc, #260]	; (800ce34 <icmp_input+0x200>)
 800cd30:	f001 fbce 	bl	800e4d0 <iprintf>
          pbuf_free(r);
 800cd34:	6978      	ldr	r0, [r7, #20]
 800cd36:	f7f8 fa3f 	bl	80051b8 <pbuf_free>
          goto icmperr;
 800cd3a:	e06c      	b.n	800ce16 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	6978      	ldr	r0, [r7, #20]
 800cd40:	f7f8 fb62 	bl	8005408 <pbuf_copy>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cd4a:	6978      	ldr	r0, [r7, #20]
 800cd4c:	f7f8 fa34 	bl	80051b8 <pbuf_free>
          goto icmperr;
 800cd50:	e061      	b.n	800ce16 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7f8 fa30 	bl	80051b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	607b      	str	r3, [r7, #4]
 800cd5c:	e00f      	b.n	800cd7e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd60:	330e      	adds	r3, #14
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7f8 f9a1 	bl	80050ac <pbuf_remove_header>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d006      	beq.n	800cd7e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cd70:	4b2e      	ldr	r3, [pc, #184]	; (800ce2c <icmp_input+0x1f8>)
 800cd72:	22c7      	movs	r2, #199	; 0xc7
 800cd74:	4930      	ldr	r1, [pc, #192]	; (800ce38 <icmp_input+0x204>)
 800cd76:	482f      	ldr	r0, [pc, #188]	; (800ce34 <icmp_input+0x200>)
 800cd78:	f001 fbaa 	bl	800e4d0 <iprintf>
          goto icmperr;
 800cd7c:	e04b      	b.n	800ce16 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cd84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7f8 f97f 	bl	800508c <pbuf_add_header>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d12b      	bne.n	800cdec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cda2:	4b20      	ldr	r3, [pc, #128]	; (800ce24 <icmp_input+0x1f0>)
 800cda4:	691a      	ldr	r2, [r3, #16]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	2200      	movs	r2, #0
 800cdae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	709a      	strb	r2, [r3, #2]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	22ff      	movs	r2, #255	; 0xff
 800cdbe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	729a      	strb	r2, [r3, #10]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	9302      	str	r3, [sp, #8]
 800cdce:	2301      	movs	r3, #1
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	23ff      	movs	r3, #255	; 0xff
 800cdd8:	2200      	movs	r2, #0
 800cdda:	69f9      	ldr	r1, [r7, #28]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fa75 	bl	800d2cc <ip4_output_if>
 800cde2:	4603      	mov	r3, r0
 800cde4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cde6:	e001      	b.n	800cdec <icmp_input+0x1b8>
      break;
 800cde8:	bf00      	nop
 800cdea:	e000      	b.n	800cdee <icmp_input+0x1ba>
      break;
 800cdec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f8 f9e2 	bl	80051b8 <pbuf_free>
  return;
 800cdf4:	e013      	b.n	800ce1e <icmp_input+0x1ea>
    goto lenerr;
 800cdf6:	bf00      	nop
 800cdf8:	e002      	b.n	800ce00 <icmp_input+0x1cc>
    goto lenerr;
 800cdfa:	bf00      	nop
 800cdfc:	e000      	b.n	800ce00 <icmp_input+0x1cc>
        goto lenerr;
 800cdfe:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7f8 f9d9 	bl	80051b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce06:	e00a      	b.n	800ce1e <icmp_input+0x1ea>
        goto icmperr;
 800ce08:	bf00      	nop
 800ce0a:	e004      	b.n	800ce16 <icmp_input+0x1e2>
        goto icmperr;
 800ce0c:	bf00      	nop
 800ce0e:	e002      	b.n	800ce16 <icmp_input+0x1e2>
          goto icmperr;
 800ce10:	bf00      	nop
 800ce12:	e000      	b.n	800ce16 <icmp_input+0x1e2>
          goto icmperr;
 800ce14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7f8 f9ce 	bl	80051b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ce1e:	3728      	adds	r7, #40	; 0x28
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20003358 	.word	0x20003358
 800ce28:	2000336c 	.word	0x2000336c
 800ce2c:	08011b3c 	.word	0x08011b3c
 800ce30:	08011b74 	.word	0x08011b74
 800ce34:	08011bac 	.word	0x08011bac
 800ce38:	08011bd4 	.word	0x08011bd4

0800ce3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	2103      	movs	r1, #3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f814 	bl	800ce7c <icmp_send_response>
}
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	460b      	mov	r3, r1
 800ce66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ce68:	78fb      	ldrb	r3, [r7, #3]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	210b      	movs	r1, #11
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f804 	bl	800ce7c <icmp_send_response>
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08c      	sub	sp, #48	; 0x30
 800ce80:	af04      	add	r7, sp, #16
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ce8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce90:	2124      	movs	r1, #36	; 0x24
 800ce92:	2022      	movs	r0, #34	; 0x22
 800ce94:	f7f7 feac 	bl	8004bf0 <pbuf_alloc>
 800ce98:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d04c      	beq.n	800cf3a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	895b      	ldrh	r3, [r3, #10]
 800cea4:	2b23      	cmp	r3, #35	; 0x23
 800cea6:	d806      	bhi.n	800ceb6 <icmp_send_response+0x3a>
 800cea8:	4b26      	ldr	r3, [pc, #152]	; (800cf44 <icmp_send_response+0xc8>)
 800ceaa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ceae:	4926      	ldr	r1, [pc, #152]	; (800cf48 <icmp_send_response+0xcc>)
 800ceb0:	4826      	ldr	r0, [pc, #152]	; (800cf4c <icmp_send_response+0xd0>)
 800ceb2:	f001 fb0d 	bl	800e4d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	78fa      	ldrb	r2, [r7, #3]
 800cec6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	78ba      	ldrb	r2, [r7, #2]
 800cecc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2200      	movs	r2, #0
 800ced2:	711a      	strb	r2, [r3, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	2200      	movs	r2, #0
 800cedc:	719a      	strb	r2, [r3, #6]
 800cede:	2200      	movs	r2, #0
 800cee0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f103 0008 	add.w	r0, r3, #8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	221c      	movs	r2, #28
 800cef0:	4619      	mov	r1, r3
 800cef2:	f001 fad7 	bl	800e4a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cefc:	f107 030c 	add.w	r3, r7, #12
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f825 	bl	800cf50 <ip4_route>
 800cf06:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d011      	beq.n	800cf32 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2200      	movs	r2, #0
 800cf12:	709a      	strb	r2, [r3, #2]
 800cf14:	2200      	movs	r2, #0
 800cf16:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf18:	f107 020c 	add.w	r2, r7, #12
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	9302      	str	r3, [sp, #8]
 800cf20:	2301      	movs	r3, #1
 800cf22:	9301      	str	r3, [sp, #4]
 800cf24:	2300      	movs	r3, #0
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	23ff      	movs	r3, #255	; 0xff
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	69f8      	ldr	r0, [r7, #28]
 800cf2e:	f000 f9cd 	bl	800d2cc <ip4_output_if>
  }
  pbuf_free(q);
 800cf32:	69f8      	ldr	r0, [r7, #28]
 800cf34:	f7f8 f940 	bl	80051b8 <pbuf_free>
 800cf38:	e000      	b.n	800cf3c <icmp_send_response+0xc0>
    return;
 800cf3a:	bf00      	nop
}
 800cf3c:	3720      	adds	r7, #32
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	08011b3c 	.word	0x08011b3c
 800cf48:	08011c08 	.word	0x08011c08
 800cf4c:	08011bac 	.word	0x08011bac

0800cf50 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cf58:	4b33      	ldr	r3, [pc, #204]	; (800d028 <ip4_route+0xd8>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	e036      	b.n	800cfce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d02b      	beq.n	800cfc8 <ip4_route+0x78>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf76:	089b      	lsrs	r3, r3, #2
 800cf78:	f003 0301 	and.w	r3, r3, #1
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d022      	beq.n	800cfc8 <ip4_route+0x78>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3304      	adds	r3, #4
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01d      	beq.n	800cfc8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	3304      	adds	r3, #4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	405a      	eors	r2, r3
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	e038      	b.n	800d01a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d108      	bne.n	800cfc8 <ip4_route+0x78>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	330c      	adds	r3, #12
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d101      	bne.n	800cfc8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	e028      	b.n	800d01a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1c5      	bne.n	800cf60 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfd4:	4b15      	ldr	r3, [pc, #84]	; (800d02c <ip4_route+0xdc>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d01a      	beq.n	800d012 <ip4_route+0xc2>
 800cfdc:	4b13      	ldr	r3, [pc, #76]	; (800d02c <ip4_route+0xdc>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d012      	beq.n	800d012 <ip4_route+0xc2>
 800cfec:	4b0f      	ldr	r3, [pc, #60]	; (800d02c <ip4_route+0xdc>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cff4:	f003 0304 	and.w	r3, r3, #4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00a      	beq.n	800d012 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cffc:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <ip4_route+0xdc>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3304      	adds	r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b7f      	cmp	r3, #127	; 0x7f
 800d010:	d101      	bne.n	800d016 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d012:	2300      	movs	r3, #0
 800d014:	e001      	b.n	800d01a <ip4_route+0xca>
  }

  return netif_default;
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <ip4_route+0xdc>)
 800d018:	681b      	ldr	r3, [r3, #0]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20008a4c 	.word	0x20008a4c
 800d02c:	20008a50 	.word	0x20008a50

0800d030 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d03e:	f003 0301 	and.w	r3, r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d016      	beq.n	800d076 <ip4_input_accept+0x46>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	3304      	adds	r3, #4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d011      	beq.n	800d076 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d052:	4b0b      	ldr	r3, [pc, #44]	; (800d080 <ip4_input_accept+0x50>)
 800d054:	695a      	ldr	r2, [r3, #20]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	3304      	adds	r3, #4
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d008      	beq.n	800d072 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <ip4_input_accept+0x50>)
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fa08 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800d06c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d072:	2301      	movs	r3, #1
 800d074:	e000      	b.n	800d078 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	20003358 	.word	0x20003358

0800d084 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	091b      	lsrs	r3, r3, #4
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b04      	cmp	r3, #4
 800d09e:	d004      	beq.n	800d0aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7f8 f889 	bl	80051b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e107      	b.n	800d2ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 030f 	and.w	r3, r3, #15
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	885b      	ldrh	r3, [r3, #2]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7f6 fdc5 	bl	8003c50 <lwip_htons>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	891b      	ldrh	r3, [r3, #8]
 800d0ce:	89ba      	ldrh	r2, [r7, #12]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d204      	bcs.n	800d0de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d0d4:	89bb      	ldrh	r3, [r7, #12]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7f7 fee7 	bl	8004eac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	895b      	ldrh	r3, [r3, #10]
 800d0e2:	89fa      	ldrh	r2, [r7, #14]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d807      	bhi.n	800d0f8 <ip4_input+0x74>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	891b      	ldrh	r3, [r3, #8]
 800d0ec:	89ba      	ldrh	r2, [r7, #12]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d802      	bhi.n	800d0f8 <ip4_input+0x74>
 800d0f2:	89fb      	ldrh	r3, [r7, #14]
 800d0f4:	2b13      	cmp	r3, #19
 800d0f6:	d804      	bhi.n	800d102 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7f8 f85d 	bl	80051b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	e0db      	b.n	800d2ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	4a6f      	ldr	r2, [pc, #444]	; (800d2c4 <ip4_input+0x240>)
 800d108:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	4a6d      	ldr	r2, [pc, #436]	; (800d2c4 <ip4_input+0x240>)
 800d110:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d112:	4b6c      	ldr	r3, [pc, #432]	; (800d2c4 <ip4_input+0x240>)
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d11a:	2be0      	cmp	r3, #224	; 0xe0
 800d11c:	d112      	bne.n	800d144 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d007      	beq.n	800d13e <ip4_input+0xba>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	3304      	adds	r3, #4
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <ip4_input+0xba>
      netif = inp;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	e02a      	b.n	800d194 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	613b      	str	r3, [r7, #16]
 800d142:	e027      	b.n	800d194 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d144:	6838      	ldr	r0, [r7, #0]
 800d146:	f7ff ff73 	bl	800d030 <ip4_input_accept>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <ip4_input+0xd2>
      netif = inp;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	613b      	str	r3, [r7, #16]
 800d154:	e01e      	b.n	800d194 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d15a:	4b5a      	ldr	r3, [pc, #360]	; (800d2c4 <ip4_input+0x240>)
 800d15c:	695b      	ldr	r3, [r3, #20]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	2b7f      	cmp	r3, #127	; 0x7f
 800d162:	d017      	beq.n	800d194 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d164:	4b58      	ldr	r3, [pc, #352]	; (800d2c8 <ip4_input+0x244>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	613b      	str	r3, [r7, #16]
 800d16a:	e00e      	b.n	800d18a <ip4_input+0x106>
          if (netif == inp) {
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d006      	beq.n	800d182 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d174:	6938      	ldr	r0, [r7, #16]
 800d176:	f7ff ff5b 	bl	800d030 <ip4_input_accept>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d108      	bne.n	800d192 <ip4_input+0x10e>
 800d180:	e000      	b.n	800d184 <ip4_input+0x100>
            continue;
 800d182:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	613b      	str	r3, [r7, #16]
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1ed      	bne.n	800d16c <ip4_input+0xe8>
 800d190:	e000      	b.n	800d194 <ip4_input+0x110>
            break;
 800d192:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d194:	4b4b      	ldr	r3, [pc, #300]	; (800d2c4 <ip4_input+0x240>)
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f96e 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d105      	bne.n	800d1b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d1a6:	4b47      	ldr	r3, [pc, #284]	; (800d2c4 <ip4_input+0x240>)
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1ae:	2be0      	cmp	r3, #224	; 0xe0
 800d1b0:	d104      	bne.n	800d1bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7f8 f800 	bl	80051b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e07e      	b.n	800d2ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d104      	bne.n	800d1cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7f7 fff8 	bl	80051b8 <pbuf_free>
    return ERR_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e076      	b.n	800d2ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	88db      	ldrh	r3, [r3, #6]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d1d8:	4013      	ands	r3, r2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00b      	beq.n	800d1f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fd24 	bl	800dc2c <ip4_reass>
 800d1e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d101      	bne.n	800d1f0 <ip4_input+0x16c>
      return ERR_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e064      	b.n	800d2ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d1f6:	4a33      	ldr	r2, [pc, #204]	; (800d2c4 <ip4_input+0x240>)
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d1fc:	4a31      	ldr	r2, [pc, #196]	; (800d2c4 <ip4_input+0x240>)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d202:	4a30      	ldr	r2, [pc, #192]	; (800d2c4 <ip4_input+0x240>)
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	f003 030f 	and.w	r3, r3, #15
 800d210:	b2db      	uxtb	r3, r3
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	b2db      	uxtb	r3, r3
 800d216:	b29a      	uxth	r2, r3
 800d218:	4b2a      	ldr	r3, [pc, #168]	; (800d2c4 <ip4_input+0x240>)
 800d21a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d21c:	89fb      	ldrh	r3, [r7, #14]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7f7 ff43 	bl	80050ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	7a5b      	ldrb	r3, [r3, #9]
 800d22a:	2b11      	cmp	r3, #17
 800d22c:	d006      	beq.n	800d23c <ip4_input+0x1b8>
 800d22e:	2b11      	cmp	r3, #17
 800d230:	dc13      	bgt.n	800d25a <ip4_input+0x1d6>
 800d232:	2b01      	cmp	r3, #1
 800d234:	d00c      	beq.n	800d250 <ip4_input+0x1cc>
 800d236:	2b06      	cmp	r3, #6
 800d238:	d005      	beq.n	800d246 <ip4_input+0x1c2>
 800d23a:	e00e      	b.n	800d25a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7fe fc68 	bl	800bb14 <udp_input>
        break;
 800d244:	e026      	b.n	800d294 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7fa f88d 	bl	8007368 <tcp_input>
        break;
 800d24e:	e021      	b.n	800d294 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fcee 	bl	800cc34 <icmp_input>
        break;
 800d258:	e01c      	b.n	800d294 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d25a:	4b1a      	ldr	r3, [pc, #104]	; (800d2c4 <ip4_input+0x240>)
 800d25c:	695b      	ldr	r3, [r3, #20]
 800d25e:	6939      	ldr	r1, [r7, #16]
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f90b 	bl	800d47c <ip4_addr_isbroadcast_u32>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10f      	bne.n	800d28c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d26c:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <ip4_input+0x240>)
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d274:	2be0      	cmp	r3, #224	; 0xe0
 800d276:	d009      	beq.n	800d28c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7f7 ff87 	bl	8005192 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d284:	2102      	movs	r1, #2
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff fdd8 	bl	800ce3c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7f7 ff93 	bl	80051b8 <pbuf_free>
        break;
 800d292:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d294:	4b0b      	ldr	r3, [pc, #44]	; (800d2c4 <ip4_input+0x240>)
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d29a:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <ip4_input+0x240>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d2a0:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <ip4_input+0x240>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d2a6:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <ip4_input+0x240>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <ip4_input+0x240>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d2b2:	4b04      	ldr	r3, [pc, #16]	; (800d2c4 <ip4_input+0x240>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20003358 	.word	0x20003358
 800d2c8:	20008a4c 	.word	0x20008a4c

0800d2cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af04      	add	r7, sp, #16
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d009      	beq.n	800d2f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <ip4_output_if+0x26>
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d102      	bne.n	800d2f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d2f8:	78fa      	ldrb	r2, [r7, #3]
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4613      	mov	r3, r2
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	6979      	ldr	r1, [r7, #20]
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 f805 	bl	800d320 <ip4_output_if_src>
 800d316:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b088      	sub	sp, #32
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	7b9b      	ldrb	r3, [r3, #14]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d006      	beq.n	800d344 <ip4_output_if_src+0x24>
 800d336:	4b4b      	ldr	r3, [pc, #300]	; (800d464 <ip4_output_if_src+0x144>)
 800d338:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d33c:	494a      	ldr	r1, [pc, #296]	; (800d468 <ip4_output_if_src+0x148>)
 800d33e:	484b      	ldr	r0, [pc, #300]	; (800d46c <ip4_output_if_src+0x14c>)
 800d340:	f001 f8c6 	bl	800e4d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d060      	beq.n	800d40c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d34a:	2314      	movs	r3, #20
 800d34c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d34e:	2114      	movs	r1, #20
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f7f7 fe9b 	bl	800508c <pbuf_add_header>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d35c:	f06f 0301 	mvn.w	r3, #1
 800d360:	e07c      	b.n	800d45c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	895b      	ldrh	r3, [r3, #10]
 800d36c:	2b13      	cmp	r3, #19
 800d36e:	d806      	bhi.n	800d37e <ip4_output_if_src+0x5e>
 800d370:	4b3c      	ldr	r3, [pc, #240]	; (800d464 <ip4_output_if_src+0x144>)
 800d372:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d376:	493e      	ldr	r1, [pc, #248]	; (800d470 <ip4_output_if_src+0x150>)
 800d378:	483c      	ldr	r0, [pc, #240]	; (800d46c <ip4_output_if_src+0x14c>)
 800d37a:	f001 f8a9 	bl	800e4d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	78fa      	ldrb	r2, [r7, #3]
 800d382:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d38a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d394:	8b7b      	ldrh	r3, [r7, #26]
 800d396:	089b      	lsrs	r3, r3, #2
 800d398:	b29b      	uxth	r3, r3
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	891b      	ldrh	r3, [r3, #8]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f6 fc4c 	bl	8003c50 <lwip_htons>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	719a      	strb	r2, [r3, #6]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d3ca:	4b2a      	ldr	r3, [pc, #168]	; (800d474 <ip4_output_if_src+0x154>)
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f6 fc3e 	bl	8003c50 <lwip_htons>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d3dc:	4b25      	ldr	r3, [pc, #148]	; (800d474 <ip4_output_if_src+0x154>)
 800d3de:	881b      	ldrh	r3, [r3, #0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	4b23      	ldr	r3, [pc, #140]	; (800d474 <ip4_output_if_src+0x154>)
 800d3e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d104      	bne.n	800d3f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d3ee:	4b22      	ldr	r3, [pc, #136]	; (800d478 <ip4_output_if_src+0x158>)
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	60da      	str	r2, [r3, #12]
 800d3f6:	e003      	b.n	800d400 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	2200      	movs	r2, #0
 800d404:	729a      	strb	r2, [r3, #10]
 800d406:	2200      	movs	r2, #0
 800d408:	72da      	strb	r2, [r3, #11]
 800d40a:	e00f      	b.n	800d42c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	895b      	ldrh	r3, [r3, #10]
 800d410:	2b13      	cmp	r3, #19
 800d412:	d802      	bhi.n	800d41a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d414:	f06f 0301 	mvn.w	r3, #1
 800d418:	e020      	b.n	800d45c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d426:	f107 0314 	add.w	r3, r7, #20
 800d42a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00c      	beq.n	800d44e <ip4_output_if_src+0x12e>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	891a      	ldrh	r2, [r3, #8]
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d906      	bls.n	800d44e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 fddf 	bl	800e008 <ip4_frag>
 800d44a:	4603      	mov	r3, r0
 800d44c:	e006      	b.n	800d45c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	68f9      	ldr	r1, [r7, #12]
 800d456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d458:	4798      	blx	r3
 800d45a:	4603      	mov	r3, r0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	08011c34 	.word	0x08011c34
 800d468:	08011c68 	.word	0x08011c68
 800d46c:	08011c74 	.word	0x08011c74
 800d470:	08011c9c 	.word	0x08011c9c
 800d474:	200001fe 	.word	0x200001fe
 800d478:	08012068 	.word	0x08012068

0800d47c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	d002      	beq.n	800d498 <ip4_addr_isbroadcast_u32+0x1c>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d101      	bne.n	800d49c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d498:	2301      	movs	r3, #1
 800d49a:	e02a      	b.n	800d4f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4a2:	f003 0302 	and.w	r3, r3, #2
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d101      	bne.n	800d4ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e021      	b.n	800d4f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d101      	bne.n	800d4be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e019      	b.n	800d4f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	405a      	eors	r2, r3
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	3308      	adds	r3, #8
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10d      	bne.n	800d4f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	43da      	mvns	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	3308      	adds	r3, #8
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d101      	bne.n	800d4f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e000      	b.n	800d4f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d4f0:	2300      	movs	r3, #0
  }
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
	...

0800d500 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800d508:	2210      	movs	r2, #16
 800d50a:	4904      	ldr	r1, [pc, #16]	; (800d51c <ip4addr_ntoa+0x1c>)
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f807 	bl	800d520 <ip4addr_ntoa_r>
 800d512:	4603      	mov	r3, r0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	20000200 	.word	0x20000200

0800d520 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800d520:	b480      	push	{r7}
 800d522:	b08d      	sub	sp, #52	; 0x34
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800d53a:	f107 0318 	add.w	r3, r7, #24
 800d53e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d540:	2300      	movs	r3, #0
 800d542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d546:	e059      	b.n	800d5fc <ip4addr_ntoa_r+0xdc>
    i = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	781a      	ldrb	r2, [r3, #0]
 800d552:	4b33      	ldr	r3, [pc, #204]	; (800d620 <ip4addr_ntoa_r+0x100>)
 800d554:	fba3 1302 	umull	r1, r3, r3, r2
 800d558:	08d9      	lsrs	r1, r3, #3
 800d55a:	460b      	mov	r3, r1
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	440b      	add	r3, r1
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	4a2d      	ldr	r2, [pc, #180]	; (800d620 <ip4addr_ntoa_r+0x100>)
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	08db      	lsrs	r3, r3, #3
 800d572:	b2da      	uxtb	r2, r3
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800d578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d582:	4619      	mov	r1, r3
 800d584:	7ffb      	ldrb	r3, [r7, #31]
 800d586:	3330      	adds	r3, #48	; 0x30
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d58e:	440b      	add	r3, r1
 800d590:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1d8      	bne.n	800d54e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800d59c:	e012      	b.n	800d5c4 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	1c5a      	adds	r2, r3, #1
 800d5a2:	623a      	str	r2, [r7, #32]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	dc01      	bgt.n	800d5ae <ip4addr_ntoa_r+0x8e>
        return NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e031      	b.n	800d612 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800d5ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	1c59      	adds	r1, r3, #1
 800d5b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d5b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d5bc:	440a      	add	r2, r1
 800d5be:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800d5c2:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800d5c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5c8:	1e5a      	subs	r2, r3, #1
 800d5ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e5      	bne.n	800d59e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	623a      	str	r2, [r7, #32]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	dc01      	bgt.n	800d5e2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e017      	b.n	800d612 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5e8:	222e      	movs	r2, #46	; 0x2e
 800d5ea:	701a      	strb	r2, [r3, #0]
    ap++;
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800d5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d600:	2b03      	cmp	r3, #3
 800d602:	d9a1      	bls.n	800d548 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	3b01      	subs	r3, #1
 800d608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60c:	2200      	movs	r2, #0
 800d60e:	701a      	strb	r2, [r3, #0]
  return buf;
 800d610:	68bb      	ldr	r3, [r7, #8]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3734      	adds	r7, #52	; 0x34
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	cccccccd 	.word	0xcccccccd

0800d624 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d62e:	4b12      	ldr	r3, [pc, #72]	; (800d678 <ip_reass_tmr+0x54>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d634:	e018      	b.n	800d668 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	7fdb      	ldrb	r3, [r3, #31]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <ip_reass_tmr+0x32>
      r->timer--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	7fdb      	ldrb	r3, [r3, #31]
 800d642:	3b01      	subs	r3, #1
 800d644:	b2da      	uxtb	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e008      	b.n	800d668 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d660:	68b9      	ldr	r1, [r7, #8]
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f80a 	bl	800d67c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1e3      	bne.n	800d636 <ip_reass_tmr+0x12>
    }
  }
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	20000210 	.word	0x20000210

0800d67c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d105      	bne.n	800d69e <ip_reass_free_complete_datagram+0x22>
 800d692:	4b45      	ldr	r3, [pc, #276]	; (800d7a8 <ip_reass_free_complete_datagram+0x12c>)
 800d694:	22ab      	movs	r2, #171	; 0xab
 800d696:	4945      	ldr	r1, [pc, #276]	; (800d7ac <ip_reass_free_complete_datagram+0x130>)
 800d698:	4845      	ldr	r0, [pc, #276]	; (800d7b0 <ip_reass_free_complete_datagram+0x134>)
 800d69a:	f000 ff19 	bl	800e4d0 <iprintf>
  if (prev != NULL) {
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00a      	beq.n	800d6ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d005      	beq.n	800d6ba <ip_reass_free_complete_datagram+0x3e>
 800d6ae:	4b3e      	ldr	r3, [pc, #248]	; (800d7a8 <ip_reass_free_complete_datagram+0x12c>)
 800d6b0:	22ad      	movs	r2, #173	; 0xad
 800d6b2:	4940      	ldr	r1, [pc, #256]	; (800d7b4 <ip_reass_free_complete_datagram+0x138>)
 800d6b4:	483e      	ldr	r0, [pc, #248]	; (800d7b0 <ip_reass_free_complete_datagram+0x134>)
 800d6b6:	f000 ff0b 	bl	800e4d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	889b      	ldrh	r3, [r3, #4]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d12a      	bne.n	800d722 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	6858      	ldr	r0, [r3, #4]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	2214      	movs	r2, #20
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	f000 fedd 	bl	800e4a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	69b8      	ldr	r0, [r7, #24]
 800d6ee:	f7ff fbb5 	bl	800ce5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d6f2:	69b8      	ldr	r0, [r7, #24]
 800d6f4:	f7f7 fde8 	bl	80052c8 <pbuf_clen>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d6fc:	8bfa      	ldrh	r2, [r7, #30]
 800d6fe:	8a7b      	ldrh	r3, [r7, #18]
 800d700:	4413      	add	r3, r2
 800d702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d706:	db05      	blt.n	800d714 <ip_reass_free_complete_datagram+0x98>
 800d708:	4b27      	ldr	r3, [pc, #156]	; (800d7a8 <ip_reass_free_complete_datagram+0x12c>)
 800d70a:	22bc      	movs	r2, #188	; 0xbc
 800d70c:	492a      	ldr	r1, [pc, #168]	; (800d7b8 <ip_reass_free_complete_datagram+0x13c>)
 800d70e:	4828      	ldr	r0, [pc, #160]	; (800d7b0 <ip_reass_free_complete_datagram+0x134>)
 800d710:	f000 fede 	bl	800e4d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d714:	8bfa      	ldrh	r2, [r7, #30]
 800d716:	8a7b      	ldrh	r3, [r7, #18]
 800d718:	4413      	add	r3, r2
 800d71a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d71c:	69b8      	ldr	r0, [r7, #24]
 800d71e:	f7f7 fd4b 	bl	80051b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d728:	e01f      	b.n	800d76a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f7f7 fdc4 	bl	80052c8 <pbuf_clen>
 800d740:	4603      	mov	r3, r0
 800d742:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d744:	8bfa      	ldrh	r2, [r7, #30]
 800d746:	8a7b      	ldrh	r3, [r7, #18]
 800d748:	4413      	add	r3, r2
 800d74a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d74e:	db05      	blt.n	800d75c <ip_reass_free_complete_datagram+0xe0>
 800d750:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <ip_reass_free_complete_datagram+0x12c>)
 800d752:	22cc      	movs	r2, #204	; 0xcc
 800d754:	4918      	ldr	r1, [pc, #96]	; (800d7b8 <ip_reass_free_complete_datagram+0x13c>)
 800d756:	4816      	ldr	r0, [pc, #88]	; (800d7b0 <ip_reass_free_complete_datagram+0x134>)
 800d758:	f000 feba 	bl	800e4d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d75c:	8bfa      	ldrh	r2, [r7, #30]
 800d75e:	8a7b      	ldrh	r3, [r7, #18]
 800d760:	4413      	add	r3, r2
 800d762:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7f7 fd27 	bl	80051b8 <pbuf_free>
  while (p != NULL) {
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1dc      	bne.n	800d72a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d770:	6839      	ldr	r1, [r7, #0]
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f8c2 	bl	800d8fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d778:	4b10      	ldr	r3, [pc, #64]	; (800d7bc <ip_reass_free_complete_datagram+0x140>)
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	8bfa      	ldrh	r2, [r7, #30]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d905      	bls.n	800d78e <ip_reass_free_complete_datagram+0x112>
 800d782:	4b09      	ldr	r3, [pc, #36]	; (800d7a8 <ip_reass_free_complete_datagram+0x12c>)
 800d784:	22d2      	movs	r2, #210	; 0xd2
 800d786:	490e      	ldr	r1, [pc, #56]	; (800d7c0 <ip_reass_free_complete_datagram+0x144>)
 800d788:	4809      	ldr	r0, [pc, #36]	; (800d7b0 <ip_reass_free_complete_datagram+0x134>)
 800d78a:	f000 fea1 	bl	800e4d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d78e:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <ip_reass_free_complete_datagram+0x140>)
 800d790:	881a      	ldrh	r2, [r3, #0]
 800d792:	8bfb      	ldrh	r3, [r7, #30]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	b29a      	uxth	r2, r3
 800d798:	4b08      	ldr	r3, [pc, #32]	; (800d7bc <ip_reass_free_complete_datagram+0x140>)
 800d79a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d79c:	8bfb      	ldrh	r3, [r7, #30]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3720      	adds	r7, #32
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	08011ccc 	.word	0x08011ccc
 800d7ac:	08011d08 	.word	0x08011d08
 800d7b0:	08011d14 	.word	0x08011d14
 800d7b4:	08011d3c 	.word	0x08011d3c
 800d7b8:	08011d50 	.word	0x08011d50
 800d7bc:	20000214 	.word	0x20000214
 800d7c0:	08011d70 	.word	0x08011d70

0800d7c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08a      	sub	sp, #40	; 0x28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d7e2:	4b28      	ldr	r3, [pc, #160]	; (800d884 <ip_reass_remove_oldest_datagram+0xc0>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d7e8:	e030      	b.n	800d84c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	695a      	ldr	r2, [r3, #20]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d10c      	bne.n	800d810 <ip_reass_remove_oldest_datagram+0x4c>
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	699a      	ldr	r2, [r3, #24]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d106      	bne.n	800d810 <ip_reass_remove_oldest_datagram+0x4c>
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	899a      	ldrh	r2, [r3, #12]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	889b      	ldrh	r3, [r3, #4]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d014      	beq.n	800d83a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	3301      	adds	r3, #1
 800d814:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	e009      	b.n	800d83a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	7fda      	ldrb	r2, [r3, #31]
 800d82a:	6a3b      	ldr	r3, [r7, #32]
 800d82c:	7fdb      	ldrb	r3, [r3, #31]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d803      	bhi.n	800d83a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d834:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d001      	beq.n	800d846 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1cb      	bne.n	800d7ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d008      	beq.n	800d86a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d858:	69b9      	ldr	r1, [r7, #24]
 800d85a:	6a38      	ldr	r0, [r7, #32]
 800d85c:	f7ff ff0e 	bl	800d67c <ip_reass_free_complete_datagram>
 800d860:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4413      	add	r3, r2
 800d868:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	da02      	bge.n	800d878 <ip_reass_remove_oldest_datagram+0xb4>
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b01      	cmp	r3, #1
 800d876:	dcac      	bgt.n	800d7d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d878:	697b      	ldr	r3, [r7, #20]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3728      	adds	r7, #40	; 0x28
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20000210 	.word	0x20000210

0800d888 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d892:	2004      	movs	r0, #4
 800d894:	f7f6 fe32 	bl	80044fc <memp_malloc>
 800d898:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d110      	bne.n	800d8c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff ff8e 	bl	800d7c4 <ip_reass_remove_oldest_datagram>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	dc03      	bgt.n	800d8b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d8b0:	2004      	movs	r0, #4
 800d8b2:	f7f6 fe23 	bl	80044fc <memp_malloc>
 800d8b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e016      	b.n	800d8f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f000 fdfa 	bl	800e4c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	220f      	movs	r2, #15
 800d8d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d8d2:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <ip_reass_enqueue_new_datagram+0x70>)
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d8da:	4a07      	ldr	r2, [pc, #28]	; (800d8f8 <ip_reass_enqueue_new_datagram+0x70>)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	2214      	movs	r2, #20
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 fddb 	bl	800e4a4 <memcpy>
  return ipr;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20000210 	.word	0x20000210

0800d8fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d906:	4b10      	ldr	r3, [pc, #64]	; (800d948 <ip_reass_dequeue_datagram+0x4c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d104      	bne.n	800d91a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a0c      	ldr	r2, [pc, #48]	; (800d948 <ip_reass_dequeue_datagram+0x4c>)
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	e00d      	b.n	800d936 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <ip_reass_dequeue_datagram+0x32>
 800d920:	4b0a      	ldr	r3, [pc, #40]	; (800d94c <ip_reass_dequeue_datagram+0x50>)
 800d922:	f240 1245 	movw	r2, #325	; 0x145
 800d926:	490a      	ldr	r1, [pc, #40]	; (800d950 <ip_reass_dequeue_datagram+0x54>)
 800d928:	480a      	ldr	r0, [pc, #40]	; (800d954 <ip_reass_dequeue_datagram+0x58>)
 800d92a:	f000 fdd1 	bl	800e4d0 <iprintf>
    prev->next = ipr->next;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d936:	6879      	ldr	r1, [r7, #4]
 800d938:	2004      	movs	r0, #4
 800d93a:	f7f6 fe2b 	bl	8004594 <memp_free>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000210 	.word	0x20000210
 800d94c:	08011ccc 	.word	0x08011ccc
 800d950:	08011d94 	.word	0x08011d94
 800d954:	08011d14 	.word	0x08011d14

0800d958 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08c      	sub	sp, #48	; 0x30
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d964:	2300      	movs	r3, #0
 800d966:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d968:	2301      	movs	r3, #1
 800d96a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	885b      	ldrh	r3, [r3, #2]
 800d976:	b29b      	uxth	r3, r3
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f6 f969 	bl	8003c50 <lwip_htons>
 800d97e:	4603      	mov	r3, r0
 800d980:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d990:	7e7b      	ldrb	r3, [r7, #25]
 800d992:	b29b      	uxth	r3, r3
 800d994:	8b7a      	ldrh	r2, [r7, #26]
 800d996:	429a      	cmp	r2, r3
 800d998:	d202      	bcs.n	800d9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	e135      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d9a0:	7e7b      	ldrb	r3, [r7, #25]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8b7a      	ldrh	r2, [r7, #26]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	88db      	ldrh	r3, [r3, #6]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7f6 f94d 	bl	8003c50 <lwip_htons>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	705a      	strb	r2, [r3, #1]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	709a      	strb	r2, [r3, #2]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	8afa      	ldrh	r2, [r7, #22]
 800d9de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d9e0:	8afa      	ldrh	r2, [r7, #22]
 800d9e2:	8b7b      	ldrh	r3, [r7, #26]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	88db      	ldrh	r3, [r3, #6]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	8afa      	ldrh	r2, [r7, #22]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d902      	bls.n	800d9fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fc:	e106      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	627b      	str	r3, [r7, #36]	; 0x24
 800da04:	e068      	b.n	800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0e:	889b      	ldrh	r3, [r3, #4]
 800da10:	b29a      	uxth	r2, r3
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	889b      	ldrh	r3, [r3, #4]
 800da16:	b29b      	uxth	r3, r3
 800da18:	429a      	cmp	r2, r3
 800da1a:	d235      	bcs.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	2b00      	cmp	r3, #0
 800da26:	d020      	beq.n	800da6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800da28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2a:	889b      	ldrh	r3, [r3, #4]
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	88db      	ldrh	r3, [r3, #6]
 800da32:	b29b      	uxth	r3, r3
 800da34:	429a      	cmp	r2, r3
 800da36:	d307      	bcc.n	800da48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	88db      	ldrh	r3, [r3, #6]
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	889b      	ldrh	r3, [r3, #4]
 800da42:	b29b      	uxth	r3, r3
 800da44:	429a      	cmp	r2, r3
 800da46:	d902      	bls.n	800da4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da48:	f04f 33ff 	mov.w	r3, #4294967295
 800da4c:	e0de      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800da4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	88db      	ldrh	r3, [r3, #6]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5c:	889b      	ldrh	r3, [r3, #4]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	429a      	cmp	r2, r3
 800da62:	d03d      	beq.n	800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800da68:	e03a      	b.n	800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	88db      	ldrh	r3, [r3, #6]
 800da6e:	b29a      	uxth	r2, r3
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	889b      	ldrh	r3, [r3, #4]
 800da74:	b29b      	uxth	r3, r3
 800da76:	429a      	cmp	r2, r3
 800da78:	d902      	bls.n	800da80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da7a:	f04f 33ff 	mov.w	r3, #4294967295
 800da7e:	e0c5      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	605a      	str	r2, [r3, #4]
      break;
 800da86:	e02b      	b.n	800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	889b      	ldrh	r3, [r3, #4]
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	889b      	ldrh	r3, [r3, #4]
 800da92:	b29b      	uxth	r3, r3
 800da94:	429a      	cmp	r2, r3
 800da96:	d102      	bne.n	800da9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da98:	f04f 33ff 	mov.w	r3, #4294967295
 800da9c:	e0b6      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	889b      	ldrh	r3, [r3, #4]
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	88db      	ldrh	r3, [r3, #6]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	429a      	cmp	r2, r3
 800daac:	d202      	bcs.n	800dab4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800daae:	f04f 33ff 	mov.w	r3, #4294967295
 800dab2:	e0ab      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d009      	beq.n	800dace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	88db      	ldrh	r3, [r3, #6]
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	889b      	ldrh	r3, [r3, #4]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d001      	beq.n	800dace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d193      	bne.n	800da06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dade:	e000      	b.n	800dae2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dae0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d12d      	bne.n	800db44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daea:	2b00      	cmp	r3, #0
 800daec:	d01c      	beq.n	800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	88db      	ldrh	r3, [r3, #6]
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	889b      	ldrh	r3, [r3, #4]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d906      	bls.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dafe:	4b45      	ldr	r3, [pc, #276]	; (800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800db04:	4944      	ldr	r1, [pc, #272]	; (800dc18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800db06:	4845      	ldr	r0, [pc, #276]	; (800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db08:	f000 fce2 	bl	800e4d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	88db      	ldrh	r3, [r3, #6]
 800db16:	b29a      	uxth	r2, r3
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	889b      	ldrh	r3, [r3, #4]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	429a      	cmp	r2, r3
 800db20:	d010      	beq.n	800db44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	623b      	str	r3, [r7, #32]
 800db26:	e00d      	b.n	800db44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d006      	beq.n	800db3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800db30:	4b38      	ldr	r3, [pc, #224]	; (800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800db36:	493a      	ldr	r1, [pc, #232]	; (800dc20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800db38:	4838      	ldr	r0, [pc, #224]	; (800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db3a:	f000 fcc9 	bl	800e4d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d105      	bne.n	800db56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	7f9b      	ldrb	r3, [r3, #30]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d059      	beq.n	800dc0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d04f      	beq.n	800dbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	889b      	ldrh	r3, [r3, #4]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	623b      	str	r3, [r7, #32]
 800db76:	e041      	b.n	800dbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800db78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800db82:	e012      	b.n	800dbaa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800db8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8c:	88db      	ldrh	r3, [r3, #6]
 800db8e:	b29a      	uxth	r2, r3
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	889b      	ldrh	r3, [r3, #4]
 800db94:	b29b      	uxth	r3, r3
 800db96:	429a      	cmp	r2, r3
 800db98:	d002      	beq.n	800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	623b      	str	r3, [r7, #32]
            break;
 800db9e:	e007      	b.n	800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e9      	bne.n	800db84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d022      	beq.n	800dbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dbbe:	4b15      	ldr	r3, [pc, #84]	; (800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbc0:	f240 12df 	movw	r2, #479	; 0x1df
 800dbc4:	4917      	ldr	r1, [pc, #92]	; (800dc24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dbc6:	4815      	ldr	r0, [pc, #84]	; (800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dbc8:	f000 fc82 	bl	800e4d0 <iprintf>
          LWIP_ASSERT("sanity check",
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d106      	bne.n	800dbe6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dbd8:	4b0e      	ldr	r3, [pc, #56]	; (800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dbde:	4911      	ldr	r1, [pc, #68]	; (800dc24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dbe0:	480e      	ldr	r0, [pc, #56]	; (800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dbe2:	f000 fc75 	bl	800e4d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d006      	beq.n	800dbfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbf0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dbf4:	490c      	ldr	r1, [pc, #48]	; (800dc28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dbf6:	4809      	ldr	r0, [pc, #36]	; (800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dbf8:	f000 fc6a 	bl	800e4d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dbfc:	6a3b      	ldr	r3, [r7, #32]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	bf14      	ite	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	2300      	moveq	r3, #0
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	e000      	b.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3730      	adds	r7, #48	; 0x30
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	08011ccc 	.word	0x08011ccc
 800dc18:	08011db0 	.word	0x08011db0
 800dc1c:	08011d14 	.word	0x08011d14
 800dc20:	08011dd0 	.word	0x08011dd0
 800dc24:	08011e08 	.word	0x08011e08
 800dc28:	08011e18 	.word	0x08011e18

0800dc2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08e      	sub	sp, #56	; 0x38
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	f003 030f 	and.w	r3, r3, #15
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b14      	cmp	r3, #20
 800dc4a:	f040 8167 	bne.w	800df1c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	88db      	ldrh	r3, [r3, #6]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7f5 fffb 	bl	8003c50 <lwip_htons>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc68:	885b      	ldrh	r3, [r3, #2]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f5 ffef 	bl	8003c50 <lwip_htons>
 800dc72:	4603      	mov	r3, r0
 800dc74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f003 030f 	and.w	r3, r3, #15
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dc86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	f0c0 8146 	bcc.w	800df20 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dc94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7f7 fb11 	bl	80052c8 <pbuf_clen>
 800dca6:	4603      	mov	r3, r0
 800dca8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dcaa:	4b9f      	ldr	r3, [pc, #636]	; (800df28 <ip4_reass+0x2fc>)
 800dcac:	881b      	ldrh	r3, [r3, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	8c3b      	ldrh	r3, [r7, #32]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	2b0a      	cmp	r3, #10
 800dcb6:	dd10      	ble.n	800dcda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dcb8:	8c3b      	ldrh	r3, [r7, #32]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcbe:	f7ff fd81 	bl	800d7c4 <ip_reass_remove_oldest_datagram>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 812d 	beq.w	800df24 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dcca:	4b97      	ldr	r3, [pc, #604]	; (800df28 <ip4_reass+0x2fc>)
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	8c3b      	ldrh	r3, [r7, #32]
 800dcd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dcd4:	2b0a      	cmp	r3, #10
 800dcd6:	f300 8125 	bgt.w	800df24 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dcda:	4b94      	ldr	r3, [pc, #592]	; (800df2c <ip4_reass+0x300>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	633b      	str	r3, [r7, #48]	; 0x30
 800dce0:	e015      	b.n	800dd0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	695a      	ldr	r2, [r3, #20]
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d10c      	bne.n	800dd08 <ip4_reass+0xdc>
 800dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf0:	699a      	ldr	r2, [r3, #24]
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d106      	bne.n	800dd08 <ip4_reass+0xdc>
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	899a      	ldrh	r2, [r3, #12]
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	889b      	ldrh	r3, [r3, #4]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d006      	beq.n	800dd16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	633b      	str	r3, [r7, #48]	; 0x30
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1e6      	bne.n	800dce2 <ip4_reass+0xb6>
 800dd14:	e000      	b.n	800dd18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dd16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d109      	bne.n	800dd32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dd1e:	8c3b      	ldrh	r3, [r7, #32]
 800dd20:	4619      	mov	r1, r3
 800dd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd24:	f7ff fdb0 	bl	800d888 <ip_reass_enqueue_new_datagram>
 800dd28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d11c      	bne.n	800dd6a <ip4_reass+0x13e>
      goto nullreturn;
 800dd30:	e109      	b.n	800df46 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	88db      	ldrh	r3, [r3, #6]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f5 ff89 	bl	8003c50 <lwip_htons>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d110      	bne.n	800dd6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	89db      	ldrh	r3, [r3, #14]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7f5 ff7f 	bl	8003c50 <lwip_htons>
 800dd52:	4603      	mov	r3, r0
 800dd54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d006      	beq.n	800dd6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	3308      	adds	r3, #8
 800dd60:	2214      	movs	r2, #20
 800dd62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fb9d 	bl	800e4a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	88db      	ldrh	r3, [r3, #6]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	f003 0320 	and.w	r3, r3, #32
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	bf0c      	ite	eq
 800dd78:	2301      	moveq	r3, #1
 800dd7a:	2300      	movne	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00e      	beq.n	800dda4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd8a:	4413      	add	r3, r2
 800dd8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dd8e:	8b7a      	ldrh	r2, [r7, #26]
 800dd90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd92:	429a      	cmp	r2, r3
 800dd94:	f0c0 80a0 	bcc.w	800ded8 <ip4_reass+0x2ac>
 800dd98:	8b7b      	ldrh	r3, [r7, #26]
 800dd9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	f200 809a 	bhi.w	800ded8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dda4:	69fa      	ldr	r2, [r7, #28]
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddaa:	f7ff fdd5 	bl	800d958 <ip_reass_chain_frag_into_datagram_and_validate>
 800ddae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb6:	f000 8091 	beq.w	800dedc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ddba:	4b5b      	ldr	r3, [pc, #364]	; (800df28 <ip4_reass+0x2fc>)
 800ddbc:	881a      	ldrh	r2, [r3, #0]
 800ddbe:	8c3b      	ldrh	r3, [r7, #32]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	4b58      	ldr	r3, [pc, #352]	; (800df28 <ip4_reass+0x2fc>)
 800ddc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00d      	beq.n	800ddea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ddce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ddd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddd2:	4413      	add	r3, r2
 800ddd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	8a7a      	ldrh	r2, [r7, #18]
 800ddda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	7f9b      	ldrb	r3, [r3, #30]
 800dde0:	f043 0301 	orr.w	r3, r3, #1
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d171      	bne.n	800ded4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	8b9b      	ldrh	r3, [r3, #28]
 800ddf4:	3314      	adds	r3, #20
 800ddf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	3308      	adds	r3, #8
 800de0e:	2214      	movs	r2, #20
 800de10:	4619      	mov	r1, r3
 800de12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de14:	f000 fb46 	bl	800e4a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800de18:	8a3b      	ldrh	r3, [r7, #16]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7f5 ff18 	bl	8003c50 <lwip_htons>
 800de20:	4603      	mov	r3, r0
 800de22:	461a      	mov	r2, r3
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	2200      	movs	r2, #0
 800de2c:	719a      	strb	r2, [r3, #6]
 800de2e:	2200      	movs	r2, #0
 800de30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800de32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de34:	2200      	movs	r2, #0
 800de36:	729a      	strb	r2, [r3, #10]
 800de38:	2200      	movs	r2, #0
 800de3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800de42:	e00d      	b.n	800de60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800de44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800de4a:	2114      	movs	r1, #20
 800de4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de4e:	f7f7 f92d 	bl	80050ac <pbuf_remove_header>
      pbuf_cat(p, r);
 800de52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7f7 fa71 	bl	800533c <pbuf_cat>
      r = iprh->next_pbuf;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1ee      	bne.n	800de44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800de66:	4b31      	ldr	r3, [pc, #196]	; (800df2c <ip4_reass+0x300>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d102      	bne.n	800de76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de74:	e010      	b.n	800de98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800de76:	4b2d      	ldr	r3, [pc, #180]	; (800df2c <ip4_reass+0x300>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de7c:	e007      	b.n	800de8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de84:	429a      	cmp	r2, r3
 800de86:	d006      	beq.n	800de96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800de88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1f4      	bne.n	800de7e <ip4_reass+0x252>
 800de94:	e000      	b.n	800de98 <ip4_reass+0x26c>
          break;
 800de96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800de98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de9c:	f7ff fd2e 	bl	800d8fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7f7 fa11 	bl	80052c8 <pbuf_clen>
 800dea6:	4603      	mov	r3, r0
 800dea8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800deaa:	4b1f      	ldr	r3, [pc, #124]	; (800df28 <ip4_reass+0x2fc>)
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	8c3a      	ldrh	r2, [r7, #32]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d906      	bls.n	800dec2 <ip4_reass+0x296>
 800deb4:	4b1e      	ldr	r3, [pc, #120]	; (800df30 <ip4_reass+0x304>)
 800deb6:	f240 229b 	movw	r2, #667	; 0x29b
 800deba:	491e      	ldr	r1, [pc, #120]	; (800df34 <ip4_reass+0x308>)
 800debc:	481e      	ldr	r0, [pc, #120]	; (800df38 <ip4_reass+0x30c>)
 800debe:	f000 fb07 	bl	800e4d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dec2:	4b19      	ldr	r3, [pc, #100]	; (800df28 <ip4_reass+0x2fc>)
 800dec4:	881a      	ldrh	r2, [r3, #0]
 800dec6:	8c3b      	ldrh	r3, [r7, #32]
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	b29a      	uxth	r2, r3
 800decc:	4b16      	ldr	r3, [pc, #88]	; (800df28 <ip4_reass+0x2fc>)
 800dece:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	e03c      	b.n	800df4e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e03a      	b.n	800df4e <ip4_reass+0x322>
      goto nullreturn_ipr;
 800ded8:	bf00      	nop
 800deda:	e000      	b.n	800dede <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dedc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d106      	bne.n	800def2 <ip4_reass+0x2c6>
 800dee4:	4b12      	ldr	r3, [pc, #72]	; (800df30 <ip4_reass+0x304>)
 800dee6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800deea:	4914      	ldr	r1, [pc, #80]	; (800df3c <ip4_reass+0x310>)
 800deec:	4812      	ldr	r0, [pc, #72]	; (800df38 <ip4_reass+0x30c>)
 800deee:	f000 faef 	bl	800e4d0 <iprintf>
  if (ipr->p == NULL) {
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d124      	bne.n	800df44 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800defa:	4b0c      	ldr	r3, [pc, #48]	; (800df2c <ip4_reass+0x300>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df00:	429a      	cmp	r2, r3
 800df02:	d006      	beq.n	800df12 <ip4_reass+0x2e6>
 800df04:	4b0a      	ldr	r3, [pc, #40]	; (800df30 <ip4_reass+0x304>)
 800df06:	f240 22ab 	movw	r2, #683	; 0x2ab
 800df0a:	490d      	ldr	r1, [pc, #52]	; (800df40 <ip4_reass+0x314>)
 800df0c:	480a      	ldr	r0, [pc, #40]	; (800df38 <ip4_reass+0x30c>)
 800df0e:	f000 fadf 	bl	800e4d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800df12:	2100      	movs	r1, #0
 800df14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df16:	f7ff fcf1 	bl	800d8fc <ip_reass_dequeue_datagram>
 800df1a:	e014      	b.n	800df46 <ip4_reass+0x31a>
    goto nullreturn;
 800df1c:	bf00      	nop
 800df1e:	e012      	b.n	800df46 <ip4_reass+0x31a>
    goto nullreturn;
 800df20:	bf00      	nop
 800df22:	e010      	b.n	800df46 <ip4_reass+0x31a>
      goto nullreturn;
 800df24:	bf00      	nop
 800df26:	e00e      	b.n	800df46 <ip4_reass+0x31a>
 800df28:	20000214 	.word	0x20000214
 800df2c:	20000210 	.word	0x20000210
 800df30:	08011ccc 	.word	0x08011ccc
 800df34:	08011e3c 	.word	0x08011e3c
 800df38:	08011d14 	.word	0x08011d14
 800df3c:	08011e58 	.word	0x08011e58
 800df40:	08011e64 	.word	0x08011e64
  }

nullreturn:
 800df44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7f7 f936 	bl	80051b8 <pbuf_free>
  return NULL;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3738      	adds	r7, #56	; 0x38
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop

0800df58 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800df5c:	2005      	movs	r0, #5
 800df5e:	f7f6 facd 	bl	80044fc <memp_malloc>
 800df62:	4603      	mov	r3, r0
}
 800df64:	4618      	mov	r0, r3
 800df66:	bd80      	pop	{r7, pc}

0800df68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <ip_frag_free_pbuf_custom_ref+0x1c>
 800df76:	4b07      	ldr	r3, [pc, #28]	; (800df94 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800df78:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800df7c:	4906      	ldr	r1, [pc, #24]	; (800df98 <ip_frag_free_pbuf_custom_ref+0x30>)
 800df7e:	4807      	ldr	r0, [pc, #28]	; (800df9c <ip_frag_free_pbuf_custom_ref+0x34>)
 800df80:	f000 faa6 	bl	800e4d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800df84:	6879      	ldr	r1, [r7, #4]
 800df86:	2005      	movs	r0, #5
 800df88:	f7f6 fb04 	bl	8004594 <memp_free>
}
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	08011ccc 	.word	0x08011ccc
 800df98:	08011e84 	.word	0x08011e84
 800df9c:	08011d14 	.word	0x08011d14

0800dfa0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <ipfrag_free_pbuf_custom+0x20>
 800dfb2:	4b11      	ldr	r3, [pc, #68]	; (800dff8 <ipfrag_free_pbuf_custom+0x58>)
 800dfb4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dfb8:	4910      	ldr	r1, [pc, #64]	; (800dffc <ipfrag_free_pbuf_custom+0x5c>)
 800dfba:	4811      	ldr	r0, [pc, #68]	; (800e000 <ipfrag_free_pbuf_custom+0x60>)
 800dfbc:	f000 fa88 	bl	800e4d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d006      	beq.n	800dfd6 <ipfrag_free_pbuf_custom+0x36>
 800dfc8:	4b0b      	ldr	r3, [pc, #44]	; (800dff8 <ipfrag_free_pbuf_custom+0x58>)
 800dfca:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dfce:	490d      	ldr	r1, [pc, #52]	; (800e004 <ipfrag_free_pbuf_custom+0x64>)
 800dfd0:	480b      	ldr	r0, [pc, #44]	; (800e000 <ipfrag_free_pbuf_custom+0x60>)
 800dfd2:	f000 fa7d 	bl	800e4d0 <iprintf>
  if (pcr->original != NULL) {
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d004      	beq.n	800dfe8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7f7 f8e8 	bl	80051b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7ff ffbd 	bl	800df68 <ip_frag_free_pbuf_custom_ref>
}
 800dfee:	bf00      	nop
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	08011ccc 	.word	0x08011ccc
 800dffc:	08011e90 	.word	0x08011e90
 800e000:	08011d14 	.word	0x08011d14
 800e004:	08011e9c 	.word	0x08011e9c

0800e008 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b094      	sub	sp, #80	; 0x50
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e01e:	3b14      	subs	r3, #20
 800e020:	2b00      	cmp	r3, #0
 800e022:	da00      	bge.n	800e026 <ip4_frag+0x1e>
 800e024:	3307      	adds	r3, #7
 800e026:	10db      	asrs	r3, r3, #3
 800e028:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e02a:	2314      	movs	r3, #20
 800e02c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 030f 	and.w	r3, r3, #15
 800e040:	b2db      	uxtb	r3, r3
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b14      	cmp	r3, #20
 800e048:	d002      	beq.n	800e050 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e04a:	f06f 0305 	mvn.w	r3, #5
 800e04e:	e110      	b.n	800e272 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	895b      	ldrh	r3, [r3, #10]
 800e054:	2b13      	cmp	r3, #19
 800e056:	d809      	bhi.n	800e06c <ip4_frag+0x64>
 800e058:	4b88      	ldr	r3, [pc, #544]	; (800e27c <ip4_frag+0x274>)
 800e05a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e05e:	4988      	ldr	r1, [pc, #544]	; (800e280 <ip4_frag+0x278>)
 800e060:	4888      	ldr	r0, [pc, #544]	; (800e284 <ip4_frag+0x27c>)
 800e062:	f000 fa35 	bl	800e4d0 <iprintf>
 800e066:	f06f 0305 	mvn.w	r3, #5
 800e06a:	e102      	b.n	800e272 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	88db      	ldrh	r3, [r3, #6]
 800e070:	b29b      	uxth	r3, r3
 800e072:	4618      	mov	r0, r3
 800e074:	f7f5 fdec 	bl	8003c50 <lwip_htons>
 800e078:	4603      	mov	r3, r0
 800e07a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e07c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e07e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e08c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	891b      	ldrh	r3, [r3, #8]
 800e092:	3b14      	subs	r3, #20
 800e094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e098:	e0e1      	b.n	800e25e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e09a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	bf28      	it	cs
 800e0a8:	4613      	movcs	r3, r2
 800e0aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e0ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0b0:	2114      	movs	r1, #20
 800e0b2:	200e      	movs	r0, #14
 800e0b4:	f7f6 fd9c 	bl	8004bf0 <pbuf_alloc>
 800e0b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 80d5 	beq.w	800e26c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	895b      	ldrh	r3, [r3, #10]
 800e0c6:	2b13      	cmp	r3, #19
 800e0c8:	d806      	bhi.n	800e0d8 <ip4_frag+0xd0>
 800e0ca:	4b6c      	ldr	r3, [pc, #432]	; (800e27c <ip4_frag+0x274>)
 800e0cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e0d0:	496d      	ldr	r1, [pc, #436]	; (800e288 <ip4_frag+0x280>)
 800e0d2:	486c      	ldr	r0, [pc, #432]	; (800e284 <ip4_frag+0x27c>)
 800e0d4:	f000 f9fc 	bl	800e4d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	2214      	movs	r2, #20
 800e0de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 f9df 	bl	800e4a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e0ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e0f2:	e064      	b.n	800e1be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	895a      	ldrh	r2, [r3, #10]
 800e0f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0fa:	1ad3      	subs	r3, r2, r3
 800e0fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	895b      	ldrh	r3, [r3, #10]
 800e102:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e104:	429a      	cmp	r2, r3
 800e106:	d906      	bls.n	800e116 <ip4_frag+0x10e>
 800e108:	4b5c      	ldr	r3, [pc, #368]	; (800e27c <ip4_frag+0x274>)
 800e10a:	f240 322d 	movw	r2, #813	; 0x32d
 800e10e:	495f      	ldr	r1, [pc, #380]	; (800e28c <ip4_frag+0x284>)
 800e110:	485c      	ldr	r0, [pc, #368]	; (800e284 <ip4_frag+0x27c>)
 800e112:	f000 f9dd 	bl	800e4d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e116:	8bfa      	ldrh	r2, [r7, #30]
 800e118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e11c:	4293      	cmp	r3, r2
 800e11e:	bf28      	it	cs
 800e120:	4613      	movcs	r3, r2
 800e122:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d105      	bne.n	800e13a <ip4_frag+0x132>
        poff = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	60fb      	str	r3, [r7, #12]
        continue;
 800e138:	e041      	b.n	800e1be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e13a:	f7ff ff0d 	bl	800df58 <ip_frag_alloc_pbuf_custom_ref>
 800e13e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d103      	bne.n	800e14e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e148:	f7f7 f836 	bl	80051b8 <pbuf_free>
        goto memerr;
 800e14c:	e08f      	b.n	800e26e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e14e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e154:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e156:	4413      	add	r3, r2
 800e158:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e15c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e160:	9201      	str	r2, [sp, #4]
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4603      	mov	r3, r0
 800e166:	2241      	movs	r2, #65	; 0x41
 800e168:	2000      	movs	r0, #0
 800e16a:	f7f6 fe6b 	bl	8004e44 <pbuf_alloced_custom>
 800e16e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d106      	bne.n	800e184 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e176:	69b8      	ldr	r0, [r7, #24]
 800e178:	f7ff fef6 	bl	800df68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e17c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e17e:	f7f7 f81b 	bl	80051b8 <pbuf_free>
        goto memerr;
 800e182:	e074      	b.n	800e26e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7f7 f8b7 	bl	80052f8 <pbuf_ref>
      pcr->original = p;
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	4a3f      	ldr	r2, [pc, #252]	; (800e290 <ip4_frag+0x288>)
 800e194:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e196:	6979      	ldr	r1, [r7, #20]
 800e198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e19a:	f7f7 f8cf 	bl	800533c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e19e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e1a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e1ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d004      	beq.n	800e1be <ip4_frag+0x1b6>
        poff = 0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e1be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d196      	bne.n	800e0f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e1c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e1c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1cc:	4413      	add	r3, r2
 800e1ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1d4:	f1a3 0213 	sub.w	r2, r3, #19
 800e1d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	bfcc      	ite	gt
 800e1e0:	2301      	movgt	r3, #1
 800e1e2:	2300      	movle	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e1e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <ip4_frag+0x1f6>
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d003      	beq.n	800e206 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e1fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e204:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e206:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f5 fd21 	bl	8003c50 <lwip_htons>
 800e20e:	4603      	mov	r3, r0
 800e210:	461a      	mov	r2, r3
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e218:	3314      	adds	r3, #20
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f5 fd17 	bl	8003c50 <lwip_htons>
 800e222:	4603      	mov	r3, r0
 800e224:	461a      	mov	r2, r3
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	2200      	movs	r2, #0
 800e22e:	729a      	strb	r2, [r3, #10]
 800e230:	2200      	movs	r2, #0
 800e232:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e23c:	68b8      	ldr	r0, [r7, #8]
 800e23e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e242:	f7f6 ffb9 	bl	80051b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e24a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e252:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e258:	4413      	add	r3, r2
 800e25a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e25e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e262:	2b00      	cmp	r3, #0
 800e264:	f47f af19 	bne.w	800e09a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	e002      	b.n	800e272 <ip4_frag+0x26a>
      goto memerr;
 800e26c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e26e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e272:	4618      	mov	r0, r3
 800e274:	3748      	adds	r7, #72	; 0x48
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	08011ccc 	.word	0x08011ccc
 800e280:	08011ea8 	.word	0x08011ea8
 800e284:	08011d14 	.word	0x08011d14
 800e288:	08011ec4 	.word	0x08011ec4
 800e28c:	08011ee4 	.word	0x08011ee4
 800e290:	0800dfa1 	.word	0x0800dfa1

0800e294 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e29e:	230e      	movs	r3, #14
 800e2a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	895b      	ldrh	r3, [r3, #10]
 800e2a6:	2b0e      	cmp	r3, #14
 800e2a8:	d96e      	bls.n	800e388 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7bdb      	ldrb	r3, [r3, #15]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d106      	bne.n	800e2c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	7b1a      	ldrb	r2, [r3, #12]
 800e2ca:	7b5b      	ldrb	r3, [r3, #13]
 800e2cc:	021b      	lsls	r3, r3, #8
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	f003 0301 	and.w	r3, r3, #1
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d023      	beq.n	800e326 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d10f      	bne.n	800e306 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d11b      	bne.n	800e326 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e2f2:	2b5e      	cmp	r3, #94	; 0x5e
 800e2f4:	d117      	bne.n	800e326 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	7b5b      	ldrb	r3, [r3, #13]
 800e2fa:	f043 0310 	orr.w	r3, r3, #16
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	735a      	strb	r2, [r3, #13]
 800e304:	e00f      	b.n	800e326 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	2206      	movs	r2, #6
 800e30a:	4928      	ldr	r1, [pc, #160]	; (800e3ac <ethernet_input+0x118>)
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 f8bb 	bl	800e488 <memcmp>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7b5b      	ldrb	r3, [r3, #13]
 800e31c:	f043 0308 	orr.w	r3, r3, #8
 800e320:	b2da      	uxtb	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	2b08      	cmp	r3, #8
 800e32a:	d003      	beq.n	800e334 <ethernet_input+0xa0>
 800e32c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e330:	d014      	beq.n	800e35c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e332:	e032      	b.n	800e39a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e33a:	f003 0308 	and.w	r3, r3, #8
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d024      	beq.n	800e38c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e342:	8afb      	ldrh	r3, [r7, #22]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7f6 feb0 	bl	80050ac <pbuf_remove_header>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d11e      	bne.n	800e390 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7fe fe95 	bl	800d084 <ip4_input>
      break;
 800e35a:	e013      	b.n	800e384 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e362:	f003 0308 	and.w	r3, r3, #8
 800e366:	2b00      	cmp	r3, #0
 800e368:	d014      	beq.n	800e394 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e36a:	8afb      	ldrh	r3, [r7, #22]
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7f6 fe9c 	bl	80050ac <pbuf_remove_header>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10e      	bne.n	800e398 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7fe f835 	bl	800c3ec <etharp_input>
      break;
 800e382:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	e00c      	b.n	800e3a2 <ethernet_input+0x10e>
    goto free_and_return;
 800e388:	bf00      	nop
 800e38a:	e006      	b.n	800e39a <ethernet_input+0x106>
        goto free_and_return;
 800e38c:	bf00      	nop
 800e38e:	e004      	b.n	800e39a <ethernet_input+0x106>
        goto free_and_return;
 800e390:	bf00      	nop
 800e392:	e002      	b.n	800e39a <ethernet_input+0x106>
        goto free_and_return;
 800e394:	bf00      	nop
 800e396:	e000      	b.n	800e39a <ethernet_input+0x106>
        goto free_and_return;
 800e398:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7f6 ff0c 	bl	80051b8 <pbuf_free>
  return ERR_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	0801206c 	.word	0x0801206c

0800e3b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3be:	8c3b      	ldrh	r3, [r7, #32]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7f5 fc45 	bl	8003c50 <lwip_htons>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3ca:	210e      	movs	r1, #14
 800e3cc:	68b8      	ldr	r0, [r7, #8]
 800e3ce:	f7f6 fe5d 	bl	800508c <pbuf_add_header>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d125      	bne.n	800e424 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	8afa      	ldrh	r2, [r7, #22]
 800e3e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2206      	movs	r2, #6
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 f85a 	bl	800e4a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	3306      	adds	r3, #6
 800e3f4:	2206      	movs	r2, #6
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 f853 	bl	800e4a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e404:	2b06      	cmp	r3, #6
 800e406:	d006      	beq.n	800e416 <ethernet_output+0x66>
 800e408:	4b0a      	ldr	r3, [pc, #40]	; (800e434 <ethernet_output+0x84>)
 800e40a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e40e:	490a      	ldr	r1, [pc, #40]	; (800e438 <ethernet_output+0x88>)
 800e410:	480a      	ldr	r0, [pc, #40]	; (800e43c <ethernet_output+0x8c>)
 800e412:	f000 f85d 	bl	800e4d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	68b9      	ldr	r1, [r7, #8]
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	4798      	blx	r3
 800e420:	4603      	mov	r3, r0
 800e422:	e002      	b.n	800e42a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e424:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e426:	f06f 0301 	mvn.w	r3, #1
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	08011ef4 	.word	0x08011ef4
 800e438:	08011f2c 	.word	0x08011f2c
 800e43c:	08011f60 	.word	0x08011f60

0800e440 <__libc_init_array>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	4d0d      	ldr	r5, [pc, #52]	; (800e478 <__libc_init_array+0x38>)
 800e444:	4c0d      	ldr	r4, [pc, #52]	; (800e47c <__libc_init_array+0x3c>)
 800e446:	1b64      	subs	r4, r4, r5
 800e448:	10a4      	asrs	r4, r4, #2
 800e44a:	2600      	movs	r6, #0
 800e44c:	42a6      	cmp	r6, r4
 800e44e:	d109      	bne.n	800e464 <__libc_init_array+0x24>
 800e450:	4d0b      	ldr	r5, [pc, #44]	; (800e480 <__libc_init_array+0x40>)
 800e452:	4c0c      	ldr	r4, [pc, #48]	; (800e484 <__libc_init_array+0x44>)
 800e454:	f001 f86a 	bl	800f52c <_init>
 800e458:	1b64      	subs	r4, r4, r5
 800e45a:	10a4      	asrs	r4, r4, #2
 800e45c:	2600      	movs	r6, #0
 800e45e:	42a6      	cmp	r6, r4
 800e460:	d105      	bne.n	800e46e <__libc_init_array+0x2e>
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	f855 3b04 	ldr.w	r3, [r5], #4
 800e468:	4798      	blx	r3
 800e46a:	3601      	adds	r6, #1
 800e46c:	e7ee      	b.n	800e44c <__libc_init_array+0xc>
 800e46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e472:	4798      	blx	r3
 800e474:	3601      	adds	r6, #1
 800e476:	e7f2      	b.n	800e45e <__libc_init_array+0x1e>
 800e478:	080121d0 	.word	0x080121d0
 800e47c:	080121d0 	.word	0x080121d0
 800e480:	080121d0 	.word	0x080121d0
 800e484:	080121d4 	.word	0x080121d4

0800e488 <memcmp>:
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	3901      	subs	r1, #1
 800e48c:	2400      	movs	r4, #0
 800e48e:	42a2      	cmp	r2, r4
 800e490:	d101      	bne.n	800e496 <memcmp+0xe>
 800e492:	2000      	movs	r0, #0
 800e494:	e005      	b.n	800e4a2 <memcmp+0x1a>
 800e496:	5d03      	ldrb	r3, [r0, r4]
 800e498:	3401      	adds	r4, #1
 800e49a:	5d0d      	ldrb	r5, [r1, r4]
 800e49c:	42ab      	cmp	r3, r5
 800e49e:	d0f6      	beq.n	800e48e <memcmp+0x6>
 800e4a0:	1b58      	subs	r0, r3, r5
 800e4a2:	bd30      	pop	{r4, r5, pc}

0800e4a4 <memcpy>:
 800e4a4:	440a      	add	r2, r1
 800e4a6:	4291      	cmp	r1, r2
 800e4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4ac:	d100      	bne.n	800e4b0 <memcpy+0xc>
 800e4ae:	4770      	bx	lr
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ba:	4291      	cmp	r1, r2
 800e4bc:	d1f9      	bne.n	800e4b2 <memcpy+0xe>
 800e4be:	bd10      	pop	{r4, pc}

0800e4c0 <memset>:
 800e4c0:	4402      	add	r2, r0
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d100      	bne.n	800e4ca <memset+0xa>
 800e4c8:	4770      	bx	lr
 800e4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e4ce:	e7f9      	b.n	800e4c4 <memset+0x4>

0800e4d0 <iprintf>:
 800e4d0:	b40f      	push	{r0, r1, r2, r3}
 800e4d2:	4b0a      	ldr	r3, [pc, #40]	; (800e4fc <iprintf+0x2c>)
 800e4d4:	b513      	push	{r0, r1, r4, lr}
 800e4d6:	681c      	ldr	r4, [r3, #0]
 800e4d8:	b124      	cbz	r4, 800e4e4 <iprintf+0x14>
 800e4da:	69a3      	ldr	r3, [r4, #24]
 800e4dc:	b913      	cbnz	r3, 800e4e4 <iprintf+0x14>
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f000 f8d8 	bl	800e694 <__sinit>
 800e4e4:	ab05      	add	r3, sp, #20
 800e4e6:	9a04      	ldr	r2, [sp, #16]
 800e4e8:	68a1      	ldr	r1, [r4, #8]
 800e4ea:	9301      	str	r3, [sp, #4]
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 fa5f 	bl	800e9b0 <_vfiprintf_r>
 800e4f2:	b002      	add	sp, #8
 800e4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f8:	b004      	add	sp, #16
 800e4fa:	4770      	bx	lr
 800e4fc:	20000014 	.word	0x20000014

0800e500 <rand>:
 800e500:	4b17      	ldr	r3, [pc, #92]	; (800e560 <rand+0x60>)
 800e502:	b510      	push	{r4, lr}
 800e504:	681c      	ldr	r4, [r3, #0]
 800e506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e508:	b9b3      	cbnz	r3, 800e538 <rand+0x38>
 800e50a:	2018      	movs	r0, #24
 800e50c:	f000 f974 	bl	800e7f8 <malloc>
 800e510:	63a0      	str	r0, [r4, #56]	; 0x38
 800e512:	b928      	cbnz	r0, 800e520 <rand+0x20>
 800e514:	4602      	mov	r2, r0
 800e516:	4b13      	ldr	r3, [pc, #76]	; (800e564 <rand+0x64>)
 800e518:	4813      	ldr	r0, [pc, #76]	; (800e568 <rand+0x68>)
 800e51a:	214e      	movs	r1, #78	; 0x4e
 800e51c:	f000 f844 	bl	800e5a8 <__assert_func>
 800e520:	4a12      	ldr	r2, [pc, #72]	; (800e56c <rand+0x6c>)
 800e522:	4b13      	ldr	r3, [pc, #76]	; (800e570 <rand+0x70>)
 800e524:	e9c0 2300 	strd	r2, r3, [r0]
 800e528:	4b12      	ldr	r3, [pc, #72]	; (800e574 <rand+0x74>)
 800e52a:	6083      	str	r3, [r0, #8]
 800e52c:	230b      	movs	r3, #11
 800e52e:	8183      	strh	r3, [r0, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	2300      	movs	r3, #0
 800e534:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e538:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e53a:	480f      	ldr	r0, [pc, #60]	; (800e578 <rand+0x78>)
 800e53c:	690a      	ldr	r2, [r1, #16]
 800e53e:	694b      	ldr	r3, [r1, #20]
 800e540:	4c0e      	ldr	r4, [pc, #56]	; (800e57c <rand+0x7c>)
 800e542:	4350      	muls	r0, r2
 800e544:	fb04 0003 	mla	r0, r4, r3, r0
 800e548:	fba2 3404 	umull	r3, r4, r2, r4
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	4404      	add	r4, r0
 800e550:	f144 0000 	adc.w	r0, r4, #0
 800e554:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e558:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e55c:	bd10      	pop	{r4, pc}
 800e55e:	bf00      	nop
 800e560:	20000014 	.word	0x20000014
 800e564:	08012080 	.word	0x08012080
 800e568:	08012097 	.word	0x08012097
 800e56c:	abcd330e 	.word	0xabcd330e
 800e570:	e66d1234 	.word	0xe66d1234
 800e574:	0005deec 	.word	0x0005deec
 800e578:	5851f42d 	.word	0x5851f42d
 800e57c:	4c957f2d 	.word	0x4c957f2d

0800e580 <strncpy>:
 800e580:	b510      	push	{r4, lr}
 800e582:	3901      	subs	r1, #1
 800e584:	4603      	mov	r3, r0
 800e586:	b132      	cbz	r2, 800e596 <strncpy+0x16>
 800e588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e58c:	f803 4b01 	strb.w	r4, [r3], #1
 800e590:	3a01      	subs	r2, #1
 800e592:	2c00      	cmp	r4, #0
 800e594:	d1f7      	bne.n	800e586 <strncpy+0x6>
 800e596:	441a      	add	r2, r3
 800e598:	2100      	movs	r1, #0
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d100      	bne.n	800e5a0 <strncpy+0x20>
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a4:	e7f9      	b.n	800e59a <strncpy+0x1a>
	...

0800e5a8 <__assert_func>:
 800e5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5aa:	4614      	mov	r4, r2
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <__assert_func+0x2c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	68d8      	ldr	r0, [r3, #12]
 800e5b6:	b14c      	cbz	r4, 800e5cc <__assert_func+0x24>
 800e5b8:	4b07      	ldr	r3, [pc, #28]	; (800e5d8 <__assert_func+0x30>)
 800e5ba:	9100      	str	r1, [sp, #0]
 800e5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5c0:	4906      	ldr	r1, [pc, #24]	; (800e5dc <__assert_func+0x34>)
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	f000 f8e4 	bl	800e790 <fiprintf>
 800e5c8:	f000 fddc 	bl	800f184 <abort>
 800e5cc:	4b04      	ldr	r3, [pc, #16]	; (800e5e0 <__assert_func+0x38>)
 800e5ce:	461c      	mov	r4, r3
 800e5d0:	e7f3      	b.n	800e5ba <__assert_func+0x12>
 800e5d2:	bf00      	nop
 800e5d4:	20000014 	.word	0x20000014
 800e5d8:	080120f6 	.word	0x080120f6
 800e5dc:	08012103 	.word	0x08012103
 800e5e0:	08012131 	.word	0x08012131

0800e5e4 <std>:
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	b510      	push	{r4, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5f2:	6083      	str	r3, [r0, #8]
 800e5f4:	8181      	strh	r1, [r0, #12]
 800e5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5f8:	81c2      	strh	r2, [r0, #14]
 800e5fa:	6183      	str	r3, [r0, #24]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	2208      	movs	r2, #8
 800e600:	305c      	adds	r0, #92	; 0x5c
 800e602:	f7ff ff5d 	bl	800e4c0 <memset>
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <std+0x38>)
 800e608:	6263      	str	r3, [r4, #36]	; 0x24
 800e60a:	4b05      	ldr	r3, [pc, #20]	; (800e620 <std+0x3c>)
 800e60c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e60e:	4b05      	ldr	r3, [pc, #20]	; (800e624 <std+0x40>)
 800e610:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e612:	4b05      	ldr	r3, [pc, #20]	; (800e628 <std+0x44>)
 800e614:	6224      	str	r4, [r4, #32]
 800e616:	6323      	str	r3, [r4, #48]	; 0x30
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	bf00      	nop
 800e61c:	0800ef59 	.word	0x0800ef59
 800e620:	0800ef7b 	.word	0x0800ef7b
 800e624:	0800efb3 	.word	0x0800efb3
 800e628:	0800efd7 	.word	0x0800efd7

0800e62c <_cleanup_r>:
 800e62c:	4901      	ldr	r1, [pc, #4]	; (800e634 <_cleanup_r+0x8>)
 800e62e:	f000 b8c1 	b.w	800e7b4 <_fwalk_reent>
 800e632:	bf00      	nop
 800e634:	0800f2c1 	.word	0x0800f2c1

0800e638 <__sfmoreglue>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	1e4a      	subs	r2, r1, #1
 800e63c:	2568      	movs	r5, #104	; 0x68
 800e63e:	4355      	muls	r5, r2
 800e640:	460e      	mov	r6, r1
 800e642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e646:	f000 f92f 	bl	800e8a8 <_malloc_r>
 800e64a:	4604      	mov	r4, r0
 800e64c:	b140      	cbz	r0, 800e660 <__sfmoreglue+0x28>
 800e64e:	2100      	movs	r1, #0
 800e650:	e9c0 1600 	strd	r1, r6, [r0]
 800e654:	300c      	adds	r0, #12
 800e656:	60a0      	str	r0, [r4, #8]
 800e658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e65c:	f7ff ff30 	bl	800e4c0 <memset>
 800e660:	4620      	mov	r0, r4
 800e662:	bd70      	pop	{r4, r5, r6, pc}

0800e664 <__sfp_lock_acquire>:
 800e664:	4801      	ldr	r0, [pc, #4]	; (800e66c <__sfp_lock_acquire+0x8>)
 800e666:	f000 b8c5 	b.w	800e7f4 <__retarget_lock_acquire_recursive>
 800e66a:	bf00      	nop
 800e66c:	20008a84 	.word	0x20008a84

0800e670 <__sfp_lock_release>:
 800e670:	4801      	ldr	r0, [pc, #4]	; (800e678 <__sfp_lock_release+0x8>)
 800e672:	f000 b8c0 	b.w	800e7f6 <__retarget_lock_release_recursive>
 800e676:	bf00      	nop
 800e678:	20008a84 	.word	0x20008a84

0800e67c <__sinit_lock_acquire>:
 800e67c:	4801      	ldr	r0, [pc, #4]	; (800e684 <__sinit_lock_acquire+0x8>)
 800e67e:	f000 b8b9 	b.w	800e7f4 <__retarget_lock_acquire_recursive>
 800e682:	bf00      	nop
 800e684:	20008a7f 	.word	0x20008a7f

0800e688 <__sinit_lock_release>:
 800e688:	4801      	ldr	r0, [pc, #4]	; (800e690 <__sinit_lock_release+0x8>)
 800e68a:	f000 b8b4 	b.w	800e7f6 <__retarget_lock_release_recursive>
 800e68e:	bf00      	nop
 800e690:	20008a7f 	.word	0x20008a7f

0800e694 <__sinit>:
 800e694:	b510      	push	{r4, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	f7ff fff0 	bl	800e67c <__sinit_lock_acquire>
 800e69c:	69a3      	ldr	r3, [r4, #24]
 800e69e:	b11b      	cbz	r3, 800e6a8 <__sinit+0x14>
 800e6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6a4:	f7ff bff0 	b.w	800e688 <__sinit_lock_release>
 800e6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <__sinit+0x68>)
 800e6b0:	4a13      	ldr	r2, [pc, #76]	; (800e700 <__sinit+0x6c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	bf04      	itt	eq
 800e6ba:	2301      	moveq	r3, #1
 800e6bc:	61a3      	streq	r3, [r4, #24]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 f820 	bl	800e704 <__sfp>
 800e6c4:	6060      	str	r0, [r4, #4]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 f81c 	bl	800e704 <__sfp>
 800e6cc:	60a0      	str	r0, [r4, #8]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 f818 	bl	800e704 <__sfp>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	60e0      	str	r0, [r4, #12]
 800e6d8:	2104      	movs	r1, #4
 800e6da:	6860      	ldr	r0, [r4, #4]
 800e6dc:	f7ff ff82 	bl	800e5e4 <std>
 800e6e0:	68a0      	ldr	r0, [r4, #8]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	2109      	movs	r1, #9
 800e6e6:	f7ff ff7d 	bl	800e5e4 <std>
 800e6ea:	68e0      	ldr	r0, [r4, #12]
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	2112      	movs	r1, #18
 800e6f0:	f7ff ff78 	bl	800e5e4 <std>
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	61a3      	str	r3, [r4, #24]
 800e6f8:	e7d2      	b.n	800e6a0 <__sinit+0xc>
 800e6fa:	bf00      	nop
 800e6fc:	0801207c 	.word	0x0801207c
 800e700:	0800e62d 	.word	0x0800e62d

0800e704 <__sfp>:
 800e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e706:	4607      	mov	r7, r0
 800e708:	f7ff ffac 	bl	800e664 <__sfp_lock_acquire>
 800e70c:	4b1e      	ldr	r3, [pc, #120]	; (800e788 <__sfp+0x84>)
 800e70e:	681e      	ldr	r6, [r3, #0]
 800e710:	69b3      	ldr	r3, [r6, #24]
 800e712:	b913      	cbnz	r3, 800e71a <__sfp+0x16>
 800e714:	4630      	mov	r0, r6
 800e716:	f7ff ffbd 	bl	800e694 <__sinit>
 800e71a:	3648      	adds	r6, #72	; 0x48
 800e71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e720:	3b01      	subs	r3, #1
 800e722:	d503      	bpl.n	800e72c <__sfp+0x28>
 800e724:	6833      	ldr	r3, [r6, #0]
 800e726:	b30b      	cbz	r3, 800e76c <__sfp+0x68>
 800e728:	6836      	ldr	r6, [r6, #0]
 800e72a:	e7f7      	b.n	800e71c <__sfp+0x18>
 800e72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e730:	b9d5      	cbnz	r5, 800e768 <__sfp+0x64>
 800e732:	4b16      	ldr	r3, [pc, #88]	; (800e78c <__sfp+0x88>)
 800e734:	60e3      	str	r3, [r4, #12]
 800e736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e73a:	6665      	str	r5, [r4, #100]	; 0x64
 800e73c:	f000 f859 	bl	800e7f2 <__retarget_lock_init_recursive>
 800e740:	f7ff ff96 	bl	800e670 <__sfp_lock_release>
 800e744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e74c:	6025      	str	r5, [r4, #0]
 800e74e:	61a5      	str	r5, [r4, #24]
 800e750:	2208      	movs	r2, #8
 800e752:	4629      	mov	r1, r5
 800e754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e758:	f7ff feb2 	bl	800e4c0 <memset>
 800e75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e764:	4620      	mov	r0, r4
 800e766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e768:	3468      	adds	r4, #104	; 0x68
 800e76a:	e7d9      	b.n	800e720 <__sfp+0x1c>
 800e76c:	2104      	movs	r1, #4
 800e76e:	4638      	mov	r0, r7
 800e770:	f7ff ff62 	bl	800e638 <__sfmoreglue>
 800e774:	4604      	mov	r4, r0
 800e776:	6030      	str	r0, [r6, #0]
 800e778:	2800      	cmp	r0, #0
 800e77a:	d1d5      	bne.n	800e728 <__sfp+0x24>
 800e77c:	f7ff ff78 	bl	800e670 <__sfp_lock_release>
 800e780:	230c      	movs	r3, #12
 800e782:	603b      	str	r3, [r7, #0]
 800e784:	e7ee      	b.n	800e764 <__sfp+0x60>
 800e786:	bf00      	nop
 800e788:	0801207c 	.word	0x0801207c
 800e78c:	ffff0001 	.word	0xffff0001

0800e790 <fiprintf>:
 800e790:	b40e      	push	{r1, r2, r3}
 800e792:	b503      	push	{r0, r1, lr}
 800e794:	4601      	mov	r1, r0
 800e796:	ab03      	add	r3, sp, #12
 800e798:	4805      	ldr	r0, [pc, #20]	; (800e7b0 <fiprintf+0x20>)
 800e79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e79e:	6800      	ldr	r0, [r0, #0]
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	f000 f905 	bl	800e9b0 <_vfiprintf_r>
 800e7a6:	b002      	add	sp, #8
 800e7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7ac:	b003      	add	sp, #12
 800e7ae:	4770      	bx	lr
 800e7b0:	20000014 	.word	0x20000014

0800e7b4 <_fwalk_reent>:
 800e7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	4688      	mov	r8, r1
 800e7bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7c0:	2700      	movs	r7, #0
 800e7c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7c6:	f1b9 0901 	subs.w	r9, r9, #1
 800e7ca:	d505      	bpl.n	800e7d8 <_fwalk_reent+0x24>
 800e7cc:	6824      	ldr	r4, [r4, #0]
 800e7ce:	2c00      	cmp	r4, #0
 800e7d0:	d1f7      	bne.n	800e7c2 <_fwalk_reent+0xe>
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7d8:	89ab      	ldrh	r3, [r5, #12]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d907      	bls.n	800e7ee <_fwalk_reent+0x3a>
 800e7de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	d003      	beq.n	800e7ee <_fwalk_reent+0x3a>
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	47c0      	blx	r8
 800e7ec:	4307      	orrs	r7, r0
 800e7ee:	3568      	adds	r5, #104	; 0x68
 800e7f0:	e7e9      	b.n	800e7c6 <_fwalk_reent+0x12>

0800e7f2 <__retarget_lock_init_recursive>:
 800e7f2:	4770      	bx	lr

0800e7f4 <__retarget_lock_acquire_recursive>:
 800e7f4:	4770      	bx	lr

0800e7f6 <__retarget_lock_release_recursive>:
 800e7f6:	4770      	bx	lr

0800e7f8 <malloc>:
 800e7f8:	4b02      	ldr	r3, [pc, #8]	; (800e804 <malloc+0xc>)
 800e7fa:	4601      	mov	r1, r0
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	f000 b853 	b.w	800e8a8 <_malloc_r>
 800e802:	bf00      	nop
 800e804:	20000014 	.word	0x20000014

0800e808 <_free_r>:
 800e808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e80a:	2900      	cmp	r1, #0
 800e80c:	d048      	beq.n	800e8a0 <_free_r+0x98>
 800e80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e812:	9001      	str	r0, [sp, #4]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f1a1 0404 	sub.w	r4, r1, #4
 800e81a:	bfb8      	it	lt
 800e81c:	18e4      	addlt	r4, r4, r3
 800e81e:	f000 fe01 	bl	800f424 <__malloc_lock>
 800e822:	4a20      	ldr	r2, [pc, #128]	; (800e8a4 <_free_r+0x9c>)
 800e824:	9801      	ldr	r0, [sp, #4]
 800e826:	6813      	ldr	r3, [r2, #0]
 800e828:	4615      	mov	r5, r2
 800e82a:	b933      	cbnz	r3, 800e83a <_free_r+0x32>
 800e82c:	6063      	str	r3, [r4, #4]
 800e82e:	6014      	str	r4, [r2, #0]
 800e830:	b003      	add	sp, #12
 800e832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e836:	f000 bdfb 	b.w	800f430 <__malloc_unlock>
 800e83a:	42a3      	cmp	r3, r4
 800e83c:	d90b      	bls.n	800e856 <_free_r+0x4e>
 800e83e:	6821      	ldr	r1, [r4, #0]
 800e840:	1862      	adds	r2, r4, r1
 800e842:	4293      	cmp	r3, r2
 800e844:	bf04      	itt	eq
 800e846:	681a      	ldreq	r2, [r3, #0]
 800e848:	685b      	ldreq	r3, [r3, #4]
 800e84a:	6063      	str	r3, [r4, #4]
 800e84c:	bf04      	itt	eq
 800e84e:	1852      	addeq	r2, r2, r1
 800e850:	6022      	streq	r2, [r4, #0]
 800e852:	602c      	str	r4, [r5, #0]
 800e854:	e7ec      	b.n	800e830 <_free_r+0x28>
 800e856:	461a      	mov	r2, r3
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	b10b      	cbz	r3, 800e860 <_free_r+0x58>
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	d9fa      	bls.n	800e856 <_free_r+0x4e>
 800e860:	6811      	ldr	r1, [r2, #0]
 800e862:	1855      	adds	r5, r2, r1
 800e864:	42a5      	cmp	r5, r4
 800e866:	d10b      	bne.n	800e880 <_free_r+0x78>
 800e868:	6824      	ldr	r4, [r4, #0]
 800e86a:	4421      	add	r1, r4
 800e86c:	1854      	adds	r4, r2, r1
 800e86e:	42a3      	cmp	r3, r4
 800e870:	6011      	str	r1, [r2, #0]
 800e872:	d1dd      	bne.n	800e830 <_free_r+0x28>
 800e874:	681c      	ldr	r4, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	6053      	str	r3, [r2, #4]
 800e87a:	4421      	add	r1, r4
 800e87c:	6011      	str	r1, [r2, #0]
 800e87e:	e7d7      	b.n	800e830 <_free_r+0x28>
 800e880:	d902      	bls.n	800e888 <_free_r+0x80>
 800e882:	230c      	movs	r3, #12
 800e884:	6003      	str	r3, [r0, #0]
 800e886:	e7d3      	b.n	800e830 <_free_r+0x28>
 800e888:	6825      	ldr	r5, [r4, #0]
 800e88a:	1961      	adds	r1, r4, r5
 800e88c:	428b      	cmp	r3, r1
 800e88e:	bf04      	itt	eq
 800e890:	6819      	ldreq	r1, [r3, #0]
 800e892:	685b      	ldreq	r3, [r3, #4]
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	bf04      	itt	eq
 800e898:	1949      	addeq	r1, r1, r5
 800e89a:	6021      	streq	r1, [r4, #0]
 800e89c:	6054      	str	r4, [r2, #4]
 800e89e:	e7c7      	b.n	800e830 <_free_r+0x28>
 800e8a0:	b003      	add	sp, #12
 800e8a2:	bd30      	pop	{r4, r5, pc}
 800e8a4:	20000218 	.word	0x20000218

0800e8a8 <_malloc_r>:
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8aa:	1ccd      	adds	r5, r1, #3
 800e8ac:	f025 0503 	bic.w	r5, r5, #3
 800e8b0:	3508      	adds	r5, #8
 800e8b2:	2d0c      	cmp	r5, #12
 800e8b4:	bf38      	it	cc
 800e8b6:	250c      	movcc	r5, #12
 800e8b8:	2d00      	cmp	r5, #0
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	db01      	blt.n	800e8c2 <_malloc_r+0x1a>
 800e8be:	42a9      	cmp	r1, r5
 800e8c0:	d903      	bls.n	800e8ca <_malloc_r+0x22>
 800e8c2:	230c      	movs	r3, #12
 800e8c4:	6033      	str	r3, [r6, #0]
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ca:	f000 fdab 	bl	800f424 <__malloc_lock>
 800e8ce:	4921      	ldr	r1, [pc, #132]	; (800e954 <_malloc_r+0xac>)
 800e8d0:	680a      	ldr	r2, [r1, #0]
 800e8d2:	4614      	mov	r4, r2
 800e8d4:	b99c      	cbnz	r4, 800e8fe <_malloc_r+0x56>
 800e8d6:	4f20      	ldr	r7, [pc, #128]	; (800e958 <_malloc_r+0xb0>)
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	b923      	cbnz	r3, 800e8e6 <_malloc_r+0x3e>
 800e8dc:	4621      	mov	r1, r4
 800e8de:	4630      	mov	r0, r6
 800e8e0:	f000 fb2a 	bl	800ef38 <_sbrk_r>
 800e8e4:	6038      	str	r0, [r7, #0]
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f000 fb25 	bl	800ef38 <_sbrk_r>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	d123      	bne.n	800e93a <_malloc_r+0x92>
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	6033      	str	r3, [r6, #0]
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f000 fd9a 	bl	800f430 <__malloc_unlock>
 800e8fc:	e7e3      	b.n	800e8c6 <_malloc_r+0x1e>
 800e8fe:	6823      	ldr	r3, [r4, #0]
 800e900:	1b5b      	subs	r3, r3, r5
 800e902:	d417      	bmi.n	800e934 <_malloc_r+0x8c>
 800e904:	2b0b      	cmp	r3, #11
 800e906:	d903      	bls.n	800e910 <_malloc_r+0x68>
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	441c      	add	r4, r3
 800e90c:	6025      	str	r5, [r4, #0]
 800e90e:	e004      	b.n	800e91a <_malloc_r+0x72>
 800e910:	6863      	ldr	r3, [r4, #4]
 800e912:	42a2      	cmp	r2, r4
 800e914:	bf0c      	ite	eq
 800e916:	600b      	streq	r3, [r1, #0]
 800e918:	6053      	strne	r3, [r2, #4]
 800e91a:	4630      	mov	r0, r6
 800e91c:	f000 fd88 	bl	800f430 <__malloc_unlock>
 800e920:	f104 000b 	add.w	r0, r4, #11
 800e924:	1d23      	adds	r3, r4, #4
 800e926:	f020 0007 	bic.w	r0, r0, #7
 800e92a:	1ac2      	subs	r2, r0, r3
 800e92c:	d0cc      	beq.n	800e8c8 <_malloc_r+0x20>
 800e92e:	1a1b      	subs	r3, r3, r0
 800e930:	50a3      	str	r3, [r4, r2]
 800e932:	e7c9      	b.n	800e8c8 <_malloc_r+0x20>
 800e934:	4622      	mov	r2, r4
 800e936:	6864      	ldr	r4, [r4, #4]
 800e938:	e7cc      	b.n	800e8d4 <_malloc_r+0x2c>
 800e93a:	1cc4      	adds	r4, r0, #3
 800e93c:	f024 0403 	bic.w	r4, r4, #3
 800e940:	42a0      	cmp	r0, r4
 800e942:	d0e3      	beq.n	800e90c <_malloc_r+0x64>
 800e944:	1a21      	subs	r1, r4, r0
 800e946:	4630      	mov	r0, r6
 800e948:	f000 faf6 	bl	800ef38 <_sbrk_r>
 800e94c:	3001      	adds	r0, #1
 800e94e:	d1dd      	bne.n	800e90c <_malloc_r+0x64>
 800e950:	e7cf      	b.n	800e8f2 <_malloc_r+0x4a>
 800e952:	bf00      	nop
 800e954:	20000218 	.word	0x20000218
 800e958:	2000021c 	.word	0x2000021c

0800e95c <__sfputc_r>:
 800e95c:	6893      	ldr	r3, [r2, #8]
 800e95e:	3b01      	subs	r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	b410      	push	{r4}
 800e964:	6093      	str	r3, [r2, #8]
 800e966:	da08      	bge.n	800e97a <__sfputc_r+0x1e>
 800e968:	6994      	ldr	r4, [r2, #24]
 800e96a:	42a3      	cmp	r3, r4
 800e96c:	db01      	blt.n	800e972 <__sfputc_r+0x16>
 800e96e:	290a      	cmp	r1, #10
 800e970:	d103      	bne.n	800e97a <__sfputc_r+0x1e>
 800e972:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e976:	f000 bb33 	b.w	800efe0 <__swbuf_r>
 800e97a:	6813      	ldr	r3, [r2, #0]
 800e97c:	1c58      	adds	r0, r3, #1
 800e97e:	6010      	str	r0, [r2, #0]
 800e980:	7019      	strb	r1, [r3, #0]
 800e982:	4608      	mov	r0, r1
 800e984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <__sfputs_r>:
 800e98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	4614      	mov	r4, r2
 800e992:	18d5      	adds	r5, r2, r3
 800e994:	42ac      	cmp	r4, r5
 800e996:	d101      	bne.n	800e99c <__sfputs_r+0x12>
 800e998:	2000      	movs	r0, #0
 800e99a:	e007      	b.n	800e9ac <__sfputs_r+0x22>
 800e99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffda 	bl	800e95c <__sfputc_r>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d1f3      	bne.n	800e994 <__sfputs_r+0xa>
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	b09d      	sub	sp, #116	; 0x74
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6983      	ldr	r3, [r0, #24]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f7ff fe66 	bl	800e694 <__sinit>
 800e9c8:	4b89      	ldr	r3, [pc, #548]	; (800ebf0 <_vfiprintf_r+0x240>)
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	d11b      	bne.n	800ea06 <_vfiprintf_r+0x56>
 800e9ce:	6875      	ldr	r5, [r6, #4]
 800e9d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d2:	07d9      	lsls	r1, r3, #31
 800e9d4:	d405      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9d6:	89ab      	ldrh	r3, [r5, #12]
 800e9d8:	059a      	lsls	r2, r3, #22
 800e9da:	d402      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9de:	f7ff ff09 	bl	800e7f4 <__retarget_lock_acquire_recursive>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	071b      	lsls	r3, r3, #28
 800e9e6:	d501      	bpl.n	800e9ec <_vfiprintf_r+0x3c>
 800e9e8:	692b      	ldr	r3, [r5, #16]
 800e9ea:	b9eb      	cbnz	r3, 800ea28 <_vfiprintf_r+0x78>
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f000 fb5a 	bl	800f0a8 <__swsetup_r>
 800e9f4:	b1c0      	cbz	r0, 800ea28 <_vfiprintf_r+0x78>
 800e9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f8:	07dc      	lsls	r4, r3, #31
 800e9fa:	d50e      	bpl.n	800ea1a <_vfiprintf_r+0x6a>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	b01d      	add	sp, #116	; 0x74
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	4b7b      	ldr	r3, [pc, #492]	; (800ebf4 <_vfiprintf_r+0x244>)
 800ea08:	429d      	cmp	r5, r3
 800ea0a:	d101      	bne.n	800ea10 <_vfiprintf_r+0x60>
 800ea0c:	68b5      	ldr	r5, [r6, #8]
 800ea0e:	e7df      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea10:	4b79      	ldr	r3, [pc, #484]	; (800ebf8 <_vfiprintf_r+0x248>)
 800ea12:	429d      	cmp	r5, r3
 800ea14:	bf08      	it	eq
 800ea16:	68f5      	ldreq	r5, [r6, #12]
 800ea18:	e7da      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	0598      	lsls	r0, r3, #22
 800ea1e:	d4ed      	bmi.n	800e9fc <_vfiprintf_r+0x4c>
 800ea20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea22:	f7ff fee8 	bl	800e7f6 <__retarget_lock_release_recursive>
 800ea26:	e7e9      	b.n	800e9fc <_vfiprintf_r+0x4c>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea36:	2330      	movs	r3, #48	; 0x30
 800ea38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebfc <_vfiprintf_r+0x24c>
 800ea3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea40:	f04f 0901 	mov.w	r9, #1
 800ea44:	4623      	mov	r3, r4
 800ea46:	469a      	mov	sl, r3
 800ea48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea4c:	b10a      	cbz	r2, 800ea52 <_vfiprintf_r+0xa2>
 800ea4e:	2a25      	cmp	r2, #37	; 0x25
 800ea50:	d1f9      	bne.n	800ea46 <_vfiprintf_r+0x96>
 800ea52:	ebba 0b04 	subs.w	fp, sl, r4
 800ea56:	d00b      	beq.n	800ea70 <_vfiprintf_r+0xc0>
 800ea58:	465b      	mov	r3, fp
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ff93 	bl	800e98a <__sfputs_r>
 800ea64:	3001      	adds	r0, #1
 800ea66:	f000 80aa 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea6c:	445a      	add	r2, fp
 800ea6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80a2 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	9304      	str	r3, [sp, #16]
 800ea8a:	9307      	str	r3, [sp, #28]
 800ea8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea90:	931a      	str	r3, [sp, #104]	; 0x68
 800ea92:	4654      	mov	r4, sl
 800ea94:	2205      	movs	r2, #5
 800ea96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9a:	4858      	ldr	r0, [pc, #352]	; (800ebfc <_vfiprintf_r+0x24c>)
 800ea9c:	f7f1 fbc0 	bl	8000220 <memchr>
 800eaa0:	9a04      	ldr	r2, [sp, #16]
 800eaa2:	b9d8      	cbnz	r0, 800eadc <_vfiprintf_r+0x12c>
 800eaa4:	06d1      	lsls	r1, r2, #27
 800eaa6:	bf44      	itt	mi
 800eaa8:	2320      	movmi	r3, #32
 800eaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaae:	0713      	lsls	r3, r2, #28
 800eab0:	bf44      	itt	mi
 800eab2:	232b      	movmi	r3, #43	; 0x2b
 800eab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab8:	f89a 3000 	ldrb.w	r3, [sl]
 800eabc:	2b2a      	cmp	r3, #42	; 0x2a
 800eabe:	d015      	beq.n	800eaec <_vfiprintf_r+0x13c>
 800eac0:	9a07      	ldr	r2, [sp, #28]
 800eac2:	4654      	mov	r4, sl
 800eac4:	2000      	movs	r0, #0
 800eac6:	f04f 0c0a 	mov.w	ip, #10
 800eaca:	4621      	mov	r1, r4
 800eacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead0:	3b30      	subs	r3, #48	; 0x30
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d94e      	bls.n	800eb74 <_vfiprintf_r+0x1c4>
 800ead6:	b1b0      	cbz	r0, 800eb06 <_vfiprintf_r+0x156>
 800ead8:	9207      	str	r2, [sp, #28]
 800eada:	e014      	b.n	800eb06 <_vfiprintf_r+0x156>
 800eadc:	eba0 0308 	sub.w	r3, r0, r8
 800eae0:	fa09 f303 	lsl.w	r3, r9, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	46a2      	mov	sl, r4
 800eaea:	e7d2      	b.n	800ea92 <_vfiprintf_r+0xe2>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	1d19      	adds	r1, r3, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	9103      	str	r1, [sp, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfbb      	ittet	lt
 800eaf8:	425b      	neglt	r3, r3
 800eafa:	f042 0202 	orrlt.w	r2, r2, #2
 800eafe:	9307      	strge	r3, [sp, #28]
 800eb00:	9307      	strlt	r3, [sp, #28]
 800eb02:	bfb8      	it	lt
 800eb04:	9204      	strlt	r2, [sp, #16]
 800eb06:	7823      	ldrb	r3, [r4, #0]
 800eb08:	2b2e      	cmp	r3, #46	; 0x2e
 800eb0a:	d10c      	bne.n	800eb26 <_vfiprintf_r+0x176>
 800eb0c:	7863      	ldrb	r3, [r4, #1]
 800eb0e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb10:	d135      	bne.n	800eb7e <_vfiprintf_r+0x1ce>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	1d1a      	adds	r2, r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9203      	str	r2, [sp, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bfb8      	it	lt
 800eb1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb22:	3402      	adds	r4, #2
 800eb24:	9305      	str	r3, [sp, #20]
 800eb26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec0c <_vfiprintf_r+0x25c>
 800eb2a:	7821      	ldrb	r1, [r4, #0]
 800eb2c:	2203      	movs	r2, #3
 800eb2e:	4650      	mov	r0, sl
 800eb30:	f7f1 fb76 	bl	8000220 <memchr>
 800eb34:	b140      	cbz	r0, 800eb48 <_vfiprintf_r+0x198>
 800eb36:	2340      	movs	r3, #64	; 0x40
 800eb38:	eba0 000a 	sub.w	r0, r0, sl
 800eb3c:	fa03 f000 	lsl.w	r0, r3, r0
 800eb40:	9b04      	ldr	r3, [sp, #16]
 800eb42:	4303      	orrs	r3, r0
 800eb44:	3401      	adds	r4, #1
 800eb46:	9304      	str	r3, [sp, #16]
 800eb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4c:	482c      	ldr	r0, [pc, #176]	; (800ec00 <_vfiprintf_r+0x250>)
 800eb4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb52:	2206      	movs	r2, #6
 800eb54:	f7f1 fb64 	bl	8000220 <memchr>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d03f      	beq.n	800ebdc <_vfiprintf_r+0x22c>
 800eb5c:	4b29      	ldr	r3, [pc, #164]	; (800ec04 <_vfiprintf_r+0x254>)
 800eb5e:	bb1b      	cbnz	r3, 800eba8 <_vfiprintf_r+0x1f8>
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	3307      	adds	r3, #7
 800eb64:	f023 0307 	bic.w	r3, r3, #7
 800eb68:	3308      	adds	r3, #8
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6e:	443b      	add	r3, r7
 800eb70:	9309      	str	r3, [sp, #36]	; 0x24
 800eb72:	e767      	b.n	800ea44 <_vfiprintf_r+0x94>
 800eb74:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb78:	460c      	mov	r4, r1
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	e7a5      	b.n	800eaca <_vfiprintf_r+0x11a>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	3401      	adds	r4, #1
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	4619      	mov	r1, r3
 800eb86:	f04f 0c0a 	mov.w	ip, #10
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb90:	3a30      	subs	r2, #48	; 0x30
 800eb92:	2a09      	cmp	r2, #9
 800eb94:	d903      	bls.n	800eb9e <_vfiprintf_r+0x1ee>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c5      	beq.n	800eb26 <_vfiprintf_r+0x176>
 800eb9a:	9105      	str	r1, [sp, #20]
 800eb9c:	e7c3      	b.n	800eb26 <_vfiprintf_r+0x176>
 800eb9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba2:	4604      	mov	r4, r0
 800eba4:	2301      	movs	r3, #1
 800eba6:	e7f0      	b.n	800eb8a <_vfiprintf_r+0x1da>
 800eba8:	ab03      	add	r3, sp, #12
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	462a      	mov	r2, r5
 800ebae:	4b16      	ldr	r3, [pc, #88]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebb0:	a904      	add	r1, sp, #16
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f3af 8000 	nop.w
 800ebb8:	4607      	mov	r7, r0
 800ebba:	1c78      	adds	r0, r7, #1
 800ebbc:	d1d6      	bne.n	800eb6c <_vfiprintf_r+0x1bc>
 800ebbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebc0:	07d9      	lsls	r1, r3, #31
 800ebc2:	d405      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebc4:	89ab      	ldrh	r3, [r5, #12]
 800ebc6:	059a      	lsls	r2, r3, #22
 800ebc8:	d402      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebcc:	f7ff fe13 	bl	800e7f6 <__retarget_lock_release_recursive>
 800ebd0:	89ab      	ldrh	r3, [r5, #12]
 800ebd2:	065b      	lsls	r3, r3, #25
 800ebd4:	f53f af12 	bmi.w	800e9fc <_vfiprintf_r+0x4c>
 800ebd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebda:	e711      	b.n	800ea00 <_vfiprintf_r+0x50>
 800ebdc:	ab03      	add	r3, sp, #12
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	462a      	mov	r2, r5
 800ebe2:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebe4:	a904      	add	r1, sp, #16
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f000 f880 	bl	800ecec <_printf_i>
 800ebec:	e7e4      	b.n	800ebb8 <_vfiprintf_r+0x208>
 800ebee:	bf00      	nop
 800ebf0:	08012154 	.word	0x08012154
 800ebf4:	08012174 	.word	0x08012174
 800ebf8:	08012134 	.word	0x08012134
 800ebfc:	08012194 	.word	0x08012194
 800ec00:	0801219e 	.word	0x0801219e
 800ec04:	00000000 	.word	0x00000000
 800ec08:	0800e98b 	.word	0x0800e98b
 800ec0c:	0801219a 	.word	0x0801219a

0800ec10 <_printf_common>:
 800ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec14:	4616      	mov	r6, r2
 800ec16:	4699      	mov	r9, r3
 800ec18:	688a      	ldr	r2, [r1, #8]
 800ec1a:	690b      	ldr	r3, [r1, #16]
 800ec1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec20:	4293      	cmp	r3, r2
 800ec22:	bfb8      	it	lt
 800ec24:	4613      	movlt	r3, r2
 800ec26:	6033      	str	r3, [r6, #0]
 800ec28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	460c      	mov	r4, r1
 800ec30:	b10a      	cbz	r2, 800ec36 <_printf_common+0x26>
 800ec32:	3301      	adds	r3, #1
 800ec34:	6033      	str	r3, [r6, #0]
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	0699      	lsls	r1, r3, #26
 800ec3a:	bf42      	ittt	mi
 800ec3c:	6833      	ldrmi	r3, [r6, #0]
 800ec3e:	3302      	addmi	r3, #2
 800ec40:	6033      	strmi	r3, [r6, #0]
 800ec42:	6825      	ldr	r5, [r4, #0]
 800ec44:	f015 0506 	ands.w	r5, r5, #6
 800ec48:	d106      	bne.n	800ec58 <_printf_common+0x48>
 800ec4a:	f104 0a19 	add.w	sl, r4, #25
 800ec4e:	68e3      	ldr	r3, [r4, #12]
 800ec50:	6832      	ldr	r2, [r6, #0]
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	42ab      	cmp	r3, r5
 800ec56:	dc26      	bgt.n	800eca6 <_printf_common+0x96>
 800ec58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec5c:	1e13      	subs	r3, r2, #0
 800ec5e:	6822      	ldr	r2, [r4, #0]
 800ec60:	bf18      	it	ne
 800ec62:	2301      	movne	r3, #1
 800ec64:	0692      	lsls	r2, r2, #26
 800ec66:	d42b      	bmi.n	800ecc0 <_printf_common+0xb0>
 800ec68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	4638      	mov	r0, r7
 800ec70:	47c0      	blx	r8
 800ec72:	3001      	adds	r0, #1
 800ec74:	d01e      	beq.n	800ecb4 <_printf_common+0xa4>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	68e5      	ldr	r5, [r4, #12]
 800ec7a:	6832      	ldr	r2, [r6, #0]
 800ec7c:	f003 0306 	and.w	r3, r3, #6
 800ec80:	2b04      	cmp	r3, #4
 800ec82:	bf08      	it	eq
 800ec84:	1aad      	subeq	r5, r5, r2
 800ec86:	68a3      	ldr	r3, [r4, #8]
 800ec88:	6922      	ldr	r2, [r4, #16]
 800ec8a:	bf0c      	ite	eq
 800ec8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec90:	2500      	movne	r5, #0
 800ec92:	4293      	cmp	r3, r2
 800ec94:	bfc4      	itt	gt
 800ec96:	1a9b      	subgt	r3, r3, r2
 800ec98:	18ed      	addgt	r5, r5, r3
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	341a      	adds	r4, #26
 800ec9e:	42b5      	cmp	r5, r6
 800eca0:	d11a      	bne.n	800ecd8 <_printf_common+0xc8>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e008      	b.n	800ecb8 <_printf_common+0xa8>
 800eca6:	2301      	movs	r3, #1
 800eca8:	4652      	mov	r2, sl
 800ecaa:	4649      	mov	r1, r9
 800ecac:	4638      	mov	r0, r7
 800ecae:	47c0      	blx	r8
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d103      	bne.n	800ecbc <_printf_common+0xac>
 800ecb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	e7c6      	b.n	800ec4e <_printf_common+0x3e>
 800ecc0:	18e1      	adds	r1, r4, r3
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	2030      	movs	r0, #48	; 0x30
 800ecc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecca:	4422      	add	r2, r4
 800eccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecd4:	3302      	adds	r3, #2
 800ecd6:	e7c7      	b.n	800ec68 <_printf_common+0x58>
 800ecd8:	2301      	movs	r3, #1
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4649      	mov	r1, r9
 800ecde:	4638      	mov	r0, r7
 800ece0:	47c0      	blx	r8
 800ece2:	3001      	adds	r0, #1
 800ece4:	d0e6      	beq.n	800ecb4 <_printf_common+0xa4>
 800ece6:	3601      	adds	r6, #1
 800ece8:	e7d9      	b.n	800ec9e <_printf_common+0x8e>
	...

0800ecec <_printf_i>:
 800ecec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecf0:	460c      	mov	r4, r1
 800ecf2:	4691      	mov	r9, r2
 800ecf4:	7e27      	ldrb	r7, [r4, #24]
 800ecf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ecf8:	2f78      	cmp	r7, #120	; 0x78
 800ecfa:	4680      	mov	r8, r0
 800ecfc:	469a      	mov	sl, r3
 800ecfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed02:	d807      	bhi.n	800ed14 <_printf_i+0x28>
 800ed04:	2f62      	cmp	r7, #98	; 0x62
 800ed06:	d80a      	bhi.n	800ed1e <_printf_i+0x32>
 800ed08:	2f00      	cmp	r7, #0
 800ed0a:	f000 80d8 	beq.w	800eebe <_printf_i+0x1d2>
 800ed0e:	2f58      	cmp	r7, #88	; 0x58
 800ed10:	f000 80a3 	beq.w	800ee5a <_printf_i+0x16e>
 800ed14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed1c:	e03a      	b.n	800ed94 <_printf_i+0xa8>
 800ed1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed22:	2b15      	cmp	r3, #21
 800ed24:	d8f6      	bhi.n	800ed14 <_printf_i+0x28>
 800ed26:	a001      	add	r0, pc, #4	; (adr r0, 800ed2c <_printf_i+0x40>)
 800ed28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed2c:	0800ed85 	.word	0x0800ed85
 800ed30:	0800ed99 	.word	0x0800ed99
 800ed34:	0800ed15 	.word	0x0800ed15
 800ed38:	0800ed15 	.word	0x0800ed15
 800ed3c:	0800ed15 	.word	0x0800ed15
 800ed40:	0800ed15 	.word	0x0800ed15
 800ed44:	0800ed99 	.word	0x0800ed99
 800ed48:	0800ed15 	.word	0x0800ed15
 800ed4c:	0800ed15 	.word	0x0800ed15
 800ed50:	0800ed15 	.word	0x0800ed15
 800ed54:	0800ed15 	.word	0x0800ed15
 800ed58:	0800eea5 	.word	0x0800eea5
 800ed5c:	0800edc9 	.word	0x0800edc9
 800ed60:	0800ee87 	.word	0x0800ee87
 800ed64:	0800ed15 	.word	0x0800ed15
 800ed68:	0800ed15 	.word	0x0800ed15
 800ed6c:	0800eec7 	.word	0x0800eec7
 800ed70:	0800ed15 	.word	0x0800ed15
 800ed74:	0800edc9 	.word	0x0800edc9
 800ed78:	0800ed15 	.word	0x0800ed15
 800ed7c:	0800ed15 	.word	0x0800ed15
 800ed80:	0800ee8f 	.word	0x0800ee8f
 800ed84:	680b      	ldr	r3, [r1, #0]
 800ed86:	1d1a      	adds	r2, r3, #4
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	600a      	str	r2, [r1, #0]
 800ed8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed94:	2301      	movs	r3, #1
 800ed96:	e0a3      	b.n	800eee0 <_printf_i+0x1f4>
 800ed98:	6825      	ldr	r5, [r4, #0]
 800ed9a:	6808      	ldr	r0, [r1, #0]
 800ed9c:	062e      	lsls	r6, r5, #24
 800ed9e:	f100 0304 	add.w	r3, r0, #4
 800eda2:	d50a      	bpl.n	800edba <_printf_i+0xce>
 800eda4:	6805      	ldr	r5, [r0, #0]
 800eda6:	600b      	str	r3, [r1, #0]
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	da03      	bge.n	800edb4 <_printf_i+0xc8>
 800edac:	232d      	movs	r3, #45	; 0x2d
 800edae:	426d      	negs	r5, r5
 800edb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edb4:	485e      	ldr	r0, [pc, #376]	; (800ef30 <_printf_i+0x244>)
 800edb6:	230a      	movs	r3, #10
 800edb8:	e019      	b.n	800edee <_printf_i+0x102>
 800edba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800edbe:	6805      	ldr	r5, [r0, #0]
 800edc0:	600b      	str	r3, [r1, #0]
 800edc2:	bf18      	it	ne
 800edc4:	b22d      	sxthne	r5, r5
 800edc6:	e7ef      	b.n	800eda8 <_printf_i+0xbc>
 800edc8:	680b      	ldr	r3, [r1, #0]
 800edca:	6825      	ldr	r5, [r4, #0]
 800edcc:	1d18      	adds	r0, r3, #4
 800edce:	6008      	str	r0, [r1, #0]
 800edd0:	0628      	lsls	r0, r5, #24
 800edd2:	d501      	bpl.n	800edd8 <_printf_i+0xec>
 800edd4:	681d      	ldr	r5, [r3, #0]
 800edd6:	e002      	b.n	800edde <_printf_i+0xf2>
 800edd8:	0669      	lsls	r1, r5, #25
 800edda:	d5fb      	bpl.n	800edd4 <_printf_i+0xe8>
 800eddc:	881d      	ldrh	r5, [r3, #0]
 800edde:	4854      	ldr	r0, [pc, #336]	; (800ef30 <_printf_i+0x244>)
 800ede0:	2f6f      	cmp	r7, #111	; 0x6f
 800ede2:	bf0c      	ite	eq
 800ede4:	2308      	moveq	r3, #8
 800ede6:	230a      	movne	r3, #10
 800ede8:	2100      	movs	r1, #0
 800edea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edee:	6866      	ldr	r6, [r4, #4]
 800edf0:	60a6      	str	r6, [r4, #8]
 800edf2:	2e00      	cmp	r6, #0
 800edf4:	bfa2      	ittt	ge
 800edf6:	6821      	ldrge	r1, [r4, #0]
 800edf8:	f021 0104 	bicge.w	r1, r1, #4
 800edfc:	6021      	strge	r1, [r4, #0]
 800edfe:	b90d      	cbnz	r5, 800ee04 <_printf_i+0x118>
 800ee00:	2e00      	cmp	r6, #0
 800ee02:	d04d      	beq.n	800eea0 <_printf_i+0x1b4>
 800ee04:	4616      	mov	r6, r2
 800ee06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ee0e:	5dc7      	ldrb	r7, [r0, r7]
 800ee10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee14:	462f      	mov	r7, r5
 800ee16:	42bb      	cmp	r3, r7
 800ee18:	460d      	mov	r5, r1
 800ee1a:	d9f4      	bls.n	800ee06 <_printf_i+0x11a>
 800ee1c:	2b08      	cmp	r3, #8
 800ee1e:	d10b      	bne.n	800ee38 <_printf_i+0x14c>
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	07df      	lsls	r7, r3, #31
 800ee24:	d508      	bpl.n	800ee38 <_printf_i+0x14c>
 800ee26:	6923      	ldr	r3, [r4, #16]
 800ee28:	6861      	ldr	r1, [r4, #4]
 800ee2a:	4299      	cmp	r1, r3
 800ee2c:	bfde      	ittt	le
 800ee2e:	2330      	movle	r3, #48	; 0x30
 800ee30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee38:	1b92      	subs	r2, r2, r6
 800ee3a:	6122      	str	r2, [r4, #16]
 800ee3c:	f8cd a000 	str.w	sl, [sp]
 800ee40:	464b      	mov	r3, r9
 800ee42:	aa03      	add	r2, sp, #12
 800ee44:	4621      	mov	r1, r4
 800ee46:	4640      	mov	r0, r8
 800ee48:	f7ff fee2 	bl	800ec10 <_printf_common>
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	d14c      	bne.n	800eeea <_printf_i+0x1fe>
 800ee50:	f04f 30ff 	mov.w	r0, #4294967295
 800ee54:	b004      	add	sp, #16
 800ee56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5a:	4835      	ldr	r0, [pc, #212]	; (800ef30 <_printf_i+0x244>)
 800ee5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	680e      	ldr	r6, [r1, #0]
 800ee64:	061f      	lsls	r7, r3, #24
 800ee66:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee6a:	600e      	str	r6, [r1, #0]
 800ee6c:	d514      	bpl.n	800ee98 <_printf_i+0x1ac>
 800ee6e:	07d9      	lsls	r1, r3, #31
 800ee70:	bf44      	itt	mi
 800ee72:	f043 0320 	orrmi.w	r3, r3, #32
 800ee76:	6023      	strmi	r3, [r4, #0]
 800ee78:	b91d      	cbnz	r5, 800ee82 <_printf_i+0x196>
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	f023 0320 	bic.w	r3, r3, #32
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	2310      	movs	r3, #16
 800ee84:	e7b0      	b.n	800ede8 <_printf_i+0xfc>
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	f043 0320 	orr.w	r3, r3, #32
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	2378      	movs	r3, #120	; 0x78
 800ee90:	4828      	ldr	r0, [pc, #160]	; (800ef34 <_printf_i+0x248>)
 800ee92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee96:	e7e3      	b.n	800ee60 <_printf_i+0x174>
 800ee98:	065e      	lsls	r6, r3, #25
 800ee9a:	bf48      	it	mi
 800ee9c:	b2ad      	uxthmi	r5, r5
 800ee9e:	e7e6      	b.n	800ee6e <_printf_i+0x182>
 800eea0:	4616      	mov	r6, r2
 800eea2:	e7bb      	b.n	800ee1c <_printf_i+0x130>
 800eea4:	680b      	ldr	r3, [r1, #0]
 800eea6:	6826      	ldr	r6, [r4, #0]
 800eea8:	6960      	ldr	r0, [r4, #20]
 800eeaa:	1d1d      	adds	r5, r3, #4
 800eeac:	600d      	str	r5, [r1, #0]
 800eeae:	0635      	lsls	r5, r6, #24
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	d501      	bpl.n	800eeb8 <_printf_i+0x1cc>
 800eeb4:	6018      	str	r0, [r3, #0]
 800eeb6:	e002      	b.n	800eebe <_printf_i+0x1d2>
 800eeb8:	0671      	lsls	r1, r6, #25
 800eeba:	d5fb      	bpl.n	800eeb4 <_printf_i+0x1c8>
 800eebc:	8018      	strh	r0, [r3, #0]
 800eebe:	2300      	movs	r3, #0
 800eec0:	6123      	str	r3, [r4, #16]
 800eec2:	4616      	mov	r6, r2
 800eec4:	e7ba      	b.n	800ee3c <_printf_i+0x150>
 800eec6:	680b      	ldr	r3, [r1, #0]
 800eec8:	1d1a      	adds	r2, r3, #4
 800eeca:	600a      	str	r2, [r1, #0]
 800eecc:	681e      	ldr	r6, [r3, #0]
 800eece:	6862      	ldr	r2, [r4, #4]
 800eed0:	2100      	movs	r1, #0
 800eed2:	4630      	mov	r0, r6
 800eed4:	f7f1 f9a4 	bl	8000220 <memchr>
 800eed8:	b108      	cbz	r0, 800eede <_printf_i+0x1f2>
 800eeda:	1b80      	subs	r0, r0, r6
 800eedc:	6060      	str	r0, [r4, #4]
 800eede:	6863      	ldr	r3, [r4, #4]
 800eee0:	6123      	str	r3, [r4, #16]
 800eee2:	2300      	movs	r3, #0
 800eee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eee8:	e7a8      	b.n	800ee3c <_printf_i+0x150>
 800eeea:	6923      	ldr	r3, [r4, #16]
 800eeec:	4632      	mov	r2, r6
 800eeee:	4649      	mov	r1, r9
 800eef0:	4640      	mov	r0, r8
 800eef2:	47d0      	blx	sl
 800eef4:	3001      	adds	r0, #1
 800eef6:	d0ab      	beq.n	800ee50 <_printf_i+0x164>
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	079b      	lsls	r3, r3, #30
 800eefc:	d413      	bmi.n	800ef26 <_printf_i+0x23a>
 800eefe:	68e0      	ldr	r0, [r4, #12]
 800ef00:	9b03      	ldr	r3, [sp, #12]
 800ef02:	4298      	cmp	r0, r3
 800ef04:	bfb8      	it	lt
 800ef06:	4618      	movlt	r0, r3
 800ef08:	e7a4      	b.n	800ee54 <_printf_i+0x168>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	4632      	mov	r2, r6
 800ef0e:	4649      	mov	r1, r9
 800ef10:	4640      	mov	r0, r8
 800ef12:	47d0      	blx	sl
 800ef14:	3001      	adds	r0, #1
 800ef16:	d09b      	beq.n	800ee50 <_printf_i+0x164>
 800ef18:	3501      	adds	r5, #1
 800ef1a:	68e3      	ldr	r3, [r4, #12]
 800ef1c:	9903      	ldr	r1, [sp, #12]
 800ef1e:	1a5b      	subs	r3, r3, r1
 800ef20:	42ab      	cmp	r3, r5
 800ef22:	dcf2      	bgt.n	800ef0a <_printf_i+0x21e>
 800ef24:	e7eb      	b.n	800eefe <_printf_i+0x212>
 800ef26:	2500      	movs	r5, #0
 800ef28:	f104 0619 	add.w	r6, r4, #25
 800ef2c:	e7f5      	b.n	800ef1a <_printf_i+0x22e>
 800ef2e:	bf00      	nop
 800ef30:	080121a5 	.word	0x080121a5
 800ef34:	080121b6 	.word	0x080121b6

0800ef38 <_sbrk_r>:
 800ef38:	b538      	push	{r3, r4, r5, lr}
 800ef3a:	4d06      	ldr	r5, [pc, #24]	; (800ef54 <_sbrk_r+0x1c>)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	4604      	mov	r4, r0
 800ef40:	4608      	mov	r0, r1
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	f7f1 fd84 	bl	8000a50 <_sbrk>
 800ef48:	1c43      	adds	r3, r0, #1
 800ef4a:	d102      	bne.n	800ef52 <_sbrk_r+0x1a>
 800ef4c:	682b      	ldr	r3, [r5, #0]
 800ef4e:	b103      	cbz	r3, 800ef52 <_sbrk_r+0x1a>
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	bd38      	pop	{r3, r4, r5, pc}
 800ef54:	20008a78 	.word	0x20008a78

0800ef58 <__sread>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef60:	f000 fa6c 	bl	800f43c <_read_r>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	bfab      	itete	ge
 800ef68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ef6c:	181b      	addge	r3, r3, r0
 800ef6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef72:	bfac      	ite	ge
 800ef74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef76:	81a3      	strhlt	r3, [r4, #12]
 800ef78:	bd10      	pop	{r4, pc}

0800ef7a <__swrite>:
 800ef7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7e:	461f      	mov	r7, r3
 800ef80:	898b      	ldrh	r3, [r1, #12]
 800ef82:	05db      	lsls	r3, r3, #23
 800ef84:	4605      	mov	r5, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	4616      	mov	r6, r2
 800ef8a:	d505      	bpl.n	800ef98 <__swrite+0x1e>
 800ef8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef90:	2302      	movs	r3, #2
 800ef92:	2200      	movs	r2, #0
 800ef94:	f000 f9d0 	bl	800f338 <_lseek_r>
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efa2:	81a3      	strh	r3, [r4, #12]
 800efa4:	4632      	mov	r2, r6
 800efa6:	463b      	mov	r3, r7
 800efa8:	4628      	mov	r0, r5
 800efaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efae:	f000 b869 	b.w	800f084 <_write_r>

0800efb2 <__sseek>:
 800efb2:	b510      	push	{r4, lr}
 800efb4:	460c      	mov	r4, r1
 800efb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efba:	f000 f9bd 	bl	800f338 <_lseek_r>
 800efbe:	1c43      	adds	r3, r0, #1
 800efc0:	89a3      	ldrh	r3, [r4, #12]
 800efc2:	bf15      	itete	ne
 800efc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800efc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efce:	81a3      	strheq	r3, [r4, #12]
 800efd0:	bf18      	it	ne
 800efd2:	81a3      	strhne	r3, [r4, #12]
 800efd4:	bd10      	pop	{r4, pc}

0800efd6 <__sclose>:
 800efd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efda:	f000 b8db 	b.w	800f194 <_close_r>
	...

0800efe0 <__swbuf_r>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	460e      	mov	r6, r1
 800efe4:	4614      	mov	r4, r2
 800efe6:	4605      	mov	r5, r0
 800efe8:	b118      	cbz	r0, 800eff2 <__swbuf_r+0x12>
 800efea:	6983      	ldr	r3, [r0, #24]
 800efec:	b90b      	cbnz	r3, 800eff2 <__swbuf_r+0x12>
 800efee:	f7ff fb51 	bl	800e694 <__sinit>
 800eff2:	4b21      	ldr	r3, [pc, #132]	; (800f078 <__swbuf_r+0x98>)
 800eff4:	429c      	cmp	r4, r3
 800eff6:	d12b      	bne.n	800f050 <__swbuf_r+0x70>
 800eff8:	686c      	ldr	r4, [r5, #4]
 800effa:	69a3      	ldr	r3, [r4, #24]
 800effc:	60a3      	str	r3, [r4, #8]
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	071a      	lsls	r2, r3, #28
 800f002:	d52f      	bpl.n	800f064 <__swbuf_r+0x84>
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	b36b      	cbz	r3, 800f064 <__swbuf_r+0x84>
 800f008:	6923      	ldr	r3, [r4, #16]
 800f00a:	6820      	ldr	r0, [r4, #0]
 800f00c:	1ac0      	subs	r0, r0, r3
 800f00e:	6963      	ldr	r3, [r4, #20]
 800f010:	b2f6      	uxtb	r6, r6
 800f012:	4283      	cmp	r3, r0
 800f014:	4637      	mov	r7, r6
 800f016:	dc04      	bgt.n	800f022 <__swbuf_r+0x42>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f950 	bl	800f2c0 <_fflush_r>
 800f020:	bb30      	cbnz	r0, 800f070 <__swbuf_r+0x90>
 800f022:	68a3      	ldr	r3, [r4, #8]
 800f024:	3b01      	subs	r3, #1
 800f026:	60a3      	str	r3, [r4, #8]
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	6022      	str	r2, [r4, #0]
 800f02e:	701e      	strb	r6, [r3, #0]
 800f030:	6963      	ldr	r3, [r4, #20]
 800f032:	3001      	adds	r0, #1
 800f034:	4283      	cmp	r3, r0
 800f036:	d004      	beq.n	800f042 <__swbuf_r+0x62>
 800f038:	89a3      	ldrh	r3, [r4, #12]
 800f03a:	07db      	lsls	r3, r3, #31
 800f03c:	d506      	bpl.n	800f04c <__swbuf_r+0x6c>
 800f03e:	2e0a      	cmp	r6, #10
 800f040:	d104      	bne.n	800f04c <__swbuf_r+0x6c>
 800f042:	4621      	mov	r1, r4
 800f044:	4628      	mov	r0, r5
 800f046:	f000 f93b 	bl	800f2c0 <_fflush_r>
 800f04a:	b988      	cbnz	r0, 800f070 <__swbuf_r+0x90>
 800f04c:	4638      	mov	r0, r7
 800f04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f050:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <__swbuf_r+0x9c>)
 800f052:	429c      	cmp	r4, r3
 800f054:	d101      	bne.n	800f05a <__swbuf_r+0x7a>
 800f056:	68ac      	ldr	r4, [r5, #8]
 800f058:	e7cf      	b.n	800effa <__swbuf_r+0x1a>
 800f05a:	4b09      	ldr	r3, [pc, #36]	; (800f080 <__swbuf_r+0xa0>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	bf08      	it	eq
 800f060:	68ec      	ldreq	r4, [r5, #12]
 800f062:	e7ca      	b.n	800effa <__swbuf_r+0x1a>
 800f064:	4621      	mov	r1, r4
 800f066:	4628      	mov	r0, r5
 800f068:	f000 f81e 	bl	800f0a8 <__swsetup_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d0cb      	beq.n	800f008 <__swbuf_r+0x28>
 800f070:	f04f 37ff 	mov.w	r7, #4294967295
 800f074:	e7ea      	b.n	800f04c <__swbuf_r+0x6c>
 800f076:	bf00      	nop
 800f078:	08012154 	.word	0x08012154
 800f07c:	08012174 	.word	0x08012174
 800f080:	08012134 	.word	0x08012134

0800f084 <_write_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d07      	ldr	r5, [pc, #28]	; (800f0a4 <_write_r+0x20>)
 800f088:	4604      	mov	r4, r0
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	602a      	str	r2, [r5, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	f7f1 fc8b 	bl	80009ae <_write>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_write_r+0x1e>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_write_r+0x1e>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	20008a78 	.word	0x20008a78

0800f0a8 <__swsetup_r>:
 800f0a8:	4b32      	ldr	r3, [pc, #200]	; (800f174 <__swsetup_r+0xcc>)
 800f0aa:	b570      	push	{r4, r5, r6, lr}
 800f0ac:	681d      	ldr	r5, [r3, #0]
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	b125      	cbz	r5, 800f0be <__swsetup_r+0x16>
 800f0b4:	69ab      	ldr	r3, [r5, #24]
 800f0b6:	b913      	cbnz	r3, 800f0be <__swsetup_r+0x16>
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f7ff faeb 	bl	800e694 <__sinit>
 800f0be:	4b2e      	ldr	r3, [pc, #184]	; (800f178 <__swsetup_r+0xd0>)
 800f0c0:	429c      	cmp	r4, r3
 800f0c2:	d10f      	bne.n	800f0e4 <__swsetup_r+0x3c>
 800f0c4:	686c      	ldr	r4, [r5, #4]
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0cc:	0719      	lsls	r1, r3, #28
 800f0ce:	d42c      	bmi.n	800f12a <__swsetup_r+0x82>
 800f0d0:	06dd      	lsls	r5, r3, #27
 800f0d2:	d411      	bmi.n	800f0f8 <__swsetup_r+0x50>
 800f0d4:	2309      	movs	r3, #9
 800f0d6:	6033      	str	r3, [r6, #0]
 800f0d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0dc:	81a3      	strh	r3, [r4, #12]
 800f0de:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e2:	e03e      	b.n	800f162 <__swsetup_r+0xba>
 800f0e4:	4b25      	ldr	r3, [pc, #148]	; (800f17c <__swsetup_r+0xd4>)
 800f0e6:	429c      	cmp	r4, r3
 800f0e8:	d101      	bne.n	800f0ee <__swsetup_r+0x46>
 800f0ea:	68ac      	ldr	r4, [r5, #8]
 800f0ec:	e7eb      	b.n	800f0c6 <__swsetup_r+0x1e>
 800f0ee:	4b24      	ldr	r3, [pc, #144]	; (800f180 <__swsetup_r+0xd8>)
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	bf08      	it	eq
 800f0f4:	68ec      	ldreq	r4, [r5, #12]
 800f0f6:	e7e6      	b.n	800f0c6 <__swsetup_r+0x1e>
 800f0f8:	0758      	lsls	r0, r3, #29
 800f0fa:	d512      	bpl.n	800f122 <__swsetup_r+0x7a>
 800f0fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0fe:	b141      	cbz	r1, 800f112 <__swsetup_r+0x6a>
 800f100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f104:	4299      	cmp	r1, r3
 800f106:	d002      	beq.n	800f10e <__swsetup_r+0x66>
 800f108:	4630      	mov	r0, r6
 800f10a:	f7ff fb7d 	bl	800e808 <_free_r>
 800f10e:	2300      	movs	r3, #0
 800f110:	6363      	str	r3, [r4, #52]	; 0x34
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f118:	81a3      	strh	r3, [r4, #12]
 800f11a:	2300      	movs	r3, #0
 800f11c:	6063      	str	r3, [r4, #4]
 800f11e:	6923      	ldr	r3, [r4, #16]
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	f043 0308 	orr.w	r3, r3, #8
 800f128:	81a3      	strh	r3, [r4, #12]
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	b94b      	cbnz	r3, 800f142 <__swsetup_r+0x9a>
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f138:	d003      	beq.n	800f142 <__swsetup_r+0x9a>
 800f13a:	4621      	mov	r1, r4
 800f13c:	4630      	mov	r0, r6
 800f13e:	f000 f931 	bl	800f3a4 <__smakebuf_r>
 800f142:	89a0      	ldrh	r0, [r4, #12]
 800f144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f148:	f010 0301 	ands.w	r3, r0, #1
 800f14c:	d00a      	beq.n	800f164 <__swsetup_r+0xbc>
 800f14e:	2300      	movs	r3, #0
 800f150:	60a3      	str	r3, [r4, #8]
 800f152:	6963      	ldr	r3, [r4, #20]
 800f154:	425b      	negs	r3, r3
 800f156:	61a3      	str	r3, [r4, #24]
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	b943      	cbnz	r3, 800f16e <__swsetup_r+0xc6>
 800f15c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f160:	d1ba      	bne.n	800f0d8 <__swsetup_r+0x30>
 800f162:	bd70      	pop	{r4, r5, r6, pc}
 800f164:	0781      	lsls	r1, r0, #30
 800f166:	bf58      	it	pl
 800f168:	6963      	ldrpl	r3, [r4, #20]
 800f16a:	60a3      	str	r3, [r4, #8]
 800f16c:	e7f4      	b.n	800f158 <__swsetup_r+0xb0>
 800f16e:	2000      	movs	r0, #0
 800f170:	e7f7      	b.n	800f162 <__swsetup_r+0xba>
 800f172:	bf00      	nop
 800f174:	20000014 	.word	0x20000014
 800f178:	08012154 	.word	0x08012154
 800f17c:	08012174 	.word	0x08012174
 800f180:	08012134 	.word	0x08012134

0800f184 <abort>:
 800f184:	b508      	push	{r3, lr}
 800f186:	2006      	movs	r0, #6
 800f188:	f000 f992 	bl	800f4b0 <raise>
 800f18c:	2001      	movs	r0, #1
 800f18e:	f7f1 fbe7 	bl	8000960 <_exit>
	...

0800f194 <_close_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4d06      	ldr	r5, [pc, #24]	; (800f1b0 <_close_r+0x1c>)
 800f198:	2300      	movs	r3, #0
 800f19a:	4604      	mov	r4, r0
 800f19c:	4608      	mov	r0, r1
 800f19e:	602b      	str	r3, [r5, #0]
 800f1a0:	f7f1 fc21 	bl	80009e6 <_close>
 800f1a4:	1c43      	adds	r3, r0, #1
 800f1a6:	d102      	bne.n	800f1ae <_close_r+0x1a>
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	b103      	cbz	r3, 800f1ae <_close_r+0x1a>
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	20008a78 	.word	0x20008a78

0800f1b4 <__sflush_r>:
 800f1b4:	898a      	ldrh	r2, [r1, #12]
 800f1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	0710      	lsls	r0, r2, #28
 800f1be:	460c      	mov	r4, r1
 800f1c0:	d458      	bmi.n	800f274 <__sflush_r+0xc0>
 800f1c2:	684b      	ldr	r3, [r1, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dc05      	bgt.n	800f1d4 <__sflush_r+0x20>
 800f1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	dc02      	bgt.n	800f1d4 <__sflush_r+0x20>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	d0f9      	beq.n	800f1ce <__sflush_r+0x1a>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e0:	682f      	ldr	r7, [r5, #0]
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	d032      	beq.n	800f24c <__sflush_r+0x98>
 800f1e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	075a      	lsls	r2, r3, #29
 800f1ec:	d505      	bpl.n	800f1fa <__sflush_r+0x46>
 800f1ee:	6863      	ldr	r3, [r4, #4]
 800f1f0:	1ac0      	subs	r0, r0, r3
 800f1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f4:	b10b      	cbz	r3, 800f1fa <__sflush_r+0x46>
 800f1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1f8:	1ac0      	subs	r0, r0, r3
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f200:	6a21      	ldr	r1, [r4, #32]
 800f202:	4628      	mov	r0, r5
 800f204:	47b0      	blx	r6
 800f206:	1c43      	adds	r3, r0, #1
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	d106      	bne.n	800f21a <__sflush_r+0x66>
 800f20c:	6829      	ldr	r1, [r5, #0]
 800f20e:	291d      	cmp	r1, #29
 800f210:	d82c      	bhi.n	800f26c <__sflush_r+0xb8>
 800f212:	4a2a      	ldr	r2, [pc, #168]	; (800f2bc <__sflush_r+0x108>)
 800f214:	40ca      	lsrs	r2, r1
 800f216:	07d6      	lsls	r6, r2, #31
 800f218:	d528      	bpl.n	800f26c <__sflush_r+0xb8>
 800f21a:	2200      	movs	r2, #0
 800f21c:	6062      	str	r2, [r4, #4]
 800f21e:	04d9      	lsls	r1, r3, #19
 800f220:	6922      	ldr	r2, [r4, #16]
 800f222:	6022      	str	r2, [r4, #0]
 800f224:	d504      	bpl.n	800f230 <__sflush_r+0x7c>
 800f226:	1c42      	adds	r2, r0, #1
 800f228:	d101      	bne.n	800f22e <__sflush_r+0x7a>
 800f22a:	682b      	ldr	r3, [r5, #0]
 800f22c:	b903      	cbnz	r3, 800f230 <__sflush_r+0x7c>
 800f22e:	6560      	str	r0, [r4, #84]	; 0x54
 800f230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f232:	602f      	str	r7, [r5, #0]
 800f234:	2900      	cmp	r1, #0
 800f236:	d0ca      	beq.n	800f1ce <__sflush_r+0x1a>
 800f238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f23c:	4299      	cmp	r1, r3
 800f23e:	d002      	beq.n	800f246 <__sflush_r+0x92>
 800f240:	4628      	mov	r0, r5
 800f242:	f7ff fae1 	bl	800e808 <_free_r>
 800f246:	2000      	movs	r0, #0
 800f248:	6360      	str	r0, [r4, #52]	; 0x34
 800f24a:	e7c1      	b.n	800f1d0 <__sflush_r+0x1c>
 800f24c:	6a21      	ldr	r1, [r4, #32]
 800f24e:	2301      	movs	r3, #1
 800f250:	4628      	mov	r0, r5
 800f252:	47b0      	blx	r6
 800f254:	1c41      	adds	r1, r0, #1
 800f256:	d1c7      	bne.n	800f1e8 <__sflush_r+0x34>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0c4      	beq.n	800f1e8 <__sflush_r+0x34>
 800f25e:	2b1d      	cmp	r3, #29
 800f260:	d001      	beq.n	800f266 <__sflush_r+0xb2>
 800f262:	2b16      	cmp	r3, #22
 800f264:	d101      	bne.n	800f26a <__sflush_r+0xb6>
 800f266:	602f      	str	r7, [r5, #0]
 800f268:	e7b1      	b.n	800f1ce <__sflush_r+0x1a>
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	e7ad      	b.n	800f1d0 <__sflush_r+0x1c>
 800f274:	690f      	ldr	r7, [r1, #16]
 800f276:	2f00      	cmp	r7, #0
 800f278:	d0a9      	beq.n	800f1ce <__sflush_r+0x1a>
 800f27a:	0793      	lsls	r3, r2, #30
 800f27c:	680e      	ldr	r6, [r1, #0]
 800f27e:	bf08      	it	eq
 800f280:	694b      	ldreq	r3, [r1, #20]
 800f282:	600f      	str	r7, [r1, #0]
 800f284:	bf18      	it	ne
 800f286:	2300      	movne	r3, #0
 800f288:	eba6 0807 	sub.w	r8, r6, r7
 800f28c:	608b      	str	r3, [r1, #8]
 800f28e:	f1b8 0f00 	cmp.w	r8, #0
 800f292:	dd9c      	ble.n	800f1ce <__sflush_r+0x1a>
 800f294:	6a21      	ldr	r1, [r4, #32]
 800f296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f298:	4643      	mov	r3, r8
 800f29a:	463a      	mov	r2, r7
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b0      	blx	r6
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	dc06      	bgt.n	800f2b2 <__sflush_r+0xfe>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b0:	e78e      	b.n	800f1d0 <__sflush_r+0x1c>
 800f2b2:	4407      	add	r7, r0
 800f2b4:	eba8 0800 	sub.w	r8, r8, r0
 800f2b8:	e7e9      	b.n	800f28e <__sflush_r+0xda>
 800f2ba:	bf00      	nop
 800f2bc:	20400001 	.word	0x20400001

0800f2c0 <_fflush_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	690b      	ldr	r3, [r1, #16]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	b913      	cbnz	r3, 800f2d0 <_fflush_r+0x10>
 800f2ca:	2500      	movs	r5, #0
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	b118      	cbz	r0, 800f2da <_fflush_r+0x1a>
 800f2d2:	6983      	ldr	r3, [r0, #24]
 800f2d4:	b90b      	cbnz	r3, 800f2da <_fflush_r+0x1a>
 800f2d6:	f7ff f9dd 	bl	800e694 <__sinit>
 800f2da:	4b14      	ldr	r3, [pc, #80]	; (800f32c <_fflush_r+0x6c>)
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	d11b      	bne.n	800f318 <_fflush_r+0x58>
 800f2e0:	686c      	ldr	r4, [r5, #4]
 800f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0ef      	beq.n	800f2ca <_fflush_r+0xa>
 800f2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2ec:	07d0      	lsls	r0, r2, #31
 800f2ee:	d404      	bmi.n	800f2fa <_fflush_r+0x3a>
 800f2f0:	0599      	lsls	r1, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_fflush_r+0x3a>
 800f2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2f6:	f7ff fa7d 	bl	800e7f4 <__retarget_lock_acquire_recursive>
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f7ff ff59 	bl	800f1b4 <__sflush_r>
 800f302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f304:	07da      	lsls	r2, r3, #31
 800f306:	4605      	mov	r5, r0
 800f308:	d4e0      	bmi.n	800f2cc <_fflush_r+0xc>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	059b      	lsls	r3, r3, #22
 800f30e:	d4dd      	bmi.n	800f2cc <_fflush_r+0xc>
 800f310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f312:	f7ff fa70 	bl	800e7f6 <__retarget_lock_release_recursive>
 800f316:	e7d9      	b.n	800f2cc <_fflush_r+0xc>
 800f318:	4b05      	ldr	r3, [pc, #20]	; (800f330 <_fflush_r+0x70>)
 800f31a:	429c      	cmp	r4, r3
 800f31c:	d101      	bne.n	800f322 <_fflush_r+0x62>
 800f31e:	68ac      	ldr	r4, [r5, #8]
 800f320:	e7df      	b.n	800f2e2 <_fflush_r+0x22>
 800f322:	4b04      	ldr	r3, [pc, #16]	; (800f334 <_fflush_r+0x74>)
 800f324:	429c      	cmp	r4, r3
 800f326:	bf08      	it	eq
 800f328:	68ec      	ldreq	r4, [r5, #12]
 800f32a:	e7da      	b.n	800f2e2 <_fflush_r+0x22>
 800f32c:	08012154 	.word	0x08012154
 800f330:	08012174 	.word	0x08012174
 800f334:	08012134 	.word	0x08012134

0800f338 <_lseek_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d07      	ldr	r5, [pc, #28]	; (800f358 <_lseek_r+0x20>)
 800f33c:	4604      	mov	r4, r0
 800f33e:	4608      	mov	r0, r1
 800f340:	4611      	mov	r1, r2
 800f342:	2200      	movs	r2, #0
 800f344:	602a      	str	r2, [r5, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	f7f1 fb74 	bl	8000a34 <_lseek>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_lseek_r+0x1e>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	b103      	cbz	r3, 800f356 <_lseek_r+0x1e>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	20008a78 	.word	0x20008a78

0800f35c <__swhatbuf_r>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	460e      	mov	r6, r1
 800f360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f364:	2900      	cmp	r1, #0
 800f366:	b096      	sub	sp, #88	; 0x58
 800f368:	4614      	mov	r4, r2
 800f36a:	461d      	mov	r5, r3
 800f36c:	da07      	bge.n	800f37e <__swhatbuf_r+0x22>
 800f36e:	2300      	movs	r3, #0
 800f370:	602b      	str	r3, [r5, #0]
 800f372:	89b3      	ldrh	r3, [r6, #12]
 800f374:	061a      	lsls	r2, r3, #24
 800f376:	d410      	bmi.n	800f39a <__swhatbuf_r+0x3e>
 800f378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f37c:	e00e      	b.n	800f39c <__swhatbuf_r+0x40>
 800f37e:	466a      	mov	r2, sp
 800f380:	f000 f8b2 	bl	800f4e8 <_fstat_r>
 800f384:	2800      	cmp	r0, #0
 800f386:	dbf2      	blt.n	800f36e <__swhatbuf_r+0x12>
 800f388:	9a01      	ldr	r2, [sp, #4]
 800f38a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f38e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f392:	425a      	negs	r2, r3
 800f394:	415a      	adcs	r2, r3
 800f396:	602a      	str	r2, [r5, #0]
 800f398:	e7ee      	b.n	800f378 <__swhatbuf_r+0x1c>
 800f39a:	2340      	movs	r3, #64	; 0x40
 800f39c:	2000      	movs	r0, #0
 800f39e:	6023      	str	r3, [r4, #0]
 800f3a0:	b016      	add	sp, #88	; 0x58
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}

0800f3a4 <__smakebuf_r>:
 800f3a4:	898b      	ldrh	r3, [r1, #12]
 800f3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3a8:	079d      	lsls	r5, r3, #30
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	460c      	mov	r4, r1
 800f3ae:	d507      	bpl.n	800f3c0 <__smakebuf_r+0x1c>
 800f3b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3b4:	6023      	str	r3, [r4, #0]
 800f3b6:	6123      	str	r3, [r4, #16]
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	6163      	str	r3, [r4, #20]
 800f3bc:	b002      	add	sp, #8
 800f3be:	bd70      	pop	{r4, r5, r6, pc}
 800f3c0:	ab01      	add	r3, sp, #4
 800f3c2:	466a      	mov	r2, sp
 800f3c4:	f7ff ffca 	bl	800f35c <__swhatbuf_r>
 800f3c8:	9900      	ldr	r1, [sp, #0]
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7ff fa6b 	bl	800e8a8 <_malloc_r>
 800f3d2:	b948      	cbnz	r0, 800f3e8 <__smakebuf_r+0x44>
 800f3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d8:	059a      	lsls	r2, r3, #22
 800f3da:	d4ef      	bmi.n	800f3bc <__smakebuf_r+0x18>
 800f3dc:	f023 0303 	bic.w	r3, r3, #3
 800f3e0:	f043 0302 	orr.w	r3, r3, #2
 800f3e4:	81a3      	strh	r3, [r4, #12]
 800f3e6:	e7e3      	b.n	800f3b0 <__smakebuf_r+0xc>
 800f3e8:	4b0d      	ldr	r3, [pc, #52]	; (800f420 <__smakebuf_r+0x7c>)
 800f3ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3ec:	89a3      	ldrh	r3, [r4, #12]
 800f3ee:	6020      	str	r0, [r4, #0]
 800f3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3f4:	81a3      	strh	r3, [r4, #12]
 800f3f6:	9b00      	ldr	r3, [sp, #0]
 800f3f8:	6163      	str	r3, [r4, #20]
 800f3fa:	9b01      	ldr	r3, [sp, #4]
 800f3fc:	6120      	str	r0, [r4, #16]
 800f3fe:	b15b      	cbz	r3, 800f418 <__smakebuf_r+0x74>
 800f400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f404:	4630      	mov	r0, r6
 800f406:	f000 f881 	bl	800f50c <_isatty_r>
 800f40a:	b128      	cbz	r0, 800f418 <__smakebuf_r+0x74>
 800f40c:	89a3      	ldrh	r3, [r4, #12]
 800f40e:	f023 0303 	bic.w	r3, r3, #3
 800f412:	f043 0301 	orr.w	r3, r3, #1
 800f416:	81a3      	strh	r3, [r4, #12]
 800f418:	89a0      	ldrh	r0, [r4, #12]
 800f41a:	4305      	orrs	r5, r0
 800f41c:	81a5      	strh	r5, [r4, #12]
 800f41e:	e7cd      	b.n	800f3bc <__smakebuf_r+0x18>
 800f420:	0800e62d 	.word	0x0800e62d

0800f424 <__malloc_lock>:
 800f424:	4801      	ldr	r0, [pc, #4]	; (800f42c <__malloc_lock+0x8>)
 800f426:	f7ff b9e5 	b.w	800e7f4 <__retarget_lock_acquire_recursive>
 800f42a:	bf00      	nop
 800f42c:	20008a80 	.word	0x20008a80

0800f430 <__malloc_unlock>:
 800f430:	4801      	ldr	r0, [pc, #4]	; (800f438 <__malloc_unlock+0x8>)
 800f432:	f7ff b9e0 	b.w	800e7f6 <__retarget_lock_release_recursive>
 800f436:	bf00      	nop
 800f438:	20008a80 	.word	0x20008a80

0800f43c <_read_r>:
 800f43c:	b538      	push	{r3, r4, r5, lr}
 800f43e:	4d07      	ldr	r5, [pc, #28]	; (800f45c <_read_r+0x20>)
 800f440:	4604      	mov	r4, r0
 800f442:	4608      	mov	r0, r1
 800f444:	4611      	mov	r1, r2
 800f446:	2200      	movs	r2, #0
 800f448:	602a      	str	r2, [r5, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	f7f1 fa92 	bl	8000974 <_read>
 800f450:	1c43      	adds	r3, r0, #1
 800f452:	d102      	bne.n	800f45a <_read_r+0x1e>
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	b103      	cbz	r3, 800f45a <_read_r+0x1e>
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	20008a78 	.word	0x20008a78

0800f460 <_raise_r>:
 800f460:	291f      	cmp	r1, #31
 800f462:	b538      	push	{r3, r4, r5, lr}
 800f464:	4604      	mov	r4, r0
 800f466:	460d      	mov	r5, r1
 800f468:	d904      	bls.n	800f474 <_raise_r+0x14>
 800f46a:	2316      	movs	r3, #22
 800f46c:	6003      	str	r3, [r0, #0]
 800f46e:	f04f 30ff 	mov.w	r0, #4294967295
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f476:	b112      	cbz	r2, 800f47e <_raise_r+0x1e>
 800f478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f47c:	b94b      	cbnz	r3, 800f492 <_raise_r+0x32>
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 f830 	bl	800f4e4 <_getpid_r>
 800f484:	462a      	mov	r2, r5
 800f486:	4601      	mov	r1, r0
 800f488:	4620      	mov	r0, r4
 800f48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f48e:	f000 b817 	b.w	800f4c0 <_kill_r>
 800f492:	2b01      	cmp	r3, #1
 800f494:	d00a      	beq.n	800f4ac <_raise_r+0x4c>
 800f496:	1c59      	adds	r1, r3, #1
 800f498:	d103      	bne.n	800f4a2 <_raise_r+0x42>
 800f49a:	2316      	movs	r3, #22
 800f49c:	6003      	str	r3, [r0, #0]
 800f49e:	2001      	movs	r0, #1
 800f4a0:	e7e7      	b.n	800f472 <_raise_r+0x12>
 800f4a2:	2400      	movs	r4, #0
 800f4a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	4798      	blx	r3
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	e7e0      	b.n	800f472 <_raise_r+0x12>

0800f4b0 <raise>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	; (800f4bc <raise+0xc>)
 800f4b2:	4601      	mov	r1, r0
 800f4b4:	6818      	ldr	r0, [r3, #0]
 800f4b6:	f7ff bfd3 	b.w	800f460 <_raise_r>
 800f4ba:	bf00      	nop
 800f4bc:	20000014 	.word	0x20000014

0800f4c0 <_kill_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4d07      	ldr	r5, [pc, #28]	; (800f4e0 <_kill_r+0x20>)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	f7f1 fa35 	bl	800093c <_kill>
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	d102      	bne.n	800f4dc <_kill_r+0x1c>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	b103      	cbz	r3, 800f4dc <_kill_r+0x1c>
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	bd38      	pop	{r3, r4, r5, pc}
 800f4de:	bf00      	nop
 800f4e0:	20008a78 	.word	0x20008a78

0800f4e4 <_getpid_r>:
 800f4e4:	f7f1 ba22 	b.w	800092c <_getpid>

0800f4e8 <_fstat_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4d07      	ldr	r5, [pc, #28]	; (800f508 <_fstat_r+0x20>)
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	602b      	str	r3, [r5, #0]
 800f4f6:	f7f1 fa82 	bl	80009fe <_fstat>
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	d102      	bne.n	800f504 <_fstat_r+0x1c>
 800f4fe:	682b      	ldr	r3, [r5, #0]
 800f500:	b103      	cbz	r3, 800f504 <_fstat_r+0x1c>
 800f502:	6023      	str	r3, [r4, #0]
 800f504:	bd38      	pop	{r3, r4, r5, pc}
 800f506:	bf00      	nop
 800f508:	20008a78 	.word	0x20008a78

0800f50c <_isatty_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	4d06      	ldr	r5, [pc, #24]	; (800f528 <_isatty_r+0x1c>)
 800f510:	2300      	movs	r3, #0
 800f512:	4604      	mov	r4, r0
 800f514:	4608      	mov	r0, r1
 800f516:	602b      	str	r3, [r5, #0]
 800f518:	f7f1 fa81 	bl	8000a1e <_isatty>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_isatty_r+0x1a>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_isatty_r+0x1a>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20008a78 	.word	0x20008a78

0800f52c <_init>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	bf00      	nop
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr

0800f538 <_fini>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	bf00      	nop
 800f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53e:	bc08      	pop	{r3}
 800f540:	469e      	mov	lr, r3
 800f542:	4770      	bx	lr
